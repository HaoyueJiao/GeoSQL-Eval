{"id": 1, "function": "ST_Collect", "question": "将POINT(1 2)和POINT(-2 3)这两个点合并成集合，并以WKT格式输出。", "sql": "SELECT ST_AsText( ST_Collect( ST_GeomFromText('POINT(1 2)'), ST_GeomFromText('POINT(-2 3)') ));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine the 2D points POINT(1 2) and POINT(-2 3) through spatial aggregation and output the standard WKT (Well-Known Text) string representation of the result.", "source": "original", "new_id": 0}
{"id": 1, "function": "ST_Collect", "question": "合并坐标为(1,2)和(-2,3)的两个点对象，输出合并后的WKT字符串。", "sql": "SELECT ST_AsText( ST_Collect( ST_GeomFromText('POINT(1 2)'), ST_GeomFromText('POINT(-2 3)') ));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine the 2D points POINT(1 2) and POINT(-2 3) through spatial aggregation and output the standard WKT (Well-Known Text) string representation of the result.", "source": "original", "new_id": 1}
{"id": 1, "function": "ST_Collect", "question": "分别创建坐标为(1,2)的二维点POINT(1 2)和坐标为(-2,3)的二维点POINT(-2 3)，然后将这两个点合并为几何集合，最后将集合以WKT文本格式输出。", "sql": "SELECT ST_AsText( ST_Collect( ST_GeomFromText('POINT(1 2)'), ST_GeomFromText('POINT(-2 3)') ));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine the 2D points POINT(1 2) and POINT(-2 3) through spatial aggregation and output the standard WKT (Well-Known Text) string representation of the result.", "source": "original", "new_id": 2}
{"id": 1, "function": "ST_Collect", "question": "输出合并POINT(1 2)和POINT(-2 3)之后得到的WKT字符串。", "sql": "SELECT ST_AsText( ST_Collect( ST_GeomFromText('POINT(1 2)'), ST_GeomFromText('POINT(-2 3)') ));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine the 2D points POINT(1 2) and POINT(-2 3) through spatial aggregation and output the standard WKT (Well-Known Text) string representation of the result.", "source": "original", "new_id": 3}
{"id": 1, "function": "ST_Collect", "question": "返回两个点对象POINT(1 2)和POINT(-2 3)合并后的几何集合的文本格式。", "sql": "SELECT ST_AsText( ST_Collect( ST_GeomFromText('POINT(1 2)'), ST_GeomFromText('POINT(-2 3)') ));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine the 2D points POINT(1 2) and POINT(-2 3) through spatial aggregation and output the standard WKT (Well-Known Text) string representation of the result.", "source": "original", "new_id": 4}
{"id": 1, "function": "ST_Collect", "question": "将二维点POINT(1 2)和二维点POINT(-2 3)进行空间聚合后，输出结果的标准WKT(Well-Known Text)字符串表示形式。", "sql": "SELECT ST_AsText( ST_Collect( ST_GeomFromText('POINT(1 2)'), ST_GeomFromText('POINT(-2 3)') ));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine the 2D points POINT(1 2) and POINT(-2 3) through spatial aggregation and output the standard WKT (Well-Known Text) string representation of the result.", "source": "original", "new_id": 5}
{"id": 2, "function": "ST_Collect", "question": "将'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'和'CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'这两条曲线合并为集合，并以WKT格式输出。", "sql": "SELECT ST_AsText(\n    ST_Collect( 'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)',\n        'CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)' )\n);", "execution_result": [["MULTICURVE(CIRCULARSTRING(220268 150415,220227 150505,220227 150406),CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the WKT format text after merging CIRCULARSTRING(220268 150415,220227 150505,220227 150406) and CIRCULARSTRING(220227 150406,2220227 150407,220227 150406).", "source": "original", "new_id": 6}
{"id": 2, "function": "ST_Collect", "question": "合并CIRCULARSTRING(220268 150415,220227 150505,220227 150406)和CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)为集合对象，输出WKT文本。", "sql": "SELECT ST_AsText(\n    ST_Collect( 'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)',\n        'CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)' )\n);", "execution_result": [["MULTICURVE(CIRCULARSTRING(220268 150415,220227 150505,220227 150406),CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the WKT format text after merging CIRCULARSTRING(220268 150415,220227 150505,220227 150406) and CIRCULARSTRING(220227 150406,2220227 150407,220227 150406).", "source": "original", "new_id": 7}
{"id": 2, "function": "ST_Collect", "question": "将CIRCULARSTRING(220268 150415,220227 150505,220227 150406)和CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)这两个圆弧线合并成几何集合，并以WKT格式输出结果。第一个圆弧线经过点(220268 150415)、(220227 150505)、(220227 150406)，第二个圆弧线经过点(220227 150406)、(2220227 150407)、(220227 150406)。", "sql": "SELECT ST_AsText(\n    ST_Collect( 'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)',\n        'CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)' )\n);", "execution_result": [["MULTICURVE(CIRCULARSTRING(220268 150415,220227 150505,220227 150406),CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the WKT format text after merging CIRCULARSTRING(220268 150415,220227 150505,220227 150406) and CIRCULARSTRING(220227 150406,2220227 150407,220227 150406).", "source": "original", "new_id": 8}
{"id": 2, "function": "ST_Collect", "question": "将'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'和'CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'合并为集合（Collection），以几何文本输出。", "sql": "SELECT ST_AsText(\n    ST_Collect( 'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)',\n        'CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)' )\n);", "execution_result": [["MULTICURVE(CIRCULARSTRING(220268 150415,220227 150505,220227 150406),CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the WKT format text after merging CIRCULARSTRING(220268 150415,220227 150505,220227 150406) and CIRCULARSTRING(220227 150406,2220227 150407,220227 150406).", "source": "original", "new_id": 9}
{"id": 2, "function": "ST_Collect", "question": "输出两条CIRCULARSTRING曲线CIRCULARSTRING(220268 150415,220227 150505,220227 150406)和CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)合并后的集合对象的WKT字符串。", "sql": "SELECT ST_AsText(\n    ST_Collect( 'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)',\n        'CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)' )\n);", "execution_result": [["MULTICURVE(CIRCULARSTRING(220268 150415,220227 150505,220227 150406),CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the WKT format text after merging CIRCULARSTRING(220268 150415,220227 150505,220227 150406) and CIRCULARSTRING(220227 150406,2220227 150407,220227 150406).", "source": "original", "new_id": 10}
{"id": 2, "function": "ST_Collect", "question": "返回合并CIRCULARSTRING(220268 150415,220227 150505,220227 150406)和CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)后的WKT格式文本。", "sql": "SELECT ST_AsText(\n    ST_Collect( 'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)',\n        'CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)' )\n);", "execution_result": [["MULTICURVE(CIRCULARSTRING(220268 150415,220227 150505,220227 150406),CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the WKT format text after merging CIRCULARSTRING(220268 150415,220227 150505,220227 150406) and CIRCULARSTRING(220227 150406,2220227 150407,220227 150406).", "source": "original", "new_id": 11}
{"id": 4, "function": "ST_Collect", "question": "将LINESTRING(1 2, 3 4)和LINESTRING(3 4, 4 5)这两条线对象合并为集合，并以WKT文本格式输出。", "sql": "SELECT ST_AsText(\n    ST_Collect(ARRAY[ ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)') ])\n) AS wktcollect;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric collection formed by merging the two linestrings LINESTRING(1 2, 3 4) and LINESTRING(3 4, 4 5).", "source": "original", "new_id": 12}
{"id": 4, "function": "ST_Collect", "question": "合并坐标分别为(1 2, 3 4)和(3 4, 4 5)的两条LINESTRING为集合对象，输出WKT字符串。", "sql": "SELECT ST_AsText(\n    ST_Collect(ARRAY[ ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)') ])\n) AS wktcollect;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric collection formed by merging the two linestrings LINESTRING(1 2, 3 4) and LINESTRING(3 4, 4 5).", "source": "original", "new_id": 13}
{"id": 4, "function": "ST_Collect", "question": "将LINESTRING(1 2, 3 4)和LINESTRING(3 4, 4 5)这两条折线合并成一个几何集合，并使用ST_AsText函数以WKT格式输出结果。", "sql": "SELECT ST_AsText(\n    ST_Collect(ARRAY[ ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)') ])\n) AS wktcollect;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric collection formed by merging the two linestrings LINESTRING(1 2, 3 4) and LINESTRING(3 4, 4 5).", "source": "original", "new_id": 14}
{"id": 4, "function": "ST_Collect", "question": "输出LINESTRING(1 2, 3 4)和LINESTRING(3 4, 4 5)合并为集合后的WKT字符串。", "sql": "SELECT ST_AsText(\n    ST_Collect(ARRAY[ ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)') ])\n) AS wktcollect;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric collection formed by merging the two linestrings LINESTRING(1 2, 3 4) and LINESTRING(3 4, 4 5).", "source": "original", "new_id": 15}
{"id": 4, "function": "ST_Collect", "question": "返回两条LINESTRING线对象LINESTRING(1 2, 3 4)和LINESTRING(3 4, 4 5)合并为集合后的WKT格式文本结果。", "sql": "SELECT ST_AsText(\n    ST_Collect(ARRAY[ ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)') ])\n) AS wktcollect;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric collection formed by merging the two linestrings LINESTRING(1 2, 3 4) and LINESTRING(3 4, 4 5).", "source": "original", "new_id": 16}
{"id": 4, "function": "ST_Collect", "question": "输出将LINESTRING(1 2, 3 4)和LINESTRING(3 4, 4 5)两条折线合并为一个几何集合后得到的WKT字符串表示。", "sql": "SELECT ST_AsText(\n    ST_Collect(ARRAY[ ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)') ])\n) AS wktcollect;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric collection formed by merging the two linestrings LINESTRING(1 2, 3 4) and LINESTRING(3 4, 4 5).", "source": "original", "new_id": 17}
{"id": 5, "function": "ST_Collect", "question": "将POINT(1 2 3)和POINT(1 2 4)这两个三维点合并为集合，输出EWKT格式结果。", "sql": "SELECT ST_AsEWKT( ST_Collect( ST_GeomFromEWKT('POINT(1 2 3)'), ST_GeomFromEWKT('POINT(1 2 4)') ) );", "execution_result": [["MULTIPOINT(1 2 3,1 2 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string obtained by merging the 3D points POINT(1 2 3) and POINT(1 2 4).", "source": "original", "new_id": 18}
{"id": 5, "function": "ST_Collect", "question": "合并坐标为(1,2,3)和(1,2,4)的两个三维点，返回扩展WKT表示。", "sql": "SELECT ST_AsEWKT( ST_Collect( ST_GeomFromEWKT('POINT(1 2 3)'), ST_GeomFromEWKT('POINT(1 2 4)') ) );", "execution_result": [["MULTIPOINT(1 2 3,1 2 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string obtained by merging the 3D points POINT(1 2 3) and POINT(1 2 4).", "source": "original", "new_id": 19}
{"id": 5, "function": "ST_Collect", "question": "将三维点POINT(1 2 3)和三维点POINT(1 2 4)通过ST_GeomFromEWKT函数转换为几何对象，使用ST_Collect函数合并这两个几何对象，最后用ST_AsEWKT函数以EWKT格式输出合并后的结果。", "sql": "SELECT ST_AsEWKT( ST_Collect( ST_GeomFromEWKT('POINT(1 2 3)'), ST_GeomFromEWKT('POINT(1 2 4)') ) );", "execution_result": [["MULTIPOINT(1 2 3,1 2 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string obtained by merging the 3D points POINT(1 2 3) and POINT(1 2 4).", "source": "original", "new_id": 20}
{"id": 5, "function": "ST_Collect", "question": "输出两个三维点POINT(1 2 3)和POINT(1 2 4)合并后的集合的EWKT字符串表示。", "sql": "SELECT ST_AsEWKT( ST_Collect( ST_GeomFromEWKT('POINT(1 2 3)'), ST_GeomFromEWKT('POINT(1 2 4)') ) );", "execution_result": [["MULTIPOINT(1 2 3,1 2 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string obtained by merging the 3D points POINT(1 2 3) and POINT(1 2 4).", "source": "original", "new_id": 21}
{"id": 5, "function": "ST_Collect", "question": "获取合并POINT(1 2 3)和POINT(1 2 4)后的扩展WKT格式结果。", "sql": "SELECT ST_AsEWKT( ST_Collect( ST_GeomFromEWKT('POINT(1 2 3)'), ST_GeomFromEWKT('POINT(1 2 4)') ) );", "execution_result": [["MULTIPOINT(1 2 3,1 2 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string obtained by merging the 3D points POINT(1 2 3) and POINT(1 2 4).", "source": "original", "new_id": 22}
{"id": 5, "function": "ST_Collect", "question": "输出将三维点POINT(1 2 3)和三维点POINT(1 2 4)合并后得到的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT( ST_Collect( ST_GeomFromEWKT('POINT(1 2 3)'), ST_GeomFromEWKT('POINT(1 2 4)') ) );", "execution_result": [["MULTIPOINT(1 2 3,1 2 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string obtained by merging the 3D points POINT(1 2 3) and POINT(1 2 4).", "source": "original", "new_id": 23}
{"id": 6, "function": "ST_LineFromMultiPoint", "question": "将MULTIPOINT(1 2 3, 4 5 6, 7 8 9)转换为线对象，输出EWKT格式字符串。", "sql": "SELECT ST_AsEWKT( ST_LineFromMultiPoint('MULTIPOINT(1 2 3, 4 5 6, 7 8 9)') );", "execution_result": [["LINESTRING(1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D point collection MULTIPOINT(1 2 3, 4 5 6, 7 8 9) into a 3D line geometry object and output the result in EWKT format.", "source": "original", "new_id": 24}
{"id": 6, "function": "ST_LineFromMultiPoint", "question": "用坐标为(1,2,3)、(4,5,6)、(7,8,9)的点集合生成线，返回EWKT表示。", "sql": "SELECT ST_AsEWKT( ST_LineFromMultiPoint('MULTIPOINT(1 2 3, 4 5 6, 7 8 9)') );", "execution_result": [["LINESTRING(1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D point collection MULTIPOINT(1 2 3, 4 5 6, 7 8 9) into a 3D line geometry object and output the result in EWKT format.", "source": "original", "new_id": 25}
{"id": 6, "function": "ST_LineFromMultiPoint", "question": "将包含三个三维点坐标的MULTIPOINT(1 2 3, 4 5 6, 7 8 9)转换为线几何对象，并使用ST_AsEWKT函数以EWKT格式输出结果。其中第一个点坐标为X=1 Y=2 Z=3，第二个点坐标为X=4 Y=5 Z=6，第三个点坐标为X=7 Y=8 Z=9。", "sql": "SELECT ST_AsEWKT( ST_LineFromMultiPoint('MULTIPOINT(1 2 3, 4 5 6, 7 8 9)') );", "execution_result": [["LINESTRING(1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D point collection MULTIPOINT(1 2 3, 4 5 6, 7 8 9) into a 3D line geometry object and output the result in EWKT format.", "source": "original", "new_id": 26}
{"id": 6, "function": "ST_LineFromMultiPoint", "question": "输出多点对象MULTIPOINT(1 2 3, 4 5 6, 7 8 9)转线后的EWKT格式几何字符串，包含三维坐标信息。", "sql": "SELECT ST_AsEWKT( ST_LineFromMultiPoint('MULTIPOINT(1 2 3, 4 5 6, 7 8 9)') );", "execution_result": [["LINESTRING(1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D point collection MULTIPOINT(1 2 3, 4 5 6, 7 8 9) into a 3D line geometry object and output the result in EWKT format.", "source": "original", "new_id": 27}
{"id": 6, "function": "ST_LineFromMultiPoint", "question": "获取由给定多点MULTIPOINT(1 2 3, 4 5 6, 7 8 9)生成的线对象的扩展WKT表示形式。", "sql": "SELECT ST_AsEWKT( ST_LineFromMultiPoint('MULTIPOINT(1 2 3, 4 5 6, 7 8 9)') );", "execution_result": [["LINESTRING(1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D point collection MULTIPOINT(1 2 3, 4 5 6, 7 8 9) into a 3D line geometry object and output the result in EWKT format.", "source": "original", "new_id": 28}
{"id": 6, "function": "ST_LineFromMultiPoint", "question": "将三维点集合MULTIPOINT(1 2 3, 4 5 6, 7 8 9)转换为三维线几何对象，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT( ST_LineFromMultiPoint('MULTIPOINT(1 2 3, 4 5 6, 7 8 9)') );", "execution_result": [["LINESTRING(1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D point collection MULTIPOINT(1 2 3, 4 5 6, 7 8 9) into a 3D line geometry object and output the result in EWKT format.", "source": "original", "new_id": 29}
{"id": 7, "function": "ST_MakeEnvelope", "question": "将坐标为(10,10)到(11,11)的矩形框（SRID 4326）转换为WKT文本。", "sql": "SELECT ST_AsText( ST_MakeEnvelope(10, 10, 11, 11, 4326) );", "execution_result": [["POLYGON((10 10,10 11,11 11,11 10,10 10))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the rectangular bounding box defined by the bottom-left coordinate (10 10) and top-right coordinate (11 11) with SRID 4326.", "source": "original", "new_id": 30}
{"id": 7, "function": "ST_MakeEnvelope", "question": "输出左下角(10,10)到右上角(11,11)的WGS84坐标系矩形框的文本表示。", "sql": "SELECT ST_AsText( ST_MakeEnvelope(10, 10, 11, 11, 4326) );", "execution_result": [["POLYGON((10 10,10 11,11 11,11 10,10 10))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the rectangular bounding box defined by the bottom-left coordinate (10 10) and top-right coordinate (11 11) with SRID 4326.", "source": "original", "new_id": 31}
{"id": 7, "function": "ST_MakeEnvelope", "question": "以WKT格式输出一个由左下角坐标(10,10)和右上角坐标(11,11)定义的矩形框，该矩形框的空间参考系为EPSG:4326。", "sql": "SELECT ST_AsText( ST_MakeEnvelope(10, 10, 11, 11, 4326) );", "execution_result": [["POLYGON((10 10,10 11,11 11,11 10,10 10))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the rectangular bounding box defined by the bottom-left coordinate (10 10) and top-right coordinate (11 11) with SRID 4326.", "source": "original", "new_id": 32}
{"id": 7, "function": "ST_MakeEnvelope", "question": "获取矩形框几何对象（坐标为(10,10)到(11,11)）的WKT字符串输出。", "sql": "SELECT ST_AsText( ST_MakeEnvelope(10, 10, 11, 11, 4326) );", "execution_result": [["POLYGON((10 10,10 11,11 11,11 10,10 10))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the rectangular bounding box defined by the bottom-left coordinate (10 10) and top-right coordinate (11 11) with SRID 4326.", "source": "original", "new_id": 33}
{"id": 7, "function": "ST_MakeEnvelope", "question": "以文本形式返回指定坐标范围（坐标为(10,10)到(11,11)）的几何表示。", "sql": "SELECT ST_AsText( ST_MakeEnvelope(10, 10, 11, 11, 4326) );", "execution_result": [["POLYGON((10 10,10 11,11 11,11 10,10 10))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the rectangular bounding box defined by the bottom-left coordinate (10 10) and top-right coordinate (11 11) with SRID 4326.", "source": "original", "new_id": 34}
{"id": 7, "function": "ST_MakeEnvelope", "question": "输出以左下角坐标(10 10)和右上角坐标(11 11)定义的、SRID为4326的矩形边界框的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_MakeEnvelope(10, 10, 11, 11, 4326) );", "execution_result": [["POLYGON((10 10,10 11,11 11,11 10,10 10))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the rectangular bounding box defined by the bottom-left coordinate (10 10) and top-right coordinate (11 11) with SRID 4326.", "source": "original", "new_id": 35}
{"id": 8, "function": "ST_MakeLine", "question": "将坐标为(1,2)和(3,4)的两个点连接成线，并以WKT格式输出。", "sql": "SELECT ST_AsText( ST_MakeLine(ST_Point(1,2), ST_Point(3,4)) );", "execution_result": [["LINESTRING(1 2,3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the line segment formed by connecting the 2D points POINT(1 2) and POINT(3 4).", "source": "original", "new_id": 36}
{"id": 8, "function": "ST_MakeLine", "question": "用Point(1,2)和Point(3,4)创建线对象，输出其WKT表示。", "sql": "SELECT ST_AsText( ST_MakeLine(ST_Point(1,2), ST_Point(3,4)) );", "execution_result": [["LINESTRING(1 2,3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the line segment formed by connecting the 2D points POINT(1 2) and POINT(3 4).", "source": "original", "new_id": 37}
{"id": 8, "function": "ST_MakeLine", "question": "使用ST_Point函数创建两个二维点POINT(1 2)和POINT(3 4)，通过ST_MakeLine函数将它们连接成一条线段，最后用ST_AsText函数以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_MakeLine(ST_Point(1,2), ST_Point(3,4)) );", "execution_result": [["LINESTRING(1 2,3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the line segment formed by connecting the 2D points POINT(1 2) and POINT(3 4).", "source": "original", "new_id": 38}
{"id": 8, "function": "ST_MakeLine", "question": "输出连接两个点(1,2)和(3,4)形成的线对象的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_MakeLine(ST_Point(1,2), ST_Point(3,4)) );", "execution_result": [["LINESTRING(1 2,3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the line segment formed by connecting the 2D points POINT(1 2) and POINT(3 4).", "source": "original", "new_id": 39}
{"id": 8, "function": "ST_MakeLine", "question": "以文本格式返回由两个点(1,2)和(3,4)定义的线几何。", "sql": "SELECT ST_AsText( ST_MakeLine(ST_Point(1,2), ST_Point(3,4)) );", "execution_result": [["LINESTRING(1 2,3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the line segment formed by connecting the 2D points POINT(1 2) and POINT(3 4).", "source": "original", "new_id": 40}
{"id": 8, "function": "ST_MakeLine", "question": "输出连接二维点POINT(1 2)和POINT(3 4)形成的线段的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_MakeLine(ST_Point(1,2), ST_Point(3,4)) );", "execution_result": [["LINESTRING(1 2,3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the line segment formed by connecting the 2D points POINT(1 2) and POINT(3 4).", "source": "original", "new_id": 41}
{"id": 9, "function": "ST_MakeLine", "question": "将坐标为(1,2,3)和(3,4,5)的两个三维点连接成线，输出EWKT格式字符串。", "sql": "SELECT ST_AsEWKT( ST_MakeLine(ST_MakePoint(1,2,3), ST_MakePoint(3,4,5) ));", "execution_result": [["LINESTRING(1 2 3,3 4 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the line segment formed by connecting the 3D point POINT(1 2 3) and the 3D point POINT(3 4 5).", "source": "original", "new_id": 42}
{"id": 9, "function": "ST_MakeLine", "question": "用ST_MakePoint创建点(1,2,3)和点(3,4,5)，再用ST_MakeLine连接成线，最后用ST_AsEWKT输出。", "sql": "SELECT ST_AsEWKT( ST_MakeLine(ST_MakePoint(1,2,3), ST_MakePoint(3,4,5) ));", "execution_result": [["LINESTRING(1 2 3,3 4 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the line segment formed by connecting the 3D point POINT(1 2 3) and the 3D point POINT(3 4 5).", "source": "original", "new_id": 43}
{"id": 9, "function": "ST_MakeLine", "question": "使用ST_MakePoint函数创建两个三维点POINT(1 2 3)和POINT(3 4 5)，然后通过ST_MakeLine函数将这两个点连接成一条线，最后用ST_AsEWKT函数以EWKT格式输出这条线。", "sql": "SELECT ST_AsEWKT( ST_MakeLine(ST_MakePoint(1,2,3), ST_MakePoint(3,4,5) ));", "execution_result": [["LINESTRING(1 2 3,3 4 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the line segment formed by connecting the 3D point POINT(1 2 3) and the 3D point POINT(3 4 5).", "source": "original", "new_id": 44}
{"id": 9, "function": "ST_MakeLine", "question": "输出连接(1,2,3)和(3,4,5)两点所得折线的EWKT字符串。", "sql": "SELECT ST_AsEWKT( ST_MakeLine(ST_MakePoint(1,2,3), ST_MakePoint(3,4,5) ));", "execution_result": [["LINESTRING(1 2 3,3 4 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the line segment formed by connecting the 3D point POINT(1 2 3) and the 3D point POINT(3 4 5).", "source": "original", "new_id": 45}
{"id": 9, "function": "ST_MakeLine", "question": "返回两个三维点（(1,2,3)和(3,4,5)）构成的三维线几何的扩展WKT文本表示，包含SRID信息。", "sql": "SELECT ST_AsEWKT( ST_MakeLine(ST_MakePoint(1,2,3), ST_MakePoint(3,4,5) ));", "execution_result": [["LINESTRING(1 2 3,3 4 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the line segment formed by connecting the 3D point POINT(1 2 3) and the 3D point POINT(3 4 5).", "source": "original", "new_id": 46}
{"id": 9, "function": "ST_MakeLine", "question": "输出连接三维点POINT(1 2 3)和三维点POINT(3 4 5)形成的线段对应的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT( ST_MakeLine(ST_MakePoint(1,2,3), ST_MakePoint(3,4,5) ));", "execution_result": [["LINESTRING(1 2 3,3 4 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the line segment formed by connecting the 3D point POINT(1 2 3) and the 3D point POINT(3 4 5).", "source": "original", "new_id": 47}
{"id": 10, "function": "ST_MakeLine", "question": "将LINESTRING(0 0, 1 1)和LINESTRING(2 2, 3 3)这两条折线连接成新折线，并以WKT格式输出。", "sql": "SELECT ST_AsText( ST_MakeLine( 'LINESTRING(0 0, 1 1)', 'LINESTRING(2 2, 3 3)' ) );", "execution_result": [["LINESTRING(0 0,1 1,2 2,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object formed by connecting the two linestrings LINESTRING(0 0, 1 1) and LINESTRING(2 2, 3 3).", "source": "original", "new_id": 48}
{"id": 10, "function": "ST_MakeLine", "question": "输出连接折线(0,0)-(1,1)和折线(2,2)-(3,3)后生成的新折线的WKT文本。", "sql": "SELECT ST_AsText( ST_MakeLine( 'LINESTRING(0 0, 1 1)', 'LINESTRING(2 2, 3 3)' ) );", "execution_result": [["LINESTRING(0 0,1 1,2 2,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object formed by connecting the two linestrings LINESTRING(0 0, 1 1) and LINESTRING(2 2, 3 3).", "source": "original", "new_id": 49}
{"id": 10, "function": "ST_MakeLine", "question": "将LINESTRING(0 0, 1 1)和LINESTRING(2 2, 3 3)这两条折线连接成一条新的折线，并以WKT格式输出。", "sql": "SELECT ST_AsText( ST_MakeLine( 'LINESTRING(0 0, 1 1)', 'LINESTRING(2 2, 3 3)' ) );", "execution_result": [["LINESTRING(0 0,1 1,2 2,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object formed by connecting the two linestrings LINESTRING(0 0, 1 1) and LINESTRING(2 2, 3 3).", "source": "original", "new_id": 50}
{"id": 10, "function": "ST_MakeLine", "question": "输出连接两个折线LINESTRING(0 0, 1 1)和LINESTRING(2 2, 3 3)后生成的新折线的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_MakeLine( 'LINESTRING(0 0, 1 1)', 'LINESTRING(2 2, 3 3)' ) );", "execution_result": [["LINESTRING(0 0,1 1,2 2,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object formed by connecting the two linestrings LINESTRING(0 0, 1 1) and LINESTRING(2 2, 3 3).", "source": "original", "new_id": 51}
{"id": 10, "function": "ST_MakeLine", "question": "以Well-Known Text格式返回两个折线LINESTRING(0 0, 1 1)和LINESTRING(2 2, 3 3)连接后的结果几何。", "sql": "SELECT ST_AsText( ST_MakeLine( 'LINESTRING(0 0, 1 1)', 'LINESTRING(2 2, 3 3)' ) );", "execution_result": [["LINESTRING(0 0,1 1,2 2,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object formed by connecting the two linestrings LINESTRING(0 0, 1 1) and LINESTRING(2 2, 3 3).", "source": "original", "new_id": 52}
{"id": 10, "function": "ST_MakeLine", "question": "输出将LINESTRING(0 0, 1 1)和LINESTRING(2 2, 3 3)两条线段连接后生成的几何对象的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_MakeLine( 'LINESTRING(0 0, 1 1)', 'LINESTRING(2 2, 3 3)' ) );", "execution_result": [["LINESTRING(0 0,1 1,2 2,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object formed by connecting the two linestrings LINESTRING(0 0, 1 1) and LINESTRING(2 2, 3 3).", "source": "original", "new_id": 53}
{"id": 11, "function": "ST_MakeLine", "question": "将三维坐标点(1,2,3)、(3,4,5)和(6,6,6)连接为线对象，输出EWKT格式字符串。", "sql": "SELECT ST_AsEWKT( ST_MakeLine( ARRAY[ ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), ST_MakePoint(6,6,6) ] ));", "execution_result": [["LINESTRING(1 2 3,3 4 5,6 6 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the line segment formed by connecting the 3D points ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), and ST_MakePoint(6,6,6).", "source": "original", "new_id": 54}
{"id": 11, "function": "ST_MakeLine", "question": "用ST_MakePoint分别创建点(1,2,3)、(3,4,5)和(6,6,6)，再通过ST_MakeLine生成线，最终输出EWKT。", "sql": "SELECT ST_AsEWKT( ST_MakeLine( ARRAY[ ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), ST_MakePoint(6,6,6) ] ));", "execution_result": [["LINESTRING(1 2 3,3 4 5,6 6 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the line segment formed by connecting the 3D points ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), and ST_MakePoint(6,6,6).", "source": "original", "new_id": 55}
{"id": 11, "function": "ST_MakeLine", "question": "使用ST_MakePoint函数分别创建三维点POINT(1 2 3)、POINT(3 4 5)和POINT(6 6 6)，通过ARRAY数组聚合后，用ST_MakeLine函数将其连接为折线，最后用ST_AsEWKT函数输出带SRID的WKT格式结果。", "sql": "SELECT ST_AsEWKT( ST_MakeLine( ARRAY[ ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), ST_MakePoint(6,6,6) ] ));", "execution_result": [["LINESTRING(1 2 3,3 4 5,6 6 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the line segment formed by connecting the 3D points ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), and ST_MakePoint(6,6,6).", "source": "original", "new_id": 56}
{"id": 11, "function": "ST_MakeLine", "question": "输出由点(1,2,3)、(3,4,5)、(6,6,6)构成的线对象的EWKT字符串表示。", "sql": "SELECT ST_AsEWKT( ST_MakeLine( ARRAY[ ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), ST_MakePoint(6,6,6) ] ));", "execution_result": [["LINESTRING(1 2 3,3 4 5,6 6 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the line segment formed by connecting the 3D points ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), and ST_MakePoint(6,6,6).", "source": "original", "new_id": 57}
{"id": 11, "function": "ST_MakeLine", "question": "返回一个包含三个三维点(1,2,3)、(3,4,5)、(6,6,6)的线几何的EWKT格式文本。", "sql": "SELECT ST_AsEWKT( ST_MakeLine( ARRAY[ ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), ST_MakePoint(6,6,6) ] ));", "execution_result": [["LINESTRING(1 2 3,3 4 5,6 6 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the line segment formed by connecting the 3D points ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), and ST_MakePoint(6,6,6).", "source": "original", "new_id": 58}
{"id": 11, "function": "ST_MakeLine", "question": "输出由三维点ST_MakePoint(1,2,3)、ST_MakePoint(3,4,5)和ST_MakePoint(6,6,6)连接而成的线段的EWKT字符串表示。", "sql": "SELECT ST_AsEWKT( ST_MakeLine( ARRAY[ ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), ST_MakePoint(6,6,6) ] ));", "execution_result": [["LINESTRING(1 2 3,3 4 5,6 6 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the line segment formed by connecting the 3D points ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), and ST_MakePoint(6,6,6).", "source": "original", "new_id": 59}
{"id": 12, "function": "ST_MakePoint", "question": "使用经度-71.1043443253471和纬度42.3150676015829创建点对象。", "sql": "SELECT ST_MakePoint(-71.1043443253471, 42.3150676015829);", "execution_result": [["0101000000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a 2D point POINT(-71.1043443253471 42.3150676015829).", "source": "original", "new_id": 60}
{"id": 12, "function": "ST_MakePoint", "question": "在坐标(-71.1043443253471, 42.3150676015829)处创建点。", "sql": "SELECT ST_MakePoint(-71.1043443253471, 42.3150676015829);", "execution_result": [["0101000000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a 2D point POINT(-71.1043443253471 42.3150676015829).", "source": "original", "new_id": 61}
{"id": 12, "function": "ST_MakePoint", "question": "创建一个二维点，其X坐标为-71.1043443253471，Y坐标为42.3150676015829。", "sql": "SELECT ST_MakePoint(-71.1043443253471, 42.3150676015829);", "execution_result": [["0101000000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a 2D point POINT(-71.1043443253471 42.3150676015829).", "source": "original", "new_id": 62}
{"id": 12, "function": "ST_MakePoint", "question": "输出一个由给定坐标创建的点几何对象，坐标(-71.1043443253471, 42.3150676015829)。", "sql": "SELECT ST_MakePoint(-71.1043443253471, 42.3150676015829);", "execution_result": [["0101000000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a 2D point POINT(-71.1043443253471 42.3150676015829).", "source": "original", "new_id": 63}
{"id": 12, "function": "ST_MakePoint", "question": "返回以(-71.1043443253471, 42.3150676015829)为坐标的点对象。", "sql": "SELECT ST_MakePoint(-71.1043443253471, 42.3150676015829);", "execution_result": [["0101000000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a 2D point POINT(-71.1043443253471 42.3150676015829).", "source": "original", "new_id": 64}
{"id": 12, "function": "ST_MakePoint", "question": "输出一个二维点POINT(-71.1043443253471 42.3150676015829)的WKT字符串表示。", "sql": "SELECT ST_MakePoint(-71.1043443253471, 42.3150676015829);", "execution_result": [["0101000000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a 2D point POINT(-71.1043443253471 42.3150676015829).", "source": "original", "new_id": 65}
{"id": 13, "function": "ST_MakePoint", "question": "使用经度-71.1043443253471和纬度42.3150676015829创建点对象，并设置其SRID为4326。", "sql": "SELECT ST_SetSRID(ST_MakePoint(-71.1043443253471, 42.3150676015829),4326);", "execution_result": [["0101000020E6100000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a complete geometry object for a 2D point POINT(-71.1043443253471 42.3150676015829) defined in the WGS84 coordinate system (SRID=4326).", "source": "original", "new_id": 66}
{"id": 13, "function": "ST_MakePoint", "question": "在WGS84坐标系(SRID=4326)下创建坐标为(-71.1043443253471,42.3150676015829)的点。", "sql": "SELECT ST_SetSRID(ST_MakePoint(-71.1043443253471, 42.3150676015829),4326);", "execution_result": [["0101000020E6100000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a complete geometry object for a 2D point POINT(-71.1043443253471 42.3150676015829) defined in the WGS84 coordinate system (SRID=4326).", "source": "original", "new_id": 67}
{"id": 13, "function": "ST_MakePoint", "question": "创建一个二维点POINT(-71.1043443253471 42.3150676015829)，并将其空间参考系统标识符设置为EPSG:4326。", "sql": "SELECT ST_SetSRID(ST_MakePoint(-71.1043443253471, 42.3150676015829),4326);", "execution_result": [["0101000020E6100000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a complete geometry object for a 2D point POINT(-71.1043443253471 42.3150676015829) defined in the WGS84 coordinate system (SRID=4326).", "source": "original", "new_id": 68}
{"id": 13, "function": "ST_MakePoint", "question": "输出一个带有SRID=4326坐标系定义的点几何对象(-71.1043443253471,42.3150676015829)。", "sql": "SELECT ST_SetSRID(ST_MakePoint(-71.1043443253471, 42.3150676015829),4326);", "execution_result": [["0101000020E6100000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a complete geometry object for a 2D point POINT(-71.1043443253471 42.3150676015829) defined in the WGS84 coordinate system (SRID=4326).", "source": "original", "new_id": 69}
{"id": 13, "function": "ST_MakePoint", "question": "返回包含空间参考系统4326的点几何数据(-71.1043443253471,42.3150676015829)。", "sql": "SELECT ST_SetSRID(ST_MakePoint(-71.1043443253471, 42.3150676015829),4326);", "execution_result": [["0101000020E6100000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a complete geometry object for a 2D point POINT(-71.1043443253471 42.3150676015829) defined in the WGS84 coordinate system (SRID=4326).", "source": "original", "new_id": 70}
{"id": 13, "function": "ST_MakePoint", "question": "输出一个以WGS84坐标系（SRID=4326）定义的二维点POINT(-71.1043443253471 42.3150676015829)的完整几何对象。", "sql": "SELECT ST_SetSRID(ST_MakePoint(-71.1043443253471, 42.3150676015829),4326);", "execution_result": [["0101000020E6100000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a complete geometry object for a 2D point POINT(-71.1043443253471 42.3150676015829) defined in the WGS84 coordinate system (SRID=4326).", "source": "original", "new_id": 71}
{"id": 14, "function": "ST_MakePoint", "question": "创建X坐标为1、Y坐标为2、Z坐标为1.5的三维点。", "sql": "SELECT ST_MakePoint(1, 2, 1.5);", "execution_result": [["0101000080000000000000F03F0000000000000040000000000000F83F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a 3D point geometry object with X coordinate 1, Y coordinate 2, and Z coordinate 1.5.", "source": "original", "new_id": 72}
{"id": 14, "function": "ST_MakePoint", "question": "生成坐标为(1,2,1.5)的三维点对象。", "sql": "SELECT ST_MakePoint(1, 2, 1.5);", "execution_result": [["0101000080000000000000F03F0000000000000040000000000000F83F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a 3D point geometry object with X coordinate 1, Y coordinate 2, and Z coordinate 1.5.", "source": "original", "new_id": 73}
{"id": 14, "function": "ST_MakePoint", "question": "创建一个三维点，其X坐标为1，Y坐标为2，Z坐标为1.5。", "sql": "SELECT ST_MakePoint(1, 2, 1.5);", "execution_result": [["0101000080000000000000F03F0000000000000040000000000000F83F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a 3D point geometry object with X coordinate 1, Y coordinate 2, and Z coordinate 1.5.", "source": "original", "new_id": 74}
{"id": 14, "function": "ST_MakePoint", "question": "输出一个三维点几何对象，其坐标为(1,2,1.5)。", "sql": "SELECT ST_MakePoint(1, 2, 1.5);", "execution_result": [["0101000080000000000000F03F0000000000000040000000000000F83F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a 3D point geometry object with X coordinate 1, Y coordinate 2, and Z coordinate 1.5.", "source": "original", "new_id": 75}
{"id": 14, "function": "ST_MakePoint", "question": "返回包含指定XYZ坐标(1,2,1.5)的PostGIS点对象。", "sql": "SELECT ST_MakePoint(1, 2, 1.5);", "execution_result": [["0101000080000000000000F03F0000000000000040000000000000F83F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a 3D point geometry object with X coordinate 1, Y coordinate 2, and Z coordinate 1.5.", "source": "original", "new_id": 76}
{"id": 14, "function": "ST_MakePoint", "question": "输出一个三维点几何对象的WKT字符串，该点的X坐标为1，Y坐标为2，Z坐标为1.5。", "sql": "SELECT ST_MakePoint(1, 2, 1.5);", "execution_result": [["0101000080000000000000F03F0000000000000040000000000000F83F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a 3D point geometry object with X coordinate 1, Y coordinate 2, and Z coordinate 1.5.", "source": "original", "new_id": 77}
{"id": 15, "function": "ST_MakePoint", "question": "获取坐标为(1,2,1.5)的三维点的Z坐标值1.5。", "sql": "SELECT ST_Z(ST_MakePoint(1, 2,1.5));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the Z-coordinate value of the 3D point POINT(1 2 1.5) as a floating-point number.", "source": "original", "new_id": 78}
{"id": 15, "function": "ST_MakePoint", "question": "查询ST_MakePoint(1,2,1.5)创建的点在Z轴上的值。", "sql": "SELECT ST_Z(ST_MakePoint(1, 2,1.5));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the Z-coordinate value of the 3D point POINT(1 2 1.5) as a floating-point number.", "source": "original", "new_id": 79}
{"id": 15, "function": "ST_MakePoint", "question": "使用ST_MakePoint函数创建一个三维点POINT(1 2 1.5)，其中X坐标为1，Y坐标为2，Z坐标为1.5，然后通过ST_Z函数提取该点的Z坐标值。", "sql": "SELECT ST_Z(ST_MakePoint(1, 2,1.5));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the Z-coordinate value of the 3D point POINT(1 2 1.5) as a floating-point number.", "source": "original", "new_id": 80}
{"id": 15, "function": "ST_MakePoint", "question": "输出三维点(1,2,1.5)的Z坐标值，结果为浮点数1.5。", "sql": "SELECT ST_Z(ST_MakePoint(1, 2,1.5));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the Z-coordinate value of the 3D point POINT(1 2 1.5) as a floating-point number.", "source": "original", "new_id": 81}
{"id": 15, "function": "ST_MakePoint", "question": "返回点对象(1,2,1.5)在Z轴方向的坐标数值。", "sql": "SELECT ST_Z(ST_MakePoint(1, 2,1.5));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the Z-coordinate value of the 3D point POINT(1 2 1.5) as a floating-point number.", "source": "original", "new_id": 82}
{"id": 15, "function": "ST_MakePoint", "question": "输出三维点POINT(1 2 1.5)的Z坐标值，要求返回结果为浮点数。", "sql": "SELECT ST_Z(ST_MakePoint(1, 2,1.5));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the Z-coordinate value of the 3D point POINT(1 2 1.5) as a floating-point number.", "source": "original", "new_id": 83}
{"id": 16, "function": "ST_MakePointM", "question": "获取经度-71.104、纬度42.315、M值10的二维点对象的测量值。", "sql": "SELECT ST_M( ST_MakePointM(-71.104, 42.315, 10) );", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the exact M value extracted from the XYM point object with coordinates X=-71.104, Y=42.315, and M=10.", "source": "original", "new_id": 84}
{"id": 16, "function": "ST_MakePointM", "question": "提取坐标为(-71.104, 42.315)且M值为10的点对象的测量值。", "sql": "SELECT ST_M( ST_MakePointM(-71.104, 42.315, 10) );", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the exact M value extracted from the XYM point object with coordinates X=-71.104, Y=42.315, and M=10.", "source": "original", "new_id": 85}
{"id": 16, "function": "ST_MakePointM", "question": "提取由ST_MakePointM函数创建的XYM点对象中M值，该点X坐标为-71.104，Y坐标为42.315，M值为10。", "sql": "SELECT ST_M( ST_MakePointM(-71.104, 42.315, 10) );", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the exact M value extracted from the XYM point object with coordinates X=-71.104, Y=42.315, and M=10.", "source": "original", "new_id": 86}
{"id": 16, "function": "ST_MakePointM", "question": "输出点对象ST_MakePointM(-71.104, 42.315, 10)的测量值结果。", "sql": "SELECT ST_M( ST_MakePointM(-71.104, 42.315, 10) );", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the exact M value extracted from the XYM point object with coordinates X=-71.104, Y=42.315, and M=10.", "source": "original", "new_id": 87}
{"id": 16, "function": "ST_MakePointM", "question": "返回带M值的点对象(-71.104, 42.315, 10)的测量值（浮点数形式）。", "sql": "SELECT ST_M( ST_MakePointM(-71.104, 42.315, 10) );", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the exact M value extracted from the XYM point object with coordinates X=-71.104, Y=42.315, and M=10.", "source": "original", "new_id": 88}
{"id": 16, "function": "ST_MakePointM", "question": "输出由坐标X=-71.104、Y=42.315且M值=10的XYM点对象提取的M值，结果需为精确数值。", "sql": "SELECT ST_M( ST_MakePointM(-71.104, 42.315, 10) );", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the exact M value extracted from the XYM point object with coordinates X=-71.104, Y=42.315, and M=10.", "source": "original", "new_id": 89}
{"id": 17, "function": "ST_MakePointM", "question": "创建X坐标-71.104、Y坐标42.315、M值10的点，设置SRID为4326，输出EWKT格式。", "sql": "SELECT ST_AsEWKT( ST_SetSRID( ST_MakePointM(-71.104, 42.315, 10), 4326));", "execution_result": [["SRID=4326;POINTM(-71.104 42.315 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of a 3D point with M value POINTM(-71.104 42.315 10) with a spatial reference system identifier of 4326.", "source": "original", "new_id": 90}
{"id": 17, "function": "ST_MakePointM", "question": "将坐标为(-71.104, 42.315)且测量值为10的点转换为WGS84坐标系(4326)的EWKT字符串。", "sql": "SELECT ST_AsEWKT( ST_SetSRID( ST_MakePointM(-71.104, 42.315, 10), 4326));", "execution_result": [["SRID=4326;POINTM(-71.104 42.315 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of a 3D point with M value POINTM(-71.104 42.315 10) with a spatial reference system identifier of 4326.", "source": "original", "new_id": 91}
{"id": 17, "function": "ST_MakePointM", "question": "创建一个带有M值的三维点POINTM(-71.104 42.315 10)，将其空间参考系统设置为SRID 4326，并以扩展WKT(EWKT)格式输出结果。", "sql": "SELECT ST_AsEWKT( ST_SetSRID( ST_MakePointM(-71.104, 42.315, 10), 4326));", "execution_result": [["SRID=4326;POINTM(-71.104 42.315 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of a 3D point with M value POINTM(-71.104 42.315 10) with a spatial reference system identifier of 4326.", "source": "original", "new_id": 92}
{"id": 17, "function": "ST_MakePointM", "question": "输出带M值的点几何(-71.104, 42.315, 10)在SRID 4326下的EWKT字符串表示。", "sql": "SELECT ST_AsEWKT( ST_SetSRID( ST_MakePointM(-71.104, 42.315, 10), 4326));", "execution_result": [["SRID=4326;POINTM(-71.104 42.315 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of a 3D point with M value POINTM(-71.104 42.315 10) with a spatial reference system identifier of 4326.", "source": "original", "new_id": 93}
{"id": 17, "function": "ST_MakePointM", "question": "获取包含SRID为4326信息的扩展WKT格式点坐标字符串ST_MakePointM(-71.104, 42.315, 10)。", "sql": "SELECT ST_AsEWKT( ST_SetSRID( ST_MakePointM(-71.104, 42.315, 10), 4326));", "execution_result": [["SRID=4326;POINTM(-71.104 42.315 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of a 3D point with M value POINTM(-71.104 42.315 10) with a spatial reference system identifier of 4326.", "source": "original", "new_id": 94}
{"id": 17, "function": "ST_MakePointM", "question": "输出一个带有M值的三维点POINTM(-71.104 42.315 10)的EWKT格式字符串，该点的空间参考系标识符为4326。", "sql": "SELECT ST_AsEWKT( ST_SetSRID( ST_MakePointM(-71.104, 42.315, 10), 4326));", "execution_result": [["SRID=4326;POINTM(-71.104 42.315 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of a 3D point with M value POINTM(-71.104 42.315 10) with a spatial reference system identifier of 4326.", "source": "original", "new_id": 95}
{"id": 18, "function": "ST_MakePointM", "question": "创建X坐标为-71.1043443253471，Y坐标为42.3150676015829，M值为10的点对象，输出其EWKT格式。", "sql": "SELECT ST_AsEWKT( ST_MakePointM(-71.1043443253471, 42.3150676015829, 10) );", "execution_result": [["POINTM(-71.1043443253471 42.3150676015829 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output an EWKT string of a 2D point with M-value, where the X-coordinate is -71.1043443253471, Y-coordinate is 42.3150676015829, and M-value is 10.", "source": "original", "new_id": 96}
{"id": 18, "function": "ST_MakePointM", "question": "将坐标(-71.1043443253471, 42.3150676015829)和测量值10组合成点，返回EWKT字符串。", "sql": "SELECT ST_AsEWKT( ST_MakePointM(-71.1043443253471, 42.3150676015829, 10) );", "execution_result": [["POINTM(-71.1043443253471 42.3150676015829 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output an EWKT string of a 2D point with M-value, where the X-coordinate is -71.1043443253471, Y-coordinate is 42.3150676015829, and M-value is 10.", "source": "original", "new_id": 97}
{"id": 18, "function": "ST_MakePointM", "question": "使用ST_MakePointM函数创建一个带有M值的二维点，其X坐标为-71.1043443253471，Y坐标为42.3150676015829，M值为10，并通过ST_AsEWKT函数以EWKT格式输出该点。", "sql": "SELECT ST_AsEWKT( ST_MakePointM(-71.1043443253471, 42.3150676015829, 10) );", "execution_result": [["POINTM(-71.1043443253471 42.3150676015829 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output an EWKT string of a 2D point with M-value, where the X-coordinate is -71.1043443253471, Y-coordinate is 42.3150676015829, and M-value is 10.", "source": "original", "new_id": 98}
{"id": 18, "function": "ST_MakePointM", "question": "输出带测量值的点几何(-71.1043443253471, 42.3150676015829, 10)的EWKT格式字符串表示。", "sql": "SELECT ST_AsEWKT( ST_MakePointM(-71.1043443253471, 42.3150676015829, 10) );", "execution_result": [["POINTM(-71.1043443253471 42.3150676015829 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output an EWKT string of a 2D point with M-value, where the X-coordinate is -71.1043443253471, Y-coordinate is 42.3150676015829, and M-value is 10.", "source": "original", "new_id": 99}
{"id": 18, "function": "ST_MakePointM", "question": "以包含SRID信息的扩展WKT文本格式返回三维点对象(-71.1043443253471, 42.3150676015829, 10)。", "sql": "SELECT ST_AsEWKT( ST_MakePointM(-71.1043443253471, 42.3150676015829, 10) );", "execution_result": [["POINTM(-71.1043443253471 42.3150676015829 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output an EWKT string of a 2D point with M-value, where the X-coordinate is -71.1043443253471, Y-coordinate is 42.3150676015829, and M-value is 10.", "source": "original", "new_id": 100}
{"id": 18, "function": "ST_MakePointM", "question": "输出一个带有M值的二维点坐标的EWKT字符串，该点的X坐标为-71.1043443253471，Y坐标为42.3150676015829，M值为10。", "sql": "SELECT ST_AsEWKT( ST_MakePointM(-71.1043443253471, 42.3150676015829, 10) );", "execution_result": [["POINTM(-71.1043443253471 42.3150676015829 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output an EWKT string of a 2D point with M-value, where the X-coordinate is -71.1043443253471, Y-coordinate is 42.3150676015829, and M-value is 10.", "source": "original", "new_id": 101}
{"id": 19, "function": "ST_MakePolygon", "question": "使用LINESTRING(75 29,77 29,77 29,75 29)这个闭合折线创建多边形。", "sql": "SELECT ST_MakePolygon( ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)'));", "execution_result": [["010300000001000000040000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format geometry object of the closed polygon formed by the LINESTRING(75 29,77 29,77 29,75 29) line segment.", "source": "original", "new_id": 102}
{"id": 19, "function": "ST_MakePolygon", "question": "将坐标为(75 29,77 29,77 29,75 29)的折线转换为多边形。", "sql": "SELECT ST_MakePolygon( ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)'));", "execution_result": [["010300000001000000040000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format geometry object of the closed polygon formed by the LINESTRING(75 29,77 29,77 29,75 29) line segment.", "source": "original", "new_id": 103}
{"id": 19, "function": "ST_MakePolygon", "question": "使用LINESTRING(75 29,77 29,77 29,75 29)这条闭合线串作为边界，通过ST_GeomFromText函数将其转换为几何对象后，再用ST_MakePolygon函数构造一个多边形。", "sql": "SELECT ST_MakePolygon( ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)'));", "execution_result": [["010300000001000000040000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format geometry object of the closed polygon formed by the LINESTRING(75 29,77 29,77 29,75 29) line segment.", "source": "original", "new_id": 104}
{"id": 19, "function": "ST_MakePolygon", "question": "输出由给定折线LINESTRING(75 29,77 29,77 29, 75 29)生成的多边形几何对象。", "sql": "SELECT ST_MakePolygon( ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)'));", "execution_result": [["010300000001000000040000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format geometry object of the closed polygon formed by the LINESTRING(75 29,77 29,77 29,75 29) line segment.", "source": "original", "new_id": 105}
{"id": 19, "function": "ST_MakePolygon", "question": "返回由闭合折线LINESTRING(75 29,77 29,77 29, 75 29)创建的多边形几何结果。", "sql": "SELECT ST_MakePolygon( ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)'));", "execution_result": [["010300000001000000040000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format geometry object of the closed polygon formed by the LINESTRING(75 29,77 29,77 29,75 29) line segment.", "source": "original", "new_id": 106}
{"id": 19, "function": "ST_MakePolygon", "question": "输出由LINESTRING(75 29,77 29,77 29,75 29)线段构成的闭合多边形的WKT格式几何对象。", "sql": "SELECT ST_MakePolygon( ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)'));", "execution_result": [["010300000001000000040000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format geometry object of the closed polygon formed by the LINESTRING(75 29,77 29,77 29,75 29) line segment.", "source": "original", "new_id": 107}
{"id": 20, "function": "ST_MakePolygon", "question": "用LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1)创建多边形，输出EWKT格式结果。", "sql": "SELECT ST_AsEWKT( ST_MakePolygon( 'LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)'));", "execution_result": [["POLYGON((75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string for the closed polygon formed by the 3D coordinate points LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1), including the Z-coordinate values.", "source": "original", "new_id": 108}
{"id": 20, "function": "ST_MakePolygon", "question": "将包含四个三维点(75.15 29.53 1)、(77 29 1)、(77.6 29.5 1)、(75.15 29.53 1)的闭合折线转换为多边形，返回EWKT字符串。", "sql": "SELECT ST_AsEWKT( ST_MakePolygon( 'LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)'));", "execution_result": [["POLYGON((75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string for the closed polygon formed by the 3D coordinate points LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1), including the Z-coordinate values.", "source": "original", "new_id": 109}
{"id": 20, "function": "ST_MakePolygon", "question": "使用LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)这个三维闭合线串（包含Z值1）构建多边形，并以扩展WKT格式输出结果。", "sql": "SELECT ST_AsEWKT( ST_MakePolygon( 'LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)'));", "execution_result": [["POLYGON((75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string for the closed polygon formed by the 3D coordinate points LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1), including the Z-coordinate values.", "source": "original", "new_id": 110}
{"id": 20, "function": "ST_MakePolygon", "question": "输出由给定折线LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1)生成的多边形对象的EWKT字符串表示。", "sql": "SELECT ST_AsEWKT( ST_MakePolygon( 'LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)'));", "execution_result": [["POLYGON((75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string for the closed polygon formed by the 3D coordinate points LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1), including the Z-coordinate values.", "source": "original", "new_id": 111}
{"id": 20, "function": "ST_MakePolygon", "question": "输出由三维坐标点LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1)构成的闭合多边形所对应的EWKT格式字符串，其中每个点的Z坐标值均为1。", "sql": "SELECT ST_AsEWKT( ST_MakePolygon( 'LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)'));", "execution_result": [["POLYGON((75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string for the closed polygon formed by the 3D coordinate points LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1), including the Z-coordinate values.", "source": "original", "new_id": 112}
{"id": 20, "function": "ST_MakePolygon", "question": "输出由三维坐标点LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1)构成的闭合多边形对应的EWKT格式字符串，要求包含Z坐标值。", "sql": "SELECT ST_AsEWKT( ST_MakePolygon( 'LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)'));", "execution_result": [["POLYGON((75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string for the closed polygon formed by the 3D coordinate points LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1), including the Z-coordinate values.", "source": "original", "new_id": 113}
{"id": 21, "function": "ST_MakePolygon", "question": "多边形对象由一个外环和两个内环组成，外环是通过在点 POINT(10 10) 的基础上，先执行半径为 10、段数为 10 的缓冲操作，生成一个近似圆形的面，然后提取其外边界，再对该边界继续执行 10 单位的缓冲操作后提取出的新外环；两个内环中，第一个是将初始缓冲结果的外环沿 X 和 Y 坐标方向分别平移 1 单位得到的几何体，第二个内环则来自于对 POINT(20 20) 进行半径为 1 的缓冲操作后提取出的外边界，这三部分几何结构被组合为一个合法的带孔多边形。", "sql": "SELECT ST_MakePolygon( ST_ExteriorRing( ST_Buffer(ring.line,10)), ARRAY[ ST_Translate(ring.line, 1, 1), ST_ExteriorRing(ST_Buffer(ST_Point(20,20),1)) ] ) \nFROM (SELECT ST_ExteriorRing( ST_Buffer(ST_Point(10,10),10,10)) AS line ) AS ring;", "execution_result": [["0103000000030000005100000037FE6BBE1BF83D40257FECE7B591254037FE6BBE1BF83D40E78013184A6E224094F5BA2C97D83D40BA67C29FB09A1E400E302CC8BF993D4039D7DC6BA16718404093E2BFF83B3D407B7FC3792F4D1240B626C516D6BF3C4096C8A9AAF9A9084008EAE2B91B263C40742D1FF3D521FA3F85AF364BBC6F3B40E05E4F381018CE3F170EB3A2D79D3A40FCAC14A339A5F1BF2AD7F207B9B1394036B727BA89FA02C0661D5B27D5AC3840C86A402F3E860CC05C0DE8C5C790374093756C9D54B312C0E9F64437515F3640A65CCB1FE4C616C0CE4A319A531A35406438CC8A5E771AC040618FDFCFC333401ABEDA2CF1BE1DC0260DCEA0E25D324011D4C573374C20C0EBC6AACAC0EA30406C4D8A2DAC7F21C04A401E4368D92E407D26C57FF17722C06C94114A2FCC2B40186058907F3323C024CC1EB0A7B2284028EB75592EB123C0197FECE7B59125406EFCD77C37F023C0E78013184A6E22406EFCD77C37F023C0BA67C29FB09A1E4028EB75592EB123C038D7DC6BA16718401B6058907F3323C07A7FC3792F4D12408126C57FF17722C098C8A9AAF9A908406B4D8A2DAC7F21C0782D1FF3D521FA3F0FD4C573374C20C0C05F4F381018CE3F1ABEDA2CF1BE1DC0DCAC14A339A5F1BF6438CC8A5E771AC038B727BA89FA02C0AC5CCB1FE4C616C0CE6A402F3E860CC09A756C9D54B312C096756C9D54B312C0D46A402F3E860CC0A75CCB1FE4C616C042B727BA89FA02C05C38CC8A5E771AC000AD14A339A5F1BF14BEDA2CF1BE1DC0C05E4F381018CE3F12D4C573374C20C0A42D1FF3D521FA3F6D4D8A2DAC7F21C0B0C8A9AAF9A908407F26C57FF17722C0787FC3792F4D1240196058907F3323C034D7DC6BA167184027EB75592EB123C0AC67C29FB09A1E406EFCD77C37F023C0E18013184A6E22406EFCD77C37F023C0197FECE7B591254028EB75592EB123C023CC1EB0A7B228401A6058907F3323C06594114A2FCC2B408026C57FF17722C043401E4368D92E406C4D8A2DAC7F21C0ECC6AACAC0EA304010D4C573374C20C0280DCEA0E25D32401CBEDA2CF1BE1DC03F618FDFCFC333406838CC8A5E771AC0CC4A319A531A3540B05CCB1FE4C616C0E6F64437515F36409E756C9D54B312C0590DE8C5C7903740C46A402F3E860CC0681D5B27D5AC38402EB727BA89FA02C02CD7F207B9B1394010AD14A339A5F1BF170EB3A2D79D3A40205E4F381018CE3F85AF364BBC6F3B40742D1FF3D521FA3F08EAE2B91B263C4098C8A9AAF9A90840B626C516D6BF3C40917FC3792F4D12404293E2BFF83B3D404ED7DC6BA16718400E302CC8BF993D40A067C29FB09A1E4092F5BA2C97D83D40DB8013184A6E224036FE6BBE1BF83D401A7FECE7B591254037FE6BBE1BF83D4023CC1EB0A7B2284094F5BA2C97D83D406294114A2FCC2B400E302CC8BF993D4042401E4368D92E404093E2BFF83B3D40ECC6AACAC0EA3040B626C516D6BF3C40280DCEA0E25D324008EAE2B91B263C403F618FDFCFC3334087AF364BBC6F3B40CC4A319A531A35401A0EB3A2D79D3A40E8F64437515F36402AD7F207B9B139405B0DE8C5C7903740661D5B27D5AC3840661D5B27D5AC38405A0DE8C5C79037402AD7F207B9B13940E8F64437515F3640170EB3A2D79D3A40D04A319A531A354085AF364BBC6F3B4043618FDFCFC3334008EAE2B91B263C40290DCEA0E25D3240B626C516D6BF3C40EEC6AACAC0EA30404293E2BFF83B3D4039401E4368D92E400E302CC8BF993D405B94114A2FCC2B4093F5BA2C97D83D4031CC1EB0A7B2284037FE6BBE1BF83D40257FECE7B591254029000000000000000000354000000000000026405DF74E6E7BE03440F6B2CD370EDF2240905A0566B48234402E0E827DAAA31F40E21D2309FAE8334040F5F42423D71940747C9F60151733400A4F6D3A147D1440B0C207803112324082EAC1FF736E0F403EAC64F1BAE030405C1C04FB544707406085856D6E142F40F010E7B62FB80040E9F83EC12A2E2C400857AA9FB9D4F73F0B4D32C8F1202940308A101B49F8F13F0000000000002640000000000000F03FF6B2CD370EDF2240308A101B49F8F13F2F0E827DAAA31F400057AA9FB9D4F73F41F5F42423D71940F010E7B62FB800400C4F6D3A147D14405C1C04FB5447074082EAC1FF736E0F4080EAC1FF736E0F40601C04FB54470740094F6D3A147D1440F010E7B62FB800403FF5F42423D719400857AA9FB9D4F73F2E0E827DAAA31F40388A101B49F8F13FF5B2CD370EDF2240000000000000F03F0000000000002640308A101B49F8F13F0A4D32C8F12029400057AA9FB9D4F73FE8F83EC12A2E2C40F010E7B62FB800406085856D6E142F40581C04FB544707403DAC64F1BAE030407CEAC1FF736E0F40B0C2078031123240094F6D3A147D1440747C9F60151733403EF5F42423D71940E21D2309FAE833402D0E827DAAA31F40905A0566B4823440F5B2CD370EDF22405CF74E6E7BE0344000000000000026400000000000003540094D32C8F12029405DF74E6E7BE03440E8F83EC12A2E2C40905A0566B48234406085856D6E142F40E21D2309FAE833403DAC64F1BAE03040757C9F6015173340B0C2078031123240B0C2078031123240747C9F60151733403EAC64F1BAE03040E21D2309FAE833406185856D6E142F40905A0566B4823440EAF83EC12A2E2C405CF74E6E7BE034400C4D32C8F1202940000000000000354000000000000026402100000000000000000035400000000000003440E6BA7FBE14FB3440B42C878F0ECE33406A94795E83EC34405A456575089E33400D754831DBD43440BA8C3226C6713340DEF933F304B534402206CC0CFB4A33404673CDD9398E3440F38AB7CE242B3340A6BA9A8AF7613440966B86A17C1333404CD37870F13134401A458041EB04334000000000000034400000000000003340B42C878F0ECE33401A458041EB0433405A456575089E3340966B86A17C133340BA8C3226C6713340F38AB7CE242B33402206CC0CFB4A33402206CC0CFB4A3340F38AB7CE242B3340BA8C3226C6713340966B86A17C1333405A456575089E33401A458041EB043340B42C878F0ECE3340000000000000334000000000000034401A458041EB0433404CD37870F1313440966B86A17C133340A6BA9A8AF7613440F38AB7CE242B33404673CDD9398E34402206CC0CFB4A3340DEF933F304B53440BA8C3226C67133400D754831DBD434405A456575089E33406A94795E83EC3440B42C878F0ECE3340E5BA7FBE14FB3440000000000000344000000000000035404CD37870F1313440E6BA7FBE14FB3440A6BA9A8AF76134406A94795E83EC34404673CDD9398E34400D754831DBD43440DEF933F304B53440DEF933F304B534400D754831DBD434404673CDD9398E34406A94795E83EC3440A6BA9A8AF7613440E5BA7FBE14FB34404CD37870F131344000000000000035400000000000003440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Construct a final output as a POLYGON geometry with one exterior boundary and two interior holes. The exterior ring is generated by buffering the point POINT(10 10) with a radius of 10 and 10 segments, extracting its outer ring, then buffering this ring again by 10 units and extracting the new outer boundary. The two interior rings are: the first is obtained by translating the initial buffered outer ring 1 unit along both X and Y coordinates using the ST_Translate function, and the second is the outer ring extracted from buffering the point POINT(20 20) with a radius of 1. The entire structure is assembled into a complete polygon using ST_MakePolygon.", "source": "original", "new_id": 114}
{"id": 21, "function": "ST_MakePolygon", "question": "构造的多边形由三个主要组成部分组成：一条外部边界线和两个内部孔洞。首先，外部边界是通过在点 (10,10) 周围缓冲 10 单位（并指定段数为 10）得到初始缓冲区，再从中提取外环，并对该外环再次执行缓冲 10 单位操作，然后提取其新的外边界作为多边形的主轮廓；内部两个孔洞中，第一个是将初始外环平移 (1,1) 得到的新环，第二个是围绕点 (20,20) 以半径为 1 生成缓冲区并提取其外环，最终通过 ST_MakePolygon 组合为一个具有两个内孔的多边形结构。", "sql": "SELECT ST_MakePolygon( ST_ExteriorRing( ST_Buffer(ring.line,10)), ARRAY[ ST_Translate(ring.line, 1, 1), ST_ExteriorRing(ST_Buffer(ST_Point(20,20),1)) ] ) \nFROM (SELECT ST_ExteriorRing( ST_Buffer(ST_Point(10,10),10,10)) AS line ) AS ring;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Construct a final output as a POLYGON geometry with one exterior boundary and two interior holes. The exterior ring is generated by buffering the point POINT(10 10) with a radius of 10 and 10 segments, extracting its outer ring, then buffering this ring again by 10 units and extracting the new outer boundary. The two interior rings are: the first is obtained by translating the initial buffered outer ring 1 unit along both X and Y coordinates using the ST_Translate function, and the second is the outer ring extracted from buffering the point POINT(20 20) with a radius of 1. The entire structure is assembled into a complete polygon using ST_MakePolygon.", "source": "original", "new_id": 115}
{"id": 21, "function": "ST_MakePolygon", "question": "通过组合一个主外环与两个子环构成。外环来源于对点 POINT(10 10) 进行第一次缓冲（半径 10，段数 10）后提取外环，再对该环进行第二次缓冲（缓冲距离为 10）并再次提取外环；第一个子环是通过将第一次缓冲结果的外环使用 ST_Translate 函数沿 X 和 Y 坐标轴方向各移动 1 单位得到的；第二个子环由对 POINT(20 20) 进行缓冲（半径 1）并提取外环获得，最终将这三个几何环结构通过 ST_MakePolygon 函数拼接，形成一个带有两个内孔的多边形。", "sql": "SELECT ST_MakePolygon( ST_ExteriorRing( ST_Buffer(ring.line,10)), ARRAY[ ST_Translate(ring.line, 1, 1), ST_ExteriorRing(ST_Buffer(ST_Point(20,20),1)) ] ) \nFROM (SELECT ST_ExteriorRing( ST_Buffer(ST_Point(10,10),10,10)) AS line ) AS ring;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Construct a final output as a POLYGON geometry with one exterior boundary and two interior holes. The exterior ring is generated by buffering the point POINT(10 10) with a radius of 10 and 10 segments, extracting its outer ring, then buffering this ring again by 10 units and extracting the new outer boundary. The two interior rings are: the first is obtained by translating the initial buffered outer ring 1 unit along both X and Y coordinates using the ST_Translate function, and the second is the outer ring extracted from buffering the point POINT(20 20) with a radius of 1. The entire structure is assembled into a complete polygon using ST_MakePolygon.", "source": "original", "new_id": 116}
{"id": 21, "function": "ST_MakePolygon", "question": "你需要输出的是一个面状几何对象（POLYGON），该对象包含一个外边界和两个内部孔洞。外边界是通过对点 (10,10) 先进行缓冲（半径为 10，段数为 10）后提取外环，再对该外环缓冲 10 单位并提取新外环所得；第一个内孔为对初始缓冲环应用 ST_Translate 向右上平移 1 单位后的结果，第二个内孔来源于以 (20,20) 为中心缓冲半径 1 单位后的多边形外环。最终结果由 ST_MakePolygon 函数生成，返回一个封闭的带洞多边形对象。", "sql": "SELECT ST_MakePolygon( ST_ExteriorRing( ST_Buffer(ring.line,10)), ARRAY[ ST_Translate(ring.line, 1, 1), ST_ExteriorRing(ST_Buffer(ST_Point(20,20),1)) ] ) \nFROM (SELECT ST_ExteriorRing( ST_Buffer(ST_Point(10,10),10,10)) AS line ) AS ring;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Construct a final output as a POLYGON geometry with one exterior boundary and two interior holes. The exterior ring is generated by buffering the point POINT(10 10) with a radius of 10 and 10 segments, extracting its outer ring, then buffering this ring again by 10 units and extracting the new outer boundary. The two interior rings are: the first is obtained by translating the initial buffered outer ring 1 unit along both X and Y coordinates using the ST_Translate function, and the second is the outer ring extracted from buffering the point POINT(20 20) with a radius of 1. The entire structure is assembled into a complete polygon using ST_MakePolygon.", "source": "original", "new_id": 117}
{"id": 21, "function": "ST_MakePolygon", "question": "输出结果是一个带两个孔洞的 POLYGON 几何对象，其外边界来源于对 POINT(10 10) 构建缓冲（半径为 10、段数为 10）后提取外环，再对该外环再次缓冲 10 单位并提取其外边界；两个孔洞分别来自：一是将初始外环通过 ST_Translate 平移 1 单位形成的线性环，二是通过对 POINT(20 20) 进行 1 单位缓冲并提取外环获得的线条。通过 ST_MakePolygon 将外环与两个内环整合，最终生成带孔的面状对象。", "sql": "SELECT ST_MakePolygon( ST_ExteriorRing( ST_Buffer(ring.line,10)), ARRAY[ ST_Translate(ring.line, 1, 1), ST_ExteriorRing(ST_Buffer(ST_Point(20,20),1)) ] ) \nFROM (SELECT ST_ExteriorRing( ST_Buffer(ST_Point(10,10),10,10)) AS line ) AS ring;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Construct a final output as a POLYGON geometry with one exterior boundary and two interior holes. The exterior ring is generated by buffering the point POINT(10 10) with a radius of 10 and 10 segments, extracting its outer ring, then buffering this ring again by 10 units and extracting the new outer boundary. The two interior rings are: the first is obtained by translating the initial buffered outer ring 1 unit along both X and Y coordinates using the ST_Translate function, and the second is the outer ring extracted from buffering the point POINT(20 20) with a radius of 1. The entire structure is assembled into a complete polygon using ST_MakePolygon.", "source": "original", "new_id": 118}
{"id": 21, "function": "ST_MakePolygon", "question": "请构建一个最终输出为 POLYGON 类型的几何对象，该多边形具有一个外部边界和两个内孔，其中外环是通过对点 POINT(10 10) 进行半径为 10、段数为 10 的缓冲操作后提取其外环，再对该外环再次缓冲 10 单位并提取新外边界所生成的；两个内环分别为：第一个是将初始缓冲外环通过 ST_Translate 函数沿 X 和 Y 坐标方向各平移 1 单位得到的几何体，第二个则是对点 POINT(20 20) 进行半径为 1 的缓冲操作后提取的外环。整个结构通过 ST_MakePolygon 组合构成完整多边形。", "sql": "SELECT ST_MakePolygon( ST_ExteriorRing( ST_Buffer(ring.line,10)), ARRAY[ ST_Translate(ring.line, 1, 1), ST_ExteriorRing(ST_Buffer(ST_Point(20,20),1)) ] ) \nFROM (SELECT ST_ExteriorRing( ST_Buffer(ST_Point(10,10),10,10)) AS line ) AS ring;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Construct a final output as a POLYGON geometry with one exterior boundary and two interior holes. The exterior ring is generated by buffering the point POINT(10 10) with a radius of 10 and 10 segments, extracting its outer ring, then buffering this ring again by 10 units and extracting the new outer boundary. The two interior rings are: the first is obtained by translating the initial buffered outer ring 1 unit along both X and Y coordinates using the ST_Translate function, and the second is the outer ring extracted from buffering the point POINT(20 20) with a radius of 1. The entire structure is assembled into a complete polygon using ST_MakePolygon.", "source": "original", "new_id": 119}
{"id": 22, "function": "ST_MakePolygon", "question": "用LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)创建多边形，输出EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_MakePolygon('LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)'));", "execution_result": [["POLYGONM((75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format polygon string formed by the closed linestring with M-values LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2), where the vertex coordinates and M-values are (75.15 29.53 1), (77 29 1), (77.6 29.5 2), and (75.15 29.53 2) in sequence.", "source": "original", "new_id": 120}
{"id": 22, "function": "ST_MakePolygon", "question": "将包含四个坐标点（75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2）的带M值折线构造成多边形，返回EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_MakePolygon('LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)'));", "execution_result": [["POLYGONM((75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format polygon string formed by the closed linestring with M-values LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2), where the vertex coordinates and M-values are (75.15 29.53 1), (77 29 1), (77.6 29.5 2), and (75.15 29.53 2) in sequence.", "source": "original", "new_id": 121}
{"id": 22, "function": "ST_MakePolygon", "question": "使用带M值的线字符串LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)构建多边形，其中第一个点的坐标为经度75.15纬度29.53 M值1，第二个点为经度77纬度29 M值1，第三个点为经度77.6纬度29.5 M值2，第四个点闭合多边形回到起始点但M值变为2，并将结果以EWKT格式输出。", "sql": "SELECT ST_AsEWKT(ST_MakePolygon('LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)'));", "execution_result": [["POLYGONM((75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format polygon string formed by the closed linestring with M-values LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2), where the vertex coordinates and M-values are (75.15 29.53 1), (77 29 1), (77.6 29.5 2), and (75.15 29.53 2) in sequence.", "source": "original", "new_id": 122}
{"id": 22, "function": "ST_MakePolygon", "question": "输出由给定折线LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)生成的多边形的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_MakePolygon('LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)'));", "execution_result": [["POLYGONM((75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format polygon string formed by the closed linestring with M-values LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2), where the vertex coordinates and M-values are (75.15 29.53 1), (77 29 1), (77.6 29.5 2), and (75.15 29.53 2) in sequence.", "source": "original", "new_id": 123}
{"id": 22, "function": "ST_MakePolygon", "question": "以EWKT文本格式返回由闭合折线LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)构造的多边形对象。", "sql": "SELECT ST_AsEWKT(ST_MakePolygon('LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)'));", "execution_result": [["POLYGONM((75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format polygon string formed by the closed linestring with M-values LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2), where the vertex coordinates and M-values are (75.15 29.53 1), (77 29 1), (77.6 29.5 2), and (75.15 29.53 2) in sequence.", "source": "original", "new_id": 124}
{"id": 22, "function": "ST_MakePolygon", "question": "输出由带M值的闭合线段LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)构成的EWKT格式多边形字符串，其中各顶点坐标及M值依次为(75.15 29.53 1)、(77 29 1)、(77.6 29.5 2)、(75.15 29.53 2)。", "sql": "SELECT ST_AsEWKT(ST_MakePolygon('LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)'));", "execution_result": [["POLYGONM((75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format polygon string formed by the closed linestring with M-values LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2), where the vertex coordinates and M-values are (75.15 29.53 1), (77 29 1), (77.6 29.5 2), and (75.15 29.53 2) in sequence.", "source": "original", "new_id": 125}
{"id": 23, "function": "ST_MakePolygon", "question": "将LINESTRING(75 29,77 29,77 29,75 29)这个折线通过添加起点闭合后创建为多边形。", "sql": "SELECT ST_MakePolygon( ST_AddPoint(foo.open_line, ST_StartPoint(foo.open_line)) ) \nFROM ( SELECT ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)') AS open_line) AS foo;", "execution_result": [["010300000001000000050000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(75 29,77 29,77 29,75 29) into a polygon by closing it with the starting point, and output the resulting polygon geometry.", "source": "original", "new_id": 126}
{"id": 23, "function": "ST_MakePolygon", "question": "用ST_AddPoint给LINESTRING(75 29,77 29,77 29,75 29)添加起点使其闭合，再用ST_MakePolygon创建多边形。", "sql": "SELECT ST_MakePolygon( ST_AddPoint(foo.open_line, ST_StartPoint(foo.open_line)) ) \nFROM ( SELECT ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)') AS open_line) AS foo;", "execution_result": [["010300000001000000050000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(75 29,77 29,77 29,75 29) into a polygon by closing it with the starting point, and output the resulting polygon geometry.", "source": "original", "new_id": 127}
{"id": 23, "function": "ST_MakePolygon", "question": "使用ST_GeomFromText函数创建一条由坐标点(75 29)、(77 29)、(77 29)、(75 29)组成的开放线段LINESTRING，然后通过ST_AddPoint函数在该线段的末尾添加其起始点ST_StartPoint(foo.open_line)，最后用ST_MakePolygon函数将闭合后的线段转换为多边形。", "sql": "SELECT ST_MakePolygon( ST_AddPoint(foo.open_line, ST_StartPoint(foo.open_line)) ) \nFROM ( SELECT ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)') AS open_line) AS foo;", "execution_result": [["010300000001000000050000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(75 29,77 29,77 29,75 29) into a polygon by closing it with the starting point, and output the resulting polygon geometry.", "source": "original", "new_id": 128}
{"id": 23, "function": "ST_MakePolygon", "question": "输出由闭合折线转换得到的多边形几何对象。", "sql": "SELECT ST_MakePolygon( ST_AddPoint(foo.open_line, ST_StartPoint(foo.open_line)) ) \nFROM ( SELECT ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)') AS open_line) AS foo;", "execution_result": [["010300000001000000050000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(75 29,77 29,77 29,75 29) into a polygon by closing it with the starting point, and output the resulting polygon geometry.", "source": "original", "new_id": 129}
{"id": 23, "function": "ST_MakePolygon", "question": "给折线LINESTRING(75 29,77 29,77 29,75 29)的起点作为新增的点使其闭合，然后转化成多边形。", "sql": "SELECT ST_MakePolygon( ST_AddPoint(foo.open_line, ST_StartPoint(foo.open_line)) ) \nFROM ( SELECT ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)') AS open_line) AS foo;", "execution_result": [["010300000001000000050000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(75 29,77 29,77 29,75 29) into a polygon by closing it with the starting point, and output the resulting polygon geometry.", "source": "original", "new_id": 130}
{"id": 23, "function": "ST_MakePolygon", "question": "将LINESTRING(75 29,77 29,77 29,75 29)通过添加起点闭合后转换为多边形，并输出该多边形的几何对象。", "sql": "SELECT ST_MakePolygon( ST_AddPoint(foo.open_line, ST_StartPoint(foo.open_line)) ) \nFROM ( SELECT ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)') AS open_line) AS foo;", "execution_result": [["010300000001000000050000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(75 29,77 29,77 29,75 29) into a polygon by closing it with the starting point, and output the resulting polygon geometry.", "source": "original", "new_id": 131}
{"id": 24, "function": "ST_Point", "question": "创建经度-71.104、纬度42.315的点，并设置其SRID为4326。", "sql": "SELECT ST_SetSRID( ST_Point( -71.104, 42.315), 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a geometry object representing a 2D point POINT(-71.104 42.315) with SRID 4326.", "source": "original", "new_id": 132}
{"id": 24, "function": "ST_Point", "question": "用坐标(-71.104,42.315)创建二维点，并赋予EPSG:4326坐标系统。", "sql": "SELECT ST_SetSRID( ST_Point( -71.104, 42.315), 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a geometry object representing a 2D point POINT(-71.104 42.315) with SRID 4326.", "source": "original", "new_id": 133}
{"id": 24, "function": "ST_Point", "question": "创建一个二维点POINT(-71.104 42.315)，并将其空间参考系统标识符设置为EPSG:4326。", "sql": "SELECT ST_SetSRID( ST_Point( -71.104, 42.315), 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a geometry object representing a 2D point POINT(-71.104 42.315) with SRID 4326.", "source": "original", "new_id": 134}
{"id": 24, "function": "ST_Point", "question": "为一个点几何对象(-71.104,42.315)添加坐标系：WGS84坐标系。", "sql": "SELECT ST_SetSRID( ST_Point( -71.104, 42.315), 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a geometry object representing a 2D point POINT(-71.104 42.315) with SRID 4326.", "source": "original", "new_id": 135}
{"id": 24, "function": "ST_Point", "question": "返回具有WGS84坐标系的点对象(-71.104,42.315)。", "sql": "SELECT ST_SetSRID( ST_Point( -71.104, 42.315), 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a geometry object representing a 2D point POINT(-71.104 42.315) with SRID 4326.", "source": "original", "new_id": 136}
{"id": 24, "function": "ST_Point", "question": "输出一个带有SRID 4326的二维点POINT(-71.104 42.315)的几何对象。", "sql": "SELECT ST_SetSRID( ST_Point( -71.104, 42.315), 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a geometry object representing a 2D point POINT(-71.104 42.315) with SRID 4326.", "source": "original", "new_id": 137}
{"id": 25, "function": "ST_Point", "question": "创建一个坐标为经度-71.104、纬度42.315且SRID为4326的点对象。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with spatial reference EPSG:4326, X coordinate -71.104, Y coordinate 42.315, and return it in PostGIS geometry object format.", "source": "original", "new_id": 138}
{"id": 25, "function": "ST_Point", "question": "使用参数X=-71.104、Y=42.315和坐标系EPSG:4326生成点对象。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with spatial reference EPSG:4326, X coordinate -71.104, Y coordinate 42.315, and return it in PostGIS geometry object format.", "source": "original", "new_id": 139}
{"id": 25, "function": "ST_Point", "question": "调用ST_Point函数生成WGS84坐标系下的点对象(-71.104,42.315)。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with spatial reference EPSG:4326, X coordinate -71.104, Y coordinate 42.315, and return it in PostGIS geometry object format.", "source": "original", "new_id": 140}
{"id": 25, "function": "ST_Point", "question": "输出一个包含XY坐标和SRID为4326的点几何对象(-71.104,42.315)。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with spatial reference EPSG:4326, X coordinate -71.104, Y coordinate 42.315, and return it in PostGIS geometry object format.", "source": "original", "new_id": 141}
{"id": 25, "function": "ST_Point", "question": "创建一个WGS84坐标系下的点对象(-71.104,42.315)。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with spatial reference EPSG:4326, X coordinate -71.104, Y coordinate 42.315, and return it in PostGIS geometry object format.", "source": "original", "new_id": 142}
{"id": 25, "function": "ST_Point", "question": "输出一个空间参考系为EPSG:4326的二维点，其X坐标为-71.104，Y坐标为42.315，并以PostGIS几何对象格式返回。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with spatial reference EPSG:4326, X coordinate -71.104, Y coordinate 42.315, and return it in PostGIS geometry object format.", "source": "original", "new_id": 143}
{"id": 26, "function": "ST_Point", "question": "将坐标为(3637510, 3014852, 2273)的三维点从SRID 2273转换到WGS84（SRID 4326），并强制转换为地理类型。", "sql": "SELECT ST_Transform(ST_Point(3637510, 3014852, 2273), 4326)::geography;", "execution_result": [["0101000020E61000003493E09718CC52C04364D4540EFD4340"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D point POINT(3637510 3014852 2273) from the current coordinate system to WGS84 (SRID=4326) and output the result as a geography type.", "source": "original", "new_id": 144}
{"id": 26, "function": "ST_Point", "question": "将X=3637510、Y=3014852、Z=2273且SRID为2273的点转换为4326坐标系的地理对象。", "sql": "SELECT ST_Transform(ST_Point(3637510, 3014852, 2273), 4326)::geography;", "execution_result": [["0101000020E61000003493E09718CC52C04364D4540EFD4340"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D point POINT(3637510 3014852 2273) from the current coordinate system to WGS84 (SRID=4326) and output the result as a geography type.", "source": "original", "new_id": 145}
{"id": 26, "function": "ST_Point", "question": "将坐标为X=3637510、Y=3014852、Z=2273的三维点从当前坐标系转换为WGS84坐标系（EPSG:4326），并将结果转换为geography类型。", "sql": "SELECT ST_Transform(ST_Point(3637510, 3014852, 2273), 4326)::geography;", "execution_result": [["0101000020E61000003493E09718CC52C04364D4540EFD4340"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D point POINT(3637510 3014852 2273) from the current coordinate system to WGS84 (SRID=4326) and output the result as a geography type.", "source": "original", "new_id": 146}
{"id": 26, "function": "ST_Point", "question": "返回转换坐标系由2273转换到4326的三维点(3637510, 3014852, 2273)，结果类型为PostGIS地理对象。", "sql": "SELECT ST_Transform(ST_Point(3637510, 3014852, 2273), 4326)::geography;", "execution_result": [["0101000020E61000003493E09718CC52C04364D4540EFD4340"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D point POINT(3637510 3014852 2273) from the current coordinate system to WGS84 (SRID=4326) and output the result as a geography type.", "source": "original", "new_id": 147}
{"id": 26, "function": "ST_Point", "question": "将三维点POINT(3637510 3014852 2273)从当前坐标系转换为WGS84坐标系（SRID=4326），并以geography类型输出结果。", "sql": "SELECT ST_Transform(ST_Point(3637510, 3014852, 2273), 4326)::geography;", "execution_result": [["0101000020E61000003493E09718CC52C04364D4540EFD4340"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D point POINT(3637510 3014852 2273) from the current coordinate system to WGS84 (SRID=4326) and output the result as a geography type.", "source": "original", "new_id": 148}
{"id": 27, "function": "ST_Point", "question": "创建一个经度-71.104、纬度42.315且SRID为4326的地理点，并强制转换为geography类型。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326)::geography;", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a 2D point object in the geographic coordinate system with coordinates longitude -71.104, latitude 42.315, and SRID 4326.", "source": "original", "new_id": 149}
{"id": 27, "function": "ST_Point", "question": "使用坐标(-71.104, 42.315)和EPSG:4326坐标系生成点，输出为geography对象。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326)::geography;", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a 2D point object in the geographic coordinate system with coordinates longitude -71.104, latitude 42.315, and SRID 4326.", "source": "original", "new_id": 150}
{"id": 27, "function": "ST_Point", "question": "创建一个三维地理坐标点，其X坐标为-71.104，Y坐标为42.315，空间参考系为EPSG:4326，并将结果转换为geography类型。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326)::geography;", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a 2D point object in the geographic coordinate system with coordinates longitude -71.104, latitude 42.315, and SRID 4326.", "source": "original", "new_id": 151}
{"id": 27, "function": "ST_Point", "question": "输出一个以geography类型表示WGS84坐标系下的坐标点(-71.104, 42.315)。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326)::geography;", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a 2D point object in the geographic coordinate system with coordinates longitude -71.104, latitude 42.315, and SRID 4326.", "source": "original", "new_id": 152}
{"id": 27, "function": "ST_Point", "question": "返回一个包含SRID 4326的geography格式点对象(-71.104, 42.315)。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326)::geography;", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a 2D point object in the geographic coordinate system with coordinates longitude -71.104, latitude 42.315, and SRID 4326.", "source": "original", "new_id": 153}
{"id": 27, "function": "ST_Point", "question": "输出一个以经度-71.104、纬度42.315为坐标，SRID为4326的地理坐标系下的二维点对象的WKT表示。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326)::geography;", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a 2D point object in the geographic coordinate system with coordinates longitude -71.104, latitude 42.315, and SRID 4326.", "source": "original", "new_id": 154}
{"id": 28, "function": "ST_Point", "question": "创建一个二维点POINT(-71.104 42.315)，将其空间参考标识符设置为4326（WGS84坐标系），并转换为geography类型。", "sql": "SELECT CAST( ST_SetSRID(ST_Point( -71.104, 42.315), 4326) AS geography);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the 2D point POINT(-71.104 42.315) to a geography type with SRID 4326.", "source": "original", "new_id": 155}
{"id": 28, "function": "ST_Point", "question": "创建一个经度为-71.104、纬度为42.315的二维点，使用SRID 4326进行空间参考设置，并将其强制转换为geography类型。", "sql": "SELECT CAST( ST_SetSRID(ST_Point( -71.104, 42.315), 4326) AS geography);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the 2D point POINT(-71.104 42.315) to a geography type with SRID 4326.", "source": "original", "new_id": 156}
{"id": 28, "function": "ST_Point", "question": "创建一个二维点POINT(-71.104 42.315)，将其空间参考系统标识符设置为EPSG:4326，并强制转换为geography类型。", "sql": "SELECT CAST( ST_SetSRID(ST_Point( -71.104, 42.315), 4326) AS geography);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the 2D point POINT(-71.104 42.315) to a geography type with SRID 4326.", "source": "original", "new_id": 157}
{"id": 28, "function": "ST_Point", "question": "输出为 geography 类型的空间点对象(-71.104, 42.315)。", "sql": "SELECT CAST( ST_SetSRID(ST_Point( -71.104, 42.315), 4326) AS geography);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the 2D point POINT(-71.104 42.315) to a geography type with SRID 4326.", "source": "original", "new_id": 158}
{"id": 28, "function": "ST_Point", "question": "生成结果为具有坐标系WGS84的 geography 类型点对象(-71.104, 42.315)，可直接用于距离测量函数", "sql": "SELECT CAST( ST_SetSRID(ST_Point( -71.104, 42.315), 4326) AS geography);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the 2D point POINT(-71.104 42.315) to a geography type with SRID 4326.", "source": "original", "new_id": 159}
{"id": 28, "function": "ST_Point", "question": "输出将二维点POINT(-71.104 42.315)转换为SRID为4326的地理类型后的结果。", "sql": "SELECT CAST( ST_SetSRID(ST_Point( -71.104, 42.315), 4326) AS geography);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the 2D point POINT(-71.104 42.315) to a geography type with SRID 4326.", "source": "original", "new_id": 160}
{"id": 29, "function": "ST_Point", "question": "创建一个X坐标为-71.104，Y坐标为42.315的二维点，不指定坐标系。", "sql": "SELECT ST_Point(-71.104, 42.315);", "execution_result": [["01010000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a 2D point POINT(-71.104 42.315) with longitude -71.104 and latitude 42.315.", "source": "original", "new_id": 161}
{"id": 29, "function": "ST_Point", "question": "生成一个位于经度-71.104、纬度42.315的地理点。", "sql": "SELECT ST_Point(-71.104, 42.315);", "execution_result": [["01010000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a 2D point POINT(-71.104 42.315) with longitude -71.104 and latitude 42.315.", "source": "original", "new_id": 162}
{"id": 29, "function": "ST_Point", "question": "创建一个二维点对象，其X坐标为-71.104，Y坐标为42.315。", "sql": "SELECT ST_Point(-71.104, 42.315);", "execution_result": [["01010000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a 2D point POINT(-71.104 42.315) with longitude -71.104 and latitude 42.315.", "source": "original", "new_id": 163}
{"id": 29, "function": "ST_Point", "question": "输出一个X坐标为-71.104，Y坐标为42.315的点对象。", "sql": "SELECT ST_Point(-71.104, 42.315);", "execution_result": [["01010000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a 2D point POINT(-71.104 42.315) with longitude -71.104 and latitude 42.315.", "source": "original", "new_id": 164}
{"id": 29, "function": "ST_Point", "question": "创建一个包含指定XY坐标的几何点对象(-71.104, 42.315)。", "sql": "SELECT ST_Point(-71.104, 42.315);", "execution_result": [["01010000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a 2D point POINT(-71.104 42.315) with longitude -71.104 and latitude 42.315.", "source": "original", "new_id": 165}
{"id": 29, "function": "ST_Point", "question": "输出一个经度为-71.104、纬度为42.315的二维点POINT(-71.104 42.315)的WKT字符串表示。", "sql": "SELECT ST_Point(-71.104, 42.315);", "execution_result": [["01010000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a 2D point POINT(-71.104 42.315) with longitude -71.104 and latitude 42.315.", "source": "original", "new_id": 166}
{"id": 30, "function": "ST_PointZ", "question": "创建一个三维点对象，其X坐标为-71.104，Y坐标为42.315，Z坐标为3.4，使用ST_PointZ函数生成。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4);", "execution_result": [["01010000802DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate a 3D point geometry object with X-axis position -71.104, Y-axis position 42.315, elevation value 3.4, and return the complete geometric description of the object.", "source": "original", "new_id": 167}
{"id": 30, "function": "ST_PointZ", "question": "创建一个三维点对象，其X坐标为-71.104，Y坐标为42.315，Z坐标为3.4。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4);", "execution_result": [["01010000802DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate a 3D point geometry object with X-axis position -71.104, Y-axis position 42.315, elevation value 3.4, and return the complete geometric description of the object.", "source": "original", "new_id": 168}
{"id": 30, "function": "ST_PointZ", "question": "创建一个三维点对象，其X坐标为-71.104，Y坐标为42.315，Z坐标为3.4。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4);", "execution_result": [["01010000802DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate a 3D point geometry object with X-axis position -71.104, Y-axis position 42.315, elevation value 3.4, and return the complete geometric description of the object.", "source": "original", "new_id": 169}
{"id": 30, "function": "ST_PointZ", "question": "输出一个三维点对象的WKT字符串表示，该点的X坐标为-71.104，Y坐标为42.315，Z坐标为3.4。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4);", "execution_result": [["01010000802DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate a 3D point geometry object with X-axis position -71.104, Y-axis position 42.315, elevation value 3.4, and return the complete geometric description of the object.", "source": "original", "new_id": 170}
{"id": 30, "function": "ST_PointZ", "question": "返回一个带有Z坐标的三维几何点，其X值为-71.104，Y值为42.315，Z值为3.4，并以PostGIS内部二进制格式输出。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4);", "execution_result": [["01010000802DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate a 3D point geometry object with X-axis position -71.104, Y-axis position 42.315, elevation value 3.4, and return the complete geometric description of the object.", "source": "original", "new_id": 171}
{"id": 30, "function": "ST_PointZ", "question": "生成一个三维点几何对象，X轴位置-71.104，Y轴位置42.315，高程值3.4，并返回该对象的完整几何描述。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4);", "execution_result": [["01010000802DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate a 3D point geometry object with X-axis position -71.104, Y-axis position 42.315, elevation value 3.4, and return the complete geometric description of the object.", "source": "original", "new_id": 172}
{"id": 31, "function": "ST_PointZ", "question": "创建X坐标为-71.104，Y坐标为42.315，Z坐标为3.4，SRID为4326的三维点。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of a 3D point POINT Z (-71.104 42.315 3.4) with the spatial reference system EPSG:4326.", "source": "original", "new_id": 173}
{"id": 31, "function": "ST_PointZ", "question": "用精确参数(-71.104,42.315,3.4)和EPSG:4326坐标系创建三维点。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of a 3D point POINT Z (-71.104 42.315 3.4) with the spatial reference system EPSG:4326.", "source": "original", "new_id": 174}
{"id": 31, "function": "ST_PointZ", "question": "创建一个三维点，其X坐标为-71.104，Y坐标为42.315，Z坐标为3.4，空间参考系为EPSG:4326。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of a 3D point POINT Z (-71.104 42.315 3.4) with the spatial reference system EPSG:4326.", "source": "original", "new_id": 175}
{"id": 31, "function": "ST_PointZ", "question": "输出一个包含XYZ坐标和空间参考系统4326的三维点几何对象(-71.104,42.315,3.4)。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of a 3D point POINT Z (-71.104 42.315 3.4) with the spatial reference system EPSG:4326.", "source": "original", "new_id": 176}
{"id": 31, "function": "ST_PointZ", "question": "创建一个WGS84坐标系下的三维点几何值(-71.104,42.315,3.4)。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of a 3D point POINT Z (-71.104 42.315 3.4) with the spatial reference system EPSG:4326.", "source": "original", "new_id": 177}
{"id": 31, "function": "ST_PointZ", "question": "输出一个三维点POINT Z (-71.104 42.315 3.4)，其空间参考系为EPSG:4326的WKT格式字符串。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of a 3D point POINT Z (-71.104 42.315 3.4) with the spatial reference system EPSG:4326.", "source": "original", "new_id": 178}
{"id": 32, "function": "ST_PointZ", "question": "创建一个三维点，X坐标为-71.104，Y坐标为42.315，Z坐标为3.4，空间参考系统为SRID 4326。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of a 3D point POINTZ(-71.104 42.315 3.4) with spatial reference system SRID 4326.", "source": "original", "new_id": 179}
{"id": 32, "function": "ST_PointZ", "question": "用ST_PointZ函数生成点，参数依次为-71.104（经度）、42.315（纬度）、3.4（高度），SRID设为4326。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of a 3D point POINTZ(-71.104 42.315 3.4) with spatial reference system SRID 4326.", "source": "original", "new_id": 180}
{"id": 32, "function": "ST_PointZ", "question": "创建一个三维点对象，其X坐标为-71.104，Y坐标为42.315，Z坐标为3.4，并指定空间参考系SRID为4326。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of a 3D point POINTZ(-71.104 42.315 3.4) with spatial reference system SRID 4326.", "source": "original", "new_id": 181}
{"id": 32, "function": "ST_PointZ", "question": "输出一个三维点几何对象，其坐标为(-71.104, 42.315, 3.4)，SRID为4326。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of a 3D point POINTZ(-71.104 42.315 3.4) with spatial reference system SRID 4326.", "source": "original", "new_id": 182}
{"id": 32, "function": "ST_PointZ", "question": "返回一个包含XYZ坐标的空间参考为WGS84的三维点几何值(-71.104, 42.315, 3.4)。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of a 3D point POINTZ(-71.104 42.315 3.4) with spatial reference system SRID 4326.", "source": "original", "new_id": 183}
{"id": 32, "function": "ST_PointZ", "question": "输出一个三维点POINTZ(-71.104 42.315 3.4)，其空间参考系SRID为4326的WKT格式字符串。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of a 3D point POINTZ(-71.104 42.315 3.4) with spatial reference system SRID 4326.", "source": "original", "new_id": 184}
{"id": 33, "function": "ST_PointM", "question": "创建一个X坐标为-71.104、Y坐标为42.315、M值为3.4、SRID为4326的二维点对象。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with M-value, where the X-coordinate is -71.104, Y-coordinate is 42.315, M-value is 3.4, spatial reference system is EPSG:4326, and return the result in WKT format.", "source": "original", "new_id": 185}
{"id": 33, "function": "ST_PointM", "question": "使用ST_PointM函数生成点对象，参数依次为-71.104（X）、42.315（Y）、3.4（M）和4326（SRID）。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with M-value, where the X-coordinate is -71.104, Y-coordinate is 42.315, M-value is 3.4, spatial reference system is EPSG:4326, and return the result in WKT format.", "source": "original", "new_id": 186}
{"id": 33, "function": "ST_PointM", "question": "创建一个带有M值的二维点，其X坐标为-71.104，Y坐标为42.315，M值为3.4，空间参考系为EPSG:4326。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with M-value, where the X-coordinate is -71.104, Y-coordinate is 42.315, M-value is 3.4, spatial reference system is EPSG:4326, and return the result in WKT format.", "source": "original", "new_id": 187}
{"id": 33, "function": "ST_PointM", "question": "创建一个包含XY坐标、M值和SRID4326的点几何对象 ，其中X坐标为-71.104、Y坐标为42.315、M值为3.4。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with M-value, where the X-coordinate is -71.104, Y-coordinate is 42.315, M-value is 3.4, spatial reference system is EPSG:4326, and return the result in WKT format.", "source": "original", "new_id": 188}
{"id": 33, "function": "ST_PointM", "question": "返回一个带M值的点对象，X坐标为-71.104、Y坐标为42.315、M值为3.4，其空间参考系统为EPSG:4326。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with M-value, where the X-coordinate is -71.104, Y-coordinate is 42.315, M-value is 3.4, spatial reference system is EPSG:4326, and return the result in WKT format.", "source": "original", "new_id": 189}
{"id": 33, "function": "ST_PointM", "question": "输出一个带有M值的二维点，其X坐标为-71.104，Y坐标为42.315，M值为3.4，空间参考系为EPSG:4326，并以WKT格式返回结果。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with M-value, where the X-coordinate is -71.104, Y-coordinate is 42.315, M-value is 3.4, spatial reference system is EPSG:4326, and return the result in WKT format.", "source": "original", "new_id": 190}
{"id": 34, "function": "ST_PointM", "question": "创建X坐标为-71.104、Y坐标为42.315、M值为3.4的二维点对象，使用SRID 4326坐标系。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with M-value, having X-coordinate -71.104, Y-coordinate 42.315, M-value 3.4, spatial reference SRID 4326, and return the result in WKT format.", "source": "original", "new_id": 191}
{"id": 34, "function": "ST_PointM", "question": "生成一个点对象，参数为X=-71.104，Y=42.315，M=3.4，坐标系为EPSG:4326。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with M-value, having X-coordinate -71.104, Y-coordinate 42.315, M-value 3.4, spatial reference SRID 4326, and return the result in WKT format.", "source": "original", "new_id": 192}
{"id": 34, "function": "ST_PointM", "question": "创建一个带有M值的二维点，其X坐标为-71.104，Y坐标为42.315，M值为3.4，空间参考系为SRID 4326。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with M-value, having X-coordinate -71.104, Y-coordinate 42.315, M-value 3.4, spatial reference SRID 4326, and return the result in WKT format.", "source": "original", "new_id": 193}
{"id": 34, "function": "ST_PointM", "question": "输出一个带有X、Y坐标和M值的点几何对象,X坐标为-71.104、Y坐标为42.315、M值为3.4，使用4326空间参考系统。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with M-value, having X-coordinate -71.104, Y-coordinate 42.315, M-value 3.4, spatial reference SRID 4326, and return the result in WKT format.", "source": "original", "new_id": 194}
{"id": 34, "function": "ST_PointM", "question": "返回一个包含指定坐标和M值的点对象，,X坐标为-71.104、Y坐标为42.315、M值为3.4,坐标系为WGS84。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with M-value, having X-coordinate -71.104, Y-coordinate 42.315, M-value 3.4, spatial reference SRID 4326, and return the result in WKT format.", "source": "original", "new_id": 195}
{"id": 34, "function": "ST_PointM", "question": "输出一个带有M值的二维点，其X坐标为-71.104，Y坐标为42.315，M值为3.4，空间参考系为SRID 4326，并以WKT格式返回结果。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point with M-value, having X-coordinate -71.104, Y-coordinate 42.315, M-value 3.4, spatial reference SRID 4326, and return the result in WKT format.", "source": "original", "new_id": 196}
{"id": 35, "function": "ST_PointM", "question": "创建一个X坐标为-71.104，Y坐标为42.315，M值为3.4的二维点对象,不指定坐标系。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4);", "execution_result": [["01010000402DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point geometry object with M value, where the X-coordinate is -71.104, Y-coordinate is 42.315, M value is 3.4, and return the result in WKT format.", "source": "original", "new_id": 197}
{"id": 35, "function": "ST_PointM", "question": "使用ST_PointM函数生成坐标为(-71.104,42.315)且M值为3.4的点。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4);", "execution_result": [["01010000402DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point geometry object with M value, where the X-coordinate is -71.104, Y-coordinate is 42.315, M value is 3.4, and return the result in WKT format.", "source": "original", "new_id": 198}
{"id": 35, "function": "ST_PointM", "question": "创建一个带有M值的二维点，其X坐标为-71.104，Y坐标为42.315，M值为3.4。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4);", "execution_result": [["01010000402DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point geometry object with M value, where the X-coordinate is -71.104, Y-coordinate is 42.315, M value is 3.4, and return the result in WKT format.", "source": "original", "new_id": 199}
{"id": 35, "function": "ST_PointM", "question": "输出一个带有M值的二维点几何对象(-71.104, 42.315, 3.4)。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4);", "execution_result": [["01010000402DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point geometry object with M value, where the X-coordinate is -71.104, Y-coordinate is 42.315, M value is 3.4, and return the result in WKT format.", "source": "original", "new_id": 200}
{"id": 35, "function": "ST_PointM", "question": "返回一个包含XY坐标和M值的点几何对象(-71.104, 42.315, 3.4)。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4);", "execution_result": [["01010000402DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point geometry object with M value, where the X-coordinate is -71.104, Y-coordinate is 42.315, M value is 3.4, and return the result in WKT format.", "source": "original", "new_id": 201}
{"id": 35, "function": "ST_PointM", "question": "输出一个带有M值的二维点几何对象，其X坐标为-71.104，Y坐标为42.315，M值为3.4，并以WKT格式返回结果。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4);", "execution_result": [["01010000402DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 2D point geometry object with M value, where the X-coordinate is -71.104, Y-coordinate is 42.315, M value is 3.4, and return the result in WKT format.", "source": "original", "new_id": 202}
{"id": 36, "function": "ST_PointZM", "question": "创建一个坐标为X=-71.104、Y=42.315、Z=3.4、M=4.5且SRID为4326的点对象。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a point geometry object with Z and M values, where the X coordinate is -71.104, Y coordinate is 42.315, Z value is 3.4, M value is 4.5, spatial reference system is EPSG:4326, and return the result in WKT format.", "source": "original", "new_id": 203}
{"id": 36, "function": "ST_PointZM", "question": "用ST_PointZM函数生成点，参数依次为-71.104（经度）、42.315（纬度）、3.4（高程）、4.5（M值）、4326（坐标系）。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a point geometry object with Z and M values, where the X coordinate is -71.104, Y coordinate is 42.315, Z value is 3.4, M value is 4.5, spatial reference system is EPSG:4326, and return the result in WKT format.", "source": "original", "new_id": 204}
{"id": 36, "function": "ST_PointZM", "question": "创建一个带Z值和M值的四维点，其X坐标为-71.104，Y坐标为42.315，Z值为3.4，M值为4.5，空间参考系为EPSG:4326。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a point geometry object with Z and M values, where the X coordinate is -71.104, Y coordinate is 42.315, Z value is 3.4, M value is 4.5, spatial reference system is EPSG:4326, and return the result in WKT format.", "source": "original", "new_id": 205}
{"id": 36, "function": "ST_PointZM", "question": "输出一个WGS84坐标系下的三维点对象的二进制几何表示，参数为(-71.104, 42.315, 3.4, 4.5, 4326)。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a point geometry object with Z and M values, where the X coordinate is -71.104, Y coordinate is 42.315, Z value is 3.4, M value is 4.5, spatial reference system is EPSG:4326, and return the result in WKT format.", "source": "original", "new_id": 206}
{"id": 36, "function": "ST_PointZM", "question": "返回一个包含XYZM坐标和SRID的点几何对象(-71.104, 42.315, 3.4, 4.5, 4326)，SRID为4326。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a point geometry object with Z and M values, where the X coordinate is -71.104, Y coordinate is 42.315, Z value is 3.4, M value is 4.5, spatial reference system is EPSG:4326, and return the result in WKT format.", "source": "original", "new_id": 207}
{"id": 36, "function": "ST_PointZM", "question": "输出一个带有Z值和M值的点几何对象，其X坐标为-71.104，Y坐标为42.315，Z值为3.4，M值为4.5，空间参考系为EPSG:4326，并以WKT格式返回结果。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a point geometry object with Z and M values, where the X coordinate is -71.104, Y coordinate is 42.315, Z value is 3.4, M value is 4.5, spatial reference system is EPSG:4326, and return the result in WKT format.", "source": "original", "new_id": 208}
{"id": 37, "function": "ST_PointZM", "question": "创建X坐标为-71.104，Y坐标为42.315，Z值为3.4，M值为4.5的四维点对象。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5);", "execution_result": [["01010000C02DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a four-dimensional point object with X coordinate -71.104, Y coordinate 42.315, Z value 3.4, and M value 4.5.", "source": "original", "new_id": 209}
{"id": 37, "function": "ST_PointZM", "question": "生成一个点对象，其参数依次为：X=-71.104，Y=42.315，Z=3.4，M=4.5。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5);", "execution_result": [["01010000C02DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a four-dimensional point object with X coordinate -71.104, Y coordinate 42.315, Z value 3.4, and M value 4.5.", "source": "original", "new_id": 210}
{"id": 37, "function": "ST_PointZM", "question": "使用ST_PointZM函数生成带有Z值和M值的点对象(-71.104, 42.315, 3.4, 4.5)。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5);", "execution_result": [["01010000C02DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a four-dimensional point object with X coordinate -71.104, Y coordinate 42.315, Z value 3.4, and M value 4.5.", "source": "original", "new_id": 211}
{"id": 37, "function": "ST_PointZM", "question": "输出一个包含XYZM坐标的点对象，其中X=-71.104，Y=42.315，Z=3.4，M=4.5。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5);", "execution_result": [["01010000C02DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a four-dimensional point object with X coordinate -71.104, Y coordinate 42.315, Z value 3.4, and M value 4.5.", "source": "original", "new_id": 212}
{"id": 37, "function": "ST_PointZM", "question": "返回一个带有Z值和M值的点几何对象 X=-71.104，Y=42.315，Z=3.4，M=4.5。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5);", "execution_result": [["01010000C02DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a four-dimensional point object with X coordinate -71.104, Y coordinate 42.315, Z value 3.4, and M value 4.5.", "source": "original", "new_id": 213}
{"id": 37, "function": "ST_PointZM", "question": "输出一个包含X坐标-71.104、Y坐标42.315、Z值3.4和M值4.5的四维点对象的WKT字符串表示。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5);", "execution_result": [["01010000C02DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a four-dimensional point object with X coordinate -71.104, Y coordinate 42.315, Z value 3.4, and M value 4.5.", "source": "original", "new_id": 214}
{"id": 38, "function": "ST_PointZM", "question": "创建一个X坐标为-71.104、Y坐标为42.315、Z值为3.4、M值为4.5且SRID为4326的点对象。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, srid => 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a WKT string of a 4D point with Z and M values, where the X-coordinate is -71.104, Y-coordinate is 42.315, Z-value is 3.4, M-value is 4.5, and the spatial reference system is SRID 4326.", "source": "original", "new_id": 215}
{"id": 38, "function": "ST_PointZM", "question": "使用ST_PointZM函数生成点，参数依次为：-71.104（X）、42.315（Y）、3.4（Z）、4.5（M），坐标系为EPSG:4326。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, srid => 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a WKT string of a 4D point with Z and M values, where the X-coordinate is -71.104, Y-coordinate is 42.315, Z-value is 3.4, M-value is 4.5, and the spatial reference system is SRID 4326.", "source": "original", "new_id": 216}
{"id": 38, "function": "ST_PointZM", "question": "创建一个带有Z值和M值的四维点，X坐标为-71.104，Y坐标为42.315，Z值为3.4，M值为4.5，空间参考系为SRID 4326。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, srid => 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a WKT string of a 4D point with Z and M values, where the X-coordinate is -71.104, Y-coordinate is 42.315, Z-value is 3.4, M-value is 4.5, and the spatial reference system is SRID 4326.", "source": "original", "new_id": 217}
{"id": 38, "function": "ST_PointZM", "question": "输出一个包含XYZM坐标的点对象(-71.104, 42.315, 3.4, 4.5），其空间参考为WGS84。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, srid => 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a WKT string of a 4D point with Z and M values, where the X-coordinate is -71.104, Y-coordinate is 42.315, Z-value is 3.4, M-value is 4.5, and the spatial reference system is SRID 4326.", "source": "original", "new_id": 218}
{"id": 38, "function": "ST_PointZM", "question": "返回一个带有Z值、M值且坐标系为4326的点(-71.104, 42.315, 3.4, 4.5）几何结果。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, srid => 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a WKT string of a 4D point with Z and M values, where the X-coordinate is -71.104, Y-coordinate is 42.315, Z-value is 3.4, M-value is 4.5, and the spatial reference system is SRID 4326.", "source": "original", "new_id": 219}
{"id": 38, "function": "ST_PointZM", "question": "输出一个带有Z值和M值的四维点，其X坐标为-71.104，Y坐标为42.315，Z值为3.4，M值为4.5，空间参考系为SRID 4326的WKT字符串。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, srid => 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a WKT string of a 4D point with Z and M values, where the X-coordinate is -71.104, Y-coordinate is 42.315, Z-value is 3.4, M-value is 4.5, and the spatial reference system is SRID 4326.", "source": "original", "new_id": 220}
{"id": 39, "function": "ST_Polygon", "question": "将LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)这个三维闭合折线转换为SRID为4326的多边形，输出EWKT格式结果。", "sql": "SELECT ST_AsEWKT( ST_Polygon( ST_GeomFromEWKT('LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)'), 4326) );", "execution_result": [["SRID=4326;POLYGON((75 29 1,77 29 2,77 29 3,75 29 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the 3D linestring LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1) after converting it to a polygon with SRID 4326.", "source": "original", "new_id": 221}
{"id": 39, "function": "ST_Polygon", "question": "用坐标点(75 29 1)、(77 29 2)、(77 29 3)、(75 29 1)构成的三维折线创建多边形，坐标系为EPSG:4326，返回EWKT表示。", "sql": "SELECT ST_AsEWKT( ST_Polygon( ST_GeomFromEWKT('LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)'), 4326) );", "execution_result": [["SRID=4326;POLYGON((75 29 1,77 29 2,77 29 3,75 29 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the 3D linestring LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1) after converting it to a polygon with SRID 4326.", "source": "original", "new_id": 222}
{"id": 39, "function": "ST_Polygon", "question": "将三维坐标点构成的闭合线LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)转换为多边形，并赋予SRID 4326，最后以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT( ST_Polygon( ST_GeomFromEWKT('LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)'), 4326) );", "execution_result": [["SRID=4326;POLYGON((75 29 1,77 29 2,77 29 3,75 29 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the 3D linestring LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1) after converting it to a polygon with SRID 4326.", "source": "original", "new_id": 223}
{"id": 39, "function": "ST_Polygon", "question": "输出将三维闭合折线'LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)'转为多边形后的EWKT字符串结果，包含SRID 4326。", "sql": "SELECT ST_AsEWKT( ST_Polygon( ST_GeomFromEWKT('LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)'), 4326) );", "execution_result": [["SRID=4326;POLYGON((75 29 1,77 29 2,77 29 3,75 29 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the 3D linestring LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1) after converting it to a polygon with SRID 4326.", "source": "original", "new_id": 224}
{"id": 39, "function": "ST_Polygon", "question": "将三维坐标的闭合线LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)转换为SRID为4326的多边形，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT( ST_Polygon( ST_GeomFromEWKT('LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)'), 4326) );", "execution_result": [["SRID=4326;POLYGON((75 29 1,77 29 2,77 29 3,75 29 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the 3D linestring LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1) after converting it to a polygon with SRID 4326.", "source": "original", "new_id": 225}
{"id": 39, "function": "ST_Polygon", "question": "输出将三维线段LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)转换为SRID为4326的多边形后的EWKT字符串表示。", "sql": "SELECT ST_AsEWKT( ST_Polygon( ST_GeomFromEWKT('LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)'), 4326) );", "execution_result": [["SRID=4326;POLYGON((75 29 1,77 29 2,77 29 3,75 29 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the 3D linestring LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1) after converting it to a polygon with SRID 4326.", "source": "original", "new_id": 226}
{"id": 40, "function": "ST_Polygon", "question": "将LINESTRING(75 29, 77 29, 77 29, 75 29)转换为SRID为4326的多边形，并输出WKT格式。", "sql": "SELECT ST_AsText( ST_Polygon('LINESTRING(75 29, 77 29, 77 29, 75 29)'::geometry, 4326) );", "execution_result": [["POLYGON((75 29,77 29,77 29,75 29))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(75 29, 77 29, 77 29, 75 29) into a closed polygon and output its WKT string representation with the EPSG:4326 coordinate system.", "source": "original", "new_id": 227}
{"id": 40, "function": "ST_Polygon", "question": "使用坐标点(75 29)、(77 29)、(77 29)、(75 29)构成的折线创建多边形，坐标系为4326，返回文本表示。", "sql": "SELECT ST_AsText( ST_Polygon('LINESTRING(75 29, 77 29, 77 29, 75 29)'::geometry, 4326) );", "execution_result": [["POLYGON((75 29,77 29,77 29,75 29))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(75 29, 77 29, 77 29, 75 29) into a closed polygon and output its WKT string representation with the EPSG:4326 coordinate system.", "source": "original", "new_id": 228}
{"id": 40, "function": "ST_Polygon", "question": "将LINESTRING(75 29, 77 29, 77 29, 75 29)这条闭合线转换为多边形，并使用SRID 4326进行空间参考，最后以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_Polygon('LINESTRING(75 29, 77 29, 77 29, 75 29)'::geometry, 4326) );", "execution_result": [["POLYGON((75 29,77 29,77 29,75 29))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(75 29, 77 29, 77 29, 75 29) into a closed polygon and output its WKT string representation with the EPSG:4326 coordinate system.", "source": "original", "new_id": 229}
{"id": 40, "function": "ST_Polygon", "question": "输出由给定折线'LINESTRING(75 29, 77 29, 77 29, 75 29)'创建的多边形的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_Polygon('LINESTRING(75 29, 77 29, 77 29, 75 29)'::geometry, 4326) );", "execution_result": [["POLYGON((75 29,77 29,77 29,75 29))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(75 29, 77 29, 77 29, 75 29) into a closed polygon and output its WKT string representation with the EPSG:4326 coordinate system.", "source": "original", "new_id": 230}
{"id": 40, "function": "ST_Polygon", "question": "以文本格式返回从折线'LINESTRING(75 29, 77 29, 77 29, 75 29)'生成的多边形几何体。", "sql": "SELECT ST_AsText( ST_Polygon('LINESTRING(75 29, 77 29, 77 29, 75 29)'::geometry, 4326) );", "execution_result": [["POLYGON((75 29,77 29,77 29,75 29))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(75 29, 77 29, 77 29, 75 29) into a closed polygon and output its WKT string representation with the EPSG:4326 coordinate system.", "source": "original", "new_id": 231}
{"id": 40, "function": "ST_Polygon", "question": "将LINESTRING(75 29, 77 29, 77 29, 75 29)转换为闭合多边形后，输出其WKT字符串表示，坐标系为EPSG:4326。", "sql": "SELECT ST_AsText( ST_Polygon('LINESTRING(75 29, 77 29, 77 29, 75 29)'::geometry, 4326) );", "execution_result": [["POLYGON((75 29,77 29,77 29,75 29))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(75 29, 77 29, 77 29, 75 29) into a closed polygon and output its WKT string representation with the EPSG:4326 coordinate system.", "source": "original", "new_id": 232}
{"id": 41, "function": "ST_TileEnvelope", "question": "在SRID 4326的全球范围(-180,-90,180,90)内，计算zoom=3、x=1、y=1的瓦片边界，输出WKT格式。", "sql": "SELECT ST_AsText( ST_TileEnvelope(3, 1, 1, ST_MakeEnvelope(-180, -90, 180, 90, 4326) ) );", "execution_result": [["POLYGON((-135 45,-135 67.5,-90 67.5,-90 45,-135 45))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the envelope rectangle for the tile with zoom level 3, X index 1, and Y index 1, generated within the bounding box (-180 -90, 180 90) under the SRID 4326 coordinate system.", "source": "original", "new_id": 233}
{"id": 41, "function": "ST_TileEnvelope", "question": "将zoom级别3、瓦片坐标(1,1)在WGS84(-180至180经度,-90至90纬度)坐标系下的范围转为WKT文本。", "sql": "SELECT ST_AsText( ST_TileEnvelope(3, 1, 1, ST_MakeEnvelope(-180, -90, 180, 90, 4326) ) );", "execution_result": [["POLYGON((-135 45,-135 67.5,-90 67.5,-90 45,-135 45))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the envelope rectangle for the tile with zoom level 3, X index 1, and Y index 1, generated within the bounding box (-180 -90, 180 90) under the SRID 4326 coordinate system.", "source": "original", "new_id": 234}
{"id": 41, "function": "ST_TileEnvelope", "question": "以WKT格式输出在SRID为4326的坐标系下，基于范围框ST_MakeEnvelope(-180, -90, 180, 90, 4326)生成的缩放级别为3、X轴索引为1、Y轴索引为1的瓦片边界框。", "sql": "SELECT ST_AsText( ST_TileEnvelope(3, 1, 1, ST_MakeEnvelope(-180, -90, 180, 90, 4326) ) );", "execution_result": [["POLYGON((-135 45,-135 67.5,-90 67.5,-90 45,-135 45))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the envelope rectangle for the tile with zoom level 3, X index 1, and Y index 1, generated within the bounding box (-180 -90, 180 90) under the SRID 4326 coordinate system.", "source": "original", "new_id": 235}
{"id": 41, "function": "ST_TileEnvelope", "question": "输出zoom=3、x=1、y=1瓦片范围的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_TileEnvelope(3, 1, 1, ST_MakeEnvelope(-180, -90, 180, 90, 4326) ) );", "execution_result": [["POLYGON((-135 45,-135 67.5,-90 67.5,-90 45,-135 45))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the envelope rectangle for the tile with zoom level 3, X index 1, and Y index 1, generated within the bounding box (-180 -90, 180 90) under the SRID 4326 coordinate system.", "source": "original", "new_id": 236}
{"id": 41, "function": "ST_TileEnvelope", "question": "以Well-Known Text格式返回第三层级(1,1)瓦片的边界范围(-180,-90,180,90)界。", "sql": "SELECT ST_AsText( ST_TileEnvelope(3, 1, 1, ST_MakeEnvelope(-180, -90, 180, 90, 4326) ) );", "execution_result": [["POLYGON((-135 45,-135 67.5,-90 67.5,-90 45,-135 45))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the envelope rectangle for the tile with zoom level 3, X index 1, and Y index 1, generated within the bounding box (-180 -90, 180 90) under the SRID 4326 coordinate system.", "source": "original", "new_id": 237}
{"id": 41, "function": "ST_TileEnvelope", "question": "输出在SRID为4326的坐标系下，基于范围框(-180 -90, 180 90)生成的缩放级别为3、X索引为1、Y索引为1的瓦片包络矩形对应的WKT字符串。", "sql": "SELECT ST_AsText( ST_TileEnvelope(3, 1, 1, ST_MakeEnvelope(-180, -90, 180, 90, 4326) ) );", "execution_result": [["POLYGON((-135 45,-135 67.5,-90 67.5,-90 45,-135 45))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the envelope rectangle for the tile with zoom level 3, X index 1, and Y index 1, generated within the bounding box (-180 -90, 180 90) under the SRID 4326 coordinate system.", "source": "original", "new_id": 238}
{"id": 42, "function": "ST_TileEnvelope", "question": "输出缩放级别为2、横向索引为1、纵向索引为1的瓦片空间范围的WKT表示。", "sql": "SELECT ST_AsText( ST_TileEnvelope(2, 1, 1) );", "execution_result": [["POLYGON((-10018754.171394622 0,-10018754.171394622 10018754.171394622,0 10018754.171394622,0 0,-10018754.171394622 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the tile bounding box with zoom level 2, X coordinate 1, and Y coordinate 1.", "source": "original", "new_id": 239}
{"id": 42, "function": "ST_TileEnvelope", "question": "将瓦片参数（zoom=2, x=1, y=1）对应的空间范围转换为WKT字符串。", "sql": "SELECT ST_AsText( ST_TileEnvelope(2, 1, 1) );", "execution_result": [["POLYGON((-10018754.171394622 0,-10018754.171394622 10018754.171394622,0 10018754.171394622,0 0,-10018754.171394622 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the tile bounding box with zoom level 2, X coordinate 1, and Y coordinate 1.", "source": "original", "new_id": 240}
{"id": 42, "function": "ST_TileEnvelope", "question": "将缩放级别为2、X轴瓦片坐标为1、Y轴瓦片坐标为1的瓦片边界框转换为WKT格式输出。", "sql": "SELECT ST_AsText( ST_TileEnvelope(2, 1, 1) );", "execution_result": [["POLYGON((-10018754.171394622 0,-10018754.171394622 10018754.171394622,0 10018754.171394622,0 0,-10018754.171394622 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the tile bounding box with zoom level 2, X coordinate 1, and Y coordinate 1.", "source": "original", "new_id": 241}
{"id": 42, "function": "ST_TileEnvelope", "question": "返回缩放级别2、坐标(1,1)的瓦片范围的WKT字符串。", "sql": "SELECT ST_AsText( ST_TileEnvelope(2, 1, 1) );", "execution_result": [["POLYGON((-10018754.171394622 0,-10018754.171394622 10018754.171394622,0 10018754.171394622,0 0,-10018754.171394622 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the tile bounding box with zoom level 2, X coordinate 1, and Y coordinate 1.", "source": "original", "new_id": 242}
{"id": 42, "function": "ST_TileEnvelope", "question": "以WKT格式输出瓦片(2,1,1)的空间范围几何。", "sql": "SELECT ST_AsText( ST_TileEnvelope(2, 1, 1) );", "execution_result": [["POLYGON((-10018754.171394622 0,-10018754.171394622 10018754.171394622,0 10018754.171394622,0 0,-10018754.171394622 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the tile bounding box with zoom level 2, X coordinate 1, and Y coordinate 1.", "source": "original", "new_id": 243}
{"id": 42, "function": "ST_TileEnvelope", "question": "输出缩放级别为2、X坐标为1、Y坐标为1的瓦片边界框的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_TileEnvelope(2, 1, 1) );", "execution_result": [["POLYGON((-10018754.171394622 0,-10018754.171394622 10018754.171394622,0 10018754.171394622,0 0,-10018754.171394622 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the tile bounding box with zoom level 2, X coordinate 1, and Y coordinate 1.", "source": "original", "new_id": 244}
{"id": 43, "function": "ST_Hexagon", "question": "将边长为1.0、中心在(0,0)的六边形设置为3857坐标系，输出WKT文本。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Hexagon(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((-1 0,-0.5 -0.866025403784439,0.5 -0.866025403784439,1 0,0.5 0.866025403784439,-0.5 0.866025403784439,-1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a hexagonal geometry with a side length of 1.0, centered at the origin (0, 0), and provide its WKT string representation after projecting it to Web Mercator (SRID 3857).", "source": "original", "new_id": 245}
{"id": 43, "function": "ST_Hexagon", "question": "创建边长1.0、中心坐标(0,0)的六边形，赋予SRID 3857后转换为文本格式。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Hexagon(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((-1 0,-0.5 -0.866025403784439,0.5 -0.866025403784439,1 0,0.5 0.866025403784439,-0.5 0.866025403784439,-1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a hexagonal geometry with a side length of 1.0, centered at the origin (0, 0), and provide its WKT string representation after projecting it to Web Mercator (SRID 3857).", "source": "original", "new_id": 246}
{"id": 43, "function": "ST_Hexagon", "question": "创建一个边长为1.0、中心点在坐标原点(0, 0)的六边形几何体，将其空间参考系统设置为SRID 3857，并以WKT格式输出该几何对象。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Hexagon(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((-1 0,-0.5 -0.866025403784439,0.5 -0.866025403784439,1 0,0.5 0.866025403784439,-0.5 0.866025403784439,-1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a hexagonal geometry with a side length of 1.0, centered at the origin (0, 0), and provide its WKT string representation after projecting it to Web Mercator (SRID 3857).", "source": "original", "new_id": 247}
{"id": 43, "function": "ST_Hexagon", "question": "输出边长为1.0、中心在(0,0)的中心六边形在3857坐标系下的WKT字符串。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Hexagon(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((-1 0,-0.5 -0.866025403784439,0.5 -0.866025403784439,1 0,0.5 0.866025403784439,-0.5 0.866025403784439,-1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a hexagonal geometry with a side length of 1.0, centered at the origin (0, 0), and provide its WKT string representation after projecting it to Web Mercator (SRID 3857).", "source": "original", "new_id": 248}
{"id": 43, "function": "ST_Hexagon", "question": "返回边长为1.0、中心在(0,0)六边形几何经过在3857坐标系下的文本表示结果。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Hexagon(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((-1 0,-0.5 -0.866025403784439,0.5 -0.866025403784439,1 0,0.5 0.866025403784439,-0.5 0.866025403784439,-1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a hexagonal geometry with a side length of 1.0, centered at the origin (0, 0), and provide its WKT string representation after projecting it to Web Mercator (SRID 3857).", "source": "original", "new_id": 249}
{"id": 43, "function": "ST_Hexagon", "question": "输出边长为1.0、中心点在坐标原点(0, 0)的正六边形几何体，并将其设置为Web墨卡托投影(SRID 3857)后的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Hexagon(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((-1 0,-0.5 -0.866025403784439,0.5 -0.866025403784439,1 0,0.5 0.866025403784439,-0.5 0.866025403784439,-1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a hexagonal geometry with a side length of 1.0, centered at the origin (0, 0), and provide its WKT string representation after projecting it to Web Mercator (SRID 3857).", "source": "original", "new_id": 250}
{"id": 44, "function": "ST_Square", "question": "将边长为1.0、中心在坐标原点(0,0)的正方形设置为3857坐标系，并输出WKT格式。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Square(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((0 0,0 1,1 1,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a square geometry centered at the origin (0, 0) with a side length of 1.0, transformed to the SRID 3857 coordinate system.", "source": "original", "new_id": 251}
{"id": 44, "function": "ST_Square", "question": "输出中心在(0,0)、边长为1.0的正方形在Web墨卡托投影(3857)下的WKT文本。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Square(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((0 0,0 1,1 1,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a square geometry centered at the origin (0, 0) with a side length of 1.0, transformed to the SRID 3857 coordinate system.", "source": "original", "new_id": 252}
{"id": 44, "function": "ST_Square", "question": "为边长为1.0、中心在(0,0)的正方形设置3857坐标系。", "sql": "SELECT ST_SetSRID(ST_Square(1.0, 0, 0), 3857);", "execution_result": [["0103000020110F00000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create a square with a side length of 1.0 centered at (0,0) in the 3857 coordinate system.", "source": "original", "new_id": 253}
{"id": 44, "function": "ST_Square", "question": "获取中心在原点，边长为1的正方形几何对象在Web墨卡托投影下的WKT字符串输出。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Square(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((0 0,0 1,1 1,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a square geometry centered at the origin (0, 0) with a side length of 1.0, transformed to the SRID 3857 coordinate system.", "source": "original", "new_id": 254}
{"id": 44, "function": "ST_Square", "question": "输出的带有3857坐标系的中心在原点，边长为1的正方形的文本表示。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Square(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((0 0,0 1,1 1,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a square geometry centered at the origin (0, 0) with a side length of 1.0, transformed to the SRID 3857 coordinate system.", "source": "original", "new_id": 255}
{"id": 44, "function": "ST_Square", "question": "输出以原点坐标(0, 0)为中心、边长为1.0的正方形几何体，并转换为SRID 3857坐标系后的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Square(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((0 0,0 1,1 1,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of a square geometry centered at the origin (0, 0) with a side length of 1.0, transformed to the SRID 3857 coordinate system.", "source": "original", "new_id": 256}
{"id": 45, "function": "ST_Letters", "question": "将字符串'Yo'转换为空间字母几何对象，并以保留1位小数的WKT格式输出。", "sql": "SELECT ST_AsText(ST_Letters('Yo'), 1);", "execution_result": [["MULTIPOLYGON(((34.5 73.8,54 73.8,53.1 72.9,35.1 28.7,35.1 0.9,36 0,18 0,19 0.9,19 28.7,0.9 72.9,0 73.8,19.5 73.8,18.6 72.9,23 61.6,27 47.4,31.1 61.9,35.4 72.9,34.5 73.8)),((68.9 58,70 58,71.1 57.9,72.2 57.8,73.2 57.7,74.3 57.5,75.3 57.3,76.2 57.1,77.2 56.8,78.1 56.5,79 56.1,79.9 55.7,80.7 55.3,81.5 54.8,82.3 54.3,83 53.7,83.7 53.1,84.4 52.5,85 51.8,85.6 51.1,86.1 50.3,86.6 49.5,87.1 48.7,87.6 47.9,88 47,88.4 46.1,88.7 45.1,89 44.1,89.2 43.1,89.4 42.1,89.5 41,89.6 39.9,89.6 38.7,89.6 18.9,89.6 17.7,89.5 16.6,89.4 15.5,89.2 14.5,89 13.5,88.8 12.5,88.5 11.5,88.1 10.6,87.7 9.7,87.3 8.9,86.8 8.1,86.3 7.3,85.7 6.6,85.1 5.9,84.5 5.2,83.8 4.6,83.1 4,82.3 3.5,81.6 2.9,80.8 2.5,79.9 2,79.1 1.6,78.2 1.2,77.3 0.8,76.4 0.5,75.4 0.2,74.4 0,73.4 -0.2,72.3 -0.4,71.2 -0.5,70.1 -0.5,69 -0.5,67.9 -0.5,66.8 -0.4,65.7 -0.3,64.6 -0.2,63.6 0,62.6 0.2,61.6 0.5,60.6 0.8,59.7 1.1,58.8 1.5,57.9 1.9,57.1 2.4,56.3 2.9,55.5 3.4,54.8 3.9,54.1 4.5,53.4 5.1,52.8 5.8,52.2 6.5,51.7 7.2,51.2 8,50.7 8.8,50.2 9.7,49.8 10.6,49.4 11.5,49.1 12.5,48.8 13.5,48.6 14.5,48.4 15.6,48.3 16.7,48.2 17.8,48.2 18.9,48.2 38.7,48.2 39.9,48.3 41,48.4 42.1,48.6 43.1,48.8 44.1,49 45.1,49.3 46.1,49.7 47,50.1 47.9,50.5 48.7,51 49.5,51.5 50.3,52.1 51,52.7 51.7,53.3 52.4,54 53,54.7 53.6,55.5 54.1,56.2 54.6,57.1 55.1,57.9 55.6,58.8 56,59.7 56.4,60.6 56.7,61.6 57,62.5 57.3,63.5 57.5,64.6 57.7,65.6 57.8,66.7 57.9,67.8 58,68.9 58),(73.8 38.9,72.3 41.6,69 42.6,65.6 41.7,64.1 38.9,64.1 18.9,65.5 16.2,68.8 15.2,72.1 16.1,73.8 18.9,73.8 38.9)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric letter shape converted from the string 'Yo', rounded to 1 decimal place.", "source": "original", "new_id": 257}
{"id": 45, "function": "ST_Letters", "question": "使用ST_Letters函数处理'Yo'字符串，用ST_AsText输出保留1位小数的结果。", "sql": "SELECT ST_AsText(ST_Letters('Yo'), 1);", "execution_result": [["MULTIPOLYGON(((34.5 73.8,54 73.8,53.1 72.9,35.1 28.7,35.1 0.9,36 0,18 0,19 0.9,19 28.7,0.9 72.9,0 73.8,19.5 73.8,18.6 72.9,23 61.6,27 47.4,31.1 61.9,35.4 72.9,34.5 73.8)),((68.9 58,70 58,71.1 57.9,72.2 57.8,73.2 57.7,74.3 57.5,75.3 57.3,76.2 57.1,77.2 56.8,78.1 56.5,79 56.1,79.9 55.7,80.7 55.3,81.5 54.8,82.3 54.3,83 53.7,83.7 53.1,84.4 52.5,85 51.8,85.6 51.1,86.1 50.3,86.6 49.5,87.1 48.7,87.6 47.9,88 47,88.4 46.1,88.7 45.1,89 44.1,89.2 43.1,89.4 42.1,89.5 41,89.6 39.9,89.6 38.7,89.6 18.9,89.6 17.7,89.5 16.6,89.4 15.5,89.2 14.5,89 13.5,88.8 12.5,88.5 11.5,88.1 10.6,87.7 9.7,87.3 8.9,86.8 8.1,86.3 7.3,85.7 6.6,85.1 5.9,84.5 5.2,83.8 4.6,83.1 4,82.3 3.5,81.6 2.9,80.8 2.5,79.9 2,79.1 1.6,78.2 1.2,77.3 0.8,76.4 0.5,75.4 0.2,74.4 0,73.4 -0.2,72.3 -0.4,71.2 -0.5,70.1 -0.5,69 -0.5,67.9 -0.5,66.8 -0.4,65.7 -0.3,64.6 -0.2,63.6 0,62.6 0.2,61.6 0.5,60.6 0.8,59.7 1.1,58.8 1.5,57.9 1.9,57.1 2.4,56.3 2.9,55.5 3.4,54.8 3.9,54.1 4.5,53.4 5.1,52.8 5.8,52.2 6.5,51.7 7.2,51.2 8,50.7 8.8,50.2 9.7,49.8 10.6,49.4 11.5,49.1 12.5,48.8 13.5,48.6 14.5,48.4 15.6,48.3 16.7,48.2 17.8,48.2 18.9,48.2 38.7,48.2 39.9,48.3 41,48.4 42.1,48.6 43.1,48.8 44.1,49 45.1,49.3 46.1,49.7 47,50.1 47.9,50.5 48.7,51 49.5,51.5 50.3,52.1 51,52.7 51.7,53.3 52.4,54 53,54.7 53.6,55.5 54.1,56.2 54.6,57.1 55.1,57.9 55.6,58.8 56,59.7 56.4,60.6 56.7,61.6 57,62.5 57.3,63.5 57.5,64.6 57.7,65.6 57.8,66.7 57.9,67.8 58,68.9 58),(73.8 38.9,72.3 41.6,69 42.6,65.6 41.7,64.1 38.9,64.1 18.9,65.5 16.2,68.8 15.2,72.1 16.1,73.8 18.9,73.8 38.9)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric letter shape converted from the string 'Yo', rounded to 1 decimal place.", "source": "original", "new_id": 258}
{"id": 45, "function": "ST_Letters", "question": "将字符串'Yo'转换为由字母Y和o组成的几何图形，并使用ST_AsText函数以WKT格式输出，保留1位小数精度。", "sql": "SELECT ST_AsText(ST_Letters('Yo'), 1);", "execution_result": [["MULTIPOLYGON(((34.5 73.8,54 73.8,53.1 72.9,35.1 28.7,35.1 0.9,36 0,18 0,19 0.9,19 28.7,0.9 72.9,0 73.8,19.5 73.8,18.6 72.9,23 61.6,27 47.4,31.1 61.9,35.4 72.9,34.5 73.8)),((68.9 58,70 58,71.1 57.9,72.2 57.8,73.2 57.7,74.3 57.5,75.3 57.3,76.2 57.1,77.2 56.8,78.1 56.5,79 56.1,79.9 55.7,80.7 55.3,81.5 54.8,82.3 54.3,83 53.7,83.7 53.1,84.4 52.5,85 51.8,85.6 51.1,86.1 50.3,86.6 49.5,87.1 48.7,87.6 47.9,88 47,88.4 46.1,88.7 45.1,89 44.1,89.2 43.1,89.4 42.1,89.5 41,89.6 39.9,89.6 38.7,89.6 18.9,89.6 17.7,89.5 16.6,89.4 15.5,89.2 14.5,89 13.5,88.8 12.5,88.5 11.5,88.1 10.6,87.7 9.7,87.3 8.9,86.8 8.1,86.3 7.3,85.7 6.6,85.1 5.9,84.5 5.2,83.8 4.6,83.1 4,82.3 3.5,81.6 2.9,80.8 2.5,79.9 2,79.1 1.6,78.2 1.2,77.3 0.8,76.4 0.5,75.4 0.2,74.4 0,73.4 -0.2,72.3 -0.4,71.2 -0.5,70.1 -0.5,69 -0.5,67.9 -0.5,66.8 -0.4,65.7 -0.3,64.6 -0.2,63.6 0,62.6 0.2,61.6 0.5,60.6 0.8,59.7 1.1,58.8 1.5,57.9 1.9,57.1 2.4,56.3 2.9,55.5 3.4,54.8 3.9,54.1 4.5,53.4 5.1,52.8 5.8,52.2 6.5,51.7 7.2,51.2 8,50.7 8.8,50.2 9.7,49.8 10.6,49.4 11.5,49.1 12.5,48.8 13.5,48.6 14.5,48.4 15.6,48.3 16.7,48.2 17.8,48.2 18.9,48.2 38.7,48.2 39.9,48.3 41,48.4 42.1,48.6 43.1,48.8 44.1,49 45.1,49.3 46.1,49.7 47,50.1 47.9,50.5 48.7,51 49.5,51.5 50.3,52.1 51,52.7 51.7,53.3 52.4,54 53,54.7 53.6,55.5 54.1,56.2 54.6,57.1 55.1,57.9 55.6,58.8 56,59.7 56.4,60.6 56.7,61.6 57,62.5 57.3,63.5 57.5,64.6 57.7,65.6 57.8,66.7 57.9,67.8 58,68.9 58),(73.8 38.9,72.3 41.6,69 42.6,65.6 41.7,64.1 38.9,64.1 18.9,65.5 16.2,68.8 15.2,72.1 16.1,73.8 18.9,73.8 38.9)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric letter shape converted from the string 'Yo', rounded to 1 decimal place.", "source": "original", "new_id": 259}
{"id": 45, "function": "ST_Letters", "question": "输出字符串'Yo'对应的空间几何对象的WKT表示，保留1位小数。", "sql": "SELECT ST_AsText(ST_Letters('Yo'), 1);", "execution_result": [["MULTIPOLYGON(((34.5 73.8,54 73.8,53.1 72.9,35.1 28.7,35.1 0.9,36 0,18 0,19 0.9,19 28.7,0.9 72.9,0 73.8,19.5 73.8,18.6 72.9,23 61.6,27 47.4,31.1 61.9,35.4 72.9,34.5 73.8)),((68.9 58,70 58,71.1 57.9,72.2 57.8,73.2 57.7,74.3 57.5,75.3 57.3,76.2 57.1,77.2 56.8,78.1 56.5,79 56.1,79.9 55.7,80.7 55.3,81.5 54.8,82.3 54.3,83 53.7,83.7 53.1,84.4 52.5,85 51.8,85.6 51.1,86.1 50.3,86.6 49.5,87.1 48.7,87.6 47.9,88 47,88.4 46.1,88.7 45.1,89 44.1,89.2 43.1,89.4 42.1,89.5 41,89.6 39.9,89.6 38.7,89.6 18.9,89.6 17.7,89.5 16.6,89.4 15.5,89.2 14.5,89 13.5,88.8 12.5,88.5 11.5,88.1 10.6,87.7 9.7,87.3 8.9,86.8 8.1,86.3 7.3,85.7 6.6,85.1 5.9,84.5 5.2,83.8 4.6,83.1 4,82.3 3.5,81.6 2.9,80.8 2.5,79.9 2,79.1 1.6,78.2 1.2,77.3 0.8,76.4 0.5,75.4 0.2,74.4 0,73.4 -0.2,72.3 -0.4,71.2 -0.5,70.1 -0.5,69 -0.5,67.9 -0.5,66.8 -0.4,65.7 -0.3,64.6 -0.2,63.6 0,62.6 0.2,61.6 0.5,60.6 0.8,59.7 1.1,58.8 1.5,57.9 1.9,57.1 2.4,56.3 2.9,55.5 3.4,54.8 3.9,54.1 4.5,53.4 5.1,52.8 5.8,52.2 6.5,51.7 7.2,51.2 8,50.7 8.8,50.2 9.7,49.8 10.6,49.4 11.5,49.1 12.5,48.8 13.5,48.6 14.5,48.4 15.6,48.3 16.7,48.2 17.8,48.2 18.9,48.2 38.7,48.2 39.9,48.3 41,48.4 42.1,48.6 43.1,48.8 44.1,49 45.1,49.3 46.1,49.7 47,50.1 47.9,50.5 48.7,51 49.5,51.5 50.3,52.1 51,52.7 51.7,53.3 52.4,54 53,54.7 53.6,55.5 54.1,56.2 54.6,57.1 55.1,57.9 55.6,58.8 56,59.7 56.4,60.6 56.7,61.6 57,62.5 57.3,63.5 57.5,64.6 57.7,65.6 57.8,66.7 57.9,67.8 58,68.9 58),(73.8 38.9,72.3 41.6,69 42.6,65.6 41.7,64.1 38.9,64.1 18.9,65.5 16.2,68.8 15.2,72.1 16.1,73.8 18.9,73.8 38.9)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric letter shape converted from the string 'Yo', rounded to 1 decimal place.", "source": "original", "new_id": 260}
{"id": 45, "function": "ST_Letters", "question": "以保留1位小数的WKT格式返回'Yo'字符串的空间几何表示。", "sql": "SELECT ST_AsText(ST_Letters('Yo'), 1);", "execution_result": [["MULTIPOLYGON(((34.5 73.8,54 73.8,53.1 72.9,35.1 28.7,35.1 0.9,36 0,18 0,19 0.9,19 28.7,0.9 72.9,0 73.8,19.5 73.8,18.6 72.9,23 61.6,27 47.4,31.1 61.9,35.4 72.9,34.5 73.8)),((68.9 58,70 58,71.1 57.9,72.2 57.8,73.2 57.7,74.3 57.5,75.3 57.3,76.2 57.1,77.2 56.8,78.1 56.5,79 56.1,79.9 55.7,80.7 55.3,81.5 54.8,82.3 54.3,83 53.7,83.7 53.1,84.4 52.5,85 51.8,85.6 51.1,86.1 50.3,86.6 49.5,87.1 48.7,87.6 47.9,88 47,88.4 46.1,88.7 45.1,89 44.1,89.2 43.1,89.4 42.1,89.5 41,89.6 39.9,89.6 38.7,89.6 18.9,89.6 17.7,89.5 16.6,89.4 15.5,89.2 14.5,89 13.5,88.8 12.5,88.5 11.5,88.1 10.6,87.7 9.7,87.3 8.9,86.8 8.1,86.3 7.3,85.7 6.6,85.1 5.9,84.5 5.2,83.8 4.6,83.1 4,82.3 3.5,81.6 2.9,80.8 2.5,79.9 2,79.1 1.6,78.2 1.2,77.3 0.8,76.4 0.5,75.4 0.2,74.4 0,73.4 -0.2,72.3 -0.4,71.2 -0.5,70.1 -0.5,69 -0.5,67.9 -0.5,66.8 -0.4,65.7 -0.3,64.6 -0.2,63.6 0,62.6 0.2,61.6 0.5,60.6 0.8,59.7 1.1,58.8 1.5,57.9 1.9,57.1 2.4,56.3 2.9,55.5 3.4,54.8 3.9,54.1 4.5,53.4 5.1,52.8 5.8,52.2 6.5,51.7 7.2,51.2 8,50.7 8.8,50.2 9.7,49.8 10.6,49.4 11.5,49.1 12.5,48.8 13.5,48.6 14.5,48.4 15.6,48.3 16.7,48.2 17.8,48.2 18.9,48.2 38.7,48.2 39.9,48.3 41,48.4 42.1,48.6 43.1,48.8 44.1,49 45.1,49.3 46.1,49.7 47,50.1 47.9,50.5 48.7,51 49.5,51.5 50.3,52.1 51,52.7 51.7,53.3 52.4,54 53,54.7 53.6,55.5 54.1,56.2 54.6,57.1 55.1,57.9 55.6,58.8 56,59.7 56.4,60.6 56.7,61.6 57,62.5 57.3,63.5 57.5,64.6 57.7,65.6 57.8,66.7 57.9,67.8 58,68.9 58),(73.8 38.9,72.3 41.6,69 42.6,65.6 41.7,64.1 38.9,64.1 18.9,65.5 16.2,68.8 15.2,72.1 16.1,73.8 18.9,73.8 38.9)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric letter shape converted from the string 'Yo', rounded to 1 decimal place.", "source": "original", "new_id": 261}
{"id": 45, "function": "ST_Letters", "question": "输出将字符串'Yo'转换为几何字母形状后，保留1位小数精度的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Letters('Yo'), 1);", "execution_result": [["MULTIPOLYGON(((34.5 73.8,54 73.8,53.1 72.9,35.1 28.7,35.1 0.9,36 0,18 0,19 0.9,19 28.7,0.9 72.9,0 73.8,19.5 73.8,18.6 72.9,23 61.6,27 47.4,31.1 61.9,35.4 72.9,34.5 73.8)),((68.9 58,70 58,71.1 57.9,72.2 57.8,73.2 57.7,74.3 57.5,75.3 57.3,76.2 57.1,77.2 56.8,78.1 56.5,79 56.1,79.9 55.7,80.7 55.3,81.5 54.8,82.3 54.3,83 53.7,83.7 53.1,84.4 52.5,85 51.8,85.6 51.1,86.1 50.3,86.6 49.5,87.1 48.7,87.6 47.9,88 47,88.4 46.1,88.7 45.1,89 44.1,89.2 43.1,89.4 42.1,89.5 41,89.6 39.9,89.6 38.7,89.6 18.9,89.6 17.7,89.5 16.6,89.4 15.5,89.2 14.5,89 13.5,88.8 12.5,88.5 11.5,88.1 10.6,87.7 9.7,87.3 8.9,86.8 8.1,86.3 7.3,85.7 6.6,85.1 5.9,84.5 5.2,83.8 4.6,83.1 4,82.3 3.5,81.6 2.9,80.8 2.5,79.9 2,79.1 1.6,78.2 1.2,77.3 0.8,76.4 0.5,75.4 0.2,74.4 0,73.4 -0.2,72.3 -0.4,71.2 -0.5,70.1 -0.5,69 -0.5,67.9 -0.5,66.8 -0.4,65.7 -0.3,64.6 -0.2,63.6 0,62.6 0.2,61.6 0.5,60.6 0.8,59.7 1.1,58.8 1.5,57.9 1.9,57.1 2.4,56.3 2.9,55.5 3.4,54.8 3.9,54.1 4.5,53.4 5.1,52.8 5.8,52.2 6.5,51.7 7.2,51.2 8,50.7 8.8,50.2 9.7,49.8 10.6,49.4 11.5,49.1 12.5,48.8 13.5,48.6 14.5,48.4 15.6,48.3 16.7,48.2 17.8,48.2 18.9,48.2 38.7,48.2 39.9,48.3 41,48.4 42.1,48.6 43.1,48.8 44.1,49 45.1,49.3 46.1,49.7 47,50.1 47.9,50.5 48.7,51 49.5,51.5 50.3,52.1 51,52.7 51.7,53.3 52.4,54 53,54.7 53.6,55.5 54.1,56.2 54.6,57.1 55.1,57.9 55.6,58.8 56,59.7 56.4,60.6 56.7,61.6 57,62.5 57.3,63.5 57.5,64.6 57.7,65.6 57.8,66.7 57.9,67.8 58,68.9 58),(73.8 38.9,72.3 41.6,69 42.6,65.6 41.7,64.1 38.9,64.1 18.9,65.5 16.2,68.8 15.2,72.1 16.1,73.8 18.9,73.8 38.9)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric letter shape converted from the string 'Yo', rounded to 1 decimal place.", "source": "original", "new_id": 262}
{"id": 46, "function": "ST_Letters", "question": "将ST_Letters('Yo')生成的几何对象X,Y方向各放大为原来的10倍后，在X轴和Y轴方向各平移100个单位。", "sql": "SELECT ST_Translate(ST_Scale(ST_Letters('Yo'), 10, 10), 100,100);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of the geometric object obtained by first scaling the string 'Yo' converted to a geometry by a factor of 10 in both X and Y directions, then translating it by 100 units along the X-axis and 100 units along the Y-axis.", "source": "original", "new_id": 263}
{"id": 46, "function": "ST_Letters", "question": "先用ST_Scale将'Yo'字母几何对象放大10倍（X,Y方向各放大原来的10倍），再用ST_Translate在X轴和Y轴方向各平移100个单位。", "sql": "SELECT ST_Translate(ST_Scale(ST_Letters('Yo'), 10, 10), 100,100);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of the geometric object obtained by first scaling the string 'Yo' converted to a geometry by a factor of 10 in both X and Y directions, then translating it by 100 units along the X-axis and 100 units along the Y-axis.", "source": "original", "new_id": 264}
{"id": 46, "function": "ST_Letters", "question": "首先使用ST_Letters函数生成字符串'Yo'的几何图形，然后用ST_Scale函数将该图形在x和y方向各放大为原来的10倍，最后用ST_Translate函数将放大后的图形在x方向平移100个单位、在y方向平移100个单位。", "sql": "SELECT ST_Translate(ST_Scale(ST_Letters('Yo'), 10, 10), 100,100);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of the geometric object obtained by first scaling the string 'Yo' converted to a geometry by a factor of 10 in both X and Y directions, then translating it by 100 units along the X-axis and 100 units along the Y-axis.", "source": "original", "new_id": 265}
{"id": 46, "function": "ST_Letters", "question": "输出经过缩放（X和Y方向各放大10倍）和平移（X和Y方向各平移100个单位）处理后的'Yo'字母几何对象。", "sql": "SELECT ST_Translate(ST_Scale(ST_Letters('Yo'), 10, 10), 100,100);", "execution_result": [["010600000002000000010300000001000000120000000000000000D07B400000000000308A4000000000000084400000000000308A400000000000B883400000000000E889400000000000307C4000000000003078400000000000307C400000000000405B400000000000C07C4000000000000059400000000000807140000000000000594000000000002072400000000000405B40000000000020724000000000003078400000000000405B400000000000E8894000000000000059400000000000308A4000000000007072400000000000308A400000000000E071400000000000E889400000000000A07440000000000060864000000000002077400000000000F081400000000000B0794000000000007886400000000000607C400000000000E889400000000000D07B400000000000308A4001030000000200000083000000483BB60B92A588400000000000408540483BB60B92FD88400000000000408540483BB60B925589400000000000388540493BB60B92AD89400000000000308540493BB60B92FD89400000000000288540483BB60B92558A400000000000188540483BB60B92A58A400000000000088540493BB60B92ED8A400000000000F88440493BB60B923D8B400000000000E08440483BB60B92858B400000000000C88440483BB60B92CD8B400000000000A88440493BB60B92158C400000000000888440493BB60B92558C400000000000688440483BB60B92958C400000000000408440483BB60B92D58C400000000000188440483BB60B920D8D400000000000E88340493BB60B92458D400000000000B88340493BB60B927D8D400000000000888340483BB60B92AD8D400000000000508340483BB60B92DD8D400000000000188340483BB60B92058E400000000000D88240483BB60B922D8E400000000000988240483BB60B92558E400000000000588240483BB60B927D8E400000000000188240483BB60B929D8E400000000000D08140493BB60B92BD8E400000000000888140493BB60B92D58E400000000000388140483BB60B92ED8E400000000000E88040493BB60B92FD8E400000000000988040493BB60B920D8F400000000000488040483BB60B92158F400000000000E07F40483BB60B921D8F400100000000307F40483BB60B921D8F400000000000707E40483BB60B921D8F400000000000107240483BB60B921D8F400000000000507140483BB60B92158F400000000000A07040493BB60B920D8F400000000000E06F40493BB60B92FD8E400000000000A06E40483BB60B92ED8E400000000000606D40483BB60B92DD8E400000000000206C40483BB60B92C58E400000000000E06A40483BB60B92A58E400000000000C06940493BB60B92858E400000000000A06840483BB60B92658E400000000000A06740483BB60B923D8E400000000000A06640483BB60B92158E400000000000A06540493BB60B92E58D400000000000C06440483BB60B92B58D400000000000E06340483BB60B92858D400000000000006340483BB60B924D8D400000000000406240483BB60B92158D400000000000806140483BB60B92D58C400000000000E06040483BB60B929D8C400000000000206040483BB60B925D8C400000000000405F40493BB60B92158C400000000000005E40483BB60B92D58B400000000000005D40493BB60B928D8B400000000000005C40483BB60B92458B400000000000005B40483BB60B92FD8A400000000000405A40483BB60B92AD8A400000000000805940483BB60B925D8A400000000000005940483BB60B920D8A400000000000805840483BB60B92B589400000000000005840493BB60B925D89400000000000C05740483BB60B920589400000000000C05740483BB60B92AD88400000000000C05740483BB60B925588400000000000C05740483BB60B92FD87400000000000005840493BB60B92A587400000000000405840483BB60B924D87400000000000805840483BB60B92FD86400000000000005940483BB60B92AD86400000000000805940483BB60B925D86400000000000405A40483BB60B920D86400000000000005B40483BB60B92C585400000000000C05B40483BB60B927D85400000000000C05C40483BB60B923585400000000000C05D40483BB60B92F584400000000000005F40483BB60B92B584400000000000206040483BB60B927584400000000000C06040483BB60B923D84400000000000606140483BB60B920584400000000000206240483BB60B92CD83400000000000E06240483BB60B929D83400000000000C06340483BB60B926D83400000000000A06440483BB60B924583400000000000806540483BB60B921D83400000000000806640483BB60B92F582400000000000806740483BB60B92CD82400000000000A06840483BB60B92AD82400000000000C06940483BB60B928D82400000000000E06A40483BB60B927582400000000000206C40483BB60B925D82400000000000606D40483BB60B924D82400000000000A06E40483BB60B923D82400000000000007040483BB60B923582400000000000B07040483BB60B922D82400000000000607140483BB60B922D82400000000000107240483BB60B922D82400000000000707E40483BB60B922D82400100000000307F40483BB60B923582400000000000E07F40483BB60B923D82400000000000488040483BB60B924D82400000000000988040483BB60B925D82400000000000E88040483BB60B926D82400000000000388140483BB60B928582400000000000888140483BB60B92A582400000000000D08140483BB60B92C582400000000000188240483BB60B92E582400000000000588240483BB60B920D83400000000000988240483BB60B923583400000000000D88240483BB60B926583400000000000108340483BB60B929583400000000000488340483BB60B92C583400000000000808340483BB60B92FD83400000000000B08340483BB60B923584400000000000E08340483BB60B927584400000000000088440483BB60B92AD84400000000000308440483BB60B92F584400000000000588440483BB60B923585400000000000808440483BB60B927D85400000000000A08440483BB60B92C585400000000000C08440483BB60B920D86400000000000D88440483BB60B925D86400000000000F08440483BB60B92A586400000000000088540483BB60B92F586400000000000188540483BB60B924D87400000000000288540483BB60B929D87400000000000308540493BB60B92F587400000000000388540483BB60B924D88400000000000408540483BB60B92A5884000000000004085400B000000483BB60B922D8A400100000000907E40483BB60B92B589400000000000208040483BB60B92AD88400000000000708040483BB60B929D87400000000000288040483BB60B922587400100000000907E40483BB60B922587400000000000107240483BB60B929587400000000000607040483BB60B929D88400000000000806F40483BB60B92A589400000000000507040483BB60B922D8A400000000000107240483BB60B922D8A400100000000907E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of the geometric object obtained by first scaling the string 'Yo' converted to a geometry by a factor of 10 in both X and Y directions, then translating it by 100 units along the X-axis and 100 units along the Y-axis.", "source": "original", "new_id": 266}
{"id": 46, "function": "ST_Letters", "question": "返回‘Yo’在X,Y方向各放大10倍并在X轴和Y轴方向各平移100个单位坐标位置的文本几何结果。", "sql": "SELECT ST_Translate(ST_Scale(ST_Letters('Yo'), 10, 10), 100,100);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of the geometric object obtained by first scaling the string 'Yo' converted to a geometry by a factor of 10 in both X and Y directions, then translating it by 100 units along the X-axis and 100 units along the Y-axis.", "source": "original", "new_id": 267}
{"id": 46, "function": "ST_Letters", "question": "输出将字符串'Yo'转换为几何图形后，先在X和Y方向各放大为原来的10倍，再沿X轴平移100单位、Y轴平移100单位后的几何对象WKT表示。", "sql": "SELECT ST_Translate(ST_Scale(ST_Letters('Yo'), 10, 10), 100,100);", "execution_result": [["010600000002000000010300000001000000120000000000000000D07B400000000000308A4000000000000084400000000000308A400000000000B883400000000000E889400000000000307C4000000000003078400000000000307C400000000000405B400000000000C07C4000000000000059400000000000807140000000000000594000000000002072400000000000405B40000000000020724000000000003078400000000000405B400000000000E8894000000000000059400000000000308A4000000000007072400000000000308A400000000000E071400000000000E889400000000000A07440000000000060864000000000002077400000000000F081400000000000B0794000000000007886400000000000607C400000000000E889400000000000D07B400000000000308A4001030000000200000083000000483BB60B92A588400000000000408540483BB60B92FD88400000000000408540483BB60B925589400000000000388540493BB60B92AD89400000000000308540493BB60B92FD89400000000000288540483BB60B92558A400000000000188540483BB60B92A58A400000000000088540493BB60B92ED8A400000000000F88440493BB60B923D8B400000000000E08440483BB60B92858B400000000000C88440483BB60B92CD8B400000000000A88440493BB60B92158C400000000000888440493BB60B92558C400000000000688440483BB60B92958C400000000000408440483BB60B92D58C400000000000188440483BB60B920D8D400000000000E88340493BB60B92458D400000000000B88340493BB60B927D8D400000000000888340483BB60B92AD8D400000000000508340483BB60B92DD8D400000000000188340483BB60B92058E400000000000D88240483BB60B922D8E400000000000988240483BB60B92558E400000000000588240483BB60B927D8E400000000000188240483BB60B929D8E400000000000D08140493BB60B92BD8E400000000000888140493BB60B92D58E400000000000388140483BB60B92ED8E400000000000E88040493BB60B92FD8E400000000000988040493BB60B920D8F400000000000488040483BB60B92158F400000000000E07F40483BB60B921D8F400100000000307F40483BB60B921D8F400000000000707E40483BB60B921D8F400000000000107240483BB60B921D8F400000000000507140483BB60B92158F400000000000A07040493BB60B920D8F400000000000E06F40493BB60B92FD8E400000000000A06E40483BB60B92ED8E400000000000606D40483BB60B92DD8E400000000000206C40483BB60B92C58E400000000000E06A40483BB60B92A58E400000000000C06940493BB60B92858E400000000000A06840483BB60B92658E400000000000A06740483BB60B923D8E400000000000A06640483BB60B92158E400000000000A06540493BB60B92E58D400000000000C06440483BB60B92B58D400000000000E06340483BB60B92858D400000000000006340483BB60B924D8D400000000000406240483BB60B92158D400000000000806140483BB60B92D58C400000000000E06040483BB60B929D8C400000000000206040483BB60B925D8C400000000000405F40493BB60B92158C400000000000005E40483BB60B92D58B400000000000005D40493BB60B928D8B400000000000005C40483BB60B92458B400000000000005B40483BB60B92FD8A400000000000405A40483BB60B92AD8A400000000000805940483BB60B925D8A400000000000005940483BB60B920D8A400000000000805840483BB60B92B589400000000000005840493BB60B925D89400000000000C05740483BB60B920589400000000000C05740483BB60B92AD88400000000000C05740483BB60B925588400000000000C05740483BB60B92FD87400000000000005840493BB60B92A587400000000000405840483BB60B924D87400000000000805840483BB60B92FD86400000000000005940483BB60B92AD86400000000000805940483BB60B925D86400000000000405A40483BB60B920D86400000000000005B40483BB60B92C585400000000000C05B40483BB60B927D85400000000000C05C40483BB60B923585400000000000C05D40483BB60B92F584400000000000005F40483BB60B92B584400000000000206040483BB60B927584400000000000C06040483BB60B923D84400000000000606140483BB60B920584400000000000206240483BB60B92CD83400000000000E06240483BB60B929D83400000000000C06340483BB60B926D83400000000000A06440483BB60B924583400000000000806540483BB60B921D83400000000000806640483BB60B92F582400000000000806740483BB60B92CD82400000000000A06840483BB60B92AD82400000000000C06940483BB60B928D82400000000000E06A40483BB60B927582400000000000206C40483BB60B925D82400000000000606D40483BB60B924D82400000000000A06E40483BB60B923D82400000000000007040483BB60B923582400000000000B07040483BB60B922D82400000000000607140483BB60B922D82400000000000107240483BB60B922D82400000000000707E40483BB60B922D82400100000000307F40483BB60B923582400000000000E07F40483BB60B923D82400000000000488040483BB60B924D82400000000000988040483BB60B925D82400000000000E88040483BB60B926D82400000000000388140483BB60B928582400000000000888140483BB60B92A582400000000000D08140483BB60B92C582400000000000188240483BB60B92E582400000000000588240483BB60B920D83400000000000988240483BB60B923583400000000000D88240483BB60B926583400000000000108340483BB60B929583400000000000488340483BB60B92C583400000000000808340483BB60B92FD83400000000000B08340483BB60B923584400000000000E08340483BB60B927584400000000000088440483BB60B92AD84400000000000308440483BB60B92F584400000000000588440483BB60B923585400000000000808440483BB60B927D85400000000000A08440483BB60B92C585400000000000C08440483BB60B920D86400000000000D88440483BB60B925D86400000000000F08440483BB60B92A586400000000000088540483BB60B92F586400000000000188540483BB60B924D87400000000000288540483BB60B929D87400000000000308540493BB60B92F587400000000000388540483BB60B924D88400000000000408540483BB60B92A5884000000000004085400B000000483BB60B922D8A400100000000907E40483BB60B92B589400000000000208040483BB60B92AD88400000000000708040483BB60B929D87400000000000288040483BB60B922587400100000000907E40483BB60B922587400000000000107240483BB60B929587400000000000607040483BB60B929D88400000000000806F40483BB60B92A589400000000000507040483BB60B922D8A400000000000107240483BB60B922D8A400100000000907E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of the geometric object obtained by first scaling the string 'Yo' converted to a geometry by a factor of 10 in both X and Y directions, then translating it by 100 units along the X-axis and 100 units along the Y-axis.", "source": "original", "new_id": 268}
{"id": 47, "function": "GeometryType", "question": "查询LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)这个折线的几何类型。", "sql": "SELECT GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["LINESTRING"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the type name of the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) geometry object.", "source": "original", "new_id": 269}
{"id": 47, "function": "GeometryType", "question": "获取由坐标点(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)组成的折线的几何类型。", "sql": "SELECT GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["LINESTRING"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the type name of the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) geometry object.", "source": "original", "new_id": 270}
{"id": 47, "function": "GeometryType", "question": "使用ST_GeomFromText函数将WKT格式的字符串'LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'转换为几何对象，并通过GeometryType函数返回该几何对象的类型名称，其中LINESTRING包含四个二维坐标点：(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)。", "sql": "SELECT GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["LINESTRING"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the type name of the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) geometry object.", "source": "original", "new_id": 271}
{"id": 47, "function": "GeometryType", "question": "输出LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)的几何类型字符串。", "sql": "SELECT GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["LINESTRING"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the type name of the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) geometry object.", "source": "original", "new_id": 272}
{"id": 47, "function": "GeometryType", "question": "返回折线几何对象'LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'的类型名称文本。", "sql": "SELECT GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["LINESTRING"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the type name of the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) geometry object.", "source": "original", "new_id": 273}
{"id": 47, "function": "GeometryType", "question": "输出LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)几何对象的类型名称。", "sql": "SELECT GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["LINESTRING"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the type name of the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) geometry object.", "source": "original", "new_id": 274}
{"id": 48, "function": "GeometryType", "question": "查询由6个面组成的POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )的几何类型。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific geometry type name of the POLYHEDRALSURFACE (composed of 6 faces, with vertex coordinates for each face as follows: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 275}
{"id": 48, "function": "GeometryType", "question": "检测由坐标(0 0 0)到(1 1 1)范围内6个多边形面POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )构成的多面体表面对象的几何类型。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific geometry type name of the POLYHEDRALSURFACE (composed of 6 faces, with vertex coordinates for each face as follows: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 276}
{"id": 48, "function": "GeometryType", "question": "使用ST_GeomFromEWKT函数从EWKT格式字符串创建多面体表面几何对象，该对象由6个面组成：第一个面顶点为(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个面顶点为(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个面顶点为(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个面顶点为(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个面顶点为(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个面顶点为(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)，然后使用ST_GeometryType函数获取该几何对象的类型名称。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific geometry type name of the POLYHEDRALSURFACE (composed of 6 faces, with vertex coordinates for each face as follows: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 277}
{"id": 48, "function": "GeometryType", "question": "输出POLYHEDRALSURFACE对象'POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'的几何类型字符串。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific geometry type name of the POLYHEDRALSURFACE (composed of 6 faces, with vertex coordinates for each face as follows: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 278}
{"id": 48, "function": "GeometryType", "question": "返回多面体表面几何对象POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )的类型名称。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific geometry type name of the POLYHEDRALSURFACE (composed of 6 faces, with vertex coordinates for each face as follows: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 279}
{"id": 48, "function": "GeometryType", "question": "输出POLYHEDRALSURFACE几何体（由6个面组成，各面顶点坐标分别为：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0))、((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))、((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0))、((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0))、((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0))、((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))）的具体几何类型名称。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific geometry type name of the POLYHEDRALSURFACE (composed of 6 faces, with vertex coordinates for each face as follows: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 280}
{"id": 49, "function": "GeometryType", "question": "检测由两个三角形面片组成的TIN对象（第一个面片顶点为(0 0 0,0 0 1,0 1 0)，第二个面片顶点为(0 0 0,0 1 0,1 1 0)）的几何类型。", "sql": "SELECT GeometryType(geom) as result \nFROM (SELECT ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))') AS geom) AS g;", "execution_result": [["TIN"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric type name string converted from an irregular triangular network (TIN) object containing two triangular faces: the first face consists of vertices (0 0 0), (0 0 1), (0 1 0), and the second face consists of vertices (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 281}
{"id": 49, "function": "GeometryType", "question": "查询TIN对象（包含两个三角形面片：((0 0 0,0 0 1,0 1 0,0 0 0))和((0 0 0,0 1 0,1 1 0,0 0 0))）的几何类型。", "sql": "SELECT GeometryType(geom) as result \nFROM (SELECT ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))') AS geom) AS g;", "execution_result": [["TIN"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric type name string converted from an irregular triangular network (TIN) object containing two triangular faces: the first face consists of vertices (0 0 0), (0 0 1), (0 1 0), and the second face consists of vertices (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 282}
{"id": 49, "function": "GeometryType", "question": "查询由ST_GeomFromEWKT函数从EWKT格式字符串'TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))'创建的不规则三角网(TIN)几何对象的类型，该TIN包含两个三角形面：第一个面由顶点(0 0 0)、(0 0 1)、(0 1 0)构成，第二个面由顶点(0 0 0)、(0 1 0)、(1 1 0)构成，并将结果命名为result列输出。", "sql": "SELECT GeometryType(geom) as result \nFROM (SELECT ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))') AS geom) AS g;", "execution_result": [["TIN"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric type name string converted from an irregular triangular network (TIN) object containing two triangular faces: the first face consists of vertices (0 0 0), (0 0 1), (0 1 0), and the second face consists of vertices (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 283}
{"id": 49, "function": "GeometryType", "question": "以文本形式返回TIN对象TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))的几何类型标识结果。", "sql": "SELECT GeometryType(geom) as result \nFROM (SELECT ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))') AS geom) AS g;", "execution_result": [["TIN"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric type name string converted from an irregular triangular network (TIN) object containing two triangular faces: the first face consists of vertices (0 0 0), (0 0 1), (0 1 0), and the second face consists of vertices (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 284}
{"id": 49, "function": "GeometryType", "question": "输出结果为描述给定TIN对象TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))类型的字符串值。", "sql": "SELECT GeometryType(geom) as result \nFROM (SELECT ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))') AS geom) AS g;", "execution_result": [["TIN"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric type name string converted from an irregular triangular network (TIN) object containing two triangular faces: the first face consists of vertices (0 0 0), (0 0 1), (0 1 0), and the second face consists of vertices (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 285}
{"id": 49, "function": "GeometryType", "question": "输出由不规则三角网TIN对象（包含两个三角形面：第一个面由顶点(0 0 0)、(0 0 1)、(0 1 0)构成，第二个面由顶点(0 0 0)、(0 1 0)、(1 1 0)构成）转换得到的几何类型名称字符串。", "sql": "SELECT GeometryType(geom) as result \nFROM (SELECT ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))') AS geom) AS g;", "execution_result": [["TIN"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric type name string converted from an irregular triangular network (TIN) object containing two triangular faces: the first face consists of vertices (0 0 0), (0 0 1), (0 1 0), and the second face consists of vertices (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 286}
{"id": 50, "function": "ST_Boundary", "question": "计算LINESTRING(100 150,50 60, 70 80, 160 170)这条折线的边界。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'LINESTRING(100 150,50 60, 70 80, 160 170)'::geometry AS geom) AS f;", "execution_result": [["010400000002000000010100000000000000000059400000000000C06240010100000000000000000064400000000000406540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the boundary geometry for the LINESTRING(100 150,50 60,70 80,160 170) object.", "source": "original", "new_id": 287}
{"id": 50, "function": "ST_Boundary", "question": "获取由点(100 150)、(50 60)、(70 80)和(160 170)组成的折线的边界。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'LINESTRING(100 150,50 60, 70 80, 160 170)'::geometry AS geom) AS f;", "execution_result": [["010400000002000000010100000000000000000059400000000000C06240010100000000000000000064400000000000406540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the boundary geometry for the LINESTRING(100 150,50 60,70 80,160 170) object.", "source": "original", "new_id": 288}
{"id": 50, "function": "ST_Boundary", "question": "计算LINESTRING(100 150,50 60, 70 80, 160 170)的边界。", "sql": "SELECT ST_Boundary('LINESTRING(100 150,50 60, 70 80, 160 170)'::geometry);", "execution_result": [["010400000002000000010100000000000000000059400000000000C06240010100000000000000000064400000000000406540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Calculate the boundary of LINESTRING(100 150,50 60, 70 80, 160 170).", "source": "original", "new_id": 289}
{"id": 50, "function": "ST_Boundary", "question": "输出LINESTRING(100 150,50 60, 70 80, 160 170)的边界几何对象。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'LINESTRING(100 150,50 60, 70 80, 160 170)'::geometry AS geom) AS f;", "execution_result": [["010400000002000000010100000000000000000059400000000000C06240010100000000000000000064400000000000406540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the boundary geometry for the LINESTRING(100 150,50 60,70 80,160 170) object.", "source": "original", "new_id": 290}
{"id": 50, "function": "ST_Boundary", "question": "返回由点(100 150)、(50 60)、(70 80)和(160 170)组成的折线边界计算结果的几何对象。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'LINESTRING(100 150,50 60, 70 80, 160 170)'::geometry AS geom) AS f;", "execution_result": [["010400000002000000010100000000000000000059400000000000C06240010100000000000000000064400000000000406540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the boundary geometry for the LINESTRING(100 150,50 60,70 80,160 170) object.", "source": "original", "new_id": 291}
{"id": 50, "function": "ST_Boundary", "question": "输出LINESTRING(100 150,50 60,70 80,160 170)几何对象的边界几何体的WKT字符串表示。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'LINESTRING(100 150,50 60, 70 80, 160 170)'::geometry AS geom) AS f;", "execution_result": [["010400000002000000010100000000000000000059400000000000C06240010100000000000000000064400000000000406540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the boundary geometry for the LINESTRING(100 150,50 60,70 80,160 170) object.", "source": "original", "new_id": 292}
{"id": 51, "function": "ST_Boundary", "question": "计算由外环(10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130)和内环(70 40, 100 50, 120 80, 80 110, 50 90, 70 40)组成的多边形的边界。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'POLYGON (( 10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130 ), ( 70 40, 100 50, 120 80, 80 110, 50 90, 70 40 ))'::geometry AS geom) AS f;", "execution_result": [["0105000000020000000102000000080000000000000000002440000000000040604000000000000049400000000000C067400000000000805B400000000000C0674000000000008061400000000000C062400000000000C06240000000000000544000000000000059400000000000002440000000000000344000000000000044400000000000002440000000000040604001020000000600000000000000008051400000000000004440000000000000594000000000000049400000000000005E40000000000000544000000000000054400000000000805B400000000000004940000000000080564000000000008051400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the boundary line for a POLYGON geometry object defined by an outer ring with vertices (10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130) and an inner ring with vertices (70 40, 100 50, 120 80, 80 110, 50 90, 70 40).", "source": "original", "new_id": 293}
{"id": 51, "function": "ST_Boundary", "question": "对POLYGON ((10 13050 190, 110 190, 140 150, 150 80, 100 10, 20 40,10 130),(70 40, 100 50, 120 80, 80 110, 50 90, 70 40))这个几何对象执行ST_Boundary操作。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'POLYGON (( 10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130 ), ( 70 40, 100 50, 120 80, 80 110, 50 90, 70 40 ))'::geometry AS geom) AS f;", "execution_result": [["0105000000020000000102000000080000000000000000002440000000000040604000000000000049400000000000C067400000000000805B400000000000C0674000000000008061400000000000C062400000000000C06240000000000000544000000000000059400000000000002440000000000000344000000000000044400000000000002440000000000040604001020000000600000000000000008051400000000000004440000000000000594000000000000049400000000000005E40000000000000544000000000000054400000000000805B400000000000004940000000000080564000000000008051400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the boundary line for a POLYGON geometry object defined by an outer ring with vertices (10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130) and an inner ring with vertices (70 40, 100 50, 120 80, 80 110, 50 90, 70 40).", "source": "original", "new_id": 294}
{"id": 51, "function": "ST_Boundary", "question": "从包含外环顶点(10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130)和内环顶点(70 40, 100 50, 120 80, 80 110, 50 90, 70 40)的多边形中，提取其边界线。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'POLYGON (( 10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130 ), ( 70 40, 100 50, 120 80, 80 110, 50 90, 70 40 ))'::geometry AS geom) AS f;", "execution_result": [["0105000000020000000102000000080000000000000000002440000000000040604000000000000049400000000000C067400000000000805B400000000000C0674000000000008061400000000000C062400000000000C06240000000000000544000000000000059400000000000002440000000000000344000000000000044400000000000002440000000000040604001020000000600000000000000008051400000000000004440000000000000594000000000000049400000000000005E40000000000000544000000000000054400000000000805B400000000000004940000000000080564000000000008051400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the boundary line for a POLYGON geometry object defined by an outer ring with vertices (10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130) and an inner ring with vertices (70 40, 100 50, 120 80, 80 110, 50 90, 70 40).", "source": "original", "new_id": 295}
{"id": 51, "function": "ST_Boundary", "question": "输出由一个外环和一个内环组成的多边形POLYGON (( 10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130 ), ( 70 40, 100 50, 120 80, 80 110, 50 90, 70 40 ))的几何边界组成的折线几何对象。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'POLYGON (( 10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130 ), ( 70 40, 100 50, 120 80, 80 110, 50 90, 70 40 ))'::geometry AS geom) AS f;", "execution_result": [["0105000000020000000102000000080000000000000000002440000000000040604000000000000049400000000000C067400000000000805B400000000000C0674000000000008061400000000000C062400000000000C06240000000000000544000000000000059400000000000002440000000000000344000000000000044400000000000002440000000000040604001020000000600000000000000008051400000000000004440000000000000594000000000000049400000000000005E40000000000000544000000000000054400000000000805B400000000000004940000000000080564000000000008051400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the boundary line for a POLYGON geometry object defined by an outer ring with vertices (10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130) and an inner ring with vertices (70 40, 100 50, 120 80, 80 110, 50 90, 70 40).", "source": "original", "new_id": 296}
{"id": 51, "function": "ST_Boundary", "question": "返回一个多边形POLYGON (( 10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130 ), ( 70 40, 100 50, 120 80, 80 110, 50 90, 70 40 ))的边界组成的折线（LINESTRING）几何。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'POLYGON (( 10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130 ), ( 70 40, 100 50, 120 80, 80 110, 50 90, 70 40 ))'::geometry AS geom) AS f;", "execution_result": [["0105000000020000000102000000080000000000000000002440000000000040604000000000000049400000000000C067400000000000805B400000000000C0674000000000008061400000000000C062400000000000C06240000000000000544000000000000059400000000000002440000000000000344000000000000044400000000000002440000000000040604001020000000600000000000000008051400000000000004440000000000000594000000000000049400000000000005E40000000000000544000000000000054400000000000805B400000000000004940000000000080564000000000008051400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the boundary line for a POLYGON geometry object defined by an outer ring with vertices (10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130) and an inner ring with vertices (70 40, 100 50, 120 80, 80 110, 50 90, 70 40).", "source": "original", "new_id": 297}
{"id": 51, "function": "ST_Boundary", "question": "输出由外环顶点(10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130)和内环顶点(70 40, 100 50, 120 80, 80 110, 50 90, 70 40)组成的POLYGON几何对象的边界线WKT字符串。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'POLYGON (( 10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130 ), ( 70 40, 100 50, 120 80, 80 110, 50 90, 70 40 ))'::geometry AS geom) AS f;", "execution_result": [["0105000000020000000102000000080000000000000000002440000000000040604000000000000049400000000000C067400000000000805B400000000000C0674000000000008061400000000000C062400000000000C06240000000000000544000000000000059400000000000002440000000000000344000000000000044400000000000002440000000000040604001020000000600000000000000008051400000000000004440000000000000594000000000000049400000000000005E40000000000000544000000000000054400000000000805B400000000000004940000000000080564000000000008051400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the boundary line for a POLYGON geometry object defined by an outer ring with vertices (10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130) and an inner ring with vertices (70 40, 100 50, 120 80, 80 110, 50 90, 70 40).", "source": "original", "new_id": 298}
{"id": 52, "function": "ST_Boundary", "question": "对三维多边形POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))求边界，输出EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))')));", "execution_result": [["LINESTRING(1 1 1,0 0 1,-1 1 1,1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boundary line of the 3D polygon POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1)) and return the result as an EWKT format string, including the Z-coordinate values.", "source": "original", "new_id": 299}
{"id": 52, "function": "ST_Boundary", "question": "将包含坐标点(1 1 1)、(0 0 1)、(-1 1 1)的三维多边形转换为边界线，返回EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))')));", "execution_result": [["LINESTRING(1 1 1,0 0 1,-1 1 1,1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boundary line of the 3D polygon POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1)) and return the result as an EWKT format string, including the Z-coordinate values.", "source": "original", "new_id": 300}
{"id": 52, "function": "ST_Boundary", "question": "将三维多边形POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))转换为边界线，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))')));", "execution_result": [["LINESTRING(1 1 1,0 0 1,-1 1 1,1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boundary line of the 3D polygon POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1)) and return the result as an EWKT format string, including the Z-coordinate values.", "source": "original", "new_id": 301}
{"id": 52, "function": "ST_Boundary", "question": "输出三维多边形POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))边界线的EWKT格式字符串结果。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))')));", "execution_result": [["LINESTRING(1 1 1,0 0 1,-1 1 1,1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boundary line of the 3D polygon POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1)) and return the result as an EWKT format string, including the Z-coordinate values.", "source": "original", "new_id": 302}
{"id": 52, "function": "ST_Boundary", "question": "以包含SRID信息的扩展WKT格式返回一个三维多边形POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))的几何边界的文本表示。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))')));", "execution_result": [["LINESTRING(1 1 1,0 0 1,-1 1 1,1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boundary line of the 3D polygon POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1)) and return the result as an EWKT format string, including the Z-coordinate values.", "source": "original", "new_id": 303}
{"id": 52, "function": "ST_Boundary", "question": "输出三维多边形POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))的边界线，并以EWKT格式字符串返回结果，要求包含Z坐标值。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))')));", "execution_result": [["LINESTRING(1 1 1,0 0 1,-1 1 1,1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boundary line of the 3D polygon POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1)) and return the result as an EWKT format string, including the Z-coordinate values.", "source": "original", "new_id": 304}
{"id": 53, "function": "ST_Boundary", "question": "计算POLYGON((1 1,0 0, -1 1, 1 1))的边界线，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((1 1,0 0, -1 1, 1 1))')));", "execution_result": [["LINESTRING(1 1,0 0,-1 1,1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the boundary line segments of the POLYGON((1 1,0 0, -1 1, 1 1)) geometry.", "source": "original", "new_id": 305}
{"id": 53, "function": "ST_Boundary", "question": "将顶点坐标为(1 1),(0 0),(-1 1),(1 1)的多边形转换为边界线文本。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((1 1,0 0, -1 1, 1 1))')));", "execution_result": [["LINESTRING(1 1,0 0,-1 1,1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the boundary line segments of the POLYGON((1 1,0 0, -1 1, 1 1)) geometry.", "source": "original", "new_id": 306}
{"id": 53, "function": "ST_Boundary", "question": "对由坐标点(1 1)、(0 0)、(-1 1)构成的闭合多边形POLYGON((1 1,0 0,-1 1,1 1))执行边界提取操作，并以WKT格式输出结果边界线。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((1 1,0 0, -1 1, 1 1))')));", "execution_result": [["LINESTRING(1 1,0 0,-1 1,1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the boundary line segments of the POLYGON((1 1,0 0, -1 1, 1 1)) geometry.", "source": "original", "new_id": 307}
{"id": 53, "function": "ST_Boundary", "question": "输出多边形POLYGON((1 1,0 0, -1 1, 1 1))边界线的WKT格式字符串表示。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((1 1,0 0, -1 1, 1 1))')));", "execution_result": [["LINESTRING(1 1,0 0,-1 1,1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the boundary line segments of the POLYGON((1 1,0 0, -1 1, 1 1)) geometry.", "source": "original", "new_id": 308}
{"id": 53, "function": "ST_Boundary", "question": "以文本形式返回POLYGON((1 1,0 0, -1 1, 1 1))的边界几何。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((1 1,0 0, -1 1, 1 1))')));", "execution_result": [["LINESTRING(1 1,0 0,-1 1,1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the boundary line segments of the POLYGON((1 1,0 0, -1 1, 1 1)) geometry.", "source": "original", "new_id": 309}
{"id": 53, "function": "ST_Boundary", "question": "输出POLYGON((1 1,0 0, -1 1, 1 1))几何图形的边界线段的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((1 1,0 0, -1 1, 1 1))')));", "execution_result": [["LINESTRING(1 1,0 0,-1 1,1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the boundary line segments of the POLYGON((1 1,0 0, -1 1, 1 1)) geometry.", "source": "original", "new_id": 310}
{"id": 54, "function": "ST_Boundary", "question": "计算由两条三维折线组成的MULTILINESTRING((1 1 1,0 0 0.5,-1 1 1)和(1 1 0.5,0 0 0.5,-1 1 0.5,1 1 0.5))的边界，返回EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )')));", "execution_result": [["MULTIPOINT(1 1 1,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the boundary geometry for the 3D multilinestring MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5)).", "source": "original", "new_id": 311}
{"id": 54, "function": "ST_Boundary", "question": "对包含(1 1 1,0 0 0.5,-1 1 1)和(1 1 0.5,0 0 0.5,-1 1 0.5,1 1 0.5)两个三维折线的多折线对象执行边界计算，输出EWKT。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )')));", "execution_result": [["MULTIPOINT(1 1 1,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the boundary geometry for the 3D multilinestring MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5)).", "source": "original", "new_id": 312}
{"id": 54, "function": "ST_Boundary", "question": "对由三维坐标点构成的MULTILINESTRING几何对象（包含两条线：第一条线由POINT(1 1 1)到POINT(0 0 0.5)到POINT(-1 1 1)，第二条线由POINT(1 1 0.5)到POINT(0 0 0.5)到POINT(-1 1 0.5)再闭合回POINT(1 1 0.5)）执行ST_Boundary函数计算边界，并使用ST_AsEWKT函数以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )')));", "execution_result": [["MULTIPOINT(1 1 1,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the boundary geometry for the 3D multilinestring MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5)).", "source": "original", "new_id": 313}
{"id": 54, "function": "ST_Boundary", "question": "以包含SRID的EWKT字符串格式MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )返回多线集合的边界计算结果。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )')));", "execution_result": [["MULTIPOINT(1 1 1,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the boundary geometry for the 3D multilinestring MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5)).", "source": "original", "new_id": 314}
{"id": 54, "function": "ST_Boundary", "question": "输出一个三维多折线MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )的边界几何的扩展WKT表示，包含Z坐标信息。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )')));", "execution_result": [["MULTIPOINT(1 1 1,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the boundary geometry for the 3D multilinestring MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5)).", "source": "original", "new_id": 315}
{"id": 54, "function": "ST_Boundary", "question": "输出三维多线段MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5))的边界几何体的EWKT字符串表示。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )')));", "execution_result": [["MULTIPOINT(1 1 1,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the boundary geometry for the 3D multilinestring MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5)).", "source": "original", "new_id": 316}
{"id": 55, "function": "ST_Boundary", "question": "计算LINESTRING(1 1,0 0, -1 1)的边界并输出WKT格式结果。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(1 1,0 0, -1 1)')));", "execution_result": [["MULTIPOINT((1 1),(-1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string corresponding to the boundary of the LINESTRING(1 1,0 0, -1 1) geometry object.", "source": "original", "new_id": 317}
{"id": 55, "function": "ST_Boundary", "question": "将LINESTRING(1 1,0 0, -1 1)转换为几何对象后求边界，再转为文本。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(1 1,0 0, -1 1)')));", "execution_result": [["MULTIPOINT((1 1),(-1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string corresponding to the boundary of the LINESTRING(1 1,0 0, -1 1) geometry object.", "source": "original", "new_id": 318}
{"id": 55, "function": "ST_Boundary", "question": "直接计算LINESTRING(1 1,0 0, -1 1)的边界几何对象。", "sql": "SELECT ST_Boundary(ST_GeomFromText('LINESTRING(1 1,0 0, -1 1)'));", "execution_result": [["0104000000020000000101000000000000000000F03F000000000000F03F0101000000000000000000F0BF000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Directly compute the boundary geometry object of LINESTRING(1 1,0 0, -1 1).", "source": "original", "new_id": 319}
{"id": 55, "function": "ST_Boundary", "question": "输出LINESTRING(1 1,0 0, -1 1)边界计算结果的WKT字符串。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(1 1,0 0, -1 1)')));", "execution_result": [["MULTIPOINT((1 1),(-1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string corresponding to the boundary of the LINESTRING(1 1,0 0, -1 1) geometry object.", "source": "original", "new_id": 320}
{"id": 55, "function": "ST_Boundary", "question": "以文本格式返回折线几何LINESTRING(1 1,0 0, -1 1)的边界计算结果。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(1 1,0 0, -1 1)')));", "execution_result": [["MULTIPOINT((1 1),(-1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string corresponding to the boundary of the LINESTRING(1 1,0 0, -1 1) geometry object.", "source": "original", "new_id": 321}
{"id": 55, "function": "ST_Boundary", "question": "输出LINESTRING(1 1,0 0, -1 1)几何对象的边界所对应的WKT字符串。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(1 1,0 0, -1 1)')));", "execution_result": [["MULTIPOINT((1 1),(-1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string corresponding to the boundary of the LINESTRING(1 1,0 0, -1 1) geometry object.", "source": "original", "new_id": 322}
{"id": 56, "function": "ST_BoundingDiagonal", "question": "计算以点(0,0)为中心、10单位半径的缓冲区边界框对角线的起始点X坐标。", "sql": "SELECT ST_X(ST_StartPoint(ST_BoundingDiagonal( ST_Buffer(ST_Point(0,0),10) )));", "execution_result": [[-10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the numerical result of the X-coordinate of the starting point of the boundary diagonal after creating a 10-unit radius buffer centered at POINT(0,0).", "source": "original", "new_id": 323}
{"id": 56, "function": "ST_BoundingDiagonal", "question": "获取ST_Point(0,0)经过10单位缓冲后的边界框对角线起点X坐标。", "sql": "SELECT ST_X(ST_StartPoint(ST_BoundingDiagonal( ST_Buffer(ST_Point(0,0),10) )));", "execution_result": [[-10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the numerical result of the X-coordinate of the starting point of the boundary diagonal after creating a 10-unit radius buffer centered at POINT(0,0).", "source": "original", "new_id": 324}
{"id": 56, "function": "ST_BoundingDiagonal", "question": "计算以二维点POINT(0 0)为中心创建半径为10的圆形缓冲区，获取该缓冲区的边界框对角线，取对角线的起点，最后提取该起点坐标的X值。", "sql": "SELECT ST_X(ST_StartPoint(ST_BoundingDiagonal( ST_Buffer(ST_Point(0,0),10) )));", "execution_result": [[-10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the numerical result of the X-coordinate of the starting point of the boundary diagonal after creating a 10-unit radius buffer centered at POINT(0,0).", "source": "original", "new_id": 325}
{"id": 56, "function": "ST_BoundingDiagonal", "question": "输出点(0,0)的10单位缓冲区边界框对角线起点的X坐标值。", "sql": "SELECT ST_X(ST_StartPoint(ST_BoundingDiagonal( ST_Buffer(ST_Point(0,0),10) )));", "execution_result": [[-10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the numerical result of the X-coordinate of the starting point of the boundary diagonal after creating a 10-unit radius buffer centered at POINT(0,0).", "source": "original", "new_id": 326}
{"id": 56, "function": "ST_BoundingDiagonal", "question": "以浮点数形式返回点(0,0)10单位缓冲区的边界框对角线起点X坐标。", "sql": "SELECT ST_X(ST_StartPoint(ST_BoundingDiagonal( ST_Buffer(ST_Point(0,0),10) )));", "execution_result": [[-10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the numerical result of the X-coordinate of the starting point of the boundary diagonal after creating a 10-unit radius buffer centered at POINT(0,0).", "source": "original", "new_id": 327}
{"id": 56, "function": "ST_BoundingDiagonal", "question": "输出以POINT(0,0)为中心创建10单位半径的缓冲区后，计算其边界对角线的起点，并返回该起点X坐标的数值结果。", "sql": "SELECT ST_X(ST_StartPoint(ST_BoundingDiagonal( ST_Buffer(ST_Point(0,0),10) )));", "execution_result": [[-10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the numerical result of the X-coordinate of the starting point of the boundary diagonal after creating a 10-unit radius buffer centered at POINT(0,0).", "source": "original", "new_id": 328}
{"id": 57, "function": "ST_CoordDim", "question": "计算CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)这个圆形弧线的坐标维度。", "sql": "SELECT ST_CoordDim('CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the coordinate dimension values of the 3D circular arc line CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13).", "source": "original", "new_id": 329}
{"id": 57, "function": "ST_CoordDim", "question": "确定由点(1 2 3)、(1 3 4)、(5 6 7)、(8 9 10)、(11 12 13)构成的圆形弧线的坐标维度。", "sql": "SELECT ST_CoordDim('CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the coordinate dimension values of the 3D circular arc line CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13).", "source": "original", "new_id": 330}
{"id": 57, "function": "ST_CoordDim", "question": "计算三维圆弧线CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)的坐标维度，该圆弧线由5个三维点构成，各点Z值分别为3、4、7、10、13。", "sql": "SELECT ST_CoordDim('CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the coordinate dimension values of the 3D circular arc line CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13).", "source": "original", "new_id": 331}
{"id": 57, "function": "ST_CoordDim", "question": "输出圆形弧线几何对象CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)的坐标维度数值。", "sql": "SELECT ST_CoordDim('CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the coordinate dimension values of the 3D circular arc line CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13).", "source": "original", "new_id": 332}
{"id": 57, "function": "ST_CoordDim", "question": "返回CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)的维度值。", "sql": "SELECT ST_CoordDim('CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the coordinate dimension values of the 3D circular arc line CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13).", "source": "original", "new_id": 333}
{"id": 57, "function": "ST_CoordDim", "question": "输出三维圆弧线CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)的坐标维度数值。", "sql": "SELECT ST_CoordDim('CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the coordinate dimension values of the 3D circular arc line CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13).", "source": "original", "new_id": 334}
{"id": 58, "function": "ST_CoordDim", "question": "查询由坐标(1,2)创建的点对象的坐标维度。", "sql": "SELECT ST_CoordDim(ST_Point(1,2));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the coordinate dimension values of the 2D point POINT(1 2).", "source": "original", "new_id": 335}
{"id": 58, "function": "ST_CoordDim", "question": "获取ST_Point(1,2)这个二维点对象的坐标维度值。", "sql": "SELECT ST_CoordDim(ST_Point(1,2));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the coordinate dimension values of the 2D point POINT(1 2).", "source": "original", "new_id": 336}
{"id": 58, "function": "ST_CoordDim", "question": "计算由ST_Point函数创建的二维点POINT(1 2)的坐标维度，其中1表示X坐标，2表示Y坐标。", "sql": "SELECT ST_CoordDim(ST_Point(1,2));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the coordinate dimension values of the 2D point POINT(1 2).", "source": "original", "new_id": 337}
{"id": 58, "function": "ST_CoordDim", "question": "输出ST_Point(1,2)的坐标维度整数值。", "sql": "SELECT ST_CoordDim(ST_Point(1,2));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the coordinate dimension values of the 2D point POINT(1 2).", "source": "original", "new_id": 338}
{"id": 58, "function": "ST_CoordDim", "question": "返回二维点(1,2)的坐标维度数值结果。", "sql": "SELECT ST_CoordDim(ST_Point(1,2));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the coordinate dimension values of the 2D point POINT(1 2).", "source": "original", "new_id": 339}
{"id": 58, "function": "ST_CoordDim", "question": "输出二维点POINT(1 2)的坐标维度数值。", "sql": "SELECT ST_CoordDim(ST_Point(1,2));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the coordinate dimension values of the 2D point POINT(1 2).", "source": "original", "new_id": 340}
{"id": 59, "function": "ST_Dimension", "question": "计算GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))这个几何对象的维度。", "sql": "SELECT ST_Dimension('GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))');", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension value of the geometry collection GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0)), which contains a line segment from point (1 1) to point (0 0) and a point located at (0 0).", "source": "original", "new_id": 341}
{"id": 59, "function": "ST_Dimension", "question": "获取由LINESTRING(1 1,0 0)和POINT(0 0)组成的几何集合的维度值。", "sql": "SELECT ST_Dimension('GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))');", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension value of the geometry collection GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0)), which contains a line segment from point (1 1) to point (0 0) and a point located at (0 0).", "source": "original", "new_id": 342}
{"id": 59, "function": "ST_Dimension", "question": "计算几何集合对象'GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))'的维度，该集合包含一条起点为(1 1)、终点为(0 0)的线段和一个位于(0 0)的点。", "sql": "SELECT ST_Dimension('GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))');", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension value of the geometry collection GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0)), which contains a line segment from point (1 1) to point (0 0) and a point located at (0 0).", "source": "original", "new_id": 343}
{"id": 59, "function": "ST_Dimension", "question": "输出GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))的维度整数值。", "sql": "SELECT ST_Dimension('GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))');", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension value of the geometry collection GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0)), which contains a line segment from point (1 1) to point (0 0) and a point located at (0 0).", "source": "original", "new_id": 344}
{"id": 59, "function": "ST_Dimension", "question": "返回几何集合对象GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))的维度计算结果。", "sql": "SELECT ST_Dimension('GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))');", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension value of the geometry collection GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0)), which contains a line segment from point (1 1) to point (0 0) and a point located at (0 0).", "source": "original", "new_id": 345}
{"id": 59, "function": "ST_Dimension", "question": "输出几何集合GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))的维度值，其中包含一条从点(1 1)到点(0 0)的线段和一个位于(0 0)的点。", "sql": "SELECT ST_Dimension('GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))');", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension value of the geometry collection GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0)), which contains a line segment from point (1 1) to point (0 0) and a point located at (0 0).", "source": "original", "new_id": 346}
{"id": 60, "function": "ST_Dump", "question": "将TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))分解，输出每个三角形的路径和EWKT格式的几何数据。", "sql": "SELECT (g.gdump).path, ST_AsEWKT((g.gdump).geom) AS wkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))')) AS gdump) AS g;", "execution_result": [[[1], "TRIANGLE((0 0 0,0 0 1,0 1 0,0 0 0))"], [[2], "TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path array and corresponding EWKT string of the decomposed TIN geometry, which consists of two triangular faces: the first face has vertices (0 0 0), (0 0 1), (0 1 0), and the second face has vertices (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 347}
{"id": 60, "function": "ST_Dump", "question": "对由两个三角形面((0 0 0,0 0 1,0 1 0)和(0 0 0,0 1 0,1 1 0))组成的TIN进行分解，返回各部分的路径和几何表示。", "sql": "SELECT (g.gdump).path, ST_AsEWKT((g.gdump).geom) AS wkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))')) AS gdump) AS g;", "execution_result": [[[1], "TRIANGLE((0 0 0,0 0 1,0 1 0,0 0 0))"], [[2], "TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path array and corresponding EWKT string of the decomposed TIN geometry, which consists of two triangular faces: the first face has vertices (0 0 0), (0 0 1), (0 1 0), and the second face has vertices (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 348}
{"id": 60, "function": "ST_Dump", "question": "对TIN几何体TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))执行ST_Dump分解操作。", "sql": "SELECT ST_Dump(ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))'));", "execution_result": [["({1},0111000080010000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000F03F0000000000000000000000000000F03F0000000000000000000000000000000000000000000000000000000000000000)"], ["({2},011100008001000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000F03F0000000000000000000000000000F03F000000000000F03F0000000000000000000000000000000000000000000000000000000000000000)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Perform the ST_Dump operation on the TIN geometry TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0))).", "source": "original", "new_id": 349}
{"id": 60, "function": "ST_Dump", "question": "返回TIN几何体TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))分解后每个组件的索引路径和EWKT格式的几何表示。", "sql": "SELECT (g.gdump).path, ST_AsEWKT((g.gdump).geom) AS wkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))')) AS gdump) AS g;", "execution_result": [[[1], "TRIANGLE((0 0 0,0 0 1,0 1 0,0 0 0))"], [[2], "TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path array and corresponding EWKT string of the decomposed TIN geometry, which consists of two triangular faces: the first face has vertices (0 0 0), (0 0 1), (0 1 0), and the second face has vertices (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 350}
{"id": 60, "function": "ST_Dump", "question": "输出三维三角网TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))分解结果的路径信息和扩展WKT格式的几何数据。", "sql": "SELECT (g.gdump).path, ST_AsEWKT((g.gdump).geom) AS wkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))')) AS gdump) AS g;", "execution_result": [[[1], "TRIANGLE((0 0 0,0 0 1,0 1 0,0 0 0))"], [[2], "TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path array and corresponding EWKT string of the decomposed TIN geometry, which consists of two triangular faces: the first face has vertices (0 0 0), (0 0 1), (0 1 0), and the second face has vertices (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 351}
{"id": 60, "function": "ST_Dump", "question": "输出TIN类型几何体分解后的路径数组和对应的EWKT格式字符串，该TIN由两个三角形面组成：第一个面顶点为(0 0 0)、(0 0 1)、(0 1 0)，第二个面顶点为(0 0 0)、(0 1 0)、(1 1 0)。", "sql": "SELECT (g.gdump).path, ST_AsEWKT((g.gdump).geom) AS wkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))')) AS gdump) AS g;", "execution_result": [[[1], "TRIANGLE((0 0 0,0 0 1,0 1 0,0 0 0))"], [[2], "TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path array and corresponding EWKT string of the decomposed TIN geometry, which consists of two triangular faces: the first face has vertices (0 0 0), (0 0 1), (0 1 0), and the second face has vertices (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 352}
{"id": 61, "function": "ST_Dump", "question": "将COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0), (1 0, 0 1))分解后，输出每个子几何的EWKT格式并检查是否包含圆弧。", "sql": "SELECT ST_AsEWKT(a.geom), ST_HasArc(a.geom)\n  FROM ( SELECT (ST_Dump(p_geom)).geom AS geom\n         FROM (SELECT ST_GeomFromEWKT('COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0),(1 0, 0 1))') AS p_geom) AS b\n        ) AS a;", "execution_result": [["CIRCULARSTRING(0 0,1 1,1 0)", true], ["LINESTRING(1 0,0 1)", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of each decomposed geometric object from the COMPOUNDCURVE (containing the circular arc segment CIRCULARSTRING(0 0, 1 1, 1 0) and the straight line segment (1 0, 0 1)), and determine whether each geometric object contains a circular arc segment.", "source": "original", "new_id": 353}
{"id": 61, "function": "ST_Dump", "question": "处理由CIRCULARSTRING(0 0, 1 1, 1 0)和直线段(1 0, 0 1)组成的复合曲线，输出分解结果的EWKT和圆弧存在性。", "sql": "SELECT ST_AsEWKT(a.geom), ST_HasArc(a.geom)\n  FROM ( SELECT (ST_Dump(p_geom)).geom AS geom\n         FROM (SELECT ST_GeomFromEWKT('COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0),(1 0, 0 1))') AS p_geom) AS b\n        ) AS a;", "execution_result": [["CIRCULARSTRING(0 0,1 1,1 0)", true], ["LINESTRING(1 0,0 1)", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of each decomposed geometric object from the COMPOUNDCURVE (containing the circular arc segment CIRCULARSTRING(0 0, 1 1, 1 0) and the straight line segment (1 0, 0 1)), and determine whether each geometric object contains a circular arc segment.", "source": "original", "new_id": 354}
{"id": 61, "function": "ST_Dump", "question": "将复合曲线COMPOUNDCURVE（包含圆弧段CIRCULARSTRING(0 0, 1 1, 1 0)和直线段(1 0, 0 1)）进行几何分解后，输出每个子几何体的EWKT格式表示，并检测其是否包含圆弧成分。", "sql": "SELECT ST_AsEWKT(a.geom), ST_HasArc(a.geom)\n  FROM ( SELECT (ST_Dump(p_geom)).geom AS geom\n         FROM (SELECT ST_GeomFromEWKT('COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0),(1 0, 0 1))') AS p_geom) AS b\n        ) AS a;", "execution_result": [["CIRCULARSTRING(0 0,1 1,1 0)", true], ["LINESTRING(1 0,0 1)", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of each decomposed geometric object from the COMPOUNDCURVE (containing the circular arc segment CIRCULARSTRING(0 0, 1 1, 1 0) and the straight line segment (1 0, 0 1)), and determine whether each geometric object contains a circular arc segment.", "source": "original", "new_id": 355}
{"id": 61, "function": "ST_Dump", "question": "输出复合曲线COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0), (1 0, 0 1))分解后每个子几何对象的扩展WKT字符串表示和是否包含圆弧的布尔值。", "sql": "SELECT ST_AsEWKT(a.geom), ST_HasArc(a.geom)\n  FROM ( SELECT (ST_Dump(p_geom)).geom AS geom\n         FROM (SELECT ST_GeomFromEWKT('COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0),(1 0, 0 1))') AS p_geom) AS b\n        ) AS a;", "execution_result": [["CIRCULARSTRING(0 0,1 1,1 0)", true], ["LINESTRING(1 0,0 1)", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of each decomposed geometric object from the COMPOUNDCURVE (containing the circular arc segment CIRCULARSTRING(0 0, 1 1, 1 0) and the straight line segment (1 0, 0 1)), and determine whether each geometric object contains a circular arc segment.", "source": "original", "new_id": 356}
{"id": 61, "function": "ST_Dump", "question": "返回复合曲线COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0), (1 0, 0 1))几何分解结果的两种信息：扩展WKT格式的几何表示和圆弧段存在性检测结果。", "sql": "SELECT ST_AsEWKT(a.geom), ST_HasArc(a.geom)\n  FROM ( SELECT (ST_Dump(p_geom)).geom AS geom\n         FROM (SELECT ST_GeomFromEWKT('COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0),(1 0, 0 1))') AS p_geom) AS b\n        ) AS a;", "execution_result": [["CIRCULARSTRING(0 0,1 1,1 0)", true], ["LINESTRING(1 0,0 1)", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of each decomposed geometric object from the COMPOUNDCURVE (containing the circular arc segment CIRCULARSTRING(0 0, 1 1, 1 0) and the straight line segment (1 0, 0 1)), and determine whether each geometric object contains a circular arc segment.", "source": "original", "new_id": 357}
{"id": 61, "function": "ST_Dump", "question": "输出COMPOUNDCURVE复合曲线（包含圆弧段CIRCULARSTRING(0 0, 1 1, 1 0)和直线段(1 0, 0 1)）分解后的每个几何对象的EWKT字符串表示，并判断每个几何对象是否包含圆弧段。", "sql": "SELECT ST_AsEWKT(a.geom), ST_HasArc(a.geom)\n  FROM ( SELECT (ST_Dump(p_geom)).geom AS geom\n         FROM (SELECT ST_GeomFromEWKT('COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0),(1 0, 0 1))') AS p_geom) AS b\n        ) AS a;", "execution_result": [["CIRCULARSTRING(0 0,1 1,1 0)", true], ["LINESTRING(1 0,0 1)", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of each decomposed geometric object from the COMPOUNDCURVE (containing the circular arc segment CIRCULARSTRING(0 0, 1 1, 1 0) and the straight line segment (1 0, 0 1)), and determine whether each geometric object contains a circular arc segment.", "source": "original", "new_id": 358}
{"id": 62, "function": "ST_Dump", "question": "将POLYHEDRALSURFACE包含6个三维多边形面((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))等具体坐标的多面体分解，返回每个面的序号和EWKT格式。", "sql": "SELECT (a.p_geom).path[1] AS path, ST_AsEWKT((a.p_geom).geom) AS geom_ewkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))')) AS p_geom) AS a;", "execution_result": [[1, "POLYGON((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0))"], [2, "POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"], [3, "POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"], [4, "POLYGON((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0))"], [5, "POLYGON((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0))"], [6, "POLYGON((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path index and corresponding EWKT-formatted 3D coordinate information for each face obtained by decomposing the POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 359}
{"id": 62, "function": "ST_Dump", "question": "对由((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))6个三维多边形组成的多面体曲面执行分解操作，输出每个组件的路径编号和扩展WKT表示。", "sql": "SELECT (a.p_geom).path[1] AS path, ST_AsEWKT((a.p_geom).geom) AS geom_ewkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))')) AS p_geom) AS a;", "execution_result": [[1, "POLYGON((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0))"], [2, "POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"], [3, "POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"], [4, "POLYGON((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0))"], [5, "POLYGON((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0))"], [6, "POLYGON((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path index and corresponding EWKT-formatted 3D coordinate information for each face obtained by decomposing the POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 360}
{"id": 62, "function": "ST_Dump", "question": "将EWKT格式的三维多面体表面POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))通过ST_Dump函数分解为多个几何组件，并输出每个组件的路径编号(path[1])和对应的EWKT格式几何体(ST_AsEWKT)。", "sql": "SELECT (a.p_geom).path[1] AS path, ST_AsEWKT((a.p_geom).geom) AS geom_ewkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))')) AS p_geom) AS a;", "execution_result": [[1, "POLYGON((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0))"], [2, "POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"], [3, "POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"], [4, "POLYGON((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0))"], [5, "POLYGON((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0))"], [6, "POLYGON((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path index and corresponding EWKT-formatted 3D coordinate information for each face obtained by decomposing the POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 361}
{"id": 62, "function": "ST_Dump", "question": "输出一个包含6个面的三维多面体曲面POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))分解后每个组件的路径编号和扩展WKT格式的几何表示。", "sql": "SELECT (a.p_geom).path[1] AS path, ST_AsEWKT((a.p_geom).geom) AS geom_ewkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))')) AS p_geom) AS a;", "execution_result": [[1, "POLYGON((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0))"], [2, "POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"], [3, "POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"], [4, "POLYGON((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0))"], [5, "POLYGON((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0))"], [6, "POLYGON((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path index and corresponding EWKT-formatted 3D coordinate information for each face obtained by decomposing the POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 362}
{"id": 62, "function": "ST_Dump", "question": "返回一个包含6个面的三维多面体曲面POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))所有组成面的序号和对应的EWKT字符串表示。", "sql": "SELECT (a.p_geom).path[1] AS path, ST_AsEWKT((a.p_geom).geom) AS geom_ewkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))')) AS p_geom) AS a;", "execution_result": [[1, "POLYGON((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0))"], [2, "POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"], [3, "POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"], [4, "POLYGON((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0))"], [5, "POLYGON((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0))"], [6, "POLYGON((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path index and corresponding EWKT-formatted 3D coordinate information for each face obtained by decomposing the POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 363}
{"id": 62, "function": "ST_Dump", "question": "输出分解POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))后得到的每个面片的路径索引和对应的EWKT格式的三维坐标信息。", "sql": "SELECT (a.p_geom).path[1] AS path, ST_AsEWKT((a.p_geom).geom) AS geom_ewkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))')) AS p_geom) AS a;", "execution_result": [[1, "POLYGON((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0))"], [2, "POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"], [3, "POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"], [4, "POLYGON((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0))"], [5, "POLYGON((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0))"], [6, "POLYGON((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path index and corresponding EWKT-formatted 3D coordinate information for each face obtained by decomposing the POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 364}
{"id": 65, "function": "ST_DumpPoints", "question": "从包含POLYGON((0 5,0 8,4 8,4 5,0 5),(1 6,3 6,2 7,1 6))、LINESTRING(5 4,5 8,6 7,5 4)和LINESTRING(5 1,4 2,5 2,5 1)的几何集合中提取所有点坐标和路径索引信息。", "sql": "SELECT path, ST_AsText(geom) \nFROM (SELECT (ST_DumpPoints(g.geom)).* \n      FROM (SELECT ST_GeomFromText('GEOMETRYCOLLECTION(POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6)), LINESTRING(5 4, 5 8, 6 7, 5 4), LINESTRING(5 1, 4 2, 5 2, 5 1))') AS geom) AS g) AS j;", "execution_result": [[[1, 1, 1], "POINT(0 5)"], [[1, 1, 2], "POINT(0 8)"], [[1, 1, 3], "POINT(4 8)"], [[1, 1, 4], "POINT(4 5)"], [[1, 1, 5], "POINT(0 5)"], [[1, 2, 1], "POINT(1 6)"], [[1, 2, 2], "POINT(3 6)"], [[1, 2, 3], "POINT(2 7)"], [[1, 2, 4], "POINT(1 6)"], [[2, 1], "POINT(5 4)"], [[2, 2], "POINT(5 8)"], [[2, 3], "POINT(6 7)"], [[2, 4], "POINT(5 4)"], [[3, 1], "POINT(5 1)"], [[3, 2], "POINT(4 2)"], [[3, 3], "POINT(5 2)"], [[3, 4], "POINT(5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the vertex path and WKT string of coordinates for all geometric objects in a GEOMETRYCOLLECTION, which includes: 1 POLYGON with an inner ring (outer ring coordinates 0 5,0 8,4 8,4 5,0 5, inner ring coordinates 1 6,3 6,2 7,1 6), 2 LINESTRINGs (first line coordinates 5 4,5 8,6 7,5 4, second line coordinates 5 1,4 2,5 2,5 1), returning two columns: the 'path' column indicates the hierarchical path of the vertex in the original geometry, and the 'ST_AsText(geom)' column represents the WKT format of each vertex's coordinates.", "source": "original", "new_id": 365}
{"id": 65, "function": "ST_DumpPoints", "question": "将GEOMETRYCOLLECTION(POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6)), LINESTRING(5 4, 5 8, 6 7, 5 4), LINESTRING(5 1, 4 2, 5 2, 5 1))中的POLYGON和两条LINESTRING分解为离散点，输出每个点的路径索引和WKT坐标。", "sql": "SELECT path, ST_AsText(geom) \nFROM (SELECT (ST_DumpPoints(g.geom)).* \n      FROM (SELECT ST_GeomFromText('GEOMETRYCOLLECTION(POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6)), LINESTRING(5 4, 5 8, 6 7, 5 4), LINESTRING(5 1, 4 2, 5 2, 5 1))') AS geom) AS g) AS j;", "execution_result": [[[1, 1, 1], "POINT(0 5)"], [[1, 1, 2], "POINT(0 8)"], [[1, 1, 3], "POINT(4 8)"], [[1, 1, 4], "POINT(4 5)"], [[1, 1, 5], "POINT(0 5)"], [[1, 2, 1], "POINT(1 6)"], [[1, 2, 2], "POINT(3 6)"], [[1, 2, 3], "POINT(2 7)"], [[1, 2, 4], "POINT(1 6)"], [[2, 1], "POINT(5 4)"], [[2, 2], "POINT(5 8)"], [[2, 3], "POINT(6 7)"], [[2, 4], "POINT(5 4)"], [[3, 1], "POINT(5 1)"], [[3, 2], "POINT(4 2)"], [[3, 3], "POINT(5 2)"], [[3, 4], "POINT(5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the vertex path and WKT string of coordinates for all geometric objects in a GEOMETRYCOLLECTION, which includes: 1 POLYGON with an inner ring (outer ring coordinates 0 5,0 8,4 8,4 5,0 5, inner ring coordinates 1 6,3 6,2 7,1 6), 2 LINESTRINGs (first line coordinates 5 4,5 8,6 7,5 4, second line coordinates 5 1,4 2,5 2,5 1), returning two columns: the 'path' column indicates the hierarchical path of the vertex in the original geometry, and the 'ST_AsText(geom)' column represents the WKT format of each vertex's coordinates.", "source": "original", "new_id": 366}
{"id": 65, "function": "ST_DumpPoints", "question": "从包含以下几何对象的GEOMETRYCOLLECTION中提取所有点坐标：1) 由外环(0 5, 0 8, 4 8, 4 5, 0 5)和内环(1 6, 3 6, 2 7, 1 6)组成的POLYGON；2) 由点序列(5 4, 5 8, 6 7, 5 4)组成的LINESTRING；3) 由点序列(5 1, 4 2, 5 2, 5 1)组成的LINESTRING。对每个点输出其在原始几何体中的路径(path)和WKT格式坐标(ST_AsText)。", "sql": "SELECT path, ST_AsText(geom) \nFROM (SELECT (ST_DumpPoints(g.geom)).* \n      FROM (SELECT ST_GeomFromText('GEOMETRYCOLLECTION(POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6)), LINESTRING(5 4, 5 8, 6 7, 5 4), LINESTRING(5 1, 4 2, 5 2, 5 1))') AS geom) AS g) AS j;", "execution_result": [[[1, 1, 1], "POINT(0 5)"], [[1, 1, 2], "POINT(0 8)"], [[1, 1, 3], "POINT(4 8)"], [[1, 1, 4], "POINT(4 5)"], [[1, 1, 5], "POINT(0 5)"], [[1, 2, 1], "POINT(1 6)"], [[1, 2, 2], "POINT(3 6)"], [[1, 2, 3], "POINT(2 7)"], [[1, 2, 4], "POINT(1 6)"], [[2, 1], "POINT(5 4)"], [[2, 2], "POINT(5 8)"], [[2, 3], "POINT(6 7)"], [[2, 4], "POINT(5 4)"], [[3, 1], "POINT(5 1)"], [[3, 2], "POINT(4 2)"], [[3, 3], "POINT(5 2)"], [[3, 4], "POINT(5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the vertex path and WKT string of coordinates for all geometric objects in a GEOMETRYCOLLECTION, which includes: 1 POLYGON with an inner ring (outer ring coordinates 0 5,0 8,4 8,4 5,0 5, inner ring coordinates 1 6,3 6,2 7,1 6), 2 LINESTRINGs (first line coordinates 5 4,5 8,6 7,5 4, second line coordinates 5 1,4 2,5 2,5 1), returning two columns: the 'path' column indicates the hierarchical path of the vertex in the original geometry, and the 'ST_AsText(geom)' column represents the WKT format of each vertex's coordinates.", "source": "original", "new_id": 367}
{"id": 65, "function": "ST_DumpPoints", "question": "输出几何集合GEOMETRYCOLLECTION(POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6)), LINESTRING(5 4, 5 8, 6 7, 5 4), LINESTRING(5 1, 4 2, 5 2, 5 1))中每个顶点的访问路径和WKT(Well-Known Text)格式坐标。", "sql": "SELECT path, ST_AsText(geom) \nFROM (SELECT (ST_DumpPoints(g.geom)).* \n      FROM (SELECT ST_GeomFromText('GEOMETRYCOLLECTION(POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6)), LINESTRING(5 4, 5 8, 6 7, 5 4), LINESTRING(5 1, 4 2, 5 2, 5 1))') AS geom) AS g) AS j;", "execution_result": [[[1, 1, 1], "POINT(0 5)"], [[1, 1, 2], "POINT(0 8)"], [[1, 1, 3], "POINT(4 8)"], [[1, 1, 4], "POINT(4 5)"], [[1, 1, 5], "POINT(0 5)"], [[1, 2, 1], "POINT(1 6)"], [[1, 2, 2], "POINT(3 6)"], [[1, 2, 3], "POINT(2 7)"], [[1, 2, 4], "POINT(1 6)"], [[2, 1], "POINT(5 4)"], [[2, 2], "POINT(5 8)"], [[2, 3], "POINT(6 7)"], [[2, 4], "POINT(5 4)"], [[3, 1], "POINT(5 1)"], [[3, 2], "POINT(4 2)"], [[3, 3], "POINT(5 2)"], [[3, 4], "POINT(5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the vertex path and WKT string of coordinates for all geometric objects in a GEOMETRYCOLLECTION, which includes: 1 POLYGON with an inner ring (outer ring coordinates 0 5,0 8,4 8,4 5,0 5, inner ring coordinates 1 6,3 6,2 7,1 6), 2 LINESTRINGs (first line coordinates 5 4,5 8,6 7,5 4, second line coordinates 5 1,4 2,5 2,5 1), returning two columns: the 'path' column indicates the hierarchical path of the vertex in the original geometry, and the 'ST_AsText(geom)' column represents the WKT format of each vertex's coordinates.", "source": "original", "new_id": 368}
{"id": 65, "function": "ST_DumpPoints", "question": "输出GEOMETRYCOLLECTION中包含的POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6))和两条LINESTRING(5 4, 5 8, 6 7, 5 4)与LINESTRING(5 1, 4 2, 5 2, 5 1)的所有顶点路径索引及其对应的WKT字符串表示。", "sql": "SELECT path, ST_AsText(geom) \nFROM (SELECT (ST_DumpPoints(g.geom)).* \n      FROM (SELECT ST_GeomFromText('GEOMETRYCOLLECTION(POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6)), LINESTRING(5 4, 5 8, 6 7, 5 4), LINESTRING(5 1, 4 2, 5 2, 5 1))') AS geom) AS g) AS j;", "execution_result": [[[1, 1, 1], "POINT(0 5)"], [[1, 1, 2], "POINT(0 8)"], [[1, 1, 3], "POINT(4 8)"], [[1, 1, 4], "POINT(4 5)"], [[1, 1, 5], "POINT(0 5)"], [[1, 2, 1], "POINT(1 6)"], [[1, 2, 2], "POINT(3 6)"], [[1, 2, 3], "POINT(2 7)"], [[1, 2, 4], "POINT(1 6)"], [[2, 1], "POINT(5 4)"], [[2, 2], "POINT(5 8)"], [[2, 3], "POINT(6 7)"], [[2, 4], "POINT(5 4)"], [[3, 1], "POINT(5 1)"], [[3, 2], "POINT(4 2)"], [[3, 3], "POINT(5 2)"], [[3, 4], "POINT(5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the vertex path and WKT string of coordinates for all geometric objects in a GEOMETRYCOLLECTION, which includes: 1 POLYGON with an inner ring (outer ring coordinates 0 5,0 8,4 8,4 5,0 5, inner ring coordinates 1 6,3 6,2 7,1 6), 2 LINESTRINGs (first line coordinates 5 4,5 8,6 7,5 4, second line coordinates 5 1,4 2,5 2,5 1), returning two columns: the 'path' column indicates the hierarchical path of the vertex in the original geometry, and the 'ST_AsText(geom)' column represents the WKT format of each vertex's coordinates.", "source": "original", "new_id": 369}
{"id": 65, "function": "ST_DumpPoints", "question": "输出GEOMETRYCOLLECTION中所有几何对象的顶点路径和坐标的WKT字符串，该集合包含：1个带内环的POLYGON（外环坐标0 5,0 8,4 8,4 5,0 5，内环坐标1 6,3 6,2 7,1 6），2条LINESTRING（第一条坐标5 4,5 8,6 7,5 4，第二条坐标5 1,4 2,5 2,5 1），要求返回两列数据：path列表示顶点在原始几何体中的层级路径，ST_AsText(geom)列表示各顶点坐标的WKT格式。", "sql": "SELECT path, ST_AsText(geom) \nFROM (SELECT (ST_DumpPoints(g.geom)).* \n      FROM (SELECT ST_GeomFromText('GEOMETRYCOLLECTION(POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6)), LINESTRING(5 4, 5 8, 6 7, 5 4), LINESTRING(5 1, 4 2, 5 2, 5 1))') AS geom) AS g) AS j;", "execution_result": [[[1, 1, 1], "POINT(0 5)"], [[1, 1, 2], "POINT(0 8)"], [[1, 1, 3], "POINT(4 8)"], [[1, 1, 4], "POINT(4 5)"], [[1, 1, 5], "POINT(0 5)"], [[1, 2, 1], "POINT(1 6)"], [[1, 2, 2], "POINT(3 6)"], [[1, 2, 3], "POINT(2 7)"], [[1, 2, 4], "POINT(1 6)"], [[2, 1], "POINT(5 4)"], [[2, 2], "POINT(5 8)"], [[2, 3], "POINT(6 7)"], [[2, 4], "POINT(5 4)"], [[3, 1], "POINT(5 1)"], [[3, 2], "POINT(4 2)"], [[3, 3], "POINT(5 2)"], [[3, 4], "POINT(5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the vertex path and WKT string of coordinates for all geometric objects in a GEOMETRYCOLLECTION, which includes: 1 POLYGON with an inner ring (outer ring coordinates 0 5,0 8,4 8,4 5,0 5, inner ring coordinates 1 6,3 6,2 7,1 6), 2 LINESTRINGs (first line coordinates 5 4,5 8,6 7,5 4, second line coordinates 5 1,4 2,5 2,5 1), returning two columns: the 'path' column indicates the hierarchical path of the vertex in the original geometry, and the 'ST_AsText(geom)' column represents the WKT format of each vertex's coordinates.", "source": "original", "new_id": 370}
{"id": 67, "function": "ST_DumpPoints", "question": "对于LINESTRING(1 2, 3 4, 10 10)和LINESTRING(3 5, 5 6, 9 10)这两条线段，第一条线段edge_id设置为1，第二条线段edge_id设置为2、提取两条线段的点的路径索引和WKT格式的坐标。", "sql": "SELECT edge_id, (dp).path[1] AS index, ST_AsText((dp).geom) AS wktnode \nFROM (SELECT 1 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(1 2, 3 4, 10 10)')) AS dp \nUNION ALL SELECT 2 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(3 5, 5 6, 9 10)')) AS dp) AS foo;", "execution_result": [[1, 1, "POINT(1 2)"], [1, 2, "POINT(3 4)"], [1, 3, "POINT(10 10)"], [2, 1, "POINT(3 5)"], [2, 2, "POINT(5 6)"], [2, 3, "POINT(9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the decomposed point information of two line segments, including the fields edge_id, the point's index position in the path (starting from 1), and the WKT string representation of each point. The first line segment is LINESTRING(1 2, 3 4, 10 10), and the second is LINESTRING(3 5, 5 6, 9 10). The result should include three columns: edge_id, index, and wktnode.", "source": "original", "new_id": 371}
{"id": 67, "function": "ST_DumpPoints", "question": "将LINESTRING(1 2, 3 4, 10 10)标记为edge_id=1，LINESTRING(3 5, 5 6, 9 10)标记为edge_id=2，输出每个顶点的索引位置和WKT坐标。", "sql": "SELECT edge_id, (dp).path[1] AS index, ST_AsText((dp).geom) AS wktnode \nFROM (SELECT 1 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(1 2, 3 4, 10 10)')) AS dp \nUNION ALL SELECT 2 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(3 5, 5 6, 9 10)')) AS dp) AS foo;", "execution_result": [[1, 1, "POINT(1 2)"], [1, 2, "POINT(3 4)"], [1, 3, "POINT(10 10)"], [2, 1, "POINT(3 5)"], [2, 2, "POINT(5 6)"], [2, 3, "POINT(9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the decomposed point information of two line segments, including the fields edge_id, the point's index position in the path (starting from 1), and the WKT string representation of each point. The first line segment is LINESTRING(1 2, 3 4, 10 10), and the second is LINESTRING(3 5, 5 6, 9 10). The result should include three columns: edge_id, index, and wktnode.", "source": "original", "new_id": 372}
{"id": 67, "function": "ST_DumpPoints", "question": "对于两个线对象：第一条线LINESTRING(1 2, 3 4, 10 10)和第二条线LINESTRING(3 5, 5 6, 9 10)，分别用ST_DumpPoints函数提取所有顶点，输出每条线的edge_id编号（1和2）、每个顶点在线中的序号index、以及顶点坐标的WKT格式wktnode。", "sql": "SELECT edge_id, (dp).path[1] AS index, ST_AsText((dp).geom) AS wktnode \nFROM (SELECT 1 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(1 2, 3 4, 10 10)')) AS dp \nUNION ALL SELECT 2 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(3 5, 5 6, 9 10)')) AS dp) AS foo;", "execution_result": [[1, 1, "POINT(1 2)"], [1, 2, "POINT(3 4)"], [1, 3, "POINT(10 10)"], [2, 1, "POINT(3 5)"], [2, 2, "POINT(5 6)"], [2, 3, "POINT(9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the decomposed point information of two line segments, including the fields edge_id, the point's index position in the path (starting from 1), and the WKT string representation of each point. The first line segment is LINESTRING(1 2, 3 4, 10 10), and the second is LINESTRING(3 5, 5 6, 9 10). The result should include three columns: edge_id, index, and wktnode.", "source": "original", "new_id": 373}
{"id": 67, "function": "ST_DumpPoints", "question": "以表格形式输出两条线段LINESTRING(1 2, 3 4, 10 10)和LINESTRING(3 5, 5 6, 9 10)的顶点信息，包含线段ID、顶点序号和WKT格式的坐标点。", "sql": "SELECT edge_id, (dp).path[1] AS index, ST_AsText((dp).geom) AS wktnode \nFROM (SELECT 1 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(1 2, 3 4, 10 10)')) AS dp \nUNION ALL SELECT 2 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(3 5, 5 6, 9 10)')) AS dp) AS foo;", "execution_result": [[1, 1, "POINT(1 2)"], [1, 2, "POINT(3 4)"], [1, 3, "POINT(10 10)"], [2, 1, "POINT(3 5)"], [2, 2, "POINT(5 6)"], [2, 3, "POINT(9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the decomposed point information of two line segments, including the fields edge_id, the point's index position in the path (starting from 1), and the WKT string representation of each point. The first line segment is LINESTRING(1 2, 3 4, 10 10), and the second is LINESTRING(3 5, 5 6, 9 10). The result should include three columns: edge_id, index, and wktnode.", "source": "original", "new_id": 374}
{"id": 67, "function": "ST_DumpPoints", "question": "生成包含edge_id、顶点索引和WKT文本坐标的结果集，数据来自两条线段LINESTRING(1 2, 3 4, 10 10)和LINESTRING(3 5, 5 6, 9 10)的顶点分解。", "sql": "SELECT edge_id, (dp).path[1] AS index, ST_AsText((dp).geom) AS wktnode \nFROM (SELECT 1 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(1 2, 3 4, 10 10)')) AS dp \nUNION ALL SELECT 2 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(3 5, 5 6, 9 10)')) AS dp) AS foo;", "execution_result": [[1, 1, "POINT(1 2)"], [1, 2, "POINT(3 4)"], [1, 3, "POINT(10 10)"], [2, 1, "POINT(3 5)"], [2, 2, "POINT(5 6)"], [2, 3, "POINT(9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the decomposed point information of two line segments, including the fields edge_id, the point's index position in the path (starting from 1), and the WKT string representation of each point. The first line segment is LINESTRING(1 2, 3 4, 10 10), and the second is LINESTRING(3 5, 5 6, 9 10). The result should include three columns: edge_id, index, and wktnode.", "source": "original", "new_id": 375}
{"id": 67, "function": "ST_DumpPoints", "question": "输出两个线段的分解点信息，包括edge_id字段、点在路径中的索引位置（从1开始计数）以及每个点的WKT字符串表示。其中第一条线段是LINESTRING(1 2, 3 4, 10 10)，第二条线段是LINESTRING(3 5, 5 6, 9 10)，要求返回结果包含三列：edge_id、index和wktnode。", "sql": "SELECT edge_id, (dp).path[1] AS index, ST_AsText((dp).geom) AS wktnode \nFROM (SELECT 1 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(1 2, 3 4, 10 10)')) AS dp \nUNION ALL SELECT 2 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(3 5, 5 6, 9 10)')) AS dp) AS foo;", "execution_result": [[1, 1, "POINT(1 2)"], [1, 2, "POINT(3 4)"], [1, 3, "POINT(10 10)"], [2, 1, "POINT(3 5)"], [2, 2, "POINT(5 6)"], [2, 3, "POINT(9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the decomposed point information of two line segments, including the fields edge_id, the point's index position in the path (starting from 1), and the WKT string representation of each point. The first line segment is LINESTRING(1 2, 3 4, 10 10), and the second is LINESTRING(3 5, 5 6, 9 10). The result should include three columns: edge_id, index, and wktnode.", "source": "original", "new_id": 376}
{"id": 68, "function": "ST_DumpSegments", "question": "将TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 ))几何对象分解为线段，输出每条线段的path和EWKT格式的几何信息。", "sql": "SELECT path, ST_AsEWKT(geom) \nFROM (SELECT (ST_DumpSegments(g.geom)).* \n    FROM (SELECT 'TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )'::geometry AS geom) AS g) j;", "execution_result": [[[1, 1, 1], "LINESTRING(0 0 0,0 0 1)"], [[1, 1, 2], "LINESTRING(0 0 1,0 1 0)"], [[1, 1, 3], "LINESTRING(0 1 0,0 0 0)"], [[2, 1, 1], "LINESTRING(0 0 0,0 1 0)"], [[2, 1, 2], "LINESTRING(0 1 0,1 1 0)"], [[2, 1, 3], "LINESTRING(1 1 0,0 0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path indices and corresponding EWKT geometries of all edges in a TIN composed of triangular facets, where the TIN contains two triangular facets: the first facet is formed by vertices POINT(0 0 0), POINT(0 0 1), POINT(0 1 0), and the second facet is formed by vertices POINT(0 0 0), POINT(0 1 0), POINT(1 1 0).", "source": "original", "new_id": 377}
{"id": 68, "function": "ST_DumpSegments", "question": "对由两个三角形面(坐标分别为0 0 0, 0 0 1, 0 1 0和0 0 0, 0 1 0, 1 1 0)组成的TIN进行线段分解，返回各线段的路径和几何表示。", "sql": "SELECT path, ST_AsEWKT(geom) \nFROM (SELECT (ST_DumpSegments(g.geom)).* \n    FROM (SELECT 'TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )'::geometry AS geom) AS g) j;", "execution_result": [[[1, 1, 1], "LINESTRING(0 0 0,0 0 1)"], [[1, 1, 2], "LINESTRING(0 0 1,0 1 0)"], [[1, 1, 3], "LINESTRING(0 1 0,0 0 0)"], [[2, 1, 1], "LINESTRING(0 0 0,0 1 0)"], [[2, 1, 2], "LINESTRING(0 1 0,1 1 0)"], [[2, 1, 3], "LINESTRING(1 1 0,0 0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path indices and corresponding EWKT geometries of all edges in a TIN composed of triangular facets, where the TIN contains two triangular facets: the first facet is formed by vertices POINT(0 0 0), POINT(0 0 1), POINT(0 1 0), and the second facet is formed by vertices POINT(0 0 0), POINT(0 1 0), POINT(1 1 0).", "source": "original", "new_id": 378}
{"id": 68, "function": "ST_DumpSegments", "question": "从TIN不规则三角网中提取所有边线段，该TIN由两个三角形面组成：第一个三角形顶点为POINT(0 0 0)、POINT(0 0 1)、POINT(0 1 0)，第二个三角形顶点为POINT(0 0 0)、POINT(0 1 0)、POINT(1 1 0)，使用ST_DumpSegments函数分解几何体后，输出每条线段的路径标识和EWKT格式的几何表示。", "sql": "SELECT path, ST_AsEWKT(geom) \nFROM (SELECT (ST_DumpSegments(g.geom)).* \n    FROM (SELECT 'TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )'::geometry AS geom) AS g) j;", "execution_result": [[[1, 1, 1], "LINESTRING(0 0 0,0 0 1)"], [[1, 1, 2], "LINESTRING(0 0 1,0 1 0)"], [[1, 1, 3], "LINESTRING(0 1 0,0 0 0)"], [[2, 1, 1], "LINESTRING(0 0 0,0 1 0)"], [[2, 1, 2], "LINESTRING(0 1 0,1 1 0)"], [[2, 1, 3], "LINESTRING(1 1 0,0 0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path indices and corresponding EWKT geometries of all edges in a TIN composed of triangular facets, where the TIN contains two triangular facets: the first facet is formed by vertices POINT(0 0 0), POINT(0 0 1), POINT(0 1 0), and the second facet is formed by vertices POINT(0 0 0), POINT(0 1 0), POINT(1 1 0).", "source": "original", "new_id": 379}
{"id": 68, "function": "ST_DumpSegments", "question": "输出TIN几何对象TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 ))所有线段的分解结果，包含path编号和EWKT格式的三维几何数据。", "sql": "SELECT path, ST_AsEWKT(geom) \nFROM (SELECT (ST_DumpSegments(g.geom)).* \n    FROM (SELECT 'TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )'::geometry AS geom) AS g) j;", "execution_result": [[[1, 1, 1], "LINESTRING(0 0 0,0 0 1)"], [[1, 1, 2], "LINESTRING(0 0 1,0 1 0)"], [[1, 1, 3], "LINESTRING(0 1 0,0 0 0)"], [[2, 1, 1], "LINESTRING(0 0 0,0 1 0)"], [[2, 1, 2], "LINESTRING(0 1 0,1 1 0)"], [[2, 1, 3], "LINESTRING(1 1 0,0 0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path indices and corresponding EWKT geometries of all edges in a TIN composed of triangular facets, where the TIN contains two triangular facets: the first facet is formed by vertices POINT(0 0 0), POINT(0 0 1), POINT(0 1 0), and the second facet is formed by vertices POINT(0 0 0), POINT(0 1 0), POINT(1 1 0).", "source": "original", "new_id": 380}
{"id": 68, "function": "ST_DumpSegments", "question": "以EWKT格式返回TIN几何TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )中每条线段的几何描述，同时包含各线段的path标识。", "sql": "SELECT path, ST_AsEWKT(geom) \nFROM (SELECT (ST_DumpSegments(g.geom)).* \n    FROM (SELECT 'TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )'::geometry AS geom) AS g) j;", "execution_result": [[[1, 1, 1], "LINESTRING(0 0 0,0 0 1)"], [[1, 1, 2], "LINESTRING(0 0 1,0 1 0)"], [[1, 1, 3], "LINESTRING(0 1 0,0 0 0)"], [[2, 1, 1], "LINESTRING(0 0 0,0 1 0)"], [[2, 1, 2], "LINESTRING(0 1 0,1 1 0)"], [[2, 1, 3], "LINESTRING(1 1 0,0 0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path indices and corresponding EWKT geometries of all edges in a TIN composed of triangular facets, where the TIN contains two triangular facets: the first facet is formed by vertices POINT(0 0 0), POINT(0 0 1), POINT(0 1 0), and the second facet is formed by vertices POINT(0 0 0), POINT(0 1 0), POINT(1 1 0).", "source": "original", "new_id": 381}
{"id": 68, "function": "ST_DumpSegments", "question": "输出由TIN面片组成的三角网中所有边的路径索引和对应的EWKT格式几何体，该TIN包含两个三角形面片：第一个面片由顶点POINT(0 0 0)、POINT(0 0 1)、POINT(0 1 0)构成，第二个面片由顶点POINT(0 0 0)、POINT(0 1 0)、POINT(1 1 0)构成。", "sql": "SELECT path, ST_AsEWKT(geom) \nFROM (SELECT (ST_DumpSegments(g.geom)).* \n    FROM (SELECT 'TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )'::geometry AS geom) AS g) j;", "execution_result": [[[1, 1, 1], "LINESTRING(0 0 0,0 0 1)"], [[1, 1, 2], "LINESTRING(0 0 1,0 1 0)"], [[1, 1, 3], "LINESTRING(0 1 0,0 0 0)"], [[2, 1, 1], "LINESTRING(0 0 0,0 1 0)"], [[2, 1, 2], "LINESTRING(0 1 0,1 1 0)"], [[2, 1, 3], "LINESTRING(1 1 0,0 0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path indices and corresponding EWKT geometries of all edges in a TIN composed of triangular facets, where the TIN contains two triangular facets: the first facet is formed by vertices POINT(0 0 0), POINT(0 0 1), POINT(0 1 0), and the second facet is formed by vertices POINT(0 0 0), POINT(0 1 0), POINT(1 1 0).", "source": "original", "new_id": 382}
{"id": 69, "function": "ST_DumpSegments", "question": "将三角形TRIANGLE((0 0, 0 9, 9 0, 0 0))分解为线段，输出每条线段的路径编号和WKT格式几何。", "sql": "SELECT path, ST_AsText(geom) \n      FROM ( SELECT (ST_DumpSegments(g.geom)).* \n              FROM (SELECT 'TRIANGLE(( 0 0, 0 9, 9 0, 0 0 ))'::geometry AS geom ) AS g ) j;", "execution_result": [[[1, 1], "LINESTRING(0 0,0 9)"], [[1, 2], "LINESTRING(0 9,9 0)"], [[1, 3], "LINESTRING(9 0,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path IDs and corresponding WKT string representations of all line segments decomposed from the triangle TRIANGLE((0 0, 0 9, 9 0, 0 0)).", "source": "original", "new_id": 383}
{"id": 69, "function": "ST_DumpSegments", "question": "处理顶点坐标为(0,0)、(0,9)、(9,0)的三角形，提取其边界线段并返回路径和几何文本。", "sql": "SELECT path, ST_AsText(geom) \n      FROM ( SELECT (ST_DumpSegments(g.geom)).* \n              FROM (SELECT 'TRIANGLE(( 0 0, 0 9, 9 0, 0 0 ))'::geometry AS geom ) AS g ) j;", "execution_result": [[[1, 1], "LINESTRING(0 0,0 9)"], [[1, 2], "LINESTRING(0 9,9 0)"], [[1, 3], "LINESTRING(9 0,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path IDs and corresponding WKT string representations of all line segments decomposed from the triangle TRIANGLE((0 0, 0 9, 9 0, 0 0)).", "source": "original", "new_id": 384}
{"id": 69, "function": "ST_DumpSegments", "question": "从由顶点坐标(0 0)、(0 9)、(9 0)构成的三角形几何体中提取所有线段，并输出每条线段的路径编号及其WKT文本表示。具体步骤为：首先将WKT格式的三角形'TRIANGLE((0 0, 0 9, 9 0, 0 0))'转换为几何对象，然后使用ST_DumpSegments函数分解出所有线段，最后通过ST_AsText函数将几何对象转换为WKT文本格式输出。", "sql": "SELECT path, ST_AsText(geom) \n      FROM ( SELECT (ST_DumpSegments(g.geom)).* \n              FROM (SELECT 'TRIANGLE(( 0 0, 0 9, 9 0, 0 0 ))'::geometry AS geom ) AS g ) j;", "execution_result": [[[1, 1], "LINESTRING(0 0,0 9)"], [[1, 2], "LINESTRING(0 9,9 0)"], [[1, 3], "LINESTRING(9 0,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path IDs and corresponding WKT string representations of all line segments decomposed from the triangle TRIANGLE((0 0, 0 9, 9 0, 0 0)).", "source": "original", "new_id": 385}
{"id": 69, "function": "ST_DumpSegments", "question": "输出三角形TRIANGLE((0 0, 0 9, 9 0, 0 0))各边线段的路径编号和Well-Known Text格式的几何表示。", "sql": "SELECT path, ST_AsText(geom) \n      FROM ( SELECT (ST_DumpSegments(g.geom)).* \n              FROM (SELECT 'TRIANGLE(( 0 0, 0 9, 9 0, 0 0 ))'::geometry AS geom ) AS g ) j;", "execution_result": [[[1, 1], "LINESTRING(0 0,0 9)"], [[1, 2], "LINESTRING(0 9,9 0)"], [[1, 3], "LINESTRING(9 0,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path IDs and corresponding WKT string representations of all line segments decomposed from the triangle TRIANGLE((0 0, 0 9, 9 0, 0 0)).", "source": "original", "new_id": 386}
{"id": 69, "function": "ST_DumpSegments", "question": "返回包含两个字段的结果集：TRIANGLE((0 0, 0 9, 9 0, 0 0))的线段分解路径标识和对应线段的文本格式几何。", "sql": "SELECT path, ST_AsText(geom) \n      FROM ( SELECT (ST_DumpSegments(g.geom)).* \n              FROM (SELECT 'TRIANGLE(( 0 0, 0 9, 9 0, 0 0 ))'::geometry AS geom ) AS g ) j;", "execution_result": [[[1, 1], "LINESTRING(0 0,0 9)"], [[1, 2], "LINESTRING(0 9,9 0)"], [[1, 3], "LINESTRING(9 0,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path IDs and corresponding WKT string representations of all line segments decomposed from the triangle TRIANGLE((0 0, 0 9, 9 0, 0 0)).", "source": "original", "new_id": 387}
{"id": 69, "function": "ST_DumpSegments", "question": "输出由三角形TRIANGLE((0 0, 0 9, 9 0, 0 0))分解得到的所有线段的路径编号和对应的WKT字符串表示。", "sql": "SELECT path, ST_AsText(geom) \n      FROM ( SELECT (ST_DumpSegments(g.geom)).* \n              FROM (SELECT 'TRIANGLE(( 0 0, 0 9, 9 0, 0 0 ))'::geometry AS geom ) AS g ) j;", "execution_result": [[[1, 1], "LINESTRING(0 0,0 9)"], [[1, 2], "LINESTRING(0 9,9 0)"], [[1, 3], "LINESTRING(9 0,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the path IDs and corresponding WKT string representations of all line segments decomposed from the triangle TRIANGLE((0 0, 0 9, 9 0, 0 0)).", "source": "original", "new_id": 388}
{"id": 70, "function": "ST_DumpRings", "question": "从POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))这个带内环的三维多边形中提取所有环状结构，输出路径编号和EWKT格式的几何数据。", "sql": "SELECT path, ST_AsEWKT(geom) AS geom \nFROM ST_DumpRings( ST_GeomFromEWKT('POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))') ) AS foo;", "execution_result": [[[0], "POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1,-8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1,-8150305 5132788 1,-8149064 5133092 1))"], [[1], "POLYGON((-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result containing path indices and EWKT-formatted geometries derived from decomposing all rings of the POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1)).", "source": "original", "new_id": 389}
{"id": 70, "function": "ST_DumpRings", "question": "对包含外环和内环的三维多边形'POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))执行环分解操作，返回每个环的路径索引和EWKT几何表示。", "sql": "SELECT path, ST_AsEWKT(geom) AS geom \nFROM ST_DumpRings( ST_GeomFromEWKT('POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))') ) AS foo;", "execution_result": [[[0], "POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1,-8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1,-8150305 5132788 1,-8149064 5133092 1))"], [[1], "POLYGON((-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result containing path indices and EWKT-formatted geometries derived from decomposing all rings of the POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1)).", "source": "original", "new_id": 390}
{"id": 70, "function": "ST_DumpRings", "question": "从EWKT格式的POLYGON几何体中提取所有环，该几何体由两个环组成：第一个环包含16个三维点（带Z值1），坐标依次为(-8149064 5133092 1)、(-8149064 5132986 1)、(-8148996 5132839 1)、(-8148972 5132767 1)、(-8148958 5132508 1)、(-8148941 5132466 1)、(-8148924 5132394 1)、(-8148903 5132210 1)、(-8148930 5131967 1)、(-8148992 5131978 1)、(-8149237 5132093 1)、(-8149404 5132211 1)、(-8149647 5132310 1)、(-8149757 5132394 1)、(-8150305 5132788 1)、(-8149064 5133092 1)；第二个环包含5个三维点（带Z值1），坐标依次为(-8149362 5132394 1)、(-8149446 5132501 1)、(-8149548 5132597 1)、(-8149695 5132675 1)、(-8149362 5132394 1)。使用ST_DumpRings函数分解这些环，并返回每个环的路径编号和EWKT格式的几何体。", "sql": "SELECT path, ST_AsEWKT(geom) AS geom \nFROM ST_DumpRings( ST_GeomFromEWKT('POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))') ) AS foo;", "execution_result": [[[0], "POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1,-8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1,-8150305 5132788 1,-8149064 5133092 1))"], [[1], "POLYGON((-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result containing path indices and EWKT-formatted geometries derived from decomposing all rings of the POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1)).", "source": "original", "new_id": 391}
{"id": 70, "function": "ST_DumpRings", "question": "输出三维多边形POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))所有环状结构的分解结果，包含路径编号和扩展WKT格式的几何数据。", "sql": "SELECT path, ST_AsEWKT(geom) AS geom \nFROM ST_DumpRings( ST_GeomFromEWKT('POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))') ) AS foo;", "execution_result": [[[0], "POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1,-8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1,-8150305 5132788 1,-8149064 5133092 1))"], [[1], "POLYGON((-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result containing path indices and EWKT-formatted geometries derived from decomposing all rings of the POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1)).", "source": "original", "new_id": 392}
{"id": 70, "function": "ST_DumpRings", "question": "返回带内环的三维多边形POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))经环分解后，每个环的路径索引和EWKT字符串表示。", "sql": "SELECT path, ST_AsEWKT(geom) AS geom \nFROM ST_DumpRings( ST_GeomFromEWKT('POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))') ) AS foo;", "execution_result": [[[0], "POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1,-8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1,-8150305 5132788 1,-8149064 5133092 1))"], [[1], "POLYGON((-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result containing path indices and EWKT-formatted geometries derived from decomposing all rings of the POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1)).", "source": "original", "new_id": 393}
{"id": 70, "function": "ST_DumpRings", "question": "输出包含路径索引和EWKT格式几何体的结果，该几何体来自分解POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))的所有环。", "sql": "SELECT path, ST_AsEWKT(geom) AS geom \nFROM ST_DumpRings( ST_GeomFromEWKT('POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))') ) AS foo;", "execution_result": [[[0], "POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1,-8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1,-8150305 5132788 1,-8149064 5133092 1))"], [[1], "POLYGON((-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result containing path indices and EWKT-formatted geometries derived from decomposing all rings of the POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1)).", "source": "original", "new_id": 394}
{"id": 71, "function": "ST_EndPoint", "question": "检测POINT(1 1)几何对象的终点是否为NULL，并将结果命名为is_null。", "sql": "SELECT ST_EndPoint('POINT(1 1)'::geometry) IS NULL AS is_null;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean value named `is_null` indicating whether the endpoint of the 2D point POINT(1 1) is NULL.", "source": "original", "new_id": 395}
{"id": 71, "function": "ST_EndPoint", "question": "判断POINT(1 1)这个点几何的ST_EndPoint函数返回值是否为NULL。", "sql": "SELECT ST_EndPoint('POINT(1 1)'::geometry) IS NULL AS is_null;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean value named `is_null` indicating whether the endpoint of the 2D point POINT(1 1) is NULL.", "source": "original", "new_id": 396}
{"id": 71, "function": "ST_EndPoint", "question": "判断几何对象POINT(1 1)的终点是否为NULL，并将结果命名为is_null。", "sql": "SELECT ST_EndPoint('POINT(1 1)'::geometry) IS NULL AS is_null;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean value named `is_null` indicating whether the endpoint of the 2D point POINT(1 1) is NULL.", "source": "original", "new_id": 397}
{"id": 71, "function": "ST_EndPoint", "question": "输出POINT(1 1)几何终点检测结果的布尔值，列名为is_null。", "sql": "SELECT ST_EndPoint('POINT(1 1)'::geometry) IS NULL AS is_null;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean value named `is_null` indicating whether the endpoint of the 2D point POINT(1 1) is NULL.", "source": "original", "new_id": 398}
{"id": 71, "function": "ST_EndPoint", "question": "返回一个布尔值表示POINT(1 1)的终点检测是否为NULL的结果。", "sql": "SELECT ST_EndPoint('POINT(1 1)'::geometry) IS NULL AS is_null;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean value named `is_null` indicating whether the endpoint of the 2D point POINT(1 1) is NULL.", "source": "original", "new_id": 399}
{"id": 71, "function": "ST_EndPoint", "question": "输出判断二维点POINT(1 1)的终点是否为NULL的结果，要求返回布尔值并命名为is_null。", "sql": "SELECT ST_EndPoint('POINT(1 1)'::geometry) IS NULL AS is_null;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean value named `is_null` indicating whether the endpoint of the 2D point POINT(1 1) is NULL.", "source": "original", "new_id": 400}
{"id": 72, "function": "ST_EndPoint", "question": "获取LINESTRING(1 1 2, 1 2 3, 0 0 5)的终点坐标，输出为EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_EndPoint('LINESTRING(1 1 2, 1 2 3, 0 0 5)'));", "execution_result": [["POINT(0 0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the endpoint coordinates of the 3D linestring LINESTRING(1 1 2, 1 2 3, 0 0 5) in EWKT format, including Z-value information.", "source": "original", "new_id": 401}
{"id": 72, "function": "ST_EndPoint", "question": "返回三维线段LINESTRING(1 1 2, 1 2 3, 0 0 5)的终点POINT(0 0 5)的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_EndPoint('LINESTRING(1 1 2, 1 2 3, 0 0 5)'));", "execution_result": [["POINT(0 0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the endpoint coordinates of the 3D linestring LINESTRING(1 1 2, 1 2 3, 0 0 5) in EWKT format, including Z-value information.", "source": "original", "new_id": 402}
{"id": 72, "function": "ST_EndPoint", "question": "获取三维线段LINESTRING(1 1 2, 1 2 3, 0 0 5)的终点坐标，并以扩展WKT格式输出结果，其中线段由三个三维点组成：第一个点坐标为(1,1,2)，第二个点坐标为(1,2,3)，第三个点坐标为(0,0,5)。", "sql": "SELECT ST_AsEWKT(ST_EndPoint('LINESTRING(1 1 2, 1 2 3, 0 0 5)'));", "execution_result": [["POINT(0 0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the endpoint coordinates of the 3D linestring LINESTRING(1 1 2, 1 2 3, 0 0 5) in EWKT format, including Z-value information.", "source": "original", "new_id": 403}
{"id": 72, "function": "ST_EndPoint", "question": "输出三维线段LINESTRING(1 1 2, 1 2 3, 0 0 5)终点的EWKT格式字符串，包含SRID标识符。", "sql": "SELECT ST_AsEWKT(ST_EndPoint('LINESTRING(1 1 2, 1 2 3, 0 0 5)'));", "execution_result": [["POINT(0 0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the endpoint coordinates of the 3D linestring LINESTRING(1 1 2, 1 2 3, 0 0 5) in EWKT format, including Z-value information.", "source": "original", "new_id": 404}
{"id": 72, "function": "ST_EndPoint", "question": "以EWKT文本形式返回线型几何对象三维线段LINESTRING(1 1 2, 1 2 3, 0 0 5)最后一个顶点的完整坐标信息。", "sql": "SELECT ST_AsEWKT(ST_EndPoint('LINESTRING(1 1 2, 1 2 3, 0 0 5)'));", "execution_result": [["POINT(0 0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the endpoint coordinates of the 3D linestring LINESTRING(1 1 2, 1 2 3, 0 0 5) in EWKT format, including Z-value information.", "source": "original", "new_id": 405}
{"id": 72, "function": "ST_EndPoint", "question": "输出三维线段LINESTRING(1 1 2, 1 2 3, 0 0 5)的终点坐标，要求以EWKT格式返回，包含Z值信息。", "sql": "SELECT ST_AsEWKT(ST_EndPoint('LINESTRING(1 1 2, 1 2 3, 0 0 5)'));", "execution_result": [["POINT(0 0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the endpoint coordinates of the 3D linestring LINESTRING(1 1 2, 1 2 3, 0 0 5) in EWKT format, including Z-value information.", "source": "original", "new_id": 406}
{"id": 73, "function": "ST_EndPoint", "question": "计算CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)的终点坐标并输出为WKT文本。", "sql": "SELECT ST_AsText(ST_EndPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(6 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the endpoint coordinates of the circular arc line CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3).", "source": "original", "new_id": 407}
{"id": 73, "function": "ST_EndPoint", "question": "将圆形弧线(5 2,-3 1.999999, -2 1, -4 2, 6 3)的终点转换为文本表示。", "sql": "SELECT ST_AsText(ST_EndPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(6 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the endpoint coordinates of the circular arc line CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3).", "source": "original", "new_id": 408}
{"id": 73, "function": "ST_EndPoint", "question": "提取圆弧线CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)的终点坐标，并以WKT文本格式输出结果。", "sql": "SELECT ST_AsText(ST_EndPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(6 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the endpoint coordinates of the circular arc line CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3).", "source": "original", "new_id": 409}
{"id": 73, "function": "ST_EndPoint", "question": "输出圆形弧线(5 2,-3 1.999999, -2 1, -4 2, 6 3)终点的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_EndPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(6 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the endpoint coordinates of the circular arc line CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3).", "source": "original", "new_id": 410}
{"id": 73, "function": "ST_EndPoint", "question": "以文本格式返回给定圆形弧线几何CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)的终点坐标。", "sql": "SELECT ST_AsText(ST_EndPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(6 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the endpoint coordinates of the circular arc line CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3).", "source": "original", "new_id": 411}
{"id": 73, "function": "ST_EndPoint", "question": "输出圆弧线CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)的终点坐标的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_EndPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(6 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the endpoint coordinates of the circular arc line CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3).", "source": "original", "new_id": 412}
{"id": 74, "function": "ST_Envelope", "question": "计算POINT(1 3)的边界框并输出为WKT格式文本。", "sql": "SELECT ST_AsText(ST_Envelope('POINT(1 3)'::geometry));", "execution_result": [["POINT(1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for the 2D point POINT(1 3).", "source": "original", "new_id": 413}
{"id": 74, "function": "ST_Envelope", "question": "将坐标为(1,3)的点对象的包络矩形转换为文本表示。", "sql": "SELECT ST_AsText(ST_Envelope('POINT(1 3)'::geometry));", "execution_result": [["POINT(1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for the 2D point POINT(1 3).", "source": "original", "new_id": 414}
{"id": 74, "function": "ST_Envelope", "question": "将坐标为POINT(1 3)的二维点转换为边界矩形，并以WKT格式输出该边界矩形的文本表示。", "sql": "SELECT ST_AsText(ST_Envelope('POINT(1 3)'::geometry));", "execution_result": [["POINT(1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for the 2D point POINT(1 3).", "source": "original", "new_id": 415}
{"id": 74, "function": "ST_Envelope", "question": "输出点对象POINT(1 3)的边界框的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Envelope('POINT(1 3)'::geometry));", "execution_result": [["POINT(1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for the 2D point POINT(1 3).", "source": "original", "new_id": 416}
{"id": 74, "function": "ST_Envelope", "question": "以文本格式返回点几何对象POINT(1 3)的最小边界框。", "sql": "SELECT ST_AsText(ST_Envelope('POINT(1 3)'::geometry));", "execution_result": [["POINT(1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for the 2D point POINT(1 3).", "source": "original", "new_id": 417}
{"id": 74, "function": "ST_Envelope", "question": "输出二维点POINT(1 3)的最小边界矩形（MBR）的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Envelope('POINT(1 3)'::geometry));", "execution_result": [["POINT(1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for the 2D point POINT(1 3).", "source": "original", "new_id": 418}
{"id": 75, "function": "ST_Envelope", "question": "计算LINESTRING(0 0, 1 3)这条线段的边界框，并以WKT格式输出。", "sql": "SELECT ST_AsText(ST_Envelope('LINESTRING(0 0, 1 3)'::geometry));", "execution_result": [["POLYGON((0 0,0 3,1 3,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for LINESTRING(0 0, 1 3).", "source": "original", "new_id": 419}
{"id": 75, "function": "ST_Envelope", "question": "输出从点(0,0)到点(1,3)的线段的最小边界矩形文本表示。", "sql": "SELECT ST_AsText(ST_Envelope('LINESTRING(0 0, 1 3)'::geometry));", "execution_result": [["POLYGON((0 0,0 3,1 3,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for LINESTRING(0 0, 1 3).", "source": "original", "new_id": 420}
{"id": 75, "function": "ST_Envelope", "question": "计算LINESTRING(0 0, 1 3)的包络矩形几何对象。", "sql": "SELECT ST_Envelope('LINESTRING(0 0, 1 3)'::geometry);", "execution_result": [["010300000001000000050000000000000000000000000000000000000000000000000000000000000000000840000000000000F03F0000000000000840000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Calculate the envelope rectangle geometry object of LINESTRING(0 0, 1 3).", "source": "original", "new_id": 421}
{"id": 75, "function": "ST_Envelope", "question": "输出LINESTRING(0 0, 1 3)的包络矩形WKT字符串。", "sql": "SELECT ST_AsText(ST_Envelope('LINESTRING(0 0, 1 3)'::geometry));", "execution_result": [["POLYGON((0 0,0 3,1 3,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for LINESTRING(0 0, 1 3).", "source": "original", "new_id": 422}
{"id": 75, "function": "ST_Envelope", "question": "以文本格式返回线段几何LINESTRING(0 0, 1 3)的最小边界矩形坐标。", "sql": "SELECT ST_AsText(ST_Envelope('LINESTRING(0 0, 1 3)'::geometry));", "execution_result": [["POLYGON((0 0,0 3,1 3,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for LINESTRING(0 0, 1 3).", "source": "original", "new_id": 423}
{"id": 75, "function": "ST_Envelope", "question": "输出LINESTRING(0 0, 1 3)的最小边界矩形（MBR）的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Envelope('LINESTRING(0 0, 1 3)'::geometry));", "execution_result": [["POLYGON((0 0,0 3,1 3,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for LINESTRING(0 0, 1 3).", "source": "original", "new_id": 424}
{"id": 76, "function": "ST_Envelope", "question": "计算POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))的边界框并输出WKT格式。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000001 1,1.0000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0)), with precision up to 7 decimal places.", "source": "original", "new_id": 425}
{"id": 76, "function": "ST_Envelope", "question": "输出由坐标点(0 0)、(0 1)、(1.0000001 1)、(1.0000001 0)构成的多边形的包络矩形文本。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000001 1,1.0000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0)), with precision up to 7 decimal places.", "source": "original", "new_id": 426}
{"id": 76, "function": "ST_Envelope", "question": "计算并返回POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))这个多边形的最小外接矩形，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000001 1,1.0000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0)), with precision up to 7 decimal places.", "source": "original", "new_id": 427}
{"id": 76, "function": "ST_Envelope", "question": "输出多边形几何对象POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))边界框的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000001 1,1.0000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0)), with precision up to 7 decimal places.", "source": "original", "new_id": 428}
{"id": 76, "function": "ST_Envelope", "question": "以文本格式返回多边形POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))的最小外接矩形坐标。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000001 1,1.0000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0)), with precision up to 7 decimal places.", "source": "original", "new_id": 429}
{"id": 76, "function": "ST_Envelope", "question": "输出POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))的最小外接矩形（MBR）的WKT字符串表示，要求精确到小数点后7位。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000001 1,1.0000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0)), with precision up to 7 decimal places.", "source": "original", "new_id": 430}
{"id": 77, "function": "ST_Envelope", "question": "计算POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))的最小边界矩形，输出WKT格式。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000000001 1,1.0000000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0)), displaying coordinate values precisely.", "source": "original", "new_id": 431}
{"id": 77, "function": "ST_Envelope", "question": "输出坐标为(0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0)的多边形的外包矩形文本表示。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000000001 1,1.0000000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0)), displaying coordinate values precisely.", "source": "original", "new_id": 432}
{"id": 77, "function": "ST_Envelope", "question": "计算由顶点坐标分别为(0 0)、(0 1)、(1.0000000001 1)、(1.0000000001 0)的闭合多边形POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))的最小外接矩形，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000000001 1,1.0000000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0)), displaying coordinate values precisely.", "source": "original", "new_id": 433}
{"id": 77, "function": "ST_Envelope", "question": "输出多边形POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))的最小边界矩形的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000000001 1,1.0000000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0)), displaying coordinate values precisely.", "source": "original", "new_id": 434}
{"id": 77, "function": "ST_Envelope", "question": "以Well-Known Text格式返回几何对象POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))的外包矩形。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000000001 1,1.0000000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0)), displaying coordinate values precisely.", "source": "original", "new_id": 435}
{"id": 77, "function": "ST_Envelope", "question": "输出POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))的最小外接矩形（MBR）的WKT字符串表示，要求精确显示坐标值。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000000001 1,1.0000000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (MBR) for POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0)), displaying coordinate values precisely.", "source": "original", "new_id": 436}
{"id": 78, "function": "ST_Envelope", "question": "计算LINESTRING(55 75,125 150)和坐标为(20,80)的点合并后的集合的最小外包矩形，输出为WKT格式。", "sql": "SELECT ST_AsText(ST_Envelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 75,20 150,125 150,125 75,20 75))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (Envelope) formed by merging LINESTRING(55 75,125 150) and POINT(20 80).", "source": "original", "new_id": 437}
{"id": 78, "function": "ST_Envelope", "question": "将坐标为(55,75)到(125,150)的线段与坐标为(20,80)的点合并后，求其外包矩形的文本表示。", "sql": "SELECT ST_AsText(ST_Envelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 75,20 150,125 150,125 75,20 75))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (Envelope) formed by merging LINESTRING(55 75,125 150) and POINT(20 80).", "source": "original", "new_id": 438}
{"id": 78, "function": "ST_Envelope", "question": "将LINESTRING(55 75,125 150)这条折线和POINT(20 80)这个点合并成几何集合，计算该集合的最小外包矩形，并以WKT格式输出结果，输出列别名为wktenv。", "sql": "SELECT ST_AsText(ST_Envelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 75,20 150,125 150,125 75,20 75))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (Envelope) formed by merging LINESTRING(55 75,125 150) and POINT(20 80).", "source": "original", "new_id": 439}
{"id": 78, "function": "ST_Envelope", "question": "输出线对象LINESTRING(55 75,125 150)和点对象(20,80)合并后的集合的最小外包矩形的WKT字符串。", "sql": "SELECT ST_AsText(ST_Envelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 75,20 150,125 150,125 75,20 75))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (Envelope) formed by merging LINESTRING(55 75,125 150) and POINT(20 80).", "source": "original", "new_id": 440}
{"id": 78, "function": "ST_Envelope", "question": "以Well-Known Text格式返回线对象(LINESTRING(55 75,125 150))和点对象(20,80)合并后的集合(Collection)的外包矩形。", "sql": "SELECT ST_AsText(ST_Envelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 75,20 150,125 150,125 75,20 75))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (Envelope) formed by merging LINESTRING(55 75,125 150) and POINT(20 80).", "source": "original", "new_id": 441}
{"id": 78, "function": "ST_Envelope", "question": "输出LINESTRING(55 75,125 150)和POINT(20 80)合并后的最小外包矩形（Envelope）的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Envelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 75,20 150,125 150,125 75,20 75))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the minimum bounding rectangle (Envelope) formed by merging LINESTRING(55 75,125 150) and POINT(20 80).", "source": "original", "new_id": 442}
{"id": 79, "function": "ST_ExteriorRing", "question": "从POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))这个三维多边形中提取外环线，输出为EWKT格式。", "sql": "SELECT ST_AsEWKT( ST_ExteriorRing( ST_GeomFromEWKT('POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))') ) );", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 1,1 1 1,0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the exterior boundary ring of the 3D polygon POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1)), including Z-coordinate values.", "source": "original", "new_id": 443}
{"id": 79, "function": "ST_ExteriorRing", "question": "将包含顶点(0,0,1)、(1,1,1)、(1,2,1)、(1,1,1)、(0,0,1)的三维多边形转换为外环线并输出EWKT。", "sql": "SELECT ST_AsEWKT( ST_ExteriorRing( ST_GeomFromEWKT('POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))') ) );", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 1,1 1 1,0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the exterior boundary ring of the 3D polygon POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1)), including Z-coordinate values.", "source": "original", "new_id": 444}
{"id": 79, "function": "ST_ExteriorRing", "question": "从三维多边形POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))中提取其外部环线，并以EWKT格式输出结果。该多边形由5个三维点构成闭合路径，所有点的Z坐标均为1。", "sql": "SELECT ST_AsEWKT( ST_ExteriorRing( ST_GeomFromEWKT('POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))') ) );", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 1,1 1 1,0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the exterior boundary ring of the 3D polygon POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1)), including Z-coordinate values.", "source": "original", "new_id": 445}
{"id": 79, "function": "ST_ExteriorRing", "question": "输出三维多边形POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))外环线的扩展WKT字符串表示。", "sql": "SELECT ST_AsEWKT( ST_ExteriorRing( ST_GeomFromEWKT('POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))') ) );", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 1,1 1 1,0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the exterior boundary ring of the 3D polygon POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1)), including Z-coordinate values.", "source": "original", "new_id": 446}
{"id": 79, "function": "ST_ExteriorRing", "question": "输出三维多边形POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))的外边界环的EWKT字符串表示，要求包含Z坐标值。", "sql": "SELECT ST_AsEWKT( ST_ExteriorRing( ST_GeomFromEWKT('POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))') ) );", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 1,1 1 1,0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the exterior boundary ring of the 3D polygon POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1)), including Z-coordinate values.", "source": "original", "new_id": 447}
{"id": 79, "function": "ST_ExteriorRing", "question": "输出三维多边形POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))的外边界环的EWKT字符串表示，要求包含Z坐标值。", "sql": "SELECT ST_AsEWKT( ST_ExteriorRing( ST_GeomFromEWKT('POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))') ) );", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 1,1 1 1,0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the exterior boundary ring of the 3D polygon POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1)), including Z-coordinate values.", "source": "original", "new_id": 448}
{"id": 80, "function": "ST_GeometryN", "question": "从TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )中提取第2个三角形面片，输出EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(geom,2)) AS wkt \n   FROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the second geometric element extracted from a 3D irregular triangular network TIN (composed of two triangular faces: the first face with vertices 0 0 0, 0 0 1, 0 1 0, and the second face with vertices 0 0 0, 0 1 0, 1 1 0).", "source": "original", "new_id": 449}
{"id": 80, "function": "ST_GeometryN", "question": "将三维坐标(0 0 0, 0 0 1, 0 1 0)和(0 0 0, 0 1 0, 1 1 0)组成的TIN对象的第二个面片转换为EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(geom,2)) AS wkt \n   FROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the second geometric element extracted from a 3D irregular triangular network TIN (composed of two triangular faces: the first face with vertices 0 0 0, 0 0 1, 0 1 0, and the second face with vertices 0 0 0, 0 1 0, 1 1 0).", "source": "original", "new_id": 450}
{"id": 80, "function": "ST_GeometryN", "question": "使用ST_GeometryN函数获取随机构建的TIN对象TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )的第二个几何元素。", "sql": "SELECT ST_GeometryN(geom,2) \nFROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["011100008001000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000F03F0000000000000000000000000000F03F000000000000F03F0000000000000000000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Use the ST_GeometryN function to retrieve the second geometric element of the randomly constructed TIN object TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) ).", "source": "original", "new_id": 451}
{"id": 80, "function": "ST_GeometryN", "question": "输出TIN几何对象TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )中第二个面片的EWKT格式空间描述。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(geom,2)) AS wkt \n   FROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the second geometric element extracted from a 3D irregular triangular network TIN (composed of two triangular faces: the first face with vertices 0 0 0, 0 0 1, 0 1 0, and the second face with vertices 0 0 0, 0 1 0, 1 1 0).", "source": "original", "new_id": 452}
{"id": 80, "function": "ST_GeometryN", "question": "以包含SRID的WKT字符串形式返回一个三维三角网TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )的第二个三角形面片。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(geom,2)) AS wkt \n   FROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the second geometric element extracted from a 3D irregular triangular network TIN (composed of two triangular faces: the first face with vertices 0 0 0, 0 0 1, 0 1 0, and the second face with vertices 0 0 0, 0 1 0, 1 1 0).", "source": "original", "new_id": 453}
{"id": 80, "function": "ST_GeometryN", "question": "输出从三维不规则三角网TIN（由两个三角形面组成：第一个面顶点为0 0 0、0 0 1、0 1 0，第二个面顶点为0 0 0、0 1 0、1 1 0）中提取的第二个几何元素的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(geom,2)) AS wkt \n   FROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the second geometric element extracted from a 3D irregular triangular network TIN (composed of two triangular faces: the first face with vertices 0 0 0, 0 0 1, 0 1 0, and the second face with vertices 0 0 0, 0 1 0, 1 1 0).", "source": "original", "new_id": 454}
{"id": 81, "function": "ST_GeometryN", "question": "从POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )这个多面体表面中提取第3个面，输出EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(p_geom,3)) AS geom_ewkt \n    FROM (SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )') AS p_geom ) AS a;", "execution_result": [["POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the 3rd geometric element of the POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) ) polyhedral surface.", "source": "original", "new_id": 455}
{"id": 81, "function": "ST_GeometryN", "question": "将包含6个三维多边形面的POLYHEDRALSURFACE几何体POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )的第3个面转换为EWKT格式输出。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(p_geom,3)) AS geom_ewkt \n    FROM (SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )') AS p_geom ) AS a;", "execution_result": [["POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the 3rd geometric element of the POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) ) polyhedral surface.", "source": "original", "new_id": 456}
{"id": 81, "function": "ST_GeometryN", "question": "从POLYHEDRALSURFACE对象（由6个三维多边形面组成，具体坐标依次为：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0))、((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))、((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0))、((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0))、((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0))、((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))）中，使用ST_GeometryN函数提取第3个元素（索引从1开始），并通过ST_AsEWKT函数将其转换为扩展WKT格式输出。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(p_geom,3)) AS geom_ewkt \n    FROM (SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )') AS p_geom ) AS a;", "execution_result": [["POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the 3rd geometric element of the POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) ) polyhedral surface.", "source": "original", "new_id": 457}
{"id": 81, "function": "ST_GeometryN", "question": "输出多面体表面POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )第3个组成面的EWKT格式字符串表示。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(p_geom,3)) AS geom_ewkt \n    FROM (SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )') AS p_geom ) AS a;", "execution_result": [["POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the 3rd geometric element of the POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) ) polyhedral surface.", "source": "original", "new_id": 458}
{"id": 81, "function": "ST_GeometryN", "question": "以包含SRID信息的扩展WKT文本格式返回随机构建的三维几何体POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )的第三个组成面。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(p_geom,3)) AS geom_ewkt \n    FROM (SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )') AS p_geom ) AS a;", "execution_result": [["POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the 3rd geometric element of the POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) ) polyhedral surface.", "source": "original", "new_id": 459}
{"id": 81, "function": "ST_GeometryN", "question": "输出POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )这个多面体表面的第3个几何元素的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(p_geom,3)) AS geom_ewkt \n    FROM (SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )') AS p_geom ) AS a;", "execution_result": [["POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the 3rd geometric element of the POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) ) polyhedral surface.", "source": "original", "new_id": 460}
{"id": 82, "function": "ST_GeometryN", "question": "从MULTIPOINT((1 2 7),(3 4 7),(5 6 7),(8 9 10))和MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5),(10 11,12 11))这两个几何对象中，提取每个子几何元素并输出序号和EWKT格式，最多提取100个。", "sql": "SELECT n, ST_AsEWKT(ST_GeometryN(geom, n)) AS geomewkt \nFROM ( VALUES (ST_GeomFromEWKT('MULTIPOINT((1 2 7), (3 4 7), (5 6 7), (8 9 10))') ), \n       ( ST_GeomFromEWKT('MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5, 3.5 3.5), (10 11, 12 11))') ) )AS foo(geom)  \nCROSS JOIN generate_series(1,100) n\nWHERE n <= ST_NumGeometries(geom);", "execution_result": [[1, "POINT(1 2 7)"], [1, "CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5)"], [2, "POINT(3 4 7)"], [2, "LINESTRING(10 11,12 11)"], [3, "POINT(5 6 7)"], [4, "POINT(8 9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result set containing a sequence number and EWKT-formatted geometries, where the geometries are from two composite geometry objects: the first is a MULTIPOINT containing four 3D points (1 2 7), (3 4 7), (5 6 7), (8 9 10), and the second is a MULTICURVE containing a circular arc (composed of points 2.5 2.5, 4.5 2.5, 3.5 3.5) and a straight line segment (composed of points 10 11, 12 11). Generate one record per sub-geometry within each composite geometry object, ensuring the sequence number does not exceed the total count of sub-geometries.", "source": "original", "new_id": 461}
{"id": 82, "function": "ST_GeometryN", "question": "对于给定的三维多点集合(包含(1 2 7),(3 4 7),(5 6 7),(8 9 10))和复合曲线(包含圆弧(2.5 2.5→4.5 2.5→3.5 3.5)和线段(10 11→12 11))，返回每个子几何的序号和扩展文本（EWKT）表示。", "sql": "SELECT n, ST_AsEWKT(ST_GeometryN(geom, n)) AS geomewkt \nFROM ( VALUES (ST_GeomFromEWKT('MULTIPOINT((1 2 7), (3 4 7), (5 6 7), (8 9 10))') ), \n       ( ST_GeomFromEWKT('MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5, 3.5 3.5), (10 11, 12 11))') ) )AS foo(geom)  \nCROSS JOIN generate_series(1,100) n\nWHERE n <= ST_NumGeometries(geom);", "execution_result": [[1, "POINT(1 2 7)"], [1, "CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5)"], [2, "POINT(3 4 7)"], [2, "LINESTRING(10 11,12 11)"], [3, "POINT(5 6 7)"], [4, "POINT(8 9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result set containing a sequence number and EWKT-formatted geometries, where the geometries are from two composite geometry objects: the first is a MULTIPOINT containing four 3D points (1 2 7), (3 4 7), (5 6 7), (8 9 10), and the second is a MULTICURVE containing a circular arc (composed of points 2.5 2.5, 4.5 2.5, 3.5 3.5) and a straight line segment (composed of points 10 11, 12 11). Generate one record per sub-geometry within each composite geometry object, ensuring the sequence number does not exceed the total count of sub-geometries.", "source": "original", "new_id": 462}
{"id": 82, "function": "ST_GeometryN", "question": "对于给定的两个几何对象：第一个是包含四个三维点的MULTIPOINT，坐标分别为(1 2 7)、(3 4 7)、(5 6 7)和(8 9 10)；第二个是包含两条曲线的MULTICURVE，第一条是经过点(2.5 2.5)、(4.5 2.5)、(3.5 3.5)的CIRCULARSTRING圆弧线，第二条是从(10 11)到(12 11)的直线段。请使用ST_GeometryN函数依次提取每个子几何对象（n从1开始编号），并用ST_AsEWKT函数输出其EWKT表示，其中n的取值范围不超过每个几何对象的子几何数量（由ST_NumGeometries确定），最大尝试提取100个子几何（通过generate_series(1,100)实现）。", "sql": "SELECT n, ST_AsEWKT(ST_GeometryN(geom, n)) AS geomewkt \nFROM ( VALUES (ST_GeomFromEWKT('MULTIPOINT((1 2 7), (3 4 7), (5 6 7), (8 9 10))') ), \n       ( ST_GeomFromEWKT('MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5, 3.5 3.5), (10 11, 12 11))') ) )AS foo(geom)  \nCROSS JOIN generate_series(1,100) n\nWHERE n <= ST_NumGeometries(geom);", "execution_result": [[1, "POINT(1 2 7)"], [1, "CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5)"], [2, "POINT(3 4 7)"], [2, "LINESTRING(10 11,12 11)"], [3, "POINT(5 6 7)"], [4, "POINT(8 9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result set containing a sequence number and EWKT-formatted geometries, where the geometries are from two composite geometry objects: the first is a MULTIPOINT containing four 3D points (1 2 7), (3 4 7), (5 6 7), (8 9 10), and the second is a MULTICURVE containing a circular arc (composed of points 2.5 2.5, 4.5 2.5, 3.5 3.5) and a straight line segment (composed of points 10 11, 12 11). Generate one record per sub-geometry within each composite geometry object, ensuring the sequence number does not exceed the total count of sub-geometries.", "source": "original", "new_id": 463}
{"id": 82, "function": "ST_GeometryN", "question": "输出复合几何对象(包含多点集合MULTIPOINT((1 2 7), (3 4 7), (5 6 7), (8 9 10))和复合曲线MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5, 3.5 3.5), (10 11, 12 11)))中每个子元素的序号和扩展WKT格式字符串，包含Z坐标值。", "sql": "SELECT n, ST_AsEWKT(ST_GeometryN(geom, n)) AS geomewkt \nFROM ( VALUES (ST_GeomFromEWKT('MULTIPOINT((1 2 7), (3 4 7), (5 6 7), (8 9 10))') ), \n       ( ST_GeomFromEWKT('MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5, 3.5 3.5), (10 11, 12 11))') ) )AS foo(geom)  \nCROSS JOIN generate_series(1,100) n\nWHERE n <= ST_NumGeometries(geom);", "execution_result": [[1, "POINT(1 2 7)"], [1, "CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5)"], [2, "POINT(3 4 7)"], [2, "LINESTRING(10 11,12 11)"], [3, "POINT(5 6 7)"], [4, "POINT(8 9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result set containing a sequence number and EWKT-formatted geometries, where the geometries are from two composite geometry objects: the first is a MULTIPOINT containing four 3D points (1 2 7), (3 4 7), (5 6 7), (8 9 10), and the second is a MULTICURVE containing a circular arc (composed of points 2.5 2.5, 4.5 2.5, 3.5 3.5) and a straight line segment (composed of points 10 11, 12 11). Generate one record per sub-geometry within each composite geometry object, ensuring the sequence number does not exceed the total count of sub-geometries.", "source": "original", "new_id": 464}
{"id": 82, "function": "ST_GeometryN", "question": "返回MULTIPOINT((1 2 7),(3 4 7),(5 6 7),(8 9 10))和MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5),(10 11,12 11))中每个元素的详细文本表示，包括三维坐标和几何类型信息。", "sql": "SELECT n, ST_AsEWKT(ST_GeometryN(geom, n)) AS geomewkt \nFROM ( VALUES (ST_GeomFromEWKT('MULTIPOINT((1 2 7), (3 4 7), (5 6 7), (8 9 10))') ), \n       ( ST_GeomFromEWKT('MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5, 3.5 3.5), (10 11, 12 11))') ) )AS foo(geom)  \nCROSS JOIN generate_series(1,100) n\nWHERE n <= ST_NumGeometries(geom);", "execution_result": [[1, "POINT(1 2 7)"], [1, "CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5)"], [2, "POINT(3 4 7)"], [2, "LINESTRING(10 11,12 11)"], [3, "POINT(5 6 7)"], [4, "POINT(8 9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result set containing a sequence number and EWKT-formatted geometries, where the geometries are from two composite geometry objects: the first is a MULTIPOINT containing four 3D points (1 2 7), (3 4 7), (5 6 7), (8 9 10), and the second is a MULTICURVE containing a circular arc (composed of points 2.5 2.5, 4.5 2.5, 3.5 3.5) and a straight line segment (composed of points 10 11, 12 11). Generate one record per sub-geometry within each composite geometry object, ensuring the sequence number does not exceed the total count of sub-geometries.", "source": "original", "new_id": 465}
{"id": 82, "function": "ST_GeometryN", "question": "输出一个包含序号和EWKT格式几何体的结果集，其中几何体分别来自两个复合几何对象：第一个是包含四个三维点(1 2 7)、(3 4 7)、(5 6 7)、(8 9 10)的MULTIPOINT，第二个是包含一个圆弧线(由点2.5 2.5、4.5 2.5、3.5 3.5组成)和一条直线段(由点10 11、12 11组成)的MULTICURVE，要求为每个复合几何对象中的每个子几何体生成一行记录，并确保序号不超过子几何体的总数。", "sql": "SELECT n, ST_AsEWKT(ST_GeometryN(geom, n)) AS geomewkt \nFROM ( VALUES (ST_GeomFromEWKT('MULTIPOINT((1 2 7), (3 4 7), (5 6 7), (8 9 10))') ), \n       ( ST_GeomFromEWKT('MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5, 3.5 3.5), (10 11, 12 11))') ) )AS foo(geom)  \nCROSS JOIN generate_series(1,100) n\nWHERE n <= ST_NumGeometries(geom);", "execution_result": [[1, "POINT(1 2 7)"], [1, "CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5)"], [2, "POINT(3 4 7)"], [2, "LINESTRING(10 11,12 11)"], [3, "POINT(5 6 7)"], [4, "POINT(8 9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result set containing a sequence number and EWKT-formatted geometries, where the geometries are from two composite geometry objects: the first is a MULTIPOINT containing four 3D points (1 2 7), (3 4 7), (5 6 7), (8 9 10), and the second is a MULTICURVE containing a circular arc (composed of points 2.5 2.5, 4.5 2.5, 3.5 3.5) and a straight line segment (composed of points 10 11, 12 11). Generate one record per sub-geometry within each composite geometry object, ensuring the sequence number does not exceed the total count of sub-geometries.", "source": "original", "new_id": 466}
{"id": 83, "function": "ST_GeometryType", "question": "查询由坐标点(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)构成的LINESTRING线段的几何类型名称。", "sql": "SELECT ST_GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["ST_LineString"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "When the closed linestring LINESTRING(77.29 29.07 start point, 77.42 29.26 second point, 77.27 29.31 third point, 77.29 29.07 end point) is used as input, what specific geometry type text does the ST_GeometryType function return?", "source": "original", "new_id": 467}
{"id": 83, "function": "ST_GeometryType", "question": "查询由坐标点序列77.29 29.07、77.42 29.26、77.27 29.31、77.29 29.07构成的LINESTRING几何对象的类型名称。", "sql": "SELECT ST_GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["ST_LineString"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "When the closed linestring LINESTRING(77.29 29.07 start point, 77.42 29.26 second point, 77.27 29.31 third point, 77.29 29.07 end point) is used as input, what specific geometry type text does the ST_GeometryType function return?", "source": "original", "new_id": 468}
{"id": 83, "function": "ST_GeometryType", "question": "查询由坐标点(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)构成的LINESTRING线段的几何类型名称。", "sql": "SELECT ST_GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["ST_LineString"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "When the closed linestring LINESTRING(77.29 29.07 start point, 77.42 29.26 second point, 77.27 29.31 third point, 77.29 29.07 end point) is used as input, what specific geometry type text does the ST_GeometryType function return?", "source": "original", "new_id": 469}
{"id": 83, "function": "ST_GeometryType", "question": "输出由点坐标序列(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)构成的LINESTRING几何对象的类型名称。", "sql": "SELECT ST_GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["ST_LineString"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "When the closed linestring LINESTRING(77.29 29.07 start point, 77.42 29.26 second point, 77.27 29.31 third point, 77.29 29.07 end point) is used as input, what specific geometry type text does the ST_GeometryType function return?", "source": "original", "new_id": 470}
{"id": 83, "function": "ST_GeometryType", "question": "执行ST_GeometryType函数后，返回LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)几何对象的官方类型标识字符串。", "sql": "SELECT ST_GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["ST_LineString"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "When the closed linestring LINESTRING(77.29 29.07 start point, 77.42 29.26 second point, 77.27 29.31 third point, 77.29 29.07 end point) is used as input, what specific geometry type text does the ST_GeometryType function return?", "source": "original", "new_id": 471}
{"id": 83, "function": "ST_GeometryType", "question": "将闭合折线LINESTRING(77.29 29.07起始点,77.42 29.26第二点,77.27 29.31第三点,77.29 29.07终点)作为输入时，ST_GeometryType函数返回的具体几何类型文本是什么？", "sql": "SELECT ST_GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["ST_LineString"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "When the closed linestring LINESTRING(77.29 29.07 start point, 77.42 29.26 second point, 77.27 29.31 third point, 77.29 29.07 end point) is used as input, what specific geometry type text does the ST_GeometryType function return?", "source": "original", "new_id": 472}
{"id": 84, "function": "ST_GeometryType", "question": "检测由TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )定义的几何对象的类型。", "sql": "SELECT ST_GeometryType(geom) AS result \nFROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["ST_Tin"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric type name of a TIN object (containing two triangular patches: the first patch has vertices at 0 0 0, 0 0 1, 0 1 0, and the second patch has vertices at 0 0 0, 0 1 0, 1 1 0), with the result column named 'result'.", "source": "original", "new_id": 473}
{"id": 84, "function": "ST_GeometryType", "question": "对包含两个三角形面片（坐标分别为0 0 0/0 0 1/0 1 0和0 0 0/0 1 0/1 1 0）的TIN几何体执行类型检测。", "sql": "SELECT ST_GeometryType(geom) AS result \nFROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["ST_Tin"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric type name of a TIN object (containing two triangular patches: the first patch has vertices at 0 0 0, 0 0 1, 0 1 0, and the second patch has vertices at 0 0 0, 0 1 0, 1 1 0), with the result column named 'result'.", "source": "original", "new_id": 474}
{"id": 84, "function": "ST_GeometryType", "question": "检测EWKT定义的TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )对象的类型。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )'));", "execution_result": [["ST_Tin"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check the type of the TIN object defined by EWKT ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) ).", "source": "original", "new_id": 475}
{"id": 84, "function": "ST_GeometryType", "question": "以文本形式返回随机生成的TIN几何对象TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )的类型标识字符串。", "sql": "SELECT ST_GeometryType(geom) AS result \nFROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["ST_Tin"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric type name of a TIN object (containing two triangular patches: the first patch has vertices at 0 0 0, 0 0 1, 0 1 0, and the second patch has vertices at 0 0 0, 0 1 0, 1 1 0), with the result column named 'result'.", "source": "original", "new_id": 476}
{"id": 84, "function": "ST_GeometryType", "question": "输出创建的三维TIN几何体TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )在PostGIS系统中的标准类型名称。", "sql": "SELECT ST_GeometryType(geom) AS result \nFROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["ST_Tin"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric type name of a TIN object (containing two triangular patches: the first patch has vertices at 0 0 0, 0 0 1, 0 1 0, and the second patch has vertices at 0 0 0, 0 1 0, 1 1 0), with the result column named 'result'.", "source": "original", "new_id": 477}
{"id": 84, "function": "ST_GeometryType", "question": "输出由TIN对象（包含两个三角形面片：第一个面片顶点为0 0 0、0 0 1、0 1 0，第二个面片顶点为0 0 0、0 1 0、1 1 0）的几何类型名称，结果列命名为result。", "sql": "SELECT ST_GeometryType(geom) AS result \nFROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["ST_Tin"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric type name of a TIN object (containing two triangular patches: the first patch has vertices at 0 0 0, 0 0 1, 0 1 0, and the second patch has vertices at 0 0 0, 0 1 0, 1 1 0), with the result column named 'result'.", "source": "original", "new_id": 478}
{"id": 85, "function": "ST_GeometryType", "question": "查询由6个面组成的POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )的几何类型。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific geometry type name of the POLYHEDRALSURFACE (composed of 6 faces, with vertex coordinates for each face as follows: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 479}
{"id": 85, "function": "ST_GeometryType", "question": "确定由坐标(0 0 0)到(1 1 1)范围内6个多边形面构成的多面体表面POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )的几何类型。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific geometry type name of the POLYHEDRALSURFACE (composed of 6 faces, with vertex coordinates for each face as follows: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 480}
{"id": 85, "function": "ST_GeometryType", "question": "使用ST_GeomFromEWKT函数解析这个POLYHEDRALSURFACE几何体：它由6个面组成，第一个面顶点为(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个面顶点为(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个面顶点为(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个面顶点为(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个面顶点为(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个面顶点为(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)，然后通过ST_GeometryType函数判断其几何类型。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific geometry type name of the POLYHEDRALSURFACE (composed of 6 faces, with vertex coordinates for each face as follows: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 481}
{"id": 85, "function": "ST_GeometryType", "question": "输出POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )几何对象的类型名称字符串。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific geometry type name of the POLYHEDRALSURFACE (composed of 6 faces, with vertex coordinates for each face as follows: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 482}
{"id": 85, "function": "ST_GeometryType", "question": "返回多面体表面几何POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )的类型分类结果。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific geometry type name of the POLYHEDRALSURFACE (composed of 6 faces, with vertex coordinates for each face as follows: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 483}
{"id": 85, "function": "ST_GeometryType", "question": "输出POLYHEDRALSURFACE几何体（由6个面组成，各面顶点坐标分别为：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))）的具体几何类型名称。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific geometry type name of the POLYHEDRALSURFACE (composed of 6 faces, with vertex coordinates for each face as follows: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))).", "source": "original", "new_id": 484}
{"id": 86, "function": "ST_HasArc", "question": "判断LINESTRING(1 2,3 4,5 6)和CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)合并后的几何集合是否含有弧线段。", "sql": "SELECT ST_HasArc(ST_Collect('LINESTRING(1 2, 3 4, 5 6)', 'CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result indicating whether the merged geometric object of LINESTRING(1 2, 3 4, 5 6) and CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6) contains circular arcs.", "source": "original", "new_id": 485}
{"id": 86, "function": "ST_HasArc", "question": "检查LINESTRING(1 2,3 4,5 6)直线与CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)圆弧合并后是否存在曲线。", "sql": "SELECT ST_HasArc(ST_Collect('LINESTRING(1 2, 3 4, 5 6)', 'CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result indicating whether the merged geometric object of LINESTRING(1 2, 3 4, 5 6) and CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6) contains circular arcs.", "source": "original", "new_id": 486}
{"id": 86, "function": "ST_HasArc", "question": "判断由LINESTRING(1 2, 3 4, 5 6)和CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)这两个几何对象合并后的集合中是否包含圆弧元素。其中LINESTRING的坐标序列为(1 2)到(3 4)到(5 6)，CIRCULARSTRING的坐标序列为(1 1)到(2 3)到(4 5)到(6 7)到(5 6)。", "sql": "SELECT ST_HasArc(ST_Collect('LINESTRING(1 2, 3 4, 5 6)', 'CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result indicating whether the merged geometric object of LINESTRING(1 2, 3 4, 5 6) and CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6) contains circular arcs.", "source": "original", "new_id": 487}
{"id": 86, "function": "ST_HasArc", "question": "输出布尔值表示LINESTRING(1 2,3 4,5 6)和CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)合并后的几何对象是否包含曲线段。", "sql": "SELECT ST_HasArc(ST_Collect('LINESTRING(1 2, 3 4, 5 6)', 'CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result indicating whether the merged geometric object of LINESTRING(1 2, 3 4, 5 6) and CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6) contains circular arcs.", "source": "original", "new_id": 488}
{"id": 86, "function": "ST_HasArc", "question": "输出布尔值判断由LINESTRING(1 2, 3 4, 5 6)和CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)合并而成的几何集合中是否包含圆弧元素。", "sql": "SELECT ST_HasArc(ST_Collect('LINESTRING(1 2, 3 4, 5 6)', 'CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result indicating whether the merged geometric object of LINESTRING(1 2, 3 4, 5 6) and CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6) contains circular arcs.", "source": "original", "new_id": 489}
{"id": 86, "function": "ST_HasArc", "question": "输出将LINESTRING(1 2, 3 4, 5 6)和CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)合并后的几何对象是否包含圆弧的布尔值结果。", "sql": "SELECT ST_HasArc(ST_Collect('LINESTRING(1 2, 3 4, 5 6)', 'CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result indicating whether the merged geometric object of LINESTRING(1 2, 3 4, 5 6) and CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6) contains circular arcs.", "source": "original", "new_id": 490}
{"id": 87, "function": "ST_InteriorRingN", "question": "以坐标(1,2)为中心创建20单位半径（3段/象限）和10单位半径（3段/象限）的两个缓冲区，合并后构建区域，提取第一个内环并输出WKT格式。", "sql": "SELECT ST_AsText(ST_InteriorRingN(geom, 1)) AS geom \nFROM (SELECT ST_BuildArea( ST_Collect(ST_Buffer(ST_Point(1,2), 20,3), ST_Buffer(ST_Point(1, 2), 10,3))) AS geom ) AS foo;", "execution_result": [["LINESTRING(11 2,9.660254037844384 7.000000000000004,5.999999999999993 10.66025403784439,1 12,-4.000000000000004 10.660254037844384,-7.660254037844389 6.999999999999997,-9 2,-7.660254037844386 -3.000000000000004,-3.999999999999998 -6.660254037844387,1 -8,6.000000000000001 -6.660254037844386,9.660254037844387 -2.999999999999999,11 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the first inner ring in the region constructed by two buffer polygons, where the buffers are created with POINT(1 2) as the center, radii of 20 and 10 meters, and a buffer approximation precision of 3 segments per quarter-circle.", "source": "original", "new_id": 491}
{"id": 87, "function": "ST_InteriorRingN", "question": "对ST_Point(1,2)分别创建20单位（3段/象限）和10单位（3段/象限）缓冲区，用ST_Collect合并后ST_BuildArea构建区域，用ST_InteriorRingN提取第1个内环，最后用ST_AsText输出。", "sql": "SELECT ST_AsText(ST_InteriorRingN(geom, 1)) AS geom \nFROM (SELECT ST_BuildArea( ST_Collect(ST_Buffer(ST_Point(1,2), 20,3), ST_Buffer(ST_Point(1, 2), 10,3))) AS geom ) AS foo;", "execution_result": [["LINESTRING(11 2,9.660254037844384 7.000000000000004,5.999999999999993 10.66025403784439,1 12,-4.000000000000004 10.660254037844384,-7.660254037844389 6.999999999999997,-9 2,-7.660254037844386 -3.000000000000004,-3.999999999999998 -6.660254037844387,1 -8,6.000000000000001 -6.660254037844386,9.660254037844387 -2.999999999999999,11 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the first inner ring in the region constructed by two buffer polygons, where the buffers are created with POINT(1 2) as the center, radii of 20 and 10 meters, and a buffer approximation precision of 3 segments per quarter-circle.", "source": "original", "new_id": 492}
{"id": 87, "function": "ST_InteriorRingN", "question": "首先创建两个缓冲区：第一个是以POINT(1 2)为中心点、半径为20、每四分之一圆用3段线段近似的圆形缓冲区；第二个是以相同中心点POINT(1 2)为中心、半径为10、同样用3段线段近似的圆形缓冲区。然后将这两个缓冲区合并为一个几何集合，再构建成面状几何体。最后提取该面状几何体的第1个内环（洞），并以WKT文本格式输出该内环的几何数据。", "sql": "SELECT ST_AsText(ST_InteriorRingN(geom, 1)) AS geom \nFROM (SELECT ST_BuildArea( ST_Collect(ST_Buffer(ST_Point(1,2), 20,3), ST_Buffer(ST_Point(1, 2), 10,3))) AS geom ) AS foo;", "execution_result": [["LINESTRING(11 2,9.660254037844384 7.000000000000004,5.999999999999993 10.66025403784439,1 12,-4.000000000000004 10.660254037844384,-7.660254037844389 6.999999999999997,-9 2,-7.660254037844386 -3.000000000000004,-3.999999999999998 -6.660254037844387,1 -8,6.000000000000001 -6.660254037844386,9.660254037844387 -2.999999999999999,11 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the first inner ring in the region constructed by two buffer polygons, where the buffers are created with POINT(1 2) as the center, radii of 20 and 10 meters, and a buffer approximation precision of 3 segments per quarter-circle.", "source": "original", "new_id": 493}
{"id": 87, "function": "ST_InteriorRingN", "question": "以文本形式返回由两个相同中心（1,2），不同半径（10和20）构建的缓冲区构建的多边形区域的第一个内环坐标。", "sql": "SELECT ST_AsText(ST_InteriorRingN(geom, 1)) AS geom \nFROM (SELECT ST_BuildArea( ST_Collect(ST_Buffer(ST_Point(1,2), 20,3), ST_Buffer(ST_Point(1, 2), 10,3))) AS geom ) AS foo;", "execution_result": [["LINESTRING(11 2,9.660254037844384 7.000000000000004,5.999999999999993 10.66025403784439,1 12,-4.000000000000004 10.660254037844384,-7.660254037844389 6.999999999999997,-9 2,-7.660254037844386 -3.000000000000004,-3.999999999999998 -6.660254037844387,1 -8,6.000000000000001 -6.660254037844386,9.660254037844387 -2.999999999999999,11 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the first inner ring in the region constructed by two buffer polygons, where the buffers are created with POINT(1 2) as the center, radii of 20 and 10 meters, and a buffer approximation precision of 3 segments per quarter-circle.", "source": "original", "new_id": 494}
{"id": 87, "function": "ST_InteriorRingN", "question": "输出由两个缓冲区多边形构建的区域中，第一个内环的WKT字符串。这两个缓冲区分别是以POINT(1 2)为中心、半径为20的缓冲区（使用3段弧线逼近）和以POINT(1 2)为中心、半径为10的缓冲区（使用3段弧线逼近）。", "sql": "SELECT ST_AsText(ST_InteriorRingN(geom, 1)) AS geom \nFROM (SELECT ST_BuildArea( ST_Collect(ST_Buffer(ST_Point(1,2), 20,3), ST_Buffer(ST_Point(1, 2), 10,3))) AS geom ) AS foo;", "execution_result": [["LINESTRING(11 2,9.660254037844384 7.000000000000004,5.999999999999993 10.66025403784439,1 12,-4.000000000000004 10.660254037844384,-7.660254037844389 6.999999999999997,-9 2,-7.660254037844386 -3.000000000000004,-3.999999999999998 -6.660254037844387,1 -8,6.000000000000001 -6.660254037844386,9.660254037844387 -2.999999999999999,11 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the first inner ring in the region constructed by two buffer polygons, where the buffers are created with POINT(1 2) as the center, radii of 20 and 10 meters, and a buffer approximation precision of 3 segments per quarter-circle.", "source": "original", "new_id": 495}
{"id": 87, "function": "ST_InteriorRingN", "question": "输出由两个缓冲区多边形构建的区域中第一个内环的WKT字符串，其中缓冲区分别以POINT(1 2)为中心、半径20和10米创建，且缓冲区逼近精度为3段/四分之一圆。", "sql": "SELECT ST_AsText(ST_InteriorRingN(geom, 1)) AS geom \nFROM (SELECT ST_BuildArea( ST_Collect(ST_Buffer(ST_Point(1,2), 20,3), ST_Buffer(ST_Point(1, 2), 10,3))) AS geom ) AS foo;", "execution_result": [["LINESTRING(11 2,9.660254037844384 7.000000000000004,5.999999999999993 10.66025403784439,1 12,-4.000000000000004 10.660254037844384,-7.660254037844389 6.999999999999997,-9 2,-7.660254037844386 -3.000000000000004,-3.999999999999998 -6.660254037844387,1 -8,6.000000000000001 -6.660254037844386,9.660254037844387 -2.999999999999999,11 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the first inner ring in the region constructed by two buffer polygons, where the buffers are created with POINT(1 2) as the center, radii of 20 and 10 meters, and a buffer approximation precision of 3 segments per quarter-circle.", "source": "original", "new_id": 496}
{"id": 88, "function": "ST_NumCurves", "question": "计算一个空的复合曲线（COMPOUNDCURVE EMPTY）中包含的曲线段数量。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE EMPTY');", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the empty compound curve type COMPOUNDCURVE EMPTY, execute the ST_NumCurves function to return the integer result of the number of curve segments contained in its geometric structure.", "source": "original", "new_id": 497}
{"id": 88, "function": "ST_NumCurves", "question": "计算空复合曲线'COMPOUNDCURVE EMPTY'中包含的曲线数量。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE EMPTY');", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the empty compound curve type COMPOUNDCURVE EMPTY, execute the ST_NumCurves function to return the integer result of the number of curve segments contained in its geometric structure.", "source": "original", "new_id": 498}
{"id": 88, "function": "ST_NumCurves", "question": "计算一个空的复合曲线（COMPOUNDCURVE EMPTY）中包含的曲线段数量。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE EMPTY');", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the empty compound curve type COMPOUNDCURVE EMPTY, execute the ST_NumCurves function to return the integer result of the number of curve segments contained in its geometric structure.", "source": "original", "new_id": 499}
{"id": 88, "function": "ST_NumCurves", "question": "输出空复合曲线对象COMPOUNDCURVE EMPTY中包含的曲线段数量。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE EMPTY');", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the empty compound curve type COMPOUNDCURVE EMPTY, execute the ST_NumCurves function to return the integer result of the number of curve segments contained in its geometric structure.", "source": "original", "new_id": 500}
{"id": 88, "function": "ST_NumCurves", "question": "计算并返回空复合曲线COMPOUNDCURVE EMPTY的曲线组成部分数量，结果以整数值形式输出。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE EMPTY');", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the empty compound curve type COMPOUNDCURVE EMPTY, execute the ST_NumCurves function to return the integer result of the number of curve segments contained in its geometric structure.", "source": "original", "new_id": 501}
{"id": 88, "function": "ST_NumCurves", "question": "对空复合曲线类型COMPOUNDCURVE EMPTY执行ST_NumCurves函数，返回其几何结构中包含的曲线段数量的整型结果。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE EMPTY');", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the empty compound curve type COMPOUNDCURVE EMPTY, execute the ST_NumCurves function to return the integer result of the number of curve segments contained in its geometric structure.", "source": "original", "new_id": 502}
{"id": 89, "function": "ST_NumCurves", "question": "计算COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )这个复合曲线包含多少段曲线。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of curve segments contained in the COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) ).", "source": "original", "new_id": 503}
{"id": 89, "function": "ST_NumCurves", "question": "统计由直线段(2 2, 2.5 2.5)、圆弧CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5)和折线段(3.5 3.5, 2.5 4.5, 3 5, 2 2)组成的复合曲线的曲线段数量。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of curve segments contained in the COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) ).", "source": "original", "new_id": 504}
{"id": 89, "function": "ST_NumCurves", "question": "计算复合曲线'COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )'中包含的曲线段数量，该复合曲线由三部分组成：第一部分是直线段(2 2, 2.5 2.5)，第二部分是圆弧段CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5)，第三部分是折线段(3.5 3.5, 2.5 4.5, 3 5, 2 2)。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of curve segments contained in the COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) ).", "source": "original", "new_id": 505}
{"id": 89, "function": "ST_NumCurves", "question": "返回复合曲线几何对象COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )的曲线段数量整数值。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of curve segments contained in the COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) ).", "source": "original", "new_id": 506}
{"id": 89, "function": "ST_NumCurves", "question": "输出COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )的曲线段数量。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of curve segments contained in the COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) ).", "source": "original", "new_id": 507}
{"id": 89, "function": "ST_NumCurves", "question": "输出复合曲线COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )中包含的曲线段数量。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of curve segments contained in the COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) ).", "source": "original", "new_id": 508}
{"id": 90, "function": "ST_CurveN", "question": "从COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )中提取索引为1的曲线元素，输出WKT格式。", "sql": "SELECT ST_AsText(ST_CurveN('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )', 1));", "execution_result": [["LINESTRING(2 2,2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the subcurve at index 1 (0-based) in the compound curve COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) ).", "source": "original", "new_id": 509}
{"id": 90, "function": "ST_CurveN", "question": "将复合曲线对象COMPOUNDCURVE(包含直线段(2 2, 2.5 2.5)、圆弧CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5)和折线段(3.5 3.5, 2.5 4.5, 3 5, 2 2))的第1条曲线转换为文本。", "sql": "SELECT ST_AsText(ST_CurveN('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )', 1));", "execution_result": [["LINESTRING(2 2,2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the subcurve at index 1 (0-based) in the compound curve COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) ).", "source": "original", "new_id": 510}
{"id": 90, "function": "ST_CurveN", "question": "从复合曲线'COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )'中提取索引为1的子曲线（即第二个子曲线CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5)），并将其转换为WKT格式输出。", "sql": "SELECT ST_AsText(ST_CurveN('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )', 1));", "execution_result": [["LINESTRING(2 2,2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the subcurve at index 1 (0-based) in the compound curve COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) ).", "source": "original", "new_id": 511}
{"id": 90, "function": "ST_CurveN", "question": "输出复合曲线COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )第一个组成元素的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_CurveN('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )', 1));", "execution_result": [["LINESTRING(2 2,2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the subcurve at index 1 (0-based) in the compound curve COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) ).", "source": "original", "new_id": 512}
{"id": 90, "function": "ST_CurveN", "question": "以文本格式返回空间复合曲线COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )中索引为1的曲线元素。", "sql": "SELECT ST_AsText(ST_CurveN('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )', 1));", "execution_result": [["LINESTRING(2 2,2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the subcurve at index 1 (0-based) in the compound curve COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) ).", "source": "original", "new_id": 513}
{"id": 90, "function": "ST_CurveN", "question": "输出复合曲线COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )中索引为1的子曲线（从0开始计数）的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_CurveN('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )', 1));", "execution_result": [["LINESTRING(2 2,2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the subcurve at index 1 (0-based) in the compound curve COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) ).", "source": "original", "new_id": 514}
{"id": 91, "function": "ST_IsClosed", "question": "检测由坐标点(0,0)和(1,1)构成的LINESTRING是否为闭合图形。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object is a closed line segment.", "source": "original", "new_id": 515}
{"id": 91, "function": "ST_IsClosed", "question": "判断LINESTRING(0 0, 1 1)这条折线是否首尾相连形成闭合。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object is a closed line segment.", "source": "original", "new_id": 516}
{"id": 91, "function": "ST_IsClosed", "question": "判断由坐标点(0 0)和(1 1)构成的LINESTRING几何对象是否是闭合的。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object is a closed line segment.", "source": "original", "new_id": 517}
{"id": 91, "function": "ST_IsClosed", "question": "返回LINESTRING(0 0, 1 1)闭合性检测的布尔值结果。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object is a closed line segment.", "source": "original", "new_id": 518}
{"id": 91, "function": "ST_IsClosed", "question": "输出关于LINESTRING(0 0, 1 1)是否闭合的逻辑判断值。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object is a closed line segment.", "source": "original", "new_id": 519}
{"id": 91, "function": "ST_IsClosed", "question": "输出LINESTRING(0 0, 1 1)几何对象是否为闭合线段的布尔判断结果。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object is a closed line segment.", "source": "original", "new_id": 520}
{"id": 92, "function": "ST_IsClosed", "question": "检查由点(0 0)、(0 1)、(1 1)、(0 0)组成的折线是否闭合。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 0 1, 1 1, 0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 0 1, 1 1, 0 0) geometry object is a closed line segment.", "source": "original", "new_id": 521}
{"id": 92, "function": "ST_IsClosed", "question": "判断LINESTRING(0 0, 0 1, 1 1, 0 0)这个几何对象是否是闭合的。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 0 1, 1 1, 0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 0 1, 1 1, 0 0) geometry object is a closed line segment.", "source": "original", "new_id": 522}
{"id": 92, "function": "ST_IsClosed", "question": "判断由坐标点(0 0)、(0 1)、(1 1)、(0 0)依次连接构成的LINESTRING几何对象是否闭合（首尾点坐标相同）。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 0 1, 1 1, 0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 0 1, 1 1, 0 0) geometry object is a closed line segment.", "source": "original", "new_id": 523}
{"id": 92, "function": "ST_IsClosed", "question": "返回布尔值表示折线LINESTRING(0 0, 0 1, 1 1, 0 0)是否闭合。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 0 1, 1 1, 0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 0 1, 1 1, 0 0) geometry object is a closed line segment.", "source": "original", "new_id": 524}
{"id": 92, "function": "ST_IsClosed", "question": "输出true或false表示给定折线LINESTRING(0 0, 0 1, 1 1, 0 0)的闭合状态。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 0 1, 1 1, 0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 0 1, 1 1, 0 0) geometry object is a closed line segment.", "source": "original", "new_id": 525}
{"id": 92, "function": "ST_IsClosed", "question": "输出LINESTRING(0 0, 0 1, 1 1, 0 0)几何对象是否为闭合线段的布尔判断结果。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 0 1, 1 1, 0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 0 1, 1 1, 0 0) geometry object is a closed line segment.", "source": "original", "new_id": 526}
{"id": 93, "function": "ST_IsClosed", "question": "检测由两条线段组成的多线串MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))是否闭合。", "sql": "SELECT ST_IsClosed('MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1)) is a closed linestring.", "source": "original", "new_id": 527}
{"id": 93, "function": "ST_IsClosed", "question": "判断包含线段(0 0, 0 1, 1 1, 0 0)和(0 0, 1 1)的多线串是否闭合。", "sql": "SELECT ST_IsClosed('MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1)) is a closed linestring.", "source": "original", "new_id": 528}
{"id": 93, "function": "ST_IsClosed", "question": "判断由两条线段组成的多线段是否闭合，第一条线段由坐标点(0 0)、(0 1)、(1 1)、(0 0)构成，第二条线段由坐标点(0 0)、(1 1)构成。", "sql": "SELECT ST_IsClosed('MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1)) is a closed linestring.", "source": "original", "new_id": 529}
{"id": 93, "function": "ST_IsClosed", "question": "输出多线串MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))的闭合性检测结果（布尔值）。", "sql": "SELECT ST_IsClosed('MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1)) is a closed linestring.", "source": "original", "new_id": 530}
{"id": 93, "function": "ST_IsClosed", "question": "返回由(0 0, 0 1, 1 1, 0 0)和(0 0, 1 1)组成的多线串是否闭合的布尔判断结果。", "sql": "SELECT ST_IsClosed('MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1)) is a closed linestring.", "source": "original", "new_id": 531}
{"id": 93, "function": "ST_IsClosed", "question": "输出判断MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))是否为闭合线串的布尔值结果。", "sql": "SELECT ST_IsClosed('MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1)) is a closed linestring.", "source": "original", "new_id": 532}
{"id": 94, "function": "ST_IsClosed", "question": "检测坐标为(0,0)的二维点对象是否为闭合图形。", "sql": "SELECT ST_IsClosed('POINT(0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 2D point POINT(0 0) is a closed geometry.", "source": "original", "new_id": 533}
{"id": 94, "function": "ST_IsClosed", "question": "判断POINT(0 0)这个几何对象是否闭合。", "sql": "SELECT ST_IsClosed('POINT(0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 2D point POINT(0 0) is a closed geometry.", "source": "original", "new_id": 534}
{"id": 94, "function": "ST_IsClosed", "question": "判断几何对象POINT(0 0)是否闭合。", "sql": "SELECT ST_IsClosed('POINT(0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 2D point POINT(0 0) is a closed geometry.", "source": "original", "new_id": 535}
{"id": 94, "function": "ST_IsClosed", "question": "返回布尔值表示POINT(0 0)是否为闭合图形。", "sql": "SELECT ST_IsClosed('POINT(0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 2D point POINT(0 0) is a closed geometry.", "source": "original", "new_id": 536}
{"id": 94, "function": "ST_IsClosed", "question": "输出检测结果，判断给定点对象POINT(0 0)是否闭合。", "sql": "SELECT ST_IsClosed('POINT(0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 2D point POINT(0 0) is a closed geometry.", "source": "original", "new_id": 537}
{"id": 94, "function": "ST_IsClosed", "question": "输出判断二维点POINT(0 0)是否为闭合几何图形的布尔值结果。", "sql": "SELECT ST_IsClosed('POINT(0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 2D point POINT(0 0) is a closed geometry.", "source": "original", "new_id": 538}
{"id": 95, "function": "ST_IsClosed", "question": "判断由坐标(0 0)和(1 1)构成的多点集合MULTIPOINT((0 0), (1 1))是否闭合。", "sql": "SELECT ST_IsClosed('MULTIPOINT((0 0), (1 1))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result (true/false) determining whether the MULTIPOINT((0 0), (1 1)) geometry object is a closed shape.", "source": "original", "new_id": 539}
{"id": 95, "function": "ST_IsClosed", "question": "检测包含点(0 0)和点(1 1)的多点几何对象是否闭合。", "sql": "SELECT ST_IsClosed('MULTIPOINT((0 0), (1 1))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result (true/false) determining whether the MULTIPOINT((0 0), (1 1)) geometry object is a closed shape.", "source": "original", "new_id": 540}
{"id": 95, "function": "ST_IsClosed", "question": "判断由两个点POINT(0 0)和POINT(1 1)组成的MULTIPOINT几何对象是否是闭合的。", "sql": "SELECT ST_IsClosed('MULTIPOINT((0 0), (1 1))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result (true/false) determining whether the MULTIPOINT((0 0), (1 1)) geometry object is a closed shape.", "source": "original", "new_id": 541}
{"id": 95, "function": "ST_IsClosed", "question": "输出MULTIPOINT((0 0), (1 1))几何对象的闭合性布尔值结果。", "sql": "SELECT ST_IsClosed('MULTIPOINT((0 0), (1 1))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result (true/false) determining whether the MULTIPOINT((0 0), (1 1)) geometry object is a closed shape.", "source": "original", "new_id": 542}
{"id": 95, "function": "ST_IsClosed", "question": "返回多点(0 0)和(1 1)集合闭合状态的布尔值(true/false)。", "sql": "SELECT ST_IsClosed('MULTIPOINT((0 0), (1 1))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result (true/false) determining whether the MULTIPOINT((0 0), (1 1)) geometry object is a closed shape.", "source": "original", "new_id": 543}
{"id": 95, "function": "ST_IsClosed", "question": "输出判断MULTIPOINT((0 0), (1 1))几何对象是否为闭合图形的布尔值结果（true/false）。", "sql": "SELECT ST_IsClosed('MULTIPOINT((0 0), (1 1))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result (true/false) determining whether the MULTIPOINT((0 0), (1 1)) geometry object is a closed shape.", "source": "original", "new_id": 544}
{"id": 96, "function": "ST_IsClosed", "question": "检测由6个面组成的多面体曲面（顶点坐标分别为((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) ）是否闭合。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the POLYHEDRALSURFACE geometry, composed of 5 faces with the following coordinates, is closed: first face (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0).", "source": "original", "new_id": 545}
{"id": 96, "function": "ST_IsClosed", "question": "判断POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )是否构成闭合体。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the POLYHEDRALSURFACE geometry, composed of 5 faces with the following coordinates, is closed: first face (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0).", "source": "original", "new_id": 546}
{"id": 96, "function": "ST_IsClosed", "question": "判断由以下五个三维面组成的多面体表面是否闭合：第一个面由顶点序列(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)构成，第二个面由(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)构成，第三个面由(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)构成，第四个面由(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)构成，第五个面由(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)构成。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the POLYHEDRALSURFACE geometry, composed of 5 faces with the following coordinates, is closed: first face (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0).", "source": "original", "new_id": 547}
{"id": 96, "function": "ST_IsClosed", "question": "返回布尔值表示随机构建的多面体曲面POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )是否闭合。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the POLYHEDRALSURFACE geometry, composed of 5 faces with the following coordinates, is closed: first face (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0).", "source": "original", "new_id": 548}
{"id": 96, "function": "ST_IsClosed", "question": "输出true/false判断结果，表明三维多面体POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )是否完全封闭。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the POLYHEDRALSURFACE geometry, composed of 5 faces with the following coordinates, is closed: first face (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0).", "source": "original", "new_id": 549}
{"id": 96, "function": "ST_IsClosed", "question": "输出POLYHEDRALSURFACE几何对象是否闭合的布尔值结果，该几何对象由5个面组成，具体坐标为：第一个面(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个面(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个面(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个面(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个面(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the POLYHEDRALSURFACE geometry, composed of 5 faces with the following coordinates, is closed: first face (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0).", "source": "original", "new_id": 550}
{"id": 97, "function": "ST_IsClosed", "question": "检测由6个面组成的多面体表面（顶点坐标分别为(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)、(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)、(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)、(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)、(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)、(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)）是否是闭合的。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the POLYHEDRALSURFACE object is closed, which consists of 6 faces: the first face has vertices (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth face (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 551}
{"id": 97, "function": "ST_IsClosed", "question": "使用ST_IsClosed函数判断由ST_GeomFromEWKT函数创建的POLYHEDRALSURFACE几何对象是否闭合，该多面体表面由6个面组成：第一个面顶点为(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个面顶点为(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个面顶点为(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个面顶点为(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个面顶点为(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个面顶点为(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the POLYHEDRALSURFACE object is closed, which consists of 6 faces: the first face has vertices (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth face (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 552}
{"id": 97, "function": "ST_IsClosed", "question": "判断由六个三维多边形面组成的多面体表面是否闭合，具体坐标如下：第一个面顶点为(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个面顶点为(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个面顶点为(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个面顶点为(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个面顶点为(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个面顶点为(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the POLYHEDRALSURFACE object is closed, which consists of 6 faces: the first face has vertices (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth face (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 553}
{"id": 97, "function": "ST_IsClosed", "question": "输出布尔值表示给定的多面体表面几何对象POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )是否闭合。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the POLYHEDRALSURFACE object is closed, which consists of 6 faces: the first face has vertices (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth face (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 554}
{"id": 97, "function": "ST_IsClosed", "question": "输出POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )这个多面体表面是否为闭合的布尔值结果。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the POLYHEDRALSURFACE object is closed, which consists of 6 faces: the first face has vertices (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth face (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 555}
{"id": 97, "function": "ST_IsClosed", "question": "输出判断POLYHEDRALSURFACE对象是否闭合的布尔值结果，该对象由6个面组成：第一个面顶点为(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个面顶点为(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个面顶点为(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个面顶点为(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个面顶点为(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个面顶点为(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the POLYHEDRALSURFACE object is closed, which consists of 6 faces: the first face has vertices (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth face (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 556}
{"id": 98, "function": "ST_IsCollection", "question": "检测LINESTRING(0 0, 1 1)这个折线对象是否为集合类型。", "sql": "SELECT ST_IsCollection('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (true/false) determining if LINESTRING(0 0, 1 1) is a geometry collection type.", "source": "original", "new_id": 557}
{"id": 98, "function": "ST_IsCollection", "question": "判断由点(0,0)和点(1,1)构成的折线是否是几何集合。", "sql": "SELECT ST_IsCollection('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (true/false) determining if LINESTRING(0 0, 1 1) is a geometry collection type.", "source": "original", "new_id": 558}
{"id": 98, "function": "ST_IsCollection", "question": "判断几何对象LINESTRING(0 0, 1 1)是否为集合类型（如MultiPoint等），其中LINESTRING的坐标依次为起点(0 0)和终点(1 1)。", "sql": "SELECT ST_IsCollection('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (true/false) determining if LINESTRING(0 0, 1 1) is a geometry collection type.", "source": "original", "new_id": 559}
{"id": 98, "function": "ST_IsCollection", "question": "返回布尔值表示LINESTRING(0 0, 1 1)是否为集合类型。", "sql": "SELECT ST_IsCollection('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (true/false) determining if LINESTRING(0 0, 1 1) is a geometry collection type.", "source": "original", "new_id": 560}
{"id": 98, "function": "ST_IsCollection", "question": "输出true/false判断折线对象LINESTRING(0 0, 1 1)是否属于集合类型。", "sql": "SELECT ST_IsCollection('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (true/false) determining if LINESTRING(0 0, 1 1) is a geometry collection type.", "source": "original", "new_id": 561}
{"id": 98, "function": "ST_IsCollection", "question": "输出判断LINESTRING(0 0, 1 1)是否为几何集合类型的布尔值结果（true/false）。", "sql": "SELECT ST_IsCollection('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (true/false) determining if LINESTRING(0 0, 1 1) is a geometry collection type.", "source": "original", "new_id": 562}
{"id": 99, "function": "ST_IsCollection", "question": "检测'MULTIPOINT EMPTY'这个空多点对象是否为几何集合类型。", "sql": "SELECT ST_IsCollection('MULTIPOINT EMPTY'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the geometry object 'MULTIPOINT EMPTY' is a collection type (e.g., MultiPoint, MultiLineString, etc.).", "source": "original", "new_id": 563}
{"id": 99, "function": "ST_IsCollection", "question": "判断'MULTIPOINT EMPTY'这个几何对象是否满足集合类型的定义。", "sql": "SELECT ST_IsCollection('MULTIPOINT EMPTY'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the geometry object 'MULTIPOINT EMPTY' is a collection type (e.g., MultiPoint, MultiLineString, etc.).", "source": "original", "new_id": 564}
{"id": 99, "function": "ST_IsCollection", "question": "判断几何对象'MULTIPOINT EMPTY'是否属于集合类型（即是否包含多个几何元素），其中'MULTIPOINT EMPTY'表示一个空的多点集合。", "sql": "SELECT ST_IsCollection('MULTIPOINT EMPTY'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the geometry object 'MULTIPOINT EMPTY' is a collection type (e.g., MultiPoint, MultiLineString, etc.).", "source": "original", "new_id": 565}
{"id": 99, "function": "ST_IsCollection", "question": "输出'MULTIPOINT EMPTY'对象的集合类型检测结果，返回布尔值。", "sql": "SELECT ST_IsCollection('MULTIPOINT EMPTY'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the geometry object 'MULTIPOINT EMPTY' is a collection type (e.g., MultiPoint, MultiLineString, etc.).", "source": "original", "new_id": 566}
{"id": 99, "function": "ST_IsCollection", "question": "以布尔值形式返回空多点对象'MULTIPOINT EMPTY'是否为有效几何集合的判断结果。", "sql": "SELECT ST_IsCollection('MULTIPOINT EMPTY'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the geometry object 'MULTIPOINT EMPTY' is a collection type (e.g., MultiPoint, MultiLineString, etc.).", "source": "original", "new_id": 567}
{"id": 99, "function": "ST_IsCollection", "question": "输出判断几何对象'MULTIPOINT EMPTY'是否为集合类型（如MultiPoint、MultiLineString等）的布尔值结果。", "sql": "SELECT ST_IsCollection('MULTIPOINT EMPTY'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the geometry object 'MULTIPOINT EMPTY' is a collection type (e.g., MultiPoint, MultiLineString, etc.).", "source": "original", "new_id": 568}
{"id": 100, "function": "ST_IsCollection", "question": "判断'MULTIPOINT((0 0))'这个几何对象是否是集合类型。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the geometry object MULTIPOINT((0 0)) is a collection type (e.g., MultiPoint, MultiLineString, etc.), with the return value being true or false.", "source": "original", "new_id": 569}
{"id": 100, "function": "ST_IsCollection", "question": "检测由坐标(0 0)构成的多点对象是否为几何集合。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the geometry object MULTIPOINT((0 0)) is a collection type (e.g., MultiPoint, MultiLineString, etc.), with the return value being true or false.", "source": "original", "new_id": 570}
{"id": 100, "function": "ST_IsCollection", "question": "判断给定的几何对象'MULTIPOINT((0 0))'是否是一个集合类型（即是否包含多个几何元素），其中MULTIPOINT((0 0))是一个包含单个点(0 0)的多点集合。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the geometry object MULTIPOINT((0 0)) is a collection type (e.g., MultiPoint, MultiLineString, etc.), with the return value being true or false.", "source": "original", "new_id": 571}
{"id": 100, "function": "ST_IsCollection", "question": "输出'MULTIPOINT((0 0))'是否为集合类型的布尔判断结果。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the geometry object MULTIPOINT((0 0)) is a collection type (e.g., MultiPoint, MultiLineString, etc.), with the return value being true or false.", "source": "original", "new_id": 572}
{"id": 100, "function": "ST_IsCollection", "question": "返回布尔值表示给定多点对象MULTIPOINT((0 0))是否被识别为集合类型。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the geometry object MULTIPOINT((0 0)) is a collection type (e.g., MultiPoint, MultiLineString, etc.), with the return value being true or false.", "source": "original", "new_id": 573}
{"id": 100, "function": "ST_IsCollection", "question": "输出判断几何对象MULTIPOINT((0 0))是否为集合类型（如MultiPoint、MultiLineString等）的布尔结果，要求返回值为true或false。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the geometry object MULTIPOINT((0 0)) is a collection type (e.g., MultiPoint, MultiLineString, etc.), with the return value being true or false.", "source": "original", "new_id": 574}
{"id": 101, "function": "ST_IsCollection", "question": "检查由坐标(0,0)和(42,42)构成的多点对象'MULTIPOINT((0 0), (42 42))'是否为集合类型。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0), (42 42))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of determining whether the geometric object MULTIPOINT((0 0), (42 42)) is a collection type (returns boolean TRUE/FALSE).", "source": "original", "new_id": 575}
{"id": 101, "function": "ST_IsCollection", "question": "验证包含点(0 0)和点(42 42)的MULTIPOINT几何对象是否是集合。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0), (42 42))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of determining whether the geometric object MULTIPOINT((0 0), (42 42)) is a collection type (returns boolean TRUE/FALSE).", "source": "original", "new_id": 576}
{"id": 101, "function": "ST_IsCollection", "question": "判断给定的几何对象'MULTIPOINT((0 0), (42 42))'是否是一个集合类型（包含多个几何元素），其中包含两个二维点：第一个点坐标为(0 0)，第二个点坐标为(42 42)。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0), (42 42))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of determining whether the geometric object MULTIPOINT((0 0), (42 42)) is a collection type (returns boolean TRUE/FALSE).", "source": "original", "new_id": 577}
{"id": 101, "function": "ST_IsCollection", "question": "输出布尔值表示'MULTIPOINT((0 0), (42 42))'是否为有效的几何集合。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0), (42 42))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of determining whether the geometric object MULTIPOINT((0 0), (42 42)) is a collection type (returns boolean TRUE/FALSE).", "source": "original", "new_id": 578}
{"id": 101, "function": "ST_IsCollection", "question": "返回true/false表明给定多点几何MULTIPOINT((0 0), (42 42))是否通过集合类型验证。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0), (42 42))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of determining whether the geometric object MULTIPOINT((0 0), (42 42)) is a collection type (returns boolean TRUE/FALSE).", "source": "original", "new_id": 579}
{"id": 101, "function": "ST_IsCollection", "question": "输出判断几何对象MULTIPOINT((0 0), (42 42))是否为集合类型（返回布尔值TRUE/FALSE）的结果。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0), (42 42))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of determining whether the geometric object MULTIPOINT((0 0), (42 42)) is a collection type (returns boolean TRUE/FALSE).", "source": "original", "new_id": 580}
{"id": 102, "function": "ST_IsCollection", "question": "判断GEOMETRYCOLLECTION(POINT(0 0))这个几何对象是否是集合类型。", "sql": "SELECT ST_IsCollection('GEOMETRYCOLLECTION(POINT(0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Determine if the input value 'GEOMETRYCOLLECTION(POINT(0 0))' is a collection-type geometry object, outputting a boolean result.", "source": "original", "new_id": 581}
{"id": 102, "function": "ST_IsCollection", "question": "判断给定的几何对象'GEOMETRYCOLLECTION(POINT(0 0))'是否是一个集合类型（包含POINT(0 0)这个二维点），并返回布尔值结果。", "sql": "SELECT ST_IsCollection('GEOMETRYCOLLECTION(POINT(0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Determine if the input value 'GEOMETRYCOLLECTION(POINT(0 0))' is a collection-type geometry object, outputting a boolean result.", "source": "original", "new_id": 582}
{"id": 102, "function": "ST_IsCollection", "question": "输出一个包含一个点的GEOMETRYCOLLECTION(POINT(0 0))是否为集合类型的布尔值结果。", "sql": "SELECT ST_IsCollection('GEOMETRYCOLLECTION(POINT(0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Determine if the input value 'GEOMETRYCOLLECTION(POINT(0 0))' is a collection-type geometry object, outputting a boolean result.", "source": "original", "new_id": 583}
{"id": 102, "function": "ST_IsCollection", "question": "返回GEOMETRYCOLLECTION(POINT(0 0))的集合类型检测结果（true/false）。", "sql": "SELECT ST_IsCollection('GEOMETRYCOLLECTION(POINT(0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Determine if the input value 'GEOMETRYCOLLECTION(POINT(0 0))' is a collection-type geometry object, outputting a boolean result.", "source": "original", "new_id": 584}
{"id": 102, "function": "ST_IsCollection", "question": "判断输入值'GEOMETRYCOLLECTION(POINT(0 0))'是否为集合类型几何对象，输出结果为布尔值。", "sql": "SELECT ST_IsCollection('GEOMETRYCOLLECTION(POINT(0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Determine if the input value 'GEOMETRYCOLLECTION(POINT(0 0))' is a collection-type geometry object, outputting a boolean result.", "source": "original", "new_id": 585}
{"id": 103, "function": "ST_IsEmpty", "question": "检测由文本'CIRCULARSTRING EMPTY'创建的圆形弧线几何对象是否为空。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('CIRCULARSTRING EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result to determine if the circular arc string CIRCULARSTRING EMPTY is empty.", "source": "original", "new_id": 586}
{"id": 103, "function": "ST_IsEmpty", "question": "判断ST_GeomFromText('CIRCULARSTRING EMPTY')创建的几何对象是否为空。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('CIRCULARSTRING EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result to determine if the circular arc string CIRCULARSTRING EMPTY is empty.", "source": "original", "new_id": 587}
{"id": 103, "function": "ST_IsEmpty", "question": "判断由WKT文本'CIRCULARSTRING EMPTY'创建的圆弧几何对象是否为空几何体，其中ST_GeomFromText函数将WKT文本转换为几何对象，ST_IsEmpty函数检测该几何对象是否为空。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('CIRCULARSTRING EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result to determine if the circular arc string CIRCULARSTRING EMPTY is empty.", "source": "original", "new_id": 588}
{"id": 103, "function": "ST_IsEmpty", "question": "返回'CIRCULARSTRING EMPTY'几何对象的空值检测布尔结果。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('CIRCULARSTRING EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result to determine if the circular arc string CIRCULARSTRING EMPTY is empty.", "source": "original", "new_id": 589}
{"id": 103, "function": "ST_IsEmpty", "question": "输出对空圆形弧线几何对象CIRCULARSTRING EMPTY的检测结果(true/false)。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('CIRCULARSTRING EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result to determine if the circular arc string CIRCULARSTRING EMPTY is empty.", "source": "original", "new_id": 590}
{"id": 103, "function": "ST_IsEmpty", "question": "输出判断空圆弧线CIRCULARSTRING EMPTY是否为空的布尔值结果。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('CIRCULARSTRING EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result to determine if the circular arc string CIRCULARSTRING EMPTY is empty.", "source": "original", "new_id": 591}
{"id": 105, "function": "ST_IsEmpty", "question": "判断由坐标点(1 2)、(3 4)、(5 6)组成的闭合多边形是否为空几何。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether POLYGON((1 2, 3 4, 5 6, 1 2)) is empty.", "source": "original", "new_id": 592}
{"id": 105, "function": "ST_IsEmpty", "question": "检测POLYGON((1 2, 3 4, 5 6, 1 2))这个具体多边形对象是否为空。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether POLYGON((1 2, 3 4, 5 6, 1 2)) is empty.", "source": "original", "new_id": 593}
{"id": 105, "function": "ST_IsEmpty", "question": "判断由坐标点(1 2)、(3 4)、(5 6)构成的闭合多边形POLYGON((1 2, 3 4, 5 6, 1 2))是否为空几何体。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether POLYGON((1 2, 3 4, 5 6, 1 2)) is empty.", "source": "original", "new_id": 594}
{"id": 105, "function": "ST_IsEmpty", "question": "返回布尔值表示给定多边形POLYGON((1 2, 3 4, 5 6, 1 2))是否为空几何。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether POLYGON((1 2, 3 4, 5 6, 1 2)) is empty.", "source": "original", "new_id": 595}
{"id": 105, "function": "ST_IsEmpty", "question": "输出true/false表示POLYGON((1 2, 3 4, 5 6, 1 2))是否为空。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether POLYGON((1 2, 3 4, 5 6, 1 2)) is empty.", "source": "original", "new_id": 596}
{"id": 105, "function": "ST_IsEmpty", "question": "输出判断POLYGON((1 2, 3 4, 5 6, 1 2))是否为空的布尔值结果。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether POLYGON((1 2, 3 4, 5 6, 1 2)) is empty.", "source": "original", "new_id": 597}
{"id": 106, "function": "ST_IsEmpty", "question": "判断由顶点坐标(1 2)、(3 4)、(5 6)组成的闭合多边形是否非空。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))')) = false;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result comparing whether POLYGON((1 2, 3 4, 5 6, 1 2)) is a non-empty geometry object with false.", "source": "original", "new_id": 598}
{"id": 106, "function": "ST_IsEmpty", "question": "检查POLYGON((1 2, 3 4, 5 6, 1 2))是否为空几何体。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))')) = false;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result comparing whether POLYGON((1 2, 3 4, 5 6, 1 2)) is a non-empty geometry object with false.", "source": "original", "new_id": 599}
{"id": 106, "function": "ST_IsEmpty", "question": "判断由坐标点(1 2)、(3 4)、(5 6)构成的闭合多边形POLYGON((1 2, 3 4, 5 6, 1 2))是否为空几何体，并返回布尔值false的等式结果。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))')) = false;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result comparing whether POLYGON((1 2, 3 4, 5 6, 1 2)) is a non-empty geometry object with false.", "source": "original", "new_id": 600}
{"id": 106, "function": "ST_IsEmpty", "question": "输出POLYGON((1 2, 3 4, 5 6, 1 2))的非空性检查的布尔结果。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))')) = false;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result comparing whether POLYGON((1 2, 3 4, 5 6, 1 2)) is a non-empty geometry object with false.", "source": "original", "new_id": 601}
{"id": 106, "function": "ST_IsEmpty", "question": "返回指定多边形几何体POLYGON((1 2, 3 4, 5 6, 1 2))是否非空的逻辑值（true/false）。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))')) = false;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result comparing whether POLYGON((1 2, 3 4, 5 6, 1 2)) is a non-empty geometry object with false.", "source": "original", "new_id": 602}
{"id": 106, "function": "ST_IsEmpty", "question": "输出判断POLYGON((1 2, 3 4, 5 6, 1 2))是否为非空几何对象的与false比较的布尔值结果。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))')) = false;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result comparing whether POLYGON((1 2, 3 4, 5 6, 1 2)) is a non-empty geometry object with false.", "source": "original", "new_id": 603}
{"id": 107, "function": "ST_IsEmpty", "question": "检测GEOMETRYCOLLECTION EMPTY这个几何集合是否为空。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('GEOMETRYCOLLECTION EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (TRUE or FALSE) to determine if GEOMETRYCOLLECTION EMPTY is an empty geometry object.", "source": "original", "new_id": 604}
{"id": 107, "function": "ST_IsEmpty", "question": "判断由'GEOMETRYCOLLECTION EMPTY'文本创建的几何对象是否为空集合。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('GEOMETRYCOLLECTION EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (TRUE or FALSE) to determine if GEOMETRYCOLLECTION EMPTY is an empty geometry object.", "source": "original", "new_id": 605}
{"id": 107, "function": "ST_IsEmpty", "question": "判断由ST_GeomFromText函数从WKT格式'GEOMETRYCOLLECTION EMPTY'创建的几何集合对象是否为空集合。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('GEOMETRYCOLLECTION EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (TRUE or FALSE) to determine if GEOMETRYCOLLECTION EMPTY is an empty geometry object.", "source": "original", "new_id": 606}
{"id": 107, "function": "ST_IsEmpty", "question": "返回布尔值表示GEOMETRYCOLLECTION EMPTY是否为空集合。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('GEOMETRYCOLLECTION EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (TRUE or FALSE) to determine if GEOMETRYCOLLECTION EMPTY is an empty geometry object.", "source": "original", "new_id": 607}
{"id": 107, "function": "ST_IsEmpty", "question": "输出检测结果，判断几何集合GEOMETRYCOLLECTION EMPTY是否为空。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('GEOMETRYCOLLECTION EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (TRUE or FALSE) to determine if GEOMETRYCOLLECTION EMPTY is an empty geometry object.", "source": "original", "new_id": 608}
{"id": 107, "function": "ST_IsEmpty", "question": "输出判断GEOMETRYCOLLECTION EMPTY是否为空几何对象的布尔值结果，要求返回TRUE或FALSE。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('GEOMETRYCOLLECTION EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (TRUE or FALSE) to determine if GEOMETRYCOLLECTION EMPTY is an empty geometry object.", "source": "original", "new_id": 609}
{"id": 108, "function": "ST_IsRing", "question": "检查LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)是否满足环形、闭合和简单的几何条件。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return three boolean results for the LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0) geometry: whether it is a ring, whether it is closed, and whether it is a simple geometry, requiring three columns in the output.", "source": "original", "new_id": 610}
{"id": 108, "function": "ST_IsRing", "question": "验证由坐标点(0 0)、(0 1)、(1 0)、(1 1)、(0 0)组成的线串的拓扑属性。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return three boolean results for the LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0) geometry: whether it is a ring, whether it is closed, and whether it is a simple geometry, requiring three columns in the output.", "source": "original", "new_id": 611}
{"id": 108, "function": "ST_IsRing", "question": "对LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)这条折线执行三个几何验证：1)使用ST_IsRing函数判断是否为闭合环线；2)使用ST_IsClosed函数判断是否闭合；3)使用ST_IsSimple函数判断是否简单。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return three boolean results for the LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0) geometry: whether it is a ring, whether it is closed, and whether it is a simple geometry, requiring three columns in the output.", "source": "original", "new_id": 612}
{"id": 108, "function": "ST_IsRing", "question": "输出LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)的三个布尔型拓扑验证结果：是否满足ST_IsRing(闭合环)、ST_IsClosed(首尾闭合)和ST_IsSimple(不自相交)条件。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return three boolean results for the LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0) geometry: whether it is a ring, whether it is closed, and whether it is a simple geometry, requiring three columns in the output.", "source": "original", "new_id": 613}
{"id": 108, "function": "ST_IsRing", "question": "输出LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)几何对象的三个布尔值结果：是否为闭合环、是否为闭合线、是否为简单几何体，要求以三列形式返回。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return three boolean results for the LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0) geometry: whether it is a ring, whether it is closed, and whether it is a simple geometry, requiring three columns in the output.", "source": "original", "new_id": 614}
{"id": 108, "function": "ST_IsRing", "question": "返回LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)几何对象的三个布尔值结果：是否为环状线、是否为闭合线、是否为简单几何体，要求返回三列。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return three boolean results for the LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0) geometry: whether it is a ring, whether it is closed, and whether it is a simple geometry, requiring three columns in the output.", "source": "original", "new_id": 615}
{"id": 109, "function": "ST_IsRing", "question": "检查LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)这个线串是否是环、是否闭合、是否简单。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output three boolean results for the LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0) geometry: whether it is a closed ring, whether it is a closed line, and whether it is a simple geometry, returning the results in three columns.", "source": "original", "new_id": 616}
{"id": 109, "function": "ST_IsRing", "question": "验证由(0,0)->(0,1)->(1,1)->(1,0)->(0,0)四个点组成的线串的拓扑特性：是否形成环(Ring)、是否闭合(Closed)以及是否简单(Simple)。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output three boolean results for the LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0) geometry: whether it is a closed ring, whether it is a closed line, and whether it is a simple geometry, returning the results in three columns.", "source": "original", "new_id": 617}
{"id": 109, "function": "ST_IsRing", "question": "判断LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)是否构成环。", "sql": "SELECT ST_IsRing('LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Determine if LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0) forms a ring.", "source": "original", "new_id": 618}
{"id": 109, "function": "ST_IsRing", "question": "返回三个布尔值，分别表示LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)的环状态、闭合状态和简单状态。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output three boolean results for the LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0) geometry: whether it is a closed ring, whether it is a closed line, and whether it is a simple geometry, returning the results in three columns.", "source": "original", "new_id": 619}
{"id": 109, "function": "ST_IsRing", "question": "输出格式为三列布尔结果，对应线串LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)的环检测、闭合检测和简单性检测结果。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output three boolean results for the LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0) geometry: whether it is a closed ring, whether it is a closed line, and whether it is a simple geometry, returning the results in three columns.", "source": "original", "new_id": 620}
{"id": 109, "function": "ST_IsRing", "question": "输出LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)几何对象的三个布尔值结果：是否为闭合环、是否为闭合线、是否为简单几何，要求以三列形式返回。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output three boolean results for the LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0) geometry: whether it is a closed ring, whether it is a closed line, and whether it is a simple geometry, returning the results in three columns.", "source": "original", "new_id": 621}
{"id": 110, "function": "ST_IsSimple", "question": "检查由坐标点(1 1)、(2 2)、(2 3.5)、(1 3)、(1 2)、(2 1)组成的线串是否为简单几何。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result (TRUE/FALSE) indicating whether the LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1) geometry object is simple.", "source": "original", "new_id": 622}
{"id": 110, "function": "ST_IsSimple", "question": "验证LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)这个几何对象是否自相交。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result (TRUE/FALSE) indicating whether the LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1) geometry object is simple.", "source": "original", "new_id": 623}
{"id": 110, "function": "ST_IsSimple", "question": "判断由坐标点序列(1 1)、(2 2)、(2 3.5)、(1 3)、(1 2)、(2 1)构成的LINESTRING几何对象是否满足简单几何体的定义（即不自相交）。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result (TRUE/FALSE) indicating whether the LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1) geometry object is simple.", "source": "original", "new_id": 624}
{"id": 110, "function": "ST_IsSimple", "question": "返回布尔值表示LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)是否为简单几何。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result (TRUE/FALSE) indicating whether the LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1) geometry object is simple.", "source": "original", "new_id": 625}
{"id": 110, "function": "ST_IsSimple", "question": "输出true或false表示给定线串LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)是否不自相交。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result (TRUE/FALSE) indicating whether the LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1) geometry object is simple.", "source": "original", "new_id": 626}
{"id": 110, "function": "ST_IsSimple", "question": "输出LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)几何对象是否为简单几何的布尔判断结果（TRUE/FALSE）。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result (TRUE/FALSE) indicating whether the LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1) geometry object is simple.", "source": "original", "new_id": 627}
{"id": 111, "function": "ST_IsSimple", "question": "检测由坐标点(1 2)、(3 4)、(5 6)组成的闭合多边形是否为简单几何体。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (TRUE/FALSE) indicating whether the POLYGON((1 2, 3 4, 5 6, 1 2)) geometry is a simple geometry.", "source": "original", "new_id": 628}
{"id": 111, "function": "ST_IsSimple", "question": "判断POLYGON((1 2, 3 4, 5 6, 1 2))这个多边形是否自相交。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (TRUE/FALSE) indicating whether the POLYGON((1 2, 3 4, 5 6, 1 2)) geometry is a simple geometry.", "source": "original", "new_id": 629}
{"id": 111, "function": "ST_IsSimple", "question": "判断由坐标点1 2、3 4、5 6、1 2构成的闭合多边形POLYGON((1 2, 3 4, 5 6, 1 2))是否为简单几何图形（不自交且无重复点）。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (TRUE/FALSE) indicating whether the POLYGON((1 2, 3 4, 5 6, 1 2)) geometry is a simple geometry.", "source": "original", "new_id": 630}
{"id": 111, "function": "ST_IsSimple", "question": "输出POLYGON((1 2, 3 4, 5 6, 1 2))是否为简单几何体的布尔值结果。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (TRUE/FALSE) indicating whether the POLYGON((1 2, 3 4, 5 6, 1 2)) geometry is a simple geometry.", "source": "original", "new_id": 631}
{"id": 111, "function": "ST_IsSimple", "question": "返回指定多边形POLYGON((1 2, 3 4, 5 6, 1 2))简单性检测的布尔值（TRUE/FALSE）。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (TRUE/FALSE) indicating whether the POLYGON((1 2, 3 4, 5 6, 1 2)) geometry is a simple geometry.", "source": "original", "new_id": 632}
{"id": 111, "function": "ST_IsSimple", "question": "输出POLYGON((1 2, 3 4, 5 6, 1 2))几何对象是否为简单几何体的布尔判断结果（TRUE/FALSE）。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (TRUE/FALSE) indicating whether the POLYGON((1 2, 3 4, 5 6, 1 2)) geometry is a simple geometry.", "source": "original", "new_id": 633}
{"id": 112, "function": "ST_M", "question": "从EWKT格式的POINT(1 2 3 4)中提取M值。", "sql": "SELECT ST_M(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific M-coordinate value from the EWKT-formatted geometry object POINT(1 2 3 4).", "source": "original", "new_id": 634}
{"id": 112, "function": "ST_M", "question": "获取坐标为X=1,Y=2,Z=3,M=4的三维点对象的M值。", "sql": "SELECT ST_M(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific M-coordinate value from the EWKT-formatted geometry object POINT(1 2 3 4).", "source": "original", "new_id": 635}
{"id": 112, "function": "ST_M", "question": "从EWKT格式字符串'POINT(1 2 3 4)'中提取M值，该几何对象是一个带有X坐标1、Y坐标2、Z坐标3和M值4的四维点。", "sql": "SELECT ST_M(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific M-coordinate value from the EWKT-formatted geometry object POINT(1 2 3 4).", "source": "original", "new_id": 636}
{"id": 112, "function": "ST_M", "question": "返回POINT(1 2 3 4)的M值。", "sql": "SELECT ST_M(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific M-coordinate value from the EWKT-formatted geometry object POINT(1 2 3 4).", "source": "original", "new_id": 637}
{"id": 112, "function": "ST_M", "question": "输出带M值的三维点对象POINT(1 2 3 4)的M值。", "sql": "SELECT ST_M(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific M-coordinate value from the EWKT-formatted geometry object POINT(1 2 3 4).", "source": "original", "new_id": 638}
{"id": 112, "function": "ST_M", "question": "输出EWKT格式的POINT(1 2 3 4)几何对象中M坐标值的具体数值。", "sql": "SELECT ST_M(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific M-coordinate value from the EWKT-formatted geometry object POINT(1 2 3 4).", "source": "original", "new_id": 639}
{"id": 113, "function": "ST_NDims", "question": "计算POINT(1 1)的维度、POINT(1 1 2)的维度和POINTM(1 1 0.5)的维度。", "sql": "SELECT ST_NDims(ST_GeomFromText('POINT(1 1)')) AS d2point, ST_NDims(ST_GeomFromEWKT('POINT(1 1 2)')) AS d3point, ST_NDims(ST_GeomFromEWKT('POINTM(1 1 0.5)')) AS d2pointm;", "execution_result": [[2, 3, 3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension value of POINT(1 1) as the d2point column, POINT(1 1 2) as the d3point column, and POINTM(1 1 0.5) as the d2pointm column.", "source": "original", "new_id": 640}
{"id": 113, "function": "ST_NDims", "question": "分别输出POINT(1 1)（二维）、POINT(1 1 2)（三维）和POINTM(1 1 0.5)（带M值）的维度值，结果分别命名为d2point、d3point和d2pointm。", "sql": "SELECT ST_NDims(ST_GeomFromText('POINT(1 1)')) AS d2point, ST_NDims(ST_GeomFromEWKT('POINT(1 1 2)')) AS d3point, ST_NDims(ST_GeomFromEWKT('POINTM(1 1 0.5)')) AS d2pointm;", "execution_result": [[2, 3, 3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension value of POINT(1 1) as the d2point column, POINT(1 1 2) as the d3point column, and POINTM(1 1 0.5) as the d2pointm column.", "source": "original", "new_id": 641}
{"id": 113, "function": "ST_NDims", "question": "使用ST_NDims函数分别计算以下三个几何对象的维度：1) 通过ST_GeomFromText函数从WKT格式创建的二维点POINT(1 1)；2) 通过ST_GeomFromEWKT函数从WKT格式创建的三维点POINT(1 1 2)；3) 通过ST_GeomFromEWKT函数从WKT格式创建的带M值的二维点POINTM(1 1 0.5)，并将结果分别命名为d2point、d3point和d2pointm。", "sql": "SELECT ST_NDims(ST_GeomFromText('POINT(1 1)')) AS d2point, ST_NDims(ST_GeomFromEWKT('POINT(1 1 2)')) AS d3point, ST_NDims(ST_GeomFromEWKT('POINTM(1 1 0.5)')) AS d2pointm;", "execution_result": [[2, 3, 3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension value of POINT(1 1) as the d2point column, POINT(1 1 2) as the d3point column, and POINTM(1 1 0.5) as the d2pointm column.", "source": "original", "new_id": 642}
{"id": 113, "function": "ST_NDims", "question": "输出POINT(1 1)、POINT(1 1 2)和POINTM(1 1 0.5)的维度值，结果分别命名为d2point、d3point和d2pointm。", "sql": "SELECT ST_NDims(ST_GeomFromText('POINT(1 1)')) AS d2point, ST_NDims(ST_GeomFromEWKT('POINT(1 1 2)')) AS d3point, ST_NDims(ST_GeomFromEWKT('POINTM(1 1 0.5)')) AS d2pointm;", "execution_result": [[2, 3, 3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension value of POINT(1 1) as the d2point column, POINT(1 1 2) as the d3point column, and POINTM(1 1 0.5) as the d2pointm column.", "source": "original", "new_id": 643}
{"id": 113, "function": "ST_NDims", "question": "输出三个几何对象的维度数：二维点POINT(1 1)的维度数别名为d2point，三维点POINT(1 1 2)的维度数别名为d3point，带M值的二维点POINTM(1 1 0.5)的维度数别名为d2pointm。", "sql": "SELECT ST_NDims(ST_GeomFromText('POINT(1 1)')) AS d2point, ST_NDims(ST_GeomFromEWKT('POINT(1 1 2)')) AS d3point, ST_NDims(ST_GeomFromEWKT('POINTM(1 1 0.5)')) AS d2pointm;", "execution_result": [[2, 3, 3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension value of POINT(1 1) as the d2point column, POINT(1 1 2) as the d3point column, and POINTM(1 1 0.5) as the d2pointm column.", "source": "original", "new_id": 644}
{"id": 113, "function": "ST_NDims", "question": "输出 POINT(1 1) 的维度值作为 d2point 列、POINT(1 1 2) 的维度值作为 d3point 列和 POINTM(1 1 0.5) 的维度值作为 d2pointm 列。", "sql": "SELECT ST_NDims(ST_GeomFromText('POINT(1 1)')) AS d2point, ST_NDims(ST_GeomFromEWKT('POINT(1 1 2)')) AS d3point, ST_NDims(ST_GeomFromEWKT('POINTM(1 1 0.5)')) AS d2pointm;", "execution_result": [[2, 3, 3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension value of POINT(1 1) as the d2point column, POINT(1 1 2) as the d3point column, and POINTM(1 1 0.5) as the d2pointm column.", "source": "original", "new_id": 645}
{"id": 114, "function": "ST_NPoints", "question": "计算由坐标点(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)构成的闭合线串的顶点数量。", "sql": "SELECT ST_NPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices contained in the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) polyline.", "source": "original", "new_id": 646}
{"id": 114, "function": "ST_NPoints", "question": "统计LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)这条几何线段的顶点总数。", "sql": "SELECT ST_NPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices contained in the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) polyline.", "source": "original", "new_id": 647}
{"id": 114, "function": "ST_NPoints", "question": "通过类型转换将LINESTRING(1 1,2 2)转换成几何对象，然后直接计算线串的顶点数。", "sql": "SELECT ST_NPoints('LINESTRING(1 1,2 2)'::geometry);", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert LINESTRING(1 1,2 2) to a geometry object through type casting, then directly calculate the number of vertices in the linestring.", "source": "original", "new_id": 648}
{"id": 114, "function": "ST_NPoints", "question": "以整数值返回闭合线串LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)的顶点数量计算结果。", "sql": "SELECT ST_NPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices contained in the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) polyline.", "source": "original", "new_id": 649}
{"id": 114, "function": "ST_NPoints", "question": "输出LINESTRING几何LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)的顶点统计数量值。", "sql": "SELECT ST_NPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices contained in the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) polyline.", "source": "original", "new_id": 650}
{"id": 114, "function": "ST_NPoints", "question": "输出LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)这条折线所包含的顶点数量。", "sql": "SELECT ST_NPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices contained in the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) polyline.", "source": "original", "new_id": 651}
{"id": 115, "function": "ST_NPoints", "question": "计算LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)这条三维线串的顶点数量。", "sql": "SELECT ST_NPoints(ST_GeomFromEWKT('LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices in the 3D linestring LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3), rounded to the nearest integer.", "source": "original", "new_id": 652}
{"id": 115, "function": "ST_NPoints", "question": "统计由点(77.29 29.07 1)、(77.42 29.26 0)、(77.27 29.31 -1)、(77.29 29.07 3)构成的三维线串的顶点数。", "sql": "SELECT ST_NPoints(ST_GeomFromEWKT('LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices in the 3D linestring LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3), rounded to the nearest integer.", "source": "original", "new_id": 653}
{"id": 115, "function": "ST_NPoints", "question": "计算由WKT格式定义的LINESTRING几何对象中点的数量，该线串包含4个三维点坐标：第一个点为POINT(77.29 29.07 1)，第二个点为POINT(77.42 29.26 0)，第三个点为POINT(77.27 29.31 -1)，第四个点为POINT(77.29 29.07 3)。", "sql": "SELECT ST_NPoints(ST_GeomFromEWKT('LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices in the 3D linestring LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3), rounded to the nearest integer.", "source": "original", "new_id": 654}
{"id": 115, "function": "ST_NPoints", "question": "输出LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)的顶点数量整数值。", "sql": "SELECT ST_NPoints(ST_GeomFromEWKT('LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices in the 3D linestring LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3), rounded to the nearest integer.", "source": "original", "new_id": 655}
{"id": 115, "function": "ST_NPoints", "question": "输出三维线LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)的顶点数量。", "sql": "SELECT ST_NPoints(ST_GeomFromEWKT('LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices in the 3D linestring LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3), rounded to the nearest integer.", "source": "original", "new_id": 656}
{"id": 115, "function": "ST_NPoints", "question": "输出三维线LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)的顶点数量，精确到整数。", "sql": "SELECT ST_NPoints(ST_GeomFromEWKT('LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices in the 3D linestring LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3), rounded to the nearest integer.", "source": "original", "new_id": 657}
{"id": 116, "function": "ST_NRings", "question": "计算由坐标点(1 2)、(3 4)、(5 6)构成的闭合多边形POLYGON((1 2, 3 4, 5 6, 1 2))的环总数和内部环数量。", "sql": "SELECT ST_NRings(geom) AS Nrings, ST_NumInteriorRings(geom) AS ninterrings \nFROM (SELECT ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))') AS geom) AS foo;", "execution_result": [[1, 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the statistical results of the total number of rings (Nrings) and the number of interior rings (ninterrings) for the geometry object POLYGON((1 2, 3 4, 5 6, 1 2)).", "source": "original", "new_id": 658}
{"id": 116, "function": "ST_NRings", "question": "统计POLYGON((1 2, 3 4, 5 6, 1 2))这个简单多边形的总环数（Nrings）和内环数（ninterrings）。", "sql": "SELECT ST_NRings(geom) AS Nrings, ST_NumInteriorRings(geom) AS ninterrings \nFROM (SELECT ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))') AS geom) AS foo;", "execution_result": [[1, 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the statistical results of the total number of rings (Nrings) and the number of interior rings (ninterrings) for the geometry object POLYGON((1 2, 3 4, 5 6, 1 2)).", "source": "original", "new_id": 659}
{"id": 116, "function": "ST_NRings", "question": "计算由坐标点(1 2)、(3 4)、(5 6)构成的闭合多边形POLYGON((1 2, 3 4, 5 6, 1 2))的环总数和内部环数量，分别命名为Nrings和ninterrings。", "sql": "SELECT ST_NRings(geom) AS Nrings, ST_NumInteriorRings(geom) AS ninterrings \nFROM (SELECT ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))') AS geom) AS foo;", "execution_result": [[1, 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the statistical results of the total number of rings (Nrings) and the number of interior rings (ninterrings) for the geometry object POLYGON((1 2, 3 4, 5 6, 1 2)).", "source": "original", "new_id": 660}
{"id": 116, "function": "ST_NRings", "question": "以Nrings和ninterrings为列名，输出多边形POLYGON((1 2, 3 4, 5 6, 1 2))的环总数和内部环数量结果。", "sql": "SELECT ST_NRings(geom) AS Nrings, ST_NumInteriorRings(geom) AS ninterrings \nFROM (SELECT ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))') AS geom) AS foo;", "execution_result": [[1, 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the statistical results of the total number of rings (Nrings) and the number of interior rings (ninterrings) for the geometry object POLYGON((1 2, 3 4, 5 6, 1 2)).", "source": "original", "new_id": 661}
{"id": 116, "function": "ST_NRings", "question": "返回包含两个字段的结果集，分别表示几何体POLYGON((1 2, 3 4, 5 6, 1 2))的总环数和内部环数。", "sql": "SELECT ST_NRings(geom) AS Nrings, ST_NumInteriorRings(geom) AS ninterrings \nFROM (SELECT ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))') AS geom) AS foo;", "execution_result": [[1, 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the statistical results of the total number of rings (Nrings) and the number of interior rings (ninterrings) for the geometry object POLYGON((1 2, 3 4, 5 6, 1 2)).", "source": "original", "new_id": 662}
{"id": 116, "function": "ST_NRings", "question": "输出POLYGON((1 2, 3 4, 5 6, 1 2))几何对象的总环数（Nrings）和内环数量（ninterrings）的统计结果。", "sql": "SELECT ST_NRings(geom) AS Nrings, ST_NumInteriorRings(geom) AS ninterrings \nFROM (SELECT ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))') AS geom) AS foo;", "execution_result": [[1, 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the statistical results of the total number of rings (Nrings) and the number of interior rings (ninterrings) for the geometry object POLYGON((1 2, 3 4, 5 6, 1 2)).", "source": "original", "new_id": 663}
{"id": 117, "function": "ST_NumGeometries", "question": "计算由MULTIPOINT((-2 3),(-2 2))组成的GEOMETRYCOLLECTION中包含的几何对象数量。", "sql": "SELECT ST_NumGeometries(ST_GeomFromEWKT('GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Count the number of geometric objects in GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2))) and return the result as an integer.", "source": "original", "new_id": 664}
{"id": 117, "function": "ST_NumGeometries", "question": "统计包含点(-2,3)和点(-2,2)的多点集合的几何对象数量。", "sql": "SELECT ST_NumGeometries(ST_GeomFromEWKT('GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Count the number of geometric objects in GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2))) and return the result as an integer.", "source": "original", "new_id": 665}
{"id": 117, "function": "ST_NumGeometries", "question": "计算从EWKT格式字符串'GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))'解析出的几何集合中，包含的几何对象数量。该几何集合包含一个MULTIPOINT对象，该多点对象由两个二维点组成，坐标分别为(-2 3)和(-2 2)。", "sql": "SELECT ST_NumGeometries(ST_GeomFromEWKT('GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Count the number of geometric objects in GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2))) and return the result as an integer.", "source": "original", "new_id": 666}
{"id": 117, "function": "ST_NumGeometries", "question": "输出GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))包含的几何对象数量整数值。", "sql": "SELECT ST_NumGeometries(ST_GeomFromEWKT('GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Count the number of geometric objects in GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2))) and return the result as an integer.", "source": "original", "new_id": 667}
{"id": 117, "function": "ST_NumGeometries", "question": "返回几何集合GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))中几何元素的数量统计结果。", "sql": "SELECT ST_NumGeometries(ST_GeomFromEWKT('GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Count the number of geometric objects in GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2))) and return the result as an integer.", "source": "original", "new_id": 668}
{"id": 117, "function": "ST_NumGeometries", "question": "输出GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))中几何对象的数量，要求返回整数值。", "sql": "SELECT ST_NumGeometries(ST_GeomFromEWKT('GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Count the number of geometric objects in GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2))) and return the result as an integer.", "source": "original", "new_id": 669}
{"id": 118, "function": "ST_NumGeometries", "question": "计算LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)这条闭合线串包含的几何元素数量。", "sql": "SELECT ST_NumGeometries(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of geometric objects contained within the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) polyline.", "source": "original", "new_id": 670}
{"id": 118, "function": "ST_NumGeometries", "question": "统计由坐标点(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)构成的线串的几何元素个数。", "sql": "SELECT ST_NumGeometries(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of geometric objects contained within the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) polyline.", "source": "original", "new_id": 671}
{"id": 118, "function": "ST_NumGeometries", "question": "计算由坐标点(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)组成的LINESTRING几何对象中包含的几何图形数量。", "sql": "SELECT ST_NumGeometries(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of geometric objects contained within the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) polyline.", "source": "original", "new_id": 672}
{"id": 118, "function": "ST_NumGeometries", "question": "返回由四个坐标点(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)构成的闭合线串的几何元素数量整数值。", "sql": "SELECT ST_NumGeometries(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of geometric objects contained within the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) polyline.", "source": "original", "new_id": 673}
{"id": 118, "function": "ST_NumGeometries", "question": "输出LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)线串的组成部分计数结果。", "sql": "SELECT ST_NumGeometries(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of geometric objects contained within the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) polyline.", "source": "original", "new_id": 674}
{"id": 118, "function": "ST_NumGeometries", "question": "输出LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)这条折线中包含的几何对象数量。", "sql": "SELECT ST_NumGeometries(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of geometric objects contained within the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07) polyline.", "source": "original", "new_id": 675}
{"id": 119, "function": "ST_NumPatches", "question": "计算由6个面（坐标分别为：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))）组成的多面体表面的面的数量。", "sql": "SELECT ST_NumPatches(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[6]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of patch faces contained in the POLYHEDRALSURFACE geometry, which consists of 6 three-dimensional polygonal faces with the following coordinates in order: first face ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), second face ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), third face ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), fourth face ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), fifth face ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), sixth face ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 676}
{"id": 119, "function": "ST_NumPatches", "question": "精确统计POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )几何中所有面的的数量。", "sql": "SELECT ST_NumPatches(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[6]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of patch faces contained in the POLYHEDRALSURFACE geometry, which consists of 6 three-dimensional polygonal faces with the following coordinates in order: first face ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), second face ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), third face ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), fourth face ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), fifth face ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), sixth face ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 677}
{"id": 119, "function": "ST_NumPatches", "question": "计算由EWKT格式定义的POLYHEDRALSURFACE几何体的面片数量，该几何体由6个三维多边形面组成，具体坐标分别为：第一个面((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0))，第二个面((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))，第三个面((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0))，第四个面((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0))，第五个面((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0))，第六个面((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_NumPatches(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[6]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of patch faces contained in the POLYHEDRALSURFACE geometry, which consists of 6 three-dimensional polygonal faces with the following coordinates in order: first face ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), second face ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), third face ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), fourth face ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), fifth face ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), sixth face ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 678}
{"id": 119, "function": "ST_NumPatches", "question": "输出多面体表面几何POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )的面的数量，结果为整数值。", "sql": "SELECT ST_NumPatches(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[6]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of patch faces contained in the POLYHEDRALSURFACE geometry, which consists of 6 three-dimensional polygonal faces with the following coordinates in order: first face ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), second face ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), third face ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), fourth face ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), fifth face ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), sixth face ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 679}
{"id": 119, "function": "ST_NumPatches", "question": "输出POLYHEDRALSURFACE几何体由6个面片组成，其顶点坐标分别为((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))时，该几何体包含的面片数量。", "sql": "SELECT ST_NumPatches(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[6]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of patch faces contained in the POLYHEDRALSURFACE geometry, which consists of 6 three-dimensional polygonal faces with the following coordinates in order: first face ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), second face ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), third face ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), fourth face ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), fifth face ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), sixth face ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 680}
{"id": 119, "function": "ST_NumPatches", "question": "输出POLYHEDRALSURFACE几何体包含的补丁面数量，该几何体由6个三维多边形面组成，具体坐标依次为：第一个面((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0))，第二个面((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))，第三个面((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0))，第四个面((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0))，第五个面((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0))，第六个面((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_NumPatches(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[6]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of patch faces contained in the POLYHEDRALSURFACE geometry, which consists of 6 three-dimensional polygonal faces with the following coordinates in order: first face ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), second face ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), third face ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), fourth face ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), fifth face ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), sixth face ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 681}
{"id": 120, "function": "ST_NumPoints", "question": "计算由坐标点(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)构成的折线的顶点数量。", "sql": "SELECT ST_NumPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices contained in the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07).", "source": "original", "new_id": 682}
{"id": 120, "function": "ST_NumPoints", "question": "统计LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)这条闭合线段的坐标点数量。", "sql": "SELECT ST_NumPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices contained in the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07).", "source": "original", "new_id": 683}
{"id": 120, "function": "ST_NumPoints", "question": "计算由坐标点(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)构成的LINESTRING几何对象中包含的顶点数量。", "sql": "SELECT ST_NumPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices contained in the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07).", "source": "original", "new_id": 684}
{"id": 120, "function": "ST_NumPoints", "question": "输出LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)的顶点数量整数值。", "sql": "SELECT ST_NumPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices contained in the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07).", "source": "original", "new_id": 685}
{"id": 120, "function": "ST_NumPoints", "question": "返回线串几何LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)的顶点计数结果。", "sql": "SELECT ST_NumPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices contained in the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07).", "source": "original", "new_id": 686}
{"id": 120, "function": "ST_NumPoints", "question": "输出LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)这条折线所包含的顶点数量。", "sql": "SELECT ST_NumPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the number of vertices contained in the LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07).", "source": "original", "new_id": 687}
{"id": 121, "function": "ST_PatchN", "question": "从POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )中提取第2个面片，输出其EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_PatchN(geom, 2)) As geomewkt\nFROM (\nVALUES (ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ) As foo(geom);", "execution_result": [["POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the 2nd face (index 2) of a POLYHEDRALSURFACE geometry composed of 6 3D polygonal faces with vertex coordinates: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), and ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 688}
{"id": 121, "function": "ST_PatchN", "question": "将多面体曲面POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )的第二个面片转换为扩展WKT字符串。", "sql": "SELECT ST_AsEWKT(ST_PatchN(geom, 2)) As geomewkt\nFROM (\nVALUES (ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ) As foo(geom);", "execution_result": [["POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the 2nd face (index 2) of a POLYHEDRALSURFACE geometry composed of 6 3D polygonal faces with vertex coordinates: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), and ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 689}
{"id": 121, "function": "ST_PatchN", "question": "从POLYHEDRALSURFACE对象中提取第2个面片（索引为2），该面片由顶点坐标((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0))构成的三维多边形，并将结果以EWKT格式输出。原始多面体表面包含6个面片，完整坐标为：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0))、((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))、((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0))、((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0))、((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0))、((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_AsEWKT(ST_PatchN(geom, 2)) As geomewkt\nFROM (\nVALUES (ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ) As foo(geom);", "execution_result": [["POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the 2nd face (index 2) of a POLYHEDRALSURFACE geometry composed of 6 3D polygonal faces with vertex coordinates: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), and ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 690}
{"id": 121, "function": "ST_PatchN", "question": "输出多面体曲面POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )第2个面片的EWKT格式字符串，包含三维坐标和SRID信息。", "sql": "SELECT ST_AsEWKT(ST_PatchN(geom, 2)) As geomewkt\nFROM (\nVALUES (ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ) As foo(geom);", "execution_result": [["POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the 2nd face (index 2) of a POLYHEDRALSURFACE geometry composed of 6 3D polygonal faces with vertex coordinates: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), and ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 691}
{"id": 121, "function": "ST_PatchN", "question": "以EWKT格式返回多面体曲面POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )中索引为2的面片几何数据。", "sql": "SELECT ST_AsEWKT(ST_PatchN(geom, 2)) As geomewkt\nFROM (\nVALUES (ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ) As foo(geom);", "execution_result": [["POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the 2nd face (index 2) of a POLYHEDRALSURFACE geometry composed of 6 3D polygonal faces with vertex coordinates: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), and ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 692}
{"id": 121, "function": "ST_PatchN", "question": "输出POLYHEDRALSURFACE几何体的第2个面片（索引为2）的EWKT字符串表示，该几何体由6个三维多边形面组成，顶点坐标分别为：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0))、((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))、((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0))、((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0))、((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0))和((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_AsEWKT(ST_PatchN(geom, 2)) As geomewkt\nFROM (\nVALUES (ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ) As foo(geom);", "execution_result": [["POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of the 2nd face (index 2) of a POLYHEDRALSURFACE geometry composed of 6 3D polygonal faces with vertex coordinates: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), and ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 693}
{"id": 122, "function": "ST_PointN", "question": "将LINESTRING(0 0, 1 1, 2 2)这条折线的每个顶点分别转换为POINT对象，并以WKT格式输出。", "sql": "SELECT ST_AsText( ST_PointN( column1, generate_series(1, ST_NPoints(column1)) )) \nFROM ( VALUES ('LINESTRING(0 0, 1 1, 2 2)'::geometry) ) AS foo;", "execution_result": [["POINT(0 0)"], ["POINT(1 1)"], ["POINT(2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of each point in LINESTRING(0 0, 1 1, 2 2), sequentially ordered by the points' positions.", "source": "original", "new_id": 694}
{"id": 122, "function": "ST_PointN", "question": "输出LINESTRING(0 0, 1 1, 2 2)中每个顶点的WKT文本表示。", "sql": "SELECT ST_AsText( ST_PointN( column1, generate_series(1, ST_NPoints(column1)) )) \nFROM ( VALUES ('LINESTRING(0 0, 1 1, 2 2)'::geometry) ) AS foo;", "execution_result": [["POINT(0 0)"], ["POINT(1 1)"], ["POINT(2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of each point in LINESTRING(0 0, 1 1, 2 2), sequentially ordered by the points' positions.", "source": "original", "new_id": 695}
{"id": 122, "function": "ST_PointN", "question": "提取LINESTRING(0 0, 1 1, 2 2)顶点索引为2的作为点对象。", "sql": "SELECT ST_PointN('LINESTRING(0 0, 1 1, 2 2)'::geometry, 2);", "execution_result": [["0101000000000000000000F03F000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Extract the vertex with index 2 from LINESTRING(0 0, 1 1, 2 2) as a point object.", "source": "original", "new_id": 696}
{"id": 122, "function": "ST_PointN", "question": "以WKT文本格式输出LINESTRING(0 0, 1 1, 2 2)分解后的三个点对象。", "sql": "SELECT ST_AsText( ST_PointN( column1, generate_series(1, ST_NPoints(column1)) )) \nFROM ( VALUES ('LINESTRING(0 0, 1 1, 2 2)'::geometry) ) AS foo;", "execution_result": [["POINT(0 0)"], ["POINT(1 1)"], ["POINT(2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of each point in LINESTRING(0 0, 1 1, 2 2), sequentially ordered by the points' positions.", "source": "original", "new_id": 697}
{"id": 122, "function": "ST_PointN", "question": "返回由POINT(0 0)、POINT(1 1)和POINT(2 2)构建的折线顶点转换结果的文本表示。", "sql": "SELECT ST_AsText( ST_PointN( column1, generate_series(1, ST_NPoints(column1)) )) \nFROM ( VALUES ('LINESTRING(0 0, 1 1, 2 2)'::geometry) ) AS foo;", "execution_result": [["POINT(0 0)"], ["POINT(1 1)"], ["POINT(2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of each point in LINESTRING(0 0, 1 1, 2 2), sequentially ordered by the points' positions.", "source": "original", "new_id": 698}
{"id": 122, "function": "ST_PointN", "question": "输出LINESTRING(0 0, 1 1, 2 2)中每个点的WKT字符串表示，按点的顺序依次输出。", "sql": "SELECT ST_AsText( ST_PointN( column1, generate_series(1, ST_NPoints(column1)) )) \nFROM ( VALUES ('LINESTRING(0 0, 1 1, 2 2)'::geometry) ) AS foo;", "execution_result": [["POINT(0 0)"], ["POINT(1 1)"], ["POINT(2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of each point in LINESTRING(0 0, 1 1, 2 2), sequentially ordered by the points' positions.", "source": "original", "new_id": 699}
{"id": 124, "function": "ST_StartPoint", "question": "从圆形弧线CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)中提取起点，并以WKT格式输出。", "sql": "SELECT ST_AsText(ST_StartPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(5 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the starting point coordinates of the circular arc line CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3).", "source": "original", "new_id": 700}
{"id": 124, "function": "ST_StartPoint", "question": "输出圆形弧线CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)的第一个点的坐标文本。", "sql": "SELECT ST_AsText(ST_StartPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(5 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the starting point coordinates of the circular arc line CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3).", "source": "original", "new_id": 701}
{"id": 124, "function": "ST_StartPoint", "question": "直接获取圆形弧线CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)的起点几何对象。", "sql": "SELECT ST_StartPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry);", "execution_result": [["010100000000000000000014400000000000000040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Retrieve the starting point geometry of the circular arc CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3) directly.", "source": "original", "new_id": 702}
{"id": 124, "function": "ST_StartPoint", "question": "输出圆形弧线CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)的起点坐标的WKT字符串。", "sql": "SELECT ST_AsText(ST_StartPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(5 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the starting point coordinates of the circular arc line CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3).", "source": "original", "new_id": 703}
{"id": 124, "function": "ST_StartPoint", "question": "以WKT文本格式返回给定圆形弧线CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)的第一个点的坐标。", "sql": "SELECT ST_AsText(ST_StartPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(5 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the starting point coordinates of the circular arc line CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3).", "source": "original", "new_id": 704}
{"id": 124, "function": "ST_StartPoint", "question": "输出圆弧线CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)的起始点坐标的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_StartPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(5 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the starting point coordinates of the circular arc line CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3).", "source": "original", "new_id": 705}
{"id": 125, "function": "ST_StartPoint", "question": "获取LINESTRING(0 1 1, 0 2 2)这条三维线段的起点坐标，输出为带SRID的扩展WKT格式。", "sql": "SELECT ST_AsEWKT(ST_StartPoint('LINESTRING(0 1 1, 0 2 2)'::geometry));", "execution_result": [["POINT(0 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the starting point coordinates of the 3D linestring LINESTRING(0 1 1, 0 2 2) as an EWKT-formatted string including SRID.", "source": "original", "new_id": 706}
{"id": 125, "function": "ST_StartPoint", "question": "从由点(0 1 1)和(0 2 2)组成的三维线段中提取起点，返回EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_StartPoint('LINESTRING(0 1 1, 0 2 2)'::geometry));", "execution_result": [["POINT(0 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the starting point coordinates of the 3D linestring LINESTRING(0 1 1, 0 2 2) as an EWKT-formatted string including SRID.", "source": "original", "new_id": 707}
{"id": 125, "function": "ST_StartPoint", "question": "将三维线段LINESTRING(0 1 1, 0 2 2)的第一个顶点以EWKT格式输出，其中线段由两个三维点组成：第一个点坐标为X=0 Y=1 Z=1，第二个点坐标为X=0 Y=2 Z=2。", "sql": "SELECT ST_AsEWKT(ST_StartPoint('LINESTRING(0 1 1, 0 2 2)'::geometry));", "execution_result": [["POINT(0 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the starting point coordinates of the 3D linestring LINESTRING(0 1 1, 0 2 2) as an EWKT-formatted string including SRID.", "source": "original", "new_id": 708}
{"id": 125, "function": "ST_StartPoint", "question": "输出三维线段LINESTRING(0 1 1, 0 2 2)起点的扩展WKT格式坐标。", "sql": "SELECT ST_AsEWKT(ST_StartPoint('LINESTRING(0 1 1, 0 2 2)'::geometry));", "execution_result": [["POINT(0 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the starting point coordinates of the 3D linestring LINESTRING(0 1 1, 0 2 2) as an EWKT-formatted string including SRID.", "source": "original", "new_id": 709}
{"id": 125, "function": "ST_StartPoint", "question": "以包含SRID的EWKT文本格式返回给定三维线段LINESTRING(0 1 1, 0 2 2)的第一个顶点坐标。", "sql": "SELECT ST_AsEWKT(ST_StartPoint('LINESTRING(0 1 1, 0 2 2)'::geometry));", "execution_result": [["POINT(0 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the starting point coordinates of the 3D linestring LINESTRING(0 1 1, 0 2 2) as an EWKT-formatted string including SRID.", "source": "original", "new_id": 710}
{"id": 125, "function": "ST_StartPoint", "question": "输出三维线段LINESTRING(0 1 1, 0 2 2)的起始点坐标，要求返回结果为包含SRID的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_StartPoint('LINESTRING(0 1 1, 0 2 2)'::geometry));", "execution_result": [["POINT(0 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the starting point coordinates of the 3D linestring LINESTRING(0 1 1, 0 2 2) as an EWKT-formatted string including SRID.", "source": "original", "new_id": 711}
{"id": 126, "function": "ST_StartPoint", "question": "获取LINESTRING(0 1, 0 2)这条线段的起点坐标，输出为WKT格式。", "sql": "SELECT ST_AsText(ST_StartPoint('LINESTRING(0 1, 0 2)'::geometry));", "execution_result": [["POINT(0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the start point coordinates of the LINESTRING(0 1, 0 2) segment.", "source": "original", "new_id": 712}
{"id": 126, "function": "ST_StartPoint", "question": "将线段LINESTRING(0 1, 0 2)的起点转换为文本格式输出。", "sql": "SELECT ST_AsText(ST_StartPoint('LINESTRING(0 1, 0 2)'::geometry));", "execution_result": [["POINT(0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the start point coordinates of the LINESTRING(0 1, 0 2) segment.", "source": "original", "new_id": 713}
{"id": 126, "function": "ST_StartPoint", "question": "将LINESTRING(0 1, 0 2)这条折线的起点坐标以WKT格式输出，其中折线由两个顶点组成，第一个顶点是(0 1)，第二个顶点是(0 2)。", "sql": "SELECT ST_AsText(ST_StartPoint('LINESTRING(0 1, 0 2)'::geometry));", "execution_result": [["POINT(0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the start point coordinates of the LINESTRING(0 1, 0 2) segment.", "source": "original", "new_id": 714}
{"id": 126, "function": "ST_StartPoint", "question": "输出LINESTRING(0 1, 0 2)线段起点的WKT文本表示。", "sql": "SELECT ST_AsText(ST_StartPoint('LINESTRING(0 1, 0 2)'::geometry));", "execution_result": [["POINT(0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the start point coordinates of the LINESTRING(0 1, 0 2) segment.", "source": "original", "new_id": 715}
{"id": 126, "function": "ST_StartPoint", "question": "以Well-Known Text格式返回线段LINESTRING(0 1, 0 2)的第一个顶点坐标。", "sql": "SELECT ST_AsText(ST_StartPoint('LINESTRING(0 1, 0 2)'::geometry));", "execution_result": [["POINT(0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the start point coordinates of the LINESTRING(0 1, 0 2) segment.", "source": "original", "new_id": 716}
{"id": 126, "function": "ST_StartPoint", "question": "输出LINESTRING(0 1, 0 2)线段的起始点坐标的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_StartPoint('LINESTRING(0 1, 0 2)'::geometry));", "execution_result": [["POINT(0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the start point coordinates of the LINESTRING(0 1, 0 2) segment.", "source": "original", "new_id": 717}
{"id": 127, "function": "ST_StartPoint", "question": "检查POINT(0 1)几何对象的起始点是否为NULL。", "sql": "SELECT ST_StartPoint('POINT(0 1)'::geometry) IS NULL AS is_null;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result `is_null` indicating whether the start point of the 2D point POINT(0 1) is NULL.", "source": "original", "new_id": 718}
{"id": 127, "function": "ST_StartPoint", "question": "验证坐标为(0,1)的点几何的ST_StartPoint函数返回值是否为NULL。", "sql": "SELECT ST_StartPoint('POINT(0 1)'::geometry) IS NULL AS is_null;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result `is_null` indicating whether the start point of the 2D point POINT(0 1) is NULL.", "source": "original", "new_id": 719}
{"id": 127, "function": "ST_StartPoint", "question": "获取POINT(0 1)几何对象的起始点。", "sql": "SELECT ST_StartPoint('POINT(0 1)'::geometry);", "execution_result": [["01010000000000000000000000000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Get the starting point of the geometry object POINT(0 1).", "source": "original", "new_id": 720}
{"id": 127, "function": "ST_StartPoint", "question": "输出POINT(0 1)几何对象起点检测结果的布尔值。", "sql": "SELECT ST_StartPoint('POINT(0 1)'::geometry) IS NULL AS is_null;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result `is_null` indicating whether the start point of the 2D point POINT(0 1) is NULL.", "source": "original", "new_id": 721}
{"id": 127, "function": "ST_StartPoint", "question": "返回一个布尔值表示POINT(0 1)的起点是否为NULL。", "sql": "SELECT ST_StartPoint('POINT(0 1)'::geometry) IS NULL AS is_null;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result `is_null` indicating whether the start point of the 2D point POINT(0 1) is NULL.", "source": "original", "new_id": 722}
{"id": 127, "function": "ST_StartPoint", "question": "输出判断二维点POINT(0 1)的起始点是否为NULL的结果，返回布尔值is_null。", "sql": "SELECT ST_StartPoint('POINT(0 1)'::geometry) IS NULL AS is_null;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean result `is_null` indicating whether the start point of the 2D point POINT(0 1) is NULL.", "source": "original", "new_id": 723}
{"id": 128, "function": "ST_Summary", "question": "输出LINESTRING(0 0, 1 1)这条折线的空间属性摘要。", "sql": "SELECT ST_Summary(ST_GeomFromText('LINESTRING(0 0, 1 1)')) as geom;", "execution_result": [["LineString[] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the detailed summary information of the LINESTRING(0 0, 1 1) geometry object, including its type, dimension, coordinate extent, and other attributes.", "source": "original", "new_id": 724}
{"id": 128, "function": "ST_Summary", "question": "计算从坐标(0 0)到(1 1)的线段的几何摘要信息。", "sql": "SELECT ST_Summary(ST_GeomFromText('LINESTRING(0 0, 1 1)')) as geom;", "execution_result": [["LineString[] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the detailed summary information of the LINESTRING(0 0, 1 1) geometry object, including its type, dimension, coordinate extent, and other attributes.", "source": "original", "new_id": 725}
{"id": 128, "function": "ST_Summary", "question": "对WKT格式的线几何LINESTRING(0 0, 1 1)调用摘要函数。", "sql": "SELECT ST_Summary('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [["LineString[] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate a summary function call for the WKT-formatted line geometry LINESTRING(0 0, 1 1).", "source": "original", "new_id": 726}
{"id": 128, "function": "ST_Summary", "question": "以表格形式返回LINESTRING(0 0, 1 1)的几何元数据摘要。", "sql": "SELECT ST_Summary(ST_GeomFromText('LINESTRING(0 0, 1 1)')) as geom;", "execution_result": [["LineString[] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the detailed summary information of the LINESTRING(0 0, 1 1) geometry object, including its type, dimension, coordinate extent, and other attributes.", "source": "original", "new_id": 727}
{"id": 128, "function": "ST_Summary", "question": "将折线LINESTRING(0 0, 1 1)的空间属性摘要输出到geom列。", "sql": "SELECT ST_Summary(ST_GeomFromText('LINESTRING(0 0, 1 1)')) as geom;", "execution_result": [["LineString[] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the detailed summary information of the LINESTRING(0 0, 1 1) geometry object, including its type, dimension, coordinate extent, and other attributes.", "source": "original", "new_id": 728}
{"id": 128, "function": "ST_Summary", "question": "输出LINESTRING(0 0, 1 1)几何对象的详细摘要信息，包括类型、维度、坐标范围等属性。", "sql": "SELECT ST_Summary(ST_GeomFromText('LINESTRING(0 0, 1 1)')) as geom;", "execution_result": [["LineString[] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the detailed summary information of the LINESTRING(0 0, 1 1) geometry object, including its type, dimension, coordinate extent, and other attributes.", "source": "original", "new_id": 729}
{"id": 129, "function": "ST_Summary", "question": "获取由坐标点(0 0)、(1 1)、(1 2)、(1 1)、(0 0)组成的多边形的地理空间摘要信息。", "sql": "SELECT ST_Summary(ST_GeogFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) geog;", "execution_result": [["Polygon[BGS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geospatial object summary information for POLYGON((0 0, 1 1, 1 2, 1 1, 0 0)), including metadata such as geometry type, coordinate bounds, and vertex count.", "source": "original", "new_id": 730}
{"id": 129, "function": "ST_Summary", "question": "计算POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))这个具体几何对象的空间属性摘要。", "sql": "SELECT ST_Summary(ST_GeogFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) geog;", "execution_result": [["Polygon[BGS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geospatial object summary information for POLYGON((0 0, 1 1, 1 2, 1 1, 0 0)), including metadata such as geometry type, coordinate bounds, and vertex count.", "source": "original", "new_id": 731}
{"id": 129, "function": "ST_Summary", "question": "对由坐标点序列(0 0, 1 1, 1 2, 1 1, 0 0)构成的闭合多边形执行ST_Summary函数，该函数将返回该地理对象的类型、维度、坐标范围等元数据信息，并将结果列命名为geog。", "sql": "SELECT ST_Summary(ST_GeogFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) geog;", "execution_result": [["Polygon[BGS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geospatial object summary information for POLYGON((0 0, 1 1, 1 2, 1 1, 0 0)), including metadata such as geometry type, coordinate bounds, and vertex count.", "source": "original", "new_id": 732}
{"id": 129, "function": "ST_Summary", "question": "输出POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))的空间属性摘要信息。", "sql": "SELECT ST_Summary(ST_GeogFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) geog;", "execution_result": [["Polygon[BGS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geospatial object summary information for POLYGON((0 0, 1 1, 1 2, 1 1, 0 0)), including metadata such as geometry type, coordinate bounds, and vertex count.", "source": "original", "new_id": 733}
{"id": 129, "function": "ST_Summary", "question": "以表格形式返回指定多边形POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))的空间属性统计结果。", "sql": "SELECT ST_Summary(ST_GeogFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) geog;", "execution_result": [["Polygon[BGS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geospatial object summary information for POLYGON((0 0, 1 1, 1 2, 1 1, 0 0)), including metadata such as geometry type, coordinate bounds, and vertex count.", "source": "original", "new_id": 734}
{"id": 129, "function": "ST_Summary", "question": "输出POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))的地理对象摘要信息，包括几何类型、坐标范围、顶点数等元数据。", "sql": "SELECT ST_Summary(ST_GeogFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) geog;", "execution_result": [["Polygon[BGS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geospatial object summary information for POLYGON((0 0, 1 1, 1 2, 1 1, 0 0)), including metadata such as geometry type, coordinate bounds, and vertex count.", "source": "original", "new_id": 735}
{"id": 130, "function": "ST_Summary", "question": "获取LINESTRING(0 0 1, 1 1 1)这个三维线串的空间属性摘要。", "sql": "SELECT ST_Summary(ST_GeogFromText('LINESTRING(0 0 1, 1 1 1)'));", "execution_result": [["LineString[ZGS] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geospatial summary information of the 3D line object LINESTRING(0 0 1, 1 1 1) in the format of a PostGIS-standard spatial object summary report.", "source": "original", "new_id": 736}
{"id": 130, "function": "ST_Summary", "question": "输出包含点(0,0,1)到点(1,1,1)的三维线串的详细空间属性。", "sql": "SELECT ST_Summary(ST_GeogFromText('LINESTRING(0 0 1, 1 1 1)'));", "execution_result": [["LineString[ZGS] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geospatial summary information of the 3D line object LINESTRING(0 0 1, 1 1 1) in the format of a PostGIS-standard spatial object summary report.", "source": "original", "new_id": 737}
{"id": 130, "function": "ST_Summary", "question": "对地理空间线对象LINESTRING(0 0 1, 1 1 1)执行ST_Summary函数，获取其元数据摘要信息。", "sql": "SELECT ST_Summary(ST_GeogFromText('LINESTRING(0 0 1, 1 1 1)'));", "execution_result": [["LineString[ZGS] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geospatial summary information of the 3D line object LINESTRING(0 0 1, 1 1 1) in the format of a PostGIS-standard spatial object summary report.", "source": "original", "new_id": 738}
{"id": 130, "function": "ST_Summary", "question": "返回三维线串LINESTRING(0 0 1, 1 1 1)的空间属性摘要文本报告。", "sql": "SELECT ST_Summary(ST_GeogFromText('LINESTRING(0 0 1, 1 1 1)'));", "execution_result": [["LineString[ZGS] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geospatial summary information of the 3D line object LINESTRING(0 0 1, 1 1 1) in the format of a PostGIS-standard spatial object summary report.", "source": "original", "new_id": 739}
{"id": 130, "function": "ST_Summary", "question": "以结构化文本格式输出三维线串LINESTRING(0 0 1, 1 1 1)的元数据信息。", "sql": "SELECT ST_Summary(ST_GeogFromText('LINESTRING(0 0 1, 1 1 1)'));", "execution_result": [["LineString[ZGS] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geospatial summary information of the 3D line object LINESTRING(0 0 1, 1 1 1) in the format of a PostGIS-standard spatial object summary report.", "source": "original", "new_id": 740}
{"id": 130, "function": "ST_Summary", "question": "输出三维线对象LINESTRING(0 0 1, 1 1 1)的地理空间摘要信息，要求返回格式为PostGIS标准的空间对象摘要报告。", "sql": "SELECT ST_Summary(ST_GeogFromText('LINESTRING(0 0 1, 1 1 1)'));", "execution_result": [["LineString[ZGS] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geospatial summary information of the 3D line object LINESTRING(0 0 1, 1 1 1) in the format of a PostGIS-standard spatial object summary report.", "source": "original", "new_id": 741}
{"id": 131, "function": "ST_Summary", "question": "输出SRID为4326的三维多边形POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))的空间摘要信息。", "sql": "SELECT ST_Summary(ST_GeomFromText('SRID=4326;POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))'));", "execution_result": [["Polygon[ZBS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial summary information of the 3D polygon POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1)) with SRID 4326, requiring the output format to be the standard output of the ST_Summary function.", "source": "original", "new_id": 742}
{"id": 131, "function": "ST_Summary", "question": "计算WGS84坐标系下的由坐标点(0 0 1)、(1 1 2)、(1 2 3)、(1 1 1)、(0 0 1)构成的三维多边形的空间属性摘要。", "sql": "SELECT ST_Summary(ST_GeomFromText('SRID=4326;POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))'));", "execution_result": [["Polygon[ZBS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial summary information of the 3D polygon POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1)) with SRID 4326, requiring the output format to be the standard output of the ST_Summary function.", "source": "original", "new_id": 743}
{"id": 131, "function": "ST_Summary", "question": "对SRID为4326的三维多边形POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))执行ST_Summary函数，获取其几何类型、维度、SRID和顶点数等元数据信息。", "sql": "SELECT ST_Summary(ST_GeomFromText('SRID=4326;POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))'));", "execution_result": [["Polygon[ZBS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial summary information of the 3D polygon POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1)) with SRID 4326, requiring the output format to be the standard output of the ST_Summary function.", "source": "original", "new_id": 744}
{"id": 131, "function": "ST_Summary", "question": "输出三维多边形'SRID=4326;POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))'的空间摘要结果，包括几何类型、坐标范围和SRID等信息。", "sql": "SELECT ST_Summary(ST_GeomFromText('SRID=4326;POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))'));", "execution_result": [["Polygon[ZBS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial summary information of the 3D polygon POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1)) with SRID 4326, requiring the output format to be the standard output of the ST_Summary function.", "source": "original", "new_id": 745}
{"id": 131, "function": "ST_Summary", "question": "输出SRID为4326的三维多边形POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))的几何摘要信息，要求返回格式为ST_Summary函数的标准文本描述。", "sql": "SELECT ST_Summary(ST_GeomFromText('SRID=4326;POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))'));", "execution_result": [["Polygon[ZBS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial summary information of the 3D polygon POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1)) with SRID 4326, requiring the output format to be the standard output of the ST_Summary function.", "source": "original", "new_id": 746}
{"id": 131, "function": "ST_Summary", "question": "输出SRID为4326的三维多边形POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))的空间摘要信息，要求返回格式为ST_Summary函数的标准输出。", "sql": "SELECT ST_Summary(ST_GeomFromText('SRID=4326;POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))'));", "execution_result": [["Polygon[ZBS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial summary information of the 3D polygon POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1)) with SRID 4326, requiring the output format to be the standard output of the ST_Summary function.", "source": "original", "new_id": 747}
{"id": 132, "function": "ST_X", "question": "获取POINT(1 2 3 4)这个三维点（含M值）的X坐标值。", "sql": "SELECT ST_X(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the X-coordinate value from the EWKT-formatted POINT(1 2 3 4) geometry object, which is a four-dimensional point containing X, Y, Z, and M values.", "source": "original", "new_id": 748}
{"id": 132, "function": "ST_X", "question": "从EWKT格式定义的三维点POINT(1 2 3 4)中提取X坐标。", "sql": "SELECT ST_X(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the X-coordinate value from the EWKT-formatted POINT(1 2 3 4) geometry object, which is a four-dimensional point containing X, Y, Z, and M values.", "source": "original", "new_id": 749}
{"id": 132, "function": "ST_X", "question": "从EWKT格式的POINT(1 2 3 4)几何对象中提取X坐标值，其中该点为四维点（包含X=1、Y=2、Z=3、M=4坐标分量），使用ST_GeomFromEWKT函数解析EWKT字符串，再通过ST_X函数获取X坐标。", "sql": "SELECT ST_X(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the X-coordinate value from the EWKT-formatted POINT(1 2 3 4) geometry object, which is a four-dimensional point containing X, Y, Z, and M values.", "source": "original", "new_id": 750}
{"id": 132, "function": "ST_X", "question": "输出带M值的POINT(1 2 3 4)的X坐标值。", "sql": "SELECT ST_X(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the X-coordinate value from the EWKT-formatted POINT(1 2 3 4) geometry object, which is a four-dimensional point containing X, Y, Z, and M values.", "source": "original", "new_id": 751}
{"id": 132, "function": "ST_X", "question": "返回含M值的三维点POINT(1 2 3 4)的第一个坐标值作为数值结果。", "sql": "SELECT ST_X(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the X-coordinate value from the EWKT-formatted POINT(1 2 3 4) geometry object, which is a four-dimensional point containing X, Y, Z, and M values.", "source": "original", "new_id": 752}
{"id": 132, "function": "ST_X", "question": "输出EWKT格式的POINT(1 2 3 4)几何对象中X坐标的数值，该点为包含X、Y、Z和M值的四维点。", "sql": "SELECT ST_X(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the X-coordinate value from the EWKT-formatted POINT(1 2 3 4) geometry object, which is a four-dimensional point containing X, Y, Z, and M values.", "source": "original", "new_id": 753}
{"id": 133, "function": "ST_X", "question": "计算由点(1 2 3 4)和点(1 1 1 1)构成的线段的质心X坐标。", "sql": "SELECT ST_X(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the X-coordinate value of the centroid of the LINESTRING(1 2 3 4, 1 1 1 1) geometry object, returning the result as a floating-point number.", "source": "original", "new_id": 754}
{"id": 133, "function": "ST_X", "question": "对LINESTRING(1 2 3 4, 1 1 1 1)这个三维线段求质心的X坐标。", "sql": "SELECT ST_X(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the X-coordinate value of the centroid of the LINESTRING(1 2 3 4, 1 1 1 1) geometry object, returning the result as a floating-point number.", "source": "original", "new_id": 755}
{"id": 133, "function": "ST_X", "question": "计算由LINESTRING(1 2 3 4, 1 1 1 1)这条带有X/Y/Z/M四维坐标的线段的质心，并提取该质心的X坐标值。其中线段起点坐标为(1,2,3,4)，终点坐标为(1,1,1,1)，使用ST_GeomFromEWKT函数解析EWKT格式，ST_Centroid函数计算几何中心，ST_X函数提取X坐标。", "sql": "SELECT ST_X(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the X-coordinate value of the centroid of the LINESTRING(1 2 3 4, 1 1 1 1) geometry object, returning the result as a floating-point number.", "source": "original", "new_id": 756}
{"id": 133, "function": "ST_X", "question": "输出LINESTRING(1 2 3 4, 1 1 1 1)线段质心的X坐标数值。", "sql": "SELECT ST_X(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the X-coordinate value of the centroid of the LINESTRING(1 2 3 4, 1 1 1 1) geometry object, returning the result as a floating-point number.", "source": "original", "new_id": 757}
{"id": 133, "function": "ST_X", "question": "返回三维线段LINESTRING(1 2 3 4, 1 1 1 1)中心点的X坐标值。", "sql": "SELECT ST_X(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the X-coordinate value of the centroid of the LINESTRING(1 2 3 4, 1 1 1 1) geometry object, returning the result as a floating-point number.", "source": "original", "new_id": 758}
{"id": 133, "function": "ST_X", "question": "输出LINESTRING(1 2 3 4, 1 1 1 1)几何对象的质心的X坐标值，要求返回结果为浮点数值。", "sql": "SELECT ST_X(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the X-coordinate value of the centroid of the LINESTRING(1 2 3 4, 1 1 1 1) geometry object, returning the result as a floating-point number.", "source": "original", "new_id": 759}
{"id": 134, "function": "ST_Y", "question": "计算由点(1,2,3,4)和点(1,1,1,1)构成的带测量值M的三维线段的质心Y坐标。", "sql": "SELECT ST_Y(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the centroid Y-coordinate value of the LINESTRING(1 2 3 4, 1 1 1 1) geometry, where the LINESTRING contains two 3D points with M values (1 2 3 4) and (1 1 1 1).", "source": "original", "new_id": 760}
{"id": 134, "function": "ST_Y", "question": "对LINESTRING(1 2 3 4, 1 1 1 1)这个带测量值M的三维线要素求质心并返回Y坐标值。", "sql": "SELECT ST_Y(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the centroid Y-coordinate value of the LINESTRING(1 2 3 4, 1 1 1 1) geometry, where the LINESTRING contains two 3D points with M values (1 2 3 4) and (1 1 1 1).", "source": "original", "new_id": 761}
{"id": 134, "function": "ST_Y", "question": "计算由LINESTRING(1 2 3 4, 1 1 1 1)这条带有XYZM坐标的线段的几何中心点，并返回该中心点的Y坐标值。", "sql": "SELECT ST_Y(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the centroid Y-coordinate value of the LINESTRING(1 2 3 4, 1 1 1 1) geometry, where the LINESTRING contains two 3D points with M values (1 2 3 4) and (1 1 1 1).", "source": "original", "new_id": 762}
{"id": 134, "function": "ST_Y", "question": "输出由(1,2,3,4)和(1,1,1,1)构成的测量值M的三维线段质心的Y坐标浮点数值。", "sql": "SELECT ST_Y(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the centroid Y-coordinate value of the LINESTRING(1 2 3 4, 1 1 1 1) geometry, where the LINESTRING contains two 3D points with M values (1 2 3 4) and (1 1 1 1).", "source": "original", "new_id": 763}
{"id": 134, "function": "ST_Y", "question": "返回测量值M的三维线段LINESTRING(1 2 3 4, 1 1 1 1)几何中心点的垂直坐标。", "sql": "SELECT ST_Y(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the centroid Y-coordinate value of the LINESTRING(1 2 3 4, 1 1 1 1) geometry, where the LINESTRING contains two 3D points with M values (1 2 3 4) and (1 1 1 1).", "source": "original", "new_id": 764}
{"id": 134, "function": "ST_Y", "question": "输出LINESTRING(1 2 3 4, 1 1 1 1)几何对象的质心Y坐标值，其中LINESTRING包含两个带M值的三维点(1 2 3 4)和(1 1 1 1)。", "sql": "SELECT ST_Y(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the centroid Y-coordinate value of the LINESTRING(1 2 3 4, 1 1 1 1) geometry, where the LINESTRING contains two 3D points with M values (1 2 3 4) and (1 1 1 1).", "source": "original", "new_id": 765}
{"id": 135, "function": "ST_Y", "question": "从EWKT格式的POINT(1 2 3 4)（X=1, Y=2, Z=3, M=4）中提取Y坐标值。", "sql": "SELECT ST_Y(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the Y-coordinate value of the EWKT-formatted POINT(1 2 3 4) geometry object.", "source": "original", "new_id": 766}
{"id": 135, "function": "ST_Y", "question": "获取POINT(1 2 3 4)（三维点，带M值4）的Y坐标。", "sql": "SELECT ST_Y(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the Y-coordinate value of the EWKT-formatted POINT(1 2 3 4) geometry object.", "source": "original", "new_id": 767}
{"id": 135, "function": "ST_Y", "question": "从EWKT格式的POINT(1 2 3 4)几何对象中提取Y坐标值，其中该点包含X坐标1、Y坐标2、Z坐标3和M值4。", "sql": "SELECT ST_Y(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the Y-coordinate value of the EWKT-formatted POINT(1 2 3 4) geometry object.", "source": "original", "new_id": 768}
{"id": 135, "function": "ST_Y", "question": "输出POINT(1 2 3 4)的Y坐标值。", "sql": "SELECT ST_Y(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the Y-coordinate value of the EWKT-formatted POINT(1 2 3 4) geometry object.", "source": "original", "new_id": 769}
{"id": 135, "function": "ST_Y", "question": "返回三维点对象POINT(1 2 3 4)的Y坐标值，格式为数值类型。", "sql": "SELECT ST_Y(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the Y-coordinate value of the EWKT-formatted POINT(1 2 3 4) geometry object.", "source": "original", "new_id": 770}
{"id": 135, "function": "ST_Y", "question": "输出EWKT格式的POINT(1 2 3 4)几何对象中Y坐标的数值。", "sql": "SELECT ST_Y(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the Y-coordinate value of the EWKT-formatted POINT(1 2 3 4) geometry object.", "source": "original", "new_id": 771}
{"id": 136, "function": "ST_Z", "question": "从EWKT格式的POINT(1 2 3 4)中提取第三个坐标值（Z值）。", "sql": "SELECT ST_Z(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific numerical value of the Z-coordinate in the EWKT-formatted POINT(1 2 3 4) geometry object.", "source": "original", "new_id": 772}
{"id": 136, "function": "ST_Z", "question": "获取POINT(1 2 3 4)这个带有XYZM坐标的点对象的Z坐标值。", "sql": "SELECT ST_Z(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific numerical value of the Z-coordinate in the EWKT-formatted POINT(1 2 3 4) geometry object.", "source": "original", "new_id": 773}
{"id": 136, "function": "ST_Z", "question": "使用ST_Z函数获取POINT(1 2 3 4)的Z坐标值。", "sql": "SELECT ST_Z('POINT(1 2 3 4)');", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Use the ST_Z function to retrieve the Z-coordinate value of POINT(1 2 3 4).", "source": "original", "new_id": 774}
{"id": 136, "function": "ST_Z", "question": "输出POINT(1 2 3 4)的Z坐标值。", "sql": "SELECT ST_Z(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific numerical value of the Z-coordinate in the EWKT-formatted POINT(1 2 3 4) geometry object.", "source": "original", "new_id": 775}
{"id": 136, "function": "ST_Z", "question": "返回四维点对象POINT(1 2 3 4)的Z坐标数值结果。", "sql": "SELECT ST_Z(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific numerical value of the Z-coordinate in the EWKT-formatted POINT(1 2 3 4) geometry object.", "source": "original", "new_id": 776}
{"id": 136, "function": "ST_Z", "question": "输出EWKT格式的POINT(1 2 3 4)几何对象中Z坐标值的具体数值。", "sql": "SELECT ST_Z(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific numerical value of the Z-coordinate in the EWKT-formatted POINT(1 2 3 4) geometry object.", "source": "original", "new_id": 777}
{"id": 137, "function": "ST_Zmflag", "question": "检测由坐标点(1 2 3)和(3 4 3)构成的LINESTRINGM对象的ZM值维度标志。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRINGM(1 2 3, 3 4 3)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension marker value (Z/M flag) of the LINESTRINGM(1 2 3, 3 4 3) geometry object, where the linestring contains two 2D points (1 2 3) and (3 4 3) with M values, both M values being 3.", "source": "original", "new_id": 778}
{"id": 137, "function": "ST_Zmflag", "question": "检查EWKT格式的线段LINESTRINGM(1 2 3, 3 4 3)是否包含Z或M值。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRINGM(1 2 3, 3 4 3)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension marker value (Z/M flag) of the LINESTRINGM(1 2 3, 3 4 3) geometry object, where the linestring contains two 2D points (1 2 3) and (3 4 3) with M values, both M values being 3.", "source": "original", "new_id": 779}
{"id": 137, "function": "ST_Zmflag", "question": "对WKT格式的LINESTRINGM(1 2 3, 3 4 3)这条带有M值的线段（包含两个顶点：(1,2)和(3,4)，M值均为3），使用ST_GeomFromEWKT函数转换为几何对象后，再通过ST_Zmflag函数检测该几何对象的Z/M值标记情况。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRINGM(1 2 3, 3 4 3)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension marker value (Z/M flag) of the LINESTRINGM(1 2 3, 3 4 3) geometry object, where the linestring contains two 2D points (1 2 3) and (3 4 3) with M values, both M values being 3.", "source": "original", "new_id": 780}
{"id": 137, "function": "ST_Zmflag", "question": "输出LINESTRINGM(1 2 3, 3 4 3)的维度标志位整数值（0表示无Z/M，1表示有Z值没有M值，2表示有M值没有Z值，3表示同时存在）。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRINGM(1 2 3, 3 4 3)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension marker value (Z/M flag) of the LINESTRINGM(1 2 3, 3 4 3) geometry object, where the linestring contains two 2D points (1 2 3) and (3 4 3) with M values, both M values being 3.", "source": "original", "new_id": 781}
{"id": 137, "function": "ST_Zmflag", "question": "以整数形式返回线段对象LINESTRINGM(1 2 3, 3 4 3)的Z/M值存在性检测结果。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRINGM(1 2 3, 3 4 3)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension marker value (Z/M flag) of the LINESTRINGM(1 2 3, 3 4 3) geometry object, where the linestring contains two 2D points (1 2 3) and (3 4 3) with M values, both M values being 3.", "source": "original", "new_id": 782}
{"id": 137, "function": "ST_Zmflag", "question": "输出LINESTRINGM(1 2 3, 3 4 3)几何对象的维度标记值（Z/M标志），其中该线串包含两个带M值的二维点(1 2 3)和(3 4 3)，M值均为3。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRINGM(1 2 3, 3 4 3)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension marker value (Z/M flag) of the LINESTRINGM(1 2 3, 3 4 3) geometry object, where the linestring contains two 2D points (1 2 3) and (3 4 3) with M values, both M values being 3.", "source": "original", "new_id": 783}
{"id": 138, "function": "ST_Zmflag", "question": "检测由点(1,2,3)、(3,4,3)、(5,6,3)构成的三维圆形弧线的维度标志。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)'));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension flag detection result of the 3D circular arc line CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3), requiring the return value to be an integer-form dimension code (0=XY, 1=XYZ, 2=XYM, 3=XYZM).", "source": "original", "new_id": 784}
{"id": 138, "function": "ST_Zmflag", "question": "查询CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)这个三维圆弧几何对象的ZM标志值。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)'));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension flag detection result of the 3D circular arc line CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3), requiring the return value to be an integer-form dimension code (0=XY, 1=XYZ, 2=XYM, 3=XYZM).", "source": "original", "new_id": 785}
{"id": 138, "function": "ST_Zmflag", "question": "检测由EWKT格式定义的圆弧线CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)的几何维度标志，该圆弧线由三个三维点构成，每个点的Z坐标均为3，使用ST_GeomFromEWKT函数解析后通过ST_Zmflag函数判断其Z/M维度属性。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)'));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension flag detection result of the 3D circular arc line CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3), requiring the return value to be an integer-form dimension code (0=XY, 1=XYZ, 2=XYM, 3=XYZM).", "source": "original", "new_id": 786}
{"id": 138, "function": "ST_Zmflag", "question": "输出三维圆弧几何对象CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)的维度标志整数值。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)'));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension flag detection result of the 3D circular arc line CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3), requiring the return value to be an integer-form dimension code (0=XY, 1=XYZ, 2=XYM, 3=XYZM).", "source": "original", "new_id": 787}
{"id": 138, "function": "ST_Zmflag", "question": "返回CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)的ZM标志位检测结果。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)'));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension flag detection result of the 3D circular arc line CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3), requiring the return value to be an integer-form dimension code (0=XY, 1=XYZ, 2=XYM, 3=XYZM).", "source": "original", "new_id": 788}
{"id": 138, "function": "ST_Zmflag", "question": "输出三维圆弧线CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)的ZM维度标志位检测结果，要求返回值为整数形式的维度标识码（0=XY,1=XYZ,2=XYM,3=XYZM）。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)'));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension flag detection result of the 3D circular arc line CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3), requiring the return value to be an integer-form dimension code (0=XY, 1=XYZ, 2=XYM, 3=XYZM).", "source": "original", "new_id": 789}
{"id": 139, "function": "ST_Zmflag", "question": "查询POINT(1 2 3 4)这个带有X=1,Y=2,Z=3,M=4的三维点对象的维度标志。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension marker value (ZM flag) of the geometry object POINT(1 2 3 4), which contains X coordinate 1, Y coordinate 2, Z coordinate 3, and M value 4.", "source": "original", "new_id": 790}
{"id": 139, "function": "ST_Zmflag", "question": "获取坐标为(1,2,3,4)的四维点对象的ZM标志位。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension marker value (ZM flag) of the geometry object POINT(1 2 3 4), which contains X coordinate 1, Y coordinate 2, Z coordinate 3, and M value 4.", "source": "original", "new_id": 791}
{"id": 139, "function": "ST_Zmflag", "question": "使用ST_GeomFromEWKT函数从EWKT格式创建具有X坐标1、Y坐标2、Z坐标3和M值4的POINT(1 2 3 4)几何对象，然后通过ST_Zmflag函数检测该几何对象的维度标志位（判断是否包含Z或M值）。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension marker value (ZM flag) of the geometry object POINT(1 2 3 4), which contains X coordinate 1, Y coordinate 2, Z coordinate 3, and M value 4.", "source": "original", "new_id": 792}
{"id": 139, "function": "ST_Zmflag", "question": "输出POINT(1 2 3 4)这个几何对象的ZM维度标志整数值。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension marker value (ZM flag) of the geometry object POINT(1 2 3 4), which contains X coordinate 1, Y coordinate 2, Z coordinate 3, and M value 4.", "source": "original", "new_id": 793}
{"id": 139, "function": "ST_Zmflag", "question": "返回三维点对象(1,2,3,4)的ZM坐标维度标志位结果。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension marker value (ZM flag) of the geometry object POINT(1 2 3 4), which contains X coordinate 1, Y coordinate 2, Z coordinate 3, and M value 4.", "source": "original", "new_id": 794}
{"id": 139, "function": "ST_Zmflag", "question": "输出POINT(1 2 3 4)几何对象的维度标记值（ZM标志），该点包含X坐标1、Y坐标2、Z坐标3和M值4。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the dimension marker value (ZM flag) of the geometry object POINT(1 2 3 4), which contains X coordinate 1, Y coordinate 2, Z coordinate 3, and M value 4.", "source": "original", "new_id": 795}
{"id": 140, "function": "ST_Zmflag", "question": "查询由点(1,2)和点(3,4)构成的线对象的ZM维度标志位。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRING(1 2, 3 4)'));", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the integer value of the dimension marker (ZM flag) for the LINESTRING(1 2, 3 4) geometry object, requiring the geometry to be input in EWKT format.", "source": "original", "new_id": 796}
{"id": 140, "function": "ST_Zmflag", "question": "获取LINESTRING(1 2, 3 4)的ZM维度标志值。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRING(1 2, 3 4)'));", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the integer value of the dimension marker (ZM flag) for the LINESTRING(1 2, 3 4) geometry object, requiring the geometry to be input in EWKT format.", "source": "original", "new_id": 797}
{"id": 140, "function": "ST_Zmflag", "question": "对由EWKT格式字符串'LINESTRING(1 2, 3 4)'定义的二维线段（包含两个顶点坐标(1,2)和(3,4)），使用ST_GeomFromEWKT函数转换为几何对象后，再通过ST_Zmflag函数检测该几何对象的Z值和M值标记位状态。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRING(1 2, 3 4)'));", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the integer value of the dimension marker (ZM flag) for the LINESTRING(1 2, 3 4) geometry object, requiring the geometry to be input in EWKT format.", "source": "original", "new_id": 798}
{"id": 140, "function": "ST_Zmflag", "question": "输出LINESTRING(1 2, 3 4)的ZM维度标志位整数值。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRING(1 2, 3 4)'));", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the integer value of the dimension marker (ZM flag) for the LINESTRING(1 2, 3 4) geometry object, requiring the geometry to be input in EWKT format.", "source": "original", "new_id": 799}
{"id": 140, "function": "ST_Zmflag", "question": "返回二维线对象LINESTRING(1 2, 3 4)的坐标ZM维度标志位结果。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRING(1 2, 3 4)'));", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the integer value of the dimension marker (ZM flag) for the LINESTRING(1 2, 3 4) geometry object, requiring the geometry to be input in EWKT format.", "source": "original", "new_id": 800}
{"id": 140, "function": "ST_Zmflag", "question": "输出LINESTRING(1 2, 3 4)几何对象的维度标记信息（ZM标志位）的整数值，要求以EWKT格式输入几何对象。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRING(1 2, 3 4)'));", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the integer value of the dimension marker (ZM flag) for the LINESTRING(1 2, 3 4) geometry object, requiring the geometry to be input in EWKT format.", "source": "original", "new_id": 801}
{"id": 141, "function": "ST_HasZ", "question": "检测由WKT格式'POINT(1 2 3)'创建的三维点是否包含Z坐标。", "sql": "SELECT ST_HasZ(ST_GeomFromText('POINT(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 3D point POINT(1 2 3) contains a Z coordinate, with the return format as true/false.", "source": "original", "new_id": 802}
{"id": 141, "function": "ST_HasZ", "question": "判断坐标为(1,2,3)的点对象是否具有Z值。", "sql": "SELECT ST_HasZ(ST_GeomFromText('POINT(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 3D point POINT(1 2 3) contains a Z coordinate, with the return format as true/false.", "source": "original", "new_id": 803}
{"id": 141, "function": "ST_HasZ", "question": "判断由WKT格式字符串'POINT(1 2 3)'通过ST_GeomFromText函数转换得到的几何对象是否包含Z坐标值，其中具体坐标值为X=1、Y=2、Z=3。", "sql": "SELECT ST_HasZ(ST_GeomFromText('POINT(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 3D point POINT(1 2 3) contains a Z coordinate, with the return format as true/false.", "source": "original", "new_id": 804}
{"id": 141, "function": "ST_HasZ", "question": "返回布尔值表示POINT(1 2 3)是否包含Z坐标信息。", "sql": "SELECT ST_HasZ(ST_GeomFromText('POINT(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 3D point POINT(1 2 3) contains a Z coordinate, with the return format as true/false.", "source": "original", "new_id": 805}
{"id": 141, "function": "ST_HasZ", "question": "输出true/false表示给定三维点对象POINT(1 2 3)是否具有高程维度。", "sql": "SELECT ST_HasZ(ST_GeomFromText('POINT(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 3D point POINT(1 2 3) contains a Z coordinate, with the return format as true/false.", "source": "original", "new_id": 806}
{"id": 141, "function": "ST_HasZ", "question": "输出判断三维点POINT(1 2 3)是否包含Z坐标的布尔值结果，要求返回格式为true/false。", "sql": "SELECT ST_HasZ(ST_GeomFromText('POINT(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 3D point POINT(1 2 3) contains a Z coordinate, with the return format as true/false.", "source": "original", "new_id": 807}
{"id": 142, "function": "ST_HasZ", "question": "检测由坐标点(0 0)和(1 1)构成的LINESTRING是否包含Z坐标值。", "sql": "SELECT ST_HasZ(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object contains Z coordinates.", "source": "original", "new_id": 808}
{"id": 142, "function": "ST_HasZ", "question": "判断WKT格式的'LINESTRING(0 0, 1 1)'几何对象是否为三维几何体。", "sql": "SELECT ST_HasZ(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object contains Z coordinates.", "source": "original", "new_id": 809}
{"id": 142, "function": "ST_HasZ", "question": "检测WKT格式的线串LINESTRING(0 0, 1 1)是否具有Z坐标维度。", "sql": "SELECT ST_HasZ('LINESTRING(0 0, 1 1)');", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the WKT-formatted linestring LINESTRING(0 0, 1 1) has a Z-coordinate dimension.", "source": "original", "new_id": 810}
{"id": 142, "function": "ST_HasZ", "question": "返回布尔值表示'LINESTRING(0 0, 1 1)'是否包含Z坐标信息。", "sql": "SELECT ST_HasZ(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object contains Z coordinates.", "source": "original", "new_id": 811}
{"id": 142, "function": "ST_HasZ", "question": "输出真假值表明给定线串LINESTRING(0 0, 1 1)是否为三维几何体。", "sql": "SELECT ST_HasZ(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object contains Z coordinates.", "source": "original", "new_id": 812}
{"id": 142, "function": "ST_HasZ", "question": "输出LINESTRING(0 0, 1 1)几何对象是否包含Z坐标的布尔判断结果。", "sql": "SELECT ST_HasZ(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object contains Z coordinates.", "source": "original", "new_id": 813}
{"id": 143, "function": "ST_HasM", "question": "检测由坐标点(0 0)和(1 1)构成的线对象LINESTRING(0 0, 1 1)是否包含M值。", "sql": "SELECT ST_HasM(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object contains M values, returning true or false.", "source": "original", "new_id": 814}
{"id": 143, "function": "ST_HasM", "question": "判断LINESTRING(0 0, 1 1)这一几何对象的坐标是否包含M值。", "sql": "SELECT ST_HasM(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object contains M values, returning true or false.", "source": "original", "new_id": 815}
{"id": 143, "function": "ST_HasM", "question": "判断由坐标点(0 0)和(1 1)构成的LINESTRING几何对象是否包含M值维度信息。", "sql": "SELECT ST_HasM(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object contains M values, returning true or false.", "source": "original", "new_id": 816}
{"id": 143, "function": "ST_HasM", "question": "输出布尔值，表示LINESTRING(0 0, 1 1)是否包含M值。", "sql": "SELECT ST_HasM(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object contains M values, returning true or false.", "source": "original", "new_id": 817}
{"id": 143, "function": "ST_HasM", "question": "返回一个布尔结果，指示输入的线对象LINESTRING(0 0, 1 1)是否有M坐标。", "sql": "SELECT ST_HasM(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object contains M values, returning true or false.", "source": "original", "new_id": 818}
{"id": 143, "function": "ST_HasM", "question": "输出LINESTRING(0 0, 1 1)几何对象是否包含M值的布尔结果，要求返回true或false。", "sql": "SELECT ST_HasM(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the LINESTRING(0 0, 1 1) geometry object contains M values, returning true or false.", "source": "original", "new_id": 819}
{"id": 144, "function": "ST_HasM", "question": "检测POINTM(1 2 3)这个带有M值的点对象是否包含M坐标信息。", "sql": "SELECT ST_HasM(ST_GeomFromText('POINTM(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (true/false) indicating whether the geometric object POINTM(1 2 3) contains an M value.", "source": "original", "new_id": 820}
{"id": 144, "function": "ST_HasM", "question": "判断点POINTM(1 2 3)的几何定义中是否包含M值（度量值）。", "sql": "SELECT ST_HasM(ST_GeomFromText('POINTM(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (true/false) indicating whether the geometric object POINTM(1 2 3) contains an M value.", "source": "original", "new_id": 821}
{"id": 144, "function": "ST_HasM", "question": "判断由ST_GeomFromText函数从WKT格式'POINTM(1 2 3)'创建的几何对象是否包含M值（测量值），其中该点为XYM三维点，具体坐标为X=1、Y=2、M=3。", "sql": "SELECT ST_HasM(ST_GeomFromText('POINTM(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (true/false) indicating whether the geometric object POINTM(1 2 3) contains an M value.", "source": "original", "new_id": 822}
{"id": 144, "function": "ST_HasM", "question": "输出POINTM(1 2 3)的M值检测结果（布尔值true/false）。", "sql": "SELECT ST_HasM(ST_GeomFromText('POINTM(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (true/false) indicating whether the geometric object POINTM(1 2 3) contains an M value.", "source": "original", "new_id": 823}
{"id": 144, "function": "ST_HasM", "question": "返回一个布尔值，表示POINTM(1 2 3)是否包含M坐标。", "sql": "SELECT ST_HasM(ST_GeomFromText('POINTM(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (true/false) indicating whether the geometric object POINTM(1 2 3) contains an M value.", "source": "original", "new_id": 824}
{"id": 144, "function": "ST_HasM", "question": "输出判断几何对象POINTM(1 2 3)是否包含M值的布尔结果（true/false）。", "sql": "SELECT ST_HasM(ST_GeomFromText('POINTM(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result (true/false) indicating whether the geometric object POINTM(1 2 3) contains an M value.", "source": "original", "new_id": 825}
{"id": 145, "function": "ST_AddPoint", "question": "在LINESTRING(0 0 1, 1 1 1)这个三维线串的末尾添加ST_MakePoint(1, 2, 3)创建的三维点，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_AddPoint('LINESTRING(0 0 1, 1 1 1)', ST_MakePoint(1, 2, 3)));", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result (in EWKT string format) after adding the 3D point POINT(1 2 3) to the end of the 3D linestring LINESTRING(0 0 1, 1 1 1).", "source": "original", "new_id": 826}
{"id": 145, "function": "ST_AddPoint", "question": "将坐标为(1,2,3)的三维点添加到由(0,0,1)和(1,1,1)两个点组成的三维线串中，返回EWKT格式的结果。", "sql": "SELECT ST_AsEWKT(ST_AddPoint('LINESTRING(0 0 1, 1 1 1)', ST_MakePoint(1, 2, 3)));", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result (in EWKT string format) after adding the 3D point POINT(1 2 3) to the end of the 3D linestring LINESTRING(0 0 1, 1 1 1).", "source": "original", "new_id": 827}
{"id": 145, "function": "ST_AddPoint", "question": "在三维线段LINESTRING(0 0 1, 1 1 1)的末端添加一个三维点POINT(1 2 3)，并将结果以EWKT格式输出。", "sql": "SELECT ST_AsEWKT(ST_AddPoint('LINESTRING(0 0 1, 1 1 1)', ST_MakePoint(1, 2, 3)));", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result (in EWKT string format) after adding the 3D point POINT(1 2 3) to the end of the 3D linestring LINESTRING(0 0 1, 1 1 1).", "source": "original", "new_id": 828}
{"id": 145, "function": "ST_AddPoint", "question": "输出在三维线串LINESTRING(0 0 1, 1 1 1)末尾添加三维点(1, 2, 3)后的EWKT格式的空间几何字符串。", "sql": "SELECT ST_AsEWKT(ST_AddPoint('LINESTRING(0 0 1, 1 1 1)', ST_MakePoint(1, 2, 3)));", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result (in EWKT string format) after adding the 3D point POINT(1 2 3) to the end of the 3D linestring LINESTRING(0 0 1, 1 1 1).", "source": "original", "new_id": 829}
{"id": 145, "function": "ST_AddPoint", "question": "返回添加点(1, 2, 3)后的线串LINESTRING(0 0 1, 1 1 1)的Extended Well-Known Text表示，包含SRID信息。", "sql": "SELECT ST_AsEWKT(ST_AddPoint('LINESTRING(0 0 1, 1 1 1)', ST_MakePoint(1, 2, 3)));", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result (in EWKT string format) after adding the 3D point POINT(1 2 3) to the end of the 3D linestring LINESTRING(0 0 1, 1 1 1).", "source": "original", "new_id": 830}
{"id": 145, "function": "ST_AddPoint", "question": "输出将三维点POINT(1 2 3)添加到三维线段LINESTRING(0 0 1, 1 1 1)末尾后生成的结果（EWKT格式字符串格式）。", "sql": "SELECT ST_AsEWKT(ST_AddPoint('LINESTRING(0 0 1, 1 1 1)', ST_MakePoint(1, 2, 3)));", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result (in EWKT string format) after adding the 3D point POINT(1 2 3) to the end of the 3D linestring LINESTRING(0 0 1, 1 1 1).", "source": "original", "new_id": 831}
{"id": 146, "function": "ST_CollectionExtract", "question": "从GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))中提取类型码为2（线类型）的几何对象，输出其WKT表示。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))', 2 ));", "execution_result": [["MULTILINESTRING((0 0,1 1),(2 2,3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Extract all LINESTRING type features (type code 2) from the composite geometry object 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0,1 1)),LINESTRING(2 2,3 3))' and output them as WKT strings.", "source": "original", "new_id": 832}
{"id": 146, "function": "ST_CollectionExtract", "question": "将嵌套集合中的LINESTRING(0 0, 1 1)和LINESTRING(2 2, 3 3)提取为纯线要素集合，返回WKT字符串。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))', 2 ));", "execution_result": [["MULTILINESTRING((0 0,1 1),(2 2,3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Extract all LINESTRING type features (type code 2) from the composite geometry object 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0,1 1)),LINESTRING(2 2,3 3))' and output them as WKT strings.", "source": "original", "new_id": 833}
{"id": 146, "function": "ST_CollectionExtract", "question": "从复合几何对象'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))'中提取类型码为2（线类型）的几何元素，包括嵌套集合中的LINESTRING(0 0, 1 1)和顶层集合中的LINESTRING(2 2, 3 3)，并将结果转换为WKT文本格式输出。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))', 2 ));", "execution_result": [["MULTILINESTRING((0 0,1 1),(2 2,3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Extract all LINESTRING type features (type code 2) from the composite geometry object 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0,1 1)),LINESTRING(2 2,3 3))' and output them as WKT strings.", "source": "original", "new_id": 834}
{"id": 146, "function": "ST_CollectionExtract", "question": "输出处理后几何对象的WKT字符串，结果为\"LINESTRING(0 0,1 1)\"和\"LINESTRING(2 2,3 3)\"的集合表示。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))', 2 ));", "execution_result": [["MULTILINESTRING((0 0,1 1),(2 2,3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Extract all LINESTRING type features (type code 2) from the composite geometry object 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0,1 1)),LINESTRING(2 2,3 3))' and output them as WKT strings.", "source": "original", "new_id": 835}
{"id": 146, "function": "ST_CollectionExtract", "question": "以WKT文本格式返回从嵌套集合GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))中提取的线要素结果。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))', 2 ));", "execution_result": [["MULTILINESTRING((0 0,1 1),(2 2,3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Extract all LINESTRING type features (type code 2) from the composite geometry object 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0,1 1)),LINESTRING(2 2,3 3))' and output them as WKT strings.", "source": "original", "new_id": 836}
{"id": 146, "function": "ST_CollectionExtract", "question": "从复合几何对象'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0,1 1)),LINESTRING(2 2,3 3))'中提取所有LINESTRING类型要素（类型代码2），并输出为WKT字符串格式。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))', 2 ));", "execution_result": [["MULTILINESTRING((0 0,1 1),(2 2,3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Extract all LINESTRING type features (type code 2) from the composite geometry object 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0,1 1)),LINESTRING(2 2,3 3))' and output them as WKT strings.", "source": "original", "new_id": 837}
{"id": 147, "function": "ST_CollectionExtract", "question": "从GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))中提取类型为1（点类型）的几何对象，输出WKT格式。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))', 1 ));", "execution_result": [["MULTIPOINT((0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of extracting geometry objects of type 1 (point type) from GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0))) and converting them to WKT string format.", "source": "original", "new_id": 838}
{"id": 147, "function": "ST_CollectionExtract", "question": "将嵌套在两层GEOMETRYCOLLECTION中的POINT(0 0)提取出来，转换为文本表示。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))', 1 ));", "execution_result": [["MULTIPOINT((0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of extracting geometry objects of type 1 (point type) from GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0))) and converting them to WKT string format.", "source": "original", "new_id": 839}
{"id": 147, "function": "ST_CollectionExtract", "question": "从嵌套的GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))几何集合中提取类型为1（点类型）的几何对象，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))', 1 ));", "execution_result": [["MULTIPOINT((0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of extracting geometry objects of type 1 (point type) from GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0))) and converting them to WKT string format.", "source": "original", "new_id": 840}
{"id": 147, "function": "ST_CollectionExtract", "question": "输出从嵌套几何集合中提取的点对象GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))', 1 ));", "execution_result": [["MULTIPOINT((0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of extracting geometry objects of type 1 (point type) from GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0))) and converting them to WKT string format.", "source": "original", "new_id": 841}
{"id": 147, "function": "ST_CollectionExtract", "question": "将从GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))提取的点对象以文本格式返回。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))', 1 ));", "execution_result": [["MULTIPOINT((0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of extracting geometry objects of type 1 (point type) from GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0))) and converting them to WKT string format.", "source": "original", "new_id": 842}
{"id": 147, "function": "ST_CollectionExtract", "question": "输出从GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))中提取类型为1（点类型）的几何对象后转换为WKT字符串格式的结果。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))', 1 ));", "execution_result": [["MULTIPOINT((0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of extracting geometry objects of type 1 (point type) from GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0))) and converting them to WKT string format.", "source": "original", "new_id": 843}
{"id": 149, "function": "ST_CollectionHomogenize", "question": "将包含两个多边形POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50))和POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50))的GEOMETRYCOLLECTION输出为最简形式，输出WKT字符串。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))'));", "execution_result": [["MULTIPOLYGON(((10 50,50 50,50 10,10 10,10 50)),((90 50,90 10,50 10,50 50,90 50)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result after homogenizing the two polygons POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)) and POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)) from the GEOMETRYCOLLECTION.", "source": "original", "new_id": 844}
{"id": 149, "function": "ST_CollectionHomogenize", "question": "对由POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50))和POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50))组成的几何集合转换为最简表示形式，返回文本结果。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))'));", "execution_result": [["MULTIPOLYGON(((10 50,50 50,50 10,10 10,10 50)),((90 50,90 10,50 10,50 50,90 50)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result after homogenizing the two polygons POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)) and POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)) from the GEOMETRYCOLLECTION.", "source": "original", "new_id": 845}
{"id": 149, "function": "ST_CollectionHomogenize", "question": "将包含两个多边形的几何集合'GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))'进行同质化处理，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))'));", "execution_result": [["MULTIPOLYGON(((10 50,50 50,50 10,10 10,10 50)),((90 50,90 10,50 10,50 50,90 50)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result after homogenizing the two polygons POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)) and POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)) from the GEOMETRYCOLLECTION.", "source": "original", "new_id": 846}
{"id": 149, "function": "ST_CollectionHomogenize", "question": "输出几何集合GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))最简化后的WKT格式字符串，输入包含两个多边形。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))'));", "execution_result": [["MULTIPOLYGON(((10 50,50 50,50 10,10 10,10 50)),((90 50,90 10,50 10,50 50,90 50)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result after homogenizing the two polygons POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)) and POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)) from the GEOMETRYCOLLECTION.", "source": "original", "new_id": 847}
{"id": 149, "function": "ST_CollectionHomogenize", "question": "以文本形式返回几何集合GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))的最简化结果，原始数据为两个相邻多边形。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))'));", "execution_result": [["MULTIPOLYGON(((10 50,50 50,50 10,10 10,10 50)),((90 50,90 10,50 10,50 50,90 50)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result after homogenizing the two polygons POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)) and POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)) from the GEOMETRYCOLLECTION.", "source": "original", "new_id": 848}
{"id": 149, "function": "ST_CollectionHomogenize", "question": "输出将GEOMETRYCOLLECTION中的两个多边形POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50))和POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50))进行同质化处理后得到的结果的WKT字符串格式表示。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))'));", "execution_result": [["MULTIPOLYGON(((10 50,50 50,50 10,10 10,10 50)),((90 50,90 10,50 10,50 50,90 50)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result after homogenizing the two polygons POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)) and POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)) from the GEOMETRYCOLLECTION.", "source": "original", "new_id": 849}
{"id": 150, "function": "ST_CollectionHomogenize", "question": "将GEOMETRYCOLLECTION(POINT(0 0))几何集合转换为最简形式，输出WKT格式。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result after converting the geometry collection 'GEOMETRYCOLLECTION(POINT(0 0))' into a homogeneous collection.", "source": "original", "new_id": 850}
{"id": 150, "function": "ST_CollectionHomogenize", "question": "处理包含POINT(0 0)的几何集合，返回其最简化的文本表示。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result after converting the geometry collection 'GEOMETRYCOLLECTION(POINT(0 0))' into a homogeneous collection.", "source": "original", "new_id": 851}
{"id": 150, "function": "ST_CollectionHomogenize", "question": "将包含单个二维点POINT(0 0)的几何集合'GEOMETRYCOLLECTION(POINT(0 0))'进行同质化处理，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result after converting the geometry collection 'GEOMETRYCOLLECTION(POINT(0 0))' into a homogeneous collection.", "source": "original", "new_id": 852}
{"id": 150, "function": "ST_CollectionHomogenize", "question": "输出GEOMETRYCOLLECTION(POINT(0 0))最简化处理后的WKT字符串。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result after converting the geometry collection 'GEOMETRYCOLLECTION(POINT(0 0))' into a homogeneous collection.", "source": "original", "new_id": 853}
{"id": 150, "function": "ST_CollectionHomogenize", "question": "返回几何集合对象GEOMETRYCOLLECTION(POINT(0 0))的最简表示形式的文本格式。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result after converting the geometry collection 'GEOMETRYCOLLECTION(POINT(0 0))' into a homogeneous collection.", "source": "original", "new_id": 854}
{"id": 150, "function": "ST_CollectionHomogenize", "question": "输出将几何集合'GEOMETRYCOLLECTION(POINT(0 0))'转换为同质集合后的结果的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result after converting the geometry collection 'GEOMETRYCOLLECTION(POINT(0 0))' into a homogeneous collection.", "source": "original", "new_id": 855}
{"id": 151, "function": "ST_CollectionHomogenize", "question": "将GEOMETRYCOLLECTION(MULTIPOINT((0 0)))几何集合转换为最简形式，输出WKT格式。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(MULTIPOINT((0 0)))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of converting GEOMETRYCOLLECTION(MULTIPOINT((0 0))) into a homogeneous geometry collection.", "source": "original", "new_id": 856}
{"id": 151, "function": "ST_CollectionHomogenize", "question": "处理包含单个点(0 0)的多点几何集合，返回最简化后的文本表示。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(MULTIPOINT((0 0)))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of converting GEOMETRYCOLLECTION(MULTIPOINT((0 0))) into a homogeneous geometry collection.", "source": "original", "new_id": 857}
{"id": 151, "function": "ST_CollectionHomogenize", "question": "将输入的GEOMETRYCOLLECTION(MULTIPOINT((0 0)))几何集合进行同质化处理，转换为最简几何类型，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(MULTIPOINT((0 0)))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of converting GEOMETRYCOLLECTION(MULTIPOINT((0 0))) into a homogeneous geometry collection.", "source": "original", "new_id": 858}
{"id": 151, "function": "ST_CollectionHomogenize", "question": "输出GEOMETRYCOLLECTION(MULTIPOINT((0 0)))最简化处理后的WKT字符串。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(MULTIPOINT((0 0)))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of converting GEOMETRYCOLLECTION(MULTIPOINT((0 0))) into a homogeneous geometry collection.", "source": "original", "new_id": 859}
{"id": 151, "function": "ST_CollectionHomogenize", "question": "返回几何集合GEOMETRYCOLLECTION(MULTIPOINT((0 0)))最简化的文本表示结果。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(MULTIPOINT((0 0)))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of converting GEOMETRYCOLLECTION(MULTIPOINT((0 0))) into a homogeneous geometry collection.", "source": "original", "new_id": 860}
{"id": 151, "function": "ST_CollectionHomogenize", "question": "输出将GEOMETRYCOLLECTION(MULTIPOINT((0 0)))转换为同质几何集合后的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(MULTIPOINT((0 0)))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of converting GEOMETRYCOLLECTION(MULTIPOINT((0 0))) into a homogeneous geometry collection.", "source": "original", "new_id": 861}
{"id": 152, "function": "ST_CollectionHomogenize", "question": "将包含POINT(0 0)和POINT(1 1)的几何集合标准化为最简形式，输出WKT文本。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))'));", "execution_result": [["MULTIPOINT((0 0),(1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1)) geometry collection to its simplest single type (in WKT string format).", "source": "original", "new_id": 862}
{"id": 152, "function": "ST_CollectionHomogenize", "question": "处理GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))几何集合，返回简化后的WKT字符串。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))'));", "execution_result": [["MULTIPOINT((0 0),(1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1)) geometry collection to its simplest single type (in WKT string format).", "source": "original", "new_id": 863}
{"id": 152, "function": "ST_CollectionHomogenize", "question": "将包含POINT(0 0)和POINT(1 1)的几何集合'GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1)'进行同质化处理，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))'));", "execution_result": [["MULTIPOINT((0 0),(1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1)) geometry collection to its simplest single type (in WKT string format).", "source": "original", "new_id": 864}
{"id": 152, "function": "ST_CollectionHomogenize", "question": "输出包含两个点POINT(0 0)和POINT(1 1)的几何集合标准化后的WKT格式字符串。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))'));", "execution_result": [["MULTIPOINT((0 0),(1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1)) geometry collection to its simplest single type (in WKT string format).", "source": "original", "new_id": 865}
{"id": 152, "function": "ST_CollectionHomogenize", "question": "以文本形式返回包含两个点POINT(0 0)和POINT(1 1)的几何集合的最简表示结果。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))'));", "execution_result": [["MULTIPOINT((0 0),(1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1)) geometry collection to its simplest single type (in WKT string format).", "source": "original", "new_id": 866}
{"id": 152, "function": "ST_CollectionHomogenize", "question": "输出将GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))几何集合转换为最简单一类型后的结果（WKT字符串格式）。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))'));", "execution_result": [["MULTIPOINT((0 0),(1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1)) geometry collection to its simplest single type (in WKT string format).", "source": "original", "new_id": 867}
{"id": 153, "function": "ST_CollectionHomogenize", "question": "处理由点POINT(0 0)和包含线段LINESTRING(1 1, 2 2)的嵌套集合组成的几何集合，返回文本表示。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0), GEOMETRYCOLLECTION(LINESTRING(1 1, 2 2)))'));", "execution_result": [["GEOMETRYCOLLECTION(POINT(0 0),LINESTRING(1 1,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the most simplified geometric collection GEOMETRYCOLLECTION(POINT(0 0), GEOMETRYCOLLECTION(LINESTRING(1 1, 2 2))), where the original collection contains a point and a nested linestring collection.", "source": "original", "new_id": 868}
{"id": 153, "function": "ST_CollectionHomogenize", "question": "输出最简化表示的几何集合GEOMETRYCOLLECTION(POINT(0 0), GEOMETRYCOLLECTION(LINESTRING(1 1, 2 2))的WKT字符串表示，原始集合包含点和嵌套线段集合。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0), GEOMETRYCOLLECTION(LINESTRING(1 1, 2 2)))'));", "execution_result": [["GEOMETRYCOLLECTION(POINT(0 0),LINESTRING(1 1,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the most simplified geometric collection GEOMETRYCOLLECTION(POINT(0 0), GEOMETRYCOLLECTION(LINESTRING(1 1, 2 2))), where the original collection contains a point and a nested linestring collection.", "source": "original", "new_id": 869}
{"id": 154, "function": "ST_CurveToLine", "question": "将CIRCULARSTRING(220268 150415,220227 150505,220227 150406)这个圆弧转换为线段几何，输出WKT文本。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)')));", "execution_result": [["LINESTRING(220268 150415,220269.95064912012 150416.53936422797,220271.82341557532 150418.17258804003,220273.61378770717 150419.89573685703,220275.31745235244 150421.70465946247,220276.93030523375 150423.59499800342,220278.4484608472 150425.5621984887,220279.868261823 150427.60152176008,220281.18628773623 150429.70805490916,220282.39936334698 150431.87672311306,220283.50456624987 150434.10230186017,220284.49923391434 150436.37942953626,220285.38097009883 150438.7026203414,220286.14765062364 150441.06627750542,220286.7974284882 150443.46470677113,220287.3287383208 150445.89213011245,220287.74030014945 150448.34269965385,220288.0311224857 150450.8105117587,220288.20050471305 150453.28962125146,220288.24803877485 150455.77405574024,220288.17361015742 150458.25783000473,220287.9773981658 150460.7349604152,220287.6598754919 150463.19947934747,220287.22180707558 150465.6454495596,220286.6642482621 150468.06697849513,220285.9885422594 150470.45823247873,220285.19631690253 150472.81345077007,220284.28948073168 150475.12695944207,220283.27021839464 150477.39318504962,220282.14098538368 150479.60666805677,220280.90450211999 150481.7620759891,220279.56374740007 150483.85421628007,220278.1219512195 150485.8780487805,220276.58258699154 150487.8286979006,220274.94936317948 150489.7014643558,220273.22621436248 150491.49183648766,220271.41729175704 150493.19550113293,220269.5269532161 150494.80835401424,220267.5597527308 150496.3265096277,220265.52042945943 150497.74631060348,220263.41389631035 150499.06433651672,220261.24522810645 150500.27741212747,220259.01964935934 150501.38261503036,220256.74252168325 150502.37728269483,220254.4193308781 150503.25901887933,220252.0556737141 150504.02569940413,220249.65724444838 150504.6754772687,220247.22982110706 150505.20678710128,220244.77925156566 150505.61834892994,220242.3114394608 150505.9091712662,220239.83232996805 150506.07855349354,220237.34789547927 150506.12608755534,220234.86412121478 150506.0516589379,220232.3869908043 150505.85544694628,220229.92247187204 150505.5379242724,220227.4765016599 150505.09985585607,220225.05497272438 150504.5422970426,220222.66371874078 150503.8665910399,220220.30850044944 150503.07436568302,220217.99499177744 150502.16752951217,220215.7287661699 150501.14826717513,220213.51528316273 150500.01903416417,220211.3598752304 150498.78255090048,220209.26773493944 150497.44179618056,220207.24390243902 150496,220205.2932533189 150494.46063577203,220203.4204868637 150492.82741195997,220201.63011473184 150491.10426314297,220199.92645008658 150489.29534053753,220198.31359720527 150487.40500199658,220196.79544159182 150485.4378015113,220195.37564061602 150483.39847823992,220194.0576147028 150481.29194509084,220192.84453909204 150479.12327688694,220191.73933618914 150476.89769813983,220190.74466852468 150474.62057046374,220189.86293234018 150472.2973796586,220189.09625181538 150469.93372249458,220188.4464739508 150467.53529322887,220187.91516411823 150465.10786988755,220187.50360228957 150462.65730034615,220187.21277995332 150460.1894882413,220187.04339772597 150457.71037874854,220186.99586366417 150455.22594425976,220187.0702922816 150452.74216999527,220187.26650427323 150450.2650395848,220187.58402694712 150447.80052065253,220188.02209536344 150445.3545504404,220188.57965417692 150442.93302150487,220189.2553601796 150440.54176752127,220190.0475855365 150438.18654922993,220190.95442170734 150435.87304055793,220191.97368404438 150433.60681495038,220193.10291705534 150431.39333194323,220194.33940031903 150429.2379240109,220195.68015503895 150427.14578371993,220197.1219512195 150425.1219512195,220198.66131544748 150423.1713020994,220200.29453925954 150421.2985356442,220202.01768807654 150419.50816351234,220203.82661068198 150417.80449886707,220205.71694922293 150416.19164598576,220207.68414970822 150414.6734903723,220209.7234729796 150413.25368939652,220211.83000612867 150411.93566348328,220213.99867433257 150410.72258787253,220216.22425307968 150409.61738496964,220218.50138075577 150408.62271730517,220220.82457156092 150407.74098112067,220223.18822872493 150406.97430059587,220225.58665799064 150406.3245227313,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the circular arc CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into a linear approximation (in WKT string format).", "source": "original", "new_id": 870}
{"id": 154, "function": "ST_CurveToLine", "question": "精确处理经过点(220268,150415)、(220227,150505)、(220227,150406)的圆弧，转换为折线后输出文本。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)')));", "execution_result": [["LINESTRING(220268 150415,220269.95064912012 150416.53936422797,220271.82341557532 150418.17258804003,220273.61378770717 150419.89573685703,220275.31745235244 150421.70465946247,220276.93030523375 150423.59499800342,220278.4484608472 150425.5621984887,220279.868261823 150427.60152176008,220281.18628773623 150429.70805490916,220282.39936334698 150431.87672311306,220283.50456624987 150434.10230186017,220284.49923391434 150436.37942953626,220285.38097009883 150438.7026203414,220286.14765062364 150441.06627750542,220286.7974284882 150443.46470677113,220287.3287383208 150445.89213011245,220287.74030014945 150448.34269965385,220288.0311224857 150450.8105117587,220288.20050471305 150453.28962125146,220288.24803877485 150455.77405574024,220288.17361015742 150458.25783000473,220287.9773981658 150460.7349604152,220287.6598754919 150463.19947934747,220287.22180707558 150465.6454495596,220286.6642482621 150468.06697849513,220285.9885422594 150470.45823247873,220285.19631690253 150472.81345077007,220284.28948073168 150475.12695944207,220283.27021839464 150477.39318504962,220282.14098538368 150479.60666805677,220280.90450211999 150481.7620759891,220279.56374740007 150483.85421628007,220278.1219512195 150485.8780487805,220276.58258699154 150487.8286979006,220274.94936317948 150489.7014643558,220273.22621436248 150491.49183648766,220271.41729175704 150493.19550113293,220269.5269532161 150494.80835401424,220267.5597527308 150496.3265096277,220265.52042945943 150497.74631060348,220263.41389631035 150499.06433651672,220261.24522810645 150500.27741212747,220259.01964935934 150501.38261503036,220256.74252168325 150502.37728269483,220254.4193308781 150503.25901887933,220252.0556737141 150504.02569940413,220249.65724444838 150504.6754772687,220247.22982110706 150505.20678710128,220244.77925156566 150505.61834892994,220242.3114394608 150505.9091712662,220239.83232996805 150506.07855349354,220237.34789547927 150506.12608755534,220234.86412121478 150506.0516589379,220232.3869908043 150505.85544694628,220229.92247187204 150505.5379242724,220227.4765016599 150505.09985585607,220225.05497272438 150504.5422970426,220222.66371874078 150503.8665910399,220220.30850044944 150503.07436568302,220217.99499177744 150502.16752951217,220215.7287661699 150501.14826717513,220213.51528316273 150500.01903416417,220211.3598752304 150498.78255090048,220209.26773493944 150497.44179618056,220207.24390243902 150496,220205.2932533189 150494.46063577203,220203.4204868637 150492.82741195997,220201.63011473184 150491.10426314297,220199.92645008658 150489.29534053753,220198.31359720527 150487.40500199658,220196.79544159182 150485.4378015113,220195.37564061602 150483.39847823992,220194.0576147028 150481.29194509084,220192.84453909204 150479.12327688694,220191.73933618914 150476.89769813983,220190.74466852468 150474.62057046374,220189.86293234018 150472.2973796586,220189.09625181538 150469.93372249458,220188.4464739508 150467.53529322887,220187.91516411823 150465.10786988755,220187.50360228957 150462.65730034615,220187.21277995332 150460.1894882413,220187.04339772597 150457.71037874854,220186.99586366417 150455.22594425976,220187.0702922816 150452.74216999527,220187.26650427323 150450.2650395848,220187.58402694712 150447.80052065253,220188.02209536344 150445.3545504404,220188.57965417692 150442.93302150487,220189.2553601796 150440.54176752127,220190.0475855365 150438.18654922993,220190.95442170734 150435.87304055793,220191.97368404438 150433.60681495038,220193.10291705534 150431.39333194323,220194.33940031903 150429.2379240109,220195.68015503895 150427.14578371993,220197.1219512195 150425.1219512195,220198.66131544748 150423.1713020994,220200.29453925954 150421.2985356442,220202.01768807654 150419.50816351234,220203.82661068198 150417.80449886707,220205.71694922293 150416.19164598576,220207.68414970822 150414.6734903723,220209.7234729796 150413.25368939652,220211.83000612867 150411.93566348328,220213.99867433257 150410.72258787253,220216.22425307968 150409.61738496964,220218.50138075577 150408.62271730517,220220.82457156092 150407.74098112067,220223.18822872493 150406.97430059587,220225.58665799064 150406.3245227313,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the circular arc CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into a linear approximation (in WKT string format).", "source": "original", "new_id": 871}
{"id": 154, "function": "ST_CurveToLine", "question": "将圆弧线CIRCULARSTRING(220268 150415,220227 150505,220227 150406)转换为线性几何对象，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)')));", "execution_result": [["LINESTRING(220268 150415,220269.95064912012 150416.53936422797,220271.82341557532 150418.17258804003,220273.61378770717 150419.89573685703,220275.31745235244 150421.70465946247,220276.93030523375 150423.59499800342,220278.4484608472 150425.5621984887,220279.868261823 150427.60152176008,220281.18628773623 150429.70805490916,220282.39936334698 150431.87672311306,220283.50456624987 150434.10230186017,220284.49923391434 150436.37942953626,220285.38097009883 150438.7026203414,220286.14765062364 150441.06627750542,220286.7974284882 150443.46470677113,220287.3287383208 150445.89213011245,220287.74030014945 150448.34269965385,220288.0311224857 150450.8105117587,220288.20050471305 150453.28962125146,220288.24803877485 150455.77405574024,220288.17361015742 150458.25783000473,220287.9773981658 150460.7349604152,220287.6598754919 150463.19947934747,220287.22180707558 150465.6454495596,220286.6642482621 150468.06697849513,220285.9885422594 150470.45823247873,220285.19631690253 150472.81345077007,220284.28948073168 150475.12695944207,220283.27021839464 150477.39318504962,220282.14098538368 150479.60666805677,220280.90450211999 150481.7620759891,220279.56374740007 150483.85421628007,220278.1219512195 150485.8780487805,220276.58258699154 150487.8286979006,220274.94936317948 150489.7014643558,220273.22621436248 150491.49183648766,220271.41729175704 150493.19550113293,220269.5269532161 150494.80835401424,220267.5597527308 150496.3265096277,220265.52042945943 150497.74631060348,220263.41389631035 150499.06433651672,220261.24522810645 150500.27741212747,220259.01964935934 150501.38261503036,220256.74252168325 150502.37728269483,220254.4193308781 150503.25901887933,220252.0556737141 150504.02569940413,220249.65724444838 150504.6754772687,220247.22982110706 150505.20678710128,220244.77925156566 150505.61834892994,220242.3114394608 150505.9091712662,220239.83232996805 150506.07855349354,220237.34789547927 150506.12608755534,220234.86412121478 150506.0516589379,220232.3869908043 150505.85544694628,220229.92247187204 150505.5379242724,220227.4765016599 150505.09985585607,220225.05497272438 150504.5422970426,220222.66371874078 150503.8665910399,220220.30850044944 150503.07436568302,220217.99499177744 150502.16752951217,220215.7287661699 150501.14826717513,220213.51528316273 150500.01903416417,220211.3598752304 150498.78255090048,220209.26773493944 150497.44179618056,220207.24390243902 150496,220205.2932533189 150494.46063577203,220203.4204868637 150492.82741195997,220201.63011473184 150491.10426314297,220199.92645008658 150489.29534053753,220198.31359720527 150487.40500199658,220196.79544159182 150485.4378015113,220195.37564061602 150483.39847823992,220194.0576147028 150481.29194509084,220192.84453909204 150479.12327688694,220191.73933618914 150476.89769813983,220190.74466852468 150474.62057046374,220189.86293234018 150472.2973796586,220189.09625181538 150469.93372249458,220188.4464739508 150467.53529322887,220187.91516411823 150465.10786988755,220187.50360228957 150462.65730034615,220187.21277995332 150460.1894882413,220187.04339772597 150457.71037874854,220186.99586366417 150455.22594425976,220187.0702922816 150452.74216999527,220187.26650427323 150450.2650395848,220187.58402694712 150447.80052065253,220188.02209536344 150445.3545504404,220188.57965417692 150442.93302150487,220189.2553601796 150440.54176752127,220190.0475855365 150438.18654922993,220190.95442170734 150435.87304055793,220191.97368404438 150433.60681495038,220193.10291705534 150431.39333194323,220194.33940031903 150429.2379240109,220195.68015503895 150427.14578371993,220197.1219512195 150425.1219512195,220198.66131544748 150423.1713020994,220200.29453925954 150421.2985356442,220202.01768807654 150419.50816351234,220203.82661068198 150417.80449886707,220205.71694922293 150416.19164598576,220207.68414970822 150414.6734903723,220209.7234729796 150413.25368939652,220211.83000612867 150411.93566348328,220213.99867433257 150410.72258787253,220216.22425307968 150409.61738496964,220218.50138075577 150408.62271730517,220220.82457156092 150407.74098112067,220223.18822872493 150406.97430059587,220225.58665799064 150406.3245227313,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the circular arc CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into a linear approximation (in WKT string format).", "source": "original", "new_id": 872}
{"id": 154, "function": "ST_CurveToLine", "question": "输出将圆弧(220268 150415,220227 150505,220227 150406)线性化后的WKT字符串结果。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)')));", "execution_result": [["LINESTRING(220268 150415,220269.95064912012 150416.53936422797,220271.82341557532 150418.17258804003,220273.61378770717 150419.89573685703,220275.31745235244 150421.70465946247,220276.93030523375 150423.59499800342,220278.4484608472 150425.5621984887,220279.868261823 150427.60152176008,220281.18628773623 150429.70805490916,220282.39936334698 150431.87672311306,220283.50456624987 150434.10230186017,220284.49923391434 150436.37942953626,220285.38097009883 150438.7026203414,220286.14765062364 150441.06627750542,220286.7974284882 150443.46470677113,220287.3287383208 150445.89213011245,220287.74030014945 150448.34269965385,220288.0311224857 150450.8105117587,220288.20050471305 150453.28962125146,220288.24803877485 150455.77405574024,220288.17361015742 150458.25783000473,220287.9773981658 150460.7349604152,220287.6598754919 150463.19947934747,220287.22180707558 150465.6454495596,220286.6642482621 150468.06697849513,220285.9885422594 150470.45823247873,220285.19631690253 150472.81345077007,220284.28948073168 150475.12695944207,220283.27021839464 150477.39318504962,220282.14098538368 150479.60666805677,220280.90450211999 150481.7620759891,220279.56374740007 150483.85421628007,220278.1219512195 150485.8780487805,220276.58258699154 150487.8286979006,220274.94936317948 150489.7014643558,220273.22621436248 150491.49183648766,220271.41729175704 150493.19550113293,220269.5269532161 150494.80835401424,220267.5597527308 150496.3265096277,220265.52042945943 150497.74631060348,220263.41389631035 150499.06433651672,220261.24522810645 150500.27741212747,220259.01964935934 150501.38261503036,220256.74252168325 150502.37728269483,220254.4193308781 150503.25901887933,220252.0556737141 150504.02569940413,220249.65724444838 150504.6754772687,220247.22982110706 150505.20678710128,220244.77925156566 150505.61834892994,220242.3114394608 150505.9091712662,220239.83232996805 150506.07855349354,220237.34789547927 150506.12608755534,220234.86412121478 150506.0516589379,220232.3869908043 150505.85544694628,220229.92247187204 150505.5379242724,220227.4765016599 150505.09985585607,220225.05497272438 150504.5422970426,220222.66371874078 150503.8665910399,220220.30850044944 150503.07436568302,220217.99499177744 150502.16752951217,220215.7287661699 150501.14826717513,220213.51528316273 150500.01903416417,220211.3598752304 150498.78255090048,220209.26773493944 150497.44179618056,220207.24390243902 150496,220205.2932533189 150494.46063577203,220203.4204868637 150492.82741195997,220201.63011473184 150491.10426314297,220199.92645008658 150489.29534053753,220198.31359720527 150487.40500199658,220196.79544159182 150485.4378015113,220195.37564061602 150483.39847823992,220194.0576147028 150481.29194509084,220192.84453909204 150479.12327688694,220191.73933618914 150476.89769813983,220190.74466852468 150474.62057046374,220189.86293234018 150472.2973796586,220189.09625181538 150469.93372249458,220188.4464739508 150467.53529322887,220187.91516411823 150465.10786988755,220187.50360228957 150462.65730034615,220187.21277995332 150460.1894882413,220187.04339772597 150457.71037874854,220186.99586366417 150455.22594425976,220187.0702922816 150452.74216999527,220187.26650427323 150450.2650395848,220187.58402694712 150447.80052065253,220188.02209536344 150445.3545504404,220188.57965417692 150442.93302150487,220189.2553601796 150440.54176752127,220190.0475855365 150438.18654922993,220190.95442170734 150435.87304055793,220191.97368404438 150433.60681495038,220193.10291705534 150431.39333194323,220194.33940031903 150429.2379240109,220195.68015503895 150427.14578371993,220197.1219512195 150425.1219512195,220198.66131544748 150423.1713020994,220200.29453925954 150421.2985356442,220202.01768807654 150419.50816351234,220203.82661068198 150417.80449886707,220205.71694922293 150416.19164598576,220207.68414970822 150414.6734903723,220209.7234729796 150413.25368939652,220211.83000612867 150411.93566348328,220213.99867433257 150410.72258787253,220216.22425307968 150409.61738496964,220218.50138075577 150408.62271730517,220220.82457156092 150407.74098112067,220223.18822872493 150406.97430059587,220225.58665799064 150406.3245227313,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the circular arc CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into a linear approximation (in WKT string format).", "source": "original", "new_id": 873}
{"id": 154, "function": "ST_CurveToLine", "question": "以文本形式返回三点圆弧几何CIRCULARSTRING(220268 150415,220227 150505,220227 150406)的线性近似表示。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)')));", "execution_result": [["LINESTRING(220268 150415,220269.95064912012 150416.53936422797,220271.82341557532 150418.17258804003,220273.61378770717 150419.89573685703,220275.31745235244 150421.70465946247,220276.93030523375 150423.59499800342,220278.4484608472 150425.5621984887,220279.868261823 150427.60152176008,220281.18628773623 150429.70805490916,220282.39936334698 150431.87672311306,220283.50456624987 150434.10230186017,220284.49923391434 150436.37942953626,220285.38097009883 150438.7026203414,220286.14765062364 150441.06627750542,220286.7974284882 150443.46470677113,220287.3287383208 150445.89213011245,220287.74030014945 150448.34269965385,220288.0311224857 150450.8105117587,220288.20050471305 150453.28962125146,220288.24803877485 150455.77405574024,220288.17361015742 150458.25783000473,220287.9773981658 150460.7349604152,220287.6598754919 150463.19947934747,220287.22180707558 150465.6454495596,220286.6642482621 150468.06697849513,220285.9885422594 150470.45823247873,220285.19631690253 150472.81345077007,220284.28948073168 150475.12695944207,220283.27021839464 150477.39318504962,220282.14098538368 150479.60666805677,220280.90450211999 150481.7620759891,220279.56374740007 150483.85421628007,220278.1219512195 150485.8780487805,220276.58258699154 150487.8286979006,220274.94936317948 150489.7014643558,220273.22621436248 150491.49183648766,220271.41729175704 150493.19550113293,220269.5269532161 150494.80835401424,220267.5597527308 150496.3265096277,220265.52042945943 150497.74631060348,220263.41389631035 150499.06433651672,220261.24522810645 150500.27741212747,220259.01964935934 150501.38261503036,220256.74252168325 150502.37728269483,220254.4193308781 150503.25901887933,220252.0556737141 150504.02569940413,220249.65724444838 150504.6754772687,220247.22982110706 150505.20678710128,220244.77925156566 150505.61834892994,220242.3114394608 150505.9091712662,220239.83232996805 150506.07855349354,220237.34789547927 150506.12608755534,220234.86412121478 150506.0516589379,220232.3869908043 150505.85544694628,220229.92247187204 150505.5379242724,220227.4765016599 150505.09985585607,220225.05497272438 150504.5422970426,220222.66371874078 150503.8665910399,220220.30850044944 150503.07436568302,220217.99499177744 150502.16752951217,220215.7287661699 150501.14826717513,220213.51528316273 150500.01903416417,220211.3598752304 150498.78255090048,220209.26773493944 150497.44179618056,220207.24390243902 150496,220205.2932533189 150494.46063577203,220203.4204868637 150492.82741195997,220201.63011473184 150491.10426314297,220199.92645008658 150489.29534053753,220198.31359720527 150487.40500199658,220196.79544159182 150485.4378015113,220195.37564061602 150483.39847823992,220194.0576147028 150481.29194509084,220192.84453909204 150479.12327688694,220191.73933618914 150476.89769813983,220190.74466852468 150474.62057046374,220189.86293234018 150472.2973796586,220189.09625181538 150469.93372249458,220188.4464739508 150467.53529322887,220187.91516411823 150465.10786988755,220187.50360228957 150462.65730034615,220187.21277995332 150460.1894882413,220187.04339772597 150457.71037874854,220186.99586366417 150455.22594425976,220187.0702922816 150452.74216999527,220187.26650427323 150450.2650395848,220187.58402694712 150447.80052065253,220188.02209536344 150445.3545504404,220188.57965417692 150442.93302150487,220189.2553601796 150440.54176752127,220190.0475855365 150438.18654922993,220190.95442170734 150435.87304055793,220191.97368404438 150433.60681495038,220193.10291705534 150431.39333194323,220194.33940031903 150429.2379240109,220195.68015503895 150427.14578371993,220197.1219512195 150425.1219512195,220198.66131544748 150423.1713020994,220200.29453925954 150421.2985356442,220202.01768807654 150419.50816351234,220203.82661068198 150417.80449886707,220205.71694922293 150416.19164598576,220207.68414970822 150414.6734903723,220209.7234729796 150413.25368939652,220211.83000612867 150411.93566348328,220213.99867433257 150410.72258787253,220216.22425307968 150409.61738496964,220218.50138075577 150408.62271730517,220220.82457156092 150407.74098112067,220223.18822872493 150406.97430059587,220225.58665799064 150406.3245227313,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the circular arc CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into a linear approximation (in WKT string format).", "source": "original", "new_id": 874}
{"id": 154, "function": "ST_CurveToLine", "question": "输出将圆弧线CIRCULARSTRING(220268 150415,220227 150505,220227 150406)转换为线性近似后的结果（WKT字符串格式）。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)')));", "execution_result": [["LINESTRING(220268 150415,220269.95064912012 150416.53936422797,220271.82341557532 150418.17258804003,220273.61378770717 150419.89573685703,220275.31745235244 150421.70465946247,220276.93030523375 150423.59499800342,220278.4484608472 150425.5621984887,220279.868261823 150427.60152176008,220281.18628773623 150429.70805490916,220282.39936334698 150431.87672311306,220283.50456624987 150434.10230186017,220284.49923391434 150436.37942953626,220285.38097009883 150438.7026203414,220286.14765062364 150441.06627750542,220286.7974284882 150443.46470677113,220287.3287383208 150445.89213011245,220287.74030014945 150448.34269965385,220288.0311224857 150450.8105117587,220288.20050471305 150453.28962125146,220288.24803877485 150455.77405574024,220288.17361015742 150458.25783000473,220287.9773981658 150460.7349604152,220287.6598754919 150463.19947934747,220287.22180707558 150465.6454495596,220286.6642482621 150468.06697849513,220285.9885422594 150470.45823247873,220285.19631690253 150472.81345077007,220284.28948073168 150475.12695944207,220283.27021839464 150477.39318504962,220282.14098538368 150479.60666805677,220280.90450211999 150481.7620759891,220279.56374740007 150483.85421628007,220278.1219512195 150485.8780487805,220276.58258699154 150487.8286979006,220274.94936317948 150489.7014643558,220273.22621436248 150491.49183648766,220271.41729175704 150493.19550113293,220269.5269532161 150494.80835401424,220267.5597527308 150496.3265096277,220265.52042945943 150497.74631060348,220263.41389631035 150499.06433651672,220261.24522810645 150500.27741212747,220259.01964935934 150501.38261503036,220256.74252168325 150502.37728269483,220254.4193308781 150503.25901887933,220252.0556737141 150504.02569940413,220249.65724444838 150504.6754772687,220247.22982110706 150505.20678710128,220244.77925156566 150505.61834892994,220242.3114394608 150505.9091712662,220239.83232996805 150506.07855349354,220237.34789547927 150506.12608755534,220234.86412121478 150506.0516589379,220232.3869908043 150505.85544694628,220229.92247187204 150505.5379242724,220227.4765016599 150505.09985585607,220225.05497272438 150504.5422970426,220222.66371874078 150503.8665910399,220220.30850044944 150503.07436568302,220217.99499177744 150502.16752951217,220215.7287661699 150501.14826717513,220213.51528316273 150500.01903416417,220211.3598752304 150498.78255090048,220209.26773493944 150497.44179618056,220207.24390243902 150496,220205.2932533189 150494.46063577203,220203.4204868637 150492.82741195997,220201.63011473184 150491.10426314297,220199.92645008658 150489.29534053753,220198.31359720527 150487.40500199658,220196.79544159182 150485.4378015113,220195.37564061602 150483.39847823992,220194.0576147028 150481.29194509084,220192.84453909204 150479.12327688694,220191.73933618914 150476.89769813983,220190.74466852468 150474.62057046374,220189.86293234018 150472.2973796586,220189.09625181538 150469.93372249458,220188.4464739508 150467.53529322887,220187.91516411823 150465.10786988755,220187.50360228957 150462.65730034615,220187.21277995332 150460.1894882413,220187.04339772597 150457.71037874854,220186.99586366417 150455.22594425976,220187.0702922816 150452.74216999527,220187.26650427323 150450.2650395848,220187.58402694712 150447.80052065253,220188.02209536344 150445.3545504404,220188.57965417692 150442.93302150487,220189.2553601796 150440.54176752127,220190.0475855365 150438.18654922993,220190.95442170734 150435.87304055793,220191.97368404438 150433.60681495038,220193.10291705534 150431.39333194323,220194.33940031903 150429.2379240109,220195.68015503895 150427.14578371993,220197.1219512195 150425.1219512195,220198.66131544748 150423.1713020994,220200.29453925954 150421.2985356442,220202.01768807654 150419.50816351234,220203.82661068198 150417.80449886707,220205.71694922293 150416.19164598576,220207.68414970822 150414.6734903723,220209.7234729796 150413.25368939652,220211.83000612867 150411.93566348328,220213.99867433257 150410.72258787253,220216.22425307968 150409.61738496964,220218.50138075577 150408.62271730517,220220.82457156092 150407.74098112067,220223.18822872493 150406.97430059587,220225.58665799064 150406.3245227313,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the circular arc CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into a linear approximation (in WKT string format).", "source": "original", "new_id": 875}
{"id": 155, "function": "ST_CurveToLine", "question": "将三维圆弧曲线CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)转换为线性几何对象，输出为EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_CurveToLine(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)')));", "execution_result": [["LINESTRING(220268 150415 1,220269.95064912012 150416.53936422797 1.018117285667296,220271.82341557532 150418.17258804003 1.036234571334591,220273.61378770717 150419.89573685703 1.054351857001887,220275.31745235244 150421.70465946247 1.072469142669182,220276.93030523375 150423.59499800342 1.090586428336478,220278.4484608472 150425.5621984887 1.108703714003773,220279.868261823 150427.60152176008 1.126820999671069,220281.18628773623 150429.70805490916 1.144938285338364,220282.39936334698 150431.87672311306 1.16305557100566,220283.50456624987 150434.10230186017 1.181172856672956,220284.49923391434 150436.37942953626 1.199290142340251,220285.38097009883 150438.7026203414 1.217407428007547,220286.14765062364 150441.06627750542 1.235524713674842,220286.7974284882 150443.46470677113 1.253641999342138,220287.3287383208 150445.89213011245 1.271759285009433,220287.74030014945 150448.34269965385 1.289876570676729,220288.0311224857 150450.8105117587 1.307993856344024,220288.20050471305 150453.28962125146 1.32611114201132,220288.24803877485 150455.77405574024 1.344228427678616,220288.17361015742 150458.25783000473 1.362345713345911,220287.9773981658 150460.7349604152 1.380462999013207,220287.6598754919 150463.19947934747 1.398580284680502,220287.22180707558 150465.6454495596 1.416697570347798,220286.6642482621 150468.06697849513 1.434814856015093,220285.9885422594 150470.45823247873 1.452932141682389,220285.19631690253 150472.81345077007 1.471049427349685,220284.28948073168 150475.12695944207 1.48916671301698,220283.27021839464 150477.39318504962 1.507283998684276,220282.14098538368 150479.60666805677 1.525401284351571,220280.90450211999 150481.7620759891 1.543518570018867,220279.56374740007 150483.85421628007 1.561635855686162,220278.1219512195 150485.8780487805 1.579753141353458,220276.58258699154 150487.8286979006 1.597870427020753,220274.94936317948 150489.7014643558 1.615987712688049,220273.22621436248 150491.49183648766 1.634104998355344,220271.41729175704 150493.19550113293 1.65222228402264,220269.5269532161 150494.80835401424 1.670339569689936,220267.5597527308 150496.3265096277 1.688456855357231,220265.52042945943 150497.74631060348 1.706574141024527,220263.41389631035 150499.06433651672 1.724691426691822,220261.24522810645 150500.27741212747 1.742808712359118,220259.01964935934 150501.38261503036 1.760925998026413,220256.74252168325 150502.37728269483 1.779043283693709,220254.4193308781 150503.25901887933 1.797160569361004,220252.0556737141 150504.02569940413 1.8152778550283,220249.65724444838 150504.6754772687 1.833395140695596,220247.22982110706 150505.20678710128 1.851512426362891,220244.77925156566 150505.61834892994 1.869629712030187,220242.3114394608 150505.9091712662 1.887746997697482,220239.83232996805 150506.07855349354 1.905864283364778,220237.34789547927 150506.12608755534 1.923981569032073,220234.86412121478 150506.0516589379 1.942098854699369,220232.3869908043 150505.85544694628 1.960216140366664,220229.92247187204 150505.5379242724 1.97833342603396,220227.4765016599 150505.09985585607 1.996450711701256,220225.05497272438 150504.5422970426 2.014517570141913,220222.66371874078 150503.8665910399 2.032572142695848,220220.30850044944 150503.07436568302 2.050626715249784,220217.99499177744 150502.16752951217 2.068681287803719,220215.7287661699 150501.14826717513 2.086735860357654,220213.51528316273 150500.01903416417 2.104790432911589,220211.3598752304 150498.78255090048 2.122845005465524,220209.26773493944 150497.44179618056 2.14089957801946,220207.24390243902 150496 2.158954150573395,220205.2932533189 150494.46063577203 2.17700872312733,220203.4204868637 150492.82741195997 2.195063295681265,220201.63011473184 150491.10426314297 2.2131178682352,220199.92645008658 150489.29534053753 2.231172440789135,220198.31359720527 150487.40500199658 2.24922701334307,220196.79544159182 150485.4378015113 2.267281585897006,220195.37564061602 150483.39847823992 2.285336158450941,220194.0576147028 150481.29194509084 2.303390731004876,220192.84453909204 150479.12327688694 2.321445303558811,220191.73933618914 150476.89769813983 2.339499876112746,220190.74466852468 150474.62057046374 2.357554448666682,220189.86293234018 150472.2973796586 2.375609021220617,220189.09625181538 150469.93372249458 2.393663593774552,220188.4464739508 150467.53529322887 2.411718166328487,220187.91516411823 150465.10786988755 2.429772738882422,220187.50360228957 150462.65730034615 2.447827311436357,220187.21277995332 150460.1894882413 2.465881883990292,220187.04339772597 150457.71037874854 2.483936456544227,220186.99586366417 150455.22594425976 2.501991029098163,220187.0702922816 150452.74216999527 2.520045601652098,220187.26650427323 150450.2650395848 2.538100174206033,220187.58402694712 150447.80052065253 2.556154746759968,220188.02209536344 150445.3545504404 2.574209319313903,220188.57965417692 150442.93302150487 2.592263891867838,220189.2553601796 150440.54176752127 2.610318464421774,220190.0475855365 150438.18654922993 2.628373036975709,220190.95442170734 150435.87304055793 2.646427609529644,220191.97368404438 150433.60681495038 2.664482182083579,220193.10291705534 150431.39333194323 2.682536754637514,220194.33940031903 150429.2379240109 2.70059132719145,220195.68015503895 150427.14578371993 2.718645899745385,220197.1219512195 150425.1219512195 2.73670047229932,220198.66131544748 150423.1713020994 2.754755044853255,220200.29453925954 150421.2985356442 2.77280961740719,220202.01768807654 150419.50816351234 2.790864189961126,220203.82661068198 150417.80449886707 2.808918762515061,220205.71694922293 150416.19164598576 2.826973335068996,220207.68414970822 150414.6734903723 2.845027907622931,220209.7234729796 150413.25368939652 2.863082480176866,220211.83000612867 150411.93566348328 2.881137052730801,220213.99867433257 150410.72258787253 2.899191625284736,220216.22425307968 150409.61738496964 2.917246197838671,220218.50138075577 150408.62271730517 2.935300770392606,220220.82457156092 150407.74098112067 2.953355342946542,220223.18822872493 150406.97430059587 2.971409915500477,220225.58665799064 150406.3245227313 2.989464488054412,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc line CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3) into line segments and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 876}
{"id": 155, "function": "ST_CurveToLine", "question": "处理包含三个三维控制点(220268 150415 1)、(220227 150505 2)、(220227 150406 3)的圆弧曲线，输出其线性近似的EWKT表示。", "sql": "SELECT ST_AsEWKT(ST_CurveToLine(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)')));", "execution_result": [["LINESTRING(220268 150415 1,220269.95064912012 150416.53936422797 1.018117285667296,220271.82341557532 150418.17258804003 1.036234571334591,220273.61378770717 150419.89573685703 1.054351857001887,220275.31745235244 150421.70465946247 1.072469142669182,220276.93030523375 150423.59499800342 1.090586428336478,220278.4484608472 150425.5621984887 1.108703714003773,220279.868261823 150427.60152176008 1.126820999671069,220281.18628773623 150429.70805490916 1.144938285338364,220282.39936334698 150431.87672311306 1.16305557100566,220283.50456624987 150434.10230186017 1.181172856672956,220284.49923391434 150436.37942953626 1.199290142340251,220285.38097009883 150438.7026203414 1.217407428007547,220286.14765062364 150441.06627750542 1.235524713674842,220286.7974284882 150443.46470677113 1.253641999342138,220287.3287383208 150445.89213011245 1.271759285009433,220287.74030014945 150448.34269965385 1.289876570676729,220288.0311224857 150450.8105117587 1.307993856344024,220288.20050471305 150453.28962125146 1.32611114201132,220288.24803877485 150455.77405574024 1.344228427678616,220288.17361015742 150458.25783000473 1.362345713345911,220287.9773981658 150460.7349604152 1.380462999013207,220287.6598754919 150463.19947934747 1.398580284680502,220287.22180707558 150465.6454495596 1.416697570347798,220286.6642482621 150468.06697849513 1.434814856015093,220285.9885422594 150470.45823247873 1.452932141682389,220285.19631690253 150472.81345077007 1.471049427349685,220284.28948073168 150475.12695944207 1.48916671301698,220283.27021839464 150477.39318504962 1.507283998684276,220282.14098538368 150479.60666805677 1.525401284351571,220280.90450211999 150481.7620759891 1.543518570018867,220279.56374740007 150483.85421628007 1.561635855686162,220278.1219512195 150485.8780487805 1.579753141353458,220276.58258699154 150487.8286979006 1.597870427020753,220274.94936317948 150489.7014643558 1.615987712688049,220273.22621436248 150491.49183648766 1.634104998355344,220271.41729175704 150493.19550113293 1.65222228402264,220269.5269532161 150494.80835401424 1.670339569689936,220267.5597527308 150496.3265096277 1.688456855357231,220265.52042945943 150497.74631060348 1.706574141024527,220263.41389631035 150499.06433651672 1.724691426691822,220261.24522810645 150500.27741212747 1.742808712359118,220259.01964935934 150501.38261503036 1.760925998026413,220256.74252168325 150502.37728269483 1.779043283693709,220254.4193308781 150503.25901887933 1.797160569361004,220252.0556737141 150504.02569940413 1.8152778550283,220249.65724444838 150504.6754772687 1.833395140695596,220247.22982110706 150505.20678710128 1.851512426362891,220244.77925156566 150505.61834892994 1.869629712030187,220242.3114394608 150505.9091712662 1.887746997697482,220239.83232996805 150506.07855349354 1.905864283364778,220237.34789547927 150506.12608755534 1.923981569032073,220234.86412121478 150506.0516589379 1.942098854699369,220232.3869908043 150505.85544694628 1.960216140366664,220229.92247187204 150505.5379242724 1.97833342603396,220227.4765016599 150505.09985585607 1.996450711701256,220225.05497272438 150504.5422970426 2.014517570141913,220222.66371874078 150503.8665910399 2.032572142695848,220220.30850044944 150503.07436568302 2.050626715249784,220217.99499177744 150502.16752951217 2.068681287803719,220215.7287661699 150501.14826717513 2.086735860357654,220213.51528316273 150500.01903416417 2.104790432911589,220211.3598752304 150498.78255090048 2.122845005465524,220209.26773493944 150497.44179618056 2.14089957801946,220207.24390243902 150496 2.158954150573395,220205.2932533189 150494.46063577203 2.17700872312733,220203.4204868637 150492.82741195997 2.195063295681265,220201.63011473184 150491.10426314297 2.2131178682352,220199.92645008658 150489.29534053753 2.231172440789135,220198.31359720527 150487.40500199658 2.24922701334307,220196.79544159182 150485.4378015113 2.267281585897006,220195.37564061602 150483.39847823992 2.285336158450941,220194.0576147028 150481.29194509084 2.303390731004876,220192.84453909204 150479.12327688694 2.321445303558811,220191.73933618914 150476.89769813983 2.339499876112746,220190.74466852468 150474.62057046374 2.357554448666682,220189.86293234018 150472.2973796586 2.375609021220617,220189.09625181538 150469.93372249458 2.393663593774552,220188.4464739508 150467.53529322887 2.411718166328487,220187.91516411823 150465.10786988755 2.429772738882422,220187.50360228957 150462.65730034615 2.447827311436357,220187.21277995332 150460.1894882413 2.465881883990292,220187.04339772597 150457.71037874854 2.483936456544227,220186.99586366417 150455.22594425976 2.501991029098163,220187.0702922816 150452.74216999527 2.520045601652098,220187.26650427323 150450.2650395848 2.538100174206033,220187.58402694712 150447.80052065253 2.556154746759968,220188.02209536344 150445.3545504404 2.574209319313903,220188.57965417692 150442.93302150487 2.592263891867838,220189.2553601796 150440.54176752127 2.610318464421774,220190.0475855365 150438.18654922993 2.628373036975709,220190.95442170734 150435.87304055793 2.646427609529644,220191.97368404438 150433.60681495038 2.664482182083579,220193.10291705534 150431.39333194323 2.682536754637514,220194.33940031903 150429.2379240109 2.70059132719145,220195.68015503895 150427.14578371993 2.718645899745385,220197.1219512195 150425.1219512195 2.73670047229932,220198.66131544748 150423.1713020994 2.754755044853255,220200.29453925954 150421.2985356442 2.77280961740719,220202.01768807654 150419.50816351234 2.790864189961126,220203.82661068198 150417.80449886707 2.808918762515061,220205.71694922293 150416.19164598576 2.826973335068996,220207.68414970822 150414.6734903723 2.845027907622931,220209.7234729796 150413.25368939652 2.863082480176866,220211.83000612867 150411.93566348328 2.881137052730801,220213.99867433257 150410.72258787253 2.899191625284736,220216.22425307968 150409.61738496964 2.917246197838671,220218.50138075577 150408.62271730517 2.935300770392606,220220.82457156092 150407.74098112067 2.953355342946542,220223.18822872493 150406.97430059587 2.971409915500477,220225.58665799064 150406.3245227313 2.989464488054412,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc line CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3) into line segments and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 877}
{"id": 155, "function": "ST_CurveToLine", "question": "将EWKT格式的圆弧线CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)转换为线段几何，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_CurveToLine(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)')));", "execution_result": [["LINESTRING(220268 150415 1,220269.95064912012 150416.53936422797 1.018117285667296,220271.82341557532 150418.17258804003 1.036234571334591,220273.61378770717 150419.89573685703 1.054351857001887,220275.31745235244 150421.70465946247 1.072469142669182,220276.93030523375 150423.59499800342 1.090586428336478,220278.4484608472 150425.5621984887 1.108703714003773,220279.868261823 150427.60152176008 1.126820999671069,220281.18628773623 150429.70805490916 1.144938285338364,220282.39936334698 150431.87672311306 1.16305557100566,220283.50456624987 150434.10230186017 1.181172856672956,220284.49923391434 150436.37942953626 1.199290142340251,220285.38097009883 150438.7026203414 1.217407428007547,220286.14765062364 150441.06627750542 1.235524713674842,220286.7974284882 150443.46470677113 1.253641999342138,220287.3287383208 150445.89213011245 1.271759285009433,220287.74030014945 150448.34269965385 1.289876570676729,220288.0311224857 150450.8105117587 1.307993856344024,220288.20050471305 150453.28962125146 1.32611114201132,220288.24803877485 150455.77405574024 1.344228427678616,220288.17361015742 150458.25783000473 1.362345713345911,220287.9773981658 150460.7349604152 1.380462999013207,220287.6598754919 150463.19947934747 1.398580284680502,220287.22180707558 150465.6454495596 1.416697570347798,220286.6642482621 150468.06697849513 1.434814856015093,220285.9885422594 150470.45823247873 1.452932141682389,220285.19631690253 150472.81345077007 1.471049427349685,220284.28948073168 150475.12695944207 1.48916671301698,220283.27021839464 150477.39318504962 1.507283998684276,220282.14098538368 150479.60666805677 1.525401284351571,220280.90450211999 150481.7620759891 1.543518570018867,220279.56374740007 150483.85421628007 1.561635855686162,220278.1219512195 150485.8780487805 1.579753141353458,220276.58258699154 150487.8286979006 1.597870427020753,220274.94936317948 150489.7014643558 1.615987712688049,220273.22621436248 150491.49183648766 1.634104998355344,220271.41729175704 150493.19550113293 1.65222228402264,220269.5269532161 150494.80835401424 1.670339569689936,220267.5597527308 150496.3265096277 1.688456855357231,220265.52042945943 150497.74631060348 1.706574141024527,220263.41389631035 150499.06433651672 1.724691426691822,220261.24522810645 150500.27741212747 1.742808712359118,220259.01964935934 150501.38261503036 1.760925998026413,220256.74252168325 150502.37728269483 1.779043283693709,220254.4193308781 150503.25901887933 1.797160569361004,220252.0556737141 150504.02569940413 1.8152778550283,220249.65724444838 150504.6754772687 1.833395140695596,220247.22982110706 150505.20678710128 1.851512426362891,220244.77925156566 150505.61834892994 1.869629712030187,220242.3114394608 150505.9091712662 1.887746997697482,220239.83232996805 150506.07855349354 1.905864283364778,220237.34789547927 150506.12608755534 1.923981569032073,220234.86412121478 150506.0516589379 1.942098854699369,220232.3869908043 150505.85544694628 1.960216140366664,220229.92247187204 150505.5379242724 1.97833342603396,220227.4765016599 150505.09985585607 1.996450711701256,220225.05497272438 150504.5422970426 2.014517570141913,220222.66371874078 150503.8665910399 2.032572142695848,220220.30850044944 150503.07436568302 2.050626715249784,220217.99499177744 150502.16752951217 2.068681287803719,220215.7287661699 150501.14826717513 2.086735860357654,220213.51528316273 150500.01903416417 2.104790432911589,220211.3598752304 150498.78255090048 2.122845005465524,220209.26773493944 150497.44179618056 2.14089957801946,220207.24390243902 150496 2.158954150573395,220205.2932533189 150494.46063577203 2.17700872312733,220203.4204868637 150492.82741195997 2.195063295681265,220201.63011473184 150491.10426314297 2.2131178682352,220199.92645008658 150489.29534053753 2.231172440789135,220198.31359720527 150487.40500199658 2.24922701334307,220196.79544159182 150485.4378015113 2.267281585897006,220195.37564061602 150483.39847823992 2.285336158450941,220194.0576147028 150481.29194509084 2.303390731004876,220192.84453909204 150479.12327688694 2.321445303558811,220191.73933618914 150476.89769813983 2.339499876112746,220190.74466852468 150474.62057046374 2.357554448666682,220189.86293234018 150472.2973796586 2.375609021220617,220189.09625181538 150469.93372249458 2.393663593774552,220188.4464739508 150467.53529322887 2.411718166328487,220187.91516411823 150465.10786988755 2.429772738882422,220187.50360228957 150462.65730034615 2.447827311436357,220187.21277995332 150460.1894882413 2.465881883990292,220187.04339772597 150457.71037874854 2.483936456544227,220186.99586366417 150455.22594425976 2.501991029098163,220187.0702922816 150452.74216999527 2.520045601652098,220187.26650427323 150450.2650395848 2.538100174206033,220187.58402694712 150447.80052065253 2.556154746759968,220188.02209536344 150445.3545504404 2.574209319313903,220188.57965417692 150442.93302150487 2.592263891867838,220189.2553601796 150440.54176752127 2.610318464421774,220190.0475855365 150438.18654922993 2.628373036975709,220190.95442170734 150435.87304055793 2.646427609529644,220191.97368404438 150433.60681495038 2.664482182083579,220193.10291705534 150431.39333194323 2.682536754637514,220194.33940031903 150429.2379240109 2.70059132719145,220195.68015503895 150427.14578371993 2.718645899745385,220197.1219512195 150425.1219512195 2.73670047229932,220198.66131544748 150423.1713020994 2.754755044853255,220200.29453925954 150421.2985356442 2.77280961740719,220202.01768807654 150419.50816351234 2.790864189961126,220203.82661068198 150417.80449886707 2.808918762515061,220205.71694922293 150416.19164598576 2.826973335068996,220207.68414970822 150414.6734903723 2.845027907622931,220209.7234729796 150413.25368939652 2.863082480176866,220211.83000612867 150411.93566348328 2.881137052730801,220213.99867433257 150410.72258787253 2.899191625284736,220216.22425307968 150409.61738496964 2.917246197838671,220218.50138075577 150408.62271730517 2.935300770392606,220220.82457156092 150407.74098112067 2.953355342946542,220223.18822872493 150406.97430059587 2.971409915500477,220225.58665799064 150406.3245227313 2.989464488054412,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc line CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3) into line segments and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 878}
{"id": 155, "function": "ST_CurveToLine", "question": "输出圆弧曲线CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)经线性转换后的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_CurveToLine(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)')));", "execution_result": [["LINESTRING(220268 150415 1,220269.95064912012 150416.53936422797 1.018117285667296,220271.82341557532 150418.17258804003 1.036234571334591,220273.61378770717 150419.89573685703 1.054351857001887,220275.31745235244 150421.70465946247 1.072469142669182,220276.93030523375 150423.59499800342 1.090586428336478,220278.4484608472 150425.5621984887 1.108703714003773,220279.868261823 150427.60152176008 1.126820999671069,220281.18628773623 150429.70805490916 1.144938285338364,220282.39936334698 150431.87672311306 1.16305557100566,220283.50456624987 150434.10230186017 1.181172856672956,220284.49923391434 150436.37942953626 1.199290142340251,220285.38097009883 150438.7026203414 1.217407428007547,220286.14765062364 150441.06627750542 1.235524713674842,220286.7974284882 150443.46470677113 1.253641999342138,220287.3287383208 150445.89213011245 1.271759285009433,220287.74030014945 150448.34269965385 1.289876570676729,220288.0311224857 150450.8105117587 1.307993856344024,220288.20050471305 150453.28962125146 1.32611114201132,220288.24803877485 150455.77405574024 1.344228427678616,220288.17361015742 150458.25783000473 1.362345713345911,220287.9773981658 150460.7349604152 1.380462999013207,220287.6598754919 150463.19947934747 1.398580284680502,220287.22180707558 150465.6454495596 1.416697570347798,220286.6642482621 150468.06697849513 1.434814856015093,220285.9885422594 150470.45823247873 1.452932141682389,220285.19631690253 150472.81345077007 1.471049427349685,220284.28948073168 150475.12695944207 1.48916671301698,220283.27021839464 150477.39318504962 1.507283998684276,220282.14098538368 150479.60666805677 1.525401284351571,220280.90450211999 150481.7620759891 1.543518570018867,220279.56374740007 150483.85421628007 1.561635855686162,220278.1219512195 150485.8780487805 1.579753141353458,220276.58258699154 150487.8286979006 1.597870427020753,220274.94936317948 150489.7014643558 1.615987712688049,220273.22621436248 150491.49183648766 1.634104998355344,220271.41729175704 150493.19550113293 1.65222228402264,220269.5269532161 150494.80835401424 1.670339569689936,220267.5597527308 150496.3265096277 1.688456855357231,220265.52042945943 150497.74631060348 1.706574141024527,220263.41389631035 150499.06433651672 1.724691426691822,220261.24522810645 150500.27741212747 1.742808712359118,220259.01964935934 150501.38261503036 1.760925998026413,220256.74252168325 150502.37728269483 1.779043283693709,220254.4193308781 150503.25901887933 1.797160569361004,220252.0556737141 150504.02569940413 1.8152778550283,220249.65724444838 150504.6754772687 1.833395140695596,220247.22982110706 150505.20678710128 1.851512426362891,220244.77925156566 150505.61834892994 1.869629712030187,220242.3114394608 150505.9091712662 1.887746997697482,220239.83232996805 150506.07855349354 1.905864283364778,220237.34789547927 150506.12608755534 1.923981569032073,220234.86412121478 150506.0516589379 1.942098854699369,220232.3869908043 150505.85544694628 1.960216140366664,220229.92247187204 150505.5379242724 1.97833342603396,220227.4765016599 150505.09985585607 1.996450711701256,220225.05497272438 150504.5422970426 2.014517570141913,220222.66371874078 150503.8665910399 2.032572142695848,220220.30850044944 150503.07436568302 2.050626715249784,220217.99499177744 150502.16752951217 2.068681287803719,220215.7287661699 150501.14826717513 2.086735860357654,220213.51528316273 150500.01903416417 2.104790432911589,220211.3598752304 150498.78255090048 2.122845005465524,220209.26773493944 150497.44179618056 2.14089957801946,220207.24390243902 150496 2.158954150573395,220205.2932533189 150494.46063577203 2.17700872312733,220203.4204868637 150492.82741195997 2.195063295681265,220201.63011473184 150491.10426314297 2.2131178682352,220199.92645008658 150489.29534053753 2.231172440789135,220198.31359720527 150487.40500199658 2.24922701334307,220196.79544159182 150485.4378015113 2.267281585897006,220195.37564061602 150483.39847823992 2.285336158450941,220194.0576147028 150481.29194509084 2.303390731004876,220192.84453909204 150479.12327688694 2.321445303558811,220191.73933618914 150476.89769813983 2.339499876112746,220190.74466852468 150474.62057046374 2.357554448666682,220189.86293234018 150472.2973796586 2.375609021220617,220189.09625181538 150469.93372249458 2.393663593774552,220188.4464739508 150467.53529322887 2.411718166328487,220187.91516411823 150465.10786988755 2.429772738882422,220187.50360228957 150462.65730034615 2.447827311436357,220187.21277995332 150460.1894882413 2.465881883990292,220187.04339772597 150457.71037874854 2.483936456544227,220186.99586366417 150455.22594425976 2.501991029098163,220187.0702922816 150452.74216999527 2.520045601652098,220187.26650427323 150450.2650395848 2.538100174206033,220187.58402694712 150447.80052065253 2.556154746759968,220188.02209536344 150445.3545504404 2.574209319313903,220188.57965417692 150442.93302150487 2.592263891867838,220189.2553601796 150440.54176752127 2.610318464421774,220190.0475855365 150438.18654922993 2.628373036975709,220190.95442170734 150435.87304055793 2.646427609529644,220191.97368404438 150433.60681495038 2.664482182083579,220193.10291705534 150431.39333194323 2.682536754637514,220194.33940031903 150429.2379240109 2.70059132719145,220195.68015503895 150427.14578371993 2.718645899745385,220197.1219512195 150425.1219512195 2.73670047229932,220198.66131544748 150423.1713020994 2.754755044853255,220200.29453925954 150421.2985356442 2.77280961740719,220202.01768807654 150419.50816351234 2.790864189961126,220203.82661068198 150417.80449886707 2.808918762515061,220205.71694922293 150416.19164598576 2.826973335068996,220207.68414970822 150414.6734903723 2.845027907622931,220209.7234729796 150413.25368939652 2.863082480176866,220211.83000612867 150411.93566348328 2.881137052730801,220213.99867433257 150410.72258787253 2.899191625284736,220216.22425307968 150409.61738496964 2.917246197838671,220218.50138075577 150408.62271730517 2.935300770392606,220220.82457156092 150407.74098112067 2.953355342946542,220223.18822872493 150406.97430059587 2.971409915500477,220225.58665799064 150406.3245227313 2.989464488054412,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc line CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3) into line segments and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 879}
{"id": 155, "function": "ST_CurveToLine", "question": "获取三维圆弧曲线CIRCULARSTRING(220268 150415,220227 150505,220227 150406)线性近似结果的扩展WKT格式文本表示。", "sql": "SELECT ST_AsEWKT(ST_CurveToLine(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)')));", "execution_result": [["LINESTRING(220268 150415 1,220269.95064912012 150416.53936422797 1.018117285667296,220271.82341557532 150418.17258804003 1.036234571334591,220273.61378770717 150419.89573685703 1.054351857001887,220275.31745235244 150421.70465946247 1.072469142669182,220276.93030523375 150423.59499800342 1.090586428336478,220278.4484608472 150425.5621984887 1.108703714003773,220279.868261823 150427.60152176008 1.126820999671069,220281.18628773623 150429.70805490916 1.144938285338364,220282.39936334698 150431.87672311306 1.16305557100566,220283.50456624987 150434.10230186017 1.181172856672956,220284.49923391434 150436.37942953626 1.199290142340251,220285.38097009883 150438.7026203414 1.217407428007547,220286.14765062364 150441.06627750542 1.235524713674842,220286.7974284882 150443.46470677113 1.253641999342138,220287.3287383208 150445.89213011245 1.271759285009433,220287.74030014945 150448.34269965385 1.289876570676729,220288.0311224857 150450.8105117587 1.307993856344024,220288.20050471305 150453.28962125146 1.32611114201132,220288.24803877485 150455.77405574024 1.344228427678616,220288.17361015742 150458.25783000473 1.362345713345911,220287.9773981658 150460.7349604152 1.380462999013207,220287.6598754919 150463.19947934747 1.398580284680502,220287.22180707558 150465.6454495596 1.416697570347798,220286.6642482621 150468.06697849513 1.434814856015093,220285.9885422594 150470.45823247873 1.452932141682389,220285.19631690253 150472.81345077007 1.471049427349685,220284.28948073168 150475.12695944207 1.48916671301698,220283.27021839464 150477.39318504962 1.507283998684276,220282.14098538368 150479.60666805677 1.525401284351571,220280.90450211999 150481.7620759891 1.543518570018867,220279.56374740007 150483.85421628007 1.561635855686162,220278.1219512195 150485.8780487805 1.579753141353458,220276.58258699154 150487.8286979006 1.597870427020753,220274.94936317948 150489.7014643558 1.615987712688049,220273.22621436248 150491.49183648766 1.634104998355344,220271.41729175704 150493.19550113293 1.65222228402264,220269.5269532161 150494.80835401424 1.670339569689936,220267.5597527308 150496.3265096277 1.688456855357231,220265.52042945943 150497.74631060348 1.706574141024527,220263.41389631035 150499.06433651672 1.724691426691822,220261.24522810645 150500.27741212747 1.742808712359118,220259.01964935934 150501.38261503036 1.760925998026413,220256.74252168325 150502.37728269483 1.779043283693709,220254.4193308781 150503.25901887933 1.797160569361004,220252.0556737141 150504.02569940413 1.8152778550283,220249.65724444838 150504.6754772687 1.833395140695596,220247.22982110706 150505.20678710128 1.851512426362891,220244.77925156566 150505.61834892994 1.869629712030187,220242.3114394608 150505.9091712662 1.887746997697482,220239.83232996805 150506.07855349354 1.905864283364778,220237.34789547927 150506.12608755534 1.923981569032073,220234.86412121478 150506.0516589379 1.942098854699369,220232.3869908043 150505.85544694628 1.960216140366664,220229.92247187204 150505.5379242724 1.97833342603396,220227.4765016599 150505.09985585607 1.996450711701256,220225.05497272438 150504.5422970426 2.014517570141913,220222.66371874078 150503.8665910399 2.032572142695848,220220.30850044944 150503.07436568302 2.050626715249784,220217.99499177744 150502.16752951217 2.068681287803719,220215.7287661699 150501.14826717513 2.086735860357654,220213.51528316273 150500.01903416417 2.104790432911589,220211.3598752304 150498.78255090048 2.122845005465524,220209.26773493944 150497.44179618056 2.14089957801946,220207.24390243902 150496 2.158954150573395,220205.2932533189 150494.46063577203 2.17700872312733,220203.4204868637 150492.82741195997 2.195063295681265,220201.63011473184 150491.10426314297 2.2131178682352,220199.92645008658 150489.29534053753 2.231172440789135,220198.31359720527 150487.40500199658 2.24922701334307,220196.79544159182 150485.4378015113 2.267281585897006,220195.37564061602 150483.39847823992 2.285336158450941,220194.0576147028 150481.29194509084 2.303390731004876,220192.84453909204 150479.12327688694 2.321445303558811,220191.73933618914 150476.89769813983 2.339499876112746,220190.74466852468 150474.62057046374 2.357554448666682,220189.86293234018 150472.2973796586 2.375609021220617,220189.09625181538 150469.93372249458 2.393663593774552,220188.4464739508 150467.53529322887 2.411718166328487,220187.91516411823 150465.10786988755 2.429772738882422,220187.50360228957 150462.65730034615 2.447827311436357,220187.21277995332 150460.1894882413 2.465881883990292,220187.04339772597 150457.71037874854 2.483936456544227,220186.99586366417 150455.22594425976 2.501991029098163,220187.0702922816 150452.74216999527 2.520045601652098,220187.26650427323 150450.2650395848 2.538100174206033,220187.58402694712 150447.80052065253 2.556154746759968,220188.02209536344 150445.3545504404 2.574209319313903,220188.57965417692 150442.93302150487 2.592263891867838,220189.2553601796 150440.54176752127 2.610318464421774,220190.0475855365 150438.18654922993 2.628373036975709,220190.95442170734 150435.87304055793 2.646427609529644,220191.97368404438 150433.60681495038 2.664482182083579,220193.10291705534 150431.39333194323 2.682536754637514,220194.33940031903 150429.2379240109 2.70059132719145,220195.68015503895 150427.14578371993 2.718645899745385,220197.1219512195 150425.1219512195 2.73670047229932,220198.66131544748 150423.1713020994 2.754755044853255,220200.29453925954 150421.2985356442 2.77280961740719,220202.01768807654 150419.50816351234 2.790864189961126,220203.82661068198 150417.80449886707 2.808918762515061,220205.71694922293 150416.19164598576 2.826973335068996,220207.68414970822 150414.6734903723 2.845027907622931,220209.7234729796 150413.25368939652 2.863082480176866,220211.83000612867 150411.93566348328 2.881137052730801,220213.99867433257 150410.72258787253 2.899191625284736,220216.22425307968 150409.61738496964 2.917246197838671,220218.50138075577 150408.62271730517 2.935300770392606,220220.82457156092 150407.74098112067 2.953355342946542,220223.18822872493 150406.97430059587 2.971409915500477,220225.58665799064 150406.3245227313 2.989464488054412,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc line CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3) into line segments and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 880}
{"id": 155, "function": "ST_CurveToLine", "question": "将三维圆弧线CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)转换为线段后，输出其扩展WKT(EWKT)字符串表示形式。", "sql": "SELECT ST_AsEWKT(ST_CurveToLine(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)')));", "execution_result": [["LINESTRING(220268 150415 1,220269.95064912012 150416.53936422797 1.018117285667296,220271.82341557532 150418.17258804003 1.036234571334591,220273.61378770717 150419.89573685703 1.054351857001887,220275.31745235244 150421.70465946247 1.072469142669182,220276.93030523375 150423.59499800342 1.090586428336478,220278.4484608472 150425.5621984887 1.108703714003773,220279.868261823 150427.60152176008 1.126820999671069,220281.18628773623 150429.70805490916 1.144938285338364,220282.39936334698 150431.87672311306 1.16305557100566,220283.50456624987 150434.10230186017 1.181172856672956,220284.49923391434 150436.37942953626 1.199290142340251,220285.38097009883 150438.7026203414 1.217407428007547,220286.14765062364 150441.06627750542 1.235524713674842,220286.7974284882 150443.46470677113 1.253641999342138,220287.3287383208 150445.89213011245 1.271759285009433,220287.74030014945 150448.34269965385 1.289876570676729,220288.0311224857 150450.8105117587 1.307993856344024,220288.20050471305 150453.28962125146 1.32611114201132,220288.24803877485 150455.77405574024 1.344228427678616,220288.17361015742 150458.25783000473 1.362345713345911,220287.9773981658 150460.7349604152 1.380462999013207,220287.6598754919 150463.19947934747 1.398580284680502,220287.22180707558 150465.6454495596 1.416697570347798,220286.6642482621 150468.06697849513 1.434814856015093,220285.9885422594 150470.45823247873 1.452932141682389,220285.19631690253 150472.81345077007 1.471049427349685,220284.28948073168 150475.12695944207 1.48916671301698,220283.27021839464 150477.39318504962 1.507283998684276,220282.14098538368 150479.60666805677 1.525401284351571,220280.90450211999 150481.7620759891 1.543518570018867,220279.56374740007 150483.85421628007 1.561635855686162,220278.1219512195 150485.8780487805 1.579753141353458,220276.58258699154 150487.8286979006 1.597870427020753,220274.94936317948 150489.7014643558 1.615987712688049,220273.22621436248 150491.49183648766 1.634104998355344,220271.41729175704 150493.19550113293 1.65222228402264,220269.5269532161 150494.80835401424 1.670339569689936,220267.5597527308 150496.3265096277 1.688456855357231,220265.52042945943 150497.74631060348 1.706574141024527,220263.41389631035 150499.06433651672 1.724691426691822,220261.24522810645 150500.27741212747 1.742808712359118,220259.01964935934 150501.38261503036 1.760925998026413,220256.74252168325 150502.37728269483 1.779043283693709,220254.4193308781 150503.25901887933 1.797160569361004,220252.0556737141 150504.02569940413 1.8152778550283,220249.65724444838 150504.6754772687 1.833395140695596,220247.22982110706 150505.20678710128 1.851512426362891,220244.77925156566 150505.61834892994 1.869629712030187,220242.3114394608 150505.9091712662 1.887746997697482,220239.83232996805 150506.07855349354 1.905864283364778,220237.34789547927 150506.12608755534 1.923981569032073,220234.86412121478 150506.0516589379 1.942098854699369,220232.3869908043 150505.85544694628 1.960216140366664,220229.92247187204 150505.5379242724 1.97833342603396,220227.4765016599 150505.09985585607 1.996450711701256,220225.05497272438 150504.5422970426 2.014517570141913,220222.66371874078 150503.8665910399 2.032572142695848,220220.30850044944 150503.07436568302 2.050626715249784,220217.99499177744 150502.16752951217 2.068681287803719,220215.7287661699 150501.14826717513 2.086735860357654,220213.51528316273 150500.01903416417 2.104790432911589,220211.3598752304 150498.78255090048 2.122845005465524,220209.26773493944 150497.44179618056 2.14089957801946,220207.24390243902 150496 2.158954150573395,220205.2932533189 150494.46063577203 2.17700872312733,220203.4204868637 150492.82741195997 2.195063295681265,220201.63011473184 150491.10426314297 2.2131178682352,220199.92645008658 150489.29534053753 2.231172440789135,220198.31359720527 150487.40500199658 2.24922701334307,220196.79544159182 150485.4378015113 2.267281585897006,220195.37564061602 150483.39847823992 2.285336158450941,220194.0576147028 150481.29194509084 2.303390731004876,220192.84453909204 150479.12327688694 2.321445303558811,220191.73933618914 150476.89769813983 2.339499876112746,220190.74466852468 150474.62057046374 2.357554448666682,220189.86293234018 150472.2973796586 2.375609021220617,220189.09625181538 150469.93372249458 2.393663593774552,220188.4464739508 150467.53529322887 2.411718166328487,220187.91516411823 150465.10786988755 2.429772738882422,220187.50360228957 150462.65730034615 2.447827311436357,220187.21277995332 150460.1894882413 2.465881883990292,220187.04339772597 150457.71037874854 2.483936456544227,220186.99586366417 150455.22594425976 2.501991029098163,220187.0702922816 150452.74216999527 2.520045601652098,220187.26650427323 150450.2650395848 2.538100174206033,220187.58402694712 150447.80052065253 2.556154746759968,220188.02209536344 150445.3545504404 2.574209319313903,220188.57965417692 150442.93302150487 2.592263891867838,220189.2553601796 150440.54176752127 2.610318464421774,220190.0475855365 150438.18654922993 2.628373036975709,220190.95442170734 150435.87304055793 2.646427609529644,220191.97368404438 150433.60681495038 2.664482182083579,220193.10291705534 150431.39333194323 2.682536754637514,220194.33940031903 150429.2379240109 2.70059132719145,220195.68015503895 150427.14578371993 2.718645899745385,220197.1219512195 150425.1219512195 2.73670047229932,220198.66131544748 150423.1713020994 2.754755044853255,220200.29453925954 150421.2985356442 2.77280961740719,220202.01768807654 150419.50816351234 2.790864189961126,220203.82661068198 150417.80449886707 2.808918762515061,220205.71694922293 150416.19164598576 2.826973335068996,220207.68414970822 150414.6734903723 2.845027907622931,220209.7234729796 150413.25368939652 2.863082480176866,220211.83000612867 150411.93566348328 2.881137052730801,220213.99867433257 150410.72258787253 2.899191625284736,220216.22425307968 150409.61738496964 2.917246197838671,220218.50138075577 150408.62271730517 2.935300770392606,220220.82457156092 150407.74098112067 2.953355342946542,220223.18822872493 150406.97430059587 2.971409915500477,220225.58665799064 150406.3245227313 2.989464488054412,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc line CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3) into line segments and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 881}
{"id": 156, "function": "ST_CurveToLine", "question": "将圆弧曲线CIRCULARSTRING(220268 150415,220227 150505,220227 150406)转换为线段近似（每四分之一圆的分段数为2），并输出WKT格式结果。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'),2));", "execution_result": [["LINESTRING(220268 150415,220287.74030014945 150448.34269965385,220278.1219512195 150485.8780487805,220244.77925156566 150505.61834892994,220207.24390243902 150496,220187.50360228957 150462.65730034615,220197.1219512195 150425.1219512195,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into linear segments, approximating each quarter arc with 2 segments, and output the WKT string of the converted result.", "source": "original", "new_id": 882}
{"id": 156, "function": "ST_CurveToLine", "question": "精确处理圆弧曲线，其顶点坐标为(220268,150415)、(220227,150505)、(220227,150406)，每四分之一圆的分段参数为2，输出文本化几何。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'),2));", "execution_result": [["LINESTRING(220268 150415,220287.74030014945 150448.34269965385,220278.1219512195 150485.8780487805,220244.77925156566 150505.61834892994,220207.24390243902 150496,220187.50360228957 150462.65730034615,220197.1219512195 150425.1219512195,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into linear segments, approximating each quarter arc with 2 segments, and output the WKT string of the converted result.", "source": "original", "new_id": 883}
{"id": 156, "function": "ST_CurveToLine", "question": "将圆弧线CIRCULARSTRING(220268 150415,220227 150505,220227 150406)转换为线段，转换时使用2作为每四分之一圆的段数参数，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'),2));", "execution_result": [["LINESTRING(220268 150415,220287.74030014945 150448.34269965385,220278.1219512195 150485.8780487805,220244.77925156566 150505.61834892994,220207.24390243902 150496,220187.50360228957 150462.65730034615,220197.1219512195 150425.1219512195,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into linear segments, approximating each quarter arc with 2 segments, and output the WKT string of the converted result.", "source": "original", "new_id": 884}
{"id": 156, "function": "ST_CurveToLine", "question": "输出圆弧曲线(220268 150415,220227 150505,220227 150406)经线性化（每四分之一圆分段参数为2）后的WKT字符串。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'),2));", "execution_result": [["LINESTRING(220268 150415,220287.74030014945 150448.34269965385,220278.1219512195 150485.8780487805,220244.77925156566 150505.61834892994,220207.24390243902 150496,220187.50360228957 150462.65730034615,220197.1219512195 150425.1219512195,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into linear segments, approximating each quarter arc with 2 segments, and output the WKT string of the converted result.", "source": "original", "new_id": 885}
{"id": 156, "function": "ST_CurveToLine", "question": "以WKT格式返回圆弧曲线CIRCULARSTRING(220268 150415,220227 150505,220227 150406)的线段近似结果，每四分之一圆的分段精度为2。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'),2));", "execution_result": [["LINESTRING(220268 150415,220287.74030014945 150448.34269965385,220278.1219512195 150485.8780487805,220244.77925156566 150505.61834892994,220207.24390243902 150496,220187.50360228957 150462.65730034615,220197.1219512195 150425.1219512195,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into linear segments, approximating each quarter arc with 2 segments, and output the WKT string of the converted result.", "source": "original", "new_id": 886}
{"id": 156, "function": "ST_CurveToLine", "question": "将圆弧线CIRCULARSTRING(220268 150415,220227 150505,220227 150406)转换为线段形式，使用2段线段逼近每四分之一圆弧，并输出转换结果的WKT字符串。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'),2));", "execution_result": [["LINESTRING(220268 150415,220287.74030014945 150448.34269965385,220278.1219512195 150485.8780487805,220244.77925156566 150505.61834892994,220207.24390243902 150496,220187.50360228957 150462.65730034615,220197.1219512195 150425.1219512195,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into linear segments, approximating each quarter arc with 2 segments, and output the WKT string of the converted result.", "source": "original", "new_id": 887}
{"id": 157, "function": "ST_CurveToLine", "question": "将CIRCULARSTRING(0 0,100 -100,200 0)圆弧用线段近似（直线与原曲线之间的最大距离不超过 20 个单位，并且保持形状对称），输出WKT格式。", "sql": "SELECT ST_AsText(ST_CurveToLine('CIRCULARSTRING(0 0,100 -100,200 0)'::geometry,20,1,1));", "execution_result": [["LINESTRING(0 0,49.99999999999996 -86.60254037844383,149.99999999999994 -86.6025403784439,200 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(0 0,100 -100,200 0) into a polyline approximated by 20 segments, where each quarter-circle uses 20 segments for approximation, with both the symmetric flag and error correction flag set to 1, and output the WKT string of the converted result.", "source": "original", "new_id": 888}
{"id": 157, "function": "ST_CurveToLine", "question": "精确转换经过(0,0)、(100,-100)、(200,0)三点的圆弧为线段表示，设置20个线段分段，采用绝对公差模式并保留原始点，返回WKT字符串。", "sql": "SELECT ST_AsText(ST_CurveToLine('CIRCULARSTRING(0 0,100 -100,200 0)'::geometry,20,1,1));", "execution_result": [["LINESTRING(0 0,49.99999999999996 -86.60254037844383,149.99999999999994 -86.6025403784439,200 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(0 0,100 -100,200 0) into a polyline approximated by 20 segments, where each quarter-circle uses 20 segments for approximation, with both the symmetric flag and error correction flag set to 1, and output the WKT string of the converted result.", "source": "original", "new_id": 889}
{"id": 157, "function": "ST_CurveToLine", "question": "将圆弧线CIRCULARSTRING(0 0,100 -100,200 0)转换为线段，设置每段最大角度20度，保留原始点，对称输出，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_CurveToLine('CIRCULARSTRING(0 0,100 -100,200 0)'::geometry,20,1,1));", "execution_result": [["LINESTRING(0 0,49.99999999999996 -86.60254037844383,149.99999999999994 -86.6025403784439,200 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(0 0,100 -100,200 0) into a polyline approximated by 20 segments, where each quarter-circle uses 20 segments for approximation, with both the symmetric flag and error correction flag set to 1, and output the WKT string of the converted result.", "source": "original", "new_id": 890}
{"id": 157, "function": "ST_CurveToLine", "question": "将圆弧线CIRCULARSTRING(0 0,100 -100,200 0)转换为线段，使用20段线段逼近每四分之一圆弧，保留原始顶点且不反转方向，输出转换结果的WKT字符串。", "sql": "SELECT ST_AsText(ST_CurveToLine('CIRCULARSTRING(0 0,100 -100,200 0)'::geometry,20,1,1));", "execution_result": [["LINESTRING(0 0,49.99999999999996 -86.60254037844383,149.99999999999994 -86.6025403784439,200 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(0 0,100 -100,200 0) into a polyline approximated by 20 segments, where each quarter-circle uses 20 segments for approximation, with both the symmetric flag and error correction flag set to 1, and output the WKT string of the converted result.", "source": "original", "new_id": 891}
{"id": 157, "function": "ST_CurveToLine", "question": "将圆弧线CIRCULARSTRING(0 0,100 -100,200 0)转换为由直线段组成的几何对象，其中每四分之一圆用20段线段逼近，保留原始顶点且不反转曲线方向，输出转换结果的WKT字符串。", "sql": "SELECT ST_AsText(ST_CurveToLine('CIRCULARSTRING(0 0,100 -100,200 0)'::geometry,20,1,1));", "execution_result": [["LINESTRING(0 0,49.99999999999996 -86.60254037844383,149.99999999999994 -86.6025403784439,200 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(0 0,100 -100,200 0) into a polyline approximated by 20 segments, where each quarter-circle uses 20 segments for approximation, with both the symmetric flag and error correction flag set to 1, and output the WKT string of the converted result.", "source": "original", "new_id": 892}
{"id": 157, "function": "ST_CurveToLine", "question": "将圆弧线CIRCULARSTRING(0 0,100 -100,200 0)转换为由20段线段近似的折线，其中每四分之一圆使用20段线段进行近似，并设置对称标志和误差修正标志均为1，输出转换后结果的WKT字符串。", "sql": "SELECT ST_AsText(ST_CurveToLine('CIRCULARSTRING(0 0,100 -100,200 0)'::geometry,20,1,1));", "execution_result": [["LINESTRING(0 0,49.99999999999996 -86.60254037844383,149.99999999999994 -86.6025403784439,200 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(0 0,100 -100,200 0) into a polyline approximated by 20 segments, where each quarter-circle uses 20 segments for approximation, with both the symmetric flag and error correction flag set to 1, and output the WKT string of the converted result.", "source": "original", "new_id": 893}
{"id": 158, "function": "ST_Scroll", "question": "将SRID=4326的线串LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)更改起点为POINT(5 5 4 2)，输出EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_Scroll('SRID=4326;LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)', 'POINT(5 5 4 2)'));", "execution_result": [["SRID=4326;LINESTRING(5 5 4 2,0 0 0 1,10 0 2 0,5 5 4 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the result after applying the ST_Scroll function to the geometry object LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2, 0 0 0 1) with SRID=4326, using the point POINT(5 5 4 2) as the parameter.", "source": "original", "new_id": 894}
{"id": 158, "function": "ST_Scroll", "question": "对包含四个三维点(0 0 0 1)、(10 0 2 0)、(5 5 4 2)、(0 0 0 1)的线串，更改起点为点(5 5 4 2)，返回EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_Scroll('SRID=4326;LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)', 'POINT(5 5 4 2)'));", "execution_result": [["SRID=4326;LINESTRING(5 5 4 2,0 0 0 1,10 0 2 0,5 5 4 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the result after applying the ST_Scroll function to the geometry object LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2, 0 0 0 1) with SRID=4326, using the point POINT(5 5 4 2) as the parameter.", "source": "original", "new_id": 895}
{"id": 158, "function": "ST_Scroll", "question": "对SRID为4326的LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)这条四维线段（含XYZM坐标），以POINT(5 5 4 2)为基准点进行滚动变换，并将结果以EWKT格式输出。", "sql": "SELECT ST_AsEWKT(ST_Scroll('SRID=4326;LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)', 'POINT(5 5 4 2)'));", "execution_result": [["SRID=4326;LINESTRING(5 5 4 2,0 0 0 1,10 0 2 0,5 5 4 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the result after applying the ST_Scroll function to the geometry object LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2, 0 0 0 1) with SRID=4326, using the point POINT(5 5 4 2) as the parameter.", "source": "original", "new_id": 896}
{"id": 158, "function": "ST_Scroll", "question": "输出以POINT(5 5 4 2)为滚动中心点，对SRID为4326的带M值的闭合线LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)进行滚动变换后的EWKT格式字符串结果。", "sql": "SELECT ST_AsEWKT(ST_Scroll('SRID=4326;LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)', 'POINT(5 5 4 2)'));", "execution_result": [["SRID=4326;LINESTRING(5 5 4 2,0 0 0 1,10 0 2 0,5 5 4 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the result after applying the ST_Scroll function to the geometry object LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2, 0 0 0 1) with SRID=4326, using the point POINT(5 5 4 2) as the parameter.", "source": "original", "new_id": 897}
{"id": 158, "function": "ST_Scroll", "question": "输出通过ST_Scroll函数将SRID为4326的线串几何LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2, 0 0 0 1)以POINT(5 5 4 2)为滚动中心点滚动之后得到的结果的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_Scroll('SRID=4326;LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)', 'POINT(5 5 4 2)'));", "execution_result": [["SRID=4326;LINESTRING(5 5 4 2,0 0 0 1,10 0 2 0,5 5 4 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the result after applying the ST_Scroll function to the geometry object LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2, 0 0 0 1) with SRID=4326, using the point POINT(5 5 4 2) as the parameter.", "source": "original", "new_id": 898}
{"id": 158, "function": "ST_Scroll", "question": "输出当以点 POINT(5 5 4 2) 作为参数，对SRID=4326的几何对象LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2, 0 0 0 1)应用 ST_Scroll 函数后得到的结果的 EWKT 格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Scroll('SRID=4326;LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)', 'POINT(5 5 4 2)'));", "execution_result": [["SRID=4326;LINESTRING(5 5 4 2,0 0 0 1,10 0 2 0,5 5 4 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string of the result after applying the ST_Scroll function to the geometry object LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2, 0 0 0 1) with SRID=4326, using the point POINT(5 5 4 2) as the parameter.", "source": "original", "new_id": 899}
{"id": 159, "function": "ST_FlipCoordinates", "question": "将POINT(1 2)的X/Y坐标交换后输出为EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_FlipCoordinates(GeomFromEWKT('POINT(1 2)')));", "execution_result": [["POINT(2 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of swapping the X and Y coordinates of the 2D point POINT(1 2) (in EWKT format).", "source": "original", "new_id": 900}
{"id": 159, "function": "ST_FlipCoordinates", "question": "翻转二维点POINT(1 2)的坐标顺序，返回带SRID的WKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_FlipCoordinates(GeomFromEWKT('POINT(1 2)')));", "execution_result": [["POINT(2 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of swapping the X and Y coordinates of the 2D point POINT(1 2) (in EWKT format).", "source": "original", "new_id": 901}
{"id": 159, "function": "ST_FlipCoordinates", "question": "将EWKT格式的二维点POINT(1 2)的X坐标和Y坐标进行交换，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_FlipCoordinates(GeomFromEWKT('POINT(1 2)')));", "execution_result": [["POINT(2 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of swapping the X and Y coordinates of the 2D point POINT(1 2) (in EWKT format).", "source": "original", "new_id": 902}
{"id": 159, "function": "ST_FlipCoordinates", "question": "输出POINT(1 2)坐标翻转后的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_FlipCoordinates(GeomFromEWKT('POINT(1 2)')));", "execution_result": [["POINT(2 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of swapping the X and Y coordinates of the 2D point POINT(1 2) (in EWKT format).", "source": "original", "new_id": 903}
{"id": 159, "function": "ST_FlipCoordinates", "question": "将WKT字符串形式POINT(1 2)返回坐标交换后的点几何。", "sql": "SELECT ST_AsEWKT(ST_FlipCoordinates(GeomFromEWKT('POINT(1 2)')));", "execution_result": [["POINT(2 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of swapping the X and Y coordinates of the 2D point POINT(1 2) (in EWKT format).", "source": "original", "new_id": 904}
{"id": 159, "function": "ST_FlipCoordinates", "question": "输出将二维点POINT(1 2)的X坐标和Y坐标交换后得到的结果（EWKT格式）。", "sql": "SELECT ST_AsEWKT(ST_FlipCoordinates(GeomFromEWKT('POINT(1 2)')));", "execution_result": [["POINT(2 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of swapping the X and Y coordinates of the 2D point POINT(1 2) (in EWKT format).", "source": "original", "new_id": 905}
{"id": 160, "function": "ST_Force2D", "question": "将三维圆弧曲线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为二维几何，并输出扩展WKT字符串。", "sql": "SELECT ST_AsEWKT(ST_Force2D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 2D geometry object and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 906}
{"id": 160, "function": "ST_Force2D", "question": "精确处理包含5个控制点(1 1 2)、(2 3 2)、(4 5 2)、(6 7 2)、(5 6 2)的三维圆弧曲线，输出其二维版本的EWKT表示。", "sql": "SELECT ST_AsEWKT(ST_Force2D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 2D geometry object and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 907}
{"id": 160, "function": "ST_Force2D", "question": "将三维圆弧线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为二维几何对象，并以扩展WKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Force2D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 2D geometry object and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 908}
{"id": 160, "function": "ST_Force2D", "question": "输出三维圆弧曲线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)的二维版本的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_Force2D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 2D geometry object and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 909}
{"id": 160, "function": "ST_Force2D", "question": "以包含SRID信息的文本格式返回随机创建的三维圆弧曲线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)的二维几何表示。", "sql": "SELECT ST_AsEWKT(ST_Force2D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 2D geometry object and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 910}
{"id": 160, "function": "ST_Force2D", "question": "将三维圆弧线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为二维几何对象后，输出其扩展WKT(EWKT)字符串表示。", "sql": "SELECT ST_AsEWKT(ST_Force2D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 2D geometry object and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 911}
{"id": 161, "function": "ST_Force2D", "question": "将三维多边形POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))转换为二维几何，输出EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_Force2D('POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))'));", "execution_result": [["POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2)) to a 2D geometry object and output its EWKT string representation.", "source": "original", "new_id": 912}
{"id": 161, "function": "ST_Force2D", "question": "对由外环(0 0 2,0 5 2,5 0 2,0 0 2)和内环(1 1 2,3 1 2,1 3 2,1 1 2)构成的三维多边形执行二维转换，返回EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_Force2D('POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))'));", "execution_result": [["POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2)) to a 2D geometry object and output its EWKT string representation.", "source": "original", "new_id": 913}
{"id": 161, "function": "ST_Force2D", "question": "将三维多边形POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))强制转换为二维几何体，并以扩展WKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Force2D('POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))'));", "execution_result": [["POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2)) to a 2D geometry object and output its EWKT string representation.", "source": "original", "new_id": 914}
{"id": 161, "function": "ST_Force2D", "question": "将三维多边形POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))强制转换为二维几何对象后，输出其EWKT格式的字符串表示。", "sql": "SELECT ST_AsEWKT(ST_Force2D('POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))'));", "execution_result": [["POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2)) to a 2D geometry object and output its EWKT string representation.", "source": "original", "new_id": 915}
{"id": 161, "function": "ST_Force2D", "question": "输出将三维多边形POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))强制转换为二维后的EWKT字符串表示。", "sql": "SELECT ST_AsEWKT(ST_Force2D('POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))'));", "execution_result": [["POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2)) to a 2D geometry object and output its EWKT string representation.", "source": "original", "new_id": 916}
{"id": 161, "function": "ST_Force2D", "question": "将三维多边形POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))强制转换为二维几何对象后，输出其EWKT格式字符串表示。", "sql": "SELECT ST_AsEWKT(ST_Force2D('POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))'));", "execution_result": [["POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2)) to a 2D geometry object and output its EWKT string representation.", "source": "original", "new_id": 917}
{"id": 162, "function": "ST_Force3D", "question": "将圆弧曲线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为显式三维几何，输出EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_Force3D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object and output its EWKT string representation.", "source": "original", "new_id": 918}
{"id": 162, "function": "ST_Force3D", "question": "对包含五个控制点(1 1 2)、(2 3 2)、(4 5 2)、(6 7 2)、(5 6 2)的圆弧执行ST_Force3D操作，返回EWKT结果。", "sql": "SELECT ST_AsEWKT(ST_Force3D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object and output its EWKT string representation.", "source": "original", "new_id": 919}
{"id": 162, "function": "ST_Force3D", "question": "将EWKT格式的圆弧线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为三维几何体，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Force3D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object and output its EWKT string representation.", "source": "original", "new_id": 920}
{"id": 162, "function": "ST_Force3D", "question": "输出圆弧CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)经过三维强制转换后的EWKT表示。", "sql": "SELECT ST_AsEWKT(ST_Force3D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object and output its EWKT string representation.", "source": "original", "new_id": 921}
{"id": 162, "function": "ST_Force3D", "question": "以包含SRID和三维坐标的EWKT格式返回强制转换为三维格式的圆弧几何CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)。", "sql": "SELECT ST_AsEWKT(ST_Force3D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object and output its EWKT string representation.", "source": "original", "new_id": 922}
{"id": 162, "function": "ST_Force3D", "question": "将圆弧线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为三维几何对象后，输出其EWKT格式的字符串表示。", "sql": "SELECT ST_AsEWKT(ST_Force3D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object and output its EWKT string representation.", "source": "original", "new_id": 923}
{"id": 163, "function": "ST_Force3D", "question": "将多边形POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))强制添加Z坐标值，输出为扩展WKT格式。", "sql": "SELECT ST_AsEWKT(ST_Force3D('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D polygon POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1)) to a 3D geometry and output its EWKT format string, with Z-coordinate values automatically filled as 0.", "source": "original", "new_id": 924}
{"id": 163, "function": "ST_Force3D", "question": "将外环坐标为(0 0,0 5,5 0,0 0)、内环坐标为(1 1,3 1,1 3,1 1)的多边形转换为三维几何，并以EWKT格式返回。", "sql": "SELECT ST_AsEWKT(ST_Force3D('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D polygon POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1)) to a 3D geometry and output its EWKT format string, with Z-coordinate values automatically filled as 0.", "source": "original", "new_id": 925}
{"id": 163, "function": "ST_Force3D", "question": "将二维多边形POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))强制转换为三维几何体（Z值默认为0），并以扩展WKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Force3D('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D polygon POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1)) to a 3D geometry and output its EWKT format string, with Z-coordinate values automatically filled as 0.", "source": "original", "new_id": 926}
{"id": 163, "function": "ST_Force3D", "question": "输出将多边形POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))强制转换为三维几何后的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Force3D('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D polygon POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1)) to a 3D geometry and output its EWKT format string, with Z-coordinate values automatically filled as 0.", "source": "original", "new_id": 927}
{"id": 163, "function": "ST_Force3D", "question": "将二维多边形POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))强制转换为三维几何体后，输出其EWKT格式字符串表示，要求包含Z坐标值。", "sql": "SELECT ST_AsEWKT(ST_Force3D('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D polygon POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1)) to a 3D geometry and output its EWKT format string, with Z-coordinate values automatically filled as 0.", "source": "original", "new_id": 928}
{"id": 163, "function": "ST_Force3D", "question": "将二维多边形POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))强制转换为三维几何体后，输出其EWKT格式字符串，其中Z坐标值自动补0。", "sql": "SELECT ST_AsEWKT(ST_Force3D('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D polygon POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1)) to a 3D geometry and output its EWKT format string, with Z-coordinate values automatically filled as 0.", "source": "original", "new_id": 929}
{"id": 164, "function": "ST_Force3DZ", "question": "将圆形弧线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为带有Z值的几何体，输出为EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 930}
{"id": 164, "function": "ST_Force3DZ", "question": "对由点(1 1 2)、(2 3 2)、(4 5 2)、(6 7 2)、(5 6 2)定义的圆形弧线执行强制3DZ转换，返回EWKT表示。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 931}
{"id": 164, "function": "ST_Force3DZ", "question": "将EWKT格式的圆弧线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为三维几何体（添加Z坐标），并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 932}
{"id": 164, "function": "ST_Force3DZ", "question": "输出经过3DZ强制转换后的圆形弧线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)的EWKT字符串表示。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 933}
{"id": 164, "function": "ST_Force3DZ", "question": "将圆弧线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为三维Z坐标几何体后，输出其EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 934}
{"id": 164, "function": "ST_Force3DZ", "question": "将圆弧线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为三维几何对象后，输出其扩展WKT(EWKT)格式的字符串表示。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 935}
{"id": 165, "function": "ST_Force3DZ", "question": "将多边形POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))强制添加Z坐标值后，输出为EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string after converting the 2D polygon POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1)) into a 3D geometry (with Z values defaulting to 0).", "source": "original", "new_id": 936}
{"id": 165, "function": "ST_Force3DZ", "question": "精确处理多边形外环(0 0,0 5,5 0,0 0)和内环(1 1,3 1,1 3,1 1)，生成带Z值的三维EWKT表示。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string after converting the 2D polygon POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1)) into a 3D geometry (with Z values defaulting to 0).", "source": "original", "new_id": 937}
{"id": 165, "function": "ST_Force3DZ", "question": "将二维多边形POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))强制转换为三维几何体（Z值默认为0），并以EWKT格式输出结果。其中外环坐标为(0 0)、(0 5)、(5 0)、(0 0)，内环坐标为(1 1)、(3 1)、(1 3)、(1 1)。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string after converting the 2D polygon POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1)) into a 3D geometry (with Z values defaulting to 0).", "source": "original", "new_id": 938}
{"id": 165, "function": "ST_Force3DZ", "question": "输出带孔多边形POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))三维化后的EWKT格式字符串，包含Z坐标值。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string after converting the 2D polygon POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1)) into a 3D geometry (with Z values defaulting to 0).", "source": "original", "new_id": 939}
{"id": 165, "function": "ST_Force3DZ", "question": "以EWKT文本格式返回强制三维化的多边形几何对象POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string after converting the 2D polygon POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1)) into a 3D geometry (with Z values defaulting to 0).", "source": "original", "new_id": 940}
{"id": 165, "function": "ST_Force3DZ", "question": "输出将二维多边形POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))强制转换为三维几何体（Z值默认为0）后的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format string after converting the 2D polygon POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1)) into a 3D geometry (with Z values defaulting to 0).", "source": "original", "new_id": 941}
{"id": 166, "function": "ST_Force3DM", "question": "将CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)这个三维圆弧几何对象强制转换为3DM类型，输出EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_Force3DM(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRINGM(1 1 0,2 3 0,4 5 0,6 7 0,5 6 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object with M-values and output its EWKT format string.", "source": "original", "new_id": 942}
{"id": 166, "function": "ST_Force3DM", "question": "对包含五个控制点(1 1 2)、(2 3 2)、(4 5 2)、(6 7 2)、(5 6 2)的三维圆弧字符串执行3DM强制转换并输出EWKT。", "sql": "SELECT ST_AsEWKT(ST_Force3DM(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRINGM(1 1 0,2 3 0,4 5 0,6 7 0,5 6 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object with M-values and output its EWKT format string.", "source": "original", "new_id": 943}
{"id": 166, "function": "ST_Force3DM", "question": "将EWKT格式的圆弧线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为带M值的三维几何对象，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Force3DM(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRINGM(1 1 0,2 3 0,4 5 0,6 7 0,5 6 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object with M-values and output its EWKT format string.", "source": "original", "new_id": 944}
{"id": 166, "function": "ST_Force3DM", "question": "输出经过3DM强制转换后的圆弧几何对象CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)的EWKT字符串表示。", "sql": "SELECT ST_AsEWKT(ST_Force3DM(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRINGM(1 1 0,2 3 0,4 5 0,6 7 0,5 6 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object with M-values and output its EWKT format string.", "source": "original", "new_id": 945}
{"id": 166, "function": "ST_Force3DM", "question": "返回带有M值的三维圆弧几何CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)的扩展WKT格式文本。", "sql": "SELECT ST_AsEWKT(ST_Force3DM(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRINGM(1 1 0,2 3 0,4 5 0,6 7 0,5 6 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object with M-values and output its EWKT format string.", "source": "original", "new_id": 946}
{"id": 166, "function": "ST_Force3DM", "question": "将圆弧线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为带M值的三维几何对象后，输出其EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Force3DM(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRINGM(1 1 0,2 3 0,4 5 0,6 7 0,5 6 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 3D geometry object with M-values and output its EWKT format string.", "source": "original", "new_id": 947}
{"id": 167, "function": "ST_Force3DM", "question": "将POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))这个带有Z坐标和内部环的多边形强制转换为3DM格式，输出EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_Force3DM('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["POLYGONM((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the polygon with Z values POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)) to a 3D polygon with M values and output it as an EWKT format string.", "source": "original", "new_id": 948}
{"id": 167, "function": "ST_Force3DM", "question": "对外环坐标为(0 0 1,0 5 1,5 0 1,0 0 1)、内环坐标为(1 1 1,3 1 1,1 3 1,1 1 1)的三维多边形执行ST_Force3DM转换。", "sql": "SELECT ST_AsEWKT(ST_Force3DM('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["POLYGONM((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the polygon with Z values POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)) to a 3D polygon with M values and output it as an EWKT format string.", "source": "original", "new_id": 949}
{"id": 167, "function": "ST_Force3DM", "question": "将带有Z值的多边形POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))强制转换为带有M值的三维几何体，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Force3DM('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["POLYGONM((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the polygon with Z values POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)) to a 3D polygon with M values and output it as an EWKT format string.", "source": "original", "new_id": 950}
{"id": 167, "function": "ST_Force3DM", "question": "输出经过3DM强制转换后的多边形POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))的EWKT字符串，包含SRID信息。", "sql": "SELECT ST_AsEWKT(ST_Force3DM('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["POLYGONM((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the polygon with Z values POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)) to a 3D polygon with M values and output it as an EWKT format string.", "source": "original", "new_id": 951}
{"id": 167, "function": "ST_Force3DM", "question": "以包含SRID的扩展WKT格式返回被强制添加M值的多边形几何体POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))。", "sql": "SELECT ST_AsEWKT(ST_Force3DM('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["POLYGONM((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the polygon with Z values POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)) to a 3D polygon with M values and output it as an EWKT format string.", "source": "original", "new_id": 952}
{"id": 167, "function": "ST_Force3DM", "question": "将带有Z值的多边形POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))强制转换为带有M值的三维多边形，并输出为EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Force3DM('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["POLYGONM((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the polygon with Z values POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)) to a 3D polygon with M values and output it as an EWKT format string.", "source": "original", "new_id": 953}
{"id": 168, "function": "ST_Force4D", "question": "将三维圆弧CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为四维几何对象，输出EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_Force4D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2 0,2 3 2 0,4 5 2 0,6 7 2 0,5 6 2 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 4D geometry object and output its EWKT string representation.", "source": "original", "new_id": 954}
{"id": 168, "function": "ST_Force4D", "question": "对通过五个控制点(1 1 2)、(2 3 2)、(4 5 2)、(6 7 2)、(5 6 2)定义的三维圆弧执行ST_Force4D操作，返回EWKT表示。", "sql": "SELECT ST_AsEWKT(ST_Force4D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2 0,2 3 2 0,4 5 2 0,6 7 2 0,5 6 2 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 4D geometry object and output its EWKT string representation.", "source": "original", "new_id": 955}
{"id": 168, "function": "ST_Force4D", "question": "将EWKT格式的圆弧线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为四维几何对象（包含X/Y/Z/M坐标），并以扩展WKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Force4D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2 0,2 3 2 0,4 5 2 0,6 7 2 0,5 6 2 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 4D geometry object and output its EWKT string representation.", "source": "original", "new_id": 956}
{"id": 168, "function": "ST_Force4D", "question": "输出三维圆弧CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)经四维转换后的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_Force4D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2 0,2 3 2 0,4 5 2 0,6 7 2 0,5 6 2 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 4D geometry object and output its EWKT string representation.", "source": "original", "new_id": 957}
{"id": 168, "function": "ST_Force4D", "question": "获取强制四维化的圆弧几何对象CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)的EWKT文本表示，包含SRID和M值信息。", "sql": "SELECT ST_AsEWKT(ST_Force4D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2 0,2 3 2 0,4 5 2 0,6 7 2 0,5 6 2 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 4D geometry object and output its EWKT string representation.", "source": "original", "new_id": 958}
{"id": 168, "function": "ST_Force4D", "question": "将三维圆弧线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)强制转换为四维几何对象后，输出其EWKT格式的字符串表示。", "sql": "SELECT ST_AsEWKT(ST_Force4D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2 0,2 3 2 0,4 5 2 0,6 7 2 0,5 6 2 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D circular arc string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) to a 4D geometry object and output its EWKT string representation.", "source": "original", "new_id": 959}
{"id": 169, "function": "ST_Force4D", "question": "将MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))强制转换为4D几何对象，输出EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_Force4D('MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["MULTILINESTRING((0 0 0 1,0 5 0 2,5 0 0 3,0 0 0 4),(1 1 0 1,3 1 0 1,1 3 0 1,1 1 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the multilinestring with M-values MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1)) to a four-dimensional geometry object and output its EWKT format string.", "source": "original", "new_id": 960}
{"id": 169, "function": "ST_Force4D", "question": "对包含两条路径（第一条路径坐标为(0 0 1)→(0 5 2)→(5 0 3)→(0 0 4)，第二条路径为(1 1 1)→(3 1 1)→(1 3 1)→(1 1 1)）的多线字符串执行ST_Force4D操作。", "sql": "SELECT ST_AsEWKT(ST_Force4D('MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["MULTILINESTRING((0 0 0 1,0 5 0 2,5 0 0 3,0 0 0 4),(1 1 0 1,3 1 0 1,1 3 0 1,1 1 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the multilinestring with M-values MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1)) to a four-dimensional geometry object and output its EWKT format string.", "source": "original", "new_id": 961}
{"id": 169, "function": "ST_Force4D", "question": "将带有M值的多线段'MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'强制转换为四维几何对象（包含X,Y,Z,M坐标），并以扩展WKT(EWKT)格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Force4D('MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["MULTILINESTRING((0 0 0 1,0 5 0 2,5 0 0 3,0 0 0 4),(1 1 0 1,3 1 0 1,1 3 0 1,1 1 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the multilinestring with M-values MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1)) to a four-dimensional geometry object and output its EWKT format string.", "source": "original", "new_id": 962}
{"id": 169, "function": "ST_Force4D", "question": "输出将给定多线字符串MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))强制转换为4D几何对象后的EWKT字符串表示。", "sql": "SELECT ST_AsEWKT(ST_Force4D('MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["MULTILINESTRING((0 0 0 1,0 5 0 2,5 0 0 3,0 0 0 4),(1 1 0 1,3 1 0 1,1 3 0 1,1 1 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the multilinestring with M-values MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1)) to a four-dimensional geometry object and output its EWKT format string.", "source": "original", "new_id": 963}
{"id": 169, "function": "ST_Force4D", "question": "以扩展WKT格式返回四维强制转换后的多线字符串几何对象MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))。", "sql": "SELECT ST_AsEWKT(ST_Force4D('MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["MULTILINESTRING((0 0 0 1,0 5 0 2,5 0 0 3,0 0 0 4),(1 1 0 1,3 1 0 1,1 3 0 1,1 1 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the multilinestring with M-values MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1)) to a four-dimensional geometry object and output its EWKT format string.", "source": "original", "new_id": 964}
{"id": 169, "function": "ST_Force4D", "question": "将带M值的多线段MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))强制转换为四维几何对象后，输出其EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Force4D('MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["MULTILINESTRING((0 0 0 1,0 5 0 2,5 0 0 3,0 0 0 4),(1 1 0 1,3 1 0 1,1 3 0 1,1 1 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the multilinestring with M-values MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1)) to a four-dimensional geometry object and output its EWKT format string.", "source": "original", "new_id": 965}
{"id": 170, "function": "ST_ForceCollection", "question": "将三维多边形POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))强制转换为几何集合，输出其EWKT表示。", "sql": "SELECT ST_AsEWKT(ST_ForceCollection('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation after casting the 3D polygon POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)) to a geometry collection.", "source": "original", "new_id": 966}
{"id": 170, "function": "ST_ForceCollection", "question": "对包含外环(0 0 1,0 5 1,5 0 1,0 0 1)和内环(1 1 1,3 1 1,1 3 1,1 1 1)的三维多边形执行集合转换，返回EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_ForceCollection('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation after casting the 3D polygon POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)) to a geometry collection.", "source": "original", "new_id": 967}
{"id": 170, "function": "ST_ForceCollection", "question": "将三维多边形POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))强制转换为几何集合，并以EWKT格式输出。", "sql": "SELECT ST_AsEWKT(ST_ForceCollection('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation after casting the 3D polygon POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)) to a geometry collection.", "source": "original", "new_id": 968}
{"id": 170, "function": "ST_ForceCollection", "question": "输出三维多边形POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))转换为集合后的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_ForceCollection('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation after casting the 3D polygon POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)) to a geometry collection.", "source": "original", "new_id": 969}
{"id": 170, "function": "ST_ForceCollection", "question": "以EWKT格式返回三维多边形POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))转换为集合后的结果，包含坐标和SRID信息。", "sql": "SELECT ST_AsEWKT(ST_ForceCollection('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation after casting the 3D polygon POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)) to a geometry collection.", "source": "original", "new_id": 970}
{"id": 170, "function": "ST_ForceCollection", "question": "输出将三维多边形POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))强制转换为几何集合后的EWKT字符串表示。", "sql": "SELECT ST_AsEWKT(ST_ForceCollection('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation after casting the 3D polygon POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)) to a geometry collection.", "source": "original", "new_id": 971}
{"id": 171, "function": "ST_ForceCollection", "question": "将CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)这个弧形曲线强制转换为集合对象，并以WKT格式输出。", "sql": "SELECT ST_AsText(ST_ForceCollection('CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'));", "execution_result": [["GEOMETRYCOLLECTION(CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(220227 150406,2220227 150407,220227 150406) to a geometry collection type and output its WKT string representation.", "source": "original", "new_id": 972}
{"id": 171, "function": "ST_ForceCollection", "question": "输出将三个点(220227 150406)、(2220227 150407)、(220227 150406)组成的圆弧转换为集合后的文本表示。", "sql": "SELECT ST_AsText(ST_ForceCollection('CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'));", "execution_result": [["GEOMETRYCOLLECTION(CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(220227 150406,2220227 150407,220227 150406) to a geometry collection type and output its WKT string representation.", "source": "original", "new_id": 973}
{"id": 171, "function": "ST_ForceCollection", "question": "将圆弧线CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)强制转换为几何集合类型，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_ForceCollection('CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'));", "execution_result": [["GEOMETRYCOLLECTION(CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(220227 150406,2220227 150407,220227 150406) to a geometry collection type and output its WKT string representation.", "source": "original", "new_id": 974}
{"id": 171, "function": "ST_ForceCollection", "question": "输出将圆弧CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)转换为集合后的WKT格式字符串。", "sql": "SELECT ST_AsText(ST_ForceCollection('CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'));", "execution_result": [["GEOMETRYCOLLECTION(CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(220227 150406,2220227 150407,220227 150406) to a geometry collection type and output its WKT string representation.", "source": "original", "new_id": 975}
{"id": 171, "function": "ST_ForceCollection", "question": "以文本形式返回圆弧几何对象CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)强制转换为集合后的结果。", "sql": "SELECT ST_AsText(ST_ForceCollection('CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'));", "execution_result": [["GEOMETRYCOLLECTION(CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(220227 150406,2220227 150407,220227 150406) to a geometry collection type and output its WKT string representation.", "source": "original", "new_id": 976}
{"id": 171, "function": "ST_ForceCollection", "question": "将圆弧线CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)强制转换为几何集合类型后，输出其WKT字符串表示。", "sql": "SELECT ST_AsText(ST_ForceCollection('CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'));", "execution_result": [["GEOMETRYCOLLECTION(CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(220227 150406,2220227 150407,220227 150406) to a geometry collection type and output its WKT string representation.", "source": "original", "new_id": 977}
{"id": 173, "function": "ST_ForceCurve", "question": "将三维多边形POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))转换为曲线几何并输出WKT文本。", "sql": "SELECT ST_AsText( ST_ForceCurve( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))'::geometry ) );", "execution_result": [["CURVEPOLYGON Z ((0 0 2,5 0 2,0 5 2,0 0 2),(1 1 2,1 3 2,3 1 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2)) to a curved geometry type and output its WKT string representation.", "source": "original", "new_id": 978}
{"id": 173, "function": "ST_ForceCurve", "question": "对带有内环(1 1 2, 1 3 2, 3 1 2, 1 1 2)的三维多边形(外环0 0 2, 5 0 2, 0 5 2, 0 0 2)执行曲线转换后输出文本。", "sql": "SELECT ST_AsText( ST_ForceCurve( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))'::geometry ) );", "execution_result": [["CURVEPOLYGON Z ((0 0 2,5 0 2,0 5 2,0 0 2),(1 1 2,1 3 2,3 1 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2)) to a curved geometry type and output its WKT string representation.", "source": "original", "new_id": 979}
{"id": 173, "function": "ST_ForceCurve", "question": "将三维多边形POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))强制转换为曲线几何类型，并以WKT格式输出结果。该多边形包含外环坐标点(0 0 2)、(5 0 2)、(0 5 2)、(0 0 2)和内环坐标点(1 1 2)、(1 3 2)、(3 1 2)、(1 1 2)，所有坐标点均包含Z值2。", "sql": "SELECT ST_AsText( ST_ForceCurve( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))'::geometry ) );", "execution_result": [["CURVEPOLYGON Z ((0 0 2,5 0 2,0 5 2,0 0 2),(1 1 2,1 3 2,3 1 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2)) to a curved geometry type and output its WKT string representation.", "source": "original", "new_id": 980}
{"id": 173, "function": "ST_ForceCurve", "question": "输出将三维多边形POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))强制转换为曲线几何类型后的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_ForceCurve( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))'::geometry ) );", "execution_result": [["CURVEPOLYGON Z ((0 0 2,5 0 2,0 5 2,0 0 2),(1 1 2,1 3 2,3 1 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2)) to a curved geometry type and output its WKT string representation.", "source": "original", "new_id": 981}
{"id": 173, "function": "ST_ForceCurve", "question": "输出将三维多边形（外环点坐标：0 0 2、5 0 2、0 5 2、0 0 2；内环点坐标：1 1 2、1 3 2、3 1 2、1 1 2）强制转换为曲线几何类型后得到的WKT字符串。", "sql": "SELECT ST_AsText( ST_ForceCurve( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))'::geometry ) );", "execution_result": [["CURVEPOLYGON Z ((0 0 2,5 0 2,0 5 2,0 0 2),(1 1 2,1 3 2,3 1 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2)) to a curved geometry type and output its WKT string representation.", "source": "original", "new_id": 982}
{"id": 173, "function": "ST_ForceCurve", "question": "将三维多边形POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))强制转换为曲线几何类型后，输出其WKT字符串表示。", "sql": "SELECT ST_AsText( ST_ForceCurve( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))'::geometry ) );", "execution_result": [["CURVEPOLYGON Z ((0 0 2,5 0 2,0 5 2,0 0 2),(1 1 2,1 3 2,3 1 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2)) to a curved geometry type and output its WKT string representation.", "source": "original", "new_id": 983}
{"id": 174, "function": "ST_ForceRHR", "question": "将外环坐标为(0 0 2,5 0 2,0 5 2,0 0 2)、内环坐标为(1 1 2,1 3 2,3 1 2,1 1 2)的三维多边形顶点强制右旋后输出EWKT。", "sql": "SELECT ST_AsEWKT( ST_ForceRHR( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))' ) );", "execution_result": [["POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2)) to right-hand rule orientation and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 984}
{"id": 174, "function": "ST_ForceRHR", "question": "对Z值均为2的多边形（外环：0 0到5 0到0 5，内环：1 1到1 3到3 1）执行ST_ForceRHR后转为EWKT格式。", "sql": "SELECT ST_AsEWKT( ST_ForceRHR( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))' ) );", "execution_result": [["POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2)) to right-hand rule orientation and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 985}
{"id": 174, "function": "ST_ForceRHR", "question": "将三维多边形POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))强制转换为右手规则方向，并以扩展WKT格式输出结果。该多边形包含外环坐标序列(0 0 2, 5 0 2, 0 5 2, 0 0 2)和内环孔洞坐标序列(1 1 2, 1 3 2, 3 1 2, 1 1 2)，所有坐标点均包含Z值2。", "sql": "SELECT ST_AsEWKT( ST_ForceRHR( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))' ) );", "execution_result": [["POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2)) to right-hand rule orientation and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 986}
{"id": 174, "function": "ST_ForceRHR", "question": "输出将三维多边形POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))强制转换为右手规则后的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT( ST_ForceRHR( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))' ) );", "execution_result": [["POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2)) to right-hand rule orientation and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 987}
{"id": 174, "function": "ST_ForceRHR", "question": "输出将三维多边形POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))强制使用右旋规则（确保外环逆时针方向、内环顺时针方向）后得到的EWKT字符串。", "sql": "SELECT ST_AsEWKT( ST_ForceRHR( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))' ) );", "execution_result": [["POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2)) to right-hand rule orientation and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 988}
{"id": 174, "function": "ST_ForceRHR", "question": "将三维多边形POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))强制转换为右手法则方向后，输出其扩展WKT(EWKT)字符串表示。", "sql": "SELECT ST_AsEWKT( ST_ForceRHR( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))' ) );", "execution_result": [["POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polygon POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2)) to right-hand rule orientation and output its extended WKT (EWKT) string representation.", "source": "original", "new_id": 989}
{"id": 175, "function": "ST_LineExtend", "question": "将LINESTRING(0 0, 0 10)线段起点方向延伸5单位、终点方向延伸6单位后输出WKT文本。", "sql": "SELECT ST_AsText(ST_LineExtend('LINESTRING(0 0, 0 10)'::geometry, 5, 6));", "execution_result": [["LINESTRING(0 -6,0 0,0 10,0 15)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the LINESTRING(0 0, 0 10) line segment after extending 5 units in the start point direction and 6 units in the end point direction.", "source": "original", "new_id": 990}
{"id": 175, "function": "ST_LineExtend", "question": "精确延伸线段LINESTRING(0 0, 0 10)：起点方向5单位，终点方向6单位，返回WKT格式。", "sql": "SELECT ST_AsText(ST_LineExtend('LINESTRING(0 0, 0 10)'::geometry, 5, 6));", "execution_result": [["LINESTRING(0 -6,0 0,0 10,0 15)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the LINESTRING(0 0, 0 10) line segment after extending 5 units in the start point direction and 6 units in the end point direction.", "source": "original", "new_id": 991}
{"id": 175, "function": "ST_LineExtend", "question": "对LINESTRING(0 0, 0 10)这条线段进行延长操作，起点方向延长5个单位，终点方向延长6个单位，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_LineExtend('LINESTRING(0 0, 0 10)'::geometry, 5, 6));", "execution_result": [["LINESTRING(0 -6,0 0,0 10,0 15)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the LINESTRING(0 0, 0 10) line segment after extending 5 units in the start point direction and 6 units in the end point direction.", "source": "original", "new_id": 992}
{"id": 175, "function": "ST_LineExtend", "question": "输出延伸后的线段LINESTRING(0 0, 0 10)几何的WKT字符串表示，其中起点方向延伸5单位、终点方向延伸6单位。", "sql": "SELECT ST_AsText(ST_LineExtend('LINESTRING(0 0, 0 10)'::geometry, 5, 6));", "execution_result": [["LINESTRING(0 -6,0 0,0 10,0 15)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the LINESTRING(0 0, 0 10) line segment after extending 5 units in the start point direction and 6 units in the end point direction.", "source": "original", "new_id": 993}
{"id": 175, "function": "ST_LineExtend", "question": "以Well-Known Text格式返回经过延伸处理（起点方向延伸5单位，终点方向延伸6单位）的线段LINESTRING(0 0, 0 10)。", "sql": "SELECT ST_AsText(ST_LineExtend('LINESTRING(0 0, 0 10)'::geometry, 5, 6));", "execution_result": [["LINESTRING(0 -6,0 0,0 10,0 15)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the LINESTRING(0 0, 0 10) line segment after extending 5 units in the start point direction and 6 units in the end point direction.", "source": "original", "new_id": 994}
{"id": 175, "function": "ST_LineExtend", "question": "输出LINESTRING(0 0, 0 10)线段在起点方向延伸5个单位、终点方向延伸6个单位后的WKT字符串。", "sql": "SELECT ST_AsText(ST_LineExtend('LINESTRING(0 0, 0 10)'::geometry, 5, 6));", "execution_result": [["LINESTRING(0 -6,0 0,0 10,0 15)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the LINESTRING(0 0, 0 10) line segment after extending 5 units in the start point direction and 6 units in the end point direction.", "source": "original", "new_id": 995}
{"id": 176, "function": "ST_LineToCurve", "question": "以POINT(1 3)为中心创建半径为3的缓冲区，将其几何转换为曲线表示，同时输出原始缓冲区和曲线缓冲区的WKT格式。", "sql": "SELECT ST_AsText(ST_LineToCurve(foo.geom)) AS curvedastext,ST_AsText(foo.geom) AS non_curvedastext \nFROM (SELECT ST_Buffer('POINT(1 3)'::geometry, 3) AS geom) AS foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(4 3,-2 3,4 3))", "POLYGON((4 3,3.942355841209691 2.414729033951615,3.77163859753386 1.851949702904731,3.494408836907636 1.333289300941194,3.121320343559643 0.878679656440358,2.666710699058807 0.505591163092364,2.14805029709527 0.22836140246614,1.585270966048385 0.057644158790309,1 0,0.414729033951615 0.057644158790309,-0.148050297095269 0.22836140246614,-0.666710699058806 0.505591163092364,-1.121320343559642 0.878679656440357,-1.494408836907636 1.333289300941194,-1.77163859753386 1.85194970290473,-1.942355841209691 2.414729033951614,-2 3,-1.942355841209691 3.585270966048385,-1.77163859753386 4.148050297095269,-1.494408836907636 4.666710699058806,-1.121320343559643 5.121320343559642,-0.666710699058806 5.494408836907636,-0.148050297095271 5.77163859753386,0.414729033951614 5.942355841209691,1 6,1.585270966048385 5.942355841209691,2.14805029709527 5.77163859753386,2.666710699058806 5.494408836907636,3.121320343559642 5.121320343559643,3.494408836907636 4.666710699058806,3.77163859753386 4.148050297095271,3.942355841209691 3.585270966048386,4 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representations of a 3-unit distance buffer geometry centered at POINT(1 3), converting the buffer to a curved version and retaining the original straight-line version, with column names curvedastext and non_curvedastext respectively.", "source": "original", "new_id": 996}
{"id": 176, "function": "ST_LineToCurve", "question": "对坐标为(1,3)的点创建3单位距离的缓冲区，分别输出该缓冲区的原始折线表示和曲线表示的WKT文本。", "sql": "SELECT ST_AsText(ST_LineToCurve(foo.geom)) AS curvedastext,ST_AsText(foo.geom) AS non_curvedastext \nFROM (SELECT ST_Buffer('POINT(1 3)'::geometry, 3) AS geom) AS foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(4 3,-2 3,4 3))", "POLYGON((4 3,3.942355841209691 2.414729033951615,3.77163859753386 1.851949702904731,3.494408836907636 1.333289300941194,3.121320343559643 0.878679656440358,2.666710699058807 0.505591163092364,2.14805029709527 0.22836140246614,1.585270966048385 0.057644158790309,1 0,0.414729033951615 0.057644158790309,-0.148050297095269 0.22836140246614,-0.666710699058806 0.505591163092364,-1.121320343559642 0.878679656440357,-1.494408836907636 1.333289300941194,-1.77163859753386 1.85194970290473,-1.942355841209691 2.414729033951614,-2 3,-1.942355841209691 3.585270966048385,-1.77163859753386 4.148050297095269,-1.494408836907636 4.666710699058806,-1.121320343559643 5.121320343559642,-0.666710699058806 5.494408836907636,-0.148050297095271 5.77163859753386,0.414729033951614 5.942355841209691,1 6,1.585270966048385 5.942355841209691,2.14805029709527 5.77163859753386,2.666710699058806 5.494408836907636,3.121320343559642 5.121320343559643,3.494408836907636 4.666710699058806,3.77163859753386 4.148050297095271,3.942355841209691 3.585270966048386,4 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representations of a 3-unit distance buffer geometry centered at POINT(1 3), converting the buffer to a curved version and retaining the original straight-line version, with column names curvedastext and non_curvedastext respectively.", "source": "original", "new_id": 997}
{"id": 176, "function": "ST_LineToCurve", "question": "首先以坐标(1,3)的二维点为中心创建半径为3的圆形缓冲区，然后将该缓冲区的边界几何从折线转换为圆弧线，最后分别以WKT格式输出转换后的圆弧线几何和原始折线几何。", "sql": "SELECT ST_AsText(ST_LineToCurve(foo.geom)) AS curvedastext,ST_AsText(foo.geom) AS non_curvedastext \nFROM (SELECT ST_Buffer('POINT(1 3)'::geometry, 3) AS geom) AS foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(4 3,-2 3,4 3))", "POLYGON((4 3,3.942355841209691 2.414729033951615,3.77163859753386 1.851949702904731,3.494408836907636 1.333289300941194,3.121320343559643 0.878679656440358,2.666710699058807 0.505591163092364,2.14805029709527 0.22836140246614,1.585270966048385 0.057644158790309,1 0,0.414729033951615 0.057644158790309,-0.148050297095269 0.22836140246614,-0.666710699058806 0.505591163092364,-1.121320343559642 0.878679656440357,-1.494408836907636 1.333289300941194,-1.77163859753386 1.85194970290473,-1.942355841209691 2.414729033951614,-2 3,-1.942355841209691 3.585270966048385,-1.77163859753386 4.148050297095269,-1.494408836907636 4.666710699058806,-1.121320343559643 5.121320343559642,-0.666710699058806 5.494408836907636,-0.148050297095271 5.77163859753386,0.414729033951614 5.942355841209691,1 6,1.585270966048385 5.942355841209691,2.14805029709527 5.77163859753386,2.666710699058806 5.494408836907636,3.121320343559642 5.121320343559643,3.494408836907636 4.666710699058806,3.77163859753386 4.148050297095271,3.942355841209691 3.585270966048386,4 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representations of a 3-unit distance buffer geometry centered at POINT(1 3), converting the buffer to a curved version and retaining the original straight-line version, with column names curvedastext and non_curvedastext respectively.", "source": "original", "new_id": 998}
{"id": 176, "function": "ST_LineToCurve", "question": "输出点POINT(1 3)的3单位缓冲区的原始WKT表示和转换为曲线的WKT表示。", "sql": "SELECT ST_AsText(ST_LineToCurve(foo.geom)) AS curvedastext,ST_AsText(foo.geom) AS non_curvedastext \nFROM (SELECT ST_Buffer('POINT(1 3)'::geometry, 3) AS geom) AS foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(4 3,-2 3,4 3))", "POLYGON((4 3,3.942355841209691 2.414729033951615,3.77163859753386 1.851949702904731,3.494408836907636 1.333289300941194,3.121320343559643 0.878679656440358,2.666710699058807 0.505591163092364,2.14805029709527 0.22836140246614,1.585270966048385 0.057644158790309,1 0,0.414729033951615 0.057644158790309,-0.148050297095269 0.22836140246614,-0.666710699058806 0.505591163092364,-1.121320343559642 0.878679656440357,-1.494408836907636 1.333289300941194,-1.77163859753386 1.85194970290473,-1.942355841209691 2.414729033951614,-2 3,-1.942355841209691 3.585270966048385,-1.77163859753386 4.148050297095269,-1.494408836907636 4.666710699058806,-1.121320343559643 5.121320343559642,-0.666710699058806 5.494408836907636,-0.148050297095271 5.77163859753386,0.414729033951614 5.942355841209691,1 6,1.585270966048385 5.942355841209691,2.14805029709527 5.77163859753386,2.666710699058806 5.494408836907636,3.121320343559642 5.121320343559643,3.494408836907636 4.666710699058806,3.77163859753386 4.148050297095271,3.942355841209691 3.585270966048386,4 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representations of a 3-unit distance buffer geometry centered at POINT(1 3), converting the buffer to a curved version and retaining the original straight-line version, with column names curvedastext and non_curvedastext respectively.", "source": "original", "new_id": 999}
{"id": 176, "function": "ST_LineToCurve", "question": "获取以POINT(1 3)为中心创建半径为3的缓冲区几何对象曲线转换前后的WKT字符串结果，分别命名为curvedastext和non_curvedastext。", "sql": "SELECT ST_AsText(ST_LineToCurve(foo.geom)) AS curvedastext,ST_AsText(foo.geom) AS non_curvedastext \nFROM (SELECT ST_Buffer('POINT(1 3)'::geometry, 3) AS geom) AS foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(4 3,-2 3,4 3))", "POLYGON((4 3,3.942355841209691 2.414729033951615,3.77163859753386 1.851949702904731,3.494408836907636 1.333289300941194,3.121320343559643 0.878679656440358,2.666710699058807 0.505591163092364,2.14805029709527 0.22836140246614,1.585270966048385 0.057644158790309,1 0,0.414729033951615 0.057644158790309,-0.148050297095269 0.22836140246614,-0.666710699058806 0.505591163092364,-1.121320343559642 0.878679656440357,-1.494408836907636 1.333289300941194,-1.77163859753386 1.85194970290473,-1.942355841209691 2.414729033951614,-2 3,-1.942355841209691 3.585270966048385,-1.77163859753386 4.148050297095269,-1.494408836907636 4.666710699058806,-1.121320343559643 5.121320343559642,-0.666710699058806 5.494408836907636,-0.148050297095271 5.77163859753386,0.414729033951614 5.942355841209691,1 6,1.585270966048385 5.942355841209691,2.14805029709527 5.77163859753386,2.666710699058806 5.494408836907636,3.121320343559642 5.121320343559643,3.494408836907636 4.666710699058806,3.77163859753386 4.148050297095271,3.942355841209691 3.585270966048386,4 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representations of a 3-unit distance buffer geometry centered at POINT(1 3), converting the buffer to a curved version and retaining the original straight-line version, with column names curvedastext and non_curvedastext respectively.", "source": "original", "new_id": 1000}
{"id": 176, "function": "ST_LineToCurve", "question": "输出以POINT(1 3)为中心创建3单位距离的缓冲区几何体后，分别将该缓冲区转换为曲线版本和保留原始直线版本的WKT字符串表示，列名分别为curvedastext和non_curvedastext。", "sql": "SELECT ST_AsText(ST_LineToCurve(foo.geom)) AS curvedastext,ST_AsText(foo.geom) AS non_curvedastext \nFROM (SELECT ST_Buffer('POINT(1 3)'::geometry, 3) AS geom) AS foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(4 3,-2 3,4 3))", "POLYGON((4 3,3.942355841209691 2.414729033951615,3.77163859753386 1.851949702904731,3.494408836907636 1.333289300941194,3.121320343559643 0.878679656440358,2.666710699058807 0.505591163092364,2.14805029709527 0.22836140246614,1.585270966048385 0.057644158790309,1 0,0.414729033951615 0.057644158790309,-0.148050297095269 0.22836140246614,-0.666710699058806 0.505591163092364,-1.121320343559642 0.878679656440357,-1.494408836907636 1.333289300941194,-1.77163859753386 1.85194970290473,-1.942355841209691 2.414729033951614,-2 3,-1.942355841209691 3.585270966048385,-1.77163859753386 4.148050297095269,-1.494408836907636 4.666710699058806,-1.121320343559643 5.121320343559642,-0.666710699058806 5.494408836907636,-0.148050297095271 5.77163859753386,0.414729033951614 5.942355841209691,1 6,1.585270966048385 5.942355841209691,2.14805029709527 5.77163859753386,2.666710699058806 5.494408836907636,3.121320343559642 5.121320343559643,3.494408836907636 4.666710699058806,3.77163859753386 4.148050297095271,3.942355841209691 3.585270966048386,4 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representations of a 3-unit distance buffer geometry centered at POINT(1 3), converting the buffer to a curved version and retaining the original straight-line version, with column names curvedastext and non_curvedastext respectively.", "source": "original", "new_id": 1001}
{"id": 177, "function": "ST_LineToCurve", "question": "以点(1,3)为中心创建半径为2、每象限2段线段的缓冲区，提取其边界并强制转为三维几何，再沿Z轴平移3个单位，X轴和Y轴方向不平移，最后将结果分别转换为曲线和原始线段的WKT格式。", "sql": "SELECT ST_AsText(ST_LineToCurve(geom)) As curved, ST_AsText(geom) AS not_curved \nFROM (SELECT ST_Translate(ST_Force3D(ST_Boundary(ST_Buffer(ST_Point(1,3), 2,2))),0,0,3) AS geom) AS foo;", "execution_result": [["CIRCULARSTRING Z (3 3 3,-1 3 3,3 3 3)", "LINESTRING Z (3 3 3,2.414213562373095 1.585786437626905 3,1 1 3,-0.414213562373095 1.585786437626905 3,-1 3 3,-0.414213562373095 4.414213562373095 3,1 5 3,2.414213562373095 4.414213562373096 3,3 3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the original geometry after buffering the 2D point POINT(1 3) by 2 units (approximated with 2 arc segments), extracting the boundary, casting to 3D geometry, and translating 3 units along the Z-axis, as well as the WKT string of the result after converting it to a circular arc line.", "source": "original", "new_id": 1002}
{"id": 177, "function": "ST_LineToCurve", "question": "对ST_Point(1,3)创建参数为(半径=2,每象限线段数=2)的缓冲区，获取边界后添加Z坐标3，输出曲线转换前后的WKT文本。", "sql": "SELECT ST_AsText(ST_LineToCurve(geom)) As curved, ST_AsText(geom) AS not_curved \nFROM (SELECT ST_Translate(ST_Force3D(ST_Boundary(ST_Buffer(ST_Point(1,3), 2,2))),0,0,3) AS geom) AS foo;", "execution_result": [["CIRCULARSTRING Z (3 3 3,-1 3 3,3 3 3)", "LINESTRING Z (3 3 3,2.414213562373095 1.585786437626905 3,1 1 3,-0.414213562373095 1.585786437626905 3,-1 3 3,-0.414213562373095 4.414213562373095 3,1 5 3,2.414213562373095 4.414213562373096 3,3 3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the original geometry after buffering the 2D point POINT(1 3) by 2 units (approximated with 2 arc segments), extracting the boundary, casting to 3D geometry, and translating 3 units along the Z-axis, as well as the WKT string of the result after converting it to a circular arc line.", "source": "original", "new_id": 1003}
{"id": 177, "function": "ST_LineToCurve", "question": "首先创建一个二维点POINT(1 3)，然后以该点为中心生成一个半径为2、每四分之一圆由2段线段逼近的缓冲区多边形，接着提取该缓冲区的边界线，将其强制转换为三维几何体，再沿Z轴方向平移3个单位距离，最后分别输出转换后的几何体的曲线化版本和原始版本的WKT文本表示。", "sql": "SELECT ST_AsText(ST_LineToCurve(geom)) As curved, ST_AsText(geom) AS not_curved \nFROM (SELECT ST_Translate(ST_Force3D(ST_Boundary(ST_Buffer(ST_Point(1,3), 2,2))),0,0,3) AS geom) AS foo;", "execution_result": [["CIRCULARSTRING Z (3 3 3,-1 3 3,3 3 3)", "LINESTRING Z (3 3 3,2.414213562373095 1.585786437626905 3,1 1 3,-0.414213562373095 1.585786437626905 3,-1 3 3,-0.414213562373095 4.414213562373095 3,1 5 3,2.414213562373095 4.414213562373096 3,3 3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the original geometry after buffering the 2D point POINT(1 3) by 2 units (approximated with 2 arc segments), extracting the boundary, casting to 3D geometry, and translating 3 units along the Z-axis, as well as the WKT string of the result after converting it to a circular arc line.", "source": "original", "new_id": 1004}
{"id": 177, "function": "ST_LineToCurve", "question": "输出点(1,3)的缓冲区（半径为2,每象限线段数为2）边界经三维平移（X和Y方向不平移，Z轴方向平移3个单位）后，原始几何和曲线化几何的WKT字符串对比。", "sql": "SELECT ST_AsText(ST_LineToCurve(geom)) As curved, ST_AsText(geom) AS not_curved \nFROM (SELECT ST_Translate(ST_Force3D(ST_Boundary(ST_Buffer(ST_Point(1,3), 2,2))),0,0,3) AS geom) AS foo;", "execution_result": [["CIRCULARSTRING Z (3 3 3,-1 3 3,3 3 3)", "LINESTRING Z (3 3 3,2.414213562373095 1.585786437626905 3,1 1 3,-0.414213562373095 1.585786437626905 3,-1 3 3,-0.414213562373095 4.414213562373095 3,1 5 3,2.414213562373095 4.414213562373096 3,3 3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the original geometry after buffering the 2D point POINT(1 3) by 2 units (approximated with 2 arc segments), extracting the boundary, casting to 3D geometry, and translating 3 units along the Z-axis, as well as the WKT string of the result after converting it to a circular arc line.", "source": "original", "new_id": 1005}
{"id": 177, "function": "ST_LineToCurve", "question": "以WKT格式返回三维化并进行Z轴平移三个单位的缓冲区(点(1,3)为中心，半径为2,每象限线段数为2)边界，包含曲线转换前和转换后的两种文本表示。", "sql": "SELECT ST_AsText(ST_LineToCurve(geom)) As curved, ST_AsText(geom) AS not_curved \nFROM (SELECT ST_Translate(ST_Force3D(ST_Boundary(ST_Buffer(ST_Point(1,3), 2,2))),0,0,3) AS geom) AS foo;", "execution_result": [["CIRCULARSTRING Z (3 3 3,-1 3 3,3 3 3)", "LINESTRING Z (3 3 3,2.414213562373095 1.585786437626905 3,1 1 3,-0.414213562373095 1.585786437626905 3,-1 3 3,-0.414213562373095 4.414213562373095 3,1 5 3,2.414213562373095 4.414213562373096 3,3 3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the original geometry after buffering the 2D point POINT(1 3) by 2 units (approximated with 2 arc segments), extracting the boundary, casting to 3D geometry, and translating 3 units along the Z-axis, as well as the WKT string of the result after converting it to a circular arc line.", "source": "original", "new_id": 1006}
{"id": 177, "function": "ST_LineToCurve", "question": "输出将二维点POINT(1 3)缓冲2个单位距离（使用2段圆弧逼近）、提取边界、强制转换为三维几何体、沿Z轴平移3个单位后的原始几何体的WKT字符串，以及将其转换为圆弧线后的结果的WKT字符串。", "sql": "SELECT ST_AsText(ST_LineToCurve(geom)) As curved, ST_AsText(geom) AS not_curved \nFROM (SELECT ST_Translate(ST_Force3D(ST_Boundary(ST_Buffer(ST_Point(1,3), 2,2))),0,0,3) AS geom) AS foo;", "execution_result": [["CIRCULARSTRING Z (3 3 3,-1 3 3,3 3 3)", "LINESTRING Z (3 3 3,2.414213562373095 1.585786437626905 3,1 1 3,-0.414213562373095 1.585786437626905 3,-1 3 3,-0.414213562373095 4.414213562373095 3,1 5 3,2.414213562373095 4.414213562373096 3,3 3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the original geometry after buffering the 2D point POINT(1 3) by 2 units (approximated with 2 arc segments), extracting the boundary, casting to 3D geometry, and translating 3 units along the Z-axis, as well as the WKT string of the result after converting it to a circular arc line.", "source": "original", "new_id": 1007}
{"id": 178, "function": "ST_Multi", "question": "将POLYGON((10 30, 30 30, 30 10, 10 10, 10 30))转换为多几何类型并输出WKT文本。", "sql": "SELECT ST_AsText(ST_Multi('POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30))'));", "execution_result": [["MULTIPOLYGON(((10 30,30 30,30 10,10 10,10 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation after converting POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30)) to MULTIPOLYGON type.", "source": "original", "new_id": 1008}
{"id": 178, "function": "ST_Multi", "question": "输出坐标为(10 30, 30 30, 30 10, 10 10, 10 30)的多边形转换为多几何后的WKT表示。", "sql": "SELECT ST_AsText(ST_Multi('POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30))'));", "execution_result": [["MULTIPOLYGON(((10 30,30 30,30 10,10 10,10 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation after converting POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30)) to MULTIPOLYGON type.", "source": "original", "new_id": 1009}
{"id": 178, "function": "ST_Multi", "question": "将POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30))这个多边形转换为MULTIPOLYGON类型，并以WKT格式输出。", "sql": "SELECT ST_AsText(ST_Multi('POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30))'));", "execution_result": [["MULTIPOLYGON(((10 30,30 30,30 10,10 10,10 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation after converting POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30)) to MULTIPOLYGON type.", "source": "original", "new_id": 1010}
{"id": 178, "function": "ST_Multi", "question": "输出多边形转POLYGON((10 30, 30 30, 30 10, 10 10, 10 30))换为多几何类型后的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Multi('POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30))'));", "execution_result": [["MULTIPOLYGON(((10 30,30 30,30 10,10 10,10 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation after converting POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30)) to MULTIPOLYGON type.", "source": "original", "new_id": 1011}
{"id": 178, "function": "ST_Multi", "question": "获取POLYGON((10 30, 30 30, 30 10, 10 10, 10 30))的多几何版本文本输出。", "sql": "SELECT ST_AsText(ST_Multi('POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30))'));", "execution_result": [["MULTIPOLYGON(((10 30,30 30,30 10,10 10,10 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation after converting POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30)) to MULTIPOLYGON type.", "source": "original", "new_id": 1012}
{"id": 178, "function": "ST_Multi", "question": "输出将POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30))转换为MULTIPOLYGON类型后的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Multi('POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30))'));", "execution_result": [["MULTIPOLYGON(((10 30,30 30,30 10,10 10,10 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation after converting POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30)) to MULTIPOLYGON type.", "source": "original", "new_id": 1013}
{"id": 180, "function": "ST_Project", "question": "将地理坐标POINT(0 0)沿45度方向投影100000米距离，输出结果的WKT文本。", "sql": "SELECT ST_AsText(ST_Project('POINT(0 0)'::geography, 100000, radians(45.0)));", "execution_result": [["POINT(0.635231029125537 0.639472334729198)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the location obtained by projecting 100,000 meters from the geographic coordinate POINT(0 0) at a 45-degree azimuth.", "source": "original", "new_id": 1014}
{"id": 180, "function": "ST_Project", "question": "计算POINT(0 0)在方位角45度方向延伸100000米后的坐标点文本。", "sql": "SELECT ST_AsText(ST_Project('POINT(0 0)'::geography, 100000, radians(45.0)));", "execution_result": [["POINT(0.635231029125537 0.639472334729198)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the location obtained by projecting 100,000 meters from the geographic coordinate POINT(0 0) at a 45-degree azimuth.", "source": "original", "new_id": 1015}
{"id": 180, "function": "ST_Project", "question": "以地理坐标系中的POINT(0 0)为起点，沿45.0度方向（转换为弧度值）投影100000米距离，将结果转换为WKT格式输出。", "sql": "SELECT ST_AsText(ST_Project('POINT(0 0)'::geography, 100000, radians(45.0)));", "execution_result": [["POINT(0.635231029125537 0.639472334729198)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the location obtained by projecting 100,000 meters from the geographic coordinate POINT(0 0) at a 45-degree azimuth.", "source": "original", "new_id": 1016}
{"id": 180, "function": "ST_Project", "question": "输出POINT(0 0)沿45度方向投影100000米后的WKT字符串结果。", "sql": "SELECT ST_AsText(ST_Project('POINT(0 0)'::geography, 100000, radians(45.0)));", "execution_result": [["POINT(0.635231029125537 0.639472334729198)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the location obtained by projecting 100,000 meters from the geographic coordinate POINT(0 0) at a 45-degree azimuth.", "source": "original", "new_id": 1017}
{"id": 180, "function": "ST_Project", "question": "输出从地理坐标POINT(0 0)出发，沿45度方位角投影100000米距离后得到的新坐标点的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Project('POINT(0 0)'::geography, 100000, radians(45.0)));", "execution_result": [["POINT(0.635231029125537 0.639472334729198)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the location obtained by projecting 100,000 meters from the geographic coordinate POINT(0 0) at a 45-degree azimuth.", "source": "original", "new_id": 1018}
{"id": 180, "function": "ST_Project", "question": "输出从地理坐标POINT(0 0)出发，沿45度方位角投影100000米距离后所得位置的WKT字符串。", "sql": "SELECT ST_AsText(ST_Project('POINT(0 0)'::geography, 100000, radians(45.0)));", "execution_result": [["POINT(0.635231029125537 0.639472334729198)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the location obtained by projecting 100,000 meters from the geographic coordinate POINT(0 0) at a 45-degree azimuth.", "source": "original", "new_id": 1019}
{"id": 181, "function": "ST_QuantizeCoordinates", "question": "将POINT(100.123456 0)的坐标保留4位小数精度，输出WKT格式结果。", "sql": "SELECT ST_AsText(ST_QuantizeCoordinates('POINT (100.123456 0)'::geometry, 4));", "execution_result": [["POINT(100.12344360351562 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(100.123456 0) with its coordinate values rounded to 4 decimal places.", "source": "original", "new_id": 1020}
{"id": 181, "function": "ST_QuantizeCoordinates", "question": "对坐标为(100.123456, 0)的点对象执行4位精度的坐标量化，返回文本表示。", "sql": "SELECT ST_AsText(ST_QuantizeCoordinates('POINT (100.123456 0)'::geometry, 4));", "execution_result": [["POINT(100.12344360351562 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(100.123456 0) with its coordinate values rounded to 4 decimal places.", "source": "original", "new_id": 1021}
{"id": 181, "function": "ST_QuantizeCoordinates", "question": "将二维点POINT(100.123456 0)的坐标值量化到小数点后4位，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_QuantizeCoordinates('POINT (100.123456 0)'::geometry, 4));", "execution_result": [["POINT(100.12344360351562 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(100.123456 0) with its coordinate values rounded to 4 decimal places.", "source": "original", "new_id": 1022}
{"id": 181, "function": "ST_QuantizeCoordinates", "question": "输出POINT(100.123456 0)经过小数点后4位精度量化后的WKT字符串结果。", "sql": "SELECT ST_AsText(ST_QuantizeCoordinates('POINT (100.123456 0)'::geometry, 4));", "execution_result": [["POINT(100.12344360351562 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(100.123456 0) with its coordinate values rounded to 4 decimal places.", "source": "original", "new_id": 1023}
{"id": 181, "function": "ST_QuantizeCoordinates", "question": "以文本格式返回点坐标(100.123456, 0)保留4位小数的处理结果。", "sql": "SELECT ST_AsText(ST_QuantizeCoordinates('POINT (100.123456 0)'::geometry, 4));", "execution_result": [["POINT(100.12344360351562 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(100.123456 0) with its coordinate values rounded to 4 decimal places.", "source": "original", "new_id": 1024}
{"id": 181, "function": "ST_QuantizeCoordinates", "question": "输出将二维点POINT(100.123456 0)的坐标值保留4位小数精度后的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_QuantizeCoordinates('POINT (100.123456 0)'::geometry, 4));", "execution_result": [["POINT(100.12344360351562 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(100.123456 0) with its coordinate values rounded to 4 decimal places.", "source": "original", "new_id": 1025}
{"id": 182, "function": "ST_QuantizeCoordinates", "question": "对坐标为POINT (123.456789123456 123.456789123456)的二维点，测试从15到-15的整数精度参数下，ST_QuantizeCoordinates函数返回的十六进制编码和WKT文本结果。", "sql": "WITH test AS (SELECT 'POINT (123.456789123456 123.456789123456)'::geometry AS geom)\nSELECT\n  digits,\n  encode(ST_QuantizeCoordinates(geom, digits), 'hex'),\n  ST_AsText(ST_QuantizeCoordinates(geom, digits))\nFROM test, generate_series(15, -15, -1) AS digits;", "execution_result": [[15, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [14, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [13, "01010000005e9a72083cdd5e405e9a72083cdd5e40", "POINT(123.45678912345599 123.45678912345599)"], [12, "0101000000409a72083cdd5e40409a72083cdd5e40", "POINT(123.45678912345556 123.45678912345556)"], [11, "0101000000009a72083cdd5e40009a72083cdd5e40", "POINT(123.45678912345466 123.45678912345466)"], [10, "0101000000009872083cdd5e40009872083cdd5e40", "POINT(123.45678912344738 123.45678912344738)"], [9, "0101000000008072083cdd5e40008072083cdd5e40", "POINT(123.45678912336007 123.45678912336007)"], [8, "0101000000000070083cdd5e40000070083cdd5e40", "POINT(123.45678912103176 123.45678912103176)"], [7, "0101000000000060083cdd5e40000060083cdd5e40", "POINT(123.4567891061306 123.4567891061306)"], [6, "0101000000000000083cdd5e40000000083cdd5e40", "POINT(123.45678901672363 123.45678901672363)"], [5, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [4, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [3, "01010000000000000038dd5e400000000038dd5e40", "POINT(123.45654296875 123.45654296875)"], [2, "01010000000000000000dd5e400000000000dd5e40", "POINT(123.453125 123.453125)"], [1, "01010000000000000000dc5e400000000000dc5e40", "POINT(123.4375 123.4375)"], [0, "01010000000000000000c05e400000000000c05e40", "POINT(123 123)"], [-1, "01010000000000000000005e400000000000005e40", "POINT(120 120)"], [-2, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-3, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-4, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-5, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-6, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-7, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-8, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-9, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-10, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-11, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-12, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-13, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-14, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-15, "010100000000000000000058400000000000005840", "POINT(96 96)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output three results from table test for the geometric object POINT (123.456789123456 123.456789123456) as the coordinate precision digits decrease from 15 to -15 in steps of 1: the current precision digits, the HEX-encoded value after coordinate quantization, and the quantized WKT string representation.", "source": "original", "new_id": 1026}
{"id": 182, "function": "ST_QuantizeCoordinates", "question": "精确量化点POINT (123.456789123456 123.456789123456)的坐标，生成15到-15共31种精度级别的十六进制和WKT格式输出。", "sql": "WITH test AS (SELECT 'POINT (123.456789123456 123.456789123456)'::geometry AS geom)\nSELECT\n  digits,\n  encode(ST_QuantizeCoordinates(geom, digits), 'hex'),\n  ST_AsText(ST_QuantizeCoordinates(geom, digits))\nFROM test, generate_series(15, -15, -1) AS digits;", "execution_result": [[15, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [14, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [13, "01010000005e9a72083cdd5e405e9a72083cdd5e40", "POINT(123.45678912345599 123.45678912345599)"], [12, "0101000000409a72083cdd5e40409a72083cdd5e40", "POINT(123.45678912345556 123.45678912345556)"], [11, "0101000000009a72083cdd5e40009a72083cdd5e40", "POINT(123.45678912345466 123.45678912345466)"], [10, "0101000000009872083cdd5e40009872083cdd5e40", "POINT(123.45678912344738 123.45678912344738)"], [9, "0101000000008072083cdd5e40008072083cdd5e40", "POINT(123.45678912336007 123.45678912336007)"], [8, "0101000000000070083cdd5e40000070083cdd5e40", "POINT(123.45678912103176 123.45678912103176)"], [7, "0101000000000060083cdd5e40000060083cdd5e40", "POINT(123.4567891061306 123.4567891061306)"], [6, "0101000000000000083cdd5e40000000083cdd5e40", "POINT(123.45678901672363 123.45678901672363)"], [5, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [4, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [3, "01010000000000000038dd5e400000000038dd5e40", "POINT(123.45654296875 123.45654296875)"], [2, "01010000000000000000dd5e400000000000dd5e40", "POINT(123.453125 123.453125)"], [1, "01010000000000000000dc5e400000000000dc5e40", "POINT(123.4375 123.4375)"], [0, "01010000000000000000c05e400000000000c05e40", "POINT(123 123)"], [-1, "01010000000000000000005e400000000000005e40", "POINT(120 120)"], [-2, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-3, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-4, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-5, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-6, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-7, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-8, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-9, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-10, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-11, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-12, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-13, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-14, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-15, "010100000000000000000058400000000000005840", "POINT(96 96)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output three results from table test for the geometric object POINT (123.456789123456 123.456789123456) as the coordinate precision digits decrease from 15 to -15 in steps of 1: the current precision digits, the HEX-encoded value after coordinate quantization, and the quantized WKT string representation.", "source": "original", "new_id": 1027}
{"id": 182, "function": "ST_QuantizeCoordinates", "question": "对于给定的二维点POINT(123.456789123456 123.456789123456)，使用ST_QuantizeCoordinates函数分别按照精度参数digits从15到-15（步长为-1）进行坐标量化，并输出三个结果：当前精度值digits、量化后几何对象的十六进制编码（通过encode函数转换）、以及量化后几何对象的WKT文本表示（通过ST_AsText函数获取）。所有操作基于名为test的临时表，该表包含一个名为geom的几何字段。", "sql": "WITH test AS (SELECT 'POINT (123.456789123456 123.456789123456)'::geometry AS geom)\nSELECT\n  digits,\n  encode(ST_QuantizeCoordinates(geom, digits), 'hex'),\n  ST_AsText(ST_QuantizeCoordinates(geom, digits))\nFROM test, generate_series(15, -15, -1) AS digits;", "execution_result": [[15, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [14, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [13, "01010000005e9a72083cdd5e405e9a72083cdd5e40", "POINT(123.45678912345599 123.45678912345599)"], [12, "0101000000409a72083cdd5e40409a72083cdd5e40", "POINT(123.45678912345556 123.45678912345556)"], [11, "0101000000009a72083cdd5e40009a72083cdd5e40", "POINT(123.45678912345466 123.45678912345466)"], [10, "0101000000009872083cdd5e40009872083cdd5e40", "POINT(123.45678912344738 123.45678912344738)"], [9, "0101000000008072083cdd5e40008072083cdd5e40", "POINT(123.45678912336007 123.45678912336007)"], [8, "0101000000000070083cdd5e40000070083cdd5e40", "POINT(123.45678912103176 123.45678912103176)"], [7, "0101000000000060083cdd5e40000060083cdd5e40", "POINT(123.4567891061306 123.4567891061306)"], [6, "0101000000000000083cdd5e40000000083cdd5e40", "POINT(123.45678901672363 123.45678901672363)"], [5, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [4, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [3, "01010000000000000038dd5e400000000038dd5e40", "POINT(123.45654296875 123.45654296875)"], [2, "01010000000000000000dd5e400000000000dd5e40", "POINT(123.453125 123.453125)"], [1, "01010000000000000000dc5e400000000000dc5e40", "POINT(123.4375 123.4375)"], [0, "01010000000000000000c05e400000000000c05e40", "POINT(123 123)"], [-1, "01010000000000000000005e400000000000005e40", "POINT(120 120)"], [-2, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-3, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-4, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-5, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-6, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-7, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-8, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-9, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-10, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-11, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-12, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-13, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-14, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-15, "010100000000000000000058400000000000005840", "POINT(96 96)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output three results from table test for the geometric object POINT (123.456789123456 123.456789123456) as the coordinate precision digits decrease from 15 to -15 in steps of 1: the current precision digits, the HEX-encoded value after coordinate quantization, and the quantized WKT string representation.", "source": "original", "new_id": 1028}
{"id": 182, "function": "ST_QuantizeCoordinates", "question": "返回点对象POINT (123.456789123456 123.456789123456)在15到-15精度参数下的坐标量化结果，包含每个精度级别对应的十六进制编码字符串和WKT文本。", "sql": "WITH test AS (SELECT 'POINT (123.456789123456 123.456789123456)'::geometry AS geom)\nSELECT\n  digits,\n  encode(ST_QuantizeCoordinates(geom, digits), 'hex'),\n  ST_AsText(ST_QuantizeCoordinates(geom, digits))\nFROM test, generate_series(15, -15, -1) AS digits;", "execution_result": [[15, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [14, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [13, "01010000005e9a72083cdd5e405e9a72083cdd5e40", "POINT(123.45678912345599 123.45678912345599)"], [12, "0101000000409a72083cdd5e40409a72083cdd5e40", "POINT(123.45678912345556 123.45678912345556)"], [11, "0101000000009a72083cdd5e40009a72083cdd5e40", "POINT(123.45678912345466 123.45678912345466)"], [10, "0101000000009872083cdd5e40009872083cdd5e40", "POINT(123.45678912344738 123.45678912344738)"], [9, "0101000000008072083cdd5e40008072083cdd5e40", "POINT(123.45678912336007 123.45678912336007)"], [8, "0101000000000070083cdd5e40000070083cdd5e40", "POINT(123.45678912103176 123.45678912103176)"], [7, "0101000000000060083cdd5e40000060083cdd5e40", "POINT(123.4567891061306 123.4567891061306)"], [6, "0101000000000000083cdd5e40000000083cdd5e40", "POINT(123.45678901672363 123.45678901672363)"], [5, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [4, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [3, "01010000000000000038dd5e400000000038dd5e40", "POINT(123.45654296875 123.45654296875)"], [2, "01010000000000000000dd5e400000000000dd5e40", "POINT(123.453125 123.453125)"], [1, "01010000000000000000dc5e400000000000dc5e40", "POINT(123.4375 123.4375)"], [0, "01010000000000000000c05e400000000000c05e40", "POINT(123 123)"], [-1, "01010000000000000000005e400000000000005e40", "POINT(120 120)"], [-2, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-3, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-4, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-5, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-6, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-7, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-8, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-9, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-10, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-11, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-12, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-13, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-14, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-15, "010100000000000000000058400000000000005840", "POINT(96 96)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output three results from table test for the geometric object POINT (123.456789123456 123.456789123456) as the coordinate precision digits decrease from 15 to -15 in steps of 1: the current precision digits, the HEX-encoded value after coordinate quantization, and the quantized WKT string representation.", "source": "original", "new_id": 1029}
{"id": 182, "function": "ST_QuantizeCoordinates", "question": "输出31行结果，每行包含15到-15精度参数、对应精度参数下坐标量化后的点对象POINT (123.456789123456 123.456789123456)的十六进制编码和标准WKT格式文本。", "sql": "WITH test AS (SELECT 'POINT (123.456789123456 123.456789123456)'::geometry AS geom)\nSELECT\n  digits,\n  encode(ST_QuantizeCoordinates(geom, digits), 'hex'),\n  ST_AsText(ST_QuantizeCoordinates(geom, digits))\nFROM test, generate_series(15, -15, -1) AS digits;", "execution_result": [[15, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [14, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [13, "01010000005e9a72083cdd5e405e9a72083cdd5e40", "POINT(123.45678912345599 123.45678912345599)"], [12, "0101000000409a72083cdd5e40409a72083cdd5e40", "POINT(123.45678912345556 123.45678912345556)"], [11, "0101000000009a72083cdd5e40009a72083cdd5e40", "POINT(123.45678912345466 123.45678912345466)"], [10, "0101000000009872083cdd5e40009872083cdd5e40", "POINT(123.45678912344738 123.45678912344738)"], [9, "0101000000008072083cdd5e40008072083cdd5e40", "POINT(123.45678912336007 123.45678912336007)"], [8, "0101000000000070083cdd5e40000070083cdd5e40", "POINT(123.45678912103176 123.45678912103176)"], [7, "0101000000000060083cdd5e40000060083cdd5e40", "POINT(123.4567891061306 123.4567891061306)"], [6, "0101000000000000083cdd5e40000000083cdd5e40", "POINT(123.45678901672363 123.45678901672363)"], [5, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [4, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [3, "01010000000000000038dd5e400000000038dd5e40", "POINT(123.45654296875 123.45654296875)"], [2, "01010000000000000000dd5e400000000000dd5e40", "POINT(123.453125 123.453125)"], [1, "01010000000000000000dc5e400000000000dc5e40", "POINT(123.4375 123.4375)"], [0, "01010000000000000000c05e400000000000c05e40", "POINT(123 123)"], [-1, "01010000000000000000005e400000000000005e40", "POINT(120 120)"], [-2, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-3, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-4, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-5, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-6, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-7, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-8, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-9, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-10, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-11, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-12, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-13, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-14, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-15, "010100000000000000000058400000000000005840", "POINT(96 96)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output three results from table test for the geometric object POINT (123.456789123456 123.456789123456) as the coordinate precision digits decrease from 15 to -15 in steps of 1: the current precision digits, the HEX-encoded value after coordinate quantization, and the quantized WKT string representation.", "source": "original", "new_id": 1030}
{"id": 182, "function": "ST_QuantizeCoordinates", "question": "输出表test中几何对象POINT (123.456789123456 123.456789123456)在坐标精度位数digits从15到-15以1为步长递减时的三个结果：当前精度位数、坐标量化后的HEX编码值、以及量化后的WKT字符串表示。", "sql": "WITH test AS (SELECT 'POINT (123.456789123456 123.456789123456)'::geometry AS geom)\nSELECT\n  digits,\n  encode(ST_QuantizeCoordinates(geom, digits), 'hex'),\n  ST_AsText(ST_QuantizeCoordinates(geom, digits))\nFROM test, generate_series(15, -15, -1) AS digits;", "execution_result": [[15, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [14, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [13, "01010000005e9a72083cdd5e405e9a72083cdd5e40", "POINT(123.45678912345599 123.45678912345599)"], [12, "0101000000409a72083cdd5e40409a72083cdd5e40", "POINT(123.45678912345556 123.45678912345556)"], [11, "0101000000009a72083cdd5e40009a72083cdd5e40", "POINT(123.45678912345466 123.45678912345466)"], [10, "0101000000009872083cdd5e40009872083cdd5e40", "POINT(123.45678912344738 123.45678912344738)"], [9, "0101000000008072083cdd5e40008072083cdd5e40", "POINT(123.45678912336007 123.45678912336007)"], [8, "0101000000000070083cdd5e40000070083cdd5e40", "POINT(123.45678912103176 123.45678912103176)"], [7, "0101000000000060083cdd5e40000060083cdd5e40", "POINT(123.4567891061306 123.4567891061306)"], [6, "0101000000000000083cdd5e40000000083cdd5e40", "POINT(123.45678901672363 123.45678901672363)"], [5, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [4, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [3, "01010000000000000038dd5e400000000038dd5e40", "POINT(123.45654296875 123.45654296875)"], [2, "01010000000000000000dd5e400000000000dd5e40", "POINT(123.453125 123.453125)"], [1, "01010000000000000000dc5e400000000000dc5e40", "POINT(123.4375 123.4375)"], [0, "01010000000000000000c05e400000000000c05e40", "POINT(123 123)"], [-1, "01010000000000000000005e400000000000005e40", "POINT(120 120)"], [-2, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-3, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-4, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-5, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-6, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-7, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-8, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-9, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-10, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-11, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-12, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-13, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-14, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-15, "010100000000000000000058400000000000005840", "POINT(96 96)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output three results from table test for the geometric object POINT (123.456789123456 123.456789123456) as the coordinate precision digits decrease from 15 to -15 in steps of 1: the current precision digits, the HEX-encoded value after coordinate quantization, and the quantized WKT string representation.", "source": "original", "new_id": 1031}
{"id": 183, "function": "ST_RemoveRepeatedPoints", "question": "移除LINESTRING(0 0, 0 0, 1 1, 0 0, 1 1, 2 2)中重复的连续坐标点，输出WKT格式结果。", "sql": "SELECT ST_AsText(ST_RemoveRepeatedPoints('LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2)'));", "execution_result": [["LINESTRING(0 0,1 1,0 0,1 1,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2) after removing duplicate vertices.", "source": "original", "new_id": 1032}
{"id": 183, "function": "ST_RemoveRepeatedPoints", "question": "对包含六个坐标点(其中0 0和1 1重复)的线串LINESTRING(0 0, 0 0, 1 1, 0 0, 1 1, 2 2)去除重复连续点，返回文本表示。", "sql": "SELECT ST_AsText(ST_RemoveRepeatedPoints('LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2)'));", "execution_result": [["LINESTRING(0 0,1 1,0 0,1 1,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2) after removing duplicate vertices.", "source": "original", "new_id": 1033}
{"id": 183, "function": "ST_RemoveRepeatedPoints", "question": "对LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2)这条折线执行ST_RemoveRepeatedPoints函数去除重复顶点后，用ST_AsText函数以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_RemoveRepeatedPoints('LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2)'));", "execution_result": [["LINESTRING(0 0,1 1,0 0,1 1,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2) after removing duplicate vertices.", "source": "original", "new_id": 1034}
{"id": 183, "function": "ST_RemoveRepeatedPoints", "question": "输出经过重复连续点移除处理后的线串LINESTRING(0 0, 0 0, 1 1, 0 0, 1 1, 2 2)的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_RemoveRepeatedPoints('LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2)'));", "execution_result": [["LINESTRING(0 0,1 1,0 0,1 1,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2) after removing duplicate vertices.", "source": "original", "new_id": 1035}
{"id": 183, "function": "ST_RemoveRepeatedPoints", "question": "以文本格式返回去重后的线型几何对象LINESTRING(0 0, 0 0, 1 1, 0 0, 1 1, 2 2)，保留唯一坐标点序列。", "sql": "SELECT ST_AsText(ST_RemoveRepeatedPoints('LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2)'));", "execution_result": [["LINESTRING(0 0,1 1,0 0,1 1,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2) after removing duplicate vertices.", "source": "original", "new_id": 1036}
{"id": 183, "function": "ST_RemoveRepeatedPoints", "question": "输出LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2)经过移除重复顶点操作后得到的WKT字符串。", "sql": "SELECT ST_AsText(ST_RemoveRepeatedPoints('LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2)'));", "execution_result": [["LINESTRING(0 0,1 1,0 0,1 1,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2) after removing duplicate vertices.", "source": "original", "new_id": 1037}
{"id": 184, "function": "ST_RemoveRepeatedPoints", "question": "从LINESTRING(0 0,0 0,1 1,5 5,1 1,2 2)中移除2单位距离内的重复点，输出WKT格式结果。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2)', 2));", "execution_result": [["LINESTRING(0 0,5 5,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2) after removing duplicate points, with a tolerance distance threshold of 2 units for duplicate point detection.", "source": "original", "new_id": 1038}
{"id": 184, "function": "ST_RemoveRepeatedPoints", "question": "对包含坐标(0,0)(0,0)(1,1)(5,5)(1,1)(2,2)的线要素执行2单位距离的重复点删除，返回文本格式。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2)', 2));", "execution_result": [["LINESTRING(0 0,5 5,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2) after removing duplicate points, with a tolerance distance threshold of 2 units for duplicate point detection.", "source": "original", "new_id": 1039}
{"id": 184, "function": "ST_RemoveRepeatedPoints", "question": "对LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2)这条折线执行ST_RemoveRepeatedPoints函数操作，设置距离容差为2个单位，去除重复点后，将结果以WKT格式输出。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2)', 2));", "execution_result": [["LINESTRING(0 0,5 5,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2) after removing duplicate points, with a tolerance distance threshold of 2 units for duplicate point detection.", "source": "original", "new_id": 1040}
{"id": 184, "function": "ST_RemoveRepeatedPoints", "question": "输出经过重复点移除处理后的线要素LINESTRING(0 0,0 0,1 1,5 5,1 1,2 2)的WKT字符串，容差距离为2单位。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2)', 2));", "execution_result": [["LINESTRING(0 0,5 5,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2) after removing duplicate points, with a tolerance distance threshold of 2 units for duplicate point detection.", "source": "original", "new_id": 1041}
{"id": 184, "function": "ST_RemoveRepeatedPoints", "question": "以Well-Known Text格式返回简化后的线要素LINESTRING(0 0,0 0,1 1,5 5,1 1,2 2)，其中距离小于2的相邻重复点已被移除。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2)', 2));", "execution_result": [["LINESTRING(0 0,5 5,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2) after removing duplicate points, with a tolerance distance threshold of 2 units for duplicate point detection.", "source": "original", "new_id": 1042}
{"id": 184, "function": "ST_RemoveRepeatedPoints", "question": "输出LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2)经过移除重复点操作后的WKT字符串，其中重复点判断的容差距离阈值为2个单位长度。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2)', 2));", "execution_result": [["LINESTRING(0 0,5 5,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2) after removing duplicate points, with a tolerance distance threshold of 2 units for duplicate point detection.", "source": "original", "new_id": 1043}
{"id": 185, "function": "ST_RemoveRepeatedPoints", "question": "从GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))中移除集合中每一个对象的重复点后输出WKT文本。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))'));", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(1 1,2 2,3 3),POINT(4 4),POINT(4 4),POINT(5 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the geometry collection after removing duplicate points, which includes: a linestring from point (1 1) to (2 2) to (3 3) (with (2 2) repeated), two duplicate points (4 4), and a single point (5 5).", "source": "original", "new_id": 1044}
{"id": 185, "function": "ST_RemoveRepeatedPoints", "question": "删除GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))中每一个对象的重复的坐标点和集合中重复的点对象，输出处理后的WKT。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))'));", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(1 1,2 2,3 3),POINT(4 4),POINT(4 4),POINT(5 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the geometry collection after removing duplicate points, which includes: a linestring from point (1 1) to (2 2) to (3 3) (with (2 2) repeated), two duplicate points (4 4), and a single point (5 5).", "source": "original", "new_id": 1045}
{"id": 185, "function": "ST_RemoveRepeatedPoints", "question": "对几何集合对象'GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))'执行ST_RemoveRepeatedPoints函数去除重复点，最后用ST_AsText函数将结果转为WKT文本格式输出。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))'));", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(1 1,2 2,3 3),POINT(4 4),POINT(4 4),POINT(5 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the geometry collection after removing duplicate points, which includes: a linestring from point (1 1) to (2 2) to (3 3) (with (2 2) repeated), two duplicate points (4 4), and a single point (5 5).", "source": "original", "new_id": 1046}
{"id": 185, "function": "ST_RemoveRepeatedPoints", "question": "以WKT文本格式返回每一个对象去除重复点处理后的几何集合对象GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))'));", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(1 1,2 2,3 3),POINT(4 4),POINT(4 4),POINT(5 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the geometry collection after removing duplicate points, which includes: a linestring from point (1 1) to (2 2) to (3 3) (with (2 2) repeated), two duplicate points (4 4), and a single point (5 5).", "source": "original", "new_id": 1047}
{"id": 185, "function": "ST_RemoveRepeatedPoints", "question": "输出移除重复点后的几何集合的WKT字符串，原始几何集合包含：LINESTRING (1 1, 2 2, 2 2, 3 3)、POINT (4 4)和POINT (5 5)，其中LINESTRING在坐标(2 2)处有重复点，POINT (4 4)有重复出现。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))'));", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(1 1,2 2,3 3),POINT(4 4),POINT(4 4),POINT(5 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the geometry collection after removing duplicate points, which includes: a linestring from point (1 1) to (2 2) to (3 3) (with (2 2) repeated), two duplicate points (4 4), and a single point (5 5).", "source": "original", "new_id": 1048}
{"id": 185, "function": "ST_RemoveRepeatedPoints", "question": "输出移除重复点后的几何集合的WKT字符串，该几何集合包含：一条由点(1 1)到(2 2)再到(3 3)的折线（其中(2 2)重复出现），两个重复的点(4 4)，以及一个单独的点(5 5)。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))'));", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(1 1,2 2,3 3),POINT(4 4),POINT(4 4),POINT(5 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the geometry collection after removing duplicate points, which includes: a linestring from point (1 1) to (2 2) to (3 3) (with (2 2) repeated), two duplicate points (4 4), and a single point (5 5).", "source": "original", "new_id": 1049}
{"id": 186, "function": "ST_RemoveRepeatedPoints", "question": "从MULTIPOINT ((1 1), (2 2), (3 3), (2 2))中移除重复的点，输出WKT格式结果。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'MULTIPOINT ((1 1), (2 2), (3 3), (2 2))'));", "execution_result": [["MULTIPOINT((1 1),(2 2),(3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a MULTIPOINT geometry object after removing duplicate points, where the original geometry contains four 2D point coordinates: (1 1), (2 2), (3 3), and the duplicate (2 2).", "source": "original", "new_id": 1050}
{"id": 186, "function": "ST_RemoveRepeatedPoints", "question": "对包含(1 1)、(2 2)、(3 3)和(2 2)的多点集合执行去重操作，返回文本表示。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'MULTIPOINT ((1 1), (2 2), (3 3), (2 2))'));", "execution_result": [["MULTIPOINT((1 1),(2 2),(3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a MULTIPOINT geometry object after removing duplicate points, where the original geometry contains four 2D point coordinates: (1 1), (2 2), (3 3), and the duplicate (2 2).", "source": "original", "new_id": 1051}
{"id": 186, "function": "ST_RemoveRepeatedPoints", "question": "对MULTIPOINT类型几何对象((1 1), (2 2), (3 3), (2 2))执行ST_RemoveRepeatedPoints函数去除重复坐标点后，使用ST_AsText函数以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'MULTIPOINT ((1 1), (2 2), (3 3), (2 2))'));", "execution_result": [["MULTIPOINT((1 1),(2 2),(3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a MULTIPOINT geometry object after removing duplicate points, where the original geometry contains four 2D point coordinates: (1 1), (2 2), (3 3), and the duplicate (2 2).", "source": "original", "new_id": 1052}
{"id": 186, "function": "ST_RemoveRepeatedPoints", "question": "输出经过去重处理后的多点集合MULTIPOINT ((1 1), (2 2), (3 3), (2 2))的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'MULTIPOINT ((1 1), (2 2), (3 3), (2 2))'));", "execution_result": [["MULTIPOINT((1 1),(2 2),(3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a MULTIPOINT geometry object after removing duplicate points, where the original geometry contains four 2D point coordinates: (1 1), (2 2), (3 3), and the duplicate (2 2).", "source": "original", "new_id": 1053}
{"id": 186, "function": "ST_RemoveRepeatedPoints", "question": "以Well-Known Text格式返回移除重复点后的几何对象MULTIPOINT ((1 1), (2 2), (3 3), (2 2))。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'MULTIPOINT ((1 1), (2 2), (3 3), (2 2))'));", "execution_result": [["MULTIPOINT((1 1),(2 2),(3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a MULTIPOINT geometry object after removing duplicate points, where the original geometry contains four 2D point coordinates: (1 1), (2 2), (3 3), and the duplicate (2 2).", "source": "original", "new_id": 1054}
{"id": 186, "function": "ST_RemoveRepeatedPoints", "question": "输出移除重复点后的MULTIPOINT类型几何对象的WKT字符串，原始几何对象包含四个二维点坐标：(1 1)、(2 2)、(3 3)和重复的(2 2)。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'MULTIPOINT ((1 1), (2 2), (3 3), (2 2))'));", "execution_result": [["MULTIPOINT((1 1),(2 2),(3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a MULTIPOINT geometry object after removing duplicate points, where the original geometry contains four 2D point coordinates: (1 1), (2 2), (3 3), and the duplicate (2 2).", "source": "original", "new_id": 1055}
{"id": 187, "function": "ST_RemoveIrrelevantPointsForView", "question": "对多边形POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))在视图范围Envelope(12,12,18,18)内移除无关顶点，输出WKT结果。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18)));", "execution_result": [["POLYGON((0 30,30 30,30 0,0 0,0 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) after being processed by ST_RemoveIrrelevantPointsForView within the view extent ENVELOPE(12 12,18 18).", "source": "original", "new_id": 1056}
{"id": 187, "function": "ST_RemoveIrrelevantPointsForView", "question": "将多边形坐标(0 30,15 30,30 30,30 0,0 0,0 30)在12-18的XY范围内简化（移除与矩形视图中渲染几何图形无关的点）后，转换为文本格式。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18)));", "execution_result": [["POLYGON((0 30,30 30,30 0,0 0,0 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) after being processed by ST_RemoveIrrelevantPointsForView within the view extent ENVELOPE(12 12,18 18).", "source": "original", "new_id": 1057}
{"id": 187, "function": "ST_RemoveIrrelevantPointsForView", "question": "对POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))这个多边形，在视图范围为ST_MakeEnvelope(12,12,18,18)的矩形框内，使用ST_RemoveIrrelevantPointsForView函数移除不可见顶点后，以WKT格式输出结果几何体。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18)));", "execution_result": [["POLYGON((0 30,30 30,30 0,0 0,0 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) after being processed by ST_RemoveIrrelevantPointsForView within the view extent ENVELOPE(12 12,18 18).", "source": "original", "new_id": 1058}
{"id": 187, "function": "ST_RemoveIrrelevantPointsForView", "question": "输出多边形POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)在（12,12）到（18,18）范围视窗简化后的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18)));", "execution_result": [["POLYGON((0 30,30 30,30 0,0 0,0 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) after being processed by ST_RemoveIrrelevantPointsForView within the view extent ENVELOPE(12 12,18 18).", "source": "original", "new_id": 1059}
{"id": 187, "function": "ST_RemoveIrrelevantPointsForView", "question": "输出WKT字符串，表示在最小x坐标12、最小y坐标12、最大x坐标18、最大y坐标18的视图范围内，保留多边形POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))中的可见点后得到的几何。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18)));", "execution_result": [["POLYGON((0 30,30 30,30 0,0 0,0 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) after being processed by ST_RemoveIrrelevantPointsForView within the view extent ENVELOPE(12 12,18 18).", "source": "original", "new_id": 1060}
{"id": 187, "function": "ST_RemoveIrrelevantPointsForView", "question": "输出POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))在视图范围ENVELOPE(12 12,18 18)内经过ST_RemoveIrrelevantPointsForView处理后得到的WKT字符串。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18)));", "execution_result": [["POLYGON((0 30,30 30,30 0,0 0,0 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) after being processed by ST_RemoveIrrelevantPointsForView within the view extent ENVELOPE(12 12,18 18).", "source": "original", "new_id": 1061}
{"id": 188, "function": "ST_RemoveIrrelevantPointsForView", "question": "将MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))在范围框(12 12,18 18)内过滤无关点，采用严格模式，仅保留与该视窗直接相关的关键点，并以 WKT 格式输出。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTILINESTRING((10 15,15 15,20 15),(13 13,15 15,17 17))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string after processing with the ST_RemoveIrrelevantPointsForView function, which takes MULTILINESTRING((0 0,10 0,20 0,30 0),(0 15,5 15,10 15,15 15,20 15,25 15,30 15,40 15),(13 13,15 15,17 17)) as the input geometry, ST_MakeEnvelope(12,12,18,18) as the view extent, and true to retain endpoints.", "source": "original", "new_id": 1062}
{"id": 188, "function": "ST_RemoveIrrelevantPointsForView", "question": "对包含MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))这一多线对象，在矩形范围(12 12,18 18)的XY范围内执行顶点过滤，采用严格过滤，仅输出视窗可见线段端点，返回文本表示。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTILINESTRING((10 15,15 15,20 15),(13 13,15 15,17 17))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string after processing with the ST_RemoveIrrelevantPointsForView function, which takes MULTILINESTRING((0 0,10 0,20 0,30 0),(0 15,5 15,10 15,15 15,20 15,25 15,30 15,40 15),(13 13,15 15,17 17)) as the input geometry, ST_MakeEnvelope(12,12,18,18) as the view extent, and true to retain endpoints.", "source": "original", "new_id": 1063}
{"id": 188, "function": "ST_RemoveIrrelevantPointsForView", "question": "对由三条折线组成的MULTILINESTRING几何体（第一条折线坐标串为(0 0, 10 0,20 0,30 0)，第二条为(0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15)，第三条为(13 13,15 15,17 17)），使用ST_RemoveIrrelevantPointsForView函数进行处理，该函数的视窗参数为ST_MakeEnvelope(12,12,18,18)创建的矩形范围，第三个参数true表示保留端点，最终以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTILINESTRING((10 15,15 15,20 15),(13 13,15 15,17 17))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string after processing with the ST_RemoveIrrelevantPointsForView function, which takes MULTILINESTRING((0 0,10 0,20 0,30 0),(0 15,5 15,10 15,15 15,20 15,25 15,30 15,40 15),(13 13,15 15,17 17)) as the input geometry, ST_MakeEnvelope(12,12,18,18) as the view extent, and true to retain endpoints.", "source": "original", "new_id": 1064}
{"id": 188, "function": "ST_RemoveIrrelevantPointsForView", "question": "输出多线对象MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))在(12,12)-(18,18)范围内简化后的WKT字符串结果，执行严格的视图相关点过滤，只保留对当前视窗显示有影响的点。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTILINESTRING((10 15,15 15,20 15),(13 13,15 15,17 17))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string after processing with the ST_RemoveIrrelevantPointsForView function, which takes MULTILINESTRING((0 0,10 0,20 0,30 0),(0 15,5 15,10 15,15 15,20 15,25 15,30 15,40 15),(13 13,15 15,17 17)) as the input geometry, ST_MakeEnvelope(12,12,18,18) as the view extent, and true to retain endpoints.", "source": "original", "new_id": 1065}
{"id": 188, "function": "ST_RemoveIrrelevantPointsForView", "question": "输出将 MULTILINESTRING 几何对象（包含三条线段：第一条线段点坐标 (0 0), (10 0), (20 0), (30 0)；第二条线段点坐标 (0 15), (5 15), (10 15), (15 15), (20 15), (25 15), (30 15), (40 15)；第三条线段点坐标 (13 13), (15 15), (17 17)) 在视口包络矩形 minx=12, miny=12, maxx=18, maxy=18 内移除视口外不相关点（设置布尔参数 true 表示保留拓扑结构）后得到的 WKT 字符串。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTILINESTRING((10 15,15 15,20 15),(13 13,15 15,17 17))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string after processing with the ST_RemoveIrrelevantPointsForView function, which takes MULTILINESTRING((0 0,10 0,20 0,30 0),(0 15,5 15,10 15,15 15,20 15,25 15,30 15,40 15),(13 13,15 15,17 17)) as the input geometry, ST_MakeEnvelope(12,12,18,18) as the view extent, and true to retain endpoints.", "source": "original", "new_id": 1066}
{"id": 188, "function": "ST_RemoveIrrelevantPointsForView", "question": "输出经过ST_RemoveIrrelevantPointsForView函数处理后的WKT字符串，该函数以MULTILINESTRING((0 0,10 0,20 0,30 0),(0 15,5 15,10 15,15 15,20 15,25 15,30 15,40 15),(13 13,15 15,17 17))为输入几何体，ST_MakeEnvelope(12,12,18,18)为视图范围，true表示保留端点。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTILINESTRING((10 15,15 15,20 15),(13 13,15 15,17 17))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string after processing with the ST_RemoveIrrelevantPointsForView function, which takes MULTILINESTRING((0 0,10 0,20 0,30 0),(0 15,5 15,10 15,15 15,20 15,25 15,30 15,40 15),(13 13,15 15,17 17)) as the input geometry, ST_MakeEnvelope(12,12,18,18) as the view extent, and true to retain endpoints.", "source": "original", "new_id": 1067}
{"id": 189, "function": "ST_RemoveIrrelevantPointsForView", "question": "对LINESTRING(0 0, 10 0,20 0,30 0)在视图范围(12,12,18,18)内执行点过滤，严格只保留视窗相关的点，删除所有无关点(true)，输出WKT结果。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('LINESTRING(0 0, 10 0,20 0,30 0)'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING(0 0, 10 0, 20 0, 30 0) after processing by the ST_RemoveIrrelevantPointsForView function, where the view extent is a rectangle created by ST_MakeEnvelope(12, 12, 18, 18), and the third parameter true indicates retaining endpoints.", "source": "original", "new_id": 1068}
{"id": 189, "function": "ST_RemoveIrrelevantPointsForView", "question": "将LINESTRING(0 0,10 0,20 0,30 0)在矩形框(12,12)-(18,18)视窗范围内进行关键点筛选，仅保留与当前视窗直接相关的线段端点，返回文本格式。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('LINESTRING(0 0, 10 0,20 0,30 0)'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING(0 0, 10 0, 20 0, 30 0) after processing by the ST_RemoveIrrelevantPointsForView function, where the view extent is a rectangle created by ST_MakeEnvelope(12, 12, 18, 18), and the third parameter true indicates retaining endpoints.", "source": "original", "new_id": 1069}
{"id": 189, "function": "ST_RemoveIrrelevantPointsForView", "question": "对LINESTRING(0 0, 10 0,20 0,30 0)这条折线，使用ST_RemoveIrrelevantPointsForView函数进行处理，其中视图范围是通过ST_MakeEnvelope(12,12,18,18)创建的矩形框，第三个参数true表示保留端点，最后将结果以WKT格式输出。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('LINESTRING(0 0, 10 0,20 0,30 0)'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING(0 0, 10 0, 20 0, 30 0) after processing by the ST_RemoveIrrelevantPointsForView function, where the view extent is a rectangle created by ST_MakeEnvelope(12, 12, 18, 18), and the third parameter true indicates retaining endpoints.", "source": "original", "new_id": 1070}
{"id": 189, "function": "ST_RemoveIrrelevantPointsForView", "question": "输出经过视图优化（视图范围(12,12,18,18)）的LINESTRING(0 0,10 0,20 0,30 0)的WKT字符串结果。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('LINESTRING(0 0, 10 0,20 0,30 0)'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING(0 0, 10 0, 20 0, 30 0) after processing by the ST_RemoveIrrelevantPointsForView function, where the view extent is a rectangle created by ST_MakeEnvelope(12, 12, 18, 18), and the third parameter true indicates retaining endpoints.", "source": "original", "new_id": 1071}
{"id": 189, "function": "ST_RemoveIrrelevantPointsForView", "question": "返回线对象LINESTRING(0 0,10 0,20 0,30 0)在指定视图范围(12,12,18,18)内简化后的文本表示，严格只保留视窗相关的点，删除所有无关点。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('LINESTRING(0 0, 10 0,20 0,30 0)'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING(0 0, 10 0, 20 0, 30 0) after processing by the ST_RemoveIrrelevantPointsForView function, where the view extent is a rectangle created by ST_MakeEnvelope(12, 12, 18, 18), and the third parameter true indicates retaining endpoints.", "source": "original", "new_id": 1072}
{"id": 189, "function": "ST_RemoveIrrelevantPointsForView", "question": "输出LINESTRING(0 0, 10 0,20 0,30 0)经过ST_RemoveIrrelevantPointsForView函数处理后得到的WKT字符串，其中视图范围是ST_MakeEnvelope(12,12,18,18)创建的矩形框，且第三个参数true表示保留端点。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('LINESTRING(0 0, 10 0,20 0,30 0)'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING(0 0, 10 0, 20 0, 30 0) after processing by the ST_RemoveIrrelevantPointsForView function, where the view extent is a rectangle created by ST_MakeEnvelope(12, 12, 18, 18), and the third parameter true indicates retaining endpoints.", "source": "original", "new_id": 1073}
{"id": 190, "function": "ST_RemoveIrrelevantPointsForView", "question": "对多边形 POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) 在视窗范围 (12,12)-(18,18) 内，采用严格模式仅保留视窗相关的顶点，并以 WKT 格式输出。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["POLYGON((15 30,30 0,0 0,15 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string result of the POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) after processing with the ST_RemoveIrrelevantPointsForView function within the view extent ENVELOPE(12 12,18 18), where the third parameter true indicates retaining the polygon's closing points.", "source": "original", "new_id": 1074}
{"id": 190, "function": "ST_RemoveIrrelevantPointsForView", "question": "根据视窗 (12,12)-(18,18) 对多边形 POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) 严格移除无关点，仅输出视窗内的相关几何结构，返回文本格式。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["POLYGON((15 30,30 0,0 0,15 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string result of the POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) after processing with the ST_RemoveIrrelevantPointsForView function within the view extent ENVELOPE(12 12,18 18), where the third parameter true indicates retaining the polygon's closing points.", "source": "original", "new_id": 1075}
{"id": 190, "function": "ST_RemoveIrrelevantPointsForView", "question": "对POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))这个多边形，在视图范围ST_MakeEnvelope(12,12,18,18)内，使用ST_RemoveIrrelevantPointsForView函数移除不可见顶点（第三个参数true表示保留封闭性），并将结果以WKT格式输出。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["POLYGON((15 30,30 0,0 0,15 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string result of the POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) after processing with the ST_RemoveIrrelevantPointsForView function within the view extent ENVELOPE(12 12,18 18), where the third parameter true indicates retaining the polygon's closing points.", "source": "original", "new_id": 1076}
{"id": 190, "function": "ST_RemoveIrrelevantPointsForView", "question": "输出多边形对象POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))经过视窗范围 (12,12)-(18,18)相关简化后仅保留关键点的 WKT 字符串。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["POLYGON((15 30,30 0,0 0,15 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string result of the POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) after processing with the ST_RemoveIrrelevantPointsForView function within the view extent ENVELOPE(12 12,18 18), where the third parameter true indicates retaining the polygon's closing points.", "source": "original", "new_id": 1077}
{"id": 190, "function": "ST_RemoveIrrelevantPointsForView", "question": "以 WKT 格式返回多边形对象POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))在 (12,12)-(18,18) 视窗范围内严格筛选的几何结构。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["POLYGON((15 30,30 0,0 0,15 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string result of the POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) after processing with the ST_RemoveIrrelevantPointsForView function within the view extent ENVELOPE(12 12,18 18), where the third parameter true indicates retaining the polygon's closing points.", "source": "original", "new_id": 1078}
{"id": 190, "function": "ST_RemoveIrrelevantPointsForView", "question": "输出POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))在视图范围ENVELOPE(12 12,18 18)内经过ST_RemoveIrrelevantPointsForView函数处理后保留可见点的WKT字符串结果，其中第三个参数true表示保留多边形闭合点。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["POLYGON((15 30,30 0,0 0,15 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string result of the POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) after processing with the ST_RemoveIrrelevantPointsForView function within the view extent ENVELOPE(12 12,18 18), where the third parameter true indicates retaining the polygon's closing points.", "source": "original", "new_id": 1079}
{"id": 191, "function": "ST_RemoveIrrelevantPointsForView", "question": "对MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))在视窗范围(12,12,18,18)内执行点简化，保留拓扑结构并输出WKT。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTIPOLYGON(((10 10,40 10,20 20,10 20,10 10)),((10 10,20 10,20 20,10 20,10 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string processed by the ST_RemoveIrrelevantPointsForView function, with input parameters: a MULTIPOLYGON geometry object (containing two polygons, the first with vertices (10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10) and the second with vertices (10 10, 20 10, 20 20, 10 20, 10 10)), a view extent created by ST_MakeEnvelope(12,12,18,18), and the third parameter true indicating to retain closed rings.", "source": "original", "new_id": 1080}
{"id": 191, "function": "ST_RemoveIrrelevantPointsForView", "question": "将坐标为((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10))和((10 10, 20 10, 20 20, 10 20, 10 10))的多重多边形在边界框(12,12)-(18,18)内简化，采用严格模式仅保留视窗相关顶点，然后转为文本。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTIPOLYGON(((10 10,40 10,20 20,10 20,10 10)),((10 10,20 10,20 20,10 20,10 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string processed by the ST_RemoveIrrelevantPointsForView function, with input parameters: a MULTIPOLYGON geometry object (containing two polygons, the first with vertices (10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10) and the second with vertices (10 10, 20 10, 20 20, 10 20, 10 10)), a view extent created by ST_MakeEnvelope(12,12,18,18), and the third parameter true indicating to retain closed rings.", "source": "original", "new_id": 1081}
{"id": 191, "function": "ST_RemoveIrrelevantPointsForView", "question": "对由两个多边形组成的MULTIPOLYGON对象（第一个多边形顶点为(10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)，第二个多边形顶点为(10 10, 20 10, 20 20, 10 20, 10 10)），使用ST_RemoveIrrelevantPointsForView函数进行处理，该函数的参数包括：视图范围是ST_MakeEnvelope(12,12,18,18)创建的矩形框，以及布尔值true表示保留封闭环。最后将结果转换为WKT格式输出。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTIPOLYGON(((10 10,40 10,20 20,10 20,10 10)),((10 10,20 10,20 20,10 20,10 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string processed by the ST_RemoveIrrelevantPointsForView function, with input parameters: a MULTIPOLYGON geometry object (containing two polygons, the first with vertices (10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10) and the second with vertices (10 10, 20 10, 20 20, 10 20, 10 10)), a view extent created by ST_MakeEnvelope(12,12,18,18), and the third parameter true indicating to retain closed rings.", "source": "original", "new_id": 1082}
{"id": 191, "function": "ST_RemoveIrrelevantPointsForView", "question": "输出经过视窗范围(12,12,18,18)优化的多重多边形几何MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTIPOLYGON(((10 10,40 10,20 20,10 20,10 10)),((10 10,20 10,20 20,10 20,10 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string processed by the ST_RemoveIrrelevantPointsForView function, with input parameters: a MULTIPOLYGON geometry object (containing two polygons, the first with vertices (10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10) and the second with vertices (10 10, 20 10, 20 20, 10 20, 10 10)), a view extent created by ST_MakeEnvelope(12,12,18,18), and the third parameter true indicating to retain closed rings.", "source": "original", "new_id": 1083}
{"id": 191, "function": "ST_RemoveIrrelevantPointsForView", "question": "以Well-Known Text格式返回视图范围简化后的几何对象MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))，视窗范围(12,12,18,18)，保留原始坐标精度。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTIPOLYGON(((10 10,40 10,20 20,10 20,10 10)),((10 10,20 10,20 20,10 20,10 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string processed by the ST_RemoveIrrelevantPointsForView function, with input parameters: a MULTIPOLYGON geometry object (containing two polygons, the first with vertices (10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10) and the second with vertices (10 10, 20 10, 20 20, 10 20, 10 10)), a view extent created by ST_MakeEnvelope(12,12,18,18), and the third parameter true indicating to retain closed rings.", "source": "original", "new_id": 1084}
{"id": 191, "function": "ST_RemoveIrrelevantPointsForView", "question": "输出经过ST_RemoveIrrelevantPointsForView函数处理后的WKT字符串，该函数输入参数为：MULTIPOLYGON几何对象（包含两个多边形，第一个多边形顶点为(10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)，第二个多边形顶点为(10 10, 20 10, 20 20, 10 20, 10 10)），视图范围为ST_MakeEnvelope(12,12,18,18)创建的矩形范围，第三个参数true表示保留闭合环。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTIPOLYGON(((10 10,40 10,20 20,10 20,10 10)),((10 10,20 10,20 20,10 20,10 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string processed by the ST_RemoveIrrelevantPointsForView function, with input parameters: a MULTIPOLYGON geometry object (containing two polygons, the first with vertices (10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10) and the second with vertices (10 10, 20 10, 20 20, 10 20, 10 10)), a view extent created by ST_MakeEnvelope(12,12,18,18), and the third parameter true indicating to retain closed rings.", "source": "original", "new_id": 1085}
{"id": 192, "function": "ST_RemoveSmallParts", "question": "对LINESTRING(10 10, 20 20)执行移除过小部分的操作（X和Y方向上的阈值均为50）后输出WKT。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('LINESTRING(10 10, 20 20)'), 50, 50));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the result after removing small parts with area less than 50 and perimeter less than 50 from LINESTRING(10 10, 20 20).", "source": "original", "new_id": 1086}
{"id": 192, "function": "ST_RemoveSmallParts", "question": "移除LINESTRING(10 10, 20 20)中X和Y方向上长度均小于50的部分，返回文本格式。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('LINESTRING(10 10, 20 20)'), 50, 50));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the result after removing small parts with area less than 50 and perimeter less than 50 from LINESTRING(10 10, 20 20).", "source": "original", "new_id": 1087}
{"id": 192, "function": "ST_RemoveSmallParts", "question": "对LINESTRING(10 10, 20 20)这条折线执行ST_RemoveSmallParts操作，其中面积阈值为50平方单位、长度阈值为50单位，并将结果转换为WKT格式输出。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('LINESTRING(10 10, 20 20)'), 50, 50));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the result after removing small parts with area less than 50 and perimeter less than 50 from LINESTRING(10 10, 20 20).", "source": "original", "new_id": 1088}
{"id": 192, "function": "ST_RemoveSmallParts", "question": "输出经过小部分（X和Y方向长度均小于50）移除处理后的LINESTRING(10 10, 20 20)的WKT字符串结果。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('LINESTRING(10 10, 20 20)'), 50, 50));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the result after removing small parts with area less than 50 and perimeter less than 50 from LINESTRING(10 10, 20 20).", "source": "original", "new_id": 1089}
{"id": 192, "function": "ST_RemoveSmallParts", "question": "将经过移除较小部分（X和Y方向长度均小于50的部分）的线几何对象LINESTRING(10 10, 20 20)转换为标准文本格式输出。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('LINESTRING(10 10, 20 20)'), 50, 50));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the result after removing small parts with area less than 50 and perimeter less than 50 from LINESTRING(10 10, 20 20).", "source": "original", "new_id": 1090}
{"id": 192, "function": "ST_RemoveSmallParts", "question": "输出LINESTRING(10 10, 20 20)经过移除面积小于50且周长小于50的小部分后得到的结果的WKT字符串。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('LINESTRING(10 10, 20 20)'), 50, 50));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the result after removing small parts with area less than 50 and perimeter less than 50 from LINESTRING(10 10, 20 20).", "source": "original", "new_id": 1091}
{"id": 193, "function": "ST_RemoveSmallParts", "question": "将MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110))) 中X和Y方向上长度均小于50的部分移除，输出WKT结果。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))'), 50, 50));", "execution_result": [["MULTIPOLYGON(((60 160,120 160,120 220,60 220,60 160)),((85 75,155 75,155 145,85 145,85 75)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the result after removing sub-polygons with area less than 50 and perimeter less than 50 from MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)) ).", "source": "original", "new_id": 1092}
{"id": 193, "function": "ST_RemoveSmallParts", "question": "精确移除坐标为MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))的多面体中X和Y方向上长度均小于50的组成部分，返回文本格式。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))'), 50, 50));", "execution_result": [["MULTIPOLYGON(((60 160,120 160,120 220,60 220,60 160)),((85 75,155 75,155 145,85 145,85 75)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the result after removing sub-polygons with area less than 50 and perimeter less than 50 from MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)) ).", "source": "original", "new_id": 1093}
{"id": 193, "function": "ST_RemoveSmallParts", "question": "对WKT格式的MULTIPOLYGON对象（包含三个多边形：第一个由外环(60 160, 120 160, 120 220, 60 220, 60 160)和内环(70 170, 70 210, 110 210, 110 170, 70 170)组成，第二个由(85 75, 155 75, 155 145, 85 145, 85 75)组成，第三个由(50 110, 70 110, 70 130, 50 130, 50 110)组成）执行ST_RemoveSmallParts操作，其中面积阈值参数为50，顶点数阈值参数为50，并将结果转换为WKT格式输出。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))'), 50, 50));", "execution_result": [["MULTIPOLYGON(((60 160,120 160,120 220,60 220,60 160)),((85 75,155 75,155 145,85 145,85 75)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the result after removing sub-polygons with area less than 50 and perimeter less than 50 from MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)) ).", "source": "original", "new_id": 1094}
{"id": 193, "function": "ST_RemoveSmallParts", "question": "输出经过小部分（X和Y方向上长度均小于50）移除后的多面体几何MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))的WKT文本表示。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))'), 50, 50));", "execution_result": [["MULTIPOLYGON(((60 160,120 160,120 220,60 220,60 160)),((85 75,155 75,155 145,85 145,85 75)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the result after removing sub-polygons with area less than 50 and perimeter less than 50 from MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)) ).", "source": "original", "new_id": 1095}
{"id": 193, "function": "ST_RemoveSmallParts", "question": "以WKT格式返回多边形MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))的处理结果，其中X方向长度<50且Y方向长度<50的多边形组成部分已被移除。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))'), 50, 50));", "execution_result": [["MULTIPOLYGON(((60 160,120 160,120 220,60 220,60 160)),((85 75,155 75,155 145,85 145,85 75)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the result after removing sub-polygons with area less than 50 and perimeter less than 50 from MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)) ).", "source": "original", "new_id": 1096}
{"id": 193, "function": "ST_RemoveSmallParts", "question": "输出移除MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110))) 中面积小于50且周长小于50的子多边形后得到的结果的WKT字符串。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))'), 50, 50));", "execution_result": [["MULTIPOLYGON(((60 160,120 160,120 220,60 220,60 160)),((85 75,155 75,155 145,85 145,85 75)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the result after removing sub-polygons with area less than 50 and perimeter less than 50 from MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)) ).", "source": "original", "new_id": 1097}
{"id": 194, "function": "ST_Reverse", "question": "将点(1,2)和点(1,10)连接成线后，输出该线及其反向线（点顺序相反）的WKT文本。", "sql": "SELECT ST_AsText(geom) AS line, ST_AsText(ST_Reverse(geom)) AS reverseline \nFROM (SELECT ST_MakeLine(ST_Point(1,2), ST_Point(1,10)) AS geom) AS foo;", "execution_result": [["LINESTRING(1 2,1 10)", "LINESTRING(1 10,1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the LINESTRING formed by points POINT(1 2) and POINT(1 10), as well as the WKT string representation of the reversed line segment.", "source": "original", "new_id": 1098}
{"id": 194, "function": "ST_Reverse", "question": "输出由ST_Point(1,2)到ST_Point(1,10)的线段及其反向线段的文本表示。", "sql": "SELECT ST_AsText(geom) AS line, ST_AsText(ST_Reverse(geom)) AS reverseline \nFROM (SELECT ST_MakeLine(ST_Point(1,2), ST_Point(1,10)) AS geom) AS foo;", "execution_result": [["LINESTRING(1 2,1 10)", "LINESTRING(1 10,1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the LINESTRING formed by points POINT(1 2) and POINT(1 10), as well as the WKT string representation of the reversed line segment.", "source": "original", "new_id": 1099}
{"id": 194, "function": "ST_Reverse", "question": "从由ST_Point(1,2)和ST_Point(1,10)两点构成的线段geom中，分别以WKT格式输出原始线段和经过ST_Reverse函数反转后的线段，并将结果列命名为line和reverseline。", "sql": "SELECT ST_AsText(geom) AS line, ST_AsText(ST_Reverse(geom)) AS reverseline \nFROM (SELECT ST_MakeLine(ST_Point(1,2), ST_Point(1,10)) AS geom) AS foo;", "execution_result": [["LINESTRING(1 2,1 10)", "LINESTRING(1 10,1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the LINESTRING formed by points POINT(1 2) and POINT(1 10), as well as the WKT string representation of the reversed line segment.", "source": "original", "new_id": 1100}
{"id": 194, "function": "ST_Reverse", "question": "以WKT字符串格式返回从(1,2)到(1,10)的线段及其反向线段。", "sql": "SELECT ST_AsText(geom) AS line, ST_AsText(ST_Reverse(geom)) AS reverseline \nFROM (SELECT ST_MakeLine(ST_Point(1,2), ST_Point(1,10)) AS geom) AS foo;", "execution_result": [["LINESTRING(1 2,1 10)", "LINESTRING(1 10,1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the LINESTRING formed by points POINT(1 2) and POINT(1 10), as well as the WKT string representation of the reversed line segment.", "source": "original", "new_id": 1101}
{"id": 194, "function": "ST_Reverse", "question": "获取由两个点（1,2）和（1,10）构建的线几何的文本表示，包含原始线段和顶点顺序反转后的线段两个WKT输出。", "sql": "SELECT ST_AsText(geom) AS line, ST_AsText(ST_Reverse(geom)) AS reverseline \nFROM (SELECT ST_MakeLine(ST_Point(1,2), ST_Point(1,10)) AS geom) AS foo;", "execution_result": [["LINESTRING(1 2,1 10)", "LINESTRING(1 10,1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the LINESTRING formed by points POINT(1 2) and POINT(1 10), as well as the WKT string representation of the reversed line segment.", "source": "original", "new_id": 1102}
{"id": 194, "function": "ST_Reverse", "question": "输出由点POINT(1 2)和POINT(1 10)构成的线段LINESTRING的WKT字符串表示，以及该线段反向后的WKT字符串表示。", "sql": "SELECT ST_AsText(geom) AS line, ST_AsText(ST_Reverse(geom)) AS reverseline \nFROM (SELECT ST_MakeLine(ST_Point(1,2), ST_Point(1,10)) AS geom) AS foo;", "execution_result": [["LINESTRING(1 2,1 10)", "LINESTRING(1 10,1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the LINESTRING formed by points POINT(1 2) and POINT(1 10), as well as the WKT string representation of the reversed line segment.", "source": "original", "new_id": 1103}
{"id": 195, "function": "ST_Segmentize", "question": "对由顶点(0 0)、(0 8)、(30 0)组成的三角形多边形，按最大10单位长度分割边，输出WKT格式结果。", "sql": "SELECT ST_AsText( ST_Segmentize(('POLYGON((0 0, 0 8, 30 0, 0 0))'::geometry), 10));", "execution_result": [["POLYGON((0 0,0 8,7.5 6,15 4,22.5 2,30 0,20 0,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result obtained by segmenting the POLYGON((0 0, 0 8, 30 0, 0 0)) with a maximum segment length of 10.", "source": "original", "new_id": 1104}
{"id": 195, "function": "ST_Segmentize", "question": "将POLYGON((0 0, 0 8, 30 0, 0 0))这个几何对象以10为最大分段长度进行分割，返回文本表示。", "sql": "SELECT ST_AsText( ST_Segmentize(('POLYGON((0 0, 0 8, 30 0, 0 0))'::geometry), 10));", "execution_result": [["POLYGON((0 0,0 8,7.5 6,15 4,22.5 2,30 0,20 0,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result obtained by segmenting the POLYGON((0 0, 0 8, 30 0, 0 0)) with a maximum segment length of 10.", "source": "original", "new_id": 1105}
{"id": 195, "function": "ST_Segmentize", "question": "对POLYGON((0 0, 0 8, 30 0, 0 0))这个多边形进行线段分割，要求每段最大长度不超过10个单位，并将结果以WKT格式输出。", "sql": "SELECT ST_AsText( ST_Segmentize(('POLYGON((0 0, 0 8, 30 0, 0 0))'::geometry), 10));", "execution_result": [["POLYGON((0 0,0 8,7.5 6,15 4,22.5 2,30 0,20 0,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result obtained by segmenting the POLYGON((0 0, 0 8, 30 0, 0 0)) with a maximum segment length of 10.", "source": "original", "new_id": 1106}
{"id": 195, "function": "ST_Segmentize", "question": "输出经过最大分段10单位长度分割后的多边形POLYGON((0 0, 0 8, 30 0, 0 0))。", "sql": "SELECT ST_AsText( ST_Segmentize(('POLYGON((0 0, 0 8, 30 0, 0 0))'::geometry), 10));", "execution_result": [["POLYGON((0 0,0 8,7.5 6,15 4,22.5 2,30 0,20 0,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result obtained by segmenting the POLYGON((0 0, 0 8, 30 0, 0 0)) with a maximum segment length of 10.", "source": "original", "new_id": 1107}
{"id": 195, "function": "ST_Segmentize", "question": "以WKT文本格式返回分割处理后的几何对象POLYGON((0 0, 0 8, 30 0, 0 0))，分割后每一段的长度最大为10单位。", "sql": "SELECT ST_AsText( ST_Segmentize(('POLYGON((0 0, 0 8, 30 0, 0 0))'::geometry), 10));", "execution_result": [["POLYGON((0 0,0 8,7.5 6,15 4,22.5 2,30 0,20 0,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result obtained by segmenting the POLYGON((0 0, 0 8, 30 0, 0 0)) with a maximum segment length of 10.", "source": "original", "new_id": 1108}
{"id": 195, "function": "ST_Segmentize", "question": "输出将POLYGON((0 0, 0 8, 30 0, 0 0))按最大分段长度10进行线段分割后得到的结果的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_Segmentize(('POLYGON((0 0, 0 8, 30 0, 0 0))'::geometry), 10));", "execution_result": [["POLYGON((0 0,0 8,7.5 6,15 4,22.5 2,30 0,20 0,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the result obtained by segmenting the POLYGON((0 0, 0 8, 30 0, 0 0)) with a maximum segment length of 10.", "source": "original", "new_id": 1109}
{"id": 196, "function": "ST_Segmentize", "question": "将LINESTRING(0 0, 60 60)这条地理线要素按2000000米的最大段长进行等长的分段（ 沿着连接端点的大圆弧添加顶点），输出WKT格式结果。", "sql": "SELECT ST_AsText( ST_Segmentize(('LINESTRING (0 0, 60 60)'::geography), 2000000));", "execution_result": [["LINESTRING(0 0,4.252632294621186 8.43596525986862,8.69579947419404 16.824093489701564,13.550465473227048 25.107950473646188,19.1066053508691 33.21091076089908,25.779290201459894 41.01711439406505,34.188839517966954 48.337222885886,45.238153936612264 54.84733442373889,60 60)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string format result of the LINESTRING (0 0, 60 60) geographic object after segmenting it by a maximum segment distance of 2000000 meters.", "source": "original", "new_id": 1110}
{"id": 196, "function": "ST_Segmentize", "question": "对起点(0 0)到终点(60 60)的地理线要素进行2000000米间隔的分段处理 ，沿着连接端点的大圆弧添加顶点，返回文本表示。", "sql": "SELECT ST_AsText( ST_Segmentize(('LINESTRING (0 0, 60 60)'::geography), 2000000));", "execution_result": [["LINESTRING(0 0,4.252632294621186 8.43596525986862,8.69579947419404 16.824093489701564,13.550465473227048 25.107950473646188,19.1066053508691 33.21091076089908,25.779290201459894 41.01711439406505,34.188839517966954 48.337222885886,45.238153936612264 54.84733442373889,60 60)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string format result of the LINESTRING (0 0, 60 60) geographic object after segmenting it by a maximum segment distance of 2000000 meters.", "source": "original", "new_id": 1111}
{"id": 196, "function": "ST_Segmentize", "question": "将地理坐标系中的LINESTRING (0 0, 60 60)线段按照最大分段长度2000000米进行分段处理，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_Segmentize(('LINESTRING (0 0, 60 60)'::geography), 2000000));", "execution_result": [["LINESTRING(0 0,4.252632294621186 8.43596525986862,8.69579947419404 16.824093489701564,13.550465473227048 25.107950473646188,19.1066053508691 33.21091076089908,25.779290201459894 41.01711439406505,34.188839517966954 48.337222885886,45.238153936612264 54.84733442373889,60 60)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string format result of the LINESTRING (0 0, 60 60) geographic object after segmenting it by a maximum segment distance of 2000000 meters.", "source": "original", "new_id": 1112}
{"id": 196, "function": "ST_Segmentize", "question": "以文本格式返回按最大距离2000000米分段后的地理线要素LINESTRING (0 0, 60 60)'::geography。", "sql": "SELECT ST_AsText( ST_Segmentize(('LINESTRING (0 0, 60 60)'::geography), 2000000));", "execution_result": [["LINESTRING(0 0,4.252632294621186 8.43596525986862,8.69579947419404 16.824093489701564,13.550465473227048 25.107950473646188,19.1066053508691 33.21091076089908,25.779290201459894 41.01711439406505,34.188839517966954 48.337222885886,45.238153936612264 54.84733442373889,60 60)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string format result of the LINESTRING (0 0, 60 60) geographic object after segmenting it by a maximum segment distance of 2000000 meters.", "source": "original", "new_id": 1113}
{"id": 196, "function": "ST_Segmentize", "question": "输出将地理坐标系下的LINESTRING (0 0, 60 60)线段按最大2000000米间距进行分段插值后得到的WKT字符串格式结果。", "sql": "SELECT ST_AsText( ST_Segmentize(('LINESTRING (0 0, 60 60)'::geography), 2000000));", "execution_result": [["LINESTRING(0 0,4.252632294621186 8.43596525986862,8.69579947419404 16.824093489701564,13.550465473227048 25.107950473646188,19.1066053508691 33.21091076089908,25.779290201459894 41.01711439406505,34.188839517966954 48.337222885886,45.238153936612264 54.84733442373889,60 60)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string format result of the LINESTRING (0 0, 60 60) geographic object after segmenting it by a maximum segment distance of 2000000 meters.", "source": "original", "new_id": 1114}
{"id": 196, "function": "ST_Segmentize", "question": "输出LINESTRING (0 0, 60 60)地理对象按最大分段距离2000000米进行线段分割后生成的WKT字符串格式结果。", "sql": "SELECT ST_AsText( ST_Segmentize(('LINESTRING (0 0, 60 60)'::geography), 2000000));", "execution_result": [["LINESTRING(0 0,4.252632294621186 8.43596525986862,8.69579947419404 16.824093489701564,13.550465473227048 25.107950473646188,19.1066053508691 33.21091076089908,25.779290201459894 41.01711439406505,34.188839517966954 48.337222885886,45.238153936612264 54.84733442373889,60 60)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string format result of the LINESTRING (0 0, 60 60) geographic object after segmenting it by a maximum segment distance of 2000000 meters.", "source": "original", "new_id": 1115}
{"id": 197, "function": "ST_Segmentize", "question": "将MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))进行分段，每一段的最大长度为5，输出WKT格式结果。", "sql": "SELECT ST_AsText(ST_Segmentize( 'MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))'::geometry, 5 ));", "execution_result": [["MULTILINESTRING((0 0,0 1,0 5,0 9),(1 10,1 14,1 18))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string format result of segmenting the MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18)) geometry object with a maximum segment length of 5.", "source": "original", "new_id": 1116}
{"id": 197, "function": "ST_Segmentize", "question": "对由(0,0)-(0,1)-(0,9)和(1,10)-(1,18)两条线段组成的多线对象执行等长的分段操作，每一段的长度不超过5，返回文本表示。", "sql": "SELECT ST_AsText(ST_Segmentize( 'MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))'::geometry, 5 ));", "execution_result": [["MULTILINESTRING((0 0,0 1,0 5,0 9),(1 10,1 14,1 18))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string format result of segmenting the MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18)) geometry object with a maximum segment length of 5.", "source": "original", "new_id": 1117}
{"id": 197, "function": "ST_Segmentize", "question": "对MULTILINESTRING类型的几何对象，其具体坐标为第一条线段从POINT(0 0)到POINT(0 1)再到POINT(0 9)，第二条线段从POINT(1 10)到POINT(1 18)，使用ST_Segmentize函数将其分割为最大长度为5的线段，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_Segmentize( 'MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))'::geometry, 5 ));", "execution_result": [["MULTILINESTRING((0 0,0 1,0 5,0 9),(1 10,1 14,1 18))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string format result of segmenting the MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18)) geometry object with a maximum segment length of 5.", "source": "original", "new_id": 1118}
{"id": 197, "function": "ST_Segmentize", "question": "输出分段处理后的多线几何对象MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))的WKT字符串表示，其中每一段的长度不超过5。", "sql": "SELECT ST_AsText(ST_Segmentize( 'MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))'::geometry, 5 ));", "execution_result": [["MULTILINESTRING((0 0,0 1,0 5,0 9),(1 10,1 14,1 18))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string format result of segmenting the MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18)) geometry object with a maximum segment length of 5.", "source": "original", "new_id": 1119}
{"id": 197, "function": "ST_Segmentize", "question": "以文本格式返回经过分段（每一段的长度不超过5）的多线几何对象MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))。", "sql": "SELECT ST_AsText(ST_Segmentize( 'MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))'::geometry, 5 ));", "execution_result": [["MULTILINESTRING((0 0,0 1,0 5,0 9),(1 10,1 14,1 18))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string format result of segmenting the MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18)) geometry object with a maximum segment length of 5.", "source": "original", "new_id": 1120}
{"id": 197, "function": "ST_Segmentize", "question": "输出将MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))几何对象按最大分段长度5进行线段分割后得到的WKT字符串格式结果。", "sql": "SELECT ST_AsText(ST_Segmentize( 'MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))'::geometry, 5 ));", "execution_result": [["MULTILINESTRING((0 0,0 1,0 5,0 9),(1 10,1 14,1 18))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string format result of segmenting the MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18)) geometry object with a maximum segment length of 5.", "source": "original", "new_id": 1121}
{"id": 198, "function": "ST_SetPoint", "question": "将LINESTRING(-1 2,-1 3)的第1个顶点（索引为0）替换为POINT(-1 1)，输出结果WKT。", "sql": "SELECT ST_AsText(ST_SetPoint('LINESTRING(-1 2,-1 3)', 0, 'POINT(-1 1)'));", "execution_result": [["LINESTRING(-1 1,-1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result (in WKT string format) after replacing the 0th vertex of LINESTRING(-1 2,-1 3) with POINT(-1 1).", "source": "original", "new_id": 1122}
{"id": 198, "function": "ST_SetPoint", "question": "在线串(-1 2,-1 3)的起始位置(索引0)改为点(-1 1)，返回修改后的WKT字符串。", "sql": "SELECT ST_AsText(ST_SetPoint('LINESTRING(-1 2,-1 3)', 0, 'POINT(-1 1)'));", "execution_result": [["LINESTRING(-1 1,-1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result (in WKT string format) after replacing the 0th vertex of LINESTRING(-1 2,-1 3) with POINT(-1 1).", "source": "original", "new_id": 1123}
{"id": 198, "function": "ST_SetPoint", "question": "将LINESTRING(-1 2,-1 3)这条线段的第0个顶点（索引从0开始）替换为POINT(-1 1)这个点，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_SetPoint('LINESTRING(-1 2,-1 3)', 0, 'POINT(-1 1)'));", "execution_result": [["LINESTRING(-1 1,-1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result (in WKT string format) after replacing the 0th vertex of LINESTRING(-1 2,-1 3) with POINT(-1 1).", "source": "original", "new_id": 1124}
{"id": 198, "function": "ST_SetPoint", "question": "输出将点(-1 1)设置为线串(-1 2,-1 3)第一个顶点后的WKT字符串结果。", "sql": "SELECT ST_AsText(ST_SetPoint('LINESTRING(-1 2,-1 3)', 0, 'POINT(-1 1)'));", "execution_result": [["LINESTRING(-1 1,-1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result (in WKT string format) after replacing the 0th vertex of LINESTRING(-1 2,-1 3) with POINT(-1 1).", "source": "original", "new_id": 1125}
{"id": 198, "function": "ST_SetPoint", "question": "获取修改第一个顶点为(-1 1)后的线串几何LINESTRING(-1 2,-1 3)的文本表示形式，结果以WKT格式返回。", "sql": "SELECT ST_AsText(ST_SetPoint('LINESTRING(-1 2,-1 3)', 0, 'POINT(-1 1)'));", "execution_result": [["LINESTRING(-1 1,-1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result (in WKT string format) after replacing the 0th vertex of LINESTRING(-1 2,-1 3) with POINT(-1 1).", "source": "original", "new_id": 1126}
{"id": 198, "function": "ST_SetPoint", "question": "输出将LINESTRING(-1 2,-1 3)的第0个顶点替换为POINT(-1 1)后得到的结果（WKT字符串格式）。", "sql": "SELECT ST_AsText(ST_SetPoint('LINESTRING(-1 2,-1 3)', 0, 'POINT(-1 1)'));", "execution_result": [["LINESTRING(-1 1,-1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result (in WKT string format) after replacing the 0th vertex of LINESTRING(-1 2,-1 3) with POINT(-1 1).", "source": "original", "new_id": 1127}
{"id": 199, "function": "ST_SetPoint", "question": "将LINESTRING(-1 2 3,-1 3 4, 5 6 7)的最后一个顶点替换为POINT(-1 1 3)，输出EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_SetPoint(foo.geom, ST_NumPoints(foo.geom) - 1, ST_GeomFromEWKT('POINT(-1 1 3)'))) \nFROM (SELECT ST_GeomFromEWKT('LINESTRING(-1 2 3,-1 3 4, 5 6 7)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 2 3,-1 3 4,-1 1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Replace the last vertex of the 3D linestring LINESTRING(-1 2 3,-1 3 4,5 6 7) with POINT(-1 1 3) and output the result string in EWKT format.", "source": "original", "new_id": 1128}
{"id": 199, "function": "ST_SetPoint", "question": "用三维点(-1 1 3)替换三维线串[(-1 2 3),(-1 3 4),(5 6 7)]的末顶点，返回EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_SetPoint(foo.geom, ST_NumPoints(foo.geom) - 1, ST_GeomFromEWKT('POINT(-1 1 3)'))) \nFROM (SELECT ST_GeomFromEWKT('LINESTRING(-1 2 3,-1 3 4, 5 6 7)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 2 3,-1 3 4,-1 1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Replace the last vertex of the 3D linestring LINESTRING(-1 2 3,-1 3 4,5 6 7) with POINT(-1 1 3) and output the result string in EWKT format.", "source": "original", "new_id": 1129}
{"id": 199, "function": "ST_SetPoint", "question": "在子查询创建的LINESTRING(-1 2 3,-1 3 4,5 6 7)三维线对象中，用ST_SetPoint函数将最后一个顶点（通过ST_NumPoints计算总点数减1定位）替换为新的三维点POINT(-1 1 3)，最终以EWKT格式输出修改后的线对象。", "sql": "SELECT ST_AsEWKT(ST_SetPoint(foo.geom, ST_NumPoints(foo.geom) - 1, ST_GeomFromEWKT('POINT(-1 1 3)'))) \nFROM (SELECT ST_GeomFromEWKT('LINESTRING(-1 2 3,-1 3 4, 5 6 7)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 2 3,-1 3 4,-1 1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Replace the last vertex of the 3D linestring LINESTRING(-1 2 3,-1 3 4,5 6 7) with POINT(-1 1 3) and output the result string in EWKT format.", "source": "original", "new_id": 1130}
{"id": 199, "function": "ST_SetPoint", "question": "输出将LINESTRING(-1 2 3,-1 3 4, 5 6 7)最后一个顶点替换为POINT(-1 1 3)后的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_SetPoint(foo.geom, ST_NumPoints(foo.geom) - 1, ST_GeomFromEWKT('POINT(-1 1 3)'))) \nFROM (SELECT ST_GeomFromEWKT('LINESTRING(-1 2 3,-1 3 4, 5 6 7)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 2 3,-1 3 4,-1 1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Replace the last vertex of the 3D linestring LINESTRING(-1 2 3,-1 3 4,5 6 7) with POINT(-1 1 3) and output the result string in EWKT format.", "source": "original", "new_id": 1131}
{"id": 199, "function": "ST_SetPoint", "question": "返回修改后的三维线串LINESTRING(-1 2 3,-1 3 4, 5 6 7)的EWKT表示，其中末顶点已被替换为指定三维点POINT(-1 1 3)。", "sql": "SELECT ST_AsEWKT(ST_SetPoint(foo.geom, ST_NumPoints(foo.geom) - 1, ST_GeomFromEWKT('POINT(-1 1 3)'))) \nFROM (SELECT ST_GeomFromEWKT('LINESTRING(-1 2 3,-1 3 4, 5 6 7)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 2 3,-1 3 4,-1 1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Replace the last vertex of the 3D linestring LINESTRING(-1 2 3,-1 3 4,5 6 7) with POINT(-1 1 3) and output the result string in EWKT format.", "source": "original", "new_id": 1132}
{"id": 199, "function": "ST_SetPoint", "question": "将三维线LINESTRING(-1 2 3,-1 3 4,5 6 7)的最后一个顶点替换为POINT(-1 1 3)后，输出EWKT格式的结果字符串。", "sql": "SELECT ST_AsEWKT(ST_SetPoint(foo.geom, ST_NumPoints(foo.geom) - 1, ST_GeomFromEWKT('POINT(-1 1 3)'))) \nFROM (SELECT ST_GeomFromEWKT('LINESTRING(-1 2 3,-1 3 4, 5 6 7)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 2 3,-1 3 4,-1 1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Replace the last vertex of the 3D linestring LINESTRING(-1 2 3,-1 3 4,5 6 7) with POINT(-1 1 3) and output the result string in EWKT format.", "source": "original", "new_id": 1133}
{"id": 200, "function": "ST_SetPoint", "question": "将LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)的倒数第3个顶点替换为该线串的第1个顶点POINT(0 0)，输出修改后的WKT格式。", "sql": "SELECT ST_AsText(ST_SetPoint(g, -3, p)) \nFROM ST_GEomFromText('LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)') AS g, ST_PointN(g,1) as p;", "execution_result": [["LINESTRING(0 0,1 1,0 0,3 3,4 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object obtained by replacing the third-to-last vertex of LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4) with the first vertex.", "source": "original", "new_id": 1134}
{"id": 200, "function": "ST_SetPoint", "question": "用LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)的第一个点POINT(0 0)替换其倒数第三个位置的点，返回修改后的线串文本。", "sql": "SELECT ST_AsText(ST_SetPoint(g, -3, p)) \nFROM ST_GEomFromText('LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)') AS g, ST_PointN(g,1) as p;", "execution_result": [["LINESTRING(0 0,1 1,0 0,3 3,4 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object obtained by replacing the third-to-last vertex of LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4) with the first vertex.", "source": "original", "new_id": 1135}
{"id": 200, "function": "ST_SetPoint", "question": "在由坐标点(0 0)、(1 1)、(2 2)、(3 3)、(4 4)组成的LINESTRING几何对象g中，先使用ST_PointN函数获取该线段的第1个点p（坐标为(0 0)），然后用ST_SetPoint函数将线段g的倒数第3个点（原坐标为(2 2)）替换为点p，最后用ST_AsText函数将结果转换为WKT格式输出。", "sql": "SELECT ST_AsText(ST_SetPoint(g, -3, p)) \nFROM ST_GEomFromText('LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)') AS g, ST_PointN(g,1) as p;", "execution_result": [["LINESTRING(0 0,1 1,0 0,3 3,4 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object obtained by replacing the third-to-last vertex of LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4) with the first vertex.", "source": "original", "new_id": 1136}
{"id": 200, "function": "ST_SetPoint", "question": "输出将LINESTRING(0 0,1 1,2 2,3 3,4 4)倒数第三个顶点替换为首顶点后的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_SetPoint(g, -3, p)) \nFROM ST_GEomFromText('LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)') AS g, ST_PointN(g,1) as p;", "execution_result": [["LINESTRING(0 0,1 1,0 0,3 3,4 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object obtained by replacing the third-to-last vertex of LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4) with the first vertex.", "source": "original", "new_id": 1137}
{"id": 200, "function": "ST_SetPoint", "question": "返回LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)修改后的线串几何的文本表示，其中原始线串的倒数第三个顶点已被替换为首顶点。", "sql": "SELECT ST_AsText(ST_SetPoint(g, -3, p)) \nFROM ST_GEomFromText('LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)') AS g, ST_PointN(g,1) as p;", "execution_result": [["LINESTRING(0 0,1 1,0 0,3 3,4 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object obtained by replacing the third-to-last vertex of LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4) with the first vertex.", "source": "original", "new_id": 1138}
{"id": 200, "function": "ST_SetPoint", "question": "输出将LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)的倒数第3个顶点替换为第1个顶点后，所得到的几何对象的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_SetPoint(g, -3, p)) \nFROM ST_GEomFromText('LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)') AS g, ST_PointN(g,1) as p;", "execution_result": [["LINESTRING(0 0,1 1,0 0,3 3,4 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object obtained by replacing the third-to-last vertex of LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4) with the first vertex.", "source": "original", "new_id": 1139}
{"id": 201, "function": "ST_ShiftLongitude", "question": "将SRID为4326的POINT(-90 0)几何对象进行经度偏移，将经度转换到0度到360度范围内，输出WKT格式结果。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(-90 0)'::geometry))", "execution_result": [["POINT(270 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(-90 0) with SRID 4326 after converting its longitude value from -90 degrees to the 0-360 degree range.", "source": "original", "new_id": 1140}
{"id": 201, "function": "ST_ShiftLongitude", "question": "对坐标为(-90,0)且SRID为4326的点执行ST_ShiftLongitude操作，返回文本表示。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(-90 0)'::geometry))", "execution_result": [["POINT(270 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(-90 0) with SRID 4326 after converting its longitude value from -90 degrees to the 0-360 degree range.", "source": "original", "new_id": 1141}
{"id": 201, "function": "ST_ShiftLongitude", "question": "将SRID为4326的二维点POINT(-90 0)经度值从-90度转换到经度范围0-360度坐标系后，输出其WKT格式文本表示。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(-90 0)'::geometry))", "execution_result": [["POINT(270 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(-90 0) with SRID 4326 after converting its longitude value from -90 degrees to the 0-360 degree range.", "source": "original", "new_id": 1142}
{"id": 201, "function": "ST_ShiftLongitude", "question": "输出经度偏移后的POINT(-90 0)几何对象的WKT字符串表示，将精度转换到0度到360度范围内。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(-90 0)'::geometry))", "execution_result": [["POINT(270 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(-90 0) with SRID 4326 after converting its longitude value from -90 degrees to the 0-360 degree range.", "source": "original", "new_id": 1143}
{"id": 201, "function": "ST_ShiftLongitude", "question": "输出将SRID为4326的二维点POINT(-90 0)经度值从-90度转换到经度范围0-360度后的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(-90 0)'::geometry))", "execution_result": [["POINT(270 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(-90 0) with SRID 4326 after converting its longitude value from -90 degrees to the 0-360 degree range.", "source": "original", "new_id": 1144}
{"id": 201, "function": "ST_ShiftLongitude", "question": "输出将SRID为4326的二维点POINT(-90 0)经度值从-90度转换到经度范围0-360度后的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(-90 0)'::geometry))", "execution_result": [["POINT(270 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(-90 0) with SRID 4326 after converting its longitude value from -90 degrees to the 0-360 degree range.", "source": "original", "new_id": 1145}
{"id": 202, "function": "ST_ShiftLongitude", "question": "将SRID=4326的POINT(270 0)几何对象进行经度偏移转换，输出WKT格式结果。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(270 0)'::geometry))", "execution_result": [["POINT(-90 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(270 0) with SRID 4326 after normalizing its longitude value to the range of -180 to 180.", "source": "original", "new_id": 1146}
{"id": 202, "function": "ST_ShiftLongitude", "question": "对坐标为(270,0)且空间参考系为4326的点执行ST_ShiftLongitude操作后转换为文本。(经度偏移指的是-180度到180度的经度与0度到360度两个经度范围内的转换，如270转换为90)", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(270 0)'::geometry))", "execution_result": [["POINT(-90 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(270 0) with SRID 4326 after normalizing its longitude value to the range of -180 to 180.", "source": "original", "new_id": 1147}
{"id": 202, "function": "ST_ShiftLongitude", "question": "将SRID为4326的二维点POINT(270 0)进行经度偏移转换（将经度值从-180到0范围映射到180到360范围），并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(270 0)'::geometry))", "execution_result": [["POINT(-90 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(270 0) with SRID 4326 after normalizing its longitude value to the range of -180 to 180.", "source": "original", "new_id": 1148}
{"id": 202, "function": "ST_ShiftLongitude", "question": "输出经度偏移转换后的POINT(270 0)几何对象的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(270 0)'::geometry))", "execution_result": [["POINT(-90 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(270 0) with SRID 4326 after normalizing its longitude value to the range of -180 to 180.", "source": "original", "new_id": 1149}
{"id": 202, "function": "ST_ShiftLongitude", "question": "以Well-Known Text格式返回SRID=4326的POINT(270 0)经度平移（将-180到180范围的精度与0度到360度范围内精度的相互转换）后的结果。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(270 0)'::geometry))", "execution_result": [["POINT(-90 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(270 0) with SRID 4326 after normalizing its longitude value to the range of -180 to 180.", "source": "original", "new_id": 1150}
{"id": 202, "function": "ST_ShiftLongitude", "question": "输出将SRID为4326的二维点POINT(270 0)经度值转换到-180到180范围后得到的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(270 0)'::geometry))", "execution_result": [["POINT(-90 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(270 0) with SRID 4326 after normalizing its longitude value to the range of -180 to 180.", "source": "original", "new_id": 1151}
{"id": 203, "function": "ST_ShiftLongitude", "question": "将SRID=4326的LINESTRING(174 12, 182 13)几何对象经度偏移后，输出其WKT文本。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;LINESTRING(174 12, 182 13)'::geometry));", "execution_result": [["LINESTRING(174 12,-178 13)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the LINESTRING(174 12, 182 13) geometry with SRID 4326 after processing with the ST_ShiftLongitude function, where the longitude values will be converted to the range of -180 to 180.", "source": "original", "new_id": 1152}
{"id": 203, "function": "ST_ShiftLongitude", "question": "精确处理坐标为(174 12)和(182 13)的线对象，经度平移后转换为文本格式。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;LINESTRING(174 12, 182 13)'::geometry));", "execution_result": [["LINESTRING(174 12,-178 13)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the LINESTRING(174 12, 182 13) geometry with SRID 4326 after processing with the ST_ShiftLongitude function, where the longitude values will be converted to the range of -180 to 180.", "source": "original", "new_id": 1153}
{"id": 203, "function": "ST_ShiftLongitude", "question": "将SRID为4326的LINESTRING几何对象，其坐标点为(174 12)和(182 13)，使用ST_ShiftLongitude函数进行经度偏移转换，并使用ST_AsText函数将结果以WKT格式输出。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;LINESTRING(174 12, 182 13)'::geometry));", "execution_result": [["LINESTRING(174 12,-178 13)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the LINESTRING(174 12, 182 13) geometry with SRID 4326 after processing with the ST_ShiftLongitude function, where the longitude values will be converted to the range of -180 to 180.", "source": "original", "new_id": 1154}
{"id": 203, "function": "ST_ShiftLongitude", "question": "输出经度偏移后的LINESTRING(174 12, 182 13)的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;LINESTRING(174 12, 182 13)'::geometry));", "execution_result": [["LINESTRING(174 12,-178 13)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the LINESTRING(174 12, 182 13) geometry with SRID 4326 after processing with the ST_ShiftLongitude function, where the longitude values will be converted to the range of -180 to 180.", "source": "original", "new_id": 1155}
{"id": 203, "function": "ST_ShiftLongitude", "question": "以Well-Known Text格式返回LINESTRING(174 12, 182 13)经度平移后的结果。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;LINESTRING(174 12, 182 13)'::geometry));", "execution_result": [["LINESTRING(174 12,-178 13)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the LINESTRING(174 12, 182 13) geometry with SRID 4326 after processing with the ST_ShiftLongitude function, where the longitude values will be converted to the range of -180 to 180.", "source": "original", "new_id": 1156}
{"id": 203, "function": "ST_ShiftLongitude", "question": "输出将SRID为4326的LINESTRING(174 12, 182 13)几何对象经ST_ShiftLongitude函数处理后得到的WKT字符串表示，其中坐标经度值将被转换到-180到180范围内。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;LINESTRING(174 12, 182 13)'::geometry));", "execution_result": [["LINESTRING(174 12,-178 13)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the LINESTRING(174 12, 182 13) geometry with SRID 4326 after processing with the ST_ShiftLongitude function, where the longitude values will be converted to the range of -180 to 180.", "source": "original", "new_id": 1157}
{"id": 207, "function": "ST_SnapToGrid", "question": "将LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)以POINT(1.12 2.22 3.2 4.4444)为基准点，按X/Y/Z轴0.1精度和M值0.01精度进行网格捕捉，输出EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_SnapToGrid( ST_GeomFromEWKT('LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)'), ST_GeomFromEWKT('POINT(1.12 2.22 3.2 4.4444)'), 0.1, 0.1, 0.1, 0.01) );", "execution_result": [["LINESTRING(-1.08 2.12 2.3 1.1144,4.12 3.22 3.1 1.1144,-1.08 2.12 2.3 1.1144)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format result of snapping the 3D linestring with M values LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112) to a grid with reference point POINT(1.12 2.22 3.2 4.4444), where X/Y/Z coordinates have a precision of 0.1 and M values a precision of 0.01.", "source": "original", "new_id": 1158}
{"id": 207, "function": "ST_SnapToGrid", "question": "使用ST_SnapToGrid函数，将包含三个顶点的四维线对象LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)以指定参考点POINT(1.12 2.22 3.2 4.4444)和0.1(XYZ)/0.01(M)的精度参数进行坐标对齐，返回EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_SnapToGrid( ST_GeomFromEWKT('LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)'), ST_GeomFromEWKT('POINT(1.12 2.22 3.2 4.4444)'), 0.1, 0.1, 0.1, 0.01) );", "execution_result": [["LINESTRING(-1.08 2.12 2.3 1.1144,4.12 3.22 3.1 1.1144,-1.08 2.12 2.3 1.1144)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format result of snapping the 3D linestring with M values LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112) to a grid with reference point POINT(1.12 2.22 3.2 4.4444), where X/Y/Z coordinates have a precision of 0.1 and M values a precision of 0.01.", "source": "original", "new_id": 1159}
{"id": 207, "function": "ST_SnapToGrid", "question": "将带有XYZM坐标的LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)按照参考点POINT(1.12 2.22 3.2 4.4444)进行网格对齐，其中X轴网格大小为0.1，Y轴网格大小为0.1，Z轴网格大小为0.1，M值网格大小为0.01，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_SnapToGrid( ST_GeomFromEWKT('LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)'), ST_GeomFromEWKT('POINT(1.12 2.22 3.2 4.4444)'), 0.1, 0.1, 0.1, 0.01) );", "execution_result": [["LINESTRING(-1.08 2.12 2.3 1.1144,4.12 3.22 3.1 1.1144,-1.08 2.12 2.3 1.1144)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format result of snapping the 3D linestring with M values LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112) to a grid with reference point POINT(1.12 2.22 3.2 4.4444), where X/Y/Z coordinates have a precision of 0.1 and M values a precision of 0.01.", "source": "original", "new_id": 1160}
{"id": 207, "function": "ST_SnapToGrid", "question": "输出经过网格（（POINT(1.12 2.22 3.2 4.4444)为原点，X/Y/Z轴0.1精度和M值0.01精度））对齐后的四维线对象LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)')的EWKT字符串表示。", "sql": "SELECT ST_AsEWKT(ST_SnapToGrid( ST_GeomFromEWKT('LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)'), ST_GeomFromEWKT('POINT(1.12 2.22 3.2 4.4444)'), 0.1, 0.1, 0.1, 0.01) );", "execution_result": [["LINESTRING(-1.08 2.12 2.3 1.1144,4.12 3.22 3.1 1.1144,-1.08 2.12 2.3 1.1144)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format result of snapping the 3D linestring with M values LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112) to a grid with reference point POINT(1.12 2.22 3.2 4.4444), where X/Y/Z coordinates have a precision of 0.1 and M values a precision of 0.01.", "source": "original", "new_id": 1161}
{"id": 207, "function": "ST_SnapToGrid", "question": "返回将原始线对象LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)坐标按指定参数对齐后的EWKT格式文本。", "sql": "SELECT ST_AsEWKT(ST_SnapToGrid( ST_GeomFromEWKT('LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)'), ST_GeomFromEWKT('POINT(1.12 2.22 3.2 4.4444)'), 0.1, 0.1, 0.1, 0.01) );", "execution_result": [["LINESTRING(-1.08 2.12 2.3 1.1144,4.12 3.22 3.1 1.1144,-1.08 2.12 2.3 1.1144)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format result of snapping the 3D linestring with M values LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112) to a grid with reference point POINT(1.12 2.22 3.2 4.4444), where X/Y/Z coordinates have a precision of 0.1 and M values a precision of 0.01.", "source": "original", "new_id": 1162}
{"id": 207, "function": "ST_SnapToGrid", "question": "输出将三维带M值的LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)按照参考点POINT(1.12 2.22 3.2 4.4444)进行网格捕捉后，X/Y/Z坐标精度为0.1、M值精度为0.01的EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_SnapToGrid( ST_GeomFromEWKT('LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)'), ST_GeomFromEWKT('POINT(1.12 2.22 3.2 4.4444)'), 0.1, 0.1, 0.1, 0.01) );", "execution_result": [["LINESTRING(-1.08 2.12 2.3 1.1144,4.12 3.22 3.1 1.1144,-1.08 2.12 2.3 1.1144)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format result of snapping the 3D linestring with M values LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112) to a grid with reference point POINT(1.12 2.22 3.2 4.4444), where X/Y/Z coordinates have a precision of 0.1 and M values a precision of 0.01.", "source": "original", "new_id": 1163}
{"id": 208, "function": "ST_SnapToGrid", "question": "将折线LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)按0.001精度网格捕捉后输出WKT文本。", "sql": "SELECT ST_AsText(ST_SnapToGrid(ST_GeomFromText('LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)'), 0.001));", "execution_result": [["LINESTRING(1.112 2.123,4.111 3.237)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667) after snapping to a 0.001 precision grid, with coordinate values rounded to three decimal places.", "source": "original", "new_id": 1164}
{"id": 208, "function": "ST_SnapToGrid", "question": "精确捕捉折线坐标(1.1115678,2.123)、(4.111111,3.2374897)、(4.11112,3.23748667)到0.001精度的网格，返回文本结果。", "sql": "SELECT ST_AsText(ST_SnapToGrid(ST_GeomFromText('LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)'), 0.001));", "execution_result": [["LINESTRING(1.112 2.123,4.111 3.237)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667) after snapping to a 0.001 precision grid, with coordinate values rounded to three decimal places.", "source": "original", "new_id": 1165}
{"id": 208, "function": "ST_SnapToGrid", "question": "将LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)这条折线几何对象先通过ST_GeomFromText函数转换为几何类型，然后使用ST_SnapToGrid函数以0.001为网格间距进行坐标对齐，最后用ST_AsText函数将结果转换为WKT格式文本输出。", "sql": "SELECT ST_AsText(ST_SnapToGrid(ST_GeomFromText('LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)'), 0.001));", "execution_result": [["LINESTRING(1.112 2.123,4.111 3.237)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667) after snapping to a 0.001 precision grid, with coordinate values rounded to three decimal places.", "source": "original", "new_id": 1166}
{"id": 208, "function": "ST_SnapToGrid", "question": "输出网格捕捉后的折线LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)，捕捉精度为0.001单位。", "sql": "SELECT ST_AsText(ST_SnapToGrid(ST_GeomFromText('LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)'), 0.001));", "execution_result": [["LINESTRING(1.112 2.123,4.111 3.237)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667) after snapping to a 0.001 precision grid, with coordinate values rounded to three decimal places.", "source": "original", "new_id": 1167}
{"id": 208, "function": "ST_SnapToGrid", "question": "以文本形式返回折线LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)经0.001精度网格对齐后的坐标结果。", "sql": "SELECT ST_AsText(ST_SnapToGrid(ST_GeomFromText('LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)'), 0.001));", "execution_result": [["LINESTRING(1.112 2.123,4.111 3.237)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667) after snapping to a 0.001 precision grid, with coordinate values rounded to three decimal places.", "source": "original", "new_id": 1168}
{"id": 208, "function": "ST_SnapToGrid", "question": "输出LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)经过0.001精度网格捕捉后的WKT字符串，坐标值保留三位小数。", "sql": "SELECT ST_AsText(ST_SnapToGrid(ST_GeomFromText('LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)'), 0.001));", "execution_result": [["LINESTRING(1.112 2.123,4.111 3.237)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667) after snapping to a 0.001 precision grid, with coordinate values rounded to three decimal places.", "source": "original", "new_id": 1169}
{"id": 209, "function": "ST_Snap", "question": "将MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))捕捉到线串LINESTRING (5 107, 54 84, 101 100)上，吸附距离为两者原始距离的1.01倍，返回WKT格式结果。", "sql": "SELECT ST_AsText(ST_Snap(poly,line, ST_Distance(poly,line)*1.01)) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((26 125,26 200,126 200,126 125,101 100,26 125),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string result after snapping the MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 ))) to the LINESTRING (5 107, 54 84, 101 100) with a snap tolerance of 1.01 times the distance between them.", "source": "original", "new_id": 1170}
{"id": 209, "function": "ST_Snap", "question": "将MULTIPOLYGON对象（由外环(26 125, 26 200, 126 200, 126 125, 26 125)和内环(51 150, 101 150, 76 175, 51 150)组成的多边形，以及另一个由顶点(151 100, 151 200, 176 175, 151 100)组成的多边形）向LINESTRING(5 107, 54 84, 101 100)进行捕捉，捕捉容差为两者距离的1.01倍，并将结果以WKT格式输出为polysnapped字段。", "sql": "SELECT ST_AsText(ST_Snap(poly,line, ST_Distance(poly,line)*1.01)) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((26 125,26 200,126 200,126 125,101 100,26 125),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string result after snapping the MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 ))) to the LINESTRING (5 107, 54 84, 101 100) with a snap tolerance of 1.01 times the distance between them.", "source": "original", "new_id": 1171}
{"id": 209, "function": "ST_Snap", "question": "将MULTIPOLYGON对象（由外环(26 125,26 200,126 200,126 125,26 125)和内环(51 150,101 150,76 175,51 150)组成的第一多边形，以及由环(151 100,151 200,176 175,151 100)组成的第二多边形）向LINESTRING(5 107,54 84,101 100)进行捕捉，捕捉容差为两者距离的1.01倍，并以WKT格式输出捕捉后的多边形。", "sql": "SELECT ST_AsText(ST_Snap(poly,line, ST_Distance(poly,line)*1.01)) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((26 125,26 200,126 200,126 125,101 100,26 125),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string result after snapping the MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 ))) to the LINESTRING (5 107, 54 84, 101 100) with a snap tolerance of 1.01 times the distance between them.", "source": "original", "new_id": 1172}
{"id": 209, "function": "ST_Snap", "question": "输出多边形MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))经过线要素LINESTRING (5 107, 54 84, 101 100)吸附处理后得到的WKT字符串，吸附容差为两者原始距离的1.01倍。", "sql": "SELECT ST_AsText(ST_Snap(poly,line, ST_Distance(poly,line)*1.01)) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((26 125,26 200,126 200,126 125,101 100,26 125),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string result after snapping the MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 ))) to the LINESTRING (5 107, 54 84, 101 100) with a snap tolerance of 1.01 times the distance between them.", "source": "original", "new_id": 1173}
{"id": 209, "function": "ST_Snap", "question": "输出将MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 ))) 几何体按照LINESTRING (5 107, 54 84, 101 100) 进行捕捉（捕捉容差为两者距离的1.01倍）后得到的WKT字符串结果。", "sql": "SELECT ST_AsText(ST_Snap(poly,line, ST_Distance(poly,line)*1.01)) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((26 125,26 200,126 200,126 125,101 100,26 125),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string result after snapping the MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 ))) to the LINESTRING (5 107, 54 84, 101 100) with a snap tolerance of 1.01 times the distance between them.", "source": "original", "new_id": 1174}
{"id": 209, "function": "ST_Snap", "question": "输出将MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))按照LINESTRING (5 107, 54 84, 101 100)进行捕捉后，捕捉容差为两者距离的1.01倍，最终得到的WKT字符串结果。", "sql": "SELECT ST_AsText(ST_Snap(poly,line, ST_Distance(poly,line)*1.01)) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((26 125,26 200,126 200,126 125,101 100,26 125),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string result after snapping the MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 ))) to the LINESTRING (5 107, 54 84, 101 100) with a snap tolerance of 1.01 times the distance between them.", "source": "original", "new_id": 1175}
{"id": 210, "function": "ST_Snap", "question": "将MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 ))) 向 LINESTRING (5 107, 54 84, 101 100) 执行捕捉操作，容差为两者距离的1.25倍，输出结果的WKT格式。", "sql": "SELECT ST_AsText( ST_Snap(poly,line, ST_Distance(poly,line)*1.25) ) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((5 107,26 200,126 200,126 125,101 100,54 84,5 107),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )) ) after snapping it to LINESTRING (5 107, 54 84, 101 100) with a tolerance of 1.25 times the distance between them.", "source": "original", "new_id": 1176}
{"id": 210, "function": "ST_Snap", "question": "精确捕捉坐标为MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 ))) 的面到LINESTRING (5 107, 54 84, 101 100)的线上，容差系数1.25，返回文本结果。", "sql": "SELECT ST_AsText( ST_Snap(poly,line, ST_Distance(poly,line)*1.25) ) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((5 107,26 200,126 200,126 125,101 100,54 84,5 107),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )) ) after snapping it to LINESTRING (5 107, 54 84, 101 100) with a tolerance of 1.25 times the distance between them.", "source": "original", "new_id": 1177}
{"id": 210, "function": "ST_Snap", "question": "将MULTIPOLYGON对象（由外环坐标(26 125,26 200,126 200,126 125,26 125)和内环坐标(51 150,101 150,76 175,51 150)组成的多边形，以及由坐标(151 100,151 200,176 175,151 100)组成的多边形）与LINESTRING对象（由坐标点(5 107,54 84,101 100)组成的折线）进行捕捉操作，捕捉距离为两对象原始距离的1.25倍，并将结果以WKT格式输出到polysnapped字段。", "sql": "SELECT ST_AsText( ST_Snap(poly,line, ST_Distance(poly,line)*1.25) ) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((5 107,26 200,126 200,126 125,101 100,54 84,5 107),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )) ) after snapping it to LINESTRING (5 107, 54 84, 101 100) with a tolerance of 1.25 times the distance between them.", "source": "original", "new_id": 1178}
{"id": 210, "function": "ST_Snap", "question": "以Well-Known Text格式返回捕捉到线LINESTRING (5 107, 54 84, 101 100)操作后的多面几何对象MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))。", "sql": "SELECT ST_AsText( ST_Snap(poly,line, ST_Distance(poly,line)*1.25) ) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((5 107,26 200,126 200,126 125,101 100,54 84,5 107),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )) ) after snapping it to LINESTRING (5 107, 54 84, 101 100) with a tolerance of 1.25 times the distance between them.", "source": "original", "new_id": 1179}
{"id": 210, "function": "ST_Snap", "question": "输出将MULTIPOLYGON( ((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))向LINESTRING(5 107,54 84,101 100)进行1.25倍距离阈值捕捉后，得到的新多边形的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_Snap(poly,line, ST_Distance(poly,line)*1.25) ) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((5 107,26 200,126 200,126 125,101 100,54 84,5 107),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )) ) after snapping it to LINESTRING (5 107, 54 84, 101 100) with a tolerance of 1.25 times the distance between them.", "source": "original", "new_id": 1180}
{"id": 210, "function": "ST_Snap", "question": "输出将MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )) )按照LINESTRING (5 107, 54 84, 101 100)进行捕捉后的WKT字符串，捕捉容差为两者距离的1.25倍。", "sql": "SELECT ST_AsText( ST_Snap(poly,line, ST_Distance(poly,line)*1.25) ) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((5 107,26 200,126 200,126 125,101 100,54 84,5 107),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )) ) after snapping it to LINESTRING (5 107, 54 84, 101 100) with a tolerance of 1.25 times the distance between them.", "source": "original", "new_id": 1181}
{"id": 211, "function": "ST_Snap", "question": "将LINESTRING (5 107, 54 84, 101 100)吸附捕捉到MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))上，吸附距离为两者距离的1.25倍，输出WKT格式结果。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.25) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the new line segment obtained by snapping the LINESTRING (5 107, 54 84, 101 100) to the MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 ))) with a geometric distance tolerance of 1.25 times.", "source": "original", "new_id": 1182}
{"id": 211, "function": "ST_Snap", "question": "精确将坐标为(5 107, 54 84, 101 100)的线对象吸附捕捉到多边形集合MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))上，输出文本结果。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.25) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the new line segment obtained by snapping the LINESTRING (5 107, 54 84, 101 100) to the MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 ))) with a geometric distance tolerance of 1.25 times.", "source": "original", "new_id": 1183}
{"id": 211, "function": "ST_Snap", "question": "将LINESTRING (5 107, 54 84, 101 100)这条折线按照MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))这个多边形的边界进行捕捉，捕捉距离为多边形与折线原始距离的1.25倍，并以WKT格式输出捕捉后的折线。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.25) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the new line segment obtained by snapping the LINESTRING (5 107, 54 84, 101 100) to the MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 ))) with a geometric distance tolerance of 1.25 times.", "source": "original", "new_id": 1184}
{"id": 211, "function": "ST_Snap", "question": "输出线对象LINESTRING (5 107, 54 84, 101 100)吸附到多边形MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))后的WKT字符串结果，吸附容差为原始距离的125%。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.25) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the new line segment obtained by snapping the LINESTRING (5 107, 54 84, 101 100) to the MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 ))) with a geometric distance tolerance of 1.25 times.", "source": "original", "new_id": 1185}
{"id": 211, "function": "ST_Snap", "question": "输出将LINESTRING (5 107, 54 84, 101 100)以MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))为参照进行捕捉（捕捉距离为两者原始距离的1.25倍）后得到的WKT字符串格式结果。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.25) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the new line segment obtained by snapping the LINESTRING (5 107, 54 84, 101 100) to the MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 ))) with a geometric distance tolerance of 1.25 times.", "source": "original", "new_id": 1186}
{"id": 211, "function": "ST_Snap", "question": "输出将LINESTRING (5 107, 54 84, 101 100)以1.25倍几何距离为容差吸附到MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))上之后，得到的新线段的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.25) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the new line segment obtained by snapping the LINESTRING (5 107, 54 84, 101 100) to the MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 ))) with a geometric distance tolerance of 1.25 times.", "source": "original", "new_id": 1187}
{"id": 212, "function": "ST_Snap", "question": "将LINESTRING (5 107, 54 84, 101 100)吸附到MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))上，容差为两者距离的1.01倍，输出吸附结果的WKT格式。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.01) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(5 107,26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the new line segment obtained by snapping LINESTRING (5 107, 54 84, 101 100) to MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100))) with a 1.01 distance tolerance.", "source": "original", "new_id": 1188}
{"id": 212, "function": "ST_Snap", "question": "将精确坐标为(5 107, 54 84, 101 100)的折线吸附到由两个多边形组成的多面体MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))，容差系数1.01，返回WKT字符串。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.01) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(5 107,26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the new line segment obtained by snapping LINESTRING (5 107, 54 84, 101 100) to MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100))) with a 1.01 distance tolerance.", "source": "original", "new_id": 1189}
{"id": 212, "function": "ST_Snap", "question": "将LINESTRING (5 107, 54 84, 101 100)这条折线以MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))这个多边形为基准进行捕捉，捕捉距离为多边形与折线原始距离的1.01倍，并将捕捉后的折线以WKT格式输出，结果字段命名为linesnapped。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.01) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(5 107,26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the new line segment obtained by snapping LINESTRING (5 107, 54 84, 101 100) to MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100))) with a 1.01 distance tolerance.", "source": "original", "new_id": 1190}
{"id": 212, "function": "ST_Snap", "question": "输出折线LINESTRING (5 107, 54 84, 101 100)吸附到多面体MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))后的WKT字符串，吸附容差为两者距离的1.01倍。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.01) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(5 107,26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the new line segment obtained by snapping LINESTRING (5 107, 54 84, 101 100) to MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100))) with a 1.01 distance tolerance.", "source": "original", "new_id": 1191}
{"id": 212, "function": "ST_Snap", "question": "以Well-Known Text格式返回吸附到多边形MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))后的折线LINESTRING (5 107, 54 84, 101 100)几何对象，吸附容差为两者距离的1.01倍。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.01) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(5 107,26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the new line segment obtained by snapping LINESTRING (5 107, 54 84, 101 100) to MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100))) with a 1.01 distance tolerance.", "source": "original", "new_id": 1192}
{"id": 212, "function": "ST_Snap", "question": "输出将LINESTRING (5 107, 54 84, 101 100)以1.01倍距离容差吸附到MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))后得到的新线段的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.01) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(5 107,26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the new line segment obtained by snapping LINESTRING (5 107, 54 84, 101 100) to MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100))) with a 1.01 distance tolerance.", "source": "original", "new_id": 1193}
{"id": 213, "function": "ST_SwapOrdinates", "question": "将POINT ZM (0 0 0 2)先交换X和M坐标，然后在X方向放大为原来的2倍、Y方向缩放为原来的1倍，最后再交换X和M坐标，输出WKT结果。", "sql": "SELECT ST_AsText( ST_SwapOrdinates( ST_Scale( ST_SwapOrdinates(g,'xm'), 2, 1 ), 'xm') ) \nFROM ( SELECT 'POINT ZM (0 0 0 2)'::geometry g ) foo;", "execution_result": [["POINT ZM (0 0 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by first swapping the X and M coordinates of the geometry object POINT ZM (0 0 0 2), then scaling it by 2 times in the X direction and 1 time in the Y direction, and finally swapping the X and M coordinates again.", "source": "original", "new_id": 1194}
{"id": 213, "function": "ST_SwapOrdinates", "question": "对坐标为(0,0,0,2)的四维点对象，先执行xm坐标交换，再在X和Y方向上进行(2,1)比例缩放，最后再次执行xm坐标交换，返回文本格式。", "sql": "SELECT ST_AsText( ST_SwapOrdinates( ST_Scale( ST_SwapOrdinates(g,'xm'), 2, 1 ), 'xm') ) \nFROM ( SELECT 'POINT ZM (0 0 0 2)'::geometry g ) foo;", "execution_result": [["POINT ZM (0 0 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by first swapping the X and M coordinates of the geometry object POINT ZM (0 0 0 2), then scaling it by 2 times in the X direction and 1 time in the Y direction, and finally swapping the X and M coordinates again.", "source": "original", "new_id": 1195}
{"id": 213, "function": "ST_SwapOrdinates", "question": "对三维带M值的点POINT ZM (0 0 0 2)先交换其X坐标和M值，然后进行X轴方向缩放2倍、Y轴方向缩放1倍，再交换回X坐标和M值，最后以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_SwapOrdinates( ST_Scale( ST_SwapOrdinates(g,'xm'), 2, 1 ), 'xm') ) \nFROM ( SELECT 'POINT ZM (0 0 0 2)'::geometry g ) foo;", "execution_result": [["POINT ZM (0 0 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by first swapping the X and M coordinates of the geometry object POINT ZM (0 0 0 2), then scaling it by 2 times in the X direction and 1 time in the Y direction, and finally swapping the X and M coordinates again.", "source": "original", "new_id": 1196}
{"id": 213, "function": "ST_SwapOrdinates", "question": "输出对POINT ZM (0 0 0 2)几何对象先交换X和M坐标值，再在X方向缩放2倍、Y方向缩放1倍，最后再次交换X和M坐标值后的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_SwapOrdinates( ST_Scale( ST_SwapOrdinates(g,'xm'), 2, 1 ), 'xm') ) \nFROM ( SELECT 'POINT ZM (0 0 0 2)'::geometry g ) foo;", "execution_result": [["POINT ZM (0 0 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by first swapping the X and M coordinates of the geometry object POINT ZM (0 0 0 2), then scaling it by 2 times in the X direction and 1 time in the Y direction, and finally swapping the X and M coordinates again.", "source": "original", "new_id": 1197}
{"id": 213, "function": "ST_SwapOrdinates", "question": "输出对POINT ZM (0 0 0 2)几何对象先交换X和M坐标轴，然后在X轴方向缩放2倍、Y轴方向缩放1倍，最后再次交换X和M坐标轴后得到的WKT字符串。", "sql": "SELECT ST_AsText( ST_SwapOrdinates( ST_Scale( ST_SwapOrdinates(g,'xm'), 2, 1 ), 'xm') ) \nFROM ( SELECT 'POINT ZM (0 0 0 2)'::geometry g ) foo;", "execution_result": [["POINT ZM (0 0 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by first swapping the X and M coordinates of the geometry object POINT ZM (0 0 0 2), then scaling it by 2 times in the X direction and 1 time in the Y direction, and finally swapping the X and M coordinates again.", "source": "original", "new_id": 1198}
{"id": 213, "function": "ST_SwapOrdinates", "question": "输出将几何对象POINT ZM (0 0 0 2)先交换X和M坐标，然后在X方向缩放2倍、Y方向缩放1倍，最后再次交换X和M坐标后得到的WKT字符串。", "sql": "SELECT ST_AsText( ST_SwapOrdinates( ST_Scale( ST_SwapOrdinates(g,'xm'), 2, 1 ), 'xm') ) \nFROM ( SELECT 'POINT ZM (0 0 0 2)'::geometry g ) foo;", "execution_result": [["POINT ZM (0 0 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by first swapping the X and M coordinates of the geometry object POINT ZM (0 0 0 2), then scaling it by 2 times in the X direction and 1 time in the Y direction, and finally swapping the X and M coordinates again.", "source": "original", "new_id": 1199}
{"id": 214, "function": "ST_IsValid", "question": "验证LINESTRING(0 0, 1 1)的几何有效性，以及POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))的几何有效性。", "sql": "SELECT ST_IsValid(ST_GeomFromText('LINESTRING(0 0, 1 1)')) AS good_line, ST_IsValid(ST_GeomFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) AS bad_poly", "execution_result": [[true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean value of geometric validity for LINESTRING(0 0, 1 1) (column name good_line) and POLYGON((0 0, 1 1, 1 2, 1 1, 0 0)) (column name bad_poly), returning the results in two columns.", "source": "original", "new_id": 1200}
{"id": 214, "function": "ST_IsValid", "question": "检查折线LINESTRING(0 0, 1 1)是否有效，并检查多边形POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))是否有效。", "sql": "SELECT ST_IsValid(ST_GeomFromText('LINESTRING(0 0, 1 1)')) AS good_line, ST_IsValid(ST_GeomFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) AS bad_poly", "execution_result": [[true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean value of geometric validity for LINESTRING(0 0, 1 1) (column name good_line) and POLYGON((0 0, 1 1, 1 2, 1 1, 0 0)) (column name bad_poly), returning the results in two columns.", "source": "original", "new_id": 1201}
{"id": 214, "function": "ST_IsValid", "question": "检查LINESTRING(0 0, 1 1)是否为有效线几何体并标记为good_line，同时检查POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))是否为有效面几何体并标记为bad_poly。", "sql": "SELECT ST_IsValid(ST_GeomFromText('LINESTRING(0 0, 1 1)')) AS good_line, ST_IsValid(ST_GeomFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) AS bad_poly", "execution_result": [[true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean value of geometric validity for LINESTRING(0 0, 1 1) (column name good_line) and POLYGON((0 0, 1 1, 1 2, 1 1, 0 0)) (column name bad_poly), returning the results in two columns.", "source": "original", "new_id": 1202}
{"id": 214, "function": "ST_IsValid", "question": "输出LINESTRING(0 0, 1 1)和POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))的几何有效性验证结果。", "sql": "SELECT ST_IsValid(ST_GeomFromText('LINESTRING(0 0, 1 1)')) AS good_line, ST_IsValid(ST_GeomFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) AS bad_poly", "execution_result": [[true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean value of geometric validity for LINESTRING(0 0, 1 1) (column name good_line) and POLYGON((0 0, 1 1, 1 2, 1 1, 0 0)) (column name bad_poly), returning the results in two columns.", "source": "original", "new_id": 1203}
{"id": 214, "function": "ST_IsValid", "question": "返回LINESTRING(0 0, 1 1)和POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))的有效性布尔值。", "sql": "SELECT ST_IsValid(ST_GeomFromText('LINESTRING(0 0, 1 1)')) AS good_line, ST_IsValid(ST_GeomFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) AS bad_poly", "execution_result": [[true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean value of geometric validity for LINESTRING(0 0, 1 1) (column name good_line) and POLYGON((0 0, 1 1, 1 2, 1 1, 0 0)) (column name bad_poly), returning the results in two columns.", "source": "original", "new_id": 1204}
{"id": 214, "function": "ST_IsValid", "question": "输出LINESTRING(0 0, 1 1)的几何有效性布尔值（列名good_line）和POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))的几何有效性布尔值（列名bad_poly），要求以两列形式返回结果。", "sql": "SELECT ST_IsValid(ST_GeomFromText('LINESTRING(0 0, 1 1)')) AS good_line, ST_IsValid(ST_GeomFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) AS bad_poly", "execution_result": [[true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean value of geometric validity for LINESTRING(0 0, 1 1) (column name good_line) and POLYGON((0 0, 1 1, 1 2, 1 1, 0 0)) (column name bad_poly), returning the results in two columns.", "source": "original", "new_id": 1205}
{"id": 215, "function": "ST_IsValidDetail", "question": "判断折线LINESTRING(220227 150406,2220227 150407,222020 150410)是否有效，并给出详细的信息。", "sql": "SELECT * \nFROM ST_IsValidDetail('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [[true, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the validity verification results of the LINESTRING(220227 150406,2220227 150407,222020 150410) geometry, including validity status, error location, and error description.", "source": "original", "new_id": 1206}
{"id": 215, "function": "ST_IsValidDetail", "question": "验证LINESTRING(220227 150406,2220227 150407,222020 150410)是否有效，如果无效，给出无效原因及位置。", "sql": "SELECT * \nFROM ST_IsValidDetail('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [[true, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the validity verification results of the LINESTRING(220227 150406,2220227 150407,222020 150410) geometry, including validity status, error location, and error description.", "source": "original", "new_id": 1207}
{"id": 215, "function": "ST_IsValidDetail", "question": "检查由三个顶点组成的LINESTRING(220227 150406,2220227 150407,222020 150410)折线是否有效，并返回详细验证结果，包括有效性状态、错误位置和错误描述。", "sql": "SELECT * \nFROM ST_IsValidDetail('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [[true, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the validity verification results of the LINESTRING(220227 150406,2220227 150407,222020 150410) geometry, including validity status, error location, and error description.", "source": "original", "new_id": 1208}
{"id": 215, "function": "ST_IsValidDetail", "question": "输出折线LINESTRING(220227 150406,2220227 150407,222020 150410)的有效性判断的结果。", "sql": "SELECT * \nFROM ST_IsValidDetail('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [[true, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the validity verification results of the LINESTRING(220227 150406,2220227 150407,222020 150410) geometry, including validity status, error location, and error description.", "source": "original", "new_id": 1209}
{"id": 215, "function": "ST_IsValidDetail", "question": "输出LINESTRING(220227 150406,2220227 150407,222020 150410)几何对象的有效性验证结果，包括有效性状态、无效位置及原因。", "sql": "SELECT * \nFROM ST_IsValidDetail('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [[true, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the validity verification results of the LINESTRING(220227 150406,2220227 150407,222020 150410) geometry, including validity status, error location, and error description.", "source": "original", "new_id": 1210}
{"id": 215, "function": "ST_IsValidDetail", "question": "输出LINESTRING(220227 150406,2220227 150407,222020 150410)几何对象的有效性验证结果，包括有效性状态、错误位置和错误描述。", "sql": "SELECT * \nFROM ST_IsValidDetail('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [[true, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the validity verification results of the LINESTRING(220227 150406,2220227 150407,222020 150410) geometry, including validity status, error location, and error description.", "source": "original", "new_id": 1211}
{"id": 216, "function": "ST_IsValidReason", "question": "检查由三个点构成的LINESTRING(220227 150406,2220227 150407,222020 150410)是否有效，并返回无效原因的具体说明。", "sql": "SELECT ST_IsValidReason('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [["Valid Geometry"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the LINESTRING geometry object formed by the three 2D points (220227 150406), (2220227 150407), (222020 150410) is valid, and return a string containing detailed diagnostic information.", "source": "original", "new_id": 1212}
{"id": 216, "function": "ST_IsValidReason", "question": "分析LINESTRING几何对象，其顶点坐标依次为(220227 150406)、(2220227 150407)、(222020 150410)，验证其拓扑有效性并返回详细错误报告。", "sql": "SELECT ST_IsValidReason('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [["Valid Geometry"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the LINESTRING geometry object formed by the three 2D points (220227 150406), (2220227 150407), (222020 150410) is valid, and return a string containing detailed diagnostic information.", "source": "original", "new_id": 1213}
{"id": 216, "function": "ST_IsValidReason", "question": "对折线LINESTRING(220227 150406,2220227 150407,222020 150410)执行有效性检查，其中存在异常的输出具体无效原因。", "sql": "SELECT ST_IsValidReason('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [["Valid Geometry"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the LINESTRING geometry object formed by the three 2D points (220227 150406), (2220227 150407), (222020 150410) is valid, and return a string containing detailed diagnostic information.", "source": "original", "new_id": 1214}
{"id": 216, "function": "ST_IsValidReason", "question": "输出LINESTRING(220227 150406,2220227 150407,222020 150410)几何对象的有效性检查结果，包括无效原因（若存在）。", "sql": "SELECT ST_IsValidReason('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [["Valid Geometry"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the LINESTRING geometry object formed by the three 2D points (220227 150406), (2220227 150407), (222020 150410) is valid, and return a string containing detailed diagnostic information.", "source": "original", "new_id": 1215}
{"id": 216, "function": "ST_IsValidReason", "question": "以文本形式返回LINESTRING(220227 150406,2220227 150407,222020 150410)的空间有效性检测结果，明确说明其是否有效或具体无效原因。", "sql": "SELECT ST_IsValidReason('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [["Valid Geometry"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the LINESTRING geometry object formed by the three 2D points (220227 150406), (2220227 150407), (222020 150410) is valid, and return a string containing detailed diagnostic information.", "source": "original", "new_id": 1216}
{"id": 216, "function": "ST_IsValidReason", "question": "检查由三个二维点(220227 150406)、(2220227 150407)、(222020 150410)构成的LINESTRING几何对象是否有效，并返回包含详细诊断信息的字符串。", "sql": "SELECT ST_IsValidReason('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [["Valid Geometry"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the LINESTRING geometry object formed by the three 2D points (220227 150406), (2220227 150407), (222020 150410) is valid, and return a string containing detailed diagnostic information.", "source": "original", "new_id": 1217}
{"id": 217, "function": "ST_IsValidReason", "question": "检查由坐标点(100 200)、(100 100)、(200 200)、(200 100)、(100 200)构成的多边形是否有效，并返回原因。", "sql": "SELECT ST_IsValidReason( 'POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))'::geometry) AS validity_info;", "execution_result": [["Self-intersection[150 150]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the validity verification result of the POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200)) geometry object, including specific descriptions of any invalidity reasons.", "source": "original", "new_id": 1218}
{"id": 217, "function": "ST_IsValidReason", "question": "验证多边形POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))的几何有效性，输出错误原因（若无效）。", "sql": "SELECT ST_IsValidReason( 'POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))'::geometry) AS validity_info;", "execution_result": [["Self-intersection[150 150]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the validity verification result of the POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200)) geometry object, including specific descriptions of any invalidity reasons.", "source": "original", "new_id": 1219}
{"id": 217, "function": "ST_IsValidReason", "question": "使用ST_IsValidReason函数检查由顶点坐标(100 200)、(100 100)、(200 200)、(200 100)、(100 200)组成的POLYGON几何对象的有效性，并将验证结果命名为validity_info。", "sql": "SELECT ST_IsValidReason( 'POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))'::geometry) AS validity_info;", "execution_result": [["Self-intersection[150 150]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the validity verification result of the POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200)) geometry object, including specific descriptions of any invalidity reasons.", "source": "original", "new_id": 1220}
{"id": 217, "function": "ST_IsValidReason", "question": "输出多边形POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))的有效性检查结果，格式为文本描述。", "sql": "SELECT ST_IsValidReason( 'POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))'::geometry) AS validity_info;", "execution_result": [["Self-intersection[150 150]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the validity verification result of the POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200)) geometry object, including specific descriptions of any invalidity reasons.", "source": "original", "new_id": 1221}
{"id": 217, "function": "ST_IsValidReason", "question": "以字符串形式返回POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))的几何有效性诊断信息。", "sql": "SELECT ST_IsValidReason( 'POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))'::geometry) AS validity_info;", "execution_result": [["Self-intersection[150 150]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the validity verification result of the POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200)) geometry object, including specific descriptions of any invalidity reasons.", "source": "original", "new_id": 1222}
{"id": 217, "function": "ST_IsValidReason", "question": "输出POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))几何对象的有效性验证结果，包括无效原因的具体描述。", "sql": "SELECT ST_IsValidReason( 'POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))'::geometry) AS validity_info;", "execution_result": [["Self-intersection[150 150]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the validity verification result of the POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200)) geometry object, including specific descriptions of any invalidity reasons.", "source": "original", "new_id": 1223}
{"id": 218, "function": "ST_MakeValid", "question": "修复LINESTRING(0 0, 0 0)这个线对象，使用structure方法且删除折叠更低维度的部分，输出WKT格式。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=false' ));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by structurally repairing the invalid linestring LINESTRING(0 0, 0 0) (without retaining the degenerate part).", "source": "original", "new_id": 1224}
{"id": 218, "function": "ST_MakeValid", "question": "修复LINESTRING(0 0, 0 0)这个无效线对象，采用structure方法但保留坍塌部分（keepcollapsed=true），输出WKT格式。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=true' ));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Fix the invalid line object LINESTRING(0 0, 0 0) using the structure method while keeping collapsed parts (keepcollapsed=true), and output in WKT format.", "source": "original", "new_id": 1225}
{"id": 218, "function": "ST_MakeValid", "question": "处理自相交线LINESTRING(0 0, 1 1, 0 0)，使用structure方法且不保留坍塌部分，返回文本表示。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 1 1, 0 0)', 'method=structure keepcollapsed=false' ));", "execution_result": [["LINESTRING(0 0,1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Process the self-intersecting line LINESTRING(0 0, 1 1, 0 0) using the structure method without retaining collapsed parts, and return the text representation.", "source": "original", "new_id": 1226}
{"id": 218, "function": "ST_MakeValid", "question": "输出修复后的LINESTRING(0 0, 0 0)的WKT字符串表示，修复时使用structure方法且不保留塌缩对象。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=false' ));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by structurally repairing the invalid linestring LINESTRING(0 0, 0 0) (without retaining the degenerate part).", "source": "original", "new_id": 1227}
{"id": 218, "function": "ST_MakeValid", "question": "输出将无效线段LINESTRING(0 0, 0 0)使用\"structure\"方法进行几何修复（设置keepcollapsed=false参数）后生成的WKT字符串。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=false' ));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by structurally repairing the invalid linestring LINESTRING(0 0, 0 0) (without retaining the degenerate part).", "source": "original", "new_id": 1228}
{"id": 218, "function": "ST_MakeValid", "question": "输出将无效线段LINESTRING(0 0, 0 0)通过结构化方法（不保留退化部分）修复后得到的WKT字符串。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=false' ));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by structurally repairing the invalid linestring LINESTRING(0 0, 0 0) (without retaining the degenerate part).", "source": "original", "new_id": 1229}
{"id": 219, "function": "ST_MakeValid", "question": "对由六个多边形组成的MULTIPOLYGON（MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))）执行ST_MakeValid操作，分别使用默认方法和structure方法，返回原始几何和两种修复结果。", "sql": "SELECT c.geom AS before_geom, ST_MakeValid(c.geom) AS after_geom, ST_MakeValid(c.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))'::geometry AS geom) AS c;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result with three columns: the first column displays the original invalid MULTIPOLYGON geometry (composed of six polygons with coordinates ((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150))), the second column shows the geometry repaired by the standard ST_MakeValid method, and the third column shows the geometry repaired using the 'structure' method.", "source": "original", "new_id": 1230}
{"id": 219, "function": "ST_MakeValid", "question": "处理精确坐标为MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))的多面体对象，返回其原始几何、常规修复结果和结构化修复结果。", "sql": "SELECT c.geom AS before_geom, ST_MakeValid(c.geom) AS after_geom, ST_MakeValid(c.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))'::geometry AS geom) AS c;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result with three columns: the first column displays the original invalid MULTIPOLYGON geometry (composed of six polygons with coordinates ((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150))), the second column shows the geometry repaired by the standard ST_MakeValid method, and the third column shows the geometry repaired using the 'structure' method.", "source": "original", "new_id": 1231}
{"id": 219, "function": "ST_MakeValid", "question": "对于由6个多边形组成的MULTIPOLYGON几何体（具体坐标分别为：第一个多边形((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50))，第二个多边形((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100))，第三个多边形((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150))，第四个多边形((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50))，第五个多边形((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100))，第六个多边形((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150))），分别使用ST_MakeValid函数进行两种有效性修复：第一种使用默认方法，第二种使用'structure'方法，并返回原始几何体、默认修复结果和structure方法修复结果三个字段。", "sql": "SELECT c.geom AS before_geom, ST_MakeValid(c.geom) AS after_geom, ST_MakeValid(c.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))'::geometry AS geom) AS c;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result with three columns: the first column displays the original invalid MULTIPOLYGON geometry (composed of six polygons with coordinates ((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150))), the second column shows the geometry repaired by the standard ST_MakeValid method, and the third column shows the geometry repaired using the 'structure' method.", "source": "original", "new_id": 1232}
{"id": 219, "function": "ST_MakeValid", "question": "输出MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))、默认修复后的几何对象和结构化修复（method=structure）后的几何对象三列结果。", "sql": "SELECT c.geom AS before_geom, ST_MakeValid(c.geom) AS after_geom, ST_MakeValid(c.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))'::geometry AS geom) AS c;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result with three columns: the first column displays the original invalid MULTIPOLYGON geometry (composed of six polygons with coordinates ((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150))), the second column shows the geometry repaired by the standard ST_MakeValid method, and the third column shows the geometry repaired using the 'structure' method.", "source": "original", "new_id": 1233}
{"id": 219, "function": "ST_MakeValid", "question": "返回三列几何数据：原始MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))、经过ST_MakeValid修复的几何、以及使用structure方法修复的几何。", "sql": "SELECT c.geom AS before_geom, ST_MakeValid(c.geom) AS after_geom, ST_MakeValid(c.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))'::geometry AS geom) AS c;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result with three columns: the first column displays the original invalid MULTIPOLYGON geometry (composed of six polygons with coordinates ((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150))), the second column shows the geometry repaired by the standard ST_MakeValid method, and the third column shows the geometry repaired using the 'structure' method.", "source": "original", "new_id": 1234}
{"id": 219, "function": "ST_MakeValid", "question": "输出包含三列的结果：第一列显示原始无效的MULTIPOLYGON几何体（由六个多边形组成，坐标分别为((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50))、((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100))、((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150))、((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50))、((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100))、((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150))），第二列显示经过ST_MakeValid标准方法修复后的几何体，第三列显示使用'structure'方法修复后的几何体。", "sql": "SELECT c.geom AS before_geom, ST_MakeValid(c.geom) AS after_geom, ST_MakeValid(c.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))'::geometry AS geom) AS c;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result with three columns: the first column displays the original invalid MULTIPOLYGON geometry (composed of six polygons with coordinates ((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150))), the second column shows the geometry repaired by the standard ST_MakeValid method, and the third column shows the geometry repaired using the 'structure' method.", "source": "original", "new_id": 1235}
{"id": 220, "function": "ST_MakeValid", "question": "对LINESTRING(0 0, 0 0)使用structure方法进行有效化操作（保留退化情况），输出WKT格式结果。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=true' ));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by repairing the invalid linestring LINESTRING(0 0, 0 0) using the structured method (method=structure) while retaining collapsed geometries (keepcollapsed=true).", "source": "original", "new_id": 1236}
{"id": 220, "function": "ST_MakeValid", "question": "将起点和终点重合的LINESTRING(0 0, 0 0)通过structure方法验证几何有效性（保留退化线），返回文本表示。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=true' ));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by repairing the invalid linestring LINESTRING(0 0, 0 0) using the structured method (method=structure) while retaining collapsed geometries (keepcollapsed=true).", "source": "original", "new_id": 1237}
{"id": 220, "function": "ST_MakeValid", "question": "对无效几何对象LINESTRING(0 0, 0 0)执行有效性修复，使用structure方法并保留退化部分，将修复后的几何对象以WKT格式输出。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=true' ));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by repairing the invalid linestring LINESTRING(0 0, 0 0) using the structured method (method=structure) while retaining collapsed geometries (keepcollapsed=true).", "source": "original", "new_id": 1238}
{"id": 220, "function": "ST_MakeValid", "question": "输出LINESTRING(0 0, 0 0)经过structure方法有效性校正后（保留退化线）的WKT字符串结果。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=true' ));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by repairing the invalid linestring LINESTRING(0 0, 0 0) using the structured method (method=structure) while retaining collapsed geometries (keepcollapsed=true).", "source": "original", "new_id": 1239}
{"id": 220, "function": "ST_MakeValid", "question": "获取LINESTRING(0 0, 0 0)在method=structure keepcollapsed=true参数下有效性校正后的文本格式输出。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=true' ));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by repairing the invalid linestring LINESTRING(0 0, 0 0) using the structured method (method=structure) while retaining collapsed geometries (keepcollapsed=true).", "source": "original", "new_id": 1240}
{"id": 220, "function": "ST_MakeValid", "question": "输出将无效线段LINESTRING(0 0, 0 0)通过结构化方法(method=structure)并保留退化几何(keepcollapsed=true)进行修复后得到的WKT字符串。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=true' ));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string obtained by repairing the invalid linestring LINESTRING(0 0, 0 0) using the structured method (method=structure) while retaining collapsed geometries (keepcollapsed=true).", "source": "original", "new_id": 1241}
{"id": 221, "function": "ST_MakeValid", "question": "对由两个多边形组成的多面体（第一个多边形顶点为((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194))，第二个多边形顶点为((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90))进行有效性修复，返回原始几何、默认修复结果和结构化修复结果。", "sql": "SELECT f.geom AS before_geom, ST_MakeValid(f.geom) AS after_geom, ST_MakeValid(f.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))'::geometry AS geom) AS f;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result with three columns: the first column `before_geom` displays the original invalid MULTIPOLYGON geometry (composed of two polygons: the first polygon's vertex sequence is ((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)), and the second polygon's vertex sequence is ((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90))); the second column `after_geom` shows the geometry repaired by the standard method; the third column `after_geom_structure` shows the geometry repaired using the 'structure' method.", "source": "original", "new_id": 1242}
{"id": 221, "function": "ST_MakeValid", "question": "修复包含两个多边形MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))的无效多面体几何，返回三种几何形式：原始几何、默认修复结果和结构化方法修复结果。", "sql": "SELECT f.geom AS before_geom, ST_MakeValid(f.geom) AS after_geom, ST_MakeValid(f.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))'::geometry AS geom) AS f;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result with three columns: the first column `before_geom` displays the original invalid MULTIPOLYGON geometry (composed of two polygons: the first polygon's vertex sequence is ((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)), and the second polygon's vertex sequence is ((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90))); the second column `after_geom` shows the geometry repaired by the standard method; the third column `after_geom_structure` shows the geometry repaired using the 'structure' method.", "source": "original", "new_id": 1243}
{"id": 221, "function": "ST_MakeValid", "question": "对于由两个多边形组成的MULTIPOLYGON几何体（第一个多边形顶点序列为((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194))，第二个多边形顶点序列为,((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90))，分别使用默认方法和'method=structure'参数调用ST_MakeValid函数进行几何修复，并返回原始几何体、默认修复结果和结构化修复结果三个字段。", "sql": "SELECT f.geom AS before_geom, ST_MakeValid(f.geom) AS after_geom, ST_MakeValid(f.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))'::geometry AS geom) AS f;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result with three columns: the first column `before_geom` displays the original invalid MULTIPOLYGON geometry (composed of two polygons: the first polygon's vertex sequence is ((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)), and the second polygon's vertex sequence is ((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90))); the second column `after_geom` shows the geometry repaired by the standard method; the third column `after_geom_structure` shows the geometry repaired using the 'structure' method.", "source": "original", "new_id": 1244}
{"id": 221, "function": "ST_MakeValid", "question": "将原始多面体几何MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))及其两种有效性修复结果（默认修复方法和structure方法）以WKT（Well-Known Text）文本格式输出。", "sql": "SELECT ST_AsText(f.geom) AS before_wkt, ST_AsText(ST_MakeValid(f.geom)) AS after_wkt, ST_AsText(ST_MakeValid(f.geom, 'method=structure')) AS after_wkt_structure FROM (SELECT 'MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))'::geometry AS geom) AS f;", "execution_result": [["MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))", "MULTIPOLYGON(((11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,56.76923076923077 64.76923076923077,58 62,64 56,14 6,13 6,12 5,11 5)),((54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,125.23076923076923 133.23076923076923,56.76923076923077 64.76923076923077,54 71)),((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,134 126,128 132,125.23076923076923 133.23076923076923,186 194)),((135 125,142 118,146 109,149 100,150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,64 56,134 126,135 125)))", "MULTIPOLYGON(((149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,64 56,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,56.76923076923077 64.76923076923077,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,125.23076923076923 133.23076923076923,186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,134 126,135 125,142 118,146 109,149 100,150 90,149 80)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the original multipolygon geometry MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90))) and its two validity repair results (default method and structure method) in WKT (Well-Known Text) format.", "source": "original", "new_id": 1245}
{"id": 221, "function": "ST_MakeValid", "question": "输出包含SRID信息的扩展WKT格式，显示原始多面体MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))及其两种有效性修复方法的几何数据。", "sql": "SELECT ST_AsEWKT(f.geom) AS before_ewkt, ST_AsEWKT(ST_MakeValid(f.geom)) AS after_ewkt, ST_AsEWKT(ST_MakeValid(f.geom, 'method=structure')) AS after_ewkt_structure FROM (SELECT 'MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))'::geometry AS geom) AS f;", "execution_result": [["MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))", "MULTIPOLYGON(((11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,56.76923076923077 64.76923076923077,58 62,64 56,14 6,13 6,12 5,11 5)),((54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,125.23076923076923 133.23076923076923,56.76923076923077 64.76923076923077,54 71)),((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,134 126,128 132,125.23076923076923 133.23076923076923,186 194)),((135 125,142 118,146 109,149 100,150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,64 56,134 126,135 125)))", "MULTIPOLYGON(((149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,64 56,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,56.76923076923077 64.76923076923077,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,125.23076923076923 133.23076923076923,186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,134 126,135 125,142 118,146 109,149 100,150 90,149 80)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the extended WKT format with SRID information, displaying the original multipolygon MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90))) and its geometry data after two validity repair methods.", "source": "original", "new_id": 1246}
{"id": 221, "function": "ST_MakeValid", "question": "输出包含三列的结果：第一列before_geom显示原始无效的MULTIPOLYGON几何体（由两个多边形组成：第一个多边形顶点序列为((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194))，第二个多边形顶点序列为((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90))；第二列after_geom显示标准方法修复后的几何体；第三列after_geom_structure显示使用'structure'方法修复后的几何体。", "sql": "SELECT f.geom AS before_geom, ST_MakeValid(f.geom) AS after_geom, ST_MakeValid(f.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))'::geometry AS geom) AS f;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a result with three columns: the first column `before_geom` displays the original invalid MULTIPOLYGON geometry (composed of two polygons: the first polygon's vertex sequence is ((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)), and the second polygon's vertex sequence is ((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90))); the second column `after_geom` shows the geometry repaired by the standard method; the third column `after_geom_structure` shows the geometry repaired using the 'structure' method.", "source": "original", "new_id": 1247}
{"id": 222, "function": "ST_InverseTransformPipeline", "question": "将SRID为4939的点POINT(143.0 -37.0)转换到SRID 7844坐标系，输出WKT格式结果。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(143.0 -37.0) with SRID 4939 to SRID 7844 coordinate system and output its WKT format string representation.", "source": "original", "new_id": 1248}
{"id": 222, "function": "ST_InverseTransformPipeline", "question": "精确转换坐标为(143.0,-37.0)且SRID=4939的点到SRID 7844坐标系，返回文本表示。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(143.0 -37.0) with SRID 4939 to SRID 7844 coordinate system and output its WKT format string representation.", "source": "original", "new_id": 1249}
{"id": 222, "function": "ST_InverseTransformPipeline", "question": "将SRID为4939的二维点POINT(143.0 -37.0)转换到SRID为7844的坐标系中，并以WKT格式输出结果，结果列命名为gda2020_auto。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(143.0 -37.0) with SRID 4939 to SRID 7844 coordinate system and output its WKT format string representation.", "source": "original", "new_id": 1250}
{"id": 222, "function": "ST_InverseTransformPipeline", "question": "输出SRID 4939的点POINT(143.0 -37.0)转换到SRID 7844后的WKT字符串结果。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(143.0 -37.0) with SRID 4939 to SRID 7844 coordinate system and output its WKT format string representation.", "source": "original", "new_id": 1251}
{"id": 222, "function": "ST_InverseTransformPipeline", "question": "将SRID为4939的二维点POINT(143.0 -37.0)转换为SRID 7844坐标系后，输出其WKT字符串表示形式。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(143.0 -37.0) with SRID 4939 to SRID 7844 coordinate system and output its WKT format string representation.", "source": "original", "new_id": 1252}
{"id": 222, "function": "ST_InverseTransformPipeline", "question": "将SRID为4939的二维点POINT(143.0 -37.0)转换为SRID 7844坐标系后，输出其WKT格式的字符串表示。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(143.0 -37.0) with SRID 4939 to SRID 7844 coordinate system and output its WKT format string representation.", "source": "original", "new_id": 1253}
{"id": 224, "function": "ST_SetSRID", "question": "创建经度-123.365556、纬度48.428611的二维点，并设置其SRID为4326（WGS84坐标系）。", "sql": "SELECT ST_SetSRID(ST_Point(-123.365556, 48.428611),4326) AS wgs84long_lat;", "execution_result": [["0101000020E6100000D236FE4465D75EC059DAA9B9DC364840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a two-dimensional point with longitude -123.365556 and latitude 48.428611, setting its spatial reference system identifier to 4326 (WGS84 coordinate system), and name the result column wgs84long_lat.", "source": "original", "new_id": 1254}
{"id": 224, "function": "ST_SetSRID", "question": "用坐标(-123.365556,48.428611)创建点对象，并指定为EPSG:4326坐标系。", "sql": "SELECT ST_SetSRID(ST_Point(-123.365556, 48.428611),4326) AS wgs84long_lat;", "execution_result": [["0101000020E6100000D236FE4465D75EC059DAA9B9DC364840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a two-dimensional point with longitude -123.365556 and latitude 48.428611, setting its spatial reference system identifier to 4326 (WGS84 coordinate system), and name the result column wgs84long_lat.", "source": "original", "new_id": 1255}
{"id": 224, "function": "ST_SetSRID", "question": "创建一个二维点POINT(-123.365556 48.428611)，并使用ST_SetSRID函数将其空间参考系统设置为EPSG:4326(WGS84坐标系)，将结果列命名为wgs84long_lat。", "sql": "SELECT ST_SetSRID(ST_Point(-123.365556, 48.428611),4326) AS wgs84long_lat;", "execution_result": [["0101000020E6100000D236FE4465D75EC059DAA9B9DC364840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a two-dimensional point with longitude -123.365556 and latitude 48.428611, setting its spatial reference system identifier to 4326 (WGS84 coordinate system), and name the result column wgs84long_lat.", "source": "original", "new_id": 1256}
{"id": 224, "function": "ST_SetSRID", "question": "将一个几何点对象(-123.365556,48.428611)的坐标系统设置为4326，别名为wgs84long_lat。", "sql": "SELECT ST_SetSRID(ST_Point(-123.365556, 48.428611),4326) AS wgs84long_lat;", "execution_result": [["0101000020E6100000D236FE4465D75EC059DAA9B9DC364840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a two-dimensional point with longitude -123.365556 and latitude 48.428611, setting its spatial reference system identifier to 4326 (WGS84 coordinate system), and name the result column wgs84long_lat.", "source": "original", "new_id": 1257}
{"id": 224, "function": "ST_SetSRID", "question": "为经度-123.365556、纬度48.428611的地理坐标点设置坐标系统为4326，结果列命名为wgs84long_lat。", "sql": "SELECT ST_SetSRID(ST_Point(-123.365556, 48.428611),4326) AS wgs84long_lat;", "execution_result": [["0101000020E6100000D236FE4465D75EC059DAA9B9DC364840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a two-dimensional point with longitude -123.365556 and latitude 48.428611, setting its spatial reference system identifier to 4326 (WGS84 coordinate system), and name the result column wgs84long_lat.", "source": "original", "new_id": 1258}
{"id": 224, "function": "ST_SetSRID", "question": "输出一个经度为-123.365556、纬度为48.428611的二维点，并将其空间参考系统标识符设置为4326（WGS84坐标系），结果列命名为wgs84long_lat。", "sql": "SELECT ST_SetSRID(ST_Point(-123.365556, 48.428611),4326) AS wgs84long_lat;", "execution_result": [["0101000020E6100000D236FE4465D75EC059DAA9B9DC364840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a two-dimensional point with longitude -123.365556 and latitude 48.428611, setting its spatial reference system identifier to 4326 (WGS84 coordinate system), and name the result column wgs84long_lat.", "source": "original", "new_id": 1259}
{"id": 225, "function": "ST_SetSRID", "question": "将坐标为(-123.365556, 48.428611)的点先定义为WGS84坐标系(SRID=4326)，再转换为伪墨卡托投影(SRID=3785)。", "sql": "SELECT ST_Transform(ST_SetSRID(ST_Point(-123.365556, 48.428611),4326),3785) AS spere_merc;", "execution_result": [["0101000020C90E000010DC02DC8F316AC16657B6BDA6915741"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the WGS84 coordinate point POINT(-123.365556 48.428611) (SRID=4326) to the Web Mercator projection coordinate system (SRID=3785) and output the transformed geometry object.", "source": "original", "new_id": 1260}
{"id": 225, "function": "ST_SetSRID", "question": "对经度-123.365556纬度48.428611的点进行从EPSG:4326到EPSG:3785的坐标转换。", "sql": "SELECT ST_Transform(ST_SetSRID(ST_Point(-123.365556, 48.428611),4326),3785) AS spere_merc;", "execution_result": [["0101000020C90E000010DC02DC8F316AC16657B6BDA6915741"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the WGS84 coordinate point POINT(-123.365556 48.428611) (SRID=4326) to the Web Mercator projection coordinate system (SRID=3785) and output the transformed geometry object.", "source": "original", "new_id": 1261}
{"id": 225, "function": "ST_SetSRID", "question": "将坐标为POINT(-123.365556 48.428611)的二维点先设置SRID为4326，再转换为SRID 3785的投影坐标系，并将结果列命名为spere_merc。", "sql": "SELECT ST_Transform(ST_SetSRID(ST_Point(-123.365556, 48.428611),4326),3785) AS spere_merc;", "execution_result": [["0101000020C90E000010DC02DC8F316AC16657B6BDA6915741"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the WGS84 coordinate point POINT(-123.365556 48.428611) (SRID=4326) to the Web Mercator projection coordinate system (SRID=3785) and output the transformed geometry object.", "source": "original", "new_id": 1262}
{"id": 225, "function": "ST_SetSRID", "question": "输出将点(-123.365556,48.428611)从EPSG:4326转换到EPSG:3785后的几何对象。", "sql": "SELECT ST_Transform(ST_SetSRID(ST_Point(-123.365556, 48.428611),4326),3785) AS spere_merc;", "execution_result": [["0101000020C90E000010DC02DC8F316AC16657B6BDA6915741"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the WGS84 coordinate point POINT(-123.365556 48.428611) (SRID=4326) to the Web Mercator projection coordinate system (SRID=3785) and output the transformed geometry object.", "source": "original", "new_id": 1263}
{"id": 225, "function": "ST_SetSRID", "question": "返回经度-123.365556纬度48.428611的点从EPSG:4326转换到伪墨卡托投影坐标系中的表示。", "sql": "SELECT ST_Transform(ST_SetSRID(ST_Point(-123.365556, 48.428611),4326),3785) AS spere_merc;", "execution_result": [["0101000020C90E000010DC02DC8F316AC16657B6BDA6915741"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the WGS84 coordinate point POINT(-123.365556 48.428611) (SRID=4326) to the Web Mercator projection coordinate system (SRID=3785) and output the transformed geometry object.", "source": "original", "new_id": 1264}
{"id": 225, "function": "ST_SetSRID", "question": "将坐标为POINT(-123.365556 48.428611)的WGS84坐标系(SRID=4326)点转换为球面墨卡托投影坐标系(SRID=3785)，并输出转换后的几何对象。", "sql": "SELECT ST_Transform(ST_SetSRID(ST_Point(-123.365556, 48.428611),4326),3785) AS spere_merc;", "execution_result": [["0101000020C90E000010DC02DC8F316AC16657B6BDA6915741"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the WGS84 coordinate point POINT(-123.365556 48.428611) (SRID=4326) to the Web Mercator projection coordinate system (SRID=3785) and output the transformed geometry object.", "source": "original", "new_id": 1265}
{"id": 226, "function": "ST_SRID", "question": "查询从WKT格式'POINT(-71.1043 42.315)'创建且SRID为4326的几何对象的空间参考标识符。", "sql": "SELECT ST_SRID(ST_GeomFromText('POINT(-71.1043 42.315)',4326));", "execution_result": [[4326]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial reference system identifier value for the 2D point POINT(-71.1043 42.315) defined in the WGS84 coordinate system (SRID=4326).", "source": "original", "new_id": 1266}
{"id": 226, "function": "ST_SRID", "question": "获取POINT(-71.1043 42.315)在EPSG:4326坐标系下的SRID值。", "sql": "SELECT ST_SRID(ST_GeomFromText('POINT(-71.1043 42.315)',4326));", "execution_result": [[4326]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial reference system identifier value for the 2D point POINT(-71.1043 42.315) defined in the WGS84 coordinate system (SRID=4326).", "source": "original", "new_id": 1267}
{"id": 226, "function": "ST_SRID", "question": "查询由WKT格式'POINT(-71.1043 42.315)'创建的二维点几何对象在SRID为4326的空间参考系统中的空间参考标识符。", "sql": "SELECT ST_SRID(ST_GeomFromText('POINT(-71.1043 42.315)',4326));", "execution_result": [[4326]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial reference system identifier value for the 2D point POINT(-71.1043 42.315) defined in the WGS84 coordinate system (SRID=4326).", "source": "original", "new_id": 1268}
{"id": 226, "function": "ST_SRID", "question": "输出POINT(-71.1043 42.315)几何对象在4326坐标系中的SRID整数值。", "sql": "SELECT ST_SRID(ST_GeomFromText('POINT(-71.1043 42.315)',4326));", "execution_result": [[4326]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial reference system identifier value for the 2D point POINT(-71.1043 42.315) defined in the WGS84 coordinate system (SRID=4326).", "source": "original", "new_id": 1269}
{"id": 226, "function": "ST_SRID", "question": "返回以EPSG:4326坐标系定义的POINT(-71.1043 42.315)的空间参考系统标识符数值。", "sql": "SELECT ST_SRID(ST_GeomFromText('POINT(-71.1043 42.315)',4326));", "execution_result": [[4326]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial reference system identifier value for the 2D point POINT(-71.1043 42.315) defined in the WGS84 coordinate system (SRID=4326).", "source": "original", "new_id": 1270}
{"id": 226, "function": "ST_SRID", "question": "输出以WGS84坐标系（SRID=4326）定义的二维点POINT(-71.1043 42.315)的空间参考系统标识符数值。", "sql": "SELECT ST_SRID(ST_GeomFromText('POINT(-71.1043 42.315)',4326));", "execution_result": [[4326]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial reference system identifier value for the 2D point POINT(-71.1043 42.315) defined in the WGS84 coordinate system (SRID=4326).", "source": "original", "new_id": 1271}
{"id": 227, "function": "ST_Transform", "question": "将POLYGON((170 50,170 72,-130 72,-130 50,170 50))和POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))这两个WGS84多边形，使用'+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'投影求交后，转换回4326坐标系输出WKT。", "sql": "WITH data AS ( SELECT ST_GeomFromText('POLYGON((170 50,170 72,-130 72,-130 50,170 50))', 4326) AS p1, ST_GeomFromText('POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))', 4326) AS p2, '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'::text AS gnom ) SELECT ST_AsText( ST_Transform( ST_Intersection(ST_Transform(p1, gnom), ST_Transform(p2, gnom)), gnom, 4326)) FROM data;", "execution_result": [["POLYGON((-141.00000000000003 73.42686213789042,-141 68.00000000000001,-170 68,-170 74.05379364533805,-141.00000000000003 73.42686213789042))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the intersection area between the two polygons POLYGON((170 50,170 72,-130 72,-130 50,170 50)) and POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68)) under the gnomonic projection, with the coordinate system EPSG:4326.", "source": "original", "new_id": 1272}
{"id": 227, "function": "ST_Transform", "question": "计算POLYGON((170 50,170 72,-130 72,-130 50,170 50))与POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))在gnom投影（中心点70°N 160°W）下的交集，返回WGS84坐标系的WKT结果。", "sql": "WITH data AS ( SELECT ST_GeomFromText('POLYGON((170 50,170 72,-130 72,-130 50,170 50))', 4326) AS p1, ST_GeomFromText('POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))', 4326) AS p2, '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'::text AS gnom ) SELECT ST_AsText( ST_Transform( ST_Intersection(ST_Transform(p1, gnom), ST_Transform(p2, gnom)), gnom, 4326)) FROM data;", "execution_result": [["POLYGON((-141.00000000000003 73.42686213789042,-141 68.00000000000001,-170 68,-170 74.05379364533805,-141.00000000000003 73.42686213789042))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the intersection area between the two polygons POLYGON((170 50,170 72,-130 72,-130 50,170 50)) and POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68)) under the gnomonic projection, with the coordinate system EPSG:4326.", "source": "original", "new_id": 1273}
{"id": 227, "function": "ST_Transform", "question": "给定两个多边形p1和p2，其中p1的顶点坐标为(170 50,170 72,-130 72,-130 50,170 50)，p2的顶点坐标为(-170 68,-170 90,-141 90,-141 68,-170 68)，以及一个gnom投影参数'+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'，首先将p1和p2分别转换为gnom投影坐标系，然后计算它们的交集，再将结果转换回EPSG:4326坐标系，最后以WKT格式输出转换后的几何对象。", "sql": "WITH data AS ( SELECT ST_GeomFromText('POLYGON((170 50,170 72,-130 72,-130 50,170 50))', 4326) AS p1, ST_GeomFromText('POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))', 4326) AS p2, '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'::text AS gnom ) \nSELECT ST_AsText( ST_Transform( ST_Intersection(ST_Transform(p1, gnom), ST_Transform(p2, gnom)), gnom, 4326)) FROM data;", "execution_result": [["POLYGON((-141.00000000000003 73.42686213789042,-141 68.00000000000001,-170 68,-170 74.05379364533805,-141.00000000000003 73.42686213789042))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation obtained by first converting the two WGS84 polygons POLYGON((170 50,170 72,-130 72,-130 50,170 50)) and POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68)) to the gnomonic projection coordinate system defined by '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs', calculating their intersection geometry, and then converting back to the WGS84 coordinate system.", "source": "original", "new_id": 1274}
{"id": 227, "function": "ST_Transform", "question": "输出两个多边形POLYGON((170 50,170 72,-130 72,-130 50,170 50))和POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))在gnom投影下相交区域的WKT字符串，坐标系为EPSG:4326。", "sql": "WITH data AS ( SELECT ST_GeomFromText('POLYGON((170 50,170 72,-130 72,-130 50,170 50))', 4326) AS p1, ST_GeomFromText('POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))', 4326) AS p2, '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'::text AS gnom ) SELECT ST_AsText( ST_Transform( ST_Intersection(ST_Transform(p1, gnom), ST_Transform(p2, gnom)), gnom, 4326)) FROM data;", "execution_result": [["POLYGON((-141.00000000000003 73.42686213789042,-141 68.00000000000001,-170 68,-170 74.05379364533805,-141.00000000000003 73.42686213789042))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of the intersection area between the two polygons POLYGON((170 50,170 72,-130 72,-130 50,170 50)) and POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68)) under the gnomonic projection, with the coordinate system EPSG:4326.", "source": "original", "new_id": 1275}
{"id": 227, "function": "ST_Transform", "question": "输出将POLYGON((170 50,170 72,-130 72,-130 50,170 50))和POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))先转换为gnom投影坐标系（参数为'+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'）求交集后，再转换回WGS84坐标系（EPSG:4326）的WKT字符串结果。", "sql": "WITH data AS ( SELECT ST_GeomFromText('POLYGON((170 50,170 72,-130 72,-130 50,170 50))', 4326) AS p1, ST_GeomFromText('POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))', 4326) AS p2, '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'::text AS gnom ) \nSELECT ST_AsText( ST_Transform( ST_Intersection(ST_Transform(p1, gnom), ST_Transform(p2, gnom)), gnom, 4326)) FROM data;", "execution_result": [["POLYGON((-141.00000000000003 73.42686213789042,-141 68.00000000000001,-170 68,-170 74.05379364533805,-141.00000000000003 73.42686213789042))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation obtained by first converting the two WGS84 polygons POLYGON((170 50,170 72,-130 72,-130 50,170 50)) and POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68)) to the gnomonic projection coordinate system defined by '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs', calculating their intersection geometry, and then converting back to the WGS84 coordinate system.", "source": "original", "new_id": 1276}
{"id": 227, "function": "ST_Transform", "question": "输出将POLYGON((170 50,170 72,-130 72,-130 50,170 50))和POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))这两个WGS84坐标系下的多边形，先转换为以'+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'定义的球心投影坐标系，求取它们的交集几何体，再转换回WGS84坐标系后得到的WKT字符串表示。", "sql": "WITH data AS ( SELECT ST_GeomFromText('POLYGON((170 50,170 72,-130 72,-130 50,170 50))', 4326) AS p1, ST_GeomFromText('POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))', 4326) AS p2, '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'::text AS gnom ) \nSELECT ST_AsText( ST_Transform( ST_Intersection(ST_Transform(p1, gnom), ST_Transform(p2, gnom)), gnom, 4326)) FROM data;", "execution_result": [["POLYGON((-141.00000000000003 73.42686213789042,-141 68.00000000000001,-170 68,-170 74.05379364533805,-141.00000000000003 73.42686213789042))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation obtained by first converting the two WGS84 polygons POLYGON((170 50,170 72,-130 72,-130 50,170 50)) and POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68)) to the gnomonic projection coordinate system defined by '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs', calculating their intersection geometry, and then converting back to the WGS84 coordinate system.", "source": "original", "new_id": 1277}
{"id": 228, "function": "ST_Transform", "question": "将SRID为4267的空间参考系统的proj4text参数更新为'+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs'。", "sql": "UPDATE spatial_ref_sys SET proj4text = '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs' WHERE srid = 4267;", "execution_result": "NO RETURN", "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "The update operation will modify the projection definition parameters for the specified SRID in the spatial_ref_sys table to '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs'.", "source": "original", "new_id": 1278}
{"id": 228, "function": "ST_Transform", "question": "在spatial_ref_sys表中，将SRID等于4267的记录proj4text字段值设置为'+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs'。", "sql": "UPDATE spatial_ref_sys SET proj4text = '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs' WHERE srid = 4267;", "execution_result": "NO RETURN", "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "The update operation will modify the projection definition parameters for the specified SRID in the spatial_ref_sys table to '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs'.", "source": "original", "new_id": 1279}
{"id": 228, "function": "ST_Transform", "question": "在spatial_ref_sys表中，将SRID为4267的坐标系的proj4text参数更新为'+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs'，其中投影类型为longlat（经纬度），椭球体为clrk66，并使用@conus、@alaska、@ntv2_0.gsb、@ntv1_can.dat四个网格文件和NULL作为NAD网格转换参数，同时设置no_defs标志。", "sql": "UPDATE spatial_ref_sys \nSET proj4text = '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs' \nWHERE srid = 4267;", "execution_result": "NO RETURN", "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Update the projection definition of the spatial reference system with SRID 4267 to '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs' and output the updated full record.", "source": "original", "new_id": 1280}
{"id": 228, "function": "ST_Transform", "question": "执行更新操作，使SRID为4267的空间参考系统使用新的PROJ.4参数定义为'+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs'。", "sql": "UPDATE spatial_ref_sys SET proj4text = '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs' WHERE srid = 4267;", "execution_result": "NO RETURN", "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "The update operation will modify the projection definition parameters for the specified SRID in the spatial_ref_sys table to '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs'.", "source": "original", "new_id": 1281}
{"id": 228, "function": "ST_Transform", "question": "更新操作将修改spatial_ref_sys表中指定SRID的投影定义参数为'+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs'。", "sql": "UPDATE spatial_ref_sys SET proj4text = '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs' WHERE srid = 4267;", "execution_result": "NO RETURN", "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "The update operation will modify the projection definition parameters for the specified SRID in the spatial_ref_sys table to '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs'.", "source": "original", "new_id": 1282}
{"id": 228, "function": "ST_Transform", "question": "将SRID为4267的空间参考系统的投影定义更新为'+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs'，并输出更新后的完整记录。", "sql": "UPDATE spatial_ref_sys \nSET proj4text = '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs' \nWHERE srid = 4267;", "execution_result": "NO RETURN", "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Update the projection definition of the spatial reference system with SRID 4267 to '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs' and output the updated full record.", "source": "original", "new_id": 1283}
{"id": 229, "function": "ST_Transform", "question": "将SRID为2249的多边形POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))转换为WGS84坐标系(4326)，并输出WKT格式。", "sql": "SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) AS wgs_geom;", "execution_result": [["POLYGON((-71.1776848522251 42.39028965129032,-71.17768437663261 42.390382947801015,-71.17758443054647 42.390382667791854,-71.17758259272304 42.390289364798825,-71.1776848522251 42.39028965129032))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the polygon POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) from the NAD83/Virginia South coordinate system (SRID 2249) to WGS84 (SRID 4326) and output the transformed WKT string representation.", "source": "original", "new_id": 1284}
{"id": 229, "function": "ST_Transform", "question": "转换坐标为（743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416）的多边形从NAD83坐标系(2249)到WGS84坐标系(4326)。", "sql": "SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) AS wgs_geom;", "execution_result": [["POLYGON((-71.1776848522251 42.39028965129032,-71.17768437663261 42.390382947801015,-71.17758443054647 42.390382667791854,-71.17758259272304 42.390289364798825,-71.1776848522251 42.39028965129032))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the polygon POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) from the NAD83/Virginia South coordinate system (SRID 2249) to WGS84 (SRID 4326) and output the transformed WKT string representation.", "source": "original", "new_id": 1285}
{"id": 229, "function": "ST_Transform", "question": "将SRID为2249的POLYGON几何体（顶点坐标依次为(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)、(743238 2967416)）转换为WGS84坐标系（SRID:4326），并以WKT格式输出结果几何体。", "sql": "SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) AS wgs_geom;", "execution_result": [["POLYGON((-71.1776848522251 42.39028965129032,-71.17768437663261 42.390382947801015,-71.17758443054647 42.390382667791854,-71.17758259272304 42.390289364798825,-71.1776848522251 42.39028965129032))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the polygon POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) from the NAD83/Virginia South coordinate system (SRID 2249) to WGS84 (SRID 4326) and output the transformed WKT string representation.", "source": "original", "new_id": 1286}
{"id": 229, "function": "ST_Transform", "question": "输出将POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))从2249坐标系转换到4326坐标系后的WKT格式字符串。", "sql": "SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) AS wgs_geom;", "execution_result": [["POLYGON((-71.1776848522251 42.39028965129032,-71.17768437663261 42.390382947801015,-71.17758443054647 42.390382667791854,-71.17758259272304 42.390289364798825,-71.1776848522251 42.39028965129032))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the polygon POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) from the NAD83/Virginia South coordinate system (SRID 2249) to WGS84 (SRID 4326) and output the transformed WKT string representation.", "source": "original", "new_id": 1287}
{"id": 229, "function": "ST_Transform", "question": "将NAD83 Virginia North坐标系（SRID 2249）下的多边形POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))转换为WGS84坐标系（SRID 4326），并输出转换后的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) AS wgs_geom;", "execution_result": [["POLYGON((-71.1776848522251 42.39028965129032,-71.17768437663261 42.390382947801015,-71.17758443054647 42.390382667791854,-71.17758259272304 42.390289364798825,-71.1776848522251 42.39028965129032))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the polygon POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) from the NAD83/Virginia South coordinate system (SRID 2249) to WGS84 (SRID 4326) and output the transformed WKT string representation.", "source": "original", "new_id": 1288}
{"id": 229, "function": "ST_Transform", "question": "将NAD83/Virginia South坐标系（SRID 2249）下的多边形POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))转换为WGS84坐标系（SRID 4326），并输出转换后的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) AS wgs_geom;", "execution_result": [["POLYGON((-71.1776848522251 42.39028965129032,-71.17768437663261 42.390382947801015,-71.17758443054647 42.390382667791854,-71.17758259272304 42.390289364798825,-71.1776848522251 42.39028965129032))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the polygon POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) from the NAD83/Virginia South coordinate system (SRID 2249) to WGS84 (SRID 4326) and output the transformed WKT string representation.", "source": "original", "new_id": 1289}
{"id": 230, "function": "ST_TransformPipeline", "question": "将SRID为4939的点POINT(143.0 -37.0)转换到SRID 7844坐标系，输出WKT格式结果。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(143.0 -37.0) with SRID 4939 to the coordinate system with SRID 7844 and output its WKT string representation.", "source": "original", "new_id": 1290}
{"id": 230, "function": "ST_TransformPipeline", "question": "将地理坐标系4939下的点(经度143.0，纬度-37.0)转换为GDA2020坐标系(7844)并输出文本。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(143.0 -37.0) with SRID 4939 to the coordinate system with SRID 7844 and output its WKT string representation.", "source": "original", "new_id": 1291}
{"id": 230, "function": "ST_TransformPipeline", "question": "将SRID为4939的二维点POINT(143.0 -37.0)转换到SRID为7844的坐标系中，并以WKT格式输出结果，结果列命名为gda2020_auto。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(143.0 -37.0) with SRID 4939 to the coordinate system with SRID 7844 and output its WKT string representation.", "source": "original", "new_id": 1292}
{"id": 230, "function": "ST_TransformPipeline", "question": "以Well-Known Text格式返回POINT(143.0 -37.0)从SRID 4939转换到7844后的坐标值。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(143.0 -37.0) with SRID 4939 to the coordinate system with SRID 7844 and output its WKT string representation.", "source": "original", "new_id": 1293}
{"id": 230, "function": "ST_TransformPipeline", "question": "将SRID为4939的二维点POINT(143.0 -37.0)转换为SRID 7844坐标系后，输出其WKT字符串表示形式。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(143.0 -37.0) with SRID 4939 to the coordinate system with SRID 7844 and output its WKT string representation.", "source": "original", "new_id": 1294}
{"id": 230, "function": "ST_TransformPipeline", "question": "将SRID为4939的二维点POINT(143.0 -37.0)转换为SRID为7844的坐标系后，输出其WKT字符串表示形式。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(143.0 -37.0) with SRID 4939 to the coordinate system with SRID 7844 and output its WKT string representation.", "source": "original", "new_id": 1295}
{"id": 233, "function": "ST_GeogFromText", "question": "将SRID=4267的POINT(-77.0092 38.889588)地理文本转换为扩展WKT格式。", "sql": "SELECT ST_AsEWKT(ST_GeogFromText('SRID=4267;POINT(-77.0092 38.889588)'));", "execution_result": [["SRID=4267;POINT(-77.0092 38.889588)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geographic coordinate POINT(-77.0092 38.889588) with SRID 4267 into an EWKT format string output.", "source": "original", "new_id": 1296}
{"id": 233, "function": "ST_GeogFromText", "question": "输出坐标为(-77.0092,38.889588)且SRID为4267的点地理对象的扩展WKT字符串。", "sql": "SELECT ST_AsEWKT(ST_GeogFromText('SRID=4267;POINT(-77.0092 38.889588)'));", "execution_result": [["SRID=4267;POINT(-77.0092 38.889588)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geographic coordinate POINT(-77.0092 38.889588) with SRID 4267 into an EWKT format string output.", "source": "original", "new_id": 1297}
{"id": 233, "function": "ST_GeogFromText", "question": "将SRID为4267的地理坐标系下的二维点POINT(-77.0092 38.889588)转换为EWKT格式输出，其中X坐标为-77.0092，Y坐标为38.889588。", "sql": "SELECT ST_AsEWKT(ST_GeogFromText('SRID=4267;POINT(-77.0092 38.889588)'));", "execution_result": [["SRID=4267;POINT(-77.0092 38.889588)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geographic coordinate POINT(-77.0092 38.889588) with SRID 4267 into an EWKT format string output.", "source": "original", "new_id": 1298}
{"id": 233, "function": "ST_GeogFromText", "question": "以扩展WKT格式输出SRID=4267的POINT(-77.0092 38.889588)地理对象。", "sql": "SELECT ST_AsEWKT(ST_GeogFromText('SRID=4267;POINT(-77.0092 38.889588)'));", "execution_result": [["SRID=4267;POINT(-77.0092 38.889588)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geographic coordinate POINT(-77.0092 38.889588) with SRID 4267 into an EWKT format string output.", "source": "original", "new_id": 1299}
{"id": 233, "function": "ST_GeogFromText", "question": "获取POINT(-77.0092 38.889588)地理对象的扩展WKT字符串表示，包含SRID信息。", "sql": "SELECT ST_AsEWKT(ST_GeogFromText('SRID=4267;POINT(-77.0092 38.889588)'));", "execution_result": [["SRID=4267;POINT(-77.0092 38.889588)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geographic coordinate POINT(-77.0092 38.889588) with SRID 4267 into an EWKT format string output.", "source": "original", "new_id": 1300}
{"id": 233, "function": "ST_GeogFromText", "question": "将SRID为4267的地理坐标POINT(-77.0092 38.889588)转换为EWKT格式字符串输出。", "sql": "SELECT ST_AsEWKT(ST_GeogFromText('SRID=4267;POINT(-77.0092 38.889588)'));", "execution_result": [["SRID=4267;POINT(-77.0092 38.889588)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geographic coordinate POINT(-77.0092 38.889588) with SRID 4267 into an EWKT format string output.", "source": "original", "new_id": 1301}
{"id": 235, "function": "ST_GeomCollFromText", "question": "从WKT字符串创建包含POINT(1 2)和LINESTRING(1 2, 3 4)的几何集合。", "sql": "SELECT ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(1 2),LINESTRING(1 2, 3 4))');", "execution_result": [["0107000000020000000101000000000000000000F03F0000000000000040010200000002000000000000000000F03F000000000000004000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of the geometry collection consisting of POINT(1 2) and LINESTRING(1 2, 3 4).", "source": "original", "new_id": 1302}
{"id": 235, "function": "ST_GeomCollFromText", "question": "构建由点(1,2)和连接(1,2)到(3,4)的线段组成的几何集合。", "sql": "SELECT ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(1 2),LINESTRING(1 2, 3 4))');", "execution_result": [["0107000000020000000101000000000000000000F03F0000000000000040010200000002000000000000000000F03F000000000000004000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of the geometry collection consisting of POINT(1 2) and LINESTRING(1 2, 3 4).", "source": "original", "new_id": 1303}
{"id": 235, "function": "ST_GeomCollFromText", "question": "使用ST_GeomCollFromText函数创建一个几何集合，该集合包含一个二维点POINT(1 2)和一条由坐标点(1 2)到(3 4)组成的折线LINESTRING(1 2, 3 4)，请生成对应的几何集合对象。", "sql": "SELECT ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(1 2),LINESTRING(1 2, 3 4))');", "execution_result": [["0107000000020000000101000000000000000000F03F0000000000000040010200000002000000000000000000F03F000000000000004000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of the geometry collection consisting of POINT(1 2) and LINESTRING(1 2, 3 4).", "source": "original", "new_id": 1304}
{"id": 235, "function": "ST_GeomCollFromText", "question": "输出由POINT(1 2)和LINESTRING(1 2, 3 4)组成的几何集合对象。", "sql": "SELECT ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(1 2),LINESTRING(1 2, 3 4))');", "execution_result": [["0107000000020000000101000000000000000000F03F0000000000000040010200000002000000000000000000F03F000000000000004000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of the geometry collection consisting of POINT(1 2) and LINESTRING(1 2, 3 4).", "source": "original", "new_id": 1305}
{"id": 235, "function": "ST_GeomCollFromText", "question": "输出由点(1 2)和线(1 2, 3 4)组成的几何集合的WKT格式字符串。", "sql": "SELECT ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(1 2),LINESTRING(1 2, 3 4))');", "execution_result": [["0107000000020000000101000000000000000000F03F0000000000000040010200000002000000000000000000F03F000000000000004000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of the geometry collection consisting of POINT(1 2) and LINESTRING(1 2, 3 4).", "source": "original", "new_id": 1306}
{"id": 235, "function": "ST_GeomCollFromText", "question": "输出由POINT(1 2)和LINESTRING(1 2, 3 4)组成的几何集合的WKT格式字符串。", "sql": "SELECT ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(1 2),LINESTRING(1 2, 3 4))');", "execution_result": [["0107000000020000000101000000000000000000F03F0000000000000040010200000002000000000000000000F03F000000000000004000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string of the geometry collection consisting of POINT(1 2) and LINESTRING(1 2, 3 4).", "source": "original", "new_id": 1307}
{"id": 236, "function": "ST_GeomFromEWKT", "question": "使用SRID为4269的坐标系统，创建一个由点(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)组成的线几何对象。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a LINESTRING geometry object with SRID 4269, containing the coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), and return it in EWKT format.", "source": "original", "new_id": 1308}
{"id": 236, "function": "ST_GeomFromEWKT", "question": "将EWKT字符串'SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)'转换为PostGIS几何对象。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a LINESTRING geometry object with SRID 4269, containing the coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), and return it in EWKT format.", "source": "original", "new_id": 1309}
{"id": 236, "function": "ST_GeomFromEWKT", "question": "使用ST_GeomFromEWKT函数，基于EWKT格式创建一条具有SRID 4269空间参考的二维折线，该折线由三个顶点组成，坐标依次为(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a LINESTRING geometry object with SRID 4269, containing the coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), and return it in EWKT format.", "source": "original", "new_id": 1310}
{"id": 236, "function": "ST_GeomFromEWKT", "question": "输出由EWKT字符串'SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)'转换得到的PostGIS几何对象。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a LINESTRING geometry object with SRID 4269, containing the coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), and return it in EWKT format.", "source": "original", "new_id": 1311}
{"id": 236, "function": "ST_GeomFromEWKT", "question": "将EWKT格式的线几何数据'SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)'转换为PostGIS内部几何对象并返回。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a LINESTRING geometry object with SRID 4269, containing the coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), and return it in EWKT format.", "source": "original", "new_id": 1312}
{"id": 236, "function": "ST_GeomFromEWKT", "question": "输出一个SRID为4269的LINESTRING几何对象，其坐标点依次为(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)，并以EWKT格式返回。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a LINESTRING geometry object with SRID 4269, containing the coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), and return it in EWKT format.", "source": "original", "new_id": 1313}
{"id": 237, "function": "ST_GeomFromEWKT", "question": "从ewkt格式的字符串中创建多多边形对象，字符串为'SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))'", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of a MULTIPOLYGON geometry object with SRID 4269, containing two polygons: the first polygon consists of 40 vertices with coordinates ((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043, -71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397, -71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587, -71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902, -71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215, -71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557, -71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533, -71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241, -71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048, -71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017, -71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148, -71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446, -71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739, -71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917, -71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447, -71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995, -71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535, -71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313, -71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061, -71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)); the second polygon consists of 5 vertices with coordinates ((-71.1043632495873 42.315113108546, -71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829, -71.1043850704575 42.3150793250568, -71.1043632495873 42.315113108546)).", "source": "original", "new_id": 1314}
{"id": 237, "function": "ST_GeomFromEWKT", "question": "使用ST_GeomFromEWKT函数创建一个SRID为4269的多边形集合，该集合包含两个多边形：第一个多边形由42个顶点组成，坐标依次为((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236))；第二个多边形坐标依次为((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546))。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of a MULTIPOLYGON geometry object with SRID 4269, containing two polygons: the first polygon consists of 40 vertices with coordinates ((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043, -71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397, -71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587, -71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902, -71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215, -71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557, -71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533, -71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241, -71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048, -71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017, -71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148, -71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446, -71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739, -71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917, -71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447, -71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995, -71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535, -71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313, -71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061, -71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)); the second polygon consists of 5 vertices with coordinates ((-71.1043632495873 42.315113108546, -71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829, -71.1043850704575 42.3150793250568, -71.1043632495873 42.315113108546)).", "source": "original", "new_id": 1315}
{"id": 237, "function": "ST_GeomFromEWKT", "question": "使用ST_GeomFromEWKT函数创建一个SRID为4269的多边形集合，该集合包含两个多边形：第一个多边形由42个顶点组成，坐标依次为((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236))；第二个多边形坐标依次为((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546))。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of a MULTIPOLYGON geometry object with SRID 4269, containing two polygons: the first polygon consists of 40 vertices with coordinates ((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043, -71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397, -71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587, -71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902, -71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215, -71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557, -71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533, -71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241, -71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048, -71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017, -71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148, -71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446, -71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739, -71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917, -71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447, -71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995, -71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535, -71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313, -71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061, -71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)); the second polygon consists of 5 vertices with coordinates ((-71.1043632495873 42.315113108546, -71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829, -71.1043850704575 42.3150793250568, -71.1043632495873 42.315113108546)).", "source": "original", "new_id": 1316}
{"id": 237, "function": "ST_GeomFromEWKT", "question": "输出一个SRID为4269的MULTIPOLYGON几何对象的WKT字符串，该对象包含两个多边形：第一个多边形由40个顶点组成（坐标依次为((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236))，第二个多边形坐标依次为((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546))。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of a MULTIPOLYGON geometry object with SRID 4269, containing two polygons: the first polygon consists of 40 vertices with coordinates ((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043, -71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397, -71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587, -71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902, -71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215, -71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557, -71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533, -71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241, -71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048, -71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017, -71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148, -71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446, -71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739, -71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917, -71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447, -71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995, -71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535, -71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313, -71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061, -71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)); the second polygon consists of 5 vertices with coordinates ((-71.1043632495873 42.315113108546, -71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829, -71.1043850704575 42.3150793250568, -71.1043632495873 42.315113108546)).", "source": "original", "new_id": 1317}
{"id": 237, "function": "ST_GeomFromEWKT", "question": "输出一个SRID为4269的MULTIPOLYGON几何对象的EWKT字符串，该对象包含两个多边形：第一个多边形由42个顶点组成，坐标依次为((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236))；第二个多边形坐标依次为(-71.1043632495873 42.315113108546), (-71.1043583974082 42.3151211109857), (-71.1043443253471 42.3150676015829), (-71.1043850704575 42.3150793250568), (-71.1043632495873 42.315113108546)。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of a MULTIPOLYGON geometry object with SRID 4269, containing two polygons: the first polygon consists of 40 vertices with coordinates ((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043, -71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397, -71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587, -71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902, -71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215, -71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557, -71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533, -71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241, -71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048, -71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017, -71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148, -71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446, -71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739, -71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917, -71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447, -71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995, -71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535, -71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313, -71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061, -71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)); the second polygon consists of 5 vertices with coordinates ((-71.1043632495873 42.315113108546, -71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829, -71.1043850704575 42.3150793250568, -71.1043632495873 42.315113108546)).", "source": "original", "new_id": 1318}
{"id": 237, "function": "ST_GeomFromEWKT", "question": "输出一个SRID为4269的MULTIPOLYGON几何对象的EWKT字符串表示，该对象包含两个多边形：第一个多边形由40个顶点组成，坐标依次为((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236))；第二个多边形由5个顶点组成，坐标依次为(-71.1043632495873 42.315113108546), (-71.1043583974082 42.3151211109857), (-71.1043443253471 42.3150676015829), (-71.1043850704575 42.3150793250568), (-71.1043632495873 42.315113108546)。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of a MULTIPOLYGON geometry object with SRID 4269, containing two polygons: the first polygon consists of 40 vertices with coordinates ((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043, -71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397, -71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587, -71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902, -71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215, -71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557, -71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533, -71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241, -71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048, -71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017, -71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148, -71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446, -71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739, -71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917, -71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447, -71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995, -71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535, -71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313, -71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061, -71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)); the second polygon consists of 5 vertices with coordinates ((-71.1043632495873 42.315113108546, -71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829, -71.1043850704575 42.3150793250568, -71.1043632495873 42.315113108546)).", "source": "original", "new_id": 1319}
{"id": 238, "function": "ST_GeomFromEWKT", "question": "使用SRID=4269和坐标点(-71.160281 42.258729)、(-71.160837 42.259113)、(-71.161144 42.25932)创建多线字符串几何对象。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["0105000020AD10000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the MULTILINESTRING geometry object in EWKT format with SRID 4269, which consists of a multiline formed by three 2D points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932).", "source": "original", "new_id": 1320}
{"id": 238, "function": "ST_GeomFromEWKT", "question": "将EWKT字符串'SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))'转换为几何对象。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["0105000020AD10000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the MULTILINESTRING geometry object in EWKT format with SRID 4269, which consists of a multiline formed by three 2D points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932).", "source": "original", "new_id": 1321}
{"id": 238, "function": "ST_GeomFromEWKT", "question": "使用SRID为4269的空间参考系统，创建一个包含三条连续线段的多线段几何对象，具体坐标点为：第一条线段从POINT(-71.160281 42.258729)到POINT(-71.160837 42.259113)，第二条线段从POINT(-71.160837 42.259113)到POINT(-71.161144 42.25932)，并以EWKT格式输出该MULTILINESTRING对象。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["0105000020AD10000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the MULTILINESTRING geometry object in EWKT format with SRID 4269, which consists of a multiline formed by three 2D points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932).", "source": "original", "new_id": 1322}
{"id": 238, "function": "ST_GeomFromEWKT", "question": "输出从EWKT字符串'SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))'转换得到的PostGIS几何对象。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["0105000020AD10000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the MULTILINESTRING geometry object in EWKT format with SRID 4269, which consists of a multiline formed by three 2D points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932).", "source": "original", "new_id": 1323}
{"id": 238, "function": "ST_GeomFromEWKT", "question": "将EWKT格式的多线字符串数据'SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))'转换为PostGIS内部几何格式并返回。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["0105000020AD10000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the MULTILINESTRING geometry object in EWKT format with SRID 4269, which consists of a multiline formed by three 2D points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932).", "source": "original", "new_id": 1324}
{"id": 238, "function": "ST_GeomFromEWKT", "question": "输出以EWKT格式表示的、SRID为4269的MULTILINESTRING几何对象，该对象包含由三个二维点(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)构成的多线段。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["0105000020AD10000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the MULTILINESTRING geometry object in EWKT format with SRID 4269, which consists of a multiline formed by three 2D points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932).", "source": "original", "new_id": 1325}
{"id": 239, "function": "ST_GeomFromEWKT", "question": "使用SRID=4269空间参考系和坐标(-71.064544, 42.28787)创建点对象。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POINT(-71.064544 42.28787)');", "execution_result": [["0101000020AD100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object of the 2D point POINT(-71.064544 42.28787) in EWKT format with SRID 4269.", "source": "original", "new_id": 1326}
{"id": 239, "function": "ST_GeomFromEWKT", "question": "将EWKT字符串'SRID=4269;POINT(-71.064544 42.28787)'转换为几何对象。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POINT(-71.064544 42.28787)');", "execution_result": [["0101000020AD100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object of the 2D point POINT(-71.064544 42.28787) in EWKT format with SRID 4269.", "source": "original", "new_id": 1327}
{"id": 239, "function": "ST_GeomFromEWKT", "question": "使用ST_GeomFromEWKT函数，基于EWKT格式的字符串'SRI D=4269;POINT(-71.064544 42.28787)'创建一个空间几何对象，其中SRID为4269表示坐标系为NAD83，几何对象为二维点POINT(-71.064544 42.28787)。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POINT(-71.064544 42.28787)');", "execution_result": [["0101000020AD100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object of the 2D point POINT(-71.064544 42.28787) in EWKT format with SRID 4269.", "source": "original", "new_id": 1328}
{"id": 239, "function": "ST_GeomFromEWKT", "question": "输出由'SRID=4269;POINT(-71.064544 42.28787)'转换得到的PostGIS几何对象。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POINT(-71.064544 42.28787)');", "execution_result": [["0101000020AD100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object of the 2D point POINT(-71.064544 42.28787) in EWKT format with SRID 4269.", "source": "original", "new_id": 1329}
{"id": 239, "function": "ST_GeomFromEWKT", "question": "生成一个包含SRID=4269和坐标(-71.064544, 42.28787)的PostGIS点对象。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POINT(-71.064544 42.28787)');", "execution_result": [["0101000020AD100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object of the 2D point POINT(-71.064544 42.28787) in EWKT format with SRID 4269.", "source": "original", "new_id": 1330}
{"id": 239, "function": "ST_GeomFromEWKT", "question": "输出以EWKT格式表示的、SRID为4269的二维点POINT(-71.064544 42.28787)的几何对象。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POINT(-71.064544 42.28787)');", "execution_result": [["0101000020AD100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object of the 2D point POINT(-71.064544 42.28787) in EWKT format with SRID 4269.", "source": "original", "new_id": 1331}
{"id": 240, "function": "ST_GeomFromEWKT", "question": "使用ST_GeomFromEWKT函数创建由6个面组成的多面体表面，各面顶点坐标分别为：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYHEDRALSURFACE object in EWKT format to a geometry object. This polyhedral surface consists of 6 faces: the first face with vertices (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second with (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third with (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth with (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth with (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth with (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1332}
{"id": 240, "function": "ST_GeomFromEWKT", "question": "使用ST_GeomFromEWKT函数创建一个由6个三维多边形面组成的多面体表面，具体坐标如下：第一个面由点(0 0 0)、(0 0 1)、(0 1 1)、(0 1 0)、(0 0 0)构成；第二个面由点(0 0 0)、(0 1 0)、(1 1 0)、(1 0 0)、(0 0 0)构成；第三个面由点(0 0 0)、(1 0 0)、(1 0 1)、(0 0 1)、(0 0 0)构成；第四个面由点(1 1 0)、(1 1 1)、(1 0 1)、(1 0 0)、(1 1 0)构成；第五个面由点(0 1 0)、(0 1 1)、(1 1 1)、(1 1 0)、(0 1 0)构成；第六个面由点(0 0 1)、(1 0 1)、(1 1 1)、(0 1 1)、(0 0 1)构成。", "sql": "SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYHEDRALSURFACE object in EWKT format to a geometry object. This polyhedral surface consists of 6 faces: the first face with vertices (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second with (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third with (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth with (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth with (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth with (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1333}
{"id": 240, "function": "ST_GeomFromEWKT", "question": "使用ST_GeomFromEWKT函数创建一个由6个三维多边形面组成的多面体表面，其具体坐标依次为：第一个面((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0))，第二个面((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))，第三个面((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0))，第四个面((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0))，第五个面((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0))，第六个面((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYHEDRALSURFACE object in EWKT format to a geometry object. This polyhedral surface consists of 6 faces: the first face with vertices (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second with (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third with (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth with (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth with (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth with (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1334}
{"id": 240, "function": "ST_GeomFromEWKT", "question": "将EWKT格式的多面体表面定义转换为PostGIS几何对象，该对象包含6个多边形面，每个面的顶点坐标分别为：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYHEDRALSURFACE object in EWKT format to a geometry object. This polyhedral surface consists of 6 faces: the first face with vertices (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second with (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third with (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth with (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth with (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth with (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1335}
{"id": 240, "function": "ST_GeomFromEWKT", "question": "输出由6个三维多边形面构成的POLYHEDRALSURFACE对象的EWKT字符串，其中包含以下精确坐标序列：第一个面((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0))，第二个面((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))，第三个面((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0))，第四个面((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0))，第五个面((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0))，第六个面((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYHEDRALSURFACE object in EWKT format to a geometry object. This polyhedral surface consists of 6 faces: the first face with vertices (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second with (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third with (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth with (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth with (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth with (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1336}
{"id": 240, "function": "ST_GeomFromEWKT", "question": "将EWKT格式的POLYHEDRALSURFACE对象转换为几何对象，该多面体表面由6个面组成：第一个面顶点为(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个面顶点为(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个面顶点为(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个面顶点为(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个面顶点为(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个面顶点为(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。", "sql": "SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYHEDRALSURFACE object in EWKT format to a geometry object. This polyhedral surface consists of 6 faces: the first face with vertices (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second with (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third with (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth with (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth with (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth with (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1337}
{"id": 241, "function": "ST_GeomFromEWKT", "question": "使用ST_GeomFromEWKT函数创建一条经过点(220268 150415 1)、(220227 150505 2)和(220227 150406 3)的三维圆弧曲线。", "sql": "SELECT ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)');", "execution_result": [["0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format geometry object of a circular arc (CIRCULARSTRING) composed of the three 3D points 220268 150415 1, 220227 150505 2, and 220227 150406 3.", "source": "original", "new_id": 1338}
{"id": 241, "function": "ST_GeomFromEWKT", "question": "将EWKT字符串'CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'转换为几何对象。", "sql": "SELECT ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)');", "execution_result": [["0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format geometry object of a circular arc (CIRCULARSTRING) composed of the three 3D points 220268 150415 1, 220227 150505 2, and 220227 150406 3.", "source": "original", "new_id": 1339}
{"id": 241, "function": "ST_GeomFromEWKT", "question": "使用ST_GeomFromEWKT函数将EWKT格式的字符串'CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'转换为几何对象，其中该圆弧线由三个三维点构成：第一个点坐标为X=220268 Y=150415 Z=1，第二个点坐标为X=220227 Y=150505 Z=2，第三个点坐标为X=220227 Y=150406 Z=3。", "sql": "SELECT ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)');", "execution_result": [["0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format geometry object of a circular arc (CIRCULARSTRING) composed of the three 3D points 220268 150415 1, 220227 150505 2, and 220227 150406 3.", "source": "original", "new_id": 1340}
{"id": 241, "function": "ST_GeomFromEWKT", "question": "输出由EWKT字符串'CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'转换得到的PostGIS几何对象。", "sql": "SELECT ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)');", "execution_result": [["0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format geometry object of a circular arc (CIRCULARSTRING) composed of the three 3D points 220268 150415 1, 220227 150505 2, and 220227 150406 3.", "source": "original", "new_id": 1341}
{"id": 241, "function": "ST_GeomFromEWKT", "question": "返回一个表示三维圆弧曲线的PostGIS几何对象，该对象由点(220268 150415 1)、(220227 150505 2)和(220227 150406 3)定义。", "sql": "SELECT ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)');", "execution_result": [["0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format geometry object of a circular arc (CIRCULARSTRING) composed of the three 3D points 220268 150415 1, 220227 150505 2, and 220227 150406 3.", "source": "original", "new_id": 1342}
{"id": 241, "function": "ST_GeomFromEWKT", "question": "输出由三个三维点220268 150415 1、220227 150505 2和220227 150406 3构成的圆弧线（CIRCULARSTRING）的EWKT格式几何对象。", "sql": "SELECT ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)');", "execution_result": [["0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT format geometry object of a circular arc (CIRCULARSTRING) composed of the three 3D points 220268 150415 1, 220227 150505 2, and 220227 150406 3.", "source": "original", "new_id": 1343}
{"id": 242, "function": "ST_GeomFromEWKT", "question": "使用坐标(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)创建SRID为4269的闭合多边形。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["0103000020AD10000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a POLYGON geometry object with SRID 4269, consisting of five vertices with coordinates (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1344}
{"id": 242, "function": "ST_GeomFromEWKT", "question": "根据SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))构建NAD83坐标系(SRID=4269)下的多边形。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["0103000020AD10000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a POLYGON geometry object with SRID 4269, consisting of five vertices with coordinates (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1345}
{"id": 242, "function": "ST_GeomFromEWKT", "question": "使用ST_GeomFromEWKT函数创建一个空间参考系为SRID=4269的多边形，该多边形的顶点坐标依次为(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)，最后闭合回起点(-71.1776585052917 42.3902909739571)。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["0103000020AD10000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a POLYGON geometry object with SRID 4269, consisting of five vertices with coordinates (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1346}
{"id": 242, "function": "ST_GeomFromEWKT", "question": "输出由EWKT字符串'SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))'解析得到的PostGIS几何对象。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["0103000020AD10000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a POLYGON geometry object with SRID 4269, consisting of five vertices with coordinates (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1347}
{"id": 242, "function": "ST_GeomFromEWKT", "question": "输出一个SRID为4269的POLYGON几何对象的WKT字符串，该多边形由以下五个坐标点组成闭合环：(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)和(-71.1776585052917 42.3902909739571)。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["0103000020AD10000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a POLYGON geometry object with SRID 4269, consisting of five vertices with coordinates (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1348}
{"id": 242, "function": "ST_GeomFromEWKT", "question": "输出SRID为4269的POLYGON几何对象的WKT字符串，该多边形由五个顶点组成，坐标依次为(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)和(-71.1776585052917 42.3902909739571)。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["0103000020AD10000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string of a POLYGON geometry object with SRID 4269, consisting of five vertices with coordinates (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1349}
{"id": 243, "function": "ST_GeomFromMARC21", "question": "将MARC21格式的地理范围记录转换为几何对象并以WKT格式输出，该记录包含两个datafield：第一个datafield的tag为034，ind1为1，ind2为空，包含子字段a值为a，b值为50000，d值为E0130600，e值为E0133100，f值为N0523900，g值为N0522300；第二个datafield的tag为034，ind1为空，ind2为空，包含子字段d值为W004.500000，e值为W004.500000，f值为N054.250000，g值为N054.250000。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string after converting the MARC21 XML records containing two 034 fields into geometric objects, where the first 034 field with ind1=\"1\" has subfield a as a, subfield b as 50000, subfield d as E0130600, subfield e as E0133100, subfield f as N0523900, subfield g as N0522300; the second 034 field with ind1=\" \" has subfield d as W004.500000, subfield e as W004.500000, subfield f as N054.250000, subfield g as N054.250000.", "source": "original", "new_id": 1350}
{"id": 243, "function": "ST_GeomFromMARC21", "question": "将以下MARC21格式的地理数据转换为几何对象并以WKT格式输出：第一条数据字段tag=\"034\"包含东经13度06分到13度31分、北纬52度23分到52度39分的范围，比例尺分母为50000；第二条数据字段tag=\"034\"包含西经4.5度到4.5度、北纬54.25度到54.25度的单点坐标。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string after converting the MARC21 XML records containing two 034 fields into geometric objects, where the first 034 field with ind1=\"1\" has subfield a as a, subfield b as 50000, subfield d as E0130600, subfield e as E0133100, subfield f as N0523900, subfield g as N0522300; the second 034 field with ind1=\" \" has subfield d as W004.500000, subfield e as W004.500000, subfield f as N054.250000, subfield g as N054.250000.", "source": "original", "new_id": 1351}
{"id": 243, "function": "ST_GeomFromMARC21", "question": "将包含两个数据字段的MARC21格式记录转换为几何对象并以WKT格式输出。第一个数据字段tag为\"034\"，ind1为\"1\"，ind2为空格，包含子字段：code=\"a\"值为\"a\"，code=\"b\"值为\"50000\"，code=\"d\"值为\"E0130600\"，code=\"e\"值为\"E0133100\"，code=\"f\"值为\"N0523900\"，code=\"g\"值为\"N0522300\"。第二个数据字段tag为\"034\"，ind1为空格，ind2为空格，包含子字段：code=\"d\"值为\"W004.500000\"，code=\"e\"值为\"W004.500000\"，code=\"f\"值为\"N054.250000\"，code=\"g\"值为\"N054.250000\"。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string after converting the MARC21 XML records containing two 034 fields into geometric objects, where the first 034 field with ind1=\"1\" has subfield a as a, subfield b as 50000, subfield d as E0130600, subfield e as E0133100, subfield f as N0523900, subfield g as N0522300; the second 034 field with ind1=\" \" has subfield d as W004.500000, subfield e as W004.500000, subfield f as N054.250000, subfield g as N054.250000.", "source": "original", "new_id": 1352}
{"id": 243, "function": "ST_GeomFromMARC21", "question": "输出通过ST_GeomFromMARC21函数解析MARC21 XML记录生成的几何对象的WKT表示，XML中包含两个034数据字段，第一个字段ind1=\"1\"包含a(a)、b(50000)、d(E0130600)、e(E0133100)、f(N0523900)、g(N0522300)子字段，第二个字段ind1=\" \"包含d(W004.500000)、e(W004.500000)、f(N054.250000)、g(N054.250000)子字段。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string after converting the MARC21 XML records containing two 034 fields into geometric objects, where the first 034 field with ind1=\"1\" has subfield a as a, subfield b as 50000, subfield d as E0130600, subfield e as E0133100, subfield f as N0523900, subfield g as N0522300; the second 034 field with ind1=\" \" has subfield d as W004.500000, subfield e as W004.500000, subfield f as N054.250000, subfield g as N054.250000.", "source": "original", "new_id": 1353}
{"id": 243, "function": "ST_GeomFromMARC21", "question": "输出将包含两个034字段的MARC21 XML记录转换为几何对象后的WKT字符串，第一个034字段ind1=\"1\"包含a子字段值为a、b子字段值为50000、d子字段值为E0130600、e子字段值为E0133100、f子字段值为N0523900、g子字段值为N0522300，第二个034字段ind1=\" \"包含d子字段值为W004.500000、e子字段值为W004.500000、f子字段值为N054.250000、g子字段值为N054.250000。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string after converting the MARC21 XML records containing two 034 fields into geometric objects, where the first 034 field with ind1=\"1\" has subfield a as a, subfield b as 50000, subfield d as E0130600, subfield e as E0133100, subfield f as N0523900, subfield g as N0522300; the second 034 field with ind1=\" \" has subfield d as W004.500000, subfield e as W004.500000, subfield f as N054.250000, subfield g as N054.250000.", "source": "original", "new_id": 1354}
{"id": 244, "function": "ST_GeomFromMARC21", "question": "将包含边界框E0130600-E0133100（经度）和N0522300-N0523900（纬度）的MARC21记录转换为WKT格式几何对象。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'));", "execution_result": [["POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the given MARC21 format geographic record to a geometric object, output its WKT string representation. The record includes geographic extent information such as scale code \"a\", scale value 50000, eastern boundary E0130600, western boundary E0133100, northern boundary N0523900, and southern boundary N0522300.", "source": "original", "new_id": 1355}
{"id": 244, "function": "ST_GeomFromMARC21", "question": "转换MARC21记录（控制号84696781，比例尺1:50000，范围E0130600至E0133100经度/N0522300至N0523900纬度）为WKT几何对象。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'));", "execution_result": [["POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the given MARC21 format geographic record to a geometric object, output its WKT string representation. The record includes geographic extent information such as scale code \"a\", scale value 50000, eastern boundary E0130600, western boundary E0133100, northern boundary N0523900, and southern boundary N0522300.", "source": "original", "new_id": 1356}
{"id": 244, "function": "ST_GeomFromMARC21", "question": "将MARC21格式的地理记录转换为几何对象并以WKT格式输出，该记录包含以下具体参数：leader值为\"01062cem a2200241 a 4500\"，controlfield的tag为\"001\"且值为\"84696781\"，datafield的tag为\"034\"且ind1为\"1\"、ind2为空格，其中subfield code=\"a\"值为\"a\"，code=\"b\"值为\"50000\"，code=\"d\"值为\"E0130600\"，code=\"e\"值为\"E0133100\"，code=\"f\"值为\"N0523900\"，code=\"g\"值为\"N0522300\"。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'));", "execution_result": [["POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the given MARC21 format geographic record to a geometric object, output its WKT string representation. The record includes geographic extent information such as scale code \"a\", scale value 50000, eastern boundary E0130600, western boundary E0133100, northern boundary N0523900, and southern boundary N0522300.", "source": "original", "new_id": 1357}
{"id": 244, "function": "ST_GeomFromMARC21", "question": "输出MARC21记录' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'中定义的地理范围E0130600-E0133100/N0522300-N0523900对应的WKT格式多边形。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'));", "execution_result": [["POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the given MARC21 format geographic record to a geometric object, output its WKT string representation. The record includes geographic extent information such as scale code \"a\", scale value 50000, eastern boundary E0130600, western boundary E0133100, northern boundary N0523900, and southern boundary N0522300.", "source": "original", "new_id": 1358}
{"id": 244, "function": "ST_GeomFromMARC21", "question": "以WKT字符串格式' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'返回MARC21记录84696781中编码的矩形地理范围。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'));", "execution_result": [["POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the given MARC21 format geographic record to a geometric object, output its WKT string representation. The record includes geographic extent information such as scale code \"a\", scale value 50000, eastern boundary E0130600, western boundary E0133100, northern boundary N0523900, and southern boundary N0522300.", "source": "original", "new_id": 1359}
{"id": 244, "function": "ST_GeomFromMARC21", "question": "将给定的MARC21格式地理记录转换为几何对象后，输出其WKT字符串表示形式。该记录包含比例尺代码\"a\"、比例尺值50000、东边界E0130600、西边界E0133100、北边界N0523900、南边界N0522300等地理范围信息。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'));", "execution_result": [["POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the given MARC21 format geographic record to a geometric object, output its WKT string representation. The record includes geographic extent information such as scale code \"a\", scale value 50000, eastern boundary E0130600, western boundary E0133100, northern boundary N0523900, and southern boundary N0522300.", "source": "original", "new_id": 1360}
{"id": 245, "function": "ST_GeomFromMARC21", "question": "将MARC21记录中经度范围W004.500000到W004.500000、纬度范围N054.250000到N054.250000的坐标转换为几何对象，输出WKT格式。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >00000nz a2200000nc 4500</leader> <controlfield tag=\"001\" >040277569</controlfield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["POINT(-4.5 54.25)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geographic coordinate record in MARC21 format (longitude -4.500000° to -4.500000°, latitude 54.250000° to 54.250000°) into a geometry object and output its WKT string representation.", "source": "original", "new_id": 1361}
{"id": 245, "function": "ST_GeomFromMARC21", "question": "精确解析MARC21记录' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'，生成几何对象的文本表示。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >00000nz a2200000nc 4500</leader> <controlfield tag=\"001\" >040277569</controlfield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["POINT(-4.5 54.25)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geographic coordinate record in MARC21 format (longitude -4.500000° to -4.500000°, latitude 54.250000° to 54.250000°) into a geometry object and output its WKT string representation.", "source": "original", "new_id": 1362}
{"id": 245, "function": "ST_GeomFromMARC21", "question": "将MARC21格式的地理坐标记录转换为几何对象并以WKT格式输出，该记录包含以下具体参数：控制字段001值为040277569，数据字段034的子字段d值为西经4.500000度，子字段e值为西经4.500000度，子字段f值为北纬54.250000度，子字段g值为北纬54.250000度。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >00000nz a2200000nc 4500</leader> <controlfield tag=\"001\" >040277569</controlfield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["POINT(-4.5 54.25)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geographic coordinate record in MARC21 format (longitude -4.500000° to -4.500000°, latitude 54.250000° to 54.250000°) into a geometry object and output its WKT string representation.", "source": "original", "new_id": 1363}
{"id": 245, "function": "ST_GeomFromMARC21", "question": "输出MARC21记录中坐标W004.500000和N054.250000定义的几何对象的WKT字符串' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >00000nz a2200000nc 4500</leader> <controlfield tag=\"001\" >040277569</controlfield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >00000nz a2200000nc 4500</leader> <controlfield tag=\"001\" >040277569</controlfield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["POINT(-4.5 54.25)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geographic coordinate record in MARC21 format (longitude -4.500000° to -4.500000°, latitude 54.250000° to 54.250000°) into a geometry object and output its WKT string representation.", "source": "original", "new_id": 1364}
{"id": 245, "function": "ST_GeomFromMARC21", "question": "以WKT格式返回MARC21记录' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >00000nz a2200000nc 4500</leader> <controlfield tag=\"001\" >040277569</controlfield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'中地理坐标转换后的几何对象。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >00000nz a2200000nc 4500</leader> <controlfield tag=\"001\" >040277569</controlfield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["POINT(-4.5 54.25)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geographic coordinate record in MARC21 format (longitude -4.500000° to -4.500000°, latitude 54.250000° to 54.250000°) into a geometry object and output its WKT string representation.", "source": "original", "new_id": 1365}
{"id": 245, "function": "ST_GeomFromMARC21", "question": "将MARC21格式的地理坐标记录（西经4.500000度至西经4.500000度，北纬54.250000度至北纬54.250000度）转换为几何对象后，输出其WKT字符串表示形式。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >00000nz a2200000nc 4500</leader> <controlfield tag=\"001\" >040277569</controlfield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["POINT(-4.5 54.25)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geographic coordinate record in MARC21 format (longitude -4.500000° to -4.500000°, latitude 54.250000° to 54.250000°) into a geometry object and output its WKT string representation.", "source": "original", "new_id": 1366}
{"id": 246, "function": "ST_GeomFromText", "question": "将WKT字符串'POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))'转换为多边形几何对象。", "sql": "SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object POLYGON formed by the closed polygon with coordinate points (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1367}
{"id": 246, "function": "ST_GeomFromText", "question": "使用ST_GeomFromText函数创建由坐标点(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)组成的闭合多边形。", "sql": "SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object POLYGON formed by the closed polygon with coordinate points (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1368}
{"id": 246, "function": "ST_GeomFromText", "question": "使用ST_GeomFromText函数将WKT格式的字符串'POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))'转换为几何对象，该多边形由五个顶点组成，坐标依次为(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)和(-71.1776585052917 42.3902909739571)。", "sql": "SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object POLYGON formed by the closed polygon with coordinate points (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1369}
{"id": 246, "function": "ST_GeomFromText", "question": "输出由WKT字符串'POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))'转换得到的PostGIS几何对象。", "sql": "SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object POLYGON formed by the closed polygon with coordinate points (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1370}
{"id": 246, "function": "ST_GeomFromText", "question": "将给定的多边形WKT'POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))'转换为PostGIS内部几何格式并返回。", "sql": "SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object POLYGON formed by the closed polygon with coordinate points (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1371}
{"id": 246, "function": "ST_GeomFromText", "question": "输出由坐标点(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)和(-71.1776585052917 42.3902909739571)构成的闭合多边形POLYGON的几何对象。", "sql": "SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object POLYGON formed by the closed polygon with coordinate points (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1372}
{"id": 247, "function": "ST_GeomFromText", "question": "将包含三个坐标点(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)的多线字符串转换为几何对象。", "sql": "SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["010500000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT geometry object of a MULTILINESTRING formed by the three coordinate points (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932).", "source": "original", "new_id": 1373}
{"id": 247, "function": "ST_GeomFromText", "question": "使用ST_GeomFromText函数解析WKT格式的多线几何，该几何由三个经纬度坐标点组成：(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)。", "sql": "SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["010500000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT geometry object of a MULTILINESTRING formed by the three coordinate points (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932).", "source": "original", "new_id": 1374}
{"id": 247, "function": "ST_GeomFromText", "question": "将包含三个二维坐标点的多线段转换为几何对象，具体坐标为：第一个点经度-71.160281纬度42.258729，第二个点经度-71.160837纬度42.259113，第三个点经度-71.161144纬度42.25932。", "sql": "SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["010500000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT geometry object of a MULTILINESTRING formed by the three coordinate points (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932).", "source": "original", "new_id": 1375}
{"id": 247, "function": "ST_GeomFromText", "question": "输出由三个坐标点(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)构成的多线几何对象。", "sql": "SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["010500000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT geometry object of a MULTILINESTRING formed by the three coordinate points (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932).", "source": "original", "new_id": 1376}
{"id": 247, "function": "ST_GeomFromText", "question": "将WKT格式的多线几何'MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))'转换为PostGIS内部几何表示形式。", "sql": "SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["010500000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT geometry object of a MULTILINESTRING formed by the three coordinate points (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932).", "source": "original", "new_id": 1377}
{"id": 247, "function": "ST_GeomFromText", "question": "输出由三个坐标点(-71.160281 42.258729)、(-71.160837 42.259113)、(-71.161144 42.25932)构成的多线段MULTILINESTRING的WKT几何对象。", "sql": "SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["010500000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT geometry object of a MULTILINESTRING formed by the three coordinate points (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932).", "source": "original", "new_id": 1378}
{"id": 248, "function": "ST_GeomFromText", "question": "将WKT格式的圆形弧线CIRCULARSTRING(220268 150415,220227 150505,220227 150406)转换为几何对象。", "sql": "SELECT ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)');", "execution_result": [["0108000000030000000000000060E30A4100000000785C02410000000018E20A4100000000485F02410000000018E20A4100000000305C0241"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object of a CIRCULARSTRING arc defined by the three control points 220268 150415, 220227 150505, and 220227 150406.", "source": "original", "new_id": 1379}
{"id": 248, "function": "ST_GeomFromText", "question": "使用坐标点(220268,150415)、(220227,150505)和(220227,150406)创建圆形弧线几何。", "sql": "SELECT ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)');", "execution_result": [["0108000000030000000000000060E30A4100000000785C02410000000018E20A4100000000485F02410000000018E20A4100000000305C0241"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object of a CIRCULARSTRING arc defined by the three control points 220268 150415, 220227 150505, and 220227 150406.", "source": "original", "new_id": 1380}
{"id": 248, "function": "ST_GeomFromText", "question": "使用ST_GeomFromText函数将WKT格式的圆弧线'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'转换为几何对象，其中圆弧线由三个控制点组成：第一个点坐标为(220268,150415)，第二个点坐标为(220227,150505)，第三个点坐标为(220227,150406)。", "sql": "SELECT ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)');", "execution_result": [["0108000000030000000000000060E30A4100000000785C02410000000018E20A4100000000485F02410000000018E20A4100000000305C0241"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object of a CIRCULARSTRING arc defined by the three control points 220268 150415, 220227 150505, and 220227 150406.", "source": "original", "new_id": 1381}
{"id": 248, "function": "ST_GeomFromText", "question": "输出由CIRCULARSTRING(220268 150415,220227 150505,220227 150406)转换得到的PostGIS几何对象。", "sql": "SELECT ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)');", "execution_result": [["0108000000030000000000000060E30A4100000000785C02410000000018E20A4100000000485F02410000000018E20A4100000000305C0241"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object of a CIRCULARSTRING arc defined by the three control points 220268 150415, 220227 150505, and 220227 150406.", "source": "original", "new_id": 1382}
{"id": 248, "function": "ST_GeomFromText", "question": "将圆形弧线的WKT表示CIRCULARSTRING(220268 150415,220227 150505,220227 150406)转换为PostGIS内部几何格式并返回。", "sql": "SELECT ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)');", "execution_result": [["0108000000030000000000000060E30A4100000000785C02410000000018E20A4100000000485F02410000000018E20A4100000000305C0241"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object of a CIRCULARSTRING arc defined by the three control points 220268 150415, 220227 150505, and 220227 150406.", "source": "original", "new_id": 1383}
{"id": 248, "function": "ST_GeomFromText", "question": "输出由三个控制点220268 150415、220227 150505和220227 150406定义的圆弧线CIRCULARSTRING的几何对象。", "sql": "SELECT ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)');", "execution_result": [["0108000000030000000000000060E30A4100000000785C02410000000018E20A4100000000485F02410000000018E20A4100000000305C0241"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object of a CIRCULARSTRING arc defined by the three control points 220268 150415, 220227 150505, and 220227 150406.", "source": "original", "new_id": 1384}
{"id": 249, "function": "ST_GeomFromText", "question": "使用ST_GeomFromText函数将以下WKT字符串转换为几何对象：'MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))'，并指定SRID为4326。", "sql": "SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a MULTIPOLYGON geometry object composed of two polygons. The first polygon's vertex coordinates are (-71.1031880899493 42.3152774590236), (-71.1031627617667 42.3152960829043), (-71.102923838298 42.3149156848307), (-71.1023097974109 42.3151969047397), (-71.1019285062273 42.3147384934248), (-71.102505233663 42.3144722937587), (-71.10277487471 42.3141658254797), (-71.103113945163 42.3142739188902), (-71.10324876416 42.31402489987), (-71.1033002961013 42.3140393340215), (-71.1033488797549 42.3139495090772), (-71.103396240451 42.3138632439557), (-71.1041521907712 42.3141153348029), (-71.1041411411543 42.3141545014533), (-71.1041287795912 42.3142114839058), (-71.1041188134329 42.3142693656241), (-71.1041112482575 42.3143272556118), (-71.1041072845732 42.3143851580048), (-71.1041057218871 42.3144430686681), (-71.1041065602059 42.3145009876017), (-71.1041097995362 42.3145589148055), (-71.1041166403905 42.3146168544148), (-71.1041258822717 42.3146748022936), (-71.1041375307579 42.3147318674446), (-71.1041492906949 42.3147711126569), (-71.1041598612795 42.314808571739), (-71.1042515013869 42.3151287620809), (-71.1041173835118 42.3150739481917), (-71.1040809891419 42.3151344119048), (-71.1040438678912 42.3151191367447), (-71.1040194562988 42.3151832057859), (-71.1038734225584 42.3151140942995), (-71.1038446938243 42.3151006300338), (-71.1038315271889 42.315094347535), (-71.1037393329282 42.315054824985), (-71.1035447555574 42.3152608696313), (-71.1033436658644 42.3151648370544), (-71.1032580383161 42.3152269126061), (-71.103223066939 42.3152517403219), (-71.1031880899493 42.3152774590236). The second polygon's vertex coordinates are (-71.1043632495873 42.315113108546), (-71.1043583974082 42.3151211109857), (-71.1043443253471 42.3150676015829), (-71.1043850704575 42.3150793250568), (-71.1043632495873 42.315113108546). The spatial reference system is EPSG:4326.", "source": "original", "new_id": 1385}
{"id": 249, "function": "ST_GeomFromText", "question": "创建包含两个多边形（第一个由34个顶点组成，第二个由5个顶点组成）的多边形集合对象，坐标为'MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))'，SRID为4326。", "sql": "SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a MULTIPOLYGON geometry object composed of two polygons. The first polygon's vertex coordinates are (-71.1031880899493 42.3152774590236), (-71.1031627617667 42.3152960829043), (-71.102923838298 42.3149156848307), (-71.1023097974109 42.3151969047397), (-71.1019285062273 42.3147384934248), (-71.102505233663 42.3144722937587), (-71.10277487471 42.3141658254797), (-71.103113945163 42.3142739188902), (-71.10324876416 42.31402489987), (-71.1033002961013 42.3140393340215), (-71.1033488797549 42.3139495090772), (-71.103396240451 42.3138632439557), (-71.1041521907712 42.3141153348029), (-71.1041411411543 42.3141545014533), (-71.1041287795912 42.3142114839058), (-71.1041188134329 42.3142693656241), (-71.1041112482575 42.3143272556118), (-71.1041072845732 42.3143851580048), (-71.1041057218871 42.3144430686681), (-71.1041065602059 42.3145009876017), (-71.1041097995362 42.3145589148055), (-71.1041166403905 42.3146168544148), (-71.1041258822717 42.3146748022936), (-71.1041375307579 42.3147318674446), (-71.1041492906949 42.3147711126569), (-71.1041598612795 42.314808571739), (-71.1042515013869 42.3151287620809), (-71.1041173835118 42.3150739481917), (-71.1040809891419 42.3151344119048), (-71.1040438678912 42.3151191367447), (-71.1040194562988 42.3151832057859), (-71.1038734225584 42.3151140942995), (-71.1038446938243 42.3151006300338), (-71.1038315271889 42.315094347535), (-71.1037393329282 42.315054824985), (-71.1035447555574 42.3152608696313), (-71.1033436658644 42.3151648370544), (-71.1032580383161 42.3152269126061), (-71.103223066939 42.3152517403219), (-71.1031880899493 42.3152774590236). The second polygon's vertex coordinates are (-71.1043632495873 42.315113108546), (-71.1043583974082 42.3151211109857), (-71.1043443253471 42.3150676015829), (-71.1043850704575 42.3150793250568), (-71.1043632495873 42.315113108546). The spatial reference system is EPSG:4326.", "source": "original", "new_id": 1386}
{"id": 249, "function": "ST_GeomFromText", "question": "使用ST_GeomFromText函数将WKT格式的MULTIPOLYGON几何对象转换为空间几何对象，该MULTIPOLYGON由两个多边形组成：第一个多边形坐标依次为((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236))；第二个多边形坐标依次为((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546))，并指定空间参考系统为EPSG:4326。", "sql": "SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a MULTIPOLYGON geometry object composed of two polygons. The first polygon's vertex coordinates are (-71.1031880899493 42.3152774590236), (-71.1031627617667 42.3152960829043), (-71.102923838298 42.3149156848307), (-71.1023097974109 42.3151969047397), (-71.1019285062273 42.3147384934248), (-71.102505233663 42.3144722937587), (-71.10277487471 42.3141658254797), (-71.103113945163 42.3142739188902), (-71.10324876416 42.31402489987), (-71.1033002961013 42.3140393340215), (-71.1033488797549 42.3139495090772), (-71.103396240451 42.3138632439557), (-71.1041521907712 42.3141153348029), (-71.1041411411543 42.3141545014533), (-71.1041287795912 42.3142114839058), (-71.1041188134329 42.3142693656241), (-71.1041112482575 42.3143272556118), (-71.1041072845732 42.3143851580048), (-71.1041057218871 42.3144430686681), (-71.1041065602059 42.3145009876017), (-71.1041097995362 42.3145589148055), (-71.1041166403905 42.3146168544148), (-71.1041258822717 42.3146748022936), (-71.1041375307579 42.3147318674446), (-71.1041492906949 42.3147711126569), (-71.1041598612795 42.314808571739), (-71.1042515013869 42.3151287620809), (-71.1041173835118 42.3150739481917), (-71.1040809891419 42.3151344119048), (-71.1040438678912 42.3151191367447), (-71.1040194562988 42.3151832057859), (-71.1038734225584 42.3151140942995), (-71.1038446938243 42.3151006300338), (-71.1038315271889 42.315094347535), (-71.1037393329282 42.315054824985), (-71.1035447555574 42.3152608696313), (-71.1033436658644 42.3151648370544), (-71.1032580383161 42.3152269126061), (-71.103223066939 42.3152517403219), (-71.1031880899493 42.3152774590236). The second polygon's vertex coordinates are (-71.1043632495873 42.315113108546), (-71.1043583974082 42.3151211109857), (-71.1043443253471 42.3150676015829), (-71.1043850704575 42.3150793250568), (-71.1043632495873 42.315113108546). The spatial reference system is EPSG:4326.", "source": "original", "new_id": 1387}
{"id": 249, "function": "ST_GeomFromText", "question": "返回一个包含两个复杂多边形的空间几何对象，其坐标数据来自精确的WKT字符串定义MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))'。", "sql": "SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a MULTIPOLYGON geometry object composed of two polygons. The first polygon's vertex coordinates are (-71.1031880899493 42.3152774590236), (-71.1031627617667 42.3152960829043), (-71.102923838298 42.3149156848307), (-71.1023097974109 42.3151969047397), (-71.1019285062273 42.3147384934248), (-71.102505233663 42.3144722937587), (-71.10277487471 42.3141658254797), (-71.103113945163 42.3142739188902), (-71.10324876416 42.31402489987), (-71.1033002961013 42.3140393340215), (-71.1033488797549 42.3139495090772), (-71.103396240451 42.3138632439557), (-71.1041521907712 42.3141153348029), (-71.1041411411543 42.3141545014533), (-71.1041287795912 42.3142114839058), (-71.1041188134329 42.3142693656241), (-71.1041112482575 42.3143272556118), (-71.1041072845732 42.3143851580048), (-71.1041057218871 42.3144430686681), (-71.1041065602059 42.3145009876017), (-71.1041097995362 42.3145589148055), (-71.1041166403905 42.3146168544148), (-71.1041258822717 42.3146748022936), (-71.1041375307579 42.3147318674446), (-71.1041492906949 42.3147711126569), (-71.1041598612795 42.314808571739), (-71.1042515013869 42.3151287620809), (-71.1041173835118 42.3150739481917), (-71.1040809891419 42.3151344119048), (-71.1040438678912 42.3151191367447), (-71.1040194562988 42.3151832057859), (-71.1038734225584 42.3151140942995), (-71.1038446938243 42.3151006300338), (-71.1038315271889 42.315094347535), (-71.1037393329282 42.315054824985), (-71.1035447555574 42.3152608696313), (-71.1033436658644 42.3151648370544), (-71.1032580383161 42.3152269126061), (-71.103223066939 42.3152517403219), (-71.1031880899493 42.3152774590236). The second polygon's vertex coordinates are (-71.1043632495873 42.315113108546), (-71.1043583974082 42.3151211109857), (-71.1043443253471 42.3150676015829), (-71.1043850704575 42.3150793250568), (-71.1043632495873 42.315113108546). The spatial reference system is EPSG:4326.", "source": "original", "new_id": 1388}
{"id": 249, "function": "ST_GeomFromText", "question": "输出由两个多边形组成的MULTIPOLYGON几何对象的WKT表示，其中第一个多边形的顶点坐标依次为(-71.1031880899493 42.3152774590236), (-71.1031627617667 42.3152960829043), (-71.102923838298 42.3149156848307), (-71.1023097974109 42.3151969047397), (-71.1019285062273 42.3147384934248), (-71.102505233663 42.3144722937587), (-71.10277487471 42.3141658254797), (-71.103113945163 42.3142739188902), (-71.10324876416 42.31402489987), (-71.1033002961013 42.3140393340215), (-71.1033488797549 42.3139495090772), (-71.103396240451 42.3138632439557), (-71.1041521907712 42.3141153348029), (-71.1041411411543 42.3141545014533), (-71.1041287795912 42.3142114839058), (-71.1041188134329 42.3142693656241), (-71.1041112482575 42.3143272556118), (-71.1041072845732 42.3143851580048), (-71.1041057218871 42.3144430686681), (-71.1041065602059 42.3145009876017), (-71.1041097995362 42.3145589148055), (-71.1041166403905 42.3146168544148), (-71.1041258822717 42.3146748022936), (-71.1041375307579 42.3147318674446), (-71.1041492906949 42.3147711126569), (-71.1041598612795 42.314808571739), (-71.1042515013869 42.3151287620809), (-71.1041173835118 42.3150739481917), (-71.1040809891419 42.3151344119048), (-71.1040438678912 42.3151191367447), (-71.1040194562988 42.3151832057859), (-71.1038734225584 42.3151140942995), (-71.1038446938243 42.3151006300338), (-71.1038315271889 42.315094347535), (-71.1037393329282 42.315054824985), (-71.1035447555574 42.3152608696313), (-71.1033436658644 42.3151648370544), (-71.1032580383161 42.3152269126061), (-71.103223066939 42.3152517403219), (-71.1031880899493 42.3152774590236)，第二个多边形的顶点坐标依次为(-71.1043632495873 42.315113108546), (-71.1043583974082 42.3151211109857), (-71.1043443253471 42.3150676015829), (-71.1043850704575 42.3150793250568), (-71.1043632495873 42.315113108546)，空间参考系为EPSG:4326。", "sql": "SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);", "execution_result": [["0106000020E61000000200000001030000000100000028000000D0EA37A29AC651C00FD603035B284540FEFCFB379AC651C0C0503E9F5B284540FFDDDD4D96C651C033AC3B284F2845402C7C643E8CC651C027D4465F58284540B03124FF85C651C0A206D8594928454017901C728FC651C08A98CCA040284540B76E11DD93C651C063FAF49536284540258F3B6B99C651C041CFB5203A284540DB5AB4A09BC651C02189C9F731284540055BD8789CC651C0D6A3DE703228454009A89E449DC651C0790A5D7F2F2845400DD1430B9EC651C0651AB8AB2C284540D24AF36DAAC651C0451369EE3428454041DB9A3FAAC651C00AD1F63636284540AABAC10BAAC651C097B3F71438284540EEA5F4E1A9C651C0BEBE83FA39284540599A39C2A9C651C00C8C21E03B2845401BA199B1A9C651C03CFDD9C53D28454038B50BABA9C651C01231A4AB3F2845408AD88FAEA9C651C08D27809141284540DF0C26BCA9C651C0A0E06D7743284540955CD7D8A9C651C0B13D765D452845408BC19AFFA9C651C0F75C9043472845400C397630AAC651C07FD7422249284540EB5BC961AAC651C0204B796B4A28454016701F8EAAC651C04B0FB4A54B28454000417D0EACC651C04E95A723562845403648F5DBA9C651C009A7D75754284540FD1F4F43A9C651C0D77C0C53562845404B7C9CA7A8C651C0C454E9D255284540DEBC3841A8C651C0A88C5CEC57284540F633B6DCA5C651C034C39CA855284540AAF53664A5C651C0DA78AA37552845407C64FD2CA5C651C09DE8F60255284540128F4CAAA3C651C0F8E06CB753284540A5B22E7AA0C651C03263DA775A284540BA48C02E9DC651C0B8FF45525728454079679AC79BC651C02B3B005B59284540882CEC349BC651C04658452B5A284540D0EA37A29AC651C00FD603035B284540010300000001000000050000006EF831E3ADC651C07CDF57A05528454099FBD7CEADC651C03CFB78E355284540E538D293ADC651C0F3699A22542845408FF3B73EAEC651C0E261F284542845406EF831E3ADC651C07CDF57A055284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a MULTIPOLYGON geometry object composed of two polygons. The first polygon's vertex coordinates are (-71.1031880899493 42.3152774590236), (-71.1031627617667 42.3152960829043), (-71.102923838298 42.3149156848307), (-71.1023097974109 42.3151969047397), (-71.1019285062273 42.3147384934248), (-71.102505233663 42.3144722937587), (-71.10277487471 42.3141658254797), (-71.103113945163 42.3142739188902), (-71.10324876416 42.31402489987), (-71.1033002961013 42.3140393340215), (-71.1033488797549 42.3139495090772), (-71.103396240451 42.3138632439557), (-71.1041521907712 42.3141153348029), (-71.1041411411543 42.3141545014533), (-71.1041287795912 42.3142114839058), (-71.1041188134329 42.3142693656241), (-71.1041112482575 42.3143272556118), (-71.1041072845732 42.3143851580048), (-71.1041057218871 42.3144430686681), (-71.1041065602059 42.3145009876017), (-71.1041097995362 42.3145589148055), (-71.1041166403905 42.3146168544148), (-71.1041258822717 42.3146748022936), (-71.1041375307579 42.3147318674446), (-71.1041492906949 42.3147711126569), (-71.1041598612795 42.314808571739), (-71.1042515013869 42.3151287620809), (-71.1041173835118 42.3150739481917), (-71.1040809891419 42.3151344119048), (-71.1040438678912 42.3151191367447), (-71.1040194562988 42.3151832057859), (-71.1038734225584 42.3151140942995), (-71.1038446938243 42.3151006300338), (-71.1038315271889 42.315094347535), (-71.1037393329282 42.315054824985), (-71.1035447555574 42.3152608696313), (-71.1033436658644 42.3151648370544), (-71.1032580383161 42.3152269126061), (-71.103223066939 42.3152517403219), (-71.1031880899493 42.3152774590236). The second polygon's vertex coordinates are (-71.1043632495873 42.315113108546), (-71.1043583974082 42.3151211109857), (-71.1043443253471 42.3150676015829), (-71.1043850704575 42.3150793250568), (-71.1043632495873 42.315113108546). The spatial reference system is EPSG:4326.", "source": "original", "new_id": 1389}
{"id": 249, "function": "ST_GeomFromText", "question": "输出由两个多边形组成的MULTIPOLYGON几何对象的WKT表示，第一个多边形的顶点坐标依次为(-71.1031880899493 42.3152774590236), (-71.1031627617667 42.3152960829043), (-71.102923838298 42.3149156848307), (-71.1023097974109 42.3151969047397), (-71.1019285062273 42.3147384934248), (-71.102505233663 42.3144722937587), (-71.10277487471 42.3141658254797), (-71.103113945163 42.3142739188902), (-71.10324876416 42.31402489987), (-71.1033002961013 42.3140393340215), (-71.1033488797549 42.3139495090772), (-71.103396240451 42.3138632439557), (-71.1041521907712 42.3141153348029), (-71.1041411411543 42.3141545014533), (-71.1041287795912 42.3142114839058), (-71.1041188134329 42.3142693656241), (-71.1041112482575 42.3143272556118), (-71.1041072845732 42.3143851580048), (-71.1041057218871 42.3144430686681), (-71.1041065602059 42.3145009876017), (-71.1041097995362 42.3145589148055), (-71.1041166403905 42.3146168544148), (-71.1041258822717 42.3146748022936), (-71.1041375307579 42.3147318674446), (-71.1041492906949 42.3147711126569), (-71.1041598612795 42.314808571739), (-71.1042515013869 42.3151287620809), (-71.1041173835118 42.3150739481917), (-71.1040809891419 42.3151344119048), (-71.1040438678912 42.3151191367447), (-71.1040194562988 42.3151832057859), (-71.1038734225584 42.3151140942995), (-71.1038446938243 42.3151006300338), (-71.1038315271889 42.315094347535), (-71.1037393329282 42.315054824985), (-71.1035447555574 42.3152608696313), (-71.1033436658644 42.3151648370544), (-71.1032580383161 42.3152269126061), (-71.103223066939 42.3152517403219), (-71.1031880899493 42.3152774590236)，第二个多边形的顶点坐标依次为(-71.1043632495873 42.315113108546), (-71.1043583974082 42.3151211109857), (-71.1043443253471 42.3150676015829), (-71.1043850704575 42.3150793250568), (-71.1043632495873 42.315113108546)，空间参考系为EPSG:4326。", "sql": "SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a MULTIPOLYGON geometry object composed of two polygons. The first polygon's vertex coordinates are (-71.1031880899493 42.3152774590236), (-71.1031627617667 42.3152960829043), (-71.102923838298 42.3149156848307), (-71.1023097974109 42.3151969047397), (-71.1019285062273 42.3147384934248), (-71.102505233663 42.3144722937587), (-71.10277487471 42.3141658254797), (-71.103113945163 42.3142739188902), (-71.10324876416 42.31402489987), (-71.1033002961013 42.3140393340215), (-71.1033488797549 42.3139495090772), (-71.103396240451 42.3138632439557), (-71.1041521907712 42.3141153348029), (-71.1041411411543 42.3141545014533), (-71.1041287795912 42.3142114839058), (-71.1041188134329 42.3142693656241), (-71.1041112482575 42.3143272556118), (-71.1041072845732 42.3143851580048), (-71.1041057218871 42.3144430686681), (-71.1041065602059 42.3145009876017), (-71.1041097995362 42.3145589148055), (-71.1041166403905 42.3146168544148), (-71.1041258822717 42.3146748022936), (-71.1041375307579 42.3147318674446), (-71.1041492906949 42.3147711126569), (-71.1041598612795 42.314808571739), (-71.1042515013869 42.3151287620809), (-71.1041173835118 42.3150739481917), (-71.1040809891419 42.3151344119048), (-71.1040438678912 42.3151191367447), (-71.1040194562988 42.3151832057859), (-71.1038734225584 42.3151140942995), (-71.1038446938243 42.3151006300338), (-71.1038315271889 42.315094347535), (-71.1037393329282 42.315054824985), (-71.1035447555574 42.3152608696313), (-71.1033436658644 42.3151648370544), (-71.1032580383161 42.3152269126061), (-71.103223066939 42.3152517403219), (-71.1031880899493 42.3152774590236). The second polygon's vertex coordinates are (-71.1043632495873 42.315113108546), (-71.1043583974082 42.3151211109857), (-71.1043443253471 42.3150676015829), (-71.1043850704575 42.3150793250568), (-71.1043632495873 42.315113108546). The spatial reference system is EPSG:4326.", "source": "original", "new_id": 1390}
{"id": 250, "function": "ST_GeomFromText", "question": "将WKT字符串'LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)'转换为SRID为4269的线几何对象。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a LINESTRING geometry object with coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), using the EPSG:4269 spatial reference system.", "source": "original", "new_id": 1391}
{"id": 250, "function": "ST_GeomFromText", "question": "使用坐标点(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)创建一条线几何，空间参考为4269。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a LINESTRING geometry object with coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), using the EPSG:4269 spatial reference system.", "source": "original", "new_id": 1392}
{"id": 250, "function": "ST_GeomFromText", "question": "使用SRID为4269的空间参考系统，从WKT格式的字符串创建一个包含三个顶点的二维线几何对象，具体坐标为：第一个顶点(-71.160281 42.258729)，第二个顶点(-71.160837 42.259113)，第三个顶点(-71.161144 42.25932)。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a LINESTRING geometry object with coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), using the EPSG:4269 spatial reference system.", "source": "original", "new_id": 1393}
{"id": 250, "function": "ST_GeomFromText", "question": "输出由坐标点(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)构成的线几何对象，空间参考为4269。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a LINESTRING geometry object with coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), using the EPSG:4269 spatial reference system.", "source": "original", "new_id": 1394}
{"id": 250, "function": "ST_GeomFromText", "question": "返回一个PostGIS线几何对象，其WKT表示为'LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)'，SRID为4269。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a LINESTRING geometry object with coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), using the EPSG:4269 spatial reference system.", "source": "original", "new_id": 1395}
{"id": 250, "function": "ST_GeomFromText", "question": "输出由坐标点(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)构成的LINESTRING几何对象，其空间参考系为EPSG:4269的WKT格式表示。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a LINESTRING geometry object with coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), using the EPSG:4269 spatial reference system.", "source": "original", "new_id": 1396}
{"id": 251, "function": "ST_GeomFromText", "question": "将WKT格式的'POINT(-71.064544 42.28787)'转换为几何对象。", "sql": "SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the PostGIS geometry object converted from the WKT string 'POINT(-71.064544 42.28787)', where the X coordinate is -71.064544 and the Y coordinate is 42.28787.", "source": "original", "new_id": 1397}
{"id": 251, "function": "ST_GeomFromText", "question": "将文本格式的二维点POINT(-71.064544 42.28787)创建为几何对象，其中X坐标为-71.064544，Y坐标为42.28787。", "sql": "SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the PostGIS geometry object converted from the WKT string 'POINT(-71.064544 42.28787)', where the X coordinate is -71.064544 and the Y coordinate is 42.28787.", "source": "original", "new_id": 1398}
{"id": 251, "function": "ST_GeomFromText", "question": "将WKT格式的二维点POINT(-71.064544 42.28787)转换为PostGIS几何对象，其中X坐标为-71.064544，Y坐标为42.28787。", "sql": "SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the PostGIS geometry object converted from the WKT string 'POINT(-71.064544 42.28787)', where the X coordinate is -71.064544 and the Y coordinate is 42.28787.", "source": "original", "new_id": 1399}
{"id": 251, "function": "ST_GeomFromText", "question": "输出由'POINT(-71.064544 42.28787)'转换得到的几何对象。", "sql": "SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the PostGIS geometry object converted from the WKT string 'POINT(-71.064544 42.28787)', where the X coordinate is -71.064544 and the Y coordinate is 42.28787.", "source": "original", "new_id": 1400}
{"id": 251, "function": "ST_GeomFromText", "question": "输出由WKT字符串'POINT(-71.064544 42.28787)'转换得到的PostGIS几何对象，其中-71.064544表示经度，42.28787表示纬度。", "sql": "SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the PostGIS geometry object converted from the WKT string 'POINT(-71.064544 42.28787)', where the X coordinate is -71.064544 and the Y coordinate is 42.28787.", "source": "original", "new_id": 1401}
{"id": 251, "function": "ST_GeomFromText", "question": "输出由WKT字符串'POINT(-71.064544 42.28787)'转换得到的PostGIS几何对象，其中X坐标为-71.064544，Y坐标为42.28787。", "sql": "SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the PostGIS geometry object converted from the WKT string 'POINT(-71.064544 42.28787)', where the X coordinate is -71.064544 and the Y coordinate is 42.28787.", "source": "original", "new_id": 1402}
{"id": 252, "function": "ST_GeomFromText", "question": "将WKT字符串'LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)'转换为PostGIS几何对象。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string for a LINESTRING geometry object formed by the three coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932).", "source": "original", "new_id": 1403}
{"id": 252, "function": "ST_GeomFromText", "question": "使用坐标点(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)构建一条折线。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string for a LINESTRING geometry object formed by the three coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932).", "source": "original", "new_id": 1404}
{"id": 252, "function": "ST_GeomFromText", "question": "使用ST_GeomFromText函数将WKT格式的LINESTRING几何对象转换为PostGIS几何对象，该折线由三个二维点构成，坐标依次为：第一个点X坐标-71.160281、Y坐标42.258729；第二个点X坐标-71.160837、Y坐标42.259113；第三个点X坐标-71.161144、Y坐标42.25932。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string for a LINESTRING geometry object formed by the three coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932).", "source": "original", "new_id": 1405}
{"id": 252, "function": "ST_GeomFromText", "question": "输出由坐标点(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)构成的折线几何对象。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string for a LINESTRING geometry object formed by the three coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932).", "source": "original", "new_id": 1406}
{"id": 252, "function": "ST_GeomFromText", "question": "将输入的WKT折线字符串LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)转换为PostGIS内部几何格式并返回。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string for a LINESTRING geometry object formed by the three coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932).", "source": "original", "new_id": 1407}
{"id": 252, "function": "ST_GeomFromText", "question": "输出由三个坐标点(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)构成的LINESTRING类型几何对象的WKT格式字符串。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT format string for a LINESTRING geometry object formed by the three coordinate points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932).", "source": "original", "new_id": 1408}
{"id": 253, "function": "ST_LineFromText", "question": "将LINESTRING(1 2, 3 4)转换为线对象，将POINT(1 2)转换为线对象（返回空值）。", "sql": "SELECT ST_LineFromText('LINESTRING(1 2, 3 4)') AS aline, ST_LineFromText('POINT(1 2)') AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the WKT string 'LINESTRING(1 2, 3 4)' to a line geometry object (named aline), and the NULL value returned when incorrectly converting 'POINT(1 2)' to a line geometry object (named null_return).", "source": "original", "new_id": 1409}
{"id": 253, "function": "ST_LineFromText", "question": "使用ST_LineFromText函数处理LINESTRING(1 2, 3 4)和POINT(1 2)两个WKT字符串。", "sql": "SELECT ST_LineFromText('LINESTRING(1 2, 3 4)') AS aline, ST_LineFromText('POINT(1 2)') AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the WKT string 'LINESTRING(1 2, 3 4)' to a line geometry object (named aline), and the NULL value returned when incorrectly converting 'POINT(1 2)' to a line geometry object (named null_return).", "source": "original", "new_id": 1410}
{"id": 253, "function": "ST_LineFromText", "question": "使用ST_LineFromText函数分别将WKT格式的LINESTRING(1 2, 3 4)转换为线几何对象并命名为aline，以及将POINT(1 2)转换为线几何对象（由于输入是点类型将返回NULL）并命名为null_return。", "sql": "SELECT ST_LineFromText('LINESTRING(1 2, 3 4)') AS aline, ST_LineFromText('POINT(1 2)') AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the WKT string 'LINESTRING(1 2, 3 4)' to a line geometry object (named aline), and the NULL value returned when incorrectly converting 'POINT(1 2)' to a line geometry object (named null_return).", "source": "original", "new_id": 1411}
{"id": 253, "function": "ST_LineFromText", "question": "输出LINESTRING(1 2, 3 4)转换后的线几何对象，以及POINT(1 2)转换失败的空值结果。", "sql": "SELECT ST_LineFromText('LINESTRING(1 2, 3 4)') AS aline, ST_LineFromText('POINT(1 2)') AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the WKT string 'LINESTRING(1 2, 3 4)' to a line geometry object (named aline), and the NULL value returned when incorrectly converting 'POINT(1 2)' to a line geometry object (named null_return).", "source": "original", "new_id": 1412}
{"id": 253, "function": "ST_LineFromText", "question": "输出将WKT字符串'LINESTRING(1 2, 3 4)'转换为几何线对象的结果列（命名为aline），以及将无效线类型的WKT字符串'POINT(1 2)'转换为几何对象时返回的NULL值结果列（命名为null_return）。", "sql": "SELECT ST_LineFromText('LINESTRING(1 2, 3 4)') AS aline, ST_LineFromText('POINT(1 2)') AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the WKT string 'LINESTRING(1 2, 3 4)' to a line geometry object (named aline), and the NULL value returned when incorrectly converting 'POINT(1 2)' to a line geometry object (named null_return).", "source": "original", "new_id": 1413}
{"id": 253, "function": "ST_LineFromText", "question": "输出将WKT字符串'LINESTRING(1 2, 3 4)'转换为线几何对象的结果（命名为aline），以及将'POINT(1 2)'错误转换为线几何对象时返回的NULL值（命名为null_return）。", "sql": "SELECT ST_LineFromText('LINESTRING(1 2, 3 4)') AS aline, ST_LineFromText('POINT(1 2)') AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the WKT string 'LINESTRING(1 2, 3 4)' to a line geometry object (named aline), and the NULL value returned when incorrectly converting 'POINT(1 2)' to a line geometry object (named null_return).", "source": "original", "new_id": 1414}
{"id": 254, "function": "ST_MLineFromText", "question": "将WKT字符串'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))'转换为多线几何对象。", "sql": "SELECT ST_MLineFromText('MULTILINESTRING((1 2, 3 4), (4 5, 6 7))');", "execution_result": [["010500000002000000010200000002000000000000000000F03F0000000000000040000000000000084000000000000010400102000000020000000000000000001040000000000000144000000000000018400000000000001C40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the WKT-formatted string 'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))' into a PostGIS multilinestring geometry object and output it, where the multilinestring contains two linestrings: the first connects POINT(1 2) and POINT(3 4), and the second connects POINT(4 5) and POINT(6 7).", "source": "original", "new_id": 1415}
{"id": 254, "function": "ST_MLineFromText", "question": "创建由两条线段组成的多线对象'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))'，第一条线段连接点(1 2)和(3 4)，第二条线段连接点(4 5)和(6 7)。", "sql": "SELECT ST_MLineFromText('MULTILINESTRING((1 2, 3 4), (4 5, 6 7))');", "execution_result": [["010500000002000000010200000002000000000000000000F03F0000000000000040000000000000084000000000000010400102000000020000000000000000001040000000000000144000000000000018400000000000001C40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the WKT-formatted string 'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))' into a PostGIS multilinestring geometry object and output it, where the multilinestring contains two linestrings: the first connects POINT(1 2) and POINT(3 4), and the second connects POINT(4 5) and POINT(6 7).", "source": "original", "new_id": 1416}
{"id": 254, "function": "ST_MLineFromText", "question": "使用ST_MLineFromText函数将WKT格式的字符串'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))'转换为多线几何对象，其中包含两条线段：第一条线段从点POINT(1 2)到点POINT(3 4)，第二条线段从点POINT(4 5)到点POINT(6 7)。", "sql": "SELECT ST_MLineFromText('MULTILINESTRING((1 2, 3 4), (4 5, 6 7))');", "execution_result": [["010500000002000000010200000002000000000000000000F03F0000000000000040000000000000084000000000000010400102000000020000000000000000001040000000000000144000000000000018400000000000001C40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the WKT-formatted string 'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))' into a PostGIS multilinestring geometry object and output it, where the multilinestring contains two linestrings: the first connects POINT(1 2) and POINT(3 4), and the second connects POINT(4 5) and POINT(6 7).", "source": "original", "new_id": 1417}
{"id": 254, "function": "ST_MLineFromText", "question": "由'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))'定义多线几何对象。", "sql": "SELECT ST_MLineFromText('MULTILINESTRING((1 2, 3 4), (4 5, 6 7))');", "execution_result": [["010500000002000000010200000002000000000000000000F03F0000000000000040000000000000084000000000000010400102000000020000000000000000001040000000000000144000000000000018400000000000001C40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the WKT-formatted string 'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))' into a PostGIS multilinestring geometry object and output it, where the multilinestring contains two linestrings: the first connects POINT(1 2) and POINT(3 4), and the second connects POINT(4 5) and POINT(6 7).", "source": "original", "new_id": 1418}
{"id": 254, "function": "ST_MLineFromText", "question": "由两条线段(1 2, 3 4), (4 5, 6 7)组成的多线几何对象的PostGIS内部表示。", "sql": "SELECT ST_MLineFromText('MULTILINESTRING((1 2, 3 4), (4 5, 6 7))');", "execution_result": [["010500000002000000010200000002000000000000000000F03F0000000000000040000000000000084000000000000010400102000000020000000000000000001040000000000000144000000000000018400000000000001C40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the WKT-formatted string 'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))' into a PostGIS multilinestring geometry object and output it, where the multilinestring contains two linestrings: the first connects POINT(1 2) and POINT(3 4), and the second connects POINT(4 5) and POINT(6 7).", "source": "original", "new_id": 1419}
{"id": 254, "function": "ST_MLineFromText", "question": "将WKT格式的字符串'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))'转换为PostGIS的多线几何对象并输出，该多线几何对象包含两条线段，第一条线段连接点POINT(1 2)和POINT(3 4)，第二条线段连接点POINT(4 5)和POINT(6 7)。", "sql": "SELECT ST_MLineFromText('MULTILINESTRING((1 2, 3 4), (4 5, 6 7))');", "execution_result": [["010500000002000000010200000002000000000000000000F03F0000000000000040000000000000084000000000000010400102000000020000000000000000001040000000000000144000000000000018400000000000001C40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the WKT-formatted string 'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))' into a PostGIS multilinestring geometry object and output it, where the multilinestring contains two linestrings: the first connects POINT(1 2) and POINT(3 4), and the second connects POINT(4 5) and POINT(6 7).", "source": "original", "new_id": 1420}
{"id": 255, "function": "ST_MPointFromText", "question": "使用坐标(-70.9590 42.1180)和(-70.9611 42.1223)创建SRID为4326的多点几何对象。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))', 4326);", "execution_result": [["0104000020E61000000200000001010000004C37894160BD51C0C976BE9F1A0F45400101000000E10B93A982BD51C08126C286A70F4540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the binary format of the WKT string 'MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))' converted to a multipoint geometry object with SRID 4326.", "source": "original", "new_id": 1421}
{"id": 255, "function": "ST_MPointFromText", "question": "将包含点(-70.9590 42.1180)和点(-70.9611 42.1223)的MULTIPOINT文本转换为4326坐标系的空间对象。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))', 4326);", "execution_result": [["0104000020E61000000200000001010000004C37894160BD51C0C976BE9F1A0F45400101000000E10B93A982BD51C08126C286A70F4540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the binary format of the WKT string 'MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))' converted to a multipoint geometry object with SRID 4326.", "source": "original", "new_id": 1422}
{"id": 255, "function": "ST_MPointFromText", "question": "使用SRID为4326的坐标系，将包含两个二维点的WKT字符串'MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))'转换为PostGIS的MULTIPOINT几何对象，其中第一个点坐标为经度-70.9590纬度42.1180，第二个点坐标为经度-70.9611纬度42.1223。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))', 4326);", "execution_result": [["0104000020E61000000200000001010000004C37894160BD51C0C976BE9F1A0F45400101000000E10B93A982BD51C08126C286A70F4540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the binary format of the WKT string 'MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))' converted to a multipoint geometry object with SRID 4326.", "source": "original", "new_id": 1423}
{"id": 255, "function": "ST_MPointFromText", "question": "输出由点(-70.9590 42.1180)和点(-70.9611 42.1223)构成的多点几何对象，坐标系为WGS84。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))', 4326);", "execution_result": [["0104000020E61000000200000001010000004C37894160BD51C0C976BE9F1A0F45400101000000E10B93A982BD51C08126C286A70F4540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the binary format of the WKT string 'MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))' converted to a multipoint geometry object with SRID 4326.", "source": "original", "new_id": 1424}
{"id": 255, "function": "ST_MPointFromText", "question": "生成并返回一个包含指定坐标的多点几何对象MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))，空间参考系统为EPSG 4326。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))', 4326);", "execution_result": [["0104000020E61000000200000001010000004C37894160BD51C0C976BE9F1A0F45400101000000E10B93A982BD51C08126C286A70F4540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the binary format of the WKT string 'MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))' converted to a multipoint geometry object with SRID 4326.", "source": "original", "new_id": 1425}
{"id": 255, "function": "ST_MPointFromText", "question": "输出将WKT字符串'MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))'转换为SRID为4326的多点几何对象的二进制格式。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))', 4326);", "execution_result": [["0104000020E61000000200000001010000004C37894160BD51C0C976BE9F1A0F45400101000000E10B93A982BD51C08126C286A70F4540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the binary format of the WKT string 'MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))' converted to a multipoint geometry object with SRID 4326.", "source": "original", "new_id": 1426}
{"id": 256, "function": "ST_MPointFromText", "question": "将WKT格式的'MULTIPOINT((1 2),(3 4))'转换为多点几何对象。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((1 2),(3 4))');", "execution_result": [["0104000000020000000101000000000000000000F03F0000000000000040010100000000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object converted from the text 'MULTIPOINT((1 2),(3 4))' to MULTIPOINT type, which contains two 2D points POINT(1 2) and POINT(3 4).", "source": "original", "new_id": 1427}
{"id": 256, "function": "ST_MPointFromText", "question": "使用坐标点(1,2)和(3,4)创建多点几何对象。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((1 2),(3 4))');", "execution_result": [["0104000000020000000101000000000000000000F03F0000000000000040010100000000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object converted from the text 'MULTIPOINT((1 2),(3 4))' to MULTIPOINT type, which contains two 2D points POINT(1 2) and POINT(3 4).", "source": "original", "new_id": 1428}
{"id": 256, "function": "ST_MPointFromText", "question": "将WKT格式的字符串'MULTIPOINT((1 2),(3 4))'转换为MULTIPOINT类型的几何对象，其中包含两个二维点：第一个点的X坐标为1、Y坐标为2，第二个点的X坐标为3、Y坐标为4。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((1 2),(3 4))');", "execution_result": [["0104000000020000000101000000000000000000F03F0000000000000040010100000000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object converted from the text 'MULTIPOINT((1 2),(3 4))' to MULTIPOINT type, which contains two 2D points POINT(1 2) and POINT(3 4).", "source": "original", "new_id": 1429}
{"id": 256, "function": "ST_MPointFromText", "question": "输出由'MULTIPOINT((1 2),(3 4))'转换得到的PostGIS多点几何对象。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((1 2),(3 4))');", "execution_result": [["0104000000020000000101000000000000000000F03F0000000000000040010100000000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object converted from the text 'MULTIPOINT((1 2),(3 4))' to MULTIPOINT type, which contains two 2D points POINT(1 2) and POINT(3 4).", "source": "original", "new_id": 1430}
{"id": 256, "function": "ST_MPointFromText", "question": "将'MULTIPOINT((1 2),(3 4))'解析为PostGIS内部几何格式并返回。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((1 2),(3 4))');", "execution_result": [["0104000000020000000101000000000000000000F03F0000000000000040010100000000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object converted from the text 'MULTIPOINT((1 2),(3 4))' to MULTIPOINT type, which contains two 2D points POINT(1 2) and POINT(3 4).", "source": "original", "new_id": 1431}
{"id": 256, "function": "ST_MPointFromText", "question": "输出将文本'MULTIPOINT((1 2),(3 4))'转换为MULTIPOINT类型的几何对象的WKT字符串表示，其中包含两个二维点POINT(1 2)和POINT(3 4)。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((1 2),(3 4))');", "execution_result": [["0104000000020000000101000000000000000000F03F0000000000000040010100000000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the geometric object converted from the text 'MULTIPOINT((1 2),(3 4))' to MULTIPOINT type, which contains two 2D points POINT(1 2) and POINT(3 4).", "source": "original", "new_id": 1432}
{"id": 257, "function": "ST_MPolyFromText", "question": "根据WKT格式的文本'MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))'和SRID 4326，创建一个多面几何对象。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the polygon geometry object formed by the closed ring MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))), with the coordinate reference system WGS84 (SRID 4326).", "source": "original", "new_id": 1433}
{"id": 257, "function": "ST_MPolyFromText", "question": "使用ST_MPolyFromText函数，将包含以下坐标点的WKT格式文本转换为多面几何对象：(-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)，并指定SRID为4326。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the polygon geometry object formed by the closed ring MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))), with the coordinate reference system WGS84 (SRID 4326).", "source": "original", "new_id": 1434}
{"id": 257, "function": "ST_MPolyFromText", "question": "使用ST_MPolyFromText函数，将以下WKT格式的坐标串转换为SRID为4326的多边形集合：MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))',4326);", "execution_result": [["0106000020E61000000100000001030000000100000039000000B4C876BE9FBA51C09487855AD30C454094F6065F98BC51C0CE1951DA1B0C4540D122DBF97EBE51C0091B9E5E290B45402D211FF46CBE51C033333333330B4540B537F8C264BE51C0C1A8A44E400B4540CAC342AD69BE51C088635DDC460B45402D211FF46CBE51C06C09F9A0670B4540F5DBD78173BE51C096218E75710B4540A60A462575BE51C0C139234A7B0B4540A60A462575BE51C088F4DBD7810B45402D211FF46CBE51C0B30C71AC8B0B4540917EFB3A70BE51C04182E2C7980B45407CF2B0506BBE51C0A4DFBE0E9C0B45407CF2B0506BBE51C088855AD3BC0B454043AD69DE71BE51C0401361C3D30B4540DF4F8D976EBE51C0CE88D2DEE00B4540DF4F8D976EBE51C040A4DFBE0E0C45401895D40968BE51C095D40968220C4540DF4F8D976EBE51C087A757CA320C45401895D40968BE51C0787AA52C430C45401895D40968BE51C007F01648500C4540A60A462575BE51C031992A18950C45403480B74082BE51C0BF0E9C33A20C4540E6AE25E483BE51C04D840D4FAF0C4540FB3A70CE88BE51C0A2B437F8C20C4540FB3A70CE88BE51C0F7E461A1D60C4540E6AE25E483BE51C0BE9F1A2FDD0C45404A0C022B87BE51C014D044D8F00C45408351499D80BE51C030BB270F0B0D4540E6AE25E483BE51C0E9482EFF210D454098DD938785BE51C0A1D634EF380D4540C3F5285C8FBE51C0211FF46C560D45405F984C158CBE51C0857CD0B3590D4540742497FF90BE51C0857CD0B3590D4540D881734694BE51C0764F1E166A0D45405F984C158CBE51C05AF5B9DA8A0D454011C7BAB88DBE51C0840D4FAF940D45408AB0E1E995BE51C01283C0CAA10D45409F3C2CD49ABE51C02041F163CC0D4540CA54C1A8A4BE51C0D9CEF753E30D4540BB270F0BB5BE51C0A089B0E1E90D4540499D8026C2BE51C0CBA145B6F30D4540FBCBEEC9C3BE51C0F5B9DA8AFD0D4540499D8026C2BE51C04BEA0434110E45405F29CB10C7BE51C02E90A0F8310E4540ADFA5C6DC5BE51C058A835CD3B0E4540BB270F0BB5BE51C0E71DA7E8480E4540910F7A36ABBE51C02D211FF46C0E45402DB29DEFA7BE51C0F5DBD781730E454018265305A3BE51C0E6AE25E4830E45402DB29DEFA7BE51C0D8817346940E4540DFE00B93A9BE51C09F3C2CD49A0E4540F9A067B3EABF51C0E71DA7E8480E45404703780B24C051C0F163CC5D4B104540EA04341136BC51C041F163CC5D134540560E2DB29DBB51C0F4FDD478E90E4540B4C876BE9FBA51C09487855AD30C4540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the polygon geometry object formed by the closed ring MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))), with the coordinate reference system WGS84 (SRID 4326).", "source": "original", "new_id": 1435}
{"id": 257, "function": "ST_MPolyFromText", "question": "输出由WKT字符串'MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))'转换得到的SRID为4326的多边形对象。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the polygon geometry object formed by the closed ring MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))), with the coordinate reference system WGS84 (SRID 4326).", "source": "original", "new_id": 1436}
{"id": 257, "function": "ST_MPolyFromText", "question": "输出将包含51个坐标点的WKT多边形字符串转换为PostGIS空间对象的结果，该对象的空间参考系统标识符为4326。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the polygon geometry object formed by the closed ring MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))), with the coordinate reference system WGS84 (SRID 4326).", "source": "original", "new_id": 1437}
{"id": 257, "function": "ST_MPolyFromText", "question": "输出由闭合环MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))构成的多边形几何对象，该对象的坐标参考系统为WGS84(SRID 4326)。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the polygon geometry object formed by the closed ring MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))), with the coordinate reference system WGS84 (SRID 4326).", "source": "original", "new_id": 1438}
{"id": 258, "function": "ST_MPolyFromText", "question": "根据WKT文本创建一个三维多面体对象，该多面体包含外环(0 0 1,20 0 1,20 20 1,0 20 1,0 0 1)和内环(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)，其中所有坐标点均包含Z值。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the 3D MultiPolygon geometry object created from the WKT text 'MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))', ensuring the returned result includes all vertex coordinates (0 0 1,20 0 1,20 20 1,0 20 1,0 0 1) and (5 5 3,5 7 3,7 7 3,7 5 3,5 5 3) in their complete structure.", "source": "original", "new_id": 1439}
{"id": 258, "function": "ST_MPolyFromText", "question": "使用ST_MPolyFromText函数构建一个带孔洞的三维多面体，外边界由顶点(0 0 1)→(20 0 1)→(20 20 1)→(0 20 1)闭合，内部孔洞由顶点(5 5 3)→(5 7 3)→(7 7 3)→(7 5 3)闭合，所有顶点均包含XYZ坐标。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the 3D MultiPolygon geometry object created from the WKT text 'MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))', ensuring the returned result includes all vertex coordinates (0 0 1,20 0 1,20 20 1,0 20 1,0 0 1) and (5 5 3,5 7 3,7 7 3,7 5 3,5 5 3) in their complete structure.", "source": "original", "new_id": 1440}
{"id": 258, "function": "ST_MPolyFromText", "question": "将WKT格式的三维多面体字符串转换为几何对象，该对象由两个闭合环组成：主多边形环(0 0 1,20 0 1,20 20 1,0 20 1,0 0 1)和内部切割环(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)，所有坐标点的第三维数值分别为1和3。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the 3D MultiPolygon geometry object created from the WKT text 'MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))', ensuring the returned result includes all vertex coordinates (0 0 1,20 0 1,20 20 1,0 20 1,0 0 1) and (5 5 3,5 7 3,7 7 3,7 5 3,5 5 3) in their complete structure.", "source": "original", "new_id": 1441}
{"id": 258, "function": "ST_MPolyFromText", "question": "输出由外环顶点序列(0 0 1,20 0 1,20 20 1,0 20 1,0 0 1)和内环顶点序列(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)构成的三维MultiPolygon几何对象的WKT表示。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the 3D MultiPolygon geometry object created from the WKT text 'MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))', ensuring the returned result includes all vertex coordinates (0 0 1,20 0 1,20 20 1,0 20 1,0 0 1) and (5 5 3,5 7 3,7 7 3,7 5 3,5 5 3) in their complete structure.", "source": "original", "new_id": 1442}
{"id": 258, "function": "ST_MPolyFromText", "question": "将包含Z坐标的外多边形(0 0 1→20 0 1→20 20 1→0 20 1)和内多边形(5 5 3→5 7 3→7 7 3→7 5 3)转换为PostGIS三维MultiPolygon对象后，返回该对象的完整WKT字符串。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the 3D MultiPolygon geometry object created from the WKT text 'MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))', ensuring the returned result includes all vertex coordinates (0 0 1,20 0 1,20 20 1,0 20 1,0 0 1) and (5 5 3,5 7 3,7 7 3,7 5 3,5 5 3) in their complete structure.", "source": "original", "new_id": 1443}
{"id": 258, "function": "ST_MPolyFromText", "question": "输出通过WKT文本'MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))'创建的三维MultiPolygon几何对象，要求返回结果包含所有顶点坐标(0 0 1,20 0 1,20 20 1,0 20 1,0 0 1)和(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)的完整结构。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the 3D MultiPolygon geometry object created from the WKT text 'MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))', ensuring the returned result includes all vertex coordinates (0 0 1,20 0 1,20 20 1,0 20 1,0 0 1) and (5 5 3,5 7 3,7 7 3,7 5 3,5 5 3) in their complete structure.", "source": "original", "new_id": 1444}
{"id": 259, "function": "ST_PointFromText", "question": "如何通过WKT格式的文本'POINT(-71.064544 42.28787)'和SRID值4326创建一个二维点对象？", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)', 4326);", "execution_result": [["0101000020E6100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric point object generated by parsing the WKT-formatted 2D point 'POINT(-71.064544 42.28787)' with the EPSG 4326 coordinate system bound.", "source": "original", "new_id": 1445}
{"id": 259, "function": "ST_PointFromText", "question": "使用经度-71.064544、纬度42.28787的坐标和EPSG:4326坐标系，如何构造一个空间点对象？", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)', 4326);", "execution_result": [["0101000020E6100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric point object generated by parsing the WKT-formatted 2D point 'POINT(-71.064544 42.28787)' with the EPSG 4326 coordinate system bound.", "source": "original", "new_id": 1446}
{"id": 259, "function": "ST_PointFromText", "question": "将WKT字符串'POINT(-71.064544 42.28787)'转换为带SRID 4326的空间点对象，具体的SQL语句是什么？", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)', 4326);", "execution_result": [["0101000020E6100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric point object generated by parsing the WKT-formatted 2D point 'POINT(-71.064544 42.28787)' with the EPSG 4326 coordinate system bound.", "source": "original", "new_id": 1447}
{"id": 259, "function": "ST_PointFromText", "question": "输出将WKT字符串'POINT(-71.064544 42.28787)'转换为带SRID 4326的PostGIS点几何对象的结果。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)', 4326);", "execution_result": [["0101000020E6100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric point object generated by parsing the WKT-formatted 2D point 'POINT(-71.064544 42.28787)' with the EPSG 4326 coordinate system bound.", "source": "original", "new_id": 1448}
{"id": 259, "function": "ST_PointFromText", "question": "输出以经度-71.064544和纬度42.28787为坐标，并指定空间参考系统标识符为4326的PostGIS点对象的二进制表示。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)', 4326);", "execution_result": [["0101000020E6100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric point object generated by parsing the WKT-formatted 2D point 'POINT(-71.064544 42.28787)' with the EPSG 4326 coordinate system bound.", "source": "original", "new_id": 1449}
{"id": 259, "function": "ST_PointFromText", "question": "输出通过解析WKT格式的二维点'POINT(-71.064544 42.28787)'且绑定EPSG 4326坐标系统后生成的几何点对象。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)', 4326);", "execution_result": [["0101000020E6100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric point object generated by parsing the WKT-formatted 2D point 'POINT(-71.064544 42.28787)' with the EPSG 4326 coordinate system bound.", "source": "original", "new_id": 1450}
{"id": 260, "function": "ST_PointFromText", "question": "使用WKT格式的字符串'POINT(-71.064544 42.28787)'创建一个二维点对象，其中-71.064544表示X坐标（经度），42.28787表示Y坐标（纬度）。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the PostGIS geometry point object generated by parsing the WKT text 'POINT(-71.064544 42.28787)', which contains only XY coordinate values (no Z or M values).", "source": "original", "new_id": 1451}
{"id": 260, "function": "ST_PointFromText", "question": "如何通过文本表达式'POINT(-71.064544 42.28787)'生成一个空间点，该点的经度为-71.064544，纬度为42.28787？", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the PostGIS geometry point object generated by parsing the WKT text 'POINT(-71.064544 42.28787)', which contains only XY coordinate values (no Z or M values).", "source": "original", "new_id": 1452}
{"id": 260, "function": "ST_PointFromText", "question": "将WKT格式的坐标字符串'POINT(-71.064544 42.28787)'转换为PostGIS点几何对象，其中X坐标-71.064544和Y坐标42.28787分别代表经度和纬度。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the PostGIS geometry point object generated by parsing the WKT text 'POINT(-71.064544 42.28787)', which contains only XY coordinate values (no Z or M values).", "source": "original", "new_id": 1453}
{"id": 260, "function": "ST_PointFromText", "question": "输出将WKT字符串'POINT(-71.064544 42.28787)'转换为PostGIS点几何对象的结果，该点包含经度-71.064544和纬度42.28787的XY坐标。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the PostGIS geometry point object generated by parsing the WKT text 'POINT(-71.064544 42.28787)', which contains only XY coordinate values (no Z or M values).", "source": "original", "new_id": 1454}
{"id": 260, "function": "ST_PointFromText", "question": "输出基于WKT格式字符串'POINT(-71.064544 42.28787)'构建的二维点几何对象，其中-71.064544表示X坐标（经度），42.28787表示Y坐标（纬度）。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the PostGIS geometry point object generated by parsing the WKT text 'POINT(-71.064544 42.28787)', which contains only XY coordinate values (no Z or M values).", "source": "original", "new_id": 1455}
{"id": 260, "function": "ST_PointFromText", "question": "输出通过解析WKT文本'POINT(-71.064544 42.28787)'生成的PostGIS几何点对象，该对象仅包含XY坐标值（无Z或M值）。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the PostGIS geometry point object generated by parsing the WKT text 'POINT(-71.064544 42.28787)', which contains only XY coordinate values (no Z or M values).", "source": "original", "new_id": 1456}
{"id": 261, "function": "ST_PolygonFromText", "question": "根据给定的坐标序列（-71.1776585052917 42.3902909739571、-71.1776820268866 42.3903701743239、-71.1776063012595 42.3903825660754、-71.1775826583081 42.3903033653531、-71.1776585052917 42.3902909739571），构建一个闭合的多边形对象，并以WKT格式返回。", "sql": "SELECT ST_PolygonFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the given five coordinate points (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571), output the WKT representation of the PostGIS polygon object they form.", "source": "original", "new_id": 1457}
{"id": 261, "function": "ST_PolygonFromText", "question": "使用坐标点-71.1776585052917 42.3902909739571作为起点，依次连接-71.1776820268866 42.3903701743239、-71.1776063012595 42.3903825660754、-71.1775826583081 42.3903033653531，最后回到起点-71.1776585052917 42.3902909739571，创建一个多边形几何对象。", "sql": "SELECT ST_PolygonFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the given five coordinate points (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571), output the WKT representation of the PostGIS polygon object they form.", "source": "original", "new_id": 1458}
{"id": 261, "function": "ST_PolygonFromText", "question": "将五个坐标点-71.1776585052917 42.3902909739571、-71.1776820268866 42.3903701743239、-71.1776063012595 42.3903825660754、-71.1775826583081 42.3903033653531、-71.1776585052917 42.3902909739571按顺序连接，形成一个闭合环，并转换为POLYGON类型的几何对象。", "sql": "SELECT ST_PolygonFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the given five coordinate points (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571), output the WKT representation of the PostGIS polygon object they form.", "source": "original", "new_id": 1459}
{"id": 261, "function": "ST_PolygonFromText", "question": "输出由坐标点(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)和(-71.1776585052917 42.3902909739571)构成的闭合多边形POLYGON的WKT字符串表示。", "sql": "SELECT ST_PolygonFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the given five coordinate points (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571), output the WKT representation of the PostGIS polygon object they form.", "source": "original", "new_id": 1460}
{"id": 261, "function": "ST_PolygonFromText", "question": "将WKT格式的POLYGON字符串'POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))'转换为PostGIS多边形对象并输出。", "sql": "SELECT ST_PolygonFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the given five coordinate points (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571), output the WKT representation of the PostGIS polygon object they form.", "source": "original", "new_id": 1461}
{"id": 261, "function": "ST_PolygonFromText", "question": "根据给定的五个坐标点(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)和(-71.1776585052917 42.3902909739571)，输出其构成的PostGIS多边形对象的WKT表示。", "sql": "SELECT ST_PolygonFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the given five coordinate points (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571), output the WKT representation of the PostGIS polygon object they form.", "source": "original", "new_id": 1462}
{"id": 262, "function": "ST_GeogFromWKB", "question": "将WKB格式的二进制数据E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@'转换为地理对象，并以WKT格式输出。", "sql": "SELECT ST_AsText( ST_GeogFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@') );", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the WKB binary data E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@' to a geographic object and then formatting it as WKT text.", "source": "original", "new_id": 1463}
{"id": 262, "function": "ST_GeogFromWKB", "question": "解析WKB二进制数据E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@'，将其转换为地理对象后输出为WKT文本表示。", "sql": "SELECT ST_AsText( ST_GeogFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@') );", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the WKB binary data E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@' to a geographic object and then formatting it as WKT text.", "source": "original", "new_id": 1464}
{"id": 262, "function": "ST_GeogFromWKB", "question": "使用ST_GeogFromWKB函数处理WKB格式的二进制数据E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@'，将其转换为地理对象，并通过ST_AsText函数输出WKT文本。", "sql": "SELECT ST_AsText( ST_GeogFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@') );", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the WKB binary data E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@' to a geographic object and then formatting it as WKT text.", "source": "original", "new_id": 1465}
{"id": 262, "function": "ST_GeogFromWKB", "question": "输出将WKB格式的二进制数据E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@'转换为地理对象后，再转换为WKT字符串的结果。", "sql": "SELECT ST_AsText( ST_GeogFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@') );", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the WKB binary data E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@' to a geographic object and then formatting it as WKT text.", "source": "original", "new_id": 1466}
{"id": 262, "function": "ST_GeogFromWKB", "question": "输出通过ST_GeogFromWKB函数解析WKB二进制数据E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@'生成的地理对象，再使用ST_AsText函数转换为WKT格式的文本字符串。", "sql": "SELECT ST_AsText( ST_GeogFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@') );", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the WKB binary data E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@' to a geographic object and then formatting it as WKT text.", "source": "original", "new_id": 1467}
{"id": 262, "function": "ST_GeogFromWKB", "question": "输出将WKB格式的二进制数据E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@'转换为地理对象后，再以WKT文本格式输出的结果。", "sql": "SELECT ST_AsText( ST_GeogFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@') );", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the result of converting the WKB binary data E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@' to a geographic object and then formatting it as WKT text.", "source": "original", "new_id": 1468}
{"id": 263, "function": "ST_GeomFromEWKB", "question": "将EWKB格式的二进制数据'\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1'转换为PostGIS几何对象。", "sql": "SELECT ST_GeomFromEWKB('\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1');", "execution_result": [["0102000020AD10000003000000E44A3D0A0B4220CA51C06EC328081E21454027BF45274B0ACA51C0F67B629D2A214540957CEC2E50CA510AC07099D365"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKB-formatted geometry data with SRID 4326 '\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1' into a PostGIS geometry object and display it.", "source": "original", "new_id": 1469}
{"id": 263, "function": "ST_GeomFromEWKB", "question": "解析EWKB二进制字符串'\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1'并生成对应的几何对象。", "sql": "SELECT ST_GeomFromEWKB('\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1');", "execution_result": [["0102000020AD10000003000000E44A3D0A0B4220CA51C06EC328081E21454027BF45274B0ACA51C0F67B629D2A214540957CEC2E50CA510AC07099D365"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKB-formatted geometry data with SRID 4326 '\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1' into a PostGIS geometry object and display it.", "source": "original", "new_id": 1470}
{"id": 263, "function": "ST_GeomFromEWKB", "question": "使用ST_GeomFromEWKB函数将EWKB编码'\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1'转换为PostGIS几何对象。", "sql": "SELECT ST_GeomFromEWKB('\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1');", "execution_result": [["0102000020AD10000003000000E44A3D0A0B4220CA51C06EC328081E21454027BF45274B0ACA51C0F67B629D2A214540957CEC2E50CA510AC07099D365"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKB-formatted geometry data with SRID 4326 '\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1' into a PostGIS geometry object and display it.", "source": "original", "new_id": 1471}
{"id": 263, "function": "ST_GeomFromEWKB", "question": "将EWKB格式的二进制字符串'\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1'转换为PostGIS几何对象并输出。", "sql": "SELECT ST_GeomFromEWKB('\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1');", "execution_result": [["0102000020AD10000003000000E44A3D0A0B4220CA51C06EC328081E21454027BF45274B0ACA51C0F67B629D2A214540957CEC2E50CA510AC07099D365"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKB-formatted geometry data with SRID 4326 '\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1' into a PostGIS geometry object and display it.", "source": "original", "new_id": 1472}
{"id": 263, "function": "ST_GeomFromEWKB", "question": "解析EWKB二进制数据'\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1'并输出对应的几何对象。", "sql": "SELECT ST_GeomFromEWKB('\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1');", "execution_result": [["0102000020AD10000003000000E44A3D0A0B4220CA51C06EC328081E21454027BF45274B0ACA51C0F67B629D2A214540957CEC2E50CA510AC07099D365"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKB-formatted geometry data with SRID 4326 '\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1' into a PostGIS geometry object and display it.", "source": "original", "new_id": 1473}
{"id": 263, "function": "ST_GeomFromEWKB", "question": "将包含SRID 4326的EWKB格式几何数据'\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1'转换为PostGIS几何对象并输出。", "sql": "SELECT ST_GeomFromEWKB('\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1');", "execution_result": [["0102000020AD10000003000000E44A3D0A0B4220CA51C06EC328081E21454027BF45274B0ACA51C0F67B629D2A214540957CEC2E50CA510AC07099D365"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKB-formatted geometry data with SRID 4326 '\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1' into a PostGIS geometry object and display it.", "source": "original", "new_id": 1474}
{"id": 264, "function": "ST_GeomFromEWKB", "question": "解析EWKB格式的二进制数据\\\\001\\\\002\\\\000\\\\000 \\\\255\\\\020\\\\000\\\\000\\\\003\\\\000\\\\000\\\\000\\\\344J= \\\\013B\\\\312Q\\\\300n\\\\303(\\\\010\\\\036!E@''\\\\277E''K \\\\312Q\\\\300\\\\366{b\\\\235*!E@\\\\225|\\\\354.P\\\\312Q \\\\300p\\\\231\\\\323e1!E@，该数据定义了一个由三个点构成的线串，具体坐标为(344A3D200B42, C31251C06EC328081E214540)、(27BF45274B20, C31251C0F67B629D2A214540)和(957CEC2E50, C3125120C07091D36531214540)。", "sql": "SELECT ST_GeomFromEWKB(E'\\\\001\\\\002\\\\000\\\\000 \\\\255\\\\020\\\\000\\\\000\\\\003\\\\000\\\\000\\\\000\\\\344J= \\\\013B\\\\312Q\\\\300n\\\\303(\\\\010\\\\036!E@''\\\\277E''K \\\\312Q\\\\300\\\\366{b\\\\235*!E@\\\\225|\\\\354.P\\\\312Q \\\\300p\\\\231\\\\323e1!E@');", "execution_result": [["0102000020AD10000003000000E44A3D200B42CA51C06EC328081E21454027BF45274B20CA51C0F67B629D2A214540957CEC2E50CA5120C07099D36531"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the EWKB-formatted binary string E'\\\\001\\\\002\\\\000\\\\000 \\\\255\\\\020\\\\000\\\\000\\\\003\\\\000\\\\000\\\\000\\\\344J= \\\\013B\\\\312Q\\\\300n\\\\303(\\\\010\\\\036!E@''\\\\277E''K \\\\312Q\\\\300\\\\366{b\\\\235*!E@\\\\225|\\\\354.P\\\\312Q \\\\300p\\\\231\\\\323e1!E@' to a geometry object, what are the spatial reference system identifier (SRID) and the geometry type?", "source": "original", "new_id": 1475}
{"id": 264, "function": "ST_GeomFromEWKB", "question": "使用ST_GeomFromEWKB函数将EWKB编码的二进制字符串\\\\001\\\\002\\\\000\\\\000 \\\\255\\\\020\\\\000\\\\000\\\\003\\\\000\\\\000\\\\000\\\\344J= \\\\013B\\\\312Q\\\\300n\\\\303(\\\\010\\\\036!E@''\\\\277E''K \\\\312Q\\\\300\\\\366{b\\\\235*!E@\\\\225|\\\\354.P\\\\312Q \\\\300p\\\\231\\\\323e1!E@转换为几何对象，该字符串表示一个包含三个点的线串，坐标点依次为(344A3D200B42, C31251C06EC328081E214540)、(27BF45274B20, C31251C0F67B629D2A214540)和(957CEC2E50, C3125120C07091D36531214540)。", "sql": "SELECT ST_GeomFromEWKB(E'\\\\001\\\\002\\\\000\\\\000 \\\\255\\\\020\\\\000\\\\000\\\\003\\\\000\\\\000\\\\000\\\\344J= \\\\013B\\\\312Q\\\\300n\\\\303(\\\\010\\\\036!E@''\\\\277E''K \\\\312Q\\\\300\\\\366{b\\\\235*!E@\\\\225|\\\\354.P\\\\312Q \\\\300p\\\\231\\\\323e1!E@');", "execution_result": [["0102000020AD10000003000000E44A3D200B42CA51C06EC328081E21454027BF45274B20CA51C0F67B629D2A214540957CEC2E50CA5120C07099D36531"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the EWKB-formatted binary string E'\\\\001\\\\002\\\\000\\\\000 \\\\255\\\\020\\\\000\\\\000\\\\003\\\\000\\\\000\\\\000\\\\344J= \\\\013B\\\\312Q\\\\300n\\\\303(\\\\010\\\\036!E@''\\\\277E''K \\\\312Q\\\\300\\\\366{b\\\\235*!E@\\\\225|\\\\354.P\\\\312Q \\\\300p\\\\231\\\\323e1!E@' to a geometry object, what are the spatial reference system identifier (SRID) and the geometry type?", "source": "original", "new_id": 1476}
{"id": 264, "function": "ST_GeomFromEWKB", "question": "使用ST_GeomFromEWKB函数解析EWKB格式的十六进制字符串E'\\\\001\\\\002\\\\000\\\\000 \\\\255\\\\020\\\\000\\\\000\\\\003\\\\000\\\\000\\\\000\\\\344J= \\\\013B\\\\312Q\\\\300n\\\\303(\\\\010\\\\036!E@''\\\\277E''K \\\\312Q\\\\300\\\\366{b\\\\235*!E@\\\\225|\\\\354.P\\\\312Q \\\\300p\\\\231\\\\323e1!E@'，输出的几何对象类型和坐标值是什么？", "sql": "SELECT ST_GeomFromEWKB(E'\\\\001\\\\002\\\\000\\\\000 \\\\255\\\\020\\\\000\\\\000\\\\003\\\\000\\\\000\\\\000\\\\344J= \\\\013B\\\\312Q\\\\300n\\\\303(\\\\010\\\\036!E@''\\\\277E''K \\\\312Q\\\\300\\\\366{b\\\\235*!E@\\\\225|\\\\354.P\\\\312Q \\\\300p\\\\231\\\\323e1!E@');", "execution_result": [["0102000020AD10000003000000E44A3D200B42CA51C06EC328081E21454027BF45274B20CA51C0F67B629D2A214540957CEC2E50CA5120C07099D36531"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the EWKB-formatted binary string E'\\\\001\\\\002\\\\000\\\\000 \\\\255\\\\020\\\\000\\\\000\\\\003\\\\000\\\\000\\\\000\\\\344J= \\\\013B\\\\312Q\\\\300n\\\\303(\\\\010\\\\036!E@''\\\\277E''K \\\\312Q\\\\300\\\\366{b\\\\235*!E@\\\\225|\\\\354.P\\\\312Q \\\\300p\\\\231\\\\323e1!E@' to a geometry object, what are the spatial reference system identifier (SRID) and the geometry type?", "source": "original", "new_id": 1477}
{"id": 265, "function": "ST_GeomFromWKB", "question": "将WKB格式的二进制数据E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@'转换为SRID为4326的几何对象，并以EWKT格式输出。", "sql": "SELECT ST_AsEWKT( ST_GeomFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@',4326) );", "execution_result": [["SRID=4326;LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert WKB geometry data containing the specific byte sequence E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@' into a geometry object in SRID 4326, and output the final result as EWKT text with SRID identifier.", "source": "original", "new_id": 1478}
{"id": 265, "function": "ST_GeomFromWKB", "question": "使用PostGIS函数ST_GeomFromWKB将二进制数据E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@'转换为SRID为4326的几何对象，再通过ST_AsEWKT函数将其转换为EWKT格式输出。", "sql": "SELECT ST_AsEWKT( ST_GeomFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@',4326) );", "execution_result": [["SRID=4326;LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert WKB geometry data containing the specific byte sequence E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@' into a geometry object in SRID 4326, and output the final result as EWKT text with SRID identifier.", "source": "original", "new_id": 1479}
{"id": 265, "function": "ST_GeomFromWKB", "question": "将二进制数据E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@'转换为SRID为4326的几何对象，并以包含SRID信息的EWKT格式输出。", "sql": "SELECT ST_AsEWKT( ST_GeomFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@',4326) );", "execution_result": [["SRID=4326;LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert WKB geometry data containing the specific byte sequence E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@' into a geometry object in SRID 4326, and output the final result as EWKT text with SRID identifier.", "source": "original", "new_id": 1480}
{"id": 265, "function": "ST_GeomFromWKB", "question": "将WKB格式的二进制数据E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@'转换为SRID为4326的几何对象后，输出其扩展WKT（EWKT）格式的字符串表示。", "sql": "SELECT ST_AsEWKT( ST_GeomFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@',4326) );", "execution_result": [["SRID=4326;LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert WKB geometry data containing the specific byte sequence E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@' into a geometry object in SRID 4326, and output the final result as EWKT text with SRID identifier.", "source": "original", "new_id": 1481}
{"id": 265, "function": "ST_GeomFromWKB", "question": "使用PostGIS函数ST_GeomFromWKB解析WKB二进制数据E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@'并指定SRID为4326后，通过ST_AsEWKT函数输出包含空间参考系统的扩展WKT字符串。", "sql": "SELECT ST_AsEWKT( ST_GeomFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@',4326) );", "execution_result": [["SRID=4326;LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert WKB geometry data containing the specific byte sequence E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@' into a geometry object in SRID 4326, and output the final result as EWKT text with SRID identifier.", "source": "original", "new_id": 1482}
{"id": 265, "function": "ST_GeomFromWKB", "question": "将包含特定字节序列E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@'的WKB几何数据转换为SRID 4326坐标系下的几何对象，最终输出带有SRID标识的EWKT格式文本。", "sql": "SELECT ST_AsEWKT( ST_GeomFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@',4326) );", "execution_result": [["SRID=4326;LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert WKB geometry data containing the specific byte sequence E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@' into a geometry object in SRID 4326, and output the final result as EWKT text with SRID identifier.", "source": "original", "new_id": 1483}
{"id": 266, "function": "ST_LineFromWKB", "question": "将LINESTRING(1 2, 3 4)转换为WKB格式后再转回线对象并命名为aline，同时验证POINT(1 2)转换为WKB格式后转回线对象是否返回NULL值。", "sql": "SELECT ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)'))) AS aline, ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('POINT(1 2)'))) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output two results: 1) the polyline object generated after converting LINESTRING(1 2, 3 4) through the WKB intermediate format, and 2) the boolean result of NULL being returned due to type mismatch when POINT(1 2) undergoes the same conversion process.", "source": "original", "new_id": 1484}
{"id": 266, "function": "ST_LineFromWKB", "question": "基于LINESTRING(1 2, 3 4)的WKB二进制数据重建线几何对象，并检测POINT(1 2)的WKB数据尝试重建线对象时是否必然返回NULL。", "sql": "SELECT ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)'))) AS aline, ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('POINT(1 2)'))) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output two results: 1) the polyline object generated after converting LINESTRING(1 2, 3 4) through the WKB intermediate format, and 2) the boolean result of NULL being returned due to type mismatch when POINT(1 2) undergoes the same conversion process.", "source": "original", "new_id": 1485}
{"id": 266, "function": "ST_LineFromWKB", "question": "执行两个操作：1) 将LINESTRING(1 2, 3 4)通过WKB中间格式转换为线对象输出为aline列；2) 确认POINT(1 2)的WKB数据用ST_LineFromWKB转换时是否返回NULL。", "sql": "SELECT ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)'))) AS aline, ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('POINT(1 2)'))) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output two results: 1) the polyline object generated after converting LINESTRING(1 2, 3 4) through the WKB intermediate format, and 2) the boolean result of NULL being returned due to type mismatch when POINT(1 2) undergoes the same conversion process.", "source": "original", "new_id": 1486}
{"id": 266, "function": "ST_LineFromWKB", "question": "输出LINESTRING(1 2, 3 4)转换为WKB格式后再转换回的折线对象，以及POINT(1 2)转换为WKB格式后尝试转换回折线对象时是否返回NULL值。", "sql": "SELECT ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)'))) AS aline, ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('POINT(1 2)'))) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output two results: 1) the polyline object generated after converting LINESTRING(1 2, 3 4) through the WKB intermediate format, and 2) the boolean result of NULL being returned due to type mismatch when POINT(1 2) undergoes the same conversion process.", "source": "original", "new_id": 1487}
{"id": 266, "function": "ST_LineFromWKB", "question": "输出LINESTRING(1 2, 3 4)经过WKB格式转换后重建的折线几何对象，以及验证POINT(1 2)经过相同转换流程后是否因类型不匹配而返回NULL。", "sql": "SELECT ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)'))) AS aline, ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('POINT(1 2)'))) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output two results: 1) the polyline object generated after converting LINESTRING(1 2, 3 4) through the WKB intermediate format, and 2) the boolean result of NULL being returned due to type mismatch when POINT(1 2) undergoes the same conversion process.", "source": "original", "new_id": 1488}
{"id": 266, "function": "ST_LineFromWKB", "question": "输出两个结果：1) LINESTRING(1 2, 3 4)通过WKB中间格式转换后生成的折线对象，2) POINT(1 2)通过相同转换流程时因目标类型不符而返回NULL的布尔判断结果。", "sql": "SELECT ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)'))) AS aline, ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('POINT(1 2)'))) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output two results: 1) the polyline object generated after converting LINESTRING(1 2, 3 4) through the WKB intermediate format, and 2) the boolean result of NULL being returned due to type mismatch when POINT(1 2) undergoes the same conversion process.", "source": "original", "new_id": 1489}
{"id": 267, "function": "ST_LinestringFromWKB", "question": "将LINESTRING(1 2, 3 4)转换为二进制格式后再重新构造为线对象，同时验证将POINT(1 2)转换为二进制格式后尝试构造线对象是否会返回NULL值。", "sql": "SELECT ST_LineStringFromWKB( ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)')) ) AS aline, ST_LinestringFromWKB( ST_AsBinary(ST_GeomFromText('POINT(1 2)')) ) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object column `aline` reconstructed from the WKB format of `LINESTRING(1 2, 3 4)`, and the validation result column `null_return` showing NULL returned by `ST_LineStringFromWKB` due to `POINT(1 2)` being a non-line type.", "source": "original", "new_id": 1490}
{"id": 267, "function": "ST_LinestringFromWKB", "question": "通过ST_AsBinary将LINESTRING(1 2, 3 4)转换为WKB格式后，使用ST_LineStringFromWKB重建线对象；并测试当输入是POINT(1 2)时ST_LineStringFromWKB是否返回NULL。", "sql": "SELECT ST_LineStringFromWKB( ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)')) ) AS aline, ST_LinestringFromWKB( ST_AsBinary(ST_GeomFromText('POINT(1 2)')) ) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object column `aline` reconstructed from the WKB format of `LINESTRING(1 2, 3 4)`, and the validation result column `null_return` showing NULL returned by `ST_LineStringFromWKB` due to `POINT(1 2)` being a non-line type.", "source": "original", "new_id": 1491}
{"id": 267, "function": "ST_LinestringFromWKB", "question": "执行两个操作：1) 将LINESTRING(1 2, 3 4)先转为WKT再转为WKB最后重建为线对象；2) 将POINT(1 2)经过相同转换流程后验证ST_LineStringFromWKB对点输入的返回是否为NULL。", "sql": "SELECT ST_LineStringFromWKB( ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)')) ) AS aline, ST_LinestringFromWKB( ST_AsBinary(ST_GeomFromText('POINT(1 2)')) ) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object column `aline` reconstructed from the WKB format of `LINESTRING(1 2, 3 4)`, and the validation result column `null_return` showing NULL returned by `ST_LineStringFromWKB` due to `POINT(1 2)` being a non-line type.", "source": "original", "new_id": 1492}
{"id": 267, "function": "ST_LinestringFromWKB", "question": "输出LINESTRING(1 2, 3 4)经WKB格式转换后重建的几何对象列aline，以及POINT(1 2)因非线类型导致ST_LineStringFromWKB返回NULL的验证结果列null_return。", "sql": "SELECT ST_LineStringFromWKB( ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)')) ) AS aline, ST_LinestringFromWKB( ST_AsBinary(ST_GeomFromText('POINT(1 2)')) ) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object column `aline` reconstructed from the WKB format of `LINESTRING(1 2, 3 4)`, and the validation result column `null_return` showing NULL returned by `ST_LineStringFromWKB` due to `POINT(1 2)` being a non-line type.", "source": "original", "new_id": 1493}
{"id": 268, "function": "ST_PointFromWKB", "question": "将二维点POINT(2 5)转换为EWKB格式后，再通过WKB重新构造为几何点对象，最终以WKT文本格式输出结果。", "sql": "SELECT ST_AsText( ST_PointFromWKB( ST_AsEWKB('POINT(2 5)'::geometry) ) );", "execution_result": [["POINT(2 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the final text representation after sequentially performing the cascading operations of ST_AsEWKB (geometry to EWKB), ST_PointFromWKB (binary to geometry), and ST_AsText (geometry to WKT) on the 2D point POINT(2 5).", "source": "original", "new_id": 1494}
{"id": 268, "function": "ST_PointFromWKB", "question": "对几何对象POINT(2 5)执行EWKB二进制编码转换，再通过ST_PointFromWKB函数解码为点对象，最后用ST_AsText输出其WKT字符串表示。", "sql": "SELECT ST_AsText( ST_PointFromWKB( ST_AsEWKB('POINT(2 5)'::geometry) ) );", "execution_result": [["POINT(2 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the final text representation after sequentially performing the cascading operations of ST_AsEWKB (geometry to EWKB), ST_PointFromWKB (binary to geometry), and ST_AsText (geometry to WKT) on the 2D point POINT(2 5).", "source": "original", "new_id": 1495}
{"id": 268, "function": "ST_PointFromWKB", "question": "将二维坐标点POINT(2 5)先转换为扩展Well-Known二进制(EWKB)，再反向解析为几何点，最终以Well-Known文本(WKT)格式返回该点的字符串形式。", "sql": "SELECT ST_AsText( ST_PointFromWKB( ST_AsEWKB('POINT(2 5)'::geometry) ) );", "execution_result": [["POINT(2 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the final text representation after sequentially performing the cascading operations of ST_AsEWKB (geometry to EWKB), ST_PointFromWKB (binary to geometry), and ST_AsText (geometry to WKT) on the 2D point POINT(2 5).", "source": "original", "new_id": 1496}
{"id": 268, "function": "ST_PointFromWKB", "question": "输出将二维几何对象POINT(2 5)转换为EWKB格式后再通过ST_PointFromWKB解析为点对象，最终转换为WKT字符串的结果。", "sql": "SELECT ST_AsText( ST_PointFromWKB( ST_AsEWKB('POINT(2 5)'::geometry) ) );", "execution_result": [["POINT(2 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the final text representation after sequentially performing the cascading operations of ST_AsEWKB (geometry to EWKB), ST_PointFromWKB (binary to geometry), and ST_AsText (geometry to WKT) on the 2D point POINT(2 5).", "source": "original", "new_id": 1497}
{"id": 268, "function": "ST_PointFromWKB", "question": "输出将几何文本POINT(2 5)经过ST_AsEWKB函数转换为EWKB格式，再通过ST_PointFromWKB重建为点对象，最后用ST_AsText转换为WKT格式的完整过程结果。", "sql": "SELECT ST_AsText( ST_PointFromWKB( ST_AsEWKB('POINT(2 5)'::geometry) ) );", "execution_result": [["POINT(2 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the final text representation after sequentially performing the cascading operations of ST_AsEWKB (geometry to EWKB), ST_PointFromWKB (binary to geometry), and ST_AsText (geometry to WKT) on the 2D point POINT(2 5).", "source": "original", "new_id": 1498}
{"id": 268, "function": "ST_PointFromWKB", "question": "输出对二维点POINT(2 5)依次执行ST_AsEWKB几何转EWKB、ST_PointFromWKB二进制转几何、ST_AsText几何转WKT这三个函数级联操作后的最终文本表示。", "sql": "SELECT ST_AsText( ST_PointFromWKB( ST_AsEWKB('POINT(2 5)'::geometry) ) );", "execution_result": [["POINT(2 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the final text representation after sequentially performing the cascading operations of ST_AsEWKB (geometry to EWKB), ST_PointFromWKB (binary to geometry), and ST_AsText (geometry to WKT) on the 2D point POINT(2 5).", "source": "original", "new_id": 1499}
{"id": 269, "function": "ST_Box2dFromGeoHash", "question": "将地理哈希值'9qqj7nmxncgyy4d0dbxqz0'转换为对应的二维边界框（BOX2D）对象。", "sql": "SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0');", "execution_result": [["BOX(-115.17281600000001 36.11464599999999,-115.172816 36.114646)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the minimum bounding rectangle (MBR) coordinate values for the geohash '9qqj7nmxncgyy4d0dbxqz0' as a BOX2D geometry type.", "source": "original", "new_id": 1500}
{"id": 269, "function": "ST_Box2dFromGeoHash", "question": "基于地理哈希字符串'9qqj7nmxncgyy4d0dbxqz0'生成其最小外接矩形（BOX2D）的空间范围。", "sql": "SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0');", "execution_result": [["BOX(-115.17281600000001 36.11464599999999,-115.172816 36.114646)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the minimum bounding rectangle (MBR) coordinate values for the geohash '9qqj7nmxncgyy4d0dbxqz0' as a BOX2D geometry type.", "source": "original", "new_id": 1501}
{"id": 269, "function": "ST_Box2dFromGeoHash", "question": "使用PostGIS函数ST_Box2dFromGeoHash解析地理哈希值'9qqj7nmxncgyy4d0dbxqz0'，返回其对应的二维坐标边界框。", "sql": "SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0');", "execution_result": [["BOX(-115.17281600000001 36.11464599999999,-115.172816 36.114646)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the minimum bounding rectangle (MBR) coordinate values for the geohash '9qqj7nmxncgyy4d0dbxqz0' as a BOX2D geometry type.", "source": "original", "new_id": 1502}
{"id": 269, "function": "ST_Box2dFromGeoHash", "question": "输出地理哈希值'9qqj7nmxncgyy4d0dbxqz0'转换后的二维边界框的WKT表示。", "sql": "SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0');", "execution_result": [["BOX(-115.17281600000001 36.11464599999999,-115.172816 36.114646)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the minimum bounding rectangle (MBR) coordinate values for the geohash '9qqj7nmxncgyy4d0dbxqz0' as a BOX2D geometry type.", "source": "original", "new_id": 1503}
{"id": 269, "function": "ST_Box2dFromGeoHash", "question": "将地理哈希字符串'9qqj7nmxncgyy4d0dbxqz0'解码为PostGIS的二维边界框对象，并返回其标准文本格式。", "sql": "SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0');", "execution_result": [["BOX(-115.17281600000001 36.11464599999999,-115.172816 36.114646)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the minimum bounding rectangle (MBR) coordinate values for the geohash '9qqj7nmxncgyy4d0dbxqz0' as a BOX2D geometry type.", "source": "original", "new_id": 1504}
{"id": 269, "function": "ST_Box2dFromGeoHash", "question": "以BOX2D几何类型输出地理哈希'9qqj7nmxncgyy4d0dbxqz0'对应的最小外包矩形坐标值。", "sql": "SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0');", "execution_result": [["BOX(-115.17281600000001 36.11464599999999,-115.172816 36.114646)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the minimum bounding rectangle (MBR) coordinate values for the geohash '9qqj7nmxncgyy4d0dbxqz0' as a BOX2D geometry type.", "source": "original", "new_id": 1505}
{"id": 270, "function": "ST_GeomFromGeoHash", "question": "将GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'转换为几何对象，并仅保留前4位精度，最后以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POLYGON((-115.3125 36.03515625,-115.3125 36.2109375,-114.9609375 36.2109375,-114.9609375 36.03515625,-115.3125 36.03515625))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Parse the GeoHash string '9qqj7nmxncgyy4d0dbxqz0' into a geometry object with a precision parameter of 4, and output the WKT representation of the resulting geometry.", "source": "original", "new_id": 1506}
{"id": 270, "function": "ST_GeomFromGeoHash", "question": "使用PostGIS函数ST_GeomFromGeoHash解析GeoHash值'9qqj7nmxncgyy4d0dbxqz0'，设置精度参数为4，再通过ST_AsText输出其WKT文本表示。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POLYGON((-115.3125 36.03515625,-115.3125 36.2109375,-114.9609375 36.2109375,-114.9609375 36.03515625,-115.3125 36.03515625))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Parse the GeoHash string '9qqj7nmxncgyy4d0dbxqz0' into a geometry object with a precision parameter of 4, and output the WKT representation of the resulting geometry.", "source": "original", "new_id": 1507}
{"id": 270, "function": "ST_GeomFromGeoHash", "question": "基于GeoHash编码'9qqj7nmxncgyy4d0dbxqz0'生成几何对象，其中精度参数4控制几何边界范围，最终返回该几何的WKT格式文本。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POLYGON((-115.3125 36.03515625,-115.3125 36.2109375,-114.9609375 36.2109375,-114.9609375 36.03515625,-115.3125 36.03515625))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Parse the GeoHash string '9qqj7nmxncgyy4d0dbxqz0' into a geometry object with a precision parameter of 4, and output the WKT representation of the resulting geometry.", "source": "original", "new_id": 1508}
{"id": 270, "function": "ST_GeomFromGeoHash", "question": "输出将GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'转换为几何对象后，仅保留前4位精度并格式化为WKT字符串的结果。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POLYGON((-115.3125 36.03515625,-115.3125 36.2109375,-114.9609375 36.2109375,-114.9609375 36.03515625,-115.3125 36.03515625))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Parse the GeoHash string '9qqj7nmxncgyy4d0dbxqz0' into a geometry object with a precision parameter of 4, and output the WKT representation of the resulting geometry.", "source": "original", "new_id": 1509}
{"id": 270, "function": "ST_GeomFromGeoHash", "question": "以WKT字符串格式返回GeoHash值'9qqj7nmxncgyy4d0dbxqz0'截断至4位精度对应的几何对象表示。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POLYGON((-115.3125 36.03515625,-115.3125 36.2109375,-114.9609375 36.2109375,-114.9609375 36.03515625,-115.3125 36.03515625))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Parse the GeoHash string '9qqj7nmxncgyy4d0dbxqz0' into a geometry object with a precision parameter of 4, and output the WKT representation of the resulting geometry.", "source": "original", "new_id": 1510}
{"id": 270, "function": "ST_GeomFromGeoHash", "question": "将GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'解析为几何对象，精度参数设为4，最终输出该几何对象的WKT文本表示。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POLYGON((-115.3125 36.03515625,-115.3125 36.2109375,-114.9609375 36.2109375,-114.9609375 36.03515625,-115.3125 36.03515625))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Parse the GeoHash string '9qqj7nmxncgyy4d0dbxqz0' into a geometry object with a precision parameter of 4, and output the WKT representation of the resulting geometry.", "source": "original", "new_id": 1511}
{"id": 271, "function": "ST_GeomFromGeoHash", "question": "将GeoHash值'9qqj7nmxncgyy4d0dbxqz0'转换为几何对象，并以WKT格式输出该几何对象的文本表示。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POLYGON((-115.17281600000001 36.11464599999999,-115.17281600000001 36.114646,-115.172816 36.114646,-115.172816 36.11464599999999,-115.17281600000001 36.11464599999999))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometry parsed from the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' in WKT string format.", "source": "original", "new_id": 1512}
{"id": 271, "function": "ST_GeomFromGeoHash", "question": "使用PostGIS函数ST_GeomFromGeoHash解析GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'生成几何对象，再通过ST_AsText函数输出该几何对象的WKT文本表示。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POLYGON((-115.17281600000001 36.11464599999999,-115.17281600000001 36.114646,-115.172816 36.114646,-115.172816 36.11464599999999,-115.17281600000001 36.11464599999999))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometry parsed from the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' in WKT string format.", "source": "original", "new_id": 1513}
{"id": 271, "function": "ST_GeomFromGeoHash", "question": "基于GeoHash编码'9qqj7nmxncgyy4d0dbxqz0'构造几何对象，并返回该对象的标准WKT（Well-Known Text）格式字符串。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POLYGON((-115.17281600000001 36.11464599999999,-115.17281600000001 36.114646,-115.172816 36.114646,-115.172816 36.11464599999999,-115.17281600000001 36.11464599999999))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometry parsed from the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' in WKT string format.", "source": "original", "new_id": 1514}
{"id": 271, "function": "ST_GeomFromGeoHash", "question": "输出GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'转换后的几何对象的WKT格式字符串。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POLYGON((-115.17281600000001 36.11464599999999,-115.17281600000001 36.114646,-115.172816 36.114646,-115.172816 36.11464599999999,-115.17281600000001 36.11464599999999))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometry parsed from the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' in WKT string format.", "source": "original", "new_id": 1515}
{"id": 271, "function": "ST_GeomFromGeoHash", "question": "将GeoHash值'9qqj7nmxncgyy4d0dbxqz0'解码为几何对象后，返回该对象的WKT文本表示形式。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POLYGON((-115.17281600000001 36.11464599999999,-115.17281600000001 36.114646,-115.172816 36.114646,-115.172816 36.11464599999999,-115.17281600000001 36.11464599999999))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometry parsed from the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' in WKT string format.", "source": "original", "new_id": 1516}
{"id": 271, "function": "ST_GeomFromGeoHash", "question": "以WKT字符串格式输出从GeoHash编码'9qqj7nmxncgyy4d0dbxqz0'解析得到的几何图形。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POLYGON((-115.17281600000001 36.11464599999999,-115.17281600000001 36.114646,-115.172816 36.114646,-115.172816 36.11464599999999,-115.17281600000001 36.11464599999999))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometry parsed from the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' in WKT string format.", "source": "original", "new_id": 1517}
{"id": 272, "function": "ST_GeomFromGeoHash", "question": "将GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'转换为精度为10的几何对象，并以WKT格式输出该几何对象。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POLYGON((-115.17282128334045 36.11464083194733,-115.17282128334045 36.114646196365356,-115.1728105545044 36.114646196365356,-115.1728105545044 36.11464083194733,-115.17282128334045 36.11464083194733))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the geometry object converted from the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' as a WKT string, using a precision parameter value of 10 for the conversion.", "source": "original", "new_id": 1518}
{"id": 272, "function": "ST_GeomFromGeoHash", "question": "使用PostGIS函数ST_GeomFromGeoHash解析GeoHash值'9qqj7nmxncgyy4d0dbxqz0'，设置精度参数为10，并通过ST_AsText函数将结果几何对象转换为WKT文本格式输出。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POLYGON((-115.17282128334045 36.11464083194733,-115.17282128334045 36.114646196365356,-115.1728105545044 36.114646196365356,-115.1728105545044 36.11464083194733,-115.17282128334045 36.11464083194733))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the geometry object converted from the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' as a WKT string, using a precision parameter value of 10 for the conversion.", "source": "original", "new_id": 1519}
{"id": 272, "function": "ST_GeomFromGeoHash", "question": "基于GeoHash编码'9qqj7nmxncgyy4d0dbxqz0'和精度值10，生成对应的几何对象，再调用ST_AsText函数将该几何对象转换为标准WKT格式的文本表示。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POLYGON((-115.17282128334045 36.11464083194733,-115.17282128334045 36.114646196365356,-115.1728105545044 36.114646196365356,-115.1728105545044 36.11464083194733,-115.17282128334045 36.11464083194733))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the geometry object converted from the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' as a WKT string, using a precision parameter value of 10 for the conversion.", "source": "original", "new_id": 1520}
{"id": 272, "function": "ST_GeomFromGeoHash", "question": "输出GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'转换为几何对象后，精度为10的WKT格式字符串。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POLYGON((-115.17282128334045 36.11464083194733,-115.17282128334045 36.114646196365356,-115.1728105545044 36.114646196365356,-115.1728105545044 36.11464083194733,-115.17282128334045 36.11464083194733))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the geometry object converted from the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' as a WKT string, using a precision parameter value of 10 for the conversion.", "source": "original", "new_id": 1521}
{"id": 272, "function": "ST_GeomFromGeoHash", "question": "将GeoHash值'9qqj7nmxncgyy4d0dbxqz0'解析为几何对象并以WKT文本格式输出，其中10表示几何对象的精度参数。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POLYGON((-115.17282128334045 36.11464083194733,-115.17282128334045 36.114646196365356,-115.1728105545044 36.114646196365356,-115.1728105545044 36.11464083194733,-115.17282128334045 36.11464083194733))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the geometry object converted from the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' as a WKT string, using a precision parameter value of 10 for the conversion.", "source": "original", "new_id": 1522}
{"id": 272, "function": "ST_GeomFromGeoHash", "question": "以WKT字符串形式返回GeoHash编码'9qqj7nmxncgyy4d0dbxqz0'转换后的几何对象结果，转换时使用的精度参数值为10。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POLYGON((-115.17282128334045 36.11464083194733,-115.17282128334045 36.114646196365356,-115.1728105545044 36.114646196365356,-115.1728105545044 36.11464083194733,-115.17282128334045 36.11464083194733))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the geometry object converted from the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' as a WKT string, using a precision parameter value of 10 for the conversion.", "source": "original", "new_id": 1523}
{"id": 273, "function": "ST_GeomFromGML", "question": "使用GML格式数据$$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$，构建一个EPSG:4269坐标系的折线对象。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$);", "execution_result": [["0102000020AD100000030000006EC328081E214540FC8C0B0742CA51C027BF45274BCA51C02600FF942A2145406EC328081E214540FC8C0B0742CA51C0"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GML object of the LineString geometry converted by the ST_GeomFromGML function as $$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$. Its GML definition includes two independent coordinate points (42.258729 -71.16028 and 42.259112 -71.160837) and a repeated point referenced via xlink (#p1), with all coordinates based on the EPSG:4269 spatial reference system.", "source": "original", "new_id": 1524}
{"id": 273, "function": "ST_GeomFromGML", "question": "从GML格式的LineString数据创建几何对象，该折线由三个点组成：第一个点是p1(42.258729 -71.16028)，第二个点是(42.259112 -71.160837)，第三个点再次引用p1，坐标系为EPSG:4269。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$);", "execution_result": [["0102000020AD100000030000006EC328081E214540FC8C0B0742CA51C027BF45274BCA51C02600FF942A2145406EC328081E214540FC8C0B0742CA51C0"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GML object of the LineString geometry converted by the ST_GeomFromGML function as $$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$. Its GML definition includes two independent coordinate points (42.258729 -71.16028 and 42.259112 -71.160837) and a repeated point referenced via xlink (#p1), with all coordinates based on the EPSG:4269 spatial reference system.", "source": "original", "new_id": 1525}
{"id": 273, "function": "ST_GeomFromGML", "question": "解析GML格式数据$$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$，坐标系为EPSG:4269。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$);", "execution_result": [["0102000020AD100000030000006EC328081E214540FC8C0B0742CA51C027BF45274BCA51C02600FF942A2145406EC328081E214540FC8C0B0742CA51C0"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GML object of the LineString geometry converted by the ST_GeomFromGML function as $$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$. Its GML definition includes two independent coordinate points (42.258729 -71.16028 and 42.259112 -71.160837) and a repeated point referenced via xlink (#p1), with all coordinates based on the EPSG:4269 spatial reference system.", "source": "original", "new_id": 1526}
{"id": 273, "function": "ST_GeomFromGML", "question": "输出从GML格式的LineString对象GML对象为 $$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$ 转换得到的PostGIS几何对象。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$);", "execution_result": [["0102000020AD100000030000006EC328081E214540FC8C0B0742CA51C027BF45274BCA51C02600FF942A2145406EC328081E214540FC8C0B0742CA51C0"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GML object of the LineString geometry converted by the ST_GeomFromGML function as $$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$. Its GML definition includes two independent coordinate points (42.258729 -71.16028 and 42.259112 -71.160837) and a repeated point referenced via xlink (#p1), with all coordinates based on the EPSG:4269 spatial reference system.", "source": "original", "new_id": 1527}
{"id": 273, "function": "ST_GeomFromGML", "question": "将GML格式的LineString解析为PostGIS几何对象并输出，该LineString由三个点组成：起点42.258729 -71.16028（带gml:id=\"p1\"标识）、中间点42.259112 -71.160837（直接定义）、终点通过xlink:href=\"#p1\"复用起点坐标，且坐标系声明为EPSG:4269。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$);", "execution_result": [["0102000020AD100000030000006EC328081E214540FC8C0B0742CA51C027BF45274BCA51C02600FF942A2145406EC328081E214540FC8C0B0742CA51C0"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GML object of the LineString geometry converted by the ST_GeomFromGML function as $$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$. Its GML definition includes two independent coordinate points (42.258729 -71.16028 and 42.259112 -71.160837) and a repeated point referenced via xlink (#p1), with all coordinates based on the EPSG:4269 spatial reference system.", "source": "original", "new_id": 1528}
{"id": 273, "function": "ST_GeomFromGML", "question": "输出通过ST_GeomFromGML函数转换的LineString几何对象GML对象为$$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$，其GML定义包含两个独立坐标点（42.258729 -71.16028和42.259112 -71.160837）和一个通过xlink引用的重复点（#p1），且所有坐标基于EPSG:4269空间参考系统。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$);", "execution_result": [["0102000020AD100000030000006EC328081E214540FC8C0B0742CA51C027BF45274BCA51C02600FF942A2145406EC328081E214540FC8C0B0742CA51C0"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GML object of the LineString geometry converted by the ST_GeomFromGML function as $$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$. Its GML definition includes two independent coordinate points (42.258729 -71.16028 and 42.259112 -71.160837) and a repeated point referenced via xlink (#p1), with all coordinates based on the EPSG:4269 spatial reference system.", "source": "original", "new_id": 1529}
{"id": 274, "function": "ST_GeomFromGML", "question": "使用GML格式的LineString数据$$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$，将其转换为PostGIS几何对象。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$);", "execution_result": [["0102000020AD10000003000000FC8C0B0742CA51C06EC328081E21454027BF45274BCA51C02600FF942A214540ADBEBA2A50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the GML-formatted LineString geometry object `<gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString>` to a PostGIS geometry object, does the output retain the original coordinate system definition (EPSG:4269)?", "source": "original", "new_id": 1530}
{"id": 274, "function": "ST_GeomFromGML", "question": "如何从GML格式的LineString数据创建PostGIS几何对象？其中GML格式的数据为$$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$);", "execution_result": [["0102000020AD10000003000000FC8C0B0742CA51C06EC328081E21454027BF45274BCA51C02600FF942A214540ADBEBA2A50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the GML-formatted LineString geometry object `<gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString>` to a PostGIS geometry object, does the output retain the original coordinate system definition (EPSG:4269)?", "source": "original", "new_id": 1531}
{"id": 274, "function": "ST_GeomFromGML", "question": "将GML格式的LineString数据转换为PostGIS几何对象，其中GML格式的数据为$$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$);", "execution_result": [["0102000020AD10000003000000FC8C0B0742CA51C06EC328081E21454027BF45274BCA51C02600FF942A214540ADBEBA2A50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the GML-formatted LineString geometry object `<gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString>` to a PostGIS geometry object, does the output retain the original coordinate system definition (EPSG:4269)?", "source": "original", "new_id": 1532}
{"id": 274, "function": "ST_GeomFromGML", "question": "将GML格式的LineString几何对象 `<gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString>` 转换为PostGIS几何对象，输出结果的数据类型是什么？", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$);", "execution_result": [["0102000020AD10000003000000FC8C0B0742CA51C06EC328081E21454027BF45274BCA51C02600FF942A214540ADBEBA2A50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the GML-formatted LineString geometry object `<gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString>` to a PostGIS geometry object, does the output retain the original coordinate system definition (EPSG:4269)?", "source": "original", "new_id": 1533}
{"id": 274, "function": "ST_GeomFromGML", "question": "将包含三个坐标点（-71.16028,42.258729）、（-71.160837,42.259112）、（-71.161143,42.25932）的GML格式LineString几何对象转换为PostGIS几何对象，输出的几何对象是否包含SRID信息？", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$);", "execution_result": [["0102000020AD10000003000000FC8C0B0742CA51C06EC328081E21454027BF45274BCA51C02600FF942A214540ADBEBA2A50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the GML-formatted LineString geometry object `<gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString>` to a PostGIS geometry object, does the output retain the original coordinate system definition (EPSG:4269)?", "source": "original", "new_id": 1534}
{"id": 274, "function": "ST_GeomFromGML", "question": "将GML格式的LineString几何对象 `<gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString>` 转换为PostGIS几何对象后，输出的几何对象是否保留原始坐标系的定义（EPSG:4269）？", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$);", "execution_result": [["0102000020AD10000003000000FC8C0B0742CA51C06EC328081E21454027BF45274BCA51C02600FF942A214540ADBEBA2A50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After converting the GML-formatted LineString geometry object `<gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString>` to a PostGIS geometry object, does the output retain the original coordinate system definition (EPSG:4269)?", "source": "original", "new_id": 1535}
{"id": 275, "function": "ST_GeomFromGML", "question": "将GML格式的三维多面体表面转换为EWKT格式，该多面体由6个多边形面片组成，每个面片的顶点坐标分别为：第一个面片0 0 0 0 0 1 0 1 1 0 1 0 0 0 0，第二个面片0 0 0 0 1 0 1 1 0 1 0 0 0 0 0，第三个面片0 0 0 1 0 0 1 0 1 0 0 1 0 0 0，第四个面片1 1 0 1 1 1 1 0 1 1 0 0 1 1 0，第五个面片0 1 0 0 1 1 1 1 1 1 1 0 0 1 0，第六个面片0 0 1 1 0 1 1 1 1 0 1 1 0 0 1。", "sql": "SELECT ST_AsEWKT(ST_GeomFromGML(' <gml:PolyhedralSurface xmlns:gml=\"http://www.opengis.net/gml\"> <gml:polygonPatches> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> </gml:polygonPatches> </gml:PolyhedralSurface >'));", "execution_result": [["POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0)),((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0)),((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0)),((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GML-format 3D polyhedral surface to EWKT format, which consists of 6 polygonal faces with the following vertex sequences: first face (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), sixth face (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1536}
{"id": 275, "function": "ST_GeomFromGML", "question": "使用PostGIS将包含6个多边形面片的GML格式三维多面体表面转换为EWKT格式，其中每个面片的顶点坐标序列如下：第一个面片0 0 0 0 0 1 0 1 1 0 1 0 0 0 0，第二个面片0 0 0 0 1 0 1 1 0 1 0 0 0 0 0，第三个面片0 0 0 1 0 0 1 0 1 0 0 1 0 0 0，第四个面片1 1 0 1 1 1 1 0 1 1 0 0 1 1 0，第五个面片0 1 0 0 1 1 1 1 1 1 1 0 0 1 0，第六个面片0 0 1 1 0 1 1 1 1 0 1 1 0 0 1。", "sql": "SELECT ST_AsEWKT(ST_GeomFromGML(' <gml:PolyhedralSurface xmlns:gml=\"http://www.opengis.net/gml\"> <gml:polygonPatches> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> </gml:polygonPatches> </gml:PolyhedralSurface >'));", "execution_result": [["POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0)),((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0)),((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0)),((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GML-format 3D polyhedral surface to EWKT format, which consists of 6 polygonal faces with the following vertex sequences: first face (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), sixth face (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1537}
{"id": 275, "function": "ST_GeomFromGML", "question": "将GML格式的三维多面体表面数据转换为EWKT格式，该多面体包含6个多边形面片，各面片的三维坐标点序列分别为：面片1[0 0 0,0 0 1,0 1 1,0 1 0,0 0 0]，面片2[0 0 0,0 1 0,1 1 0,1 0 0,0 0 0]，面片3[0 0 0,1 0 0,1 0 1,0 0 1,0 0 0]，面片4[1 1 0,1 1 1,1 0 1,1 0 0,1 1 0]，面片5[0 1 0,0 1 1,1 1 1,1 1 0,0 1 0]，面片6[0 0 1,1 0 1,1 1 1,0 1 1,0 0 1]。", "sql": "SELECT ST_AsEWKT(ST_GeomFromGML(' <gml:PolyhedralSurface xmlns:gml=\"http://www.opengis.net/gml\"> <gml:polygonPatches> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> </gml:polygonPatches> </gml:PolyhedralSurface >'));", "execution_result": [["POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0)),((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0)),((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0)),((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GML-format 3D polyhedral surface to EWKT format, which consists of 6 polygonal faces with the following vertex sequences: first face (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), sixth face (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1538}
{"id": 275, "function": "ST_GeomFromGML", "question": "将GML格式的PolyhedralSurface几何对象转换为EWKT格式输出，该几何对象由6个三维多边形面片组成，每个面片的顶点坐标分别为：第一个面片(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个面片(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个面片(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个面片(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个面片(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个面片(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。", "sql": "SELECT ST_AsEWKT(ST_GeomFromGML(' <gml:PolyhedralSurface xmlns:gml=\"http://www.opengis.net/gml\"> <gml:polygonPatches> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> </gml:polygonPatches> </gml:PolyhedralSurface >'));", "execution_result": [["POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0)),((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0)),((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0)),((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GML-format 3D polyhedral surface to EWKT format, which consists of 6 polygonal faces with the following vertex sequences: first face (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), sixth face (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1539}
{"id": 275, "function": "ST_GeomFromGML", "question": "输出一个三维立方体的PolyhedralSurface几何对象的EWKT表示，该立方体由6个面组成，每个面的顶点坐标分别为：前表面(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，底表面(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，左表面(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，右表面(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，上表面(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，后表面(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。", "sql": "SELECT ST_AsEWKT(ST_GeomFromGML(' <gml:PolyhedralSurface xmlns:gml=\"http://www.opengis.net/gml\"> <gml:polygonPatches> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> </gml:polygonPatches> </gml:PolyhedralSurface >'));", "execution_result": [["POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0)),((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0)),((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0)),((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GML-format 3D polyhedral surface to EWKT format, which consists of 6 polygonal faces with the following vertex sequences: first face (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), sixth face (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1540}
{"id": 275, "function": "ST_GeomFromGML", "question": "将GML格式的三维多面体表面转换为EWKT格式输出，该多面体包含6个多边形面片，每个面片的顶点序列分别为：第一个面片(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个面片(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个面片(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个面片(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个面片(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个面片(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。", "sql": "SELECT ST_AsEWKT(ST_GeomFromGML(' <gml:PolyhedralSurface xmlns:gml=\"http://www.opengis.net/gml\"> <gml:polygonPatches> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> </gml:polygonPatches> </gml:PolyhedralSurface >'));", "execution_result": [["POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0)),((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0)),((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0)),((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GML-format 3D polyhedral surface to EWKT format, which consists of 6 polygonal faces with the following vertex sequences: first face (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second face (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third face (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth face (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth face (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), sixth face (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1541}
{"id": 276, "function": "ST_GeomFromGeoJSON", "question": "将GeoJSON格式的点对象{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}转换为WKT格式输出，其中点的X坐标为-48.23456，Y坐标为20.12345。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}')) AS wkt;", "execution_result": [["POINT(-48.23456 20.12345)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoJSON point geometry containing coordinates [-48.23456,20.12345] into standard WKT text output.", "source": "original", "new_id": 1542}
{"id": 276, "function": "ST_GeomFromGeoJSON", "question": "如何将包含经度-48.23456、纬度20.12345的GeoJSON点几何转换为标准的WKT文本表示？", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}')) AS wkt;", "execution_result": [["POINT(-48.23456 20.12345)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoJSON point geometry containing coordinates [-48.23456,20.12345] into standard WKT text output.", "source": "original", "new_id": 1543}
{"id": 276, "function": "ST_GeomFromGeoJSON", "question": "执行PostGIS函数将类型为Point、坐标值为[-48.23456,20.12345]的GeoJSON对象输出为WKT字符串。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}')) AS wkt;", "execution_result": [["POINT(-48.23456 20.12345)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoJSON point geometry containing coordinates [-48.23456,20.12345] into standard WKT text output.", "source": "original", "new_id": 1544}
{"id": 276, "function": "ST_GeomFromGeoJSON", "question": "将GeoJSON格式的点对象{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}转换为WKT字符串格式输出。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}')) AS wkt;", "execution_result": [["POINT(-48.23456 20.12345)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoJSON point geometry containing coordinates [-48.23456,20.12345] into standard WKT text output.", "source": "original", "new_id": 1545}
{"id": 276, "function": "ST_GeomFromGeoJSON", "question": "输出由经度-48.23456和纬度20.12345构成的GeoJSON点对象对应的WKT表示形式。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}')) AS wkt;", "execution_result": [["POINT(-48.23456 20.12345)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoJSON point geometry containing coordinates [-48.23456,20.12345] into standard WKT text output.", "source": "original", "new_id": 1546}
{"id": 276, "function": "ST_GeomFromGeoJSON", "question": "将包含坐标[-48.23456,20.12345]的GeoJSON点几何转换为标准WKT文本输出。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}')) AS wkt;", "execution_result": [["POINT(-48.23456 20.12345)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoJSON point geometry containing coordinates [-48.23456,20.12345] into standard WKT text output.", "source": "original", "new_id": 1547}
{"id": 277, "function": "ST_GeomFromGeoJSON", "question": "将GeoJSON格式的三维线段对象{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}转换为WKT格式输出，其中线段由三个三维点[1,2,3]、[4,5,6]和[7,8,9]组成。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}')) AS wkt;", "execution_result": [["LINESTRING Z (1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of the 3D LineString geometry generated by parsing the GeoJSON string {\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]} using the ST_GeomFromGeoJSON function.", "source": "original", "new_id": 1548}
{"id": 277, "function": "ST_GeomFromGeoJSON", "question": "如何用PostGIS将包含三个三维坐标点[1,2,3]、[4,5,6]和[7,8,9]的GeoJSON线段{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}转换为标准的WKT文本表示？", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}')) AS wkt;", "execution_result": [["LINESTRING Z (1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of the 3D LineString geometry generated by parsing the GeoJSON string {\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]} using the ST_GeomFromGeoJSON function.", "source": "original", "new_id": 1549}
{"id": 277, "function": "ST_GeomFromGeoJSON", "question": "执行PostGIS函数ST_GeomFromGeoJSON解析GeoJSON字符串{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}生成三维线段几何体，并通过ST_AsText输出其WKT格式文本。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}')) AS wkt;", "execution_result": [["LINESTRING Z (1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of the 3D LineString geometry generated by parsing the GeoJSON string {\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]} using the ST_GeomFromGeoJSON function.", "source": "original", "new_id": 1550}
{"id": 277, "function": "ST_GeomFromGeoJSON", "question": "输出将GeoJSON格式的LineString对象{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}转换为WKT字符串的结果，其中LineString包含三个三维点坐标[1,2,3]、[4,5,6]和[7,8,9]。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}')) AS wkt;", "execution_result": [["LINESTRING Z (1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of the 3D LineString geometry generated by parsing the GeoJSON string {\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]} using the ST_GeomFromGeoJSON function.", "source": "original", "new_id": 1551}
{"id": 277, "function": "ST_GeomFromGeoJSON", "question": "输出由三维点坐标[1,2,3]、[4,5,6]和[7,8,9]构成的LineString几何对象转换后的WKT格式文本。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}')) AS wkt;", "execution_result": [["LINESTRING Z (1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of the 3D LineString geometry generated by parsing the GeoJSON string {\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]} using the ST_GeomFromGeoJSON function.", "source": "original", "new_id": 1552}
{"id": 277, "function": "ST_GeomFromGeoJSON", "question": "输出通过ST_GeomFromGeoJSON函数解析GeoJSON字符串{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}生成的三维LineString几何对象的WKT表示形式。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}')) AS wkt;", "execution_result": [["LINESTRING Z (1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of the 3D LineString geometry generated by parsing the GeoJSON string {\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]} using the ST_GeomFromGeoJSON function.", "source": "original", "new_id": 1553}
{"id": 278, "function": "ST_GeomFromKML", "question": "将KML格式的LineString几何对象 <LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString> 转换为PostGIS几何对象。", "sql": "SELECT ST_GeomFromKML($$ <LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString> $$);", "execution_result": [["0102000020E610000002000000CA54C1A8A4CA51C05396218E75214540910F7A36ABCA51C01A51DA1B7C214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object generated by the ST_GeomFromKML function processing a KML-format LineString element (containing two vertices -71.1663,42.2614 and -71.1667,42.2616).", "source": "original", "new_id": 1554}
{"id": 278, "function": "ST_GeomFromKML", "question": "从KML字符串 <LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString> 创建一个包含两个坐标点(-71.1663,42.2614)和(-71.1667,42.2616)的LineString几何对象。", "sql": "SELECT ST_GeomFromKML($$ <LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString> $$);", "execution_result": [["0102000020E610000002000000CA54C1A8A4CA51C05396218E75214540910F7A36ABCA51C01A51DA1B7C214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object generated by the ST_GeomFromKML function processing a KML-format LineString element (containing two vertices -71.1663,42.2614 and -71.1667,42.2616).", "source": "original", "new_id": 1555}
{"id": 278, "function": "ST_GeomFromKML", "question": "使用PostGIS函数ST_GeomFromKML解析KML格式的LineString元素，其坐标序列为-71.1663,42.2614和-71.1667,42.2616，生成对应的空间几何对象。", "sql": "SELECT ST_GeomFromKML($$ <LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString> $$);", "execution_result": [["0102000020E610000002000000CA54C1A8A4CA51C05396218E75214540910F7A36ABCA51C01A51DA1B7C214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object generated by the ST_GeomFromKML function processing a KML-format LineString element (containing two vertices -71.1663,42.2614 and -71.1667,42.2616).", "source": "original", "new_id": 1556}
{"id": 278, "function": "ST_GeomFromKML", "question": "输出将KML格式的LineString字符串\"<LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString>\"转换为PostGIS几何对象的结果。", "sql": "SELECT ST_GeomFromKML($$ <LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString> $$);", "execution_result": [["0102000020E610000002000000CA54C1A8A4CA51C05396218E75214540910F7A36ABCA51C01A51DA1B7C214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object generated by the ST_GeomFromKML function processing a KML-format LineString element (containing two vertices -71.1663,42.2614 and -71.1667,42.2616).", "source": "original", "new_id": 1557}
{"id": 278, "function": "ST_GeomFromKML", "question": "输出由KML定义的二维线段（起点坐标-71.1663,42.2614，终点坐标-71.1667,42.2616）转换后的PostGIS几何数据类型。", "sql": "SELECT ST_GeomFromKML($$ <LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString> $$);", "execution_result": [["0102000020E610000002000000CA54C1A8A4CA51C05396218E75214540910F7A36ABCA51C01A51DA1B7C214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object generated by the ST_GeomFromKML function processing a KML-format LineString element (containing two vertices -71.1663,42.2614 and -71.1667,42.2616).", "source": "original", "new_id": 1558}
{"id": 278, "function": "ST_GeomFromKML", "question": "输出ST_GeomFromKML函数处理KML格式的LineString元素（包含两个顶点-71.1663,42.2614和-71.1667,42.2616）后生成的几何对象。", "sql": "SELECT ST_GeomFromKML($$ <LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString> $$);", "execution_result": [["0102000020E610000002000000CA54C1A8A4CA51C05396218E75214540910F7A36ABCA51C01A51DA1B7C214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometric object generated by the ST_GeomFromKML function processing a KML-format LineString element (containing two vertices -71.1663,42.2614 and -71.1667,42.2616).", "source": "original", "new_id": 1559}
{"id": 279, "function": "ST_GeomFromTWKB", "question": "将LINESTRING(126 34, 127 35)这条折线先转换为TWKB格式，再从TWKB格式转换回几何对象，最后以WKT格式输出。", "sql": "SELECT ST_AsText(ST_GeomFromTWKB(ST_AsTWKB('LINESTRING(126 34, 127 35)'::geometry)));", "execution_result": [["LINESTRING(126 34,127 35)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(126 34, 127 35) geometry to TWKB format using ST_AsTWKB, then restore it to a geometry object with ST_GeomFromTWKB, and finally output its WKT string representation.", "source": "original", "new_id": 1560}
{"id": 279, "function": "ST_GeomFromTWKB", "question": "对LINESTRING(126 34, 127 35)这条由点(126,34)和点(127,35)构成的折线进行TWKB格式的往返转换，并输出最终的WKT文本表示。", "sql": "SELECT ST_AsText(ST_GeomFromTWKB(ST_AsTWKB('LINESTRING(126 34, 127 35)'::geometry)));", "execution_result": [["LINESTRING(126 34,127 35)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(126 34, 127 35) geometry to TWKB format using ST_AsTWKB, then restore it to a geometry object with ST_GeomFromTWKB, and finally output its WKT string representation.", "source": "original", "new_id": 1561}
{"id": 279, "function": "ST_GeomFromTWKB", "question": "将包含两个顶点(126,34)和(127,35)的LINESTRING几何对象先编码为TWKB二进制格式，再解码回几何对象，最后以WKT文本格式显示结果。", "sql": "SELECT ST_AsText(ST_GeomFromTWKB(ST_AsTWKB('LINESTRING(126 34, 127 35)'::geometry)));", "execution_result": [["LINESTRING(126 34,127 35)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(126 34, 127 35) geometry to TWKB format using ST_AsTWKB, then restore it to a geometry object with ST_GeomFromTWKB, and finally output its WKT string representation.", "source": "original", "new_id": 1562}
{"id": 279, "function": "ST_GeomFromTWKB", "question": "输出将LINESTRING(126 34, 127 35)几何对象先转换为TWKB格式再转换回几何对象后得到的WKT字符串。", "sql": "SELECT ST_AsText(ST_GeomFromTWKB(ST_AsTWKB('LINESTRING(126 34, 127 35)'::geometry)));", "execution_result": [["LINESTRING(126 34,127 35)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(126 34, 127 35) geometry to TWKB format using ST_AsTWKB, then restore it to a geometry object with ST_GeomFromTWKB, and finally output its WKT string representation.", "source": "original", "new_id": 1563}
{"id": 279, "function": "ST_GeomFromTWKB", "question": "输出LINESTRING(126 34, 127 35)经过TWKB格式双向转换后最终呈现的WKT文本格式结果。", "sql": "SELECT ST_AsText(ST_GeomFromTWKB(ST_AsTWKB('LINESTRING(126 34, 127 35)'::geometry)));", "execution_result": [["LINESTRING(126 34,127 35)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(126 34, 127 35) geometry to TWKB format using ST_AsTWKB, then restore it to a geometry object with ST_GeomFromTWKB, and finally output its WKT string representation.", "source": "original", "new_id": 1564}
{"id": 279, "function": "ST_GeomFromTWKB", "question": "将LINESTRING(126 34, 127 35)几何对象通过ST_AsTWKB转换为TWKB格式，再通过ST_GeomFromTWKB还原为几何对象，最终输出其WKT字符串表示。", "sql": "SELECT ST_AsText(ST_GeomFromTWKB(ST_AsTWKB('LINESTRING(126 34, 127 35)'::geometry)));", "execution_result": [["LINESTRING(126 34,127 35)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the LINESTRING(126 34, 127 35) geometry to TWKB format using ST_AsTWKB, then restore it to a geometry object with ST_GeomFromTWKB, and finally output its WKT string representation.", "source": "original", "new_id": 1565}
{"id": 280, "function": "ST_GeomFromTWKB", "question": "将TWKB格式的二进制数据E'\\\\x620002f7f40dbce4040105'转换为几何对象，并以扩展WKT(EWKT)格式输出。", "sql": "SELECT ST_AsEWKT(ST_GeomFromTWKB(E'\\\\x620002f7f40dbce4040105'));", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the TWKB encoded string E'\\\\x620002f7f40dbce4040105' into a geometry object using the ST_GeomFromTWKB function and output the result in WKT format with SRID (ST_AsEWKT).", "source": "original", "new_id": 1566}
{"id": 280, "function": "ST_GeomFromTWKB", "question": "解码“微小的已知二进制”TWKB值E'\\\\x620002f7f40dbce4040105'对应的几何对象，并使用ST_AsEWKT函数输出其扩展WKT表示形式。", "sql": "SELECT ST_AsEWKT(ST_GeomFromTWKB(E'\\\\x620002f7f40dbce4040105'));", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the TWKB encoded string E'\\\\x620002f7f40dbce4040105' into a geometry object using the ST_GeomFromTWKB function and output the result in WKT format with SRID (ST_AsEWKT).", "source": "original", "new_id": 1567}
{"id": 280, "function": "ST_GeomFromTWKB", "question": "对TWKB编码的二进制几何数据E'\\\\x620002f7f40dbce4040105'执行几何对象转换，并以包含SRID信息的EWKT格式返回结果。", "sql": "SELECT ST_AsEWKT(ST_GeomFromTWKB(E'\\\\x620002f7f40dbce4040105'));", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the TWKB encoded string E'\\\\x620002f7f40dbce4040105' into a geometry object using the ST_GeomFromTWKB function and output the result in WKT format with SRID (ST_AsEWKT).", "source": "original", "new_id": 1568}
{"id": 280, "function": "ST_GeomFromTWKB", "question": "将TWKB格式的二进制数据E'\\\\x620002f7f40dbce4040105'转换为几何对象后，输出其EWKT格式的字符串表示。", "sql": "SELECT ST_AsEWKT(ST_GeomFromTWKB(E'\\\\x620002f7f40dbce4040105'));", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the TWKB encoded string E'\\\\x620002f7f40dbce4040105' into a geometry object using the ST_GeomFromTWKB function and output the result in WKT format with SRID (ST_AsEWKT).", "source": "original", "new_id": 1569}
{"id": 280, "function": "ST_GeomFromTWKB", "question": "输出ST_GeomFromTWKB函数解析TWKB二进制值E'\\\\x620002f7f40dbce4040105'生成的几何对象的EWKT表示。", "sql": "SELECT ST_AsEWKT(ST_GeomFromTWKB(E'\\\\x620002f7f40dbce4040105'));", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the TWKB encoded string E'\\\\x620002f7f40dbce4040105' into a geometry object using the ST_GeomFromTWKB function and output the result in WKT format with SRID (ST_AsEWKT).", "source": "original", "new_id": 1570}
{"id": 280, "function": "ST_GeomFromTWKB", "question": "将TWKB编码E'\\\\x620002f7f40dbce4040105'通过ST_GeomFromTWKB函数转换为几何对象，并以包含SRID的WKT格式(ST_AsEWKT)输出结果。", "sql": "SELECT ST_AsEWKT(ST_GeomFromTWKB(E'\\\\x620002f7f40dbce4040105'));", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the TWKB encoded string E'\\\\x620002f7f40dbce4040105' into a geometry object using the ST_GeomFromTWKB function and output the result in WKT format with SRID (ST_AsEWKT).", "source": "original", "new_id": 1571}
{"id": 281, "function": "ST_LineFromEncodedPolyline", "question": "将编码折线字符串'_p~iF~ps|U_ulLnnqC_mqNvxq`@'解码为几何线对象，并以EWKT格式输出其空间数据。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@'));", "execution_result": [["SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the encoded polyline string `_p~iF~ps|U_ulLnnqC_mqNvxq`@ into a geometry object using the ST_LineFromEncodedPolyline function and output the result in EWKT format.", "source": "original", "new_id": 1572}
{"id": 281, "function": "ST_LineFromEncodedPolyline", "question": "使用PostGIS函数ST_LineFromEncodedPolyline解析Google编码折线'_p~iF~ps|U_ulLnnqC_mqNvxq`@'，生成线几何对象后通过ST_AsEWKT输出包含SRID的WKT表示。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@'));", "execution_result": [["SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the encoded polyline string `_p~iF~ps|U_ulLnnqC_mqNvxq`@ into a geometry object using the ST_LineFromEncodedPolyline function and output the result in EWKT format.", "source": "original", "new_id": 1573}
{"id": 281, "function": "ST_LineFromEncodedPolyline", "question": "对编码折线参数'_p~iF~ps|U_ulLnnqC_mqNvxq`@'执行ST_LineFromEncodedPolyline转换，将结果以包含坐标系的EWKT文本格式（如SRID=4326;LINESTRING(...)）完整输出。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@'));", "execution_result": [["SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the encoded polyline string `_p~iF~ps|U_ulLnnqC_mqNvxq`@ into a geometry object using the ST_LineFromEncodedPolyline function and output the result in EWKT format.", "source": "original", "new_id": 1574}
{"id": 281, "function": "ST_LineFromEncodedPolyline", "question": "将编码折线字符串'_p~iF~ps|U_ulLnnqC_mqNvxq`@'转换为几何线段后，输出其包含空间参考系的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@'));", "execution_result": [["SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the encoded polyline string `_p~iF~ps|U_ulLnnqC_mqNvxq`@ into a geometry object using the ST_LineFromEncodedPolyline function and output the result in EWKT format.", "source": "original", "new_id": 1575}
{"id": 281, "function": "ST_LineFromEncodedPolyline", "question": "根据编码折线算法生成字符串'_p~iF~ps|U_ulLnnqC_mqNvxq`@'，输出其解析后的线段几何对象的扩展WKT表示（含SRID）。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@'));", "execution_result": [["SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the encoded polyline string `_p~iF~ps|U_ulLnnqC_mqNvxq`@ into a geometry object using the ST_LineFromEncodedPolyline function and output the result in EWKT format.", "source": "original", "new_id": 1576}
{"id": 281, "function": "ST_LineFromEncodedPolyline", "question": "将_p~iF~ps|U_ulLnnqC_mqNvxq`@这一特定编码折线字符串通过ST_LineFromEncodedPolyline函数转换为几何对象后，以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@'));", "execution_result": [["SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the encoded polyline string `_p~iF~ps|U_ulLnnqC_mqNvxq`@ into a geometry object using the ST_LineFromEncodedPolyline function and output the result in EWKT format.", "source": "original", "new_id": 1577}
{"id": 282, "function": "ST_LineFromEncodedPolyline", "question": "将编码折线字符串'_p~iF~ps|U_ulLnnqC_mqNvxq`@'转换为几何线对象，精度参数为6，并以扩展WKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@',6));", "execution_result": [["SRID=4326;LINESTRING(-12.02 3.85,-12.095 4.07,-12.6453 4.3252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Decode the encoded polyline '_p~iF~ps|U_ulLnnqC_mqNvxq`@' into a line geometry object (with precision parameter set to 6), then output its extended WKT representation including SRID information.", "source": "original", "new_id": 1578}
{"id": 282, "function": "ST_LineFromEncodedPolyline", "question": "使用精度值6对编码折线'_p~iF~ps|U_ulLnnqC_mqNvxq`@'进行解码，生成线几何对象后输出包含SRID的EWKT表示。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@',6));", "execution_result": [["SRID=4326;LINESTRING(-12.02 3.85,-12.095 4.07,-12.6453 4.3252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Decode the encoded polyline '_p~iF~ps|U_ulLnnqC_mqNvxq`@' into a line geometry object (with precision parameter set to 6), then output its extended WKT representation including SRID information.", "source": "original", "new_id": 1579}
{"id": 282, "function": "ST_LineFromEncodedPolyline", "question": "基于编码折线'_p~iF~ps|U_ulLnnqC_mqNvxq`@'和精度参数6构建线要素，返回包含坐标参考系统的扩展WKT字符串。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@',6));", "execution_result": [["SRID=4326;LINESTRING(-12.02 3.85,-12.095 4.07,-12.6453 4.3252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Decode the encoded polyline '_p~iF~ps|U_ulLnnqC_mqNvxq`@' into a line geometry object (with precision parameter set to 6), then output its extended WKT representation including SRID information.", "source": "original", "new_id": 1580}
{"id": 282, "function": "ST_LineFromEncodedPolyline", "question": "输出将编码折线字符串'_p~iF~ps|U_ulLnnqC_mqNvxq`@'（精度为6）转换为线几何对象后，再转换为EWKT格式的字符串结果。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@',6));", "execution_result": [["SRID=4326;LINESTRING(-12.02 3.85,-12.095 4.07,-12.6453 4.3252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Decode the encoded polyline '_p~iF~ps|U_ulLnnqC_mqNvxq`@' into a line geometry object (with precision parameter set to 6), then output its extended WKT representation including SRID information.", "source": "original", "new_id": 1581}
{"id": 282, "function": "ST_LineFromEncodedPolyline", "question": "以EWKT格式输出通过Google编码折线算法生成的线几何对象，其中输入编码字符串为'_p~iF~ps|U_ulLnnqC_mqNvxq`@'且精度参数为6。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@',6));", "execution_result": [["SRID=4326;LINESTRING(-12.02 3.85,-12.095 4.07,-12.6453 4.3252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Decode the encoded polyline '_p~iF~ps|U_ulLnnqC_mqNvxq`@' into a line geometry object (with precision parameter set to 6), then output its extended WKT representation including SRID information.", "source": "original", "new_id": 1582}
{"id": 282, "function": "ST_LineFromEncodedPolyline", "question": "将编码折线'_p~iF~ps|U_ulLnnqC_mqNvxq`@'转换为线几何对象（精度参数设置为6）后，输出其包含SRID信息的扩展WKT表示形式。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@',6));", "execution_result": [["SRID=4326;LINESTRING(-12.02 3.85,-12.095 4.07,-12.6453 4.3252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Decode the encoded polyline '_p~iF~ps|U_ulLnnqC_mqNvxq`@' into a line geometry object (with precision parameter set to 6), then output its extended WKT representation including SRID information.", "source": "original", "new_id": 1583}
{"id": 283, "function": "ST_PointFromGeoHash", "question": "将GeoHash值'9qqj7nmxncgyy4d0dbxqz0'转换为几何点对象，并以WKT格式输出该点的坐标。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POINT(-115.17281600000001 36.11464599999999)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' into a geometric point and output the standard WKT string representation of the point.", "source": "original", "new_id": 1584}
{"id": 283, "function": "ST_PointFromGeoHash", "question": "使用PostGIS函数ST_PointFromGeoHash解析GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'，生成对应的几何点，并通过ST_AsText函数输出该点的WKT表示形式。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POINT(-115.17281600000001 36.11464599999999)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' into a geometric point and output the standard WKT string representation of the point.", "source": "original", "new_id": 1585}
{"id": 283, "function": "ST_PointFromGeoHash", "question": "基于GeoHash编码'9qqj7nmxncgyy4d0dbxqz0'，计算其对应的经纬度坐标点，并以文本形式（WKT）返回该点的具体坐标值。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POINT(-115.17281600000001 36.11464599999999)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' into a geometric point and output the standard WKT string representation of the point.", "source": "original", "new_id": 1586}
{"id": 283, "function": "ST_PointFromGeoHash", "question": "输出将GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'转换为几何点对象后的WKT格式字符串。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POINT(-115.17281600000001 36.11464599999999)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' into a geometric point and output the standard WKT string representation of the point.", "source": "original", "new_id": 1587}
{"id": 283, "function": "ST_PointFromGeoHash", "question": "以WKT文本形式返回GeoHash值'9qqj7nmxncgyy4d0dbxqz0'解析得到的二维点坐标。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POINT(-115.17281600000001 36.11464599999999)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' into a geometric point and output the standard WKT string representation of the point.", "source": "original", "new_id": 1588}
{"id": 283, "function": "ST_PointFromGeoHash", "question": "将GeoHash编码'9qqj7nmxncgyy4d0dbxqz0'转换为几何点，并输出该点的标准WKT字符串表示。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POINT(-115.17281600000001 36.11464599999999)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' into a geometric point and output the standard WKT string representation of the point.", "source": "original", "new_id": 1589}
{"id": 284, "function": "ST_PointFromGeoHash", "question": "将GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'转换为精度为10的几何点对象，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POINT(-115.17281591892242 36.11464351415634)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' into a geometric point with 10-digit precision using the ST_PointFromGeoHash function and output the WKT string representation of the point.", "source": "original", "new_id": 1590}
{"id": 284, "function": "ST_PointFromGeoHash", "question": "基于GeoHash值'9qqj7nmxncgyy4d0dbxqz0'和精度参数10，生成对应的几何点坐标，并以文本形式返回该点的WKT表示。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POINT(-115.17281591892242 36.11464351415634)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' into a geometric point with 10-digit precision using the ST_PointFromGeoHash function and output the WKT string representation of the point.", "source": "original", "new_id": 1591}
{"id": 284, "function": "ST_PointFromGeoHash", "question": "使用PostGIS函数ST_PointFromGeoHash，将输入的GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'在精度为10的条件下解析为几何点，再通过ST_AsText输出其WKT格式文本。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POINT(-115.17281591892242 36.11464351415634)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' into a geometric point with 10-digit precision using the ST_PointFromGeoHash function and output the WKT string representation of the point.", "source": "original", "new_id": 1592}
{"id": 284, "function": "ST_PointFromGeoHash", "question": "输出将GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'转换为精度为10的几何点对象后，对应的WKT格式字符串。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POINT(-115.17281591892242 36.11464351415634)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' into a geometric point with 10-digit precision using the ST_PointFromGeoHash function and output the WKT string representation of the point.", "source": "original", "new_id": 1593}
{"id": 284, "function": "ST_PointFromGeoHash", "question": "以WKT文本形式返回GeoHash值'9qqj7nmxncgyy4d0dbxqz0'在10位精度下解析得到的点坐标结果。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POINT(-115.17281591892242 36.11464351415634)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' into a geometric point with 10-digit precision using the ST_PointFromGeoHash function and output the WKT string representation of the point.", "source": "original", "new_id": 1594}
{"id": 284, "function": "ST_PointFromGeoHash", "question": "将GeoHash编码'9qqj7nmxncgyy4d0dbxqz0'通过ST_PointFromGeoHash函数转换为10位精度的几何点，并输出该点的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POINT(-115.17281591892242 36.11464351415634)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the GeoHash code '9qqj7nmxncgyy4d0dbxqz0' into a geometric point with 10-digit precision using the ST_PointFromGeoHash function and output the WKT string representation of the point.", "source": "original", "new_id": 1595}
{"id": 285, "function": "ST_PointFromGeoHash", "question": "将GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'的前4位精度转换为对应的几何点对象，并以WKT格式输出该点的坐标值。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POINT(-115.13671875 36.123046875)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the complete GeoHash string '9qqj7nmxncgyy4d0dbxqz0' into a geometry point using the ST_PointFromGeoHash function with a precision of 4, and output the WKT string representation of the resulting point.", "source": "original", "new_id": 1596}
{"id": 285, "function": "ST_PointFromGeoHash", "question": "基于GeoHash值'9qqj7nmxncgyy4d0dbxqz0'，提取其前4位字符作为地理编码精度，生成对应的二维点几何对象，并返回该点的WKT文本表示。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POINT(-115.13671875 36.123046875)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the complete GeoHash string '9qqj7nmxncgyy4d0dbxqz0' into a geometry point using the ST_PointFromGeoHash function with a precision of 4, and output the WKT string representation of the resulting point.", "source": "original", "new_id": 1597}
{"id": 285, "function": "ST_PointFromGeoHash", "question": "使用PostGIS函数ST_PointFromGeoHash，将输入的GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'按4位精度解析为几何点坐标，再通过ST_AsText输出该点的WKT格式文本。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POINT(-115.13671875 36.123046875)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the complete GeoHash string '9qqj7nmxncgyy4d0dbxqz0' into a geometry point using the ST_PointFromGeoHash function with a precision of 4, and output the WKT string representation of the resulting point.", "source": "original", "new_id": 1598}
{"id": 285, "function": "ST_PointFromGeoHash", "question": "输出将GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'转换为几何点时，仅保留前4位精度后生成的WKT格式点坐标字符串。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POINT(-115.13671875 36.123046875)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the complete GeoHash string '9qqj7nmxncgyy4d0dbxqz0' into a geometry point using the ST_PointFromGeoHash function with a precision of 4, and output the WKT string representation of the resulting point.", "source": "original", "new_id": 1599}
{"id": 285, "function": "ST_PointFromGeoHash", "question": "以WKT文本格式返回GeoHash值'9qqj7nmxncgyy4d0dbxqz0'经4位精度截断后对应的二维点坐标。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POINT(-115.13671875 36.123046875)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the complete GeoHash string '9qqj7nmxncgyy4d0dbxqz0' into a geometry point using the ST_PointFromGeoHash function with a precision of 4, and output the WKT string representation of the resulting point.", "source": "original", "new_id": 1600}
{"id": 285, "function": "ST_PointFromGeoHash", "question": "将完整的GeoHash字符串'9qqj7nmxncgyy4d0dbxqz0'通过ST_PointFromGeoHash函数转换为几何点，并指定精度为4，最终输出该点的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POINT(-115.13671875 36.123046875)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the complete GeoHash string '9qqj7nmxncgyy4d0dbxqz0' into a geometry point using the ST_PointFromGeoHash function with a precision of 4, and output the WKT string representation of the resulting point.", "source": "original", "new_id": 1601}
{"id": 287, "function": "ST_AsEWKT", "question": "将包含点(60E30A41,785C0241,3F800000)、点(18E20A41,485F0241,40000000)和点(18E20A41,305C0241,40080000)的几何集合转换为EWKT格式。", "sql": "SELECT ST_AsEWKT('0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840')", "execution_result": [["CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 3D linestring in EWKT format, composed of three 3D points: the first point has coordinates (60E30A41, 785C0241) with a Z-value of 1.0, the second point has coordinates (18E20A41, 485F0241) with a Z-value of 2.0, and the third point has coordinates (18E20A41, 305C0241) with a Z-value of 3.0.", "source": "original", "new_id": 1602}
{"id": 287, "function": "ST_AsEWKT", "question": "输出三个三维点(60E30A41,785C0241,1.0)、(18E20A41,485F0241,2.0)和(18E20A41,305C0241,3.0)组成的几何集合的EWKT表示。", "sql": "SELECT ST_AsEWKT('0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840')", "execution_result": [["CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 3D linestring in EWKT format, composed of three 3D points: the first point has coordinates (60E30A41, 785C0241) with a Z-value of 1.0, the second point has coordinates (18E20A41, 485F0241) with a Z-value of 2.0, and the third point has coordinates (18E20A41, 305C0241) with a Z-value of 3.0.", "source": "original", "new_id": 1603}
{"id": 287, "function": "ST_AsEWKT", "question": "将以下三维带M值的圆弧线几何对象转换为扩展WKT格式输出：该几何由三个点构成，第一个点坐标为X=60E30A41(十六进制)/Y=785C0241(十六进制)/Z=0000F03F(十六进制)，第二个点坐标为X=18E20A41/Y=485F0241/Z=00000040，第三个点坐标为X=18E20A41/Y=305C0241/Z=00000840。", "sql": "SELECT ST_AsEWKT('0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840')", "execution_result": [["CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 3D linestring in EWKT format, composed of three 3D points: the first point has coordinates (60E30A41, 785C0241) with a Z-value of 1.0, the second point has coordinates (18E20A41, 485F0241) with a Z-value of 2.0, and the third point has coordinates (18E20A41, 305C0241) with a Z-value of 3.0.", "source": "original", "new_id": 1604}
{"id": 287, "function": "ST_AsEWKT", "question": "以EWKT格式输出包含点(60E30A41,785C0241,1.0)、点(18E20A41,485F0241,2.0)和点(18E20A41,305C0241,3.0)的几何集合。", "sql": "SELECT ST_AsEWKT('0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840')", "execution_result": [["CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 3D linestring in EWKT format, composed of three 3D points: the first point has coordinates (60E30A41, 785C0241) with a Z-value of 1.0, the second point has coordinates (18E20A41, 485F0241) with a Z-value of 2.0, and the third point has coordinates (18E20A41, 305C0241) with a Z-value of 3.0.", "source": "original", "new_id": 1605}
{"id": 287, "function": "ST_AsEWKT", "question": "获取三个三维点((60E30A41,785C0241,1.0)、(18E20A41,485F0241,2.0)和(18E20A41,305C0241,3.0))组成的几何集合的扩展WKT字符串表示。", "sql": "SELECT ST_AsEWKT('0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840')", "execution_result": [["CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 3D linestring in EWKT format, composed of three 3D points: the first point has coordinates (60E30A41, 785C0241) with a Z-value of 1.0, the second point has coordinates (18E20A41, 485F0241) with a Z-value of 2.0, and the third point has coordinates (18E20A41, 305C0241) with a Z-value of 3.0.", "source": "original", "new_id": 1606}
{"id": 287, "function": "ST_AsEWKT", "question": "输出EWKT格式的三维曲线字符串，该曲线由三个三维点组成：第一个点坐标为(60E30A41, 785C0241)且Z值为1.0，第二个点坐标为(18E20A41, 485F0241)且Z值为2.0，第三个点坐标为(18E20A41, 305C0241)且Z值为3.0。", "sql": "SELECT ST_AsEWKT('0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840')", "execution_result": [["CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 3D linestring in EWKT format, composed of three 3D points: the first point has coordinates (60E30A41, 785C0241) with a Z-value of 1.0, the second point has coordinates (18E20A41, 485F0241) with a Z-value of 2.0, and the third point has coordinates (18E20A41, 305C0241) with a Z-value of 3.0.", "source": "original", "new_id": 1607}
{"id": 290, "function": "ST_AsText", "question": "将坐标为(111.1111111, 1.1111111)的点转换为WKT格式文本。", "sql": "SELECT ST_AsText('POINT(111.1111111 1.1111111)');", "execution_result": [["POINT(111.1111111 1.1111111)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(111.1111111 1.1111111), where the X coordinate is 111.1111111 and the Y coordinate is 1.1111111.", "source": "original", "new_id": 1608}
{"id": 290, "function": "ST_AsText", "question": "输出POINT(111.1111111 1.1111111)的Well-Known Text表示。", "sql": "SELECT ST_AsText('POINT(111.1111111 1.1111111)');", "execution_result": [["POINT(111.1111111 1.1111111)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(111.1111111 1.1111111), where the X coordinate is 111.1111111 and the Y coordinate is 1.1111111.", "source": "original", "new_id": 1609}
{"id": 290, "function": "ST_AsText", "question": "将坐标为POINT(111.1111111 1.1111111)的二维点转换为WKT格式文本输出，不进行任何小数位截断。", "sql": "SELECT ST_AsText('POINT(111.1111111 1.1111111)');", "execution_result": [["POINT(111.1111111 1.1111111)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(111.1111111 1.1111111), where the X coordinate is 111.1111111 and the Y coordinate is 1.1111111.", "source": "original", "new_id": 1610}
{"id": 290, "function": "ST_AsText", "question": "以WKT字符串格式返回POINT(111.1111111 1.1111111)的文本表示。", "sql": "SELECT ST_AsText('POINT(111.1111111 1.1111111)');", "execution_result": [["POINT(111.1111111 1.1111111)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(111.1111111 1.1111111), where the X coordinate is 111.1111111 and the Y coordinate is 1.1111111.", "source": "original", "new_id": 1611}
{"id": 290, "function": "ST_AsText", "question": "获取点POINT(111.1111111 1.1111111)的Well-Known Text输出结果。", "sql": "SELECT ST_AsText('POINT(111.1111111 1.1111111)');", "execution_result": [["POINT(111.1111111 1.1111111)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(111.1111111 1.1111111), where the X coordinate is 111.1111111 and the Y coordinate is 1.1111111.", "source": "original", "new_id": 1612}
{"id": 290, "function": "ST_AsText", "question": "输出二维点POINT(111.1111111 1.1111111)的WKT字符串表示，其中X坐标为111.1111111，Y坐标为1.1111111。", "sql": "SELECT ST_AsText('POINT(111.1111111 1.1111111)');", "execution_result": [["POINT(111.1111111 1.1111111)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT string representation of the 2D point POINT(111.1111111 1.1111111), where the X coordinate is 111.1111111 and the Y coordinate is 1.1111111.", "source": "original", "new_id": 1613}
{"id": 291, "function": "ST_AsBinary", "question": "将POLYGON((0 0,0 1,1 1,1 0,0 0))转换为二进制格式，坐标系为EPSG:4326。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Output the result of converting the WKT-formatted POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry (using SRID 4326) to binary format.", "source": "original", "new_id": 1614}
{"id": 291, "function": "ST_AsBinary", "question": "输出由坐标(0 0)、(0 1)、(1 1)、(1 0)、(0 0)构成的多边形的二进制数据，坐标系为EPSG:4326。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Output the result of converting the WKT-formatted POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry (using SRID 4326) to binary format.", "source": "original", "new_id": 1615}
{"id": 291, "function": "ST_AsBinary", "question": "将WKT格式的POLYGON对象（顶点坐标依次为0 0、0 1、1 1、1 0、0 0）通过SRID 4326转换为几何对象后，再转换为二进制格式输出。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Output the result of converting the WKT-formatted POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry (using SRID 4326) to binary format.", "source": "original", "new_id": 1616}
{"id": 291, "function": "ST_AsBinary", "question": "输出POLYGON((0 0,0 1,1 1,1 0,0 0))的二进制格式结果，坐标系为EPSG:4326。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Output the result of converting the WKT-formatted POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry (using SRID 4326) to binary format.", "source": "original", "new_id": 1617}
{"id": 291, "function": "ST_AsBinary", "question": "以二进制流形式返回多边形POLYGON((0 0,0 1,1 1,1 0,0 0))的数据，坐标系为EPSG:4326。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Output the result of converting the WKT-formatted POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry (using SRID 4326) to binary format.", "source": "original", "new_id": 1618}
{"id": 291, "function": "ST_AsBinary", "question": "输出将WKT格式的POLYGON((0 0,0 1,1 1,1 0,0 0))几何对象（使用SRID 4326）转换为二进制格式的结果。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Output the result of converting the WKT-formatted POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry (using SRID 4326) to binary format.", "source": "original", "new_id": 1619}
{"id": 292, "function": "ST_AsBinary", "question": "将POLYGON((0 0,0 1,1 1,1 0,0 0))（SRID 4326）转换为XDR字节序的二进制格式（WGS84坐标系）。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["AAAAAAMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAD/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the geometry object POLYGON((0 0,0 1,1 1,1 0,0 0)) with SRID 4326 to a binary WKB string in XDR encoding format.", "source": "original", "new_id": 1620}
{"id": 292, "function": "ST_AsBinary", "question": "以XDR字节序输出POLYGON((0 0,0 1,1 1,1 0,0 0))的二进制数据（WGS84坐标系）。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["AAAAAAMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAD/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the geometry object POLYGON((0 0,0 1,1 1,1 0,0 0)) with SRID 4326 to a binary WKB string in XDR encoding format.", "source": "original", "new_id": 1621}
{"id": 292, "function": "ST_AsBinary", "question": "将SRID为4326的POLYGON几何对象（顶点坐标依次为(0 0)、(0 1)、(1 1)、(1 0)、(0 0)）转换为XDR格式的二进制表示。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["AAAAAAMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAD/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the geometry object POLYGON((0 0,0 1,1 1,1 0,0 0)) with SRID 4326 to a binary WKB string in XDR encoding format.", "source": "original", "new_id": 1622}
{"id": 292, "function": "ST_AsBinary", "question": "以二进制格式返回POLYGON((0 0,0 1,1 1,1 0,0 0))的几何数据（WGS84坐标系），输出字节序为XDR。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["AAAAAAMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAD/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the geometry object POLYGON((0 0,0 1,1 1,1 0,0 0)) with SRID 4326 to a binary WKB string in XDR encoding format.", "source": "original", "new_id": 1623}
{"id": 292, "function": "ST_AsBinary", "question": "将SRID为4326的POLYGON((0 0,0 1,1 1,1 0,0 0))几何对象转换为XDR编码格式的二进制WKB字符串输出。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["AAAAAAMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAD/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the geometry object POLYGON((0 0,0 1,1 1,1 0,0 0)) with SRID 4326 to a binary WKB string in XDR encoding format.", "source": "original", "new_id": 1624}
{"id": 293, "function": "ST_AsEWKB", "question": "将SRID为4326的多边形POLYGON((0 0,0 1,1 1,1 0,0 0))转换为EWKB格式输出。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAACDmEAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the polygon POLYGON((0 0,0 1,1 1,1 0,0 0)) in WGS84 coordinate system (SRID 4326) to EWKB format output.", "source": "original", "new_id": 1625}
{"id": 293, "function": "ST_AsEWKB", "question": "输出由坐标点(0 0)、(0 1)、(1 1)、(1 0)、(0 0)组成的多边形在WGS84坐标系下的EWKB表示。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAACDmEAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the polygon POLYGON((0 0,0 1,1 1,1 0,0 0)) in WGS84 coordinate system (SRID 4326) to EWKB format output.", "source": "original", "new_id": 1626}
{"id": 293, "function": "ST_AsEWKB", "question": "将WKT格式的二维多边形POLYGON((0 0,0 1,1 1,1 0,0 0))通过SRID为4326的空间参考系转换为EWKB格式输出，其中多边形顶点坐标依次为(0 0)、(0 1)、(1 1)、(1 0)并闭合回(0 0)。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAACDmEAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the polygon POLYGON((0 0,0 1,1 1,1 0,0 0)) in WGS84 coordinate system (SRID 4326) to EWKB format output.", "source": "original", "new_id": 1627}
{"id": 293, "function": "ST_AsEWKB", "question": "以EWKB二进制格式输出多边形POLYGON((0 0,0 1,1 1,1 0,0 0))的几何数据,坐标系为EPSG:4326。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAACDmEAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the polygon POLYGON((0 0,0 1,1 1,1 0,0 0)) in WGS84 coordinate system (SRID 4326) to EWKB format output.", "source": "original", "new_id": 1628}
{"id": 293, "function": "ST_AsEWKB", "question": "获取多边形几何对象((0 0,0 1,1 1,1 0,0 0))的扩展Well-Known二进制表示结果,坐标系为EPSG:4326。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAACDmEAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the polygon POLYGON((0 0,0 1,1 1,1 0,0 0)) in WGS84 coordinate system (SRID 4326) to EWKB format output.", "source": "original", "new_id": 1629}
{"id": 293, "function": "ST_AsEWKB", "question": "将WGS84坐标系(SRID 4326)下的多边形POLYGON((0 0,0 1,1 1,1 0,0 0))转换为EWKB格式输出。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAACDmEAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the polygon POLYGON((0 0,0 1,1 1,1 0,0 0)) in WGS84 coordinate system (SRID 4326) to EWKB format output.", "source": "original", "new_id": 1630}
{"id": 294, "function": "ST_AsEWKB", "question": "将SRID为4326的多边形POLYGON((0 0,0 1,1 1,1 0,0 0))转换为XDR编码的EWKB格式。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["ACAAAAMAABDmAAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the polygon POLYGON((0 0,0 1,1 1,1 0,0 0)) in WGS84 coordinate system (SRID 4326) to XDR byte order EWKB format output.", "source": "original", "new_id": 1631}
{"id": 294, "function": "ST_AsEWKB", "question": "输出由坐标(0 0)、(0 1)、(1 1)、(1 0)、(0 0)组成的WGS84多边形几何的XDR编码二进制数据,坐标系为EPSG:4326。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["ACAAAAMAABDmAAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the polygon POLYGON((0 0,0 1,1 1,1 0,0 0)) in WGS84 coordinate system (SRID 4326) to XDR byte order EWKB format output.", "source": "original", "new_id": 1632}
{"id": 294, "function": "ST_AsEWKB", "question": "将WKT格式的二维多边形POLYGON((0 0,0 1,1 1,1 0,0 0))（顶点坐标依次为(0,0)、(0,1)、(1,1)、(1,0)、(0,0)）转换为EWKB格式，使用SRID 4326坐标系，并以XDR字节序输出结果。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["ACAAAAMAABDmAAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the polygon POLYGON((0 0,0 1,1 1,1 0,0 0)) in WGS84 coordinate system (SRID 4326) to XDR byte order EWKB format output.", "source": "original", "new_id": 1633}
{"id": 294, "function": "ST_AsEWKB", "question": "以XDR编码的EWKB二进制格式输出POLYGON((0 0,0 1,1 1,1 0,0 0))几何对象，坐标系为EPSG:4326。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["ACAAAAMAABDmAAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the polygon POLYGON((0 0,0 1,1 1,1 0,0 0)) in WGS84 coordinate system (SRID 4326) to XDR byte order EWKB format output.", "source": "original", "new_id": 1634}
{"id": 294, "function": "ST_AsEWKB", "question": "获取多边形几何对象(0 0,0 1,1 1,1 0,0 0)的二进制表示，使用XDR字节顺序，坐标系为EPSG:4326。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["ACAAAAMAABDmAAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the polygon POLYGON((0 0,0 1,1 1,1 0,0 0)) in WGS84 coordinate system (SRID 4326) to XDR byte order EWKB format output.", "source": "original", "new_id": 1635}
{"id": 294, "function": "ST_AsEWKB", "question": "将WGS84坐标系(SRID 4326)下的多边形POLYGON((0 0,0 1,1 1,1 0,0 0))转换为XDR字节序的EWKB格式输出。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["ACAAAAMAABDmAAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert the polygon POLYGON((0 0,0 1,1 1,1 0,0 0)) in WGS84 coordinate system (SRID 4326) to XDR byte order EWKB format output.", "source": "original", "new_id": 1636}
{"id": 295, "function": "ST_AsHEXEWKB", "question": "将POLYGON((0 0,0 1,1 1,1 0,0 0))（SRID 4326）转换为HEXEWKB格式。", "sql": "SELECT ST_AsHEXEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["0103000020E61000000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Translate the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object with SRID 4326 into a hexadecimal string in HEXEWKB format.", "source": "original", "new_id": 1637}
{"id": 295, "function": "ST_AsHEXEWKB", "question": "输出由坐标(0 0)、(0 1)、(1 1)、(1 0)、(0 0)构成的多边形（EPSG:4326）的HEXEWKB字符串。", "sql": "SELECT ST_AsHEXEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["0103000020E61000000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Translate the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object with SRID 4326 into a hexadecimal string in HEXEWKB format.", "source": "original", "new_id": 1638}
{"id": 295, "function": "ST_AsHEXEWKB", "question": "将SRID为4326的POLYGON几何对象（顶点坐标依次为(0 0)、(0 1)、(1 1)、(1 0)、(0 0)）转换为HEXEWKB格式输出。", "sql": "SELECT ST_AsHEXEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["0103000020E61000000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Translate the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object with SRID 4326 into a hexadecimal string in HEXEWKB format.", "source": "original", "new_id": 1639}
{"id": 295, "function": "ST_AsHEXEWKB", "question": "输出POLYGON((0 0,0 1,1 1,1 0,0 0))（SRID 4326）的十六进制扩展WKB字符串。", "sql": "SELECT ST_AsHEXEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["0103000020E61000000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Translate the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object with SRID 4326 into a hexadecimal string in HEXEWKB format.", "source": "original", "new_id": 1640}
{"id": 295, "function": "ST_AsHEXEWKB", "question": "以HEXEWKB格式返回闭合多边形POLYGON((0 0,0 1,1 1,1 0,0 0))的二进制表示，SRID为4326。", "sql": "SELECT ST_AsHEXEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["0103000020E61000000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Translate the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object with SRID 4326 into a hexadecimal string in HEXEWKB format.", "source": "original", "new_id": 1641}
{"id": 295, "function": "ST_AsHEXEWKB", "question": "将SRID为4326的POLYGON((0 0,0 1,1 1,1 0,0 0))几何对象转换为HEXEWKB格式的十六进制字符串输出。", "sql": "SELECT ST_AsHEXEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["0103000020E61000000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Translate the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object with SRID 4326 into a hexadecimal string in HEXEWKB format.", "source": "original", "new_id": 1642}
{"id": 296, "function": "ST_AsEncodedPolyline", "question": "将LINESTRING(-71.0519 42.4935,-122.4483 37.64)按每段100002米分段后转换为Google编码折线。", "sql": "SELECT ST_AsEncodedPolyline( ST_Segmentize( ST_GeogFromText('LINESTRING(-71.0519 42.4935,-122.4483 37.64)'), 100002)::geometry) AS encodedFlightPath;", "execution_result": [["kojbGjitpLonTt_~CijSfq~C{eR|a_DiaQvq_Dk|Ov``DgwNvn`D_rMz{`DolL`haDyfKfsaDaaJl}aD_{HtfbD_uGznbDunF`vbDmhEb|bD_bDfacDq{BdecD_uAdhcDon@~icD{GxjcDr\\njcDfcAdicDxiBtfcDfpCdccDvvDr~bD`}E~xbDhcGhrbDniHpjbDnoIzabDjuJ`xaDd{KhmaDt`MraaDbfN|t`DfkOhg`DhpPxx_D~tQhi_DpyR`y~Cx}Szg~CzaU|u}CpeVdc}C`iWto|CdlXj{{C`oYlf{CrqZvpzCzs[nzyCtu\\pcyChw]`lxCnx^~swCjy_@j{vCxy`@fbvC~ya@vhuCvyb@tntCbyc@htsC`xd@nyrCvve@j~qC|tf@zbqCvrg@dgpCdph@bkoCdmi@|nnCzij@lrmC`fk@xulCzal@~xkCh}l@b|jChxm@`_jC|rn@~aiC"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Segment the LINESTRING(-71.0519 42.4935,-122.4483 37.64) into 100002-meter segments and convert it to a Google-encoded polyline.", "source": "original", "new_id": 1643}
{"id": 296, "function": "ST_AsEncodedPolyline", "question": "处理从点(-71.0519 42.4935)到点(-122.4483 37.64)的线串，分段长度为100003米，输出为encodedPolyline格式。", "sql": "SELECT ST_AsEncodedPolyline( ST_Segmentize( ST_GeogFromText('LINESTRING(-71.0519 42.4935,-122.4483 37.64)'), 100003)::geometry) AS encodedFlightPath;", "execution_result": [["kojbGjitpLonTt_~CijSfq~C{eR|a_DiaQvq_Dk|Ov``DgwNvn`D_rMz{`DolL`haDyfKfsaDaaJl}aD_{HtfbD_uGznbDunF`vbDmhEb|bD_bDfacDq{BdecD_uAdhcDon@~icD{GxjcDr\\njcDfcAdicDxiBtfcDfpCdccDvvDr~bD`}E~xbDhcGhrbDniHpjbDnoIzabDjuJ`xaDd{KhmaDt`MraaDbfN|t`DfkOhg`DhpPxx_D~tQhi_DpyR`y~Cx}Szg~CzaU|u}CpeVdc}C`iWto|CdlXj{{C`oYlf{CrqZvpzCzs[nzyCtu\\pcyChw]`lxCnx^~swCjy_@j{vCxy`@fbvC~ya@vhuCvyb@tntCbyc@htsC`xd@nyrCvve@j~qC|tf@zbqCvrg@dgpCdph@bkoCdmi@|nnCzij@lrmC`fk@xulCzal@~xkCh}l@b|jChxm@`_jC|rn@~aiC"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Process the line string from point (-71.0519 42.4935) to point (-122.4483 37.64) with a segment length of 100003 meters, and output it in encodedPolyline format.", "source": "original", "new_id": 1644}
{"id": 296, "function": "ST_AsEncodedPolyline", "question": "将地理坐标系下的LINESTRING(-71.0519 42.4935,-122.4483 37.64)线段按每段最大长度100000米进行分段切割，转换为几何类型后，生成Google地图使用的编码折线格式，输出列名为encodedFlightPath。", "sql": "SELECT ST_AsEncodedPolyline( ST_Segmentize( ST_GeogFromText('LINESTRING(-71.0519 42.4935,-122.4483 37.64)'), 100000)::geometry) AS encodedFlightPath;", "execution_result": [["kojbGjitpLonTt_~CijSfq~C{eR|a_DiaQvq_Dk|Ov``DgwNvn`D_rMz{`DolL`haDyfKfsaDaaJl}aD_{HtfbD_uGznbDunF`vbDmhEb|bD_bDfacDq{BdecD_uAdhcDon@~icD{GxjcDr\\njcDfcAdicDxiBtfcDfpCdccDvvDr~bD`}E~xbDhcGhrbDniHpjbDnoIzabDjuJ`xaDd{KhmaDt`MraaDbfN|t`DfkOhg`DhpPxx_D~tQhi_DpyR`y~Cx}Szg~CzaU|u}CpeVdc}C`iWto|CdlXj{{C`oYlf{CrqZvpzCzs[nzyCtu\\pcyChw]`lxCnx^~swCjy_@j{vCxy`@fbvC~ya@vhuCvyb@tntCbyc@htsC`xd@nyrCvve@j~qC|tf@zbqCvrg@dgpCdph@bkoCdmi@|nnCzij@lrmC`fk@xulCzal@~xkCh}l@b|jChxm@`_jC|rn@~aiC"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Split the LINESTRING(-71.0519 42.4935,-122.4483 37.64) in geographic coordinates into segments with a maximum length of 100000 meters each, then output as a Google-encoded polyline string.", "source": "original", "new_id": 1645}
{"id": 296, "function": "ST_AsEncodedPolyline", "question": "输出LINESTRING(-71.0519 42.4935,-122.4483 37.64)分段（分段长度为100007米）后的Google编码折线字符串。", "sql": "SELECT ST_AsEncodedPolyline( ST_Segmentize( ST_GeogFromText('LINESTRING(-71.0519 42.4935,-122.4483 37.64)'), 100007)::geometry) AS encodedFlightPath;", "execution_result": [["kojbGjitpLonTt_~CijSfq~C{eR|a_DiaQvq_Dk|Ov``DgwNvn`D_rMz{`DolL`haDyfKfsaDaaJl}aD_{HtfbD_uGznbDunF`vbDmhEb|bD_bDfacDq{BdecD_uAdhcDon@~icD{GxjcDr\\njcDfcAdicDxiBtfcDfpCdccDvvDr~bD`}E~xbDhcGhrbDniHpjbDnoIzabDjuJ`xaDd{KhmaDt`MraaDbfN|t`DfkOhg`DhpPxx_D~tQhi_DpyR`y~Cx}Szg~CzaU|u}CpeVdc}C`iWto|CdlXj{{C`oYlf{CrqZvpzCzs[nzyCtu\\pcyChw]`lxCnx^~swCjy_@j{vCxy`@fbvC~ya@vhuCvyb@tntCbyc@htsC`xd@nyrCvve@j~qC|tf@zbqCvrg@dgpCdph@bkoCdmi@|nnCzij@lrmC`fk@xulCzal@~xkCh}l@b|jChxm@`_jC|rn@~aiC"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the Google-encoded polyline string after segmenting LINESTRING(-71.0519 42.4935,-122.4483 37.64) into segments (segment length 100007 meters).", "source": "original", "new_id": 1646}
{"id": 296, "function": "ST_AsEncodedPolyline", "question": "以encodedPolyline格式返回分段处理（分段长度为100008米）后的线串结果。", "sql": "SELECT ST_AsEncodedPolyline( ST_Segmentize( ST_GeogFromText('LINESTRING(-71.0519 42.4935,-122.4483 37.64)'), 100008)::geometry) AS encodedFlightPath;", "execution_result": [["kojbGjitpLonTt_~CijSfq~C{eR|a_DiaQvq_Dk|Ov``DgwNvn`D_rMz{`DolL`haDyfKfsaDaaJl}aD_{HtfbD_uGznbDunF`vbDmhEb|bD_bDfacDq{BdecD_uAdhcDon@~icD{GxjcDr\\njcDfcAdicDxiBtfcDfpCdccDvvDr~bD`}E~xbDhcGhrbDniHpjbDnoIzabDjuJ`xaDd{KhmaDt`MraaDbfN|t`DfkOhg`DhpPxx_D~tQhi_DpyR`y~Cx}Szg~CzaU|u}CpeVdc}C`iWto|CdlXj{{C`oYlf{CrqZvpzCzs[nzyCtu\\pcyChw]`lxCnx^~swCjy_@j{vCxy`@fbvC~ya@vhuCvyb@tntCbyc@htsC`xd@nyrCvve@j~qC|tf@zbqCvrg@dgpCdph@bkoCdmi@|nnCzij@lrmC`fk@xulCzal@~xkCh}l@b|jChxm@`_jC|rn@~aiC"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the segmented linestring result (with a segment length of 100008 meters) in encodedPolyline format.", "source": "original", "new_id": 1647}
{"id": 296, "function": "ST_AsEncodedPolyline", "question": "将地理坐标系下的LINESTRING(-71.0519 42.4935,-122.4483 37.64)线段按每段最大100000米的长度进行分段后，输出为Google编码折线格式的字符串。", "sql": "SELECT ST_AsEncodedPolyline( ST_Segmentize( ST_GeogFromText('LINESTRING(-71.0519 42.4935,-122.4483 37.64)'), 100000)::geometry) AS encodedFlightPath;", "execution_result": [["kojbGjitpLonTt_~CijSfq~C{eR|a_DiaQvq_Dk|Ov``DgwNvn`D_rMz{`DolL`haDyfKfsaDaaJl}aD_{HtfbD_uGznbDunF`vbDmhEb|bD_bDfacDq{BdecD_uAdhcDon@~icD{GxjcDr\\njcDfcAdicDxiBtfcDfpCdccDvvDr~bD`}E~xbDhcGhrbDniHpjbDnoIzabDjuJ`xaDd{KhmaDt`MraaDbfN|t`DfkOhg`DhpPxx_D~tQhi_DpyR`y~Cx}Szg~CzaU|u}CpeVdc}C`iWto|CdlXj{{C`oYlf{CrqZvpzCzs[nzyCtu\\pcyChw]`lxCnx^~swCjy_@j{vCxy`@fbvC~ya@vhuCvyb@tntCbyc@htsC`xd@nyrCvve@j~qC|tf@zbqCvrg@dgpCdph@bkoCdmi@|nnCzij@lrmC`fk@xulCzal@~xkCh}l@b|jChxm@`_jC|rn@~aiC"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Split the LINESTRING(-71.0519 42.4935,-122.4483 37.64) in geographic coordinates into segments with a maximum length of 100000 meters each, then output as a Google-encoded polyline string.", "source": "original", "new_id": 1648}
{"id": 297, "function": "ST_AsEncodedPolyline", "question": "将SRID为4326、坐标为(-120.2 38.5), (-120.95 40.7), (-126.453 43.252)的线串编码为折线字符串。", "sql": "SELECT ST_AsEncodedPolyline(GeomFromEWKT('SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)'));", "execution_result": [["_p~iF~ps|U_ulLnnqC_mqNvxq`@"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the encoded polyline string of the LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252) geometry object with SRID 4326.", "source": "original", "new_id": 1649}
{"id": 297, "function": "ST_AsEncodedPolyline", "question": "编码线串LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)（SRID=4326）为折线格式。", "sql": "SELECT ST_AsEncodedPolyline(GeomFromEWKT('SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)'));", "execution_result": [["_p~iF~ps|U_ulLnnqC_mqNvxq`@"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the encoded polyline string of the LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252) geometry object with SRID 4326.", "source": "original", "new_id": 1650}
{"id": 297, "function": "ST_AsEncodedPolyline", "question": "将SRID为4326的LINESTRING几何对象，其坐标点依次为(-120.2 38.5)、(-120.95 40.7)和(-126.453 43.252)，使用ST_AsEncodedPolyline函数转换为编码折线格式。", "sql": "SELECT ST_AsEncodedPolyline(GeomFromEWKT('SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)'));", "execution_result": [["_p~iF~ps|U_ulLnnqC_mqNvxq`@"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the encoded polyline string of the LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252) geometry object with SRID 4326.", "source": "original", "new_id": 1651}
{"id": 297, "function": "ST_AsEncodedPolyline", "question": "输出线串LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)的折线编码结果，SRID=4326。", "sql": "SELECT ST_AsEncodedPolyline(GeomFromEWKT('SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)'));", "execution_result": [["_p~iF~ps|U_ulLnnqC_mqNvxq`@"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the encoded polyline string of the LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252) geometry object with SRID 4326.", "source": "original", "new_id": 1652}
{"id": 297, "function": "ST_AsEncodedPolyline", "question": "返回SRID=4326的线串几何LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)的折线编码字符串。", "sql": "SELECT ST_AsEncodedPolyline(GeomFromEWKT('SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)'));", "execution_result": [["_p~iF~ps|U_ulLnnqC_mqNvxq`@"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the encoded polyline string of the LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252) geometry object with SRID 4326.", "source": "original", "new_id": 1653}
{"id": 297, "function": "ST_AsEncodedPolyline", "question": "输出SRID为4326的LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)几何对象的编码折线（Encoded Polyline）字符串。", "sql": "SELECT ST_AsEncodedPolyline(GeomFromEWKT('SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)'));", "execution_result": [["_p~iF~ps|U_ulLnnqC_mqNvxq`@"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the encoded polyline string of the LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252) geometry object with SRID 4326.", "source": "original", "new_id": 1654}
{"id": 298, "function": "ST_AsGeobuf", "question": "将坐标为(0 0,0 1,1 1,1 0,0 0)的多边形转换为Geobuf格式并用Base64编码输出。", "sql": "SELECT encode(ST_AsGeobuf(q, 'geom'), 'base64') FROM (SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))') AS geom) AS q;", "execution_result": [["GAAiEAoOCgwIBBoIAAAAAgIAAAE="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object into Geobuf format and output the Base64-encoded string result.", "source": "original", "new_id": 1655}
{"id": 298, "function": "ST_AsGeobuf", "question": "处理顶点在(0,0)、(0,1)、(1,1)、(1,0)的矩形多边形，输出其Base64编码的Geobuf表示。", "sql": "SELECT encode(ST_AsGeobuf(q, 'geom'), 'base64') FROM (SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))') AS geom) AS q;", "execution_result": [["GAAiEAoOCgwIBBoIAAAAAgIAAAE="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object into Geobuf format and output the Base64-encoded string result.", "source": "original", "new_id": 1656}
{"id": 298, "function": "ST_AsGeobuf", "question": "将坐标为POLYGON((0 0,0 1,1 1,1 0,0 0))的多边形几何对象转换为GeoBuf格式，并使用base64编码输出结果。其中子查询使用ST_GeomFromText函数将WKT格式的字符串转换为几何对象，主查询使用ST_AsGeobuf函数将几何对象转换为GeoBuf格式，最后通过encode函数进行base64编码。", "sql": "SELECT encode(ST_AsGeobuf(q, 'geom'), 'base64') FROM (SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))') AS geom) AS q;", "execution_result": [["GAAiEAoOCgwIBBoIAAAAAgIAAAE="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object into Geobuf format and output the Base64-encoded string result.", "source": "original", "new_id": 1657}
{"id": 298, "function": "ST_AsGeobuf", "question": "输出POLYGON((0 0,0 1,1 1,1 0,0 0))的Base64编码的Geobuf二进制数据。", "sql": "SELECT encode(ST_AsGeobuf(q, 'geom'), 'base64') FROM (SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))') AS geom) AS q;", "execution_result": [["GAAiEAoOCgwIBBoIAAAAAgIAAAE="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object into Geobuf format and output the Base64-encoded string result.", "source": "original", "new_id": 1658}
{"id": 298, "function": "ST_AsGeobuf", "question": "获取单位正方形多边形的Base64格式的Geobuf编码结果。", "sql": "SELECT encode(ST_AsGeobuf(q, 'geom'), 'base64') FROM (SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))') AS geom) AS q;", "execution_result": [["GAAiEAoOCgwIBBoIAAAAAgIAAAE="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object into Geobuf format and output the Base64-encoded string result.", "source": "original", "new_id": 1659}
{"id": 298, "function": "ST_AsGeobuf", "question": "将POLYGON((0 0,0 1,1 1,1 0,0 0))几何对象转换为Geobuf格式后，输出Base64编码的字符串结果。", "sql": "SELECT encode(ST_AsGeobuf(q, 'geom'), 'base64') FROM (SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))') AS geom) AS q;", "execution_result": [["GAAiEAoOCgwIBBoIAAAAAgIAAAE="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object into Geobuf format and output the Base64-encoded string result.", "source": "original", "new_id": 1660}
{"id": 300, "function": "ST_AsGeoJSON", "question": "将三维线段LINESTRING(1 2 3, 4 5 6)转换为GeoJSON格式。", "sql": "SELECT ST_AsGeoJSON('LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6]]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoJSON format string for the 3D line LINESTRING(1 2 3, 4 5 6), where 1 2 3 are the XYZ coordinates of the first point and 4 5 6 are the XYZ coordinates of the second point.", "source": "original", "new_id": 1661}
{"id": 300, "function": "ST_AsGeoJSON", "question": "输出连接点(1,2,3)和点(4,5,6)的三维线段的GeoJSON表示。", "sql": "SELECT ST_AsGeoJSON('LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6]]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoJSON format string for the 3D line LINESTRING(1 2 3, 4 5 6), where 1 2 3 are the XYZ coordinates of the first point and 4 5 6 are the XYZ coordinates of the second point.", "source": "original", "new_id": 1662}
{"id": 300, "function": "ST_AsGeoJSON", "question": "将三维坐标点LINESTRING(1 2 3, 4 5 6)转换为GeoJSON格式输出，其中线段起点坐标为(1,2,3)，终点坐标为(4,5,6)。", "sql": "SELECT ST_AsGeoJSON('LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6]]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoJSON format string for the 3D line LINESTRING(1 2 3, 4 5 6), where 1 2 3 are the XYZ coordinates of the first point and 4 5 6 are the XYZ coordinates of the second point.", "source": "original", "new_id": 1663}
{"id": 300, "function": "ST_AsGeoJSON", "question": "以GeoJSON格式返回三维线段LINESTRING(1 2 3, 4 5 6)的空间数据。", "sql": "SELECT ST_AsGeoJSON('LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6]]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoJSON format string for the 3D line LINESTRING(1 2 3, 4 5 6), where 1 2 3 are the XYZ coordinates of the first point and 4 5 6 are the XYZ coordinates of the second point.", "source": "original", "new_id": 1664}
{"id": 300, "function": "ST_AsGeoJSON", "question": "获取三维线段LINESTRING(1 2 3, 4 5 6)的GeoJSON字符串输出。", "sql": "SELECT ST_AsGeoJSON('LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6]]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoJSON format string for the 3D line LINESTRING(1 2 3, 4 5 6), where 1 2 3 are the XYZ coordinates of the first point and 4 5 6 are the XYZ coordinates of the second point.", "source": "original", "new_id": 1665}
{"id": 300, "function": "ST_AsGeoJSON", "question": "输出三维线段LINESTRING(1 2 3, 4 5 6)的GeoJSON格式字符串，其中1 2 3是第一个点的XYZ坐标，4 5 6是第二个点的XYZ坐标。", "sql": "SELECT ST_AsGeoJSON('LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6]]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoJSON format string for the 3D line LINESTRING(1 2 3, 4 5 6), where 1 2 3 are the XYZ coordinates of the first point and 4 5 6 are the XYZ coordinates of the second point.", "source": "original", "new_id": 1666}
{"id": 302, "function": "ST_AsGeoJSON", "question": "将坐标为(1, 1)的点几何对象设置为SRID 4326，并以GeoJSON格式输出，保留9位小数，使用长CRS且包含边界框。", "sql": "SELECT ST_AsGeoJSON(ST_SetSRID('POINT(1 1)'::geometry, 4326), 9, 4|1);", "execution_result": [["{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::4326\"}},\"bbox\":[1.000000000,1.000000000,1.000000000,1.000000000],\"coordinates\":[1,1]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(1 1) to a GeoJSON format string with SRID 4326, retaining 9 decimal places and including the CRS identifier, where the 4|1 parameter indicates both bbox and CRS information are included.", "source": "original", "new_id": 1667}
{"id": 302, "function": "ST_AsGeoJSON", "question": "将POINT(1 1)转换为WGS84坐标系（SRID 4326），输出GeoJSON字符串，精度为9位，options参数设为4并添加边界框。", "sql": "SELECT ST_AsGeoJSON(ST_SetSRID('POINT(1 1)'::geometry, 4326), 9, 4|1);", "execution_result": [["{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::4326\"}},\"bbox\":[1.000000000,1.000000000,1.000000000,1.000000000],\"coordinates\":[1,1]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(1 1) to a GeoJSON format string with SRID 4326, retaining 9 decimal places and including the CRS identifier, where the 4|1 parameter indicates both bbox and CRS information are included.", "source": "original", "new_id": 1668}
{"id": 302, "function": "ST_AsGeoJSON", "question": "将二维点POINT(1 1)设置为SRID 4326坐标系后，转换为保留9位小数精度且包含CRS标识（选项4|1）的GeoJSON格式输出。", "sql": "SELECT ST_AsGeoJSON(ST_SetSRID('POINT(1 1)'::geometry, 4326), 9, 4|1);", "execution_result": [["{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::4326\"}},\"bbox\":[1.000000000,1.000000000,1.000000000,1.000000000],\"coordinates\":[1,1]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(1 1) to a GeoJSON format string with SRID 4326, retaining 9 decimal places and including the CRS identifier, where the 4|1 parameter indicates both bbox and CRS information are included.", "source": "original", "new_id": 1669}
{"id": 302, "function": "ST_AsGeoJSON", "question": "输出POINT(1 1)的GeoJSON字符串，坐标系为4326，保留9位小数，使用长CRS且包含边界框。", "sql": "SELECT ST_AsGeoJSON(ST_SetSRID('POINT(1 1)'::geometry, 4326), 9, 4|1);", "execution_result": [["{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::4326\"}},\"bbox\":[1.000000000,1.000000000,1.000000000,1.000000000],\"coordinates\":[1,1]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(1 1) to a GeoJSON format string with SRID 4326, retaining 9 decimal places and including the CRS identifier, where the 4|1 parameter indicates both bbox and CRS information are included.", "source": "original", "new_id": 1670}
{"id": 302, "function": "ST_AsGeoJSON", "question": "以GeoJSON格式返回POINT(1 1)的几何表示，精度为9位，使用长CRS，并启用边界框选项。", "sql": "SELECT ST_AsGeoJSON(ST_SetSRID('POINT(1 1)'::geometry, 4326), 9, 4|1);", "execution_result": [["{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::4326\"}},\"bbox\":[1.000000000,1.000000000,1.000000000,1.000000000],\"coordinates\":[1,1]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(1 1) to a GeoJSON format string with SRID 4326, retaining 9 decimal places and including the CRS identifier, where the 4|1 parameter indicates both bbox and CRS information are included.", "source": "original", "new_id": 1671}
{"id": 302, "function": "ST_AsGeoJSON", "question": "将二维点POINT(1 1)转换为SRID为4326的空间参考系后，输出保留9位小数且包含CRS标识的GeoJSON格式字符串，其中4|1参数表示同时包含bbox和CRS信息。", "sql": "SELECT ST_AsGeoJSON(ST_SetSRID('POINT(1 1)'::geometry, 4326), 9, 4|1);", "execution_result": [["{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::4326\"}},\"bbox\":[1.000000000,1.000000000,1.000000000,1.000000000],\"coordinates\":[1,1]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(1 1) to a GeoJSON format string with SRID 4326, retaining 9 decimal places and including the CRS identifier, where the 4|1 parameter indicates both bbox and CRS information are included.", "source": "original", "new_id": 1672}
{"id": 303, "function": "ST_AsGeoJSON", "question": "将ID为1、名称为'one'、几何坐标为POINT(1 1)的记录转换为GeoJSON格式，并指定id列作为特征ID。", "sql": "SELECT ST_AsGeoJSON(t.*, id_column => 'id') FROM (VALUES (1, 'one', 'POINT(1 1)'::geometry)) AS t(id, name, geom);", "execution_result": [["{\"type\": \"Feature\", \"geometry\": {\"type\":\"Point\",\"coordinates\":[1,1]}, \"id\": 1, \"properties\": {\"name\": \"one\"}}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the record with id value 1, name value 'one', and geom value POINT(1 1) into GeoJSON format, specifying the id field as the feature identifier attribute.", "source": "original", "new_id": 1673}
{"id": 303, "function": "ST_AsGeoJSON", "question": "将包含三列数据的临时表t（其中id为1，name为'one'，geom为二维点POINT(1 1)）转换为GeoJSON格式，并指定id列的字段名为'id'。", "sql": "SELECT ST_AsGeoJSON(t.*, id_column => 'id') FROM (VALUES (1, 'one', 'POINT(1 1)'::geometry)) AS t(id, name, geom);", "execution_result": [["{\"type\": \"Feature\", \"geometry\": {\"type\":\"Point\",\"coordinates\":[1,1]}, \"id\": 1, \"properties\": {\"name\": \"one\"}}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the record with id value 1, name value 'one', and geom value POINT(1 1) into GeoJSON format, specifying the id field as the feature identifier attribute.", "source": "original", "new_id": 1674}
{"id": 303, "function": "ST_AsGeoJSON", "question": "新建一个包含三列数据的临时表t（其中id为1，name为'one'，geom为二维点POINT(1 1)），将其转换为GeoJSON格式，并指定id列的字段名为'id'。", "sql": "SELECT ST_AsGeoJSON(t.*, id_column => 'id') FROM (VALUES (1, 'one', 'POINT(1 1)'::geometry)) AS t(id, name, geom);", "execution_result": [["{\"type\": \"Feature\", \"geometry\": {\"type\":\"Point\",\"coordinates\":[1,1]}, \"id\": 1, \"properties\": {\"name\": \"one\"}}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the record with id value 1, name value 'one', and geom value POINT(1 1) into GeoJSON format, specifying the id field as the feature identifier attribute.", "source": "original", "new_id": 1675}
{"id": 303, "function": "ST_AsGeoJSON", "question": "输出ID为1、名称为'one'、几何为POINT(1 1)的记录的GeoJSON格式字符串。", "sql": "SELECT ST_AsGeoJSON(t.*, id_column => 'id') FROM (VALUES (1, 'one', 'POINT(1 1)'::geometry)) AS t(id, name, geom);", "execution_result": [["{\"type\": \"Feature\", \"geometry\": {\"type\":\"Point\",\"coordinates\":[1,1]}, \"id\": 1, \"properties\": {\"name\": \"one\"}}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the record with id value 1, name value 'one', and geom value POINT(1 1) into GeoJSON format, specifying the id field as the feature identifier attribute.", "source": "original", "new_id": 1676}
{"id": 303, "function": "ST_AsGeoJSON", "question": "生成包含POINT(1 1)几何的记录的GeoJSON格式输出，并包含id作为特征属性。", "sql": "SELECT ST_AsGeoJSON(t.*, id_column => 'id') FROM (VALUES (1, 'one', 'POINT(1 1)'::geometry)) AS t(id, name, geom);", "execution_result": [["{\"type\": \"Feature\", \"geometry\": {\"type\":\"Point\",\"coordinates\":[1,1]}, \"id\": 1, \"properties\": {\"name\": \"one\"}}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the record with id value 1, name value 'one', and geom value POINT(1 1) into GeoJSON format, specifying the id field as the feature identifier attribute.", "source": "original", "new_id": 1677}
{"id": 303, "function": "ST_AsGeoJSON", "question": "将包含id值为1、name值为'one'、geom值为POINT(1 1)的记录转换为GeoJSON格式输出，并指定id字段作为要素标识属性。", "sql": "SELECT ST_AsGeoJSON(t.*, id_column => 'id') FROM (VALUES (1, 'one', 'POINT(1 1)'::geometry)) AS t(id, name, geom);", "execution_result": [["{\"type\": \"Feature\", \"geometry\": {\"type\":\"Point\",\"coordinates\":[1,1]}, \"id\": 1, \"properties\": {\"name\": \"one\"}}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the record with id value 1, name value 'one', and geom value POINT(1 1) into GeoJSON format, specifying the id field as the feature identifier attribute.", "source": "original", "new_id": 1678}
{"id": 304, "function": "ST_AsGML", "question": "将POLYHEDRALSURFACE对象（由6个三维多边形面组成：第一个面顶点为(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个面顶点为(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个面顶点为(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个面顶点为(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个面顶点为(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个面顶点为(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)）通过ST_GeomFromEWKT函数转换为几何对象，并使用ST_AsGML函数以GML3格式输出。", "sql": "SELECT ST_AsGML(3, ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["<gml:PolyhedralSurface><gml:polygonPatches><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch></gml:polygonPatches></gml:PolyhedralSurface>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polyhedral surface POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) ) into a GML3 format string output.", "source": "original", "new_id": 1679}
{"id": 304, "function": "ST_AsGML", "question": "将三维多面体表面POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )转换为GML3格式的字符串输出。", "sql": "SELECT ST_AsGML(3, ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["<gml:PolyhedralSurface><gml:polygonPatches><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch></gml:polygonPatches></gml:PolyhedralSurface>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D polyhedral surface POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) ) into a GML3 format string output.", "source": "original", "new_id": 1680}
{"id": 305, "function": "ST_AsGML", "question": "将SRID为4326的LINESTRING(1 2, 3 4, 10 20)转换为GML3格式，设置5位小数精度,options参数为49。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 49);", "execution_result": [["<gml:Envelope srsName=\"urn:ogc:def:crs:EPSG::4326\" srsDimension=\"2\"><gml:lowerCorner>2 1</gml:lowerCorner><gml:upperCorner>20 10</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D linestring LINESTRING(1 2, 3 4, 10 20) with spatial reference system EPSG:4326 to a GML3 format string, retaining 5 significant digits in the output and setting the srsDimension attribute value to 49.", "source": "original", "new_id": 1681}
{"id": 305, "function": "ST_AsGML", "question": "输出LINESTRING(1 2, 3 4, 10 20)在WGS84坐标系(4326)下的GML3表示，精度5位，options参数为49。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 49);", "execution_result": [["<gml:Envelope srsName=\"urn:ogc:def:crs:EPSG::4326\" srsDimension=\"2\"><gml:lowerCorner>2 1</gml:lowerCorner><gml:upperCorner>20 10</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D linestring LINESTRING(1 2, 3 4, 10 20) with spatial reference system EPSG:4326 to a GML3 format string, retaining 5 significant digits in the output and setting the srsDimension attribute value to 49.", "source": "original", "new_id": 1682}
{"id": 305, "function": "ST_AsGML", "question": "将SRID为4326的LINESTRING几何对象（由三个顶点组成，坐标依次为(1 2)、(3 4)、(10 20)）转换为GML3格式输出，使用参数5表示坐标精度保留5位小数，参数49表示强制输出CRS维度信息。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 49);", "execution_result": [["<gml:Envelope srsName=\"urn:ogc:def:crs:EPSG::4326\" srsDimension=\"2\"><gml:lowerCorner>2 1</gml:lowerCorner><gml:upperCorner>20 10</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D linestring LINESTRING(1 2, 3 4, 10 20) with spatial reference system EPSG:4326 to a GML3 format string, retaining 5 significant digits in the output and setting the srsDimension attribute value to 49.", "source": "original", "new_id": 1683}
{"id": 305, "function": "ST_AsGML", "question": "以GML3格式输出LINESTRING(1 2, 3 4, 10 20)的空间数据，确保输出精度为5位小数，options参数为49。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 49);", "execution_result": [["<gml:Envelope srsName=\"urn:ogc:def:crs:EPSG::4326\" srsDimension=\"2\"><gml:lowerCorner>2 1</gml:lowerCorner><gml:upperCorner>20 10</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D linestring LINESTRING(1 2, 3 4, 10 20) with spatial reference system EPSG:4326 to a GML3 format string, retaining 5 significant digits in the output and setting the srsDimension attribute value to 49.", "source": "original", "new_id": 1684}
{"id": 305, "function": "ST_AsGML", "question": "生成LINESTRING(1 2, 3 4, 10 20)的GML格式字符串，使用版本3规范，保留5位小数精度，options参数为49。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 49);", "execution_result": [["<gml:Envelope srsName=\"urn:ogc:def:crs:EPSG::4326\" srsDimension=\"2\"><gml:lowerCorner>2 1</gml:lowerCorner><gml:upperCorner>20 10</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D linestring LINESTRING(1 2, 3 4, 10 20) with spatial reference system EPSG:4326 to a GML3 format string, retaining 5 significant digits in the output and setting the srsDimension attribute value to 49.", "source": "original", "new_id": 1685}
{"id": 305, "function": "ST_AsGML", "question": "将空间参考系为EPSG:4326的二维折线LINESTRING(1 2, 3 4, 10 20)转换为GML3格式字符串，要求输出保留5位有效数字，并设置srsDimension属性值为49。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 49);", "execution_result": [["<gml:Envelope srsName=\"urn:ogc:def:crs:EPSG::4326\" srsDimension=\"2\"><gml:lowerCorner>2 1</gml:lowerCorner><gml:upperCorner>20 10</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D linestring LINESTRING(1 2, 3 4, 10 20) with spatial reference system EPSG:4326 to a GML3 format string, retaining 5 significant digits in the output and setting the srsDimension attribute value to 49.", "source": "original", "new_id": 1686}
{"id": 306, "function": "ST_AsGML", "question": "将SRID为4326的线几何LINESTRING(1 2, 3 4, 10 20)转换为GML3格式，保留5位小数，使用32位空间引用标识符。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 32);", "execution_result": [["<gml:Envelope srsName=\"EPSG:4326\" srsDimension=\"2\"><gml:lowerCorner>1 2</gml:lowerCorner><gml:upperCorner>10 20</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the LINESTRING(1 2, 3 4, 10 20) geometry object with SRID 4326 in GML3 format, retaining 5 decimal places for coordinates, and set 32 as the option parameter (indicating output of the geometry's bounding box).", "source": "original", "new_id": 1687}
{"id": 306, "function": "ST_AsGML", "question": "输出LINESTRING(1 2, 3 4, 10 20)在WGS84坐标系下的GML3表示，精度为5位小数，空间引用标识符为32位。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 32);", "execution_result": [["<gml:Envelope srsName=\"EPSG:4326\" srsDimension=\"2\"><gml:lowerCorner>1 2</gml:lowerCorner><gml:upperCorner>10 20</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the LINESTRING(1 2, 3 4, 10 20) geometry object with SRID 4326 in GML3 format, retaining 5 decimal places for coordinates, and set 32 as the option parameter (indicating output of the geometry's bounding box).", "source": "original", "new_id": 1688}
{"id": 306, "function": "ST_AsGML", "question": "将SRID为4326的二维折线LINESTRING(1 2, 3 4, 10 20)转换为GML3格式，其中坐标保留5位小数精度，并设置32为选项参数（表示输出几何体的边框（最小外接矩形））。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 32);", "execution_result": [["<gml:Envelope srsName=\"EPSG:4326\" srsDimension=\"2\"><gml:lowerCorner>1 2</gml:lowerCorner><gml:upperCorner>10 20</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the LINESTRING(1 2, 3 4, 10 20) geometry object with SRID 4326 in GML3 format, retaining 5 decimal places for coordinates, and set 32 as the option parameter (indicating output of the geometry's bounding box).", "source": "original", "new_id": 1689}
{"id": 306, "function": "ST_AsGML", "question": "生成LINESTRING(1 2, 3 4, 10 20)的GML3格式字符串，保留5位小数精度，使用32位空间引用标识符。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 32);", "execution_result": [["<gml:Envelope srsName=\"EPSG:4326\" srsDimension=\"2\"><gml:lowerCorner>1 2</gml:lowerCorner><gml:upperCorner>10 20</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the LINESTRING(1 2, 3 4, 10 20) geometry object with SRID 4326 in GML3 format, retaining 5 decimal places for coordinates, and set 32 as the option parameter (indicating output of the geometry's bounding box).", "source": "original", "new_id": 1690}
{"id": 306, "function": "ST_AsGML", "question": "将SRID为4326的LINESTRING(1 2, 3 4, 10 20)转换为GML3格式，要求输出保留5位有效数字，并使用32位空间参考系统标识符，返回GML字符串结果。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 32);", "execution_result": [["<gml:Envelope srsName=\"EPSG:4326\" srsDimension=\"2\"><gml:lowerCorner>1 2</gml:lowerCorner><gml:upperCorner>10 20</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the LINESTRING(1 2, 3 4, 10 20) geometry object with SRID 4326 in GML3 format, retaining 5 decimal places for coordinates, and set 32 as the option parameter (indicating output of the geometry's bounding box).", "source": "original", "new_id": 1691}
{"id": 306, "function": "ST_AsGML", "question": "以GML3格式输出SRID为4326的LINESTRING(1 2, 3 4, 10 20)几何对象，要求坐标保留5位小数精度，并设置32为选项参数（表示输出几何体的边框（最小外接矩形））", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 32);", "execution_result": [["<gml:Envelope srsName=\"EPSG:4326\" srsDimension=\"2\"><gml:lowerCorner>1 2</gml:lowerCorner><gml:upperCorner>10 20</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the LINESTRING(1 2, 3 4, 10 20) geometry object with SRID 4326 in GML3 format, retaining 5 decimal places for coordinates, and set 32 as the option parameter (indicating output of the geometry's bounding box).", "source": "original", "new_id": 1692}
{"id": 307, "function": "ST_AsGML", "question": "将坐标为(5.234234233242, 6.34534534534)的WGS84点对象转换为GML3格式，保留5位小数，使用17位空间引用标识符。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('POINT(5.234234233242 6.34534534534)',4326), 5, 17);", "execution_result": [["<gml:Point srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:pos srsDimension=\"2\">6.34535 5.23423</gml:pos></gml:Point>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(5.234234233242 6.34534534534) with SRID 4326 to GML3 format, rounding coordinates to 5 decimal places and keeping 17 significant digits in the output document.", "source": "original", "new_id": 1693}
{"id": 307, "function": "ST_AsGML", "question": "输出POINT(5.234234233242 6.34534534534)在EPSG:4326坐标系下的GML3表示，小数位截断到5位，空间引用标识符位数为17。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('POINT(5.234234233242 6.34534534534)',4326), 5, 17);", "execution_result": [["<gml:Point srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:pos srsDimension=\"2\">6.34535 5.23423</gml:pos></gml:Point>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(5.234234233242 6.34534534534) with SRID 4326 to GML3 format, rounding coordinates to 5 decimal places and keeping 17 significant digits in the output document.", "source": "original", "new_id": 1694}
{"id": 307, "function": "ST_AsGML", "question": "将SRID为4326的二维点POINT(5.234234233242 6.34534534534)转换为GML3格式，其中坐标值保留5位小数，并设置输出为长crs,且数据为经纬度格式。。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('POINT(5.234234233242 6.34534534534)',4326), 5, 17);", "execution_result": [["<gml:Point srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:pos srsDimension=\"2\">6.34535 5.23423</gml:pos></gml:Point>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(5.234234233242 6.34534534534) with SRID 4326 to GML3 format, rounding coordinates to 5 decimal places and keeping 17 significant digits in the output document.", "source": "original", "new_id": 1695}
{"id": 307, "function": "ST_AsGML", "question": "生成POINT(5.234234233242 6.34534534534)的GML3格式字符串(SRID 4326)，输出时坐标保留5位小数，17位数字精度。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('POINT(5.234234233242 6.34534534534)',4326), 5, 17);", "execution_result": [["<gml:Point srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:pos srsDimension=\"2\">6.34535 5.23423</gml:pos></gml:Point>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(5.234234233242 6.34534534534) with SRID 4326 to GML3 format, rounding coordinates to 5 decimal places and keeping 17 significant digits in the output document.", "source": "original", "new_id": 1696}
{"id": 307, "function": "ST_AsGML", "question": "以GML3格式输出指定点坐标(5.234234233242 6.34534534534)，SRID 为4326，设置最大小数位数为5，总数字精度为17位。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('POINT(5.234234233242 6.34534534534)',4326), 5, 17);", "execution_result": [["<gml:Point srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:pos srsDimension=\"2\">6.34535 5.23423</gml:pos></gml:Point>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(5.234234233242 6.34534534534) with SRID 4326 to GML3 format, rounding coordinates to 5 decimal places and keeping 17 significant digits in the output document.", "source": "original", "new_id": 1697}
{"id": 307, "function": "ST_AsGML", "question": "将SRID为4326的二维点POINT(5.234234233242 6.34534534534)转换为GML3格式，要求坐标保留5位小数，输出文档保留17位有效数字。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('POINT(5.234234233242 6.34534534534)',4326), 5, 17);", "execution_result": [["<gml:Point srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:pos srsDimension=\"2\">6.34535 5.23423</gml:pos></gml:Point>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(5.234234233242 6.34534534534) with SRID 4326 to GML3 format, rounding coordinates to 5 decimal places and keeping 17 significant digits in the output document.", "source": "original", "new_id": 1698}
{"id": 308, "function": "ST_AsGML", "question": "将POLYGON((0 0,0 1,1 1,1 0,0 0))这个多边形（使用WGS84坐标系统）转换为GML格式输出。", "sql": "SELECT ST_AsGML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<gml:Polygon srsName=\"EPSG:4326\"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>0,0 0,1 1,1 1,0 0,0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry object POLYGON((0 0,0 1,1 1,1 0,0 0)) with SRID 4326 to a GML format string output.", "source": "original", "new_id": 1699}
{"id": 308, "function": "ST_AsGML", "question": "将坐标为(0,0)、(0,1)、(1,1)、(1,0)、(0,0)的闭合多边形转换为GML3.2格式，使用WGS84坐标系统。", "sql": "SELECT ST_AsGML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<gml:Polygon srsName=\"EPSG:4326\"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>0,0 0,1 1,1 1,0 0,0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry object POLYGON((0 0,0 1,1 1,1 0,0 0)) with SRID 4326 to a GML format string output.", "source": "original", "new_id": 1700}
{"id": 308, "function": "ST_AsGML", "question": "将空间参考系为EPSG:4326的POLYGON几何对象（顶点坐标依次为(0 0)、(0 1)、(1 1)、(1 0)、(0 0)）转换为GML格式输出。", "sql": "SELECT ST_AsGML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<gml:Polygon srsName=\"EPSG:4326\"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>0,0 0,1 1,1 1,0 0,0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry object POLYGON((0 0,0 1,1 1,1 0,0 0)) with SRID 4326 to a GML format string output.", "source": "original", "new_id": 1701}
{"id": 308, "function": "ST_AsGML", "question": "以GML3.2格式返回POLYGON((0 0,0 1,1 1,1 0,0 0))的空间数据表示,使用WGS84坐标。", "sql": "SELECT ST_AsGML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<gml:Polygon srsName=\"EPSG:4326\"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>0,0 0,1 1,1 1,0 0,0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry object POLYGON((0 0,0 1,1 1,1 0,0 0)) with SRID 4326 to a GML format string output.", "source": "original", "new_id": 1702}
{"id": 308, "function": "ST_AsGML", "question": "获取POLYGON((0 0,0 1,1 1,1 0,0 0))的GML格式输出结果,使用WGS84坐标。", "sql": "SELECT ST_AsGML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<gml:Polygon srsName=\"EPSG:4326\"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>0,0 0,1 1,1 1,0 0,0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry object POLYGON((0 0,0 1,1 1,1 0,0 0)) with SRID 4326 to a GML format string output.", "source": "original", "new_id": 1703}
{"id": 308, "function": "ST_AsGML", "question": "将POLYGON((0 0,0 1,1 1,1 0,0 0))几何对象（SRID为4326）转换为GML格式字符串输出。", "sql": "SELECT ST_AsGML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<gml:Polygon srsName=\"EPSG:4326\"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>0,0 0,1 1,1 1,0 0,0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry object POLYGON((0 0,0 1,1 1,1 0,0 0)) with SRID 4326 to a GML format string output.", "source": "original", "new_id": 1704}
{"id": 309, "function": "ST_AsKML", "question": "将坐标为(0 0,0 1,1 1,1 0,0 0)的WGS84(SRID 4326)多边形转换为KML格式。", "sql": "SELECT ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<Polygon><outerBoundaryIs><LinearRing><coordinates>0,0 0,1 1,1 1,0 0,0</coordinates></LinearRing></outerBoundaryIs></Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object with SRID 4326 into a KML format string output.", "source": "original", "new_id": 1705}
{"id": 309, "function": "ST_AsKML", "question": "输出POLYGON((0 0,0 1,1 1,1 0,0 0))在EPSG:4326坐标系下的KML表示。", "sql": "SELECT ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<Polygon><outerBoundaryIs><LinearRing><coordinates>0,0 0,1 1,1 1,0 0,0</coordinates></LinearRing></outerBoundaryIs></Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object with SRID 4326 into a KML format string output.", "source": "original", "new_id": 1706}
{"id": 309, "function": "ST_AsKML", "question": "将WKT格式的POLYGON((0 0,0 1,1 1,1 0,0 0))几何对象（SRID为4326）转换为KML格式输出。", "sql": "SELECT ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<Polygon><outerBoundaryIs><LinearRing><coordinates>0,0 0,1 1,1 1,0 0,0</coordinates></LinearRing></outerBoundaryIs></Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object with SRID 4326 into a KML format string output.", "source": "original", "new_id": 1707}
{"id": 309, "function": "ST_AsKML", "question": "以KML格式返回POLYGON((0 0,0 1,1 1,1 0,0 0))的空间数据表示,EPSG:4326。", "sql": "SELECT ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<Polygon><outerBoundaryIs><LinearRing><coordinates>0,0 0,1 1,1 1,0 0,0</coordinates></LinearRing></outerBoundaryIs></Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object with SRID 4326 into a KML format string output.", "source": "original", "new_id": 1708}
{"id": 309, "function": "ST_AsKML", "question": "生成POLYGON((0 0,0 1,1 1,1 0,0 0))几何对象的KML格式输出结果，EPSG:4326。", "sql": "SELECT ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<Polygon><outerBoundaryIs><LinearRing><coordinates>0,0 0,1 1,1 1,0 0,0</coordinates></LinearRing></outerBoundaryIs></Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object with SRID 4326 into a KML format string output.", "source": "original", "new_id": 1709}
{"id": 309, "function": "ST_AsKML", "question": "将SRID为4326的POLYGON((0 0,0 1,1 1,1 0,0 0))几何对象转换为KML格式字符串输出。", "sql": "SELECT ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<Polygon><outerBoundaryIs><LinearRing><coordinates>0,0 0,1 1,1 1,0 0,0</coordinates></LinearRing></outerBoundaryIs></Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object with SRID 4326 into a KML format string output.", "source": "original", "new_id": 1710}
{"id": 310, "function": "ST_AsKML", "question": "将SRID为4326的LINESTRING(1 2 3, 4 5 6)三维线段转换为KML格式。", "sql": "SELECT ST_AsKML('SRID=4326;LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["<LineString><coordinates>1,2,3 4,5,6</coordinates></LineString>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D linestring LINESTRING(1 2 3, 4 5 6) with SRID 4326 to a KML format string output.", "source": "original", "new_id": 1711}
{"id": 310, "function": "ST_AsKML", "question": "输出LINESTRING(1 2 3, 4 5 6)在WGS84坐标系(SRID=4326)下的KML表示。", "sql": "SELECT ST_AsKML('SRID=4326;LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["<LineString><coordinates>1,2,3 4,5,6</coordinates></LineString>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D linestring LINESTRING(1 2 3, 4 5 6) with SRID 4326 to a KML format string output.", "source": "original", "new_id": 1712}
{"id": 310, "function": "ST_AsKML", "question": "将SRID为4326的三维线段LINESTRING(1 2 3, 4 5 6)（包含两个顶点坐标(1,2,3)和(4,5,6)）转换为KML格式输出。", "sql": "SELECT ST_AsKML('SRID=4326;LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["<LineString><coordinates>1,2,3 4,5,6</coordinates></LineString>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D linestring LINESTRING(1 2 3, 4 5 6) with SRID 4326 to a KML format string output.", "source": "original", "new_id": 1713}
{"id": 310, "function": "ST_AsKML", "question": "输出LINESTRING(1 2 3, 4 5 6)在WGS84坐标系下的KML格式字符串。", "sql": "SELECT ST_AsKML('SRID=4326;LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["<LineString><coordinates>1,2,3 4,5,6</coordinates></LineString>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D linestring LINESTRING(1 2 3, 4 5 6) with SRID 4326 to a KML format string output.", "source": "original", "new_id": 1714}
{"id": 310, "function": "ST_AsKML", "question": "获取三维线几何(1 2 3, 4 5 6)的KML格式表示结果,使用WGS84坐标系。", "sql": "SELECT ST_AsKML('SRID=4326;LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["<LineString><coordinates>1,2,3 4,5,6</coordinates></LineString>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D linestring LINESTRING(1 2 3, 4 5 6) with SRID 4326 to a KML format string output.", "source": "original", "new_id": 1715}
{"id": 310, "function": "ST_AsKML", "question": "将SRID为4326的三维线段LINESTRING(1 2 3, 4 5 6)转换为KML格式字符串输出。", "sql": "SELECT ST_AsKML('SRID=4326;LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["<LineString><coordinates>1,2,3 4,5,6</coordinates></LineString>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 3D linestring LINESTRING(1 2 3, 4 5 6) with SRID 4326 to a KML format string output.", "source": "original", "new_id": 1716}
{"id": 311, "function": "ST_AsLatLonText", "question": "将坐标为(-3.2342342, -2.32498)的点转换为\"DÂ°M'S.SSS\\\"C\"格式的经纬度文本。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"C'));", "execution_result": [["2Â°19'29.928\"S 3Â°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT (-3.2342342 -2.32498) into a latitude/longitude text string formatted as \"DÂ°M'S.SSS\\\"C\".", "source": "original", "new_id": 1717}
{"id": 311, "function": "ST_AsLatLonText", "question": "输出POINT (-3.2342342 -2.32498)的经纬度，格式为度分秒带三位小数。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"C'));", "execution_result": [["2Â°19'29.928\"S 3Â°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT (-3.2342342 -2.32498) into a latitude/longitude text string formatted as \"DÂ°M'S.SSS\\\"C\".", "source": "original", "new_id": 1718}
{"id": 311, "function": "ST_AsLatLonText", "question": "将坐标为POINT (-3.2342342 -2.32498)的二维点转换为度分秒格式的经纬度文本，输出格式为DÂ°M'S.SSS\"C，其中D表示度，M表示分，S.SSS表示秒并保留三位小数，C表示方向。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"C'));", "execution_result": [["2Â°19'29.928\"S 3Â°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT (-3.2342342 -2.32498) into a latitude/longitude text string formatted as \"DÂ°M'S.SSS\\\"C\".", "source": "original", "new_id": 1719}
{"id": 311, "function": "ST_AsLatLonText", "question": "以\"DÂ°M'S.SSS\\\"C\"格式返回点(-3.2342342, -2.32498)的经纬度字符串。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"C'));", "execution_result": [["2Â°19'29.928\"S 3Â°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT (-3.2342342 -2.32498) into a latitude/longitude text string formatted as \"DÂ°M'S.SSS\\\"C\".", "source": "original", "new_id": 1720}
{"id": 311, "function": "ST_AsLatLonText", "question": "生成POINT (-3.2342342 -2.32498)的格式化坐标文本，包含度分秒和方向符号。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"C'));", "execution_result": [["2Â°19'29.928\"S 3Â°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT (-3.2342342 -2.32498) into a latitude/longitude text string formatted as \"DÂ°M'S.SSS\\\"C\".", "source": "original", "new_id": 1721}
{"id": 311, "function": "ST_AsLatLonText", "question": "将二维点POINT (-3.2342342 -2.32498)转换为采用\"DÂ°M'S.SSS\\\"C\"格式的经纬度文本字符串输出。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"C'));", "execution_result": [["2Â°19'29.928\"S 3Â°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT (-3.2342342 -2.32498) into a latitude/longitude text string formatted as \"DÂ°M'S.SSS\\\"C\".", "source": "original", "new_id": 1722}
{"id": 312, "function": "ST_AsLatLonText", "question": "将坐标为(-3.2342342, -2.32498)的点转换为\"DÂ°M'S.SSS\"\"格式的经纬度文本。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"'));", "execution_result": [["-2Â°19'29.928\" -3Â°14'3.243\""]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) to a latitude/longitude string in degree-minute-second format, with the output format as \"D°M'S.SSS\"\".", "source": "original", "new_id": 1723}
{"id": 312, "function": "ST_AsLatLonText", "question": "输出POINT (-3.2342342 -2.32498)的坐标，格式化为度分秒带三位小数的字符串。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"'));", "execution_result": [["-2Â°19'29.928\" -3Â°14'3.243\""]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) to a latitude/longitude string in degree-minute-second format, with the output format as \"D°M'S.SSS\"\".", "source": "original", "new_id": 1724}
{"id": 312, "function": "ST_AsLatLonText", "question": "将坐标为POINT (-3.2342342 -2.32498)的二维点转换为度分秒格式的文本表示，使用DÂ°M'S.SSS\"作为输出格式。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"'));", "execution_result": [["-2Â°19'29.928\" -3Â°14'3.243\""]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) to a latitude/longitude string in degree-minute-second format, with the output format as \"D°M'S.SSS\"\".", "source": "original", "new_id": 1725}
{"id": 312, "function": "ST_AsLatLonText", "question": "以\"DÂ°M'S.SSS\"\"格式返回点(-3.2342342, -2.32498)的经纬度字符串输出。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"'));", "execution_result": [["-2Â°19'29.928\" -3Â°14'3.243\""]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) to a latitude/longitude string in degree-minute-second format, with the output format as \"D°M'S.SSS\"\".", "source": "original", "new_id": 1726}
{"id": 312, "function": "ST_AsLatLonText", "question": "生成POINT (-3.2342342 -2.32498)的地理坐标文本输出，格式要求包含度符号、分符号和三位小数秒。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"'));", "execution_result": [["-2Â°19'29.928\" -3Â°14'3.243\""]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) to a latitude/longitude string in degree-minute-second format, with the output format as \"D°M'S.SSS\"\".", "source": "original", "new_id": 1727}
{"id": 312, "function": "ST_AsLatLonText", "question": "将二维点POINT(-3.2342342 -2.32498)转换为度分秒格式的经纬度字符串，输出格式要求为\"DÂ°M'S.SSS\"\"。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"'));", "execution_result": [["-2Â°19'29.928\" -3Â°14'3.243\""]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) to a latitude/longitude string in degree-minute-second format, with the output format as \"D°M'S.SSS\"\".", "source": "original", "new_id": 1728}
{"id": 313, "function": "ST_AsLatLonText", "question": "将坐标为(-3.2342342, -2.32498)的点转换为\"D.DDDD degrees C\"格式的经纬度文本。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D.DDDD degrees C'));", "execution_result": [["2.3250 degrees S 3.2342 degrees W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) to latitude/longitude text format, with the output as \"D.DDDD degrees C\" (degrees with 4 decimal places, followed by C directional indicator).", "source": "original", "new_id": 1729}
{"id": 313, "function": "ST_AsLatLonText", "question": "输出POINT (-3.2342342 -2.32498)的坐标，格式为保留4位小数的度分秒表示（D.DDDD degrees C）。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D.DDDD degrees C'));", "execution_result": [["2.3250 degrees S 3.2342 degrees W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) to latitude/longitude text format, with the output as \"D.DDDD degrees C\" (degrees with 4 decimal places, followed by C directional indicator).", "source": "original", "new_id": 1730}
{"id": 313, "function": "ST_AsLatLonText", "question": "将坐标为POINT (-3.2342342 -2.32498)的二维点转换为纬度/经度文本格式，使用'D.DDDD degrees C'作为输出模板，其中D.DDDD表示保留4位小数，C表示坐标轴方向标识。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D.DDDD degrees C'));", "execution_result": [["2.3250 degrees S 3.2342 degrees W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) to latitude/longitude text format, with the output as \"D.DDDD degrees C\" (degrees with 4 decimal places, followed by C directional indicator).", "source": "original", "new_id": 1731}
{"id": 313, "function": "ST_AsLatLonText", "question": "输出点(-3.2342342, -2.32498)的坐标，结果为类似\"3.2342°S 2.3250°W\"的文本字符串。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D.DDDD degrees C'));", "execution_result": [["2.3250 degrees S 3.2342 degrees W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) to latitude/longitude text format, with the output as \"D.DDDD degrees C\" (degrees with 4 decimal places, followed by C directional indicator).", "source": "original", "new_id": 1732}
{"id": 313, "function": "ST_AsLatLonText", "question": "获取POINT (-3.2342342 -2.32498)的坐标文本表示，输出格式为保留4位小数的度分秒。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D.DDDD degrees C'));", "execution_result": [["2.3250 degrees S 3.2342 degrees W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) to latitude/longitude text format, with the output as \"D.DDDD degrees C\" (degrees with 4 decimal places, followed by C directional indicator).", "source": "original", "new_id": 1733}
{"id": 313, "function": "ST_AsLatLonText", "question": "将二维点POINT(-3.2342342 -2.32498)转换为纬度/经度文本格式，要求输出格式为\"D.DDDD degrees C\"（保留4位小数的度数表示法，带C方位标识）。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D.DDDD degrees C'));", "execution_result": [["2.3250 degrees S 3.2342 degrees W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) to latitude/longitude text format, with the output as \"D.DDDD degrees C\" (degrees with 4 decimal places, followed by C directional indicator).", "source": "original", "new_id": 1734}
{"id": 314, "function": "ST_AsLatLonText", "question": "将坐标为(-302.2342342, -792.32498)的二维点转换为度分秒格式的字符串。", "sql": "SELECT (ST_AsLatLonText('POINT (-302.2342342 -792.32498)'));", "execution_result": [["72°19'29.928\"S 57°45'56.757\"E"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-302.2342342 -792.32498) to a latitude/longitude text string in degrees-minutes-seconds format and output it.", "source": "original", "new_id": 1735}
{"id": 314, "function": "ST_AsLatLonText", "question": "输出POINT(-302.2342342 -792.32498)的经纬度文本表示。", "sql": "SELECT (ST_AsLatLonText('POINT (-302.2342342 -792.32498)'));", "execution_result": [["72°19'29.928\"S 57°45'56.757\"E"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-302.2342342 -792.32498) to a latitude/longitude text string in degrees-minutes-seconds format and output it.", "source": "original", "new_id": 1736}
{"id": 314, "function": "ST_AsLatLonText", "question": "将坐标为POINT (-302.2342342 -792.32498)的二维点转换为度分秒格式的经纬度文本表示。", "sql": "SELECT (ST_AsLatLonText('POINT (-302.2342342 -792.32498)'));", "execution_result": [["72°19'29.928\"S 57°45'56.757\"E"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-302.2342342 -792.32498) to a latitude/longitude text string in degrees-minutes-seconds format and output it.", "source": "original", "new_id": 1737}
{"id": 314, "function": "ST_AsLatLonText", "question": "以\"X°Y'Z\" W\"格式返回POINT(-302.2342342 -792.32498)的坐标。", "sql": "SELECT (ST_AsLatLonText('POINT (-302.2342342 -792.32498)'));", "execution_result": [["72°19'29.928\"S 57°45'56.757\"E"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-302.2342342 -792.32498) to a latitude/longitude text string in degrees-minutes-seconds format and output it.", "source": "original", "new_id": 1738}
{"id": 314, "function": "ST_AsLatLonText", "question": "获取POINT(-302.2342342 -792.32498)的度分秒坐标字符串输出。", "sql": "SELECT (ST_AsLatLonText('POINT (-302.2342342 -792.32498)'));", "execution_result": [["72°19'29.928\"S 57°45'56.757\"E"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-302.2342342 -792.32498) to a latitude/longitude text string in degrees-minutes-seconds format and output it.", "source": "original", "new_id": 1739}
{"id": 314, "function": "ST_AsLatLonText", "question": "将二维点POINT(-302.2342342 -792.32498)转换为度分秒格式的经纬度文本字符串并输出。", "sql": "SELECT (ST_AsLatLonText('POINT (-302.2342342 -792.32498)'));", "execution_result": [["72°19'29.928\"S 57°45'56.757\"E"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-302.2342342 -792.32498) to a latitude/longitude text string in degrees-minutes-seconds format and output it.", "source": "original", "new_id": 1740}
{"id": 315, "function": "ST_AsLatLonText", "question": "将坐标为(-3.2342342, -2.32498)的点转换为\"D degrees, M minutes, S seconds to the C\"格式的经纬度文本。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D degrees, M minutes, S seconds to the C'));", "execution_result": [["2 degrees, 19 minutes, 30 seconds to the S 3 degrees, 14 minutes, 3 seconds to the W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) into a lat/long textual representation in the format \"D degrees, M minutes, S seconds to the C\", outputting the complete string result.", "source": "original", "new_id": 1741}
{"id": 315, "function": "ST_AsLatLonText", "question": "使用ST_AsLatLonText函数将POINT (-3.2342342 -2.32498)格式化为\"D degrees, M minutes, S seconds to the C\"样式的坐标字符串。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D degrees, M minutes, S seconds to the C'));", "execution_result": [["2 degrees, 19 minutes, 30 seconds to the S 3 degrees, 14 minutes, 3 seconds to the W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) into a lat/long textual representation in the format \"D degrees, M minutes, S seconds to the C\", outputting the complete string result.", "source": "original", "new_id": 1742}
{"id": 315, "function": "ST_AsLatLonText", "question": "将坐标为POINT (-3.2342342 -2.32498)的二维点转换为纬度/经度文本格式，使用'D degrees, M minutes, S seconds to the C'格式模板输出，其中D表示度、M表示分、S表示秒、C表示方位。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D degrees, M minutes, S seconds to the C'));", "execution_result": [["2 degrees, 19 minutes, 30 seconds to the S 3 degrees, 14 minutes, 3 seconds to the W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) into a lat/long textual representation in the format \"D degrees, M minutes, S seconds to the C\", outputting the complete string result.", "source": "original", "new_id": 1743}
{"id": 315, "function": "ST_AsLatLonText", "question": "输出点(-3.2342342, -2.32498)的坐标，格式为\"度 分 秒 方位\"的字符串。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D degrees, M minutes, S seconds to the C'));", "execution_result": [["2 degrees, 19 minutes, 30 seconds to the S 3 degrees, 14 minutes, 3 seconds to the W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) into a lat/long textual representation in the format \"D degrees, M minutes, S seconds to the C\", outputting the complete string result.", "source": "original", "new_id": 1744}
{"id": 315, "function": "ST_AsLatLonText", "question": "生成POINT (-3.2342342 -2.32498)的坐标文本，结果格式为\"D degrees, M minutes, S seconds to the C\"。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D degrees, M minutes, S seconds to the C'));", "execution_result": [["2 degrees, 19 minutes, 30 seconds to the S 3 degrees, 14 minutes, 3 seconds to the W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) into a lat/long textual representation in the format \"D degrees, M minutes, S seconds to the C\", outputting the complete string result.", "source": "original", "new_id": 1745}
{"id": 315, "function": "ST_AsLatLonText", "question": "将二维点POINT(-3.2342342 -2.32498)转换为采用\"D degrees, M minutes, S seconds to the C\"格式的经纬度文本表示，要求输出完整的字符串结果。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D degrees, M minutes, S seconds to the C'));", "execution_result": [["2 degrees, 19 minutes, 30 seconds to the S 3 degrees, 14 minutes, 3 seconds to the W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-3.2342342 -2.32498) into a lat/long textual representation in the format \"D degrees, M minutes, S seconds to the C\", outputting the complete string result.", "source": "original", "new_id": 1746}
{"id": 316, "function": "ST_AsLatLonText", "question": "将坐标为(-3.2342342, -2.32498)的点转换为度分秒格式的经纬度文本。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)'));", "execution_result": [["2°19'29.928\"S 3°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the longitude and latitude coordinates of the 2D point POINT (-3.2342342 -2.32498) as a text representation in degrees-minutes-seconds-direction format.", "source": "original", "new_id": 1747}
{"id": 316, "function": "ST_AsLatLonText", "question": "输出POINT (-3.2342342 -2.32498)的经纬度坐标文本表示。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)'));", "execution_result": [["2°19'29.928\"S 3°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the longitude and latitude coordinates of the 2D point POINT (-3.2342342 -2.32498) as a text representation in degrees-minutes-seconds-direction format.", "source": "original", "new_id": 1748}
{"id": 316, "function": "ST_AsLatLonText", "question": "将坐标为POINT (-3.2342342 -2.32498)的二维点转换为度分秒格式的经纬度文本表示。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)'));", "execution_result": [["2°19'29.928\"S 3°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the longitude and latitude coordinates of the 2D point POINT (-3.2342342 -2.32498) as a text representation in degrees-minutes-seconds-direction format.", "source": "original", "new_id": 1749}
{"id": 316, "function": "ST_AsLatLonText", "question": "以度分秒格式返回POINT (-3.2342342 -2.32498)的坐标文本。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)'));", "execution_result": [["2°19'29.928\"S 3°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the longitude and latitude coordinates of the 2D point POINT (-3.2342342 -2.32498) as a text representation in degrees-minutes-seconds-direction format.", "source": "original", "new_id": 1750}
{"id": 316, "function": "ST_AsLatLonText", "question": "输出POINT (-3.2342342 -2.32498)的可读经纬度字符串。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)'));", "execution_result": [["2°19'29.928\"S 3°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the longitude and latitude coordinates of the 2D point POINT (-3.2342342 -2.32498) as a text representation in degrees-minutes-seconds-direction format.", "source": "original", "new_id": 1751}
{"id": 316, "function": "ST_AsLatLonText", "question": "输出二维点POINT (-3.2342342 -2.32498)的经纬度坐标文本表示，格式为度分秒方向的字符串。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)'));", "execution_result": [["2°19'29.928\"S 3°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the longitude and latitude coordinates of the 2D point POINT (-3.2342342 -2.32498) as a text representation in degrees-minutes-seconds-direction format.", "source": "original", "new_id": 1752}
{"id": 317, "function": "ST_AsMARC21", "question": "将SRID为4326、坐标为(-4.504289, 54.253312)的点转换为MARC21格式。", "sql": "SELECT ST_AsMARC21('SRID=4326;POINT(-4.504289 54.253312)'::geometry);", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W0043015</subfield><subfield code=\"e\">W0043015</subfield><subfield code=\"f\">N0541512</subfield><subfield code=\"g\">N0541512</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-4.504289 54.253312) with SRID 4326 to a MARC21 format geospatial data encoding string and output it.", "source": "original", "new_id": 1753}
{"id": 317, "function": "ST_AsMARC21", "question": "输出WGS84坐标系(SRID=4326)下经度-4.504289、纬度54.253312的点的MARC21表示。", "sql": "SELECT ST_AsMARC21('SRID=4326;POINT(-4.504289 54.253312)'::geometry);", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W0043015</subfield><subfield code=\"e\">W0043015</subfield><subfield code=\"f\">N0541512</subfield><subfield code=\"g\">N0541512</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-4.504289 54.253312) with SRID 4326 to a MARC21 format geospatial data encoding string and output it.", "source": "original", "new_id": 1754}
{"id": 317, "function": "ST_AsMARC21", "question": "将SRID为4326的二维点POINT(-4.504289 54.253312)转换为MARC21格式输出。", "sql": "SELECT ST_AsMARC21('SRID=4326;POINT(-4.504289 54.253312)'::geometry);", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W0043015</subfield><subfield code=\"e\">W0043015</subfield><subfield code=\"f\">N0541512</subfield><subfield code=\"g\">N0541512</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-4.504289 54.253312) with SRID 4326 to a MARC21 format geospatial data encoding string and output it.", "source": "original", "new_id": 1755}
{"id": 317, "function": "ST_AsMARC21", "question": "输出SRID=4326的POINT(-4.504289 54.253312)几何对象的MARC21格式字符串。", "sql": "SELECT ST_AsMARC21('SRID=4326;POINT(-4.504289 54.253312)'::geometry);", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W0043015</subfield><subfield code=\"e\">W0043015</subfield><subfield code=\"f\">N0541512</subfield><subfield code=\"g\">N0541512</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-4.504289 54.253312) with SRID 4326 to a MARC21 format geospatial data encoding string and output it.", "source": "original", "new_id": 1756}
{"id": 317, "function": "ST_AsMARC21", "question": "以MARC21格式返回WGS84坐标点(-4.504289,54.253312)的表示，SRID=4326。", "sql": "SELECT ST_AsMARC21('SRID=4326;POINT(-4.504289 54.253312)'::geometry);", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W0043015</subfield><subfield code=\"e\">W0043015</subfield><subfield code=\"f\">N0541512</subfield><subfield code=\"g\">N0541512</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-4.504289 54.253312) with SRID 4326 to a MARC21 format geospatial data encoding string and output it.", "source": "original", "new_id": 1757}
{"id": 317, "function": "ST_AsMARC21", "question": "将SRID为4326的二维点POINT(-4.504289 54.253312)转换为MARC21格式的地理数据编码字符串并输出。", "sql": "SELECT ST_AsMARC21('SRID=4326;POINT(-4.504289 54.253312)'::geometry);", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W0043015</subfield><subfield code=\"e\">W0043015</subfield><subfield code=\"f\">N0541512</subfield><subfield code=\"g\">N0541512</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the 2D point POINT(-4.504289 54.253312) with SRID 4326 to a MARC21 format geospatial data encoding string and output it.", "source": "original", "new_id": 1758}
{"id": 318, "function": "ST_AsMARC21", "question": "将SRID为4326的几何集合（包含多边形POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65))和点POINT(-4.5 54.25)）转换为MARC21格式，使用'hdddmm.mmmm'坐标格式。", "sql": "SELECT ST_AsMARC21('SRID=4326;GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))'::geometry,'hdddmm.mmmm');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">E01307.0000</subfield><subfield code=\"e\">E01331.0000</subfield><subfield code=\"f\">N05240.0000</subfield><subfield code=\"g\">N05224.0000</subfield></datafield><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W00430.0000</subfield><subfield code=\"e\">W00430.0000</subfield><subfield code=\"f\">N05415.0000</subfield><subfield code=\"g\">N05415.0000</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry collection in WGS84 coordinate system (containing a polygon formed by points (13.1 52.65), (13.516666666666667 52.65), (13.516666666666667 52.38333333333333), (13.1 52.38333333333333) and a point located at (-4.5 54.25)) into MARC21 format geographic coordinates, with the output in degree-minute-second format (hdddmm.mmmm).", "source": "original", "new_id": 1759}
{"id": 318, "function": "ST_AsMARC21", "question": "将包含多边形（顶点为13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333）和点（-4.5 54.25）的几何集合转换为MARC21格式，SRID为4326，使用度分秒格式。", "sql": "SELECT ST_AsMARC21('SRID=4326;GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))'::geometry,'hdddmm.mmmm');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">E01307.0000</subfield><subfield code=\"e\">E01331.0000</subfield><subfield code=\"f\">N05240.0000</subfield><subfield code=\"g\">N05224.0000</subfield></datafield><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W00430.0000</subfield><subfield code=\"e\">W00430.0000</subfield><subfield code=\"f\">N05415.0000</subfield><subfield code=\"g\">N05415.0000</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry collection in WGS84 coordinate system (containing a polygon formed by points (13.1 52.65), (13.516666666666667 52.65), (13.516666666666667 52.38333333333333), (13.1 52.38333333333333) and a point located at (-4.5 54.25)) into MARC21 format geographic coordinates, with the output in degree-minute-second format (hdddmm.mmmm).", "source": "original", "new_id": 1760}
{"id": 318, "function": "ST_AsMARC21", "question": "将SRID为4326的几何集合（包含一个由坐标点(13.1 52.65)、(13.516666666666667 52.65)、(13.516666666666667 52.38333333333333)、(13.1 52.38333333333333)构成的多边形和一个坐标为(-4.5 54.25)的点）转换为MARC21格式，并使用'hdddmm.mmmm'坐标格式。", "sql": "SELECT ST_AsMARC21('SRID=4326;GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))'::geometry,'hdddmm.mmmm');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">E01307.0000</subfield><subfield code=\"e\">E01331.0000</subfield><subfield code=\"f\">N05240.0000</subfield><subfield code=\"g\">N05224.0000</subfield></datafield><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W00430.0000</subfield><subfield code=\"e\">W00430.0000</subfield><subfield code=\"f\">N05415.0000</subfield><subfield code=\"g\">N05415.0000</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry collection in WGS84 coordinate system (containing a polygon formed by points (13.1 52.65), (13.516666666666667 52.65), (13.516666666666667 52.38333333333333), (13.1 52.38333333333333) and a point located at (-4.5 54.25)) into MARC21 format geographic coordinates, with the output in degree-minute-second format (hdddmm.mmmm).", "source": "original", "new_id": 1761}
{"id": 318, "function": "ST_AsMARC21", "question": "输出SRID为4326的几何集合（包含多边形POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65))和点POINT(-4.5 54.25)）的MARC21格式表示，SRID为4326，使用度分秒坐标格式。", "sql": "SELECT ST_AsMARC21('SRID=4326;GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))'::geometry,'hdddmm.mmmm');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">E01307.0000</subfield><subfield code=\"e\">E01331.0000</subfield><subfield code=\"f\">N05240.0000</subfield><subfield code=\"g\">N05224.0000</subfield></datafield><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W00430.0000</subfield><subfield code=\"e\">W00430.0000</subfield><subfield code=\"f\">N05415.0000</subfield><subfield code=\"g\">N05415.0000</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry collection in WGS84 coordinate system (containing a polygon formed by points (13.1 52.65), (13.516666666666667 52.65), (13.516666666666667 52.38333333333333), (13.1 52.38333333333333) and a point located at (-4.5 54.25)) into MARC21 format geographic coordinates, with the output in degree-minute-second format (hdddmm.mmmm).", "source": "original", "new_id": 1762}
{"id": 318, "function": "ST_AsMARC21", "question": "将SRID为4326的几何集合（包含一个由坐标点(13.1 52.65)、(13.516666666666667 52.65)、(13.516666666666667 52.38333333333333)、(13.1 52.38333333333333)构成的多边形和一个位于(-4.5 54.25)的点）转换为MARC21格式的地理坐标表示，要求输出结果为度分格式（hdddmm.mmmm）。", "sql": "SELECT ST_AsMARC21('SRID=4326;GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))'::geometry,'hdddmm.mmmm');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">E01307.0000</subfield><subfield code=\"e\">E01331.0000</subfield><subfield code=\"f\">N05240.0000</subfield><subfield code=\"g\">N05224.0000</subfield></datafield><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W00430.0000</subfield><subfield code=\"e\">W00430.0000</subfield><subfield code=\"f\">N05415.0000</subfield><subfield code=\"g\">N05415.0000</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry collection in WGS84 coordinate system (containing a polygon formed by points (13.1 52.65), (13.516666666666667 52.65), (13.516666666666667 52.38333333333333), (13.1 52.38333333333333) and a point located at (-4.5 54.25)) into MARC21 format geographic coordinates, with the output in degree-minute-second format (hdddmm.mmmm).", "source": "original", "new_id": 1763}
{"id": 318, "function": "ST_AsMARC21", "question": "将WGS84坐标系下的几何集合（包含一个由坐标点(13.1 52.65)、(13.516666666666667 52.65)、(13.516666666666667 52.38333333333333)、(13.1 52.38333333333333)构成的多边形和一个位于(-4.5 54.25)的点）转换为MARC21格式的地理坐标表示，要求输出结果使用度分秒格式（hdddmm.mmmm）。", "sql": "SELECT ST_AsMARC21('SRID=4326;GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))'::geometry,'hdddmm.mmmm');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">E01307.0000</subfield><subfield code=\"e\">E01331.0000</subfield><subfield code=\"f\">N05240.0000</subfield><subfield code=\"g\">N05224.0000</subfield></datafield><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W00430.0000</subfield><subfield code=\"e\">W00430.0000</subfield><subfield code=\"f\">N05415.0000</subfield><subfield code=\"g\">N05415.0000</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry collection in WGS84 coordinate system (containing a polygon formed by points (13.1 52.65), (13.516666666666667 52.65), (13.516666666666667 52.38333333333333), (13.1 52.38333333333333) and a point located at (-4.5 54.25)) into MARC21 format geographic coordinates, with the output in degree-minute-second format (hdddmm.mmmm).", "source": "original", "new_id": 1764}
{"id": 319, "function": "ST_AsMARC21", "question": "将SRID=4326的多边形((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))转换为hddd.dddd格式的MARC21字符串。", "sql": "SELECT ST_AsMARC21('SRID=4326;POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))'::geometry,'hddd.dddd');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W004.5792</subfield><subfield code=\"e\">W004.5466</subfield><subfield code=\"f\">N054.1970</subfield><subfield code=\"g\">N054.1817</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091)) geometry with SRID 4326 to MARC21 format, with coordinate precision rounded to 4 decimal places.", "source": "original", "new_id": 1765}
{"id": 319, "function": "ST_AsMARC21", "question": "使用ST_AsMARC21函数将坐标为(-4.5792388916015625 54.18172660239091)到(-4.546623229980469 54.18313300502024)的闭合多边形转换为MARC21格式，坐标精度为hddd.dddd,SRID=4326。", "sql": "SELECT ST_AsMARC21('SRID=4326;POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))'::geometry,'hddd.dddd');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W004.5792</subfield><subfield code=\"e\">W004.5466</subfield><subfield code=\"f\">N054.1970</subfield><subfield code=\"g\">N054.1817</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091)) geometry with SRID 4326 to MARC21 format, with coordinate precision rounded to 4 decimal places.", "source": "original", "new_id": 1766}
{"id": 319, "function": "ST_AsMARC21", "question": "将SRID为4326的POLYGON几何对象，其顶点坐标依次为(-4.5792388916015625 54.18172660239091)、(-4.56756591796875 54.196993557130355)、(-4.546623229980469 54.18313300502024)、(-4.5792388916015625 54.18172660239091)，使用ST_AsMARC21函数转换为MARC21格式，其中第二个参数'hddd.dddd'表示输出格式要求。", "sql": "SELECT ST_AsMARC21('SRID=4326;POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))'::geometry,'hddd.dddd');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W004.5792</subfield><subfield code=\"e\">W004.5466</subfield><subfield code=\"f\">N054.1970</subfield><subfield code=\"g\">N054.1817</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091)) geometry with SRID 4326 to MARC21 format, with coordinate precision rounded to 4 decimal places.", "source": "original", "new_id": 1767}
{"id": 319, "function": "ST_AsMARC21", "question": "输出SRID=4326的多边形多边形POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))的MARC21格式字符串，坐标精度为度分秒。", "sql": "SELECT ST_AsMARC21('SRID=4326;POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))'::geometry,'hddd.dddd');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W004.5792</subfield><subfield code=\"e\">W004.5466</subfield><subfield code=\"f\">N054.1970</subfield><subfield code=\"g\">N054.1817</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091)) geometry with SRID 4326 to MARC21 format, with coordinate precision rounded to 4 decimal places.", "source": "original", "new_id": 1768}
{"id": 319, "function": "ST_AsMARC21", "question": "获取由四个坐标点(-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091)定义的闭合多边形在MARC21格式下的字符串表示，输出格式为hddd.dddd,SRID=4326。", "sql": "SELECT ST_AsMARC21('SRID=4326;POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))'::geometry,'hddd.dddd');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W004.5792</subfield><subfield code=\"e\">W004.5466</subfield><subfield code=\"f\">N054.1970</subfield><subfield code=\"g\">N054.1817</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091)) geometry with SRID 4326 to MARC21 format, with coordinate precision rounded to 4 decimal places.", "source": "original", "new_id": 1769}
{"id": 319, "function": "ST_AsMARC21", "question": "将SRID为4326的POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))几何对象转换为MARC21格式，坐标精度要求保留4位小数。", "sql": "SELECT ST_AsMARC21('SRID=4326;POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))'::geometry,'hddd.dddd');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W004.5792</subfield><subfield code=\"e\">W004.5466</subfield><subfield code=\"f\">N054.1970</subfield><subfield code=\"g\">N054.1817</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091)) geometry with SRID 4326 to MARC21 format, with coordinate precision rounded to 4 decimal places.", "source": "original", "new_id": 1770}
{"id": 320, "function": "ST_AsMVTGeom", "question": "将POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))在坐标范围(0,0)到(4096,4096)的边界框内转换为MVT几何，网格大小4096，不裁剪，输出WKT格式。", "sql": "SELECT ST_AsText(ST_AsMVTGeom(ST_GeomFromText('POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))'), ST_MakeBox2D(ST_Point(0, 0), ST_Point(4096, 4096)), 4096, 0, false));", "execution_result": [["MULTIPOLYGON(((5 4096,10 4091,10 4096,5 4096)),((5 4096,0 4101,0 4096,5 4096)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry object POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0)) to Mapbox Vector Tile format using the coordinate range defined by the bottom-left POINT(0 0) and top-right POINT(4096 4096), with a tile size of 4096 units, buffer distance of 0, no clipping, and output the WKT string representation of the converted result.", "source": "original", "new_id": 1771}
{"id": 320, "function": "ST_AsMVTGeom", "question": "用坐标(0,0)和(4096,4096)定义边界框，将多边形POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))转换为MVT几何后输出文本。", "sql": "SELECT ST_AsText(ST_AsMVTGeom(ST_GeomFromText('POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))'), ST_MakeBox2D(ST_Point(0, 0), ST_Point(4096, 4096)), 4096, 0, false));", "execution_result": [["MULTIPOLYGON(((5 4096,10 4091,10 4096,5 4096)),((5 4096,0 4101,0 4096,5 4096)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry object POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0)) to Mapbox Vector Tile format using the coordinate range defined by the bottom-left POINT(0 0) and top-right POINT(4096 4096), with a tile size of 4096 units, buffer distance of 0, no clipping, and output the WKT string representation of the converted result.", "source": "original", "new_id": 1772}
{"id": 320, "function": "ST_AsMVTGeom", "question": "将WKT格式的POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))几何对象转换为Mapbox矢量切片格式的几何对象，其中使用ST_MakeBox2D函数创建的范围框左下角为POINT(0 0)，右上角为POINT(4096 4096)，切片分辨率为4096，缓冲区大小为0，且不进行裁剪操作，最后以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_AsMVTGeom(ST_GeomFromText('POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))'), ST_MakeBox2D(ST_Point(0, 0), ST_Point(4096, 4096)), 4096, 0, false));", "execution_result": [["MULTIPOLYGON(((5 4096,10 4091,10 4096,5 4096)),((5 4096,0 4101,0 4096,5 4096)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry object POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0)) to Mapbox Vector Tile format using the coordinate range defined by the bottom-left POINT(0 0) and top-right POINT(4096 4096), with a tile size of 4096 units, buffer distance of 0, no clipping, and output the WKT string representation of the converted result.", "source": "original", "new_id": 1773}
{"id": 320, "function": "ST_AsMVTGeom", "question": "输出POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))经过MVT转换后的WKT格式结果，边界框由坐标(0,0)和(4096,4096)定义。", "sql": "SELECT ST_AsText(ST_AsMVTGeom(ST_GeomFromText('POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))'), ST_MakeBox2D(ST_Point(0, 0), ST_Point(4096, 4096)), 4096, 0, false));", "execution_result": [["MULTIPOLYGON(((5 4096,10 4091,10 4096,5 4096)),((5 4096,0 4101,0 4096,5 4096)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry object POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0)) to Mapbox Vector Tile format using the coordinate range defined by the bottom-left POINT(0 0) and top-right POINT(4096 4096), with a tile size of 4096 units, buffer distance of 0, no clipping, and output the WKT string representation of the converted result.", "source": "original", "new_id": 1774}
{"id": 320, "function": "ST_AsMVTGeom", "question": "输出将POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))转换为Mapbox矢量切片格式几何体后的WKT字符串，转换时使用范围为左下角POINT(0 0)到右上角POINT(4096 4096)的边界框，切片尺寸为4096单位，缓冲距离为0，且不进行裁剪操作。", "sql": "SELECT ST_AsText(ST_AsMVTGeom(ST_GeomFromText('POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))'), ST_MakeBox2D(ST_Point(0, 0), ST_Point(4096, 4096)), 4096, 0, false));", "execution_result": [["MULTIPOLYGON(((5 4096,10 4091,10 4096,5 4096)),((5 4096,0 4101,0 4096,5 4096)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry object POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0)) to Mapbox Vector Tile format using the coordinate range defined by the bottom-left POINT(0 0) and top-right POINT(4096 4096), with a tile size of 4096 units, buffer distance of 0, no clipping, and output the WKT string representation of the converted result.", "source": "original", "new_id": 1775}
{"id": 320, "function": "ST_AsMVTGeom", "question": "将POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))几何对象转换为Mapbox矢量切片格式的几何体，使用边界框左下角POINT(0 0)和右上角POINT(4096 4096)定义的坐标范围，切片尺寸为4096单位，缓冲距离为0，不进行裁剪操作，最终输出转换结果的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_AsMVTGeom(ST_GeomFromText('POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))'), ST_MakeBox2D(ST_Point(0, 0), ST_Point(4096, 4096)), 4096, 0, false));", "execution_result": [["MULTIPOLYGON(((5 4096,10 4091,10 4096,5 4096)),((5 4096,0 4101,0 4096,5 4096)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the geometry object POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0)) to Mapbox Vector Tile format using the coordinate range defined by the bottom-left POINT(0 0) and top-right POINT(4096 4096), with a tile size of 4096 units, buffer distance of 0, no clipping, and output the WKT string representation of the converted result.", "source": "original", "new_id": 1776}
{"id": 323, "function": "ST_AsSVG", "question": "将包含折线(5 5,3 5,3 3,0 3)和圆弧(0 0,2 1,2 2)的多曲线转换为SVG路径数据，相对坐标模式，不保留小数位。", "sql": "SELECT ST_AsSVG('MULTICURVE((5 5,3 5,3 3,0 3), CIRCULARSTRING(0 0,2 1,2 2))'::geometry, 0, 0);", "execution_result": [["M 5 -5 L 3 -5 3 -3 0 -3 M 0 0 A 2 2 0 0 0 2 -2"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the composite curve MULTICURVE (containing the line segment (5 5,3 5,3 3,0 3) and the arc CIRCULARSTRING(0 0,2 1,2 2)) into an SVG path string without using relative coordinates or truncating decimal places.", "source": "original", "new_id": 1777}
{"id": 323, "function": "ST_AsSVG", "question": "输出由折线(5 5→3 5→3 3→0 3)和三点圆弧(0 0→2 1→2 2)组成的多曲线SVG表示，使用相对坐标，精度为0位小数。", "sql": "SELECT ST_AsSVG('MULTICURVE((5 5,3 5,3 3,0 3), CIRCULARSTRING(0 0,2 1,2 2))'::geometry, 0, 0);", "execution_result": [["M 5 -5 L 3 -5 3 -3 0 -3 M 0 0 A 2 2 0 0 0 2 -2"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the composite curve MULTICURVE (containing the line segment (5 5,3 5,3 3,0 3) and the arc CIRCULARSTRING(0 0,2 1,2 2)) into an SVG path string without using relative coordinates or truncating decimal places.", "source": "original", "new_id": 1778}
{"id": 323, "function": "ST_AsSVG", "question": "将MULTICURVE几何对象转换为SVG路径字符串，该对象包含两条子曲线：第一条是折线，依次经过坐标点(5 5)、(3 5)、(3 3)、(0 3)；第二条是圆弧线，经过控制点(0 0)、(2 1)、(2 2)。转换参数设置为：不包含相对坐标标志（第二个参数0），不包含精度控制标志（第三个参数0）。", "sql": "SELECT ST_AsSVG('MULTICURVE((5 5,3 5,3 3,0 3), CIRCULARSTRING(0 0,2 1,2 2))'::geometry, 0, 0);", "execution_result": [["M 5 -5 L 3 -5 3 -3 0 -3 M 0 0 A 2 2 0 0 0 2 -2"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the composite curve MULTICURVE (containing the line segment (5 5,3 5,3 3,0 3) and the arc CIRCULARSTRING(0 0,2 1,2 2)) into an SVG path string without using relative coordinates or truncating decimal places.", "source": "original", "new_id": 1779}
{"id": 323, "function": "ST_AsSVG", "question": "输出多曲线(折线(5 5,3 5,3 3,0 3)+圆弧(0 0,2 1,2 2))的SVG路径数据字符串，使用相对坐标表示，不保留小数位。", "sql": "SELECT ST_AsSVG('MULTICURVE((5 5,3 5,3 3,0 3), CIRCULARSTRING(0 0,2 1,2 2))'::geometry, 0, 0);", "execution_result": [["M 5 -5 L 3 -5 3 -3 0 -3 M 0 0 A 2 2 0 0 0 2 -2"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the composite curve MULTICURVE (containing the line segment (5 5,3 5,3 3,0 3) and the arc CIRCULARSTRING(0 0,2 1,2 2)) into an SVG path string without using relative coordinates or truncating decimal places.", "source": "original", "new_id": 1780}
{"id": 323, "function": "ST_AsSVG", "question": "获取几何对象'MULTICURVE((5 5,3 5,3 3,0 3), CIRCULARSTRING(0 0,2 1,2 2))'的SVG格式表示，输出为路径数据字符串。", "sql": "SELECT ST_AsSVG('MULTICURVE((5 5,3 5,3 3,0 3), CIRCULARSTRING(0 0,2 1,2 2))'::geometry, 0, 0);", "execution_result": [["M 5 -5 L 3 -5 3 -3 0 -3 M 0 0 A 2 2 0 0 0 2 -2"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the composite curve MULTICURVE (containing the line segment (5 5,3 5,3 3,0 3) and the arc CIRCULARSTRING(0 0,2 1,2 2)) into an SVG path string without using relative coordinates or truncating decimal places.", "source": "original", "new_id": 1781}
{"id": 323, "function": "ST_AsSVG", "question": "将复合曲线MULTICURVE（包含折线段(5 5,3 5,3 3,0 3)和圆弧CIRCULARSTRING(0 0,2 1,2 2)）转换为SVG路径字符串，不包含相对坐标且不进行小数位数截断。", "sql": "SELECT ST_AsSVG('MULTICURVE((5 5,3 5,3 3,0 3), CIRCULARSTRING(0 0,2 1,2 2))'::geometry, 0, 0);", "execution_result": [["M 5 -5 L 3 -5 3 -3 0 -3 M 0 0 A 2 2 0 0 0 2 -2"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the composite curve MULTICURVE (containing the line segment (5 5,3 5,3 3,0 3) and the arc CIRCULARSTRING(0 0,2 1,2 2)) into an SVG path string without using relative coordinates or truncating decimal places.", "source": "original", "new_id": 1782}
{"id": 324, "function": "ST_AsSVG", "question": "将圆弧曲线CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)转换为SVG路径字符串。", "sql": "SELECT ST_AsSVG( ST_GeomFromText('CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)') );", "execution_result": [["M -2 0 A 2 2 0 0 1 2 0 A 2 2 0 0 1 2 -4"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4) into an SVG path data string.", "source": "original", "new_id": 1783}
{"id": 324, "function": "ST_AsSVG", "question": "输出由点(-2,0)、(0,2)、(2,0)、(0,2)、(2,4)定义的圆弧的SVG格式。", "sql": "SELECT ST_AsSVG( ST_GeomFromText('CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)') );", "execution_result": [["M -2 0 A 2 2 0 0 1 2 0 A 2 2 0 0 1 2 -4"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4) into an SVG path data string.", "source": "original", "new_id": 1784}
{"id": 324, "function": "ST_AsSVG", "question": "将圆弧线CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)转换为SVG格式输出，其中圆弧线由五个控制点组成，分别是(-2,0)、(0,2)、(2,0)、(0,2)和(2,4)。", "sql": "SELECT ST_AsSVG( ST_GeomFromText('CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)') );", "execution_result": [["M -2 0 A 2 2 0 0 1 2 0 A 2 2 0 0 1 2 -4"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4) into an SVG path data string.", "source": "original", "new_id": 1785}
{"id": 324, "function": "ST_AsSVG", "question": "以SVG路径字符串格式返回圆弧曲线CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)的几何数据。", "sql": "SELECT ST_AsSVG( ST_GeomFromText('CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)') );", "execution_result": [["M -2 0 A 2 2 0 0 1 2 0 A 2 2 0 0 1 2 -4"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4) into an SVG path data string.", "source": "original", "new_id": 1786}
{"id": 324, "function": "ST_AsSVG", "question": "将几何对象CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)输出为SVG格式的路径数据，参数为圆弧曲线CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)。", "sql": "SELECT ST_AsSVG( ST_GeomFromText('CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)') );", "execution_result": [["M -2 0 A 2 2 0 0 1 2 0 A 2 2 0 0 1 2 -4"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4) into an SVG path data string.", "source": "original", "new_id": 1787}
{"id": 324, "function": "ST_AsSVG", "question": "将圆弧线CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)转换为SVG格式的路径数据字符串输出。", "sql": "SELECT ST_AsSVG( ST_GeomFromText('CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)') );", "execution_result": [["M -2 0 A 2 2 0 0 1 2 0 A 2 2 0 0 1 2 -4"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the circular arc line CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4) into an SVG path data string.", "source": "original", "new_id": 1788}
{"id": 325, "function": "ST_AsSVG", "question": "将MULTISURFACE对象（包含曲线多边形(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0)，普通多边形(-1 0,0 0.5,1 0,0 1,-1 0）和(7 8,10 10,6 14,4 11,7 8）转换为SVG格式，相对坐标模式，保留2位小数。", "sql": "SELECT ST_AsSVG('MULTISURFACE( CURVEPOLYGON(CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0), (-1 0,0 0.5,1 0,0 1,-1 0)), ((7 8,10 10,6 14,4 11,7 8)))'::geometry, 0, 4);", "execution_result": [["M -2 0 A 1 1 0 0 0 0 0 A 1 1 0 0 0 2 0 A 2 2 0 0 0 -2 0 Z M -1 0 L 0 -0.5 1 0 0 -1 -1 0 Z M 7 -8 L 10 -10 6 -14 4 -11 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Translate the MULTISURFACE object (containing a curved polygon (-2 0, -1 -1, 0 0, 1 -1, 2 0, 0 2, -2 0), a regular polygon (-1 0, 0 0.5, 1 0, 0 1, -1 0), and (7 8, 10 10, 6 14, 4 11, 7 8)) to SVG format in relative coordinate mode, rounding to 2 decimal places.", "source": "original", "new_id": 1789}
{"id": 325, "function": "ST_AsSVG", "question": "输出由圆形弧线(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0)和多边形(-1 0,0 0.5,1 0,0 1,-1 0）、(7 8,10 10,6 14,4 11,7 8)定义的多曲面几何的SVG路径字符串，参数为相对坐标和2位精度。", "sql": "SELECT ST_AsSVG('MULTISURFACE( CURVEPOLYGON(CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0), (-1 0,0 0.5,1 0,0 1,-1 0)), ((7 8,10 10,6 14,4 11,7 8)))'::geometry, 0, 5);", "execution_result": [["M -2 0 A 1 1 0 0 0 0 0 A 1 1 0 0 0 2 0 A 2 2 0 0 0 -2 0 Z M -1 0 L 0 -0.5 1 0 0 -1 -1 0 Z M 7 -8 L 10 -10 6 -14 4 -11 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the SVG path string of the multi-surface geometry defined by the circular arc (-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0) and polygons (-1 0,0 0.5,1 0,0 1,-1 0), (7 8,10 10,6 14,4 11,7 8), with parameters as relative coordinates and 2 decimal precision.", "source": "original", "new_id": 1790}
{"id": 325, "function": "ST_AsSVG", "question": "将MULTISURFACE类型的几何对象转换为SVG格式输出，该几何对象包含以下组成部分：1) 一个由CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0)定义的曲线多边形外环，以及(-1 0,0 0.5,1 0,0 1,-1 0)定义的内环；2) 一个由(7 8,10 10,6 14,4 11,7 8)定义的多边形。转换参数设置为：相对坐标模式(0)，小数点后保留2位精度(2)。", "sql": "SELECT ST_AsSVG('MULTISURFACE( CURVEPOLYGON(CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0), (-1 0,0 0.5,1 0,0 1,-1 0)), ((7 8,10 10,6 14,4 11,7 8)))'::geometry, 0, 2);", "execution_result": [["M -2 0 A 1 1 0 0 0 0 0 A 1 1 0 0 0 2 0 A 2 2 0 0 0 -2 0 Z M -1 0 L 0 -0.5 1 0 0 -1 -1 0 Z M 7 -8 L 10 -10 6 -14 4 -11 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert a composite surface geometry consisting of a curved polygon (composed of the circular string CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0) and the inner ring polygon (-1 0,0 0.5,1 0,0 1,-1 0)) and a standalone polygon (7 8,10 10,6 14,4 11,7 8) into an SVG path string, using relative coordinate mode (parameter 0) with 2 decimal places of precision (parameter 2).", "source": "original", "new_id": 1791}
{"id": 325, "function": "ST_AsSVG", "question": "将MULTISURFACE几何对象转换为SVG路径字符串，该几何对象包含一个由CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0)和线性环(-1 0,0 0.5,1 0,0 1,-1 0)组成的曲线多边形，以及一个由线性环(7 8,10 10,6 14,4 11,7 8)组成的多边形，输出时相对坐标模式关闭，小数点后保留2位精度。", "sql": "SELECT ST_AsSVG('MULTISURFACE( CURVEPOLYGON(CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0), (-1 0,0 0.5,1 0,0 1,-1 0)), ((7 8,10 10,6 14,4 11,7 8)))'::geometry, 0, 2);", "execution_result": [["M -2 0 A 1 1 0 0 0 0 0 A 1 1 0 0 0 2 0 A 2 2 0 0 0 -2 0 Z M -1 0 L 0 -0.5 1 0 0 -1 -1 0 Z M 7 -8 L 10 -10 6 -14 4 -11 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert a composite surface geometry consisting of a curved polygon (composed of the circular string CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0) and the inner ring polygon (-1 0,0 0.5,1 0,0 1,-1 0)) and a standalone polygon (7 8,10 10,6 14,4 11,7 8) into an SVG path string, using relative coordinate mode (parameter 0) with 2 decimal places of precision (parameter 2).", "source": "original", "new_id": 1792}
{"id": 325, "function": "ST_AsSVG", "question": "将复合曲面MULTISURFACE转换为SVG路径字符串，该曲面包含一个曲线多边形（由圆弧CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0)和线性环(-1 0,0 0.5,1 0,0 1,-1 0)组成）以及一个普通多边形((7 8,10 10,6 14,4 11,7 8))，转换时不添加相对移动参数（第二个参数为0），并保留2位小数精度（第三个参数为2）。", "sql": "SELECT ST_AsSVG('MULTISURFACE( CURVEPOLYGON(CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0), (-1 0,0 0.5,1 0,0 1,-1 0)), ((7 8,10 10,6 14,4 11,7 8)))'::geometry, 0, 2);", "execution_result": [["M -2 0 A 1 1 0 0 0 0 0 A 1 1 0 0 0 2 0 A 2 2 0 0 0 -2 0 Z M -1 0 L 0 -0.5 1 0 0 -1 -1 0 Z M 7 -8 L 10 -10 6 -14 4 -11 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert a composite surface geometry consisting of a curved polygon (composed of the circular string CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0) and the inner ring polygon (-1 0,0 0.5,1 0,0 1,-1 0)) and a standalone polygon (7 8,10 10,6 14,4 11,7 8) into an SVG path string, using relative coordinate mode (parameter 0) with 2 decimal places of precision (parameter 2).", "source": "original", "new_id": 1793}
{"id": 325, "function": "ST_AsSVG", "question": "将包含曲线多边形（由圆弧CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0)和内环多边形(-1 0,0 0.5,1 0,0 1,-1 0)组成）以及独立多边形(7 8,10 10,6 14,4 11,7 8)的复合曲面几何体转换为SVG路径字符串，其中相对坐标模式（参数0）且保留2位小数精度（参数2）。", "sql": "SELECT ST_AsSVG('MULTISURFACE( CURVEPOLYGON(CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0), (-1 0,0 0.5,1 0,0 1,-1 0)), ((7 8,10 10,6 14,4 11,7 8)))'::geometry, 0, 2);", "execution_result": [["M -2 0 A 1 1 0 0 0 0 0 A 1 1 0 0 0 2 0 A 2 2 0 0 0 -2 0 Z M -1 0 L 0 -0.5 1 0 0 -1 -1 0 Z M 7 -8 L 10 -10 6 -14 4 -11 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert a composite surface geometry consisting of a curved polygon (composed of the circular string CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0) and the inner ring polygon (-1 0,0 0.5,1 0,0 1,-1 0)) and a standalone polygon (7 8,10 10,6 14,4 11,7 8) into an SVG path string, using relative coordinate mode (parameter 0) with 2 decimal places of precision (parameter 2).", "source": "original", "new_id": 1794}
{"id": 326, "function": "ST_AsSVG", "question": "将顶点坐标为(0 0)、(0 1)、(1 1)、(1 0)、(0 0)的多边形转换为SVG格式。", "sql": "SELECT ST_AsSVG('POLYGON((0 0,0 1,1 1,1 0,0 0))'::geometry);", "execution_result": [["M 0 0 L 0 -1 1 -1 1 0 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object into an SVG path data string output.", "source": "original", "new_id": 1795}
{"id": 326, "function": "ST_AsSVG", "question": "输出由点(0,0)、(0,1)、(1,1)、(1,0)组成的闭合多边形的SVG表示。", "sql": "SELECT ST_AsSVG('POLYGON((0 0,0 1,1 1,1 0,0 0))'::geometry);", "execution_result": [["M 0 0 L 0 -1 1 -1 1 0 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object into an SVG path data string output.", "source": "original", "new_id": 1796}
{"id": 326, "function": "ST_AsSVG", "question": "将顶点坐标为(0 0)、(0 1)、(1 1)、(1 0)、(0 0)的闭合多边形转换为SVG路径数据格式。", "sql": "SELECT ST_AsSVG('POLYGON((0 0,0 1,1 1,1 0,0 0))'::geometry);", "execution_result": [["M 0 0 L 0 -1 1 -1 1 0 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object into an SVG path data string output.", "source": "original", "new_id": 1797}
{"id": 326, "function": "ST_AsSVG", "question": "获取多边形几何(0 0,0 1,1 1,1 0,0 0)的SVG路径数据输出，包含路径的d属性值。", "sql": "SELECT ST_AsSVG('POLYGON((0 0,0 1,1 1,1 0,0 0))'::geometry);", "execution_result": [["M 0 0 L 0 -1 1 -1 1 0 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object into an SVG path data string output.", "source": "original", "new_id": 1798}
{"id": 326, "function": "ST_AsSVG", "question": "以SVG格式输出单位正方形的几何表示。", "sql": "SELECT ST_AsSVG('POLYGON((0 0,0 1,1 1,1 0,0 0))'::geometry);", "execution_result": [["M 0 0 L 0 -1 1 -1 1 0 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object into an SVG path data string output.", "source": "original", "new_id": 1799}
{"id": 326, "function": "ST_AsSVG", "question": "将POLYGON((0 0,0 1,1 1,1 0,0 0))几何对象转换为SVG路径数据字符串输出。", "sql": "SELECT ST_AsSVG('POLYGON((0 0,0 1,1 1,1 0,0 0))'::geometry);", "execution_result": [["M 0 0 L 0 -1 1 -1 1 0 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the POLYGON((0 0,0 1,1 1,1 0,0 0)) geometry object into an SVG path data string output.", "source": "original", "new_id": 1800}
{"id": 327, "function": "ST_AsTWKB", "question": "将点POINT(1 2)与ID值100聚合转换为TWKB二进制格式。", "sql": "SELECT ST_AsTWKB(array_agg(ST_Point(1,2)), array_agg(100)) FROM (VALUES (1)) AS t;", "execution_result": [["BAQByAECBA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Aggregate the point POINT(1 2) with ID value 100 and convert it to TWKB binary format.", "source": "original", "new_id": 1801}
{"id": 328, "function": "ST_AsTWKB", "question": "将LINESTRING(1 1,5 5)这条折线转换为TWKB格式输出。", "sql": "SELECT ST_AsTWKB('LINESTRING(1 1,5 5)'::geometry);", "execution_result": [["AgACAgIICA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Output the TWKB format string of the LINESTRING(1 1,5 5) geometry object.", "source": "original", "new_id": 1802}
{"id": 328, "function": "ST_AsTWKB", "question": "输出连接点(1,1)和点(5,5)的线段的TWKB二进制表示。", "sql": "SELECT ST_AsTWKB('LINESTRING(1 1,5 5)'::geometry);", "execution_result": [["AgACAgIICA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Output the TWKB format string of the LINESTRING(1 1,5 5) geometry object.", "source": "original", "new_id": 1803}
{"id": 328, "function": "ST_AsTWKB", "question": "将LINESTRING类型的几何对象，其坐标点依次为(1 1)和(5 5)，转换为TWKB格式并输出。", "sql": "SELECT ST_AsTWKB('LINESTRING(1 1,5 5)'::geometry);", "execution_result": [["AgACAgIICA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Output the TWKB format string of the LINESTRING(1 1,5 5) geometry object.", "source": "original", "new_id": 1804}
{"id": 328, "function": "ST_AsTWKB", "question": "获取LINESTRING(1 1,5 5)的TWKB二进制输出结果。", "sql": "SELECT ST_AsTWKB('LINESTRING(1 1,5 5)'::geometry);", "execution_result": [["AgACAgIICA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Output the TWKB format string of the LINESTRING(1 1,5 5) geometry object.", "source": "original", "new_id": 1805}
{"id": 328, "function": "ST_AsTWKB", "question": "以TWKB压缩格式输出连接点(1,1)和(5,5)的线段。", "sql": "SELECT ST_AsTWKB('LINESTRING(1 1,5 5)'::geometry);", "execution_result": [["AgACAgIICA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Output the TWKB format string of the LINESTRING(1 1,5 5) geometry object.", "source": "original", "new_id": 1806}
{"id": 328, "function": "ST_AsTWKB", "question": "输出LINESTRING(1 1,5 5)几何对象的TWKB格式字符串。", "sql": "SELECT ST_AsTWKB('LINESTRING(1 1,5 5)'::geometry);", "execution_result": [["AgACAgIICA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Output the TWKB format string of the LINESTRING(1 1,5 5) geometry object.", "source": "original", "new_id": 1807}
{"id": 329, "function": "ST_AsX3D", "question": "将POLYHEDRALSURFACE几何体（由6个面组成，具体坐标分别为：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0))、((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))、((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0))、((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0))、((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0))、((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))）转换为X3D格式，并嵌入到X3D文档模板中，其中Material的emissiveColor属性设置为蓝色（0 0 1），最终输出别名为x3ddoc的XML文档。", "sql": "SELECT '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor=''0 0 1''/> </Appearance > ' || ST_AsX3D( ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) || '</Shape> </Transform> </Scene> </X3D >' AS x3ddoc;", "execution_result": [["<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor='0 0 1'/> </Appearance > <IndexedFaceSet convex='false'  coordIndex='0 1 2 3 -1 4 5 6 7 -1 8 9 10 11 -1 12 13 14 15 -1 16 17 18 19 -1 20 21 22 23'><Coordinate point='0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 1' /></IndexedFaceSet></Shape> </Transform> </Scene> </X3D >"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate an X3D 3.0-compliant XML document containing a unit cube 3D model (vertex coordinates: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))). The document must include full XML declaration, DOCTYPE declaration, and Scene node, with the cube rendered using blue (0 0 1) emissive material.", "source": "original", "new_id": 1808}
{"id": 329, "function": "ST_AsX3D", "question": "将POLYHEDRALSURFACE几何体（由6个面组成：面1顶点(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，面2顶点(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，面3顶点(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，面4顶点(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，面5顶点(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，面6顶点(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)）通过ST_GeomFromEWKT函数转换为几何对象，再使用ST_AsX3D函数转换为X3D格式，嵌入到XML文档中，其中Material的emissiveColor属性设置为蓝色(0 0 1)，最终输出别名为x3ddoc的X3D文档。", "sql": "SELECT '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor=''0 0 1''/> </Appearance > ' || ST_AsX3D( ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) || '</Shape> </Transform> </Scene> </X3D >' AS x3ddoc;", "execution_result": [["<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor='0 0 1'/> </Appearance > <IndexedFaceSet convex='false'  coordIndex='0 1 2 3 -1 4 5 6 7 -1 8 9 10 11 -1 12 13 14 15 -1 16 17 18 19 -1 20 21 22 23'><Coordinate point='0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 1' /></IndexedFaceSet></Shape> </Transform> </Scene> </X3D >"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate an X3D 3.0-compliant XML document containing a unit cube 3D model (vertex coordinates: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))). The document must include full XML declaration, DOCTYPE declaration, and Scene node, with the cube rendered using blue (0 0 1) emissive material.", "source": "original", "new_id": 1809}
{"id": 329, "function": "ST_AsX3D", "question": "将POLYHEDRALSURFACE几何体（由6个面组成：第一个面顶点为(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个面顶点为(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个面顶点为(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个面顶点为(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个面顶点为(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个面顶点为(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)）转换为X3D格式，并嵌入到完整的X3D文档结构中，其中Material的emissiveColor属性设置为蓝色(0 0 1)，最终输出别名为x3ddoc的XML文档。", "sql": "SELECT '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor=''0 0 1''/> </Appearance > ' || ST_AsX3D( ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) || '</Shape> </Transform> </Scene> </X3D >' AS x3ddoc;", "execution_result": [["<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor='0 0 1'/> </Appearance > <IndexedFaceSet convex='false'  coordIndex='0 1 2 3 -1 4 5 6 7 -1 8 9 10 11 -1 12 13 14 15 -1 16 17 18 19 -1 20 21 22 23'><Coordinate point='0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 1' /></IndexedFaceSet></Shape> </Transform> </Scene> </X3D >"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate an X3D 3.0-compliant XML document containing a unit cube 3D model (vertex coordinates: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))). The document must include full XML declaration, DOCTYPE declaration, and Scene node, with the cube rendered using blue (0 0 1) emissive material.", "source": "original", "new_id": 1810}
{"id": 329, "function": "ST_AsX3D", "question": "输出一个X3D格式的文档，其中包含一个由POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )定义的立方体几何体，并设置其材质发射颜色为蓝色(0 0 1)。", "sql": "SELECT '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor=''0 0 1''/> </Appearance > ' || ST_AsX3D( ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) || '</Shape> </Transform> </Scene> </X3D >' AS x3ddoc;", "execution_result": [["<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor='0 0 1'/> </Appearance > <IndexedFaceSet convex='false'  coordIndex='0 1 2 3 -1 4 5 6 7 -1 8 9 10 11 -1 12 13 14 15 -1 16 17 18 19 -1 20 21 22 23'><Coordinate point='0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 1' /></IndexedFaceSet></Shape> </Transform> </Scene> </X3D >"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate an X3D 3.0-compliant XML document containing a unit cube 3D model (vertex coordinates: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))). The document must include full XML declaration, DOCTYPE declaration, and Scene node, with the cube rendered using blue (0 0 1) emissive material.", "source": "original", "new_id": 1811}
{"id": 329, "function": "ST_AsX3D", "question": "输出一个完整的X3D XML文档，其中包含一个由6个面组成的立方体POLYHEDRALSURFACE几何体(顶点坐标分别为：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))，并为其添加了蓝色(0 0 1)的发光材质外观。", "sql": "SELECT '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor=''0 0 1''/> </Appearance > ' || ST_AsX3D( ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) || '</Shape> </Transform> </Scene> </X3D >' AS x3ddoc;", "execution_result": [["<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor='0 0 1'/> </Appearance > <IndexedFaceSet convex='false'  coordIndex='0 1 2 3 -1 4 5 6 7 -1 8 9 10 11 -1 12 13 14 15 -1 16 17 18 19 -1 20 21 22 23'><Coordinate point='0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 1' /></IndexedFaceSet></Shape> </Transform> </Scene> </X3D >"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate an X3D 3.0-compliant XML document containing a unit cube 3D model (vertex coordinates: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))). The document must include full XML declaration, DOCTYPE declaration, and Scene node, with the cube rendered using blue (0 0 1) emissive material.", "source": "original", "new_id": 1812}
{"id": 329, "function": "ST_AsX3D", "question": "输出一个符合X3D 3.0标准的XML文档，其中包含一个单位立方体的三维模型(顶点坐标为：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))，文档包含完整的XML声明、DOCTYPE声明和Scene场景节点，且立方体使用蓝色(0 0 1)发光材质渲染。", "sql": "SELECT '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor=''0 0 1''/> </Appearance > ' || ST_AsX3D( ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) || '</Shape> </Transform> </Scene> </X3D >' AS x3ddoc;", "execution_result": [["<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor='0 0 1'/> </Appearance > <IndexedFaceSet convex='false'  coordIndex='0 1 2 3 -1 4 5 6 7 -1 8 9 10 11 -1 12 13 14 15 -1 16 17 18 19 -1 20 21 22 23'><Coordinate point='0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 1' /></IndexedFaceSet></Shape> </Transform> </Scene> </X3D >"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate an X3D 3.0-compliant XML document containing a unit cube 3D model (vertex coordinates: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))). The document must include full XML declaration, DOCTYPE declaration, and Scene node, with the cube rendered using blue (0 0 1) emissive material.", "source": "original", "new_id": 1813}
{"id": 331, "function": "ST_AsX3D", "question": "将包含两个三角形面片的TIN（第一个面片顶点为(0,0,0)、(0,0,1)、(0,1,0)，第二个面片顶点为(0,0,0)、(0,1,0)、(1,1,0)）转换为X3D格式输出。", "sql": "SELECT ST_AsX3D(ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )')) AS x3dfrag;", "execution_result": [["<IndexedTriangleSet  index='0 1 2 3 4 5'><Coordinate point='0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0'/></IndexedTriangleSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the TIN (Triangulated Irregular Network) into an X3D format string output. The TIN consists of two triangular patches: the first patch has vertices at 0 0 0, 0 0 1, 0 1 0, and the second patch has vertices at 0 0 0, 0 1 0, 1 1 0. Return the 3D geometry fragment in X3D format.", "source": "original", "new_id": 1814}
{"id": 331, "function": "ST_AsX3D", "question": "将EWKT格式定义的TIN（包含两个三角形：(0 0 0, 0 0 1, 0 1 0)和(0 0 0, 0 1 0, 1 1 0)）转换为X3D片段。", "sql": "SELECT ST_AsX3D(ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )')) AS x3dfrag;", "execution_result": [["<IndexedTriangleSet  index='0 1 2 3 4 5'><Coordinate point='0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0'/></IndexedTriangleSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the TIN (Triangulated Irregular Network) into an X3D format string output. The TIN consists of two triangular patches: the first patch has vertices at 0 0 0, 0 0 1, 0 1 0, and the second patch has vertices at 0 0 0, 0 1 0, 1 1 0. Return the 3D geometry fragment in X3D format.", "source": "original", "new_id": 1815}
{"id": 331, "function": "ST_AsX3D", "question": "将EWKT格式的不规则三角网TIN转换为X3D格式，该TIN由两个三角形面组成：第一个三角形顶点坐标为(0 0 0)、(0 0 1)、(0 1 0)，第二个三角形顶点坐标为(0 0 0)、(0 1 0)、(1 1 0)，两个三角形均以起点作为闭合点。", "sql": "SELECT ST_AsX3D(ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )')) AS x3dfrag;", "execution_result": [["<IndexedTriangleSet  index='0 1 2 3 4 5'><Coordinate point='0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0'/></IndexedTriangleSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the TIN (Triangulated Irregular Network) into an X3D format string output. The TIN consists of two triangular patches: the first patch has vertices at 0 0 0, 0 0 1, 0 1 0, and the second patch has vertices at 0 0 0, 0 1 0, 1 1 0. Return the 3D geometry fragment in X3D format.", "source": "original", "new_id": 1816}
{"id": 331, "function": "ST_AsX3D", "question": "输出由两个三角形面片（(0 0 0, 0 0 1, 0 1 0)和(0 0 0, 0 1 0, 1 1 0)）组成的TIN几何对象的X3D格式表示。", "sql": "SELECT ST_AsX3D(ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )')) AS x3dfrag;", "execution_result": [["<IndexedTriangleSet  index='0 1 2 3 4 5'><Coordinate point='0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0'/></IndexedTriangleSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the TIN (Triangulated Irregular Network) into an X3D format string output. The TIN consists of two triangular patches: the first patch has vertices at 0 0 0, 0 0 1, 0 1 0, and the second patch has vertices at 0 0 0, 0 1 0, 1 1 0. Return the 3D geometry fragment in X3D format.", "source": "original", "new_id": 1817}
{"id": 331, "function": "ST_AsX3D", "question": "将包含两个三角形面片：(0 0 0, 0 0 1, 0 1 0)和(0 0 0, 0 1 0, 1 1 0)的TIN几何体转换为X3D格式字符串输出。", "sql": "SELECT ST_AsX3D(ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )')) AS x3dfrag;", "execution_result": [["<IndexedTriangleSet  index='0 1 2 3 4 5'><Coordinate point='0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0'/></IndexedTriangleSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the TIN (Triangulated Irregular Network) into an X3D format string output. The TIN consists of two triangular patches: the first patch has vertices at 0 0 0, 0 0 1, 0 1 0, and the second patch has vertices at 0 0 0, 0 1 0, 1 1 0. Return the 3D geometry fragment in X3D format.", "source": "original", "new_id": 1818}
{"id": 331, "function": "ST_AsX3D", "question": "将TIN不规则三角网转换为X3D格式字符串输出，该TIN由两个三角形面片组成：第一个面片顶点为0 0 0、0 0 1、0 1 0，第二个面片顶点为0 0 0、0 1 0、1 1 0，要求返回X3D格式的三维几何体片段。", "sql": "SELECT ST_AsX3D(ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )')) AS x3dfrag;", "execution_result": [["<IndexedTriangleSet  index='0 1 2 3 4 5'><Coordinate point='0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0'/></IndexedTriangleSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the TIN (Triangulated Irregular Network) into an X3D format string output. The TIN consists of two triangular patches: the first patch has vertices at 0 0 0, 0 0 1, 0 1 0, and the second patch has vertices at 0 0 0, 0 1 0, 1 1 0. Return the 3D geometry fragment in X3D format.", "source": "original", "new_id": 1819}
{"id": 333, "function": "ST_AsX3D", "question": "将包含两条三维线字符串（第一条坐标链为(20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10)，第二条为(12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10)）的多线字符串转换为X3D格式。", "sql": "SELECT ST_AsX3D( ST_GeomFromEWKT('MULTILINESTRING((20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10))') ) AS x3dfrag;", "execution_result": [["<IndexedLineSet  coordIndex='0 1 2 3 4 5 6 7 0 -1 8 9 10 11 12 13 14 15 8'><Coordinate point='20 0 10 16 -12 10 0 -16 10 -12 -12 10 -20 0 10 -12 16 10 0 24 10 16 16 10 12 0 10 8 8 10 0 12 10 -8 8 10 -8 0 10 -8 -4 10 0 -8 10 8 -4 10 ' /></IndexedLineSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKT-formatted geometry object containing two 3D multi-line strings into an X3D format string output. The first multi-line string consists of nine 3D points (20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), and the second multi-line string consists of nine 3D points (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10).", "source": "original", "new_id": 1820}
{"id": 333, "function": "ST_AsX3D", "question": "将MULTILINESTRING类型的三维几何对象（包含两条闭合线字符串，坐标是(20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10)和(12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10)）输出为X3D片段。", "sql": "SELECT ST_AsX3D( ST_GeomFromEWKT('MULTILINESTRING((20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10))') ) AS x3dfrag;", "execution_result": [["<IndexedLineSet  coordIndex='0 1 2 3 4 5 6 7 0 -1 8 9 10 11 12 13 14 15 8'><Coordinate point='20 0 10 16 -12 10 0 -16 10 -12 -12 10 -20 0 10 -12 16 10 0 24 10 16 16 10 12 0 10 8 8 10 0 12 10 -8 8 10 -8 0 10 -8 -4 10 0 -8 10 8 -4 10 ' /></IndexedLineSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKT-formatted geometry object containing two 3D multi-line strings into an X3D format string output. The first multi-line string consists of nine 3D points (20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), and the second multi-line string consists of nine 3D points (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10).", "source": "original", "new_id": 1821}
{"id": 333, "function": "ST_AsX3D", "question": "将包含两条三维多线段的EWKT格式几何对象转换为X3D格式输出，第一条多线段由9个三维点组成（坐标依次为20 0 10、16 -12 10、0 -16 10、-12 -12 10、-20 0 10、-12 16 10、0 24 10、16 16 10、20 0 10），第二条多线段由9个三维点组成（坐标依次为12 0 10、8 8 10、0 12 10、-8 8 10、-8 0 10、-8 -4 10、0 -8 10、8 -4 10、12 0 10）。", "sql": "SELECT ST_AsX3D( ST_GeomFromEWKT('MULTILINESTRING((20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10))') ) AS x3dfrag;", "execution_result": [["<IndexedLineSet  coordIndex='0 1 2 3 4 5 6 7 0 -1 8 9 10 11 12 13 14 15 8'><Coordinate point='20 0 10 16 -12 10 0 -16 10 -12 -12 10 -20 0 10 -12 16 10 0 24 10 16 16 10 12 0 10 8 8 10 0 12 10 -8 8 10 -8 0 10 -8 -4 10 0 -8 10 8 -4 10 ' /></IndexedLineSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKT-formatted geometry object containing two 3D multi-line strings into an X3D format string output. The first multi-line string consists of nine 3D points (20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), and the second multi-line string consists of nine 3D points (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10).", "source": "original", "new_id": 1822}
{"id": 333, "function": "ST_AsX3D", "question": "以X3D格式返回包含两条三维线字符串（具体坐标为(20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10)和(12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10)）的几何对象的可视化数据。", "sql": "SELECT ST_AsX3D( ST_GeomFromEWKT('MULTILINESTRING((20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10))') ) AS x3dfrag;", "execution_result": [["<IndexedLineSet  coordIndex='0 1 2 3 4 5 6 7 0 -1 8 9 10 11 12 13 14 15 8'><Coordinate point='20 0 10 16 -12 10 0 -16 10 -12 -12 10 -20 0 10 -12 16 10 0 24 10 16 16 10 12 0 10 8 8 10 0 12 10 -8 8 10 -8 0 10 -8 -4 10 0 -8 10 8 -4 10 ' /></IndexedLineSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKT-formatted geometry object containing two 3D multi-line strings into an X3D format string output. The first multi-line string consists of nine 3D points (20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), and the second multi-line string consists of nine 3D points (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10).", "source": "original", "new_id": 1823}
{"id": 333, "function": "ST_AsX3D", "question": "生成三维多线字符串几何（包含两条星形路径，坐标为(20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10)和(12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10)）的X3D格式字符串。", "sql": "SELECT ST_AsX3D( ST_GeomFromEWKT('MULTILINESTRING((20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10))') ) AS x3dfrag;", "execution_result": [["<IndexedLineSet  coordIndex='0 1 2 3 4 5 6 7 0 -1 8 9 10 11 12 13 14 15 8'><Coordinate point='20 0 10 16 -12 10 0 -16 10 -12 -12 10 -20 0 10 -12 16 10 0 24 10 16 16 10 12 0 10 8 8 10 0 12 10 -8 8 10 -8 0 10 -8 -4 10 0 -8 10 8 -4 10 ' /></IndexedLineSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKT-formatted geometry object containing two 3D multi-line strings into an X3D format string output. The first multi-line string consists of nine 3D points (20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), and the second multi-line string consists of nine 3D points (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10).", "source": "original", "new_id": 1824}
{"id": 333, "function": "ST_AsX3D", "question": "将包含两条三维多线段的EWKT格式几何对象转换为X3D格式字符串输出，第一条多线段由9个三维点组成（20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10），第二条多线段由9个三维点组成（12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10）。", "sql": "SELECT ST_AsX3D( ST_GeomFromEWKT('MULTILINESTRING((20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10))') ) AS x3dfrag;", "execution_result": [["<IndexedLineSet  coordIndex='0 1 2 3 4 5 6 7 0 -1 8 9 10 11 12 13 14 15 8'><Coordinate point='20 0 10 16 -12 10 0 -16 10 -12 -12 10 -20 0 10 -12 16 10 0 24 10 16 16 10 12 0 10 8 8 10 0 12 10 -8 8 10 -8 0 10 -8 -4 10 0 -8 10 8 -4 10 ' /></IndexedLineSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKT-formatted geometry object containing two 3D multi-line strings into an X3D format string output. The first multi-line string consists of nine 3D points (20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), and the second multi-line string consists of nine 3D points (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10).", "source": "original", "new_id": 1825}
{"id": 334, "function": "ST_GeoHash", "question": "计算坐标为(-126,48)的二维点的GeoHash值。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48) );", "execution_result": [["c0w3hf1s70w3hf1s70w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string corresponding to the geographic location with coordinates POINT(-126 48).", "source": "original", "new_id": 1826}
{"id": 334, "function": "ST_GeoHash", "question": "获取经度-126度、纬度48度的点位置的GeoHash编码。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48) );", "execution_result": [["c0w3hf1s70w3hf1s70w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string corresponding to the geographic location with coordinates POINT(-126 48).", "source": "original", "new_id": 1827}
{"id": 334, "function": "ST_GeoHash", "question": "计算经度为-126、纬度为48的二维点POINT(-126 48)的GeoHash编码值。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48) );", "execution_result": [["c0w3hf1s70w3hf1s70w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string corresponding to the geographic location with coordinates POINT(-126 48).", "source": "original", "new_id": 1828}
{"id": 334, "function": "ST_GeoHash", "question": "输出坐标为(-126,48)的点的GeoHash字符串结果。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48) );", "execution_result": [["c0w3hf1s70w3hf1s70w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string corresponding to the geographic location with coordinates POINT(-126 48).", "source": "original", "new_id": 1829}
{"id": 334, "function": "ST_GeoHash", "question": "返回经度-126纬度48的位置对应的Base32编码的GeoHash值。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48) );", "execution_result": [["c0w3hf1s70w3hf1s70w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string corresponding to the geographic location with coordinates POINT(-126 48).", "source": "original", "new_id": 1830}
{"id": 334, "function": "ST_GeoHash", "question": "输出坐标为POINT(-126 48)的地理位置对应的GeoHash编码字符串。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48) );", "execution_result": [["c0w3hf1s70w3hf1s70w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string corresponding to the geographic location with coordinates POINT(-126 48).", "source": "original", "new_id": 1831}
{"id": 335, "function": "ST_GeoHash", "question": "计算坐标为(-126,48)的二维点对象的5位GeoHash编码。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48), 5);", "execution_result": [["c0w3h"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string result of the 2D point POINT(-126 48) with a precision of 5.", "source": "original", "new_id": 1832}
{"id": 335, "function": "ST_GeoHash", "question": "对经度-126、纬度48的点进行精度为5的GeoHash编码。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48), 5);", "execution_result": [["c0w3h"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string result of the 2D point POINT(-126 48) with a precision of 5.", "source": "original", "new_id": 1833}
{"id": 335, "function": "ST_GeoHash", "question": "计算经度-126、纬度48的二维点POINT(-126 48)的GeoHash值，精度参数设置为5个字符长度。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48), 5);", "execution_result": [["c0w3h"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string result of the 2D point POINT(-126 48) with a precision of 5.", "source": "original", "new_id": 1834}
{"id": 335, "function": "ST_GeoHash", "question": "输出坐标为(-126,48)的点的5位GeoHash字符串。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48), 5);", "execution_result": [["c0w3h"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string result of the 2D point POINT(-126 48) with a precision of 5.", "source": "original", "new_id": 1835}
{"id": 335, "function": "ST_GeoHash", "question": "返回点(-126,48)的5字符GeoHash编码结果。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48), 5);", "execution_result": [["c0w3h"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string result of the 2D point POINT(-126 48) with a precision of 5.", "source": "original", "new_id": 1836}
{"id": 335, "function": "ST_GeoHash", "question": "输出坐标为POINT(-126 48)的二维点经过精度为5的GeoHash编码后的字符串结果。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48), 5);", "execution_result": [["c0w3h"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string result of the 2D point POINT(-126 48) with a precision of 5.", "source": "original", "new_id": 1837}
{"id": 336, "function": "ST_GeoHash", "question": "计算从点(-126 48)到点(-126.1 48.1)的线段的GeoHash编码。", "sql": "SELECT ST_GeoHash('LINESTRING(-126 48, -126.1 48.1)'::geometry);", "execution_result": [["c0w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string for LINESTRING(-126 48, -126.1 48.1).", "source": "original", "new_id": 1838}
{"id": 336, "function": "ST_GeoHash", "question": "获取LINESTRING(-126 48, -126.1 48.1)这条折线的地理哈希字符串。", "sql": "SELECT ST_GeoHash('LINESTRING(-126 48, -126.1 48.1)'::geometry);", "execution_result": [["c0w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string for LINESTRING(-126 48, -126.1 48.1).", "source": "original", "new_id": 1839}
{"id": 336, "function": "ST_GeoHash", "question": "计算由坐标点(-126 48)和(-126.1 48.1)构成的LINESTRING类型线段的GeoHash编码值。", "sql": "SELECT ST_GeoHash('LINESTRING(-126 48, -126.1 48.1)'::geometry);", "execution_result": [["c0w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string for LINESTRING(-126 48, -126.1 48.1).", "source": "original", "new_id": 1840}
{"id": 336, "function": "ST_GeoHash", "question": "输出LINESTRING(-126 48, -126.1 48.1)的Base32编码的地理哈希字符串。", "sql": "SELECT ST_GeoHash('LINESTRING(-126 48, -126.1 48.1)'::geometry);", "execution_result": [["c0w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string for LINESTRING(-126 48, -126.1 48.1).", "source": "original", "new_id": 1841}
{"id": 336, "function": "ST_GeoHash", "question": "返回线要素LINESTRING(-126 48, -126.1 48.1)的GeoHash编码结果。", "sql": "SELECT ST_GeoHash('LINESTRING(-126 48, -126.1 48.1)'::geometry);", "execution_result": [["c0w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string for LINESTRING(-126 48, -126.1 48.1).", "source": "original", "new_id": 1842}
{"id": 336, "function": "ST_GeoHash", "question": "输出LINESTRING(-126 48, -126.1 48.1)的GeoHash编码字符串。", "sql": "SELECT ST_GeoHash('LINESTRING(-126 48, -126.1 48.1)'::geometry);", "execution_result": [["c0w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the GeoHash encoded string for LINESTRING(-126 48, -126.1 48.1).", "source": "original", "new_id": 1843}
{"id": 337, "function": "ST_3DIntersects", "question": "判断三维点POINT(0 0 2)与三维线段LINESTRING(0 0 1, 0 2 3)在三维空间和二维平面的相交情况。", "sql": "SELECT ST_3DIntersects(pt, line), ST_Intersects(pt, line) FROM (SELECT 'POINT(0 0 2)'::geometry AS pt, 'LINESTRING (0 0 1, 0 2 3)'::geometry AS line) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check the intersection between 3D point POINT(0 0 2) and 3D line LINESTRING(0 0 1, 0 2 3) in both 3D space and 2D plane, returning two boolean values indicating 3D intersection and 2D intersection respectively.", "source": "original", "new_id": 1844}
{"id": 337, "function": "ST_3DIntersects", "question": "检测Z坐标为2的点(0,0,2)与端点Z坐标为1和3的线段(0,0,1)-(0,2,3)的空间关系。", "sql": "SELECT ST_3DIntersects(pt, line), ST_Intersects(pt, line) FROM (SELECT 'POINT(0 0 2)'::geometry AS pt, 'LINESTRING (0 0 1, 0 2 3)'::geometry AS line) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check the intersection between 3D point POINT(0 0 2) and 3D line LINESTRING(0 0 1, 0 2 3) in both 3D space and 2D plane, returning two boolean values indicating 3D intersection and 2D intersection respectively.", "source": "original", "new_id": 1845}
{"id": 337, "function": "ST_3DIntersects", "question": "在三维空间和二维平面分别判断：三维点POINT(0 0 2)与三维线段LINESTRING(0 0 1, 0 2 3)是否相交？其中线段由点(0 0 1)和点(0 2 3)构成，需同时返回ST_3DIntersects和ST_Intersects函数的检测结果。", "sql": "SELECT ST_3DIntersects(pt, line), ST_Intersects(pt, line) FROM (SELECT 'POINT(0 0 2)'::geometry AS pt, 'LINESTRING (0 0 1, 0 2 3)'::geometry AS line) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check the intersection between 3D point POINT(0 0 2) and 3D line LINESTRING(0 0 1, 0 2 3) in both 3D space and 2D plane, returning two boolean values indicating 3D intersection and 2D intersection respectively.", "source": "original", "new_id": 1846}
{"id": 337, "function": "ST_3DIntersects", "question": "输出三维点POINT(0 0 2)与线段LINESTRING(0 0 1, 0 2 3)的三维和二维相交检测结果，返回布尔值。", "sql": "SELECT ST_3DIntersects(pt, line), ST_Intersects(pt, line) FROM (SELECT 'POINT(0 0 2)'::geometry AS pt, 'LINESTRING (0 0 1, 0 2 3)'::geometry AS line) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check the intersection between 3D point POINT(0 0 2) and 3D line LINESTRING(0 0 1, 0 2 3) in both 3D space and 2D plane, returning two boolean values indicating 3D intersection and 2D intersection respectively.", "source": "original", "new_id": 1847}
{"id": 337, "function": "ST_3DIntersects", "question": "返回两个布尔值，分别表示POINT(0 0 2)在三维空间和二维平面是否与LINESTRING(0 0 1, 0 2 3)相交。", "sql": "SELECT ST_3DIntersects(pt, line), ST_Intersects(pt, line) FROM (SELECT 'POINT(0 0 2)'::geometry AS pt, 'LINESTRING (0 0 1, 0 2 3)'::geometry AS line) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check the intersection between 3D point POINT(0 0 2) and 3D line LINESTRING(0 0 1, 0 2 3) in both 3D space and 2D plane, returning two boolean values indicating 3D intersection and 2D intersection respectively.", "source": "original", "new_id": 1848}
{"id": 337, "function": "ST_3DIntersects", "question": "输出三维点POINT(0 0 2)与三维线段LINESTRING(0 0 1, 0 2 3)在三维空间和二维平面上的相交检测结果，要求返回两个布尔值分别表示三维相交和二维相交情况。", "sql": "SELECT ST_3DIntersects(pt, line), ST_Intersects(pt, line) FROM (SELECT 'POINT(0 0 2)'::geometry AS pt, 'LINESTRING (0 0 1, 0 2 3)'::geometry AS line) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check the intersection between 3D point POINT(0 0 2) and 3D line LINESTRING(0 0 1, 0 2 3) in both 3D space and 2D plane, returning two boolean values indicating 3D intersection and 2D intersection respectively.", "source": "original", "new_id": 1849}
{"id": 338, "function": "ST_3DIntersects", "question": "判断由顶点(0 0 0)、(1 0 0)、(0 1 0)构成的三维三角网与位于(.1 .1 0)的三维点是否相交。", "sql": "SELECT ST_3DIntersects('TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))'::geometry, 'POINT(.1 .1 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 3D irregular TIN (((0 0 0,1 0 0,0 1 0,0 0 0))) intersects with the 3D point POINT(.1 .1 0).", "source": "original", "new_id": 1850}
{"id": 338, "function": "ST_3DIntersects", "question": "检测TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))与POINT(.1 .1 0)这两个具体几何对象的三维空间关系。", "sql": "SELECT ST_3DIntersects('TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))'::geometry, 'POINT(.1 .1 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 3D irregular TIN (((0 0 0,1 0 0,0 1 0,0 0 0))) intersects with the 3D point POINT(.1 .1 0).", "source": "original", "new_id": 1851}
{"id": 338, "function": "ST_3DIntersects", "question": "判断三维不规则三角网TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))与三维点POINT(.1 .1 0)在三维空间中是否相交。", "sql": "SELECT ST_3DIntersects('TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))'::geometry, 'POINT(.1 .1 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 3D irregular TIN (((0 0 0,1 0 0,0 1 0,0 0 0))) intersects with the 3D point POINT(.1 .1 0).", "source": "original", "new_id": 1852}
{"id": 338, "function": "ST_3DIntersects", "question": "输出TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))与POINT(.1 .1 0)的三维相交检测结果（布尔值）。", "sql": "SELECT ST_3DIntersects('TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))'::geometry, 'POINT(.1 .1 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 3D irregular TIN (((0 0 0,1 0 0,0 1 0,0 0 0))) intersects with the 3D point POINT(.1 .1 0).", "source": "original", "new_id": 1853}
{"id": 338, "function": "ST_3DIntersects", "question": "输出三维不规则三角网TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))与三维点POINT(.1 .1 0)是否相交的布尔判断结果。", "sql": "SELECT ST_3DIntersects('TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))'::geometry, 'POINT(.1 .1 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 3D irregular TIN (((0 0 0,1 0 0,0 1 0,0 0 0))) intersects with the 3D point POINT(.1 .1 0).", "source": "original", "new_id": 1854}
{"id": 338, "function": "ST_3DIntersects", "question": "输出三维不规则三角网TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))与三维点POINT(.1 .1 0)是否相交的布尔判断结果。", "sql": "SELECT ST_3DIntersects('TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))'::geometry, 'POINT(.1 .1 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a boolean result indicating whether the 3D irregular TIN (((0 0 0,1 0 0,0 1 0,0 0 0))) intersects with the 3D point POINT(.1 .1 0).", "source": "original", "new_id": 1855}
{"id": 339, "function": "ST_Contains", "question": "以POINT(1 2)为中心创建半径10和20的两个缓冲区smallc和bigc，测试smallc是否包含bigc、bigc是否包含smallc、bigc是否包含两者的并集、bigc是否等于并集、bigc是否覆盖其外环、bigc是否包含其外环。", "sql": "SELECT ST_Contains(smallc, bigc) AS smallcontainsbig, ST_Contains(bigc,smallc) AS bigcontainssmall, ST_Contains(bigc, ST_Union(smallc, bigc)) AS bigcontainsunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 22) AS bigc) AS foo;", "execution_result": [[false, true, true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create two buffers, smallc and bigc, with radii 10 and 20 respectively, centered at POINT(1 2). Test whether smallc contains bigc, whether bigc contains smallc, whether bigc contains their union, whether bigc equals the union, whether bigc covers its exterior ring, and whether bigc contains its exterior ring.", "source": "original", "new_id": 1856}
{"id": 339, "function": "ST_Contains", "question": "对中心在(1,2)的10单位半径圆和20单位半径圆进行六种空间关系测试，测试小圆是否包含大圆、大圆是否包含小圆、大圆是否包含两者的并集、大圆是否等于并集、大圆是否覆盖其外环、大圆是否包含其外环。", "sql": "SELECT ST_Contains(smallc, bigc) AS smallcontainsbig, ST_Contains(bigc,smallc) AS bigcontainssmall, ST_Contains(bigc, ST_Union(smallc, bigc)) AS bigcontainsunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 23) AS bigc) AS foo;", "execution_result": [[false, true, true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Perform six spatial relationship tests on a small circle with a 10-unit radius and a large circle with a 20-unit radius centered at (1,2): test whether the small circle contains the large circle, whether the large circle contains the small one, whether the large circle contains their union, whether the large circle equals their union, whether the large circle covers its exterior ring, and whether the large circle contains its exterior ring.", "source": "original", "new_id": 1857}
{"id": 339, "function": "ST_Contains", "question": "对于以POINT(1 2)为中心点创建的缓冲区几何对象（其中smallc是半径为10的缓冲区，bigc是半径为20的缓冲区），请执行以下空间关系判断：1) smallc是否包含bigc；2) bigc是否包含smallc；3) bigc是否包含smallc和bigc的并集；4) bigc是否等于smallc和bigc的并集；5) bigc是否覆盖其自身的外环；6) bigc是否包含其自身的外环。", "sql": "SELECT ST_Contains(smallc, bigc) AS smallcontainsbig, ST_Contains(bigc,smallc) AS bigcontainssmall, ST_Contains(bigc, ST_Union(smallc, bigc)) AS bigcontainsunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[false, true, true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the following 6 boolean results: 1) Check if the buffer smallc (radius 10) contains the buffer bigc (radius 20); 2) Check if bigc contains smallc; 3) Check if bigc contains the union of smallc and bigc; 4) Check if bigc is equal to the union of smallc and bigc; 5) Check if bigc covers its own exterior ring; 6) Check if bigc contains its own exterior ring. All buffers are generated centered at POINT(1 2).", "source": "original", "new_id": 1858}
{"id": 339, "function": "ST_Contains", "question": "对中心在(1,2)的10单位半径圆和20单位半径圆进行六种空间关系测试，输出六个布尔值，分别表示：小圆包含大圆、大圆包含小圆、大圆包含并集、大圆等于并集、大圆覆盖外环、大圆包含外环的空间关系判断结果。", "sql": "SELECT ST_Contains(smallc, bigc) AS smallcontainsbig, ST_Contains(bigc,smallc) AS bigcontainssmall, ST_Contains(bigc, ST_Union(smallc, bigc)) AS bigcontainsunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 29) AS bigc) AS foo;", "execution_result": [[false, true, true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Perform spatial relationship tests between a 10-unit radius circle centered at (1,2) and a 20-unit radius circle centered at the same point, outputting six boolean values representing: the small circle contains the large circle, the large circle contains the small circle, the large circle contains the union, the large circle equals the union, the large circle covers the outer ring, and the large circle contains the outer ring.", "source": "original", "new_id": 1859}
{"id": 339, "function": "ST_Contains", "question": "输出以下六项布尔值结果：1) 判断半径为10的缓冲区smallc是否包含半径为20的缓冲区bigc；2) 判断bigc是否包含smallc；3) 判断bigc是否包含smallc和bigc的并集；4) 判断bigc是否等于smallc和bigc的并集；5) 判断bigc是否覆盖其自身的外环；6) 判断bigc是否包含其自身的外环。其中所有缓冲区均以POINT(1 2)为中心点生成。", "sql": "SELECT ST_Contains(smallc, bigc) AS smallcontainsbig, ST_Contains(bigc,smallc) AS bigcontainssmall, ST_Contains(bigc, ST_Union(smallc, bigc)) AS bigcontainsunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[false, true, true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the following 6 boolean results: 1) Check if the buffer smallc (radius 10) contains the buffer bigc (radius 20); 2) Check if bigc contains smallc; 3) Check if bigc contains the union of smallc and bigc; 4) Check if bigc is equal to the union of smallc and bigc; 5) Check if bigc covers its own exterior ring; 6) Check if bigc contains its own exterior ring. All buffers are generated centered at POINT(1 2).", "source": "original", "new_id": 1860}
{"id": 339, "function": "ST_Contains", "question": "输出以下6个布尔值结果：1) 判断半径为10的缓冲区smallc是否包含半径为20的缓冲区bigc；2) 判断bigc是否包含smallc；3) 判断bigc是否包含smallc和bigc的并集；4) 判断bigc是否等于smallc和bigc的并集；5) 判断bigc是否覆盖其自身的外环；6) 判断bigc是否包含其自身的外环。所有缓冲区均以POINT(1 2)为中心点生成。", "sql": "SELECT ST_Contains(smallc, bigc) AS smallcontainsbig, ST_Contains(bigc,smallc) AS bigcontainssmall, ST_Contains(bigc, ST_Union(smallc, bigc)) AS bigcontainsunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[false, true, true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the following 6 boolean results: 1) Check if the buffer smallc (radius 10) contains the buffer bigc (radius 20); 2) Check if bigc contains smallc; 3) Check if bigc contains the union of smallc and bigc; 4) Check if bigc is equal to the union of smallc and bigc; 5) Check if bigc covers its own exterior ring; 6) Check if bigc contains its own exterior ring. All buffers are generated centered at POINT(1 2).", "source": "original", "new_id": 1861}
{"id": 340, "function": "ST_Contains", "question": "对缓冲区（中心点(1,1)半径5）、线段（(1,1)到(-1,-1)）和单点(1,3)分别检测：几何体类型；自包含状态，是否包含自身、是否严格包含自身；是否包含自身边界、是否严格包含自身边界。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,3) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the buffer (center point (1,1), radius 5), line segment (from (1,1) to (-1,-1)), and single point (1,3), check respectively: geometry type; self-containment status, whether it contains itself, strictly contains itself; whether it contains its own boundary, strictly contains its own boundary.", "source": "original", "new_id": 1862}
{"id": 340, "function": "ST_Contains", "question": "计算ST_Buffer(ST_Point(1,1),5,1)、ST_MakeLine(ST_Point(1,1),ST_Point(-1,-1))和ST_Point(1,4)的几何类型与空间谓词结果（是否包含自身、是否严格包含自身；是否包含自身边界、是否严格包含自身边界）。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,4) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Calculate the geometry types and spatial predicate results (whether it contains itself, whether it strictly contains itself; whether it contains its own boundary, whether it strictly contains its own boundary) for ST_Buffer(ST_Point(1,1),5,1), ST_MakeLine(ST_Point(1,1),ST_Point(-1,-1)), and ST_Point(1,4).", "source": "original", "new_id": 1863}
{"id": 340, "function": "ST_Contains", "question": "对于三个几何对象：第一个是中心点为POINT(1 1)、半径为5、四分之一圆段数为1的缓冲区；第二个是由POINT(1 1)和POINT(-1 -1)两点构成的线段；第三个是点POINT(1 1)，分别查询每个对象的几何类型、是否包含自身、是否严格包含自身、是否包含自身边界、是否严格包含自身边界。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba \nFROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometry types of three geometric objects—ST_Buffer(ST_Point(1,1), 5,1), the line segment ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1)), and the point ST_Point(1,1)—along with boolean results indicating whether each object contains itself, strictly contains itself, contains its own boundary, and strictly contains its own boundary.", "source": "original", "new_id": 1864}
{"id": 340, "function": "ST_Contains", "question": "输出三种几何对象（一个点缓冲区，以Point(1,1)为中心，半径5的圆形缓冲区；一条线段，(1,1)到(-1,-1)；一个孤立点(1,9)）的类型标识和四个布尔值空间关系（自包含、严格自包含、边界包含、严格边界包含）。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,9) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the type identifiers and four boolean spatial relationships (contains, strictly contains, covers, strictly covers) for three geometric objects (a point buffer, a circular buffer with center at Point(1,1) and radius 5; a line segment from (1,1) to (-1,-1); an isolated point at (1,9)).", "source": "original", "new_id": 1865}
{"id": 340, "function": "ST_Contains", "question": "输出三个几何对象ST_Buffer(ST_Point(1,1), 5,1)、ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1))和ST_Point(1,1)的几何类型，以及每个对象与自身、自身边界的包含关系检测结果，要求返回字段分别命名为geomtype、acontainsa、acontainspropa、acontainsba和acontainspropba。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba \nFROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometry types of three geometric objects—ST_Buffer(ST_Point(1,1), 5,1), the line segment ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1)), and the point ST_Point(1,1)—along with boolean results indicating whether each object contains itself, strictly contains itself, contains its own boundary, and strictly contains its own boundary.", "source": "original", "new_id": 1866}
{"id": 340, "function": "ST_Contains", "question": "输出三个几何对象缓冲区ST_Buffer(ST_Point(1,1), 5,1)、线段ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1))和点ST_Point(1,1)的几何类型，以及每个对象是否包含自身、是否严格包含自身、是否包含自身边界、是否严格包含自身边界的布尔值结果。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba \nFROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the geometry types of three geometric objects—ST_Buffer(ST_Point(1,1), 5,1), the line segment ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1)), and the point ST_Point(1,1)—along with boolean results indicating whether each object contains itself, strictly contains itself, contains its own boundary, and strictly contains its own boundary.", "source": "original", "new_id": 1867}
{"id": 341, "function": "ST_ContainsProperly", "question": "对于以POINT(1 2)为中心、半径10的缓冲区smallc和半径20的缓冲区bigc，分别测试：smallc是否严格包含bigc，bigc是否严格包含smallc，bigc是否严格包含smallc与bigc的并集，bigc是否等于smallc与bigc的并集，bigc是否覆盖其自身外环，bigc是否严格包含其自身外环。", "sql": "SELECT ST_ContainsProperly(smallc, bigc) As smallcontainspropbig, ST_ContainsProperly(bigc,smallc) As bigcontainspropsmall, ST_ContainsProperly(bigc, ST_Union(smallc, bigc)) as bigcontainspropunion, ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) As bigcoversexterior, ST_ContainsProperly(bigc, ST_ExteriorRing(bigc)) As bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo;", "execution_result": [[false, true, false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial relationship validation results between the 10-unit radius circle `smallc` and 20-unit radius circle `bigc` generated by ST_Buffer, including six boolean outputs: two-way validation for strict containment, union containment validation, geometric equality validation, outer ring coverage validation, and outer ring strict containment validation.", "source": "original", "new_id": 1868}
{"id": 341, "function": "ST_ContainsProperly", "question": "基于二维点POINT(1 2)生成的半径10的圆形smallc和半径20的圆形bigc，检查以下空间关系：smallc严格包含bigc的结果，bigc严格包含smallc的结果，bigc严格包含两者并集的结果，bigc是否与两者并集相等，bigc是否覆盖其外环，bigc是否严格包含其外环。", "sql": "SELECT ST_ContainsProperly(smallc, bigc) As smallcontainspropbig, ST_ContainsProperly(bigc,smallc) As bigcontainspropsmall, ST_ContainsProperly(bigc, ST_Union(smallc, bigc)) as bigcontainspropunion, ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) As bigcoversexterior, ST_ContainsProperly(bigc, ST_ExteriorRing(bigc)) As bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo;", "execution_result": [[false, true, false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial relationship validation results between the 10-unit radius circle `smallc` and 20-unit radius circle `bigc` generated by ST_Buffer, including six boolean outputs: two-way validation for strict containment, union containment validation, geometric equality validation, outer ring coverage validation, and outer ring strict containment validation.", "source": "original", "new_id": 1869}
{"id": 341, "function": "ST_ContainsProperly", "question": "使用ST_Buffer函数从POINT(1 2)创建半径10和20的两个圆形几何smallc和bigc，验证：smallc对bigc的严格包含性，bigc对smallc的严格包含性，bigc对两者并集的严格包含性，bigc与并集的相等性，bigc对外环的覆盖性，bigc对外环的严格包含性。", "sql": "SELECT ST_ContainsProperly(smallc, bigc) As smallcontainspropbig, ST_ContainsProperly(bigc,smallc) As bigcontainspropsmall, ST_ContainsProperly(bigc, ST_Union(smallc, bigc)) as bigcontainspropunion, ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) As bigcoversexterior, ST_ContainsProperly(bigc, ST_ExteriorRing(bigc)) As bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo;", "execution_result": [[false, true, false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial relationship validation results between the 10-unit radius circle `smallc` and 20-unit radius circle `bigc` generated by ST_Buffer, including six boolean outputs: two-way validation for strict containment, union containment validation, geometric equality validation, outer ring coverage validation, and outer ring strict containment validation.", "source": "original", "new_id": 1870}
{"id": 341, "function": "ST_ContainsProperly", "question": "输出包含6列布尔值的表格，分别表示：以POINT(1 2)为中心10单位半径的圆smallc是否严格包含20单位半径的圆bigc；bigc是否严格包含smallc；bigc是否严格包含smallc与bigc的并集；bigc是否等于smallc与bigc的并集；bigc是否覆盖其自身外环；bigc是否严格包含其自身外环。", "sql": "SELECT ST_ContainsProperly(smallc, bigc) As smallcontainspropbig, ST_ContainsProperly(bigc,smallc) As bigcontainspropsmall, ST_ContainsProperly(bigc, ST_Union(smallc, bigc)) as bigcontainspropunion, ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) As bigcoversexterior, ST_ContainsProperly(bigc, ST_ExteriorRing(bigc)) As bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo;", "execution_result": [[false, true, false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial relationship validation results between the 10-unit radius circle `smallc` and 20-unit radius circle `bigc` generated by ST_Buffer, including six boolean outputs: two-way validation for strict containment, union containment validation, geometric equality validation, outer ring coverage validation, and outer ring strict containment validation.", "source": "original", "new_id": 1871}
{"id": 341, "function": "ST_ContainsProperly", "question": "输出一个单行六列的结果表，列名依次为smallcontainspropbig、bigcontainspropsmall、bigcontainspropunion、bigisunion、bigcoversexterior、bigcontainsexterior，分别对应：10单位缓冲圆smallc与20单位缓冲圆bigc的六种空间关系布尔值判断结果。", "sql": "SELECT ST_ContainsProperly(smallc, bigc) As smallcontainspropbig, ST_ContainsProperly(bigc,smallc) As bigcontainspropsmall, ST_ContainsProperly(bigc, ST_Union(smallc, bigc)) as bigcontainspropunion, ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) As bigcoversexterior, ST_ContainsProperly(bigc, ST_ExteriorRing(bigc)) As bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo;", "execution_result": [[false, true, false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial relationship validation results between the 10-unit radius circle `smallc` and 20-unit radius circle `bigc` generated by ST_Buffer, including six boolean outputs: two-way validation for strict containment, union containment validation, geometric equality validation, outer ring coverage validation, and outer ring strict containment validation.", "source": "original", "new_id": 1872}
{"id": 341, "function": "ST_ContainsProperly", "question": "输出由ST_Buffer生成的10单位半径圆smallc和20单位半径圆bigc的空间关系验证结果，包含六项布尔值输出：严格包含关系双向验证、并集包含验证、几何相等验证、外环覆盖验证和外环严格包含验证。", "sql": "SELECT ST_ContainsProperly(smallc, bigc) As smallcontainspropbig, ST_ContainsProperly(bigc,smallc) As bigcontainspropsmall, ST_ContainsProperly(bigc, ST_Union(smallc, bigc)) as bigcontainspropunion, ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) As bigcoversexterior, ST_ContainsProperly(bigc, ST_ExteriorRing(bigc)) As bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo;", "execution_result": [[false, true, false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial relationship validation results between the 10-unit radius circle `smallc` and 20-unit radius circle `bigc` generated by ST_Buffer, including six boolean outputs: two-way validation for strict containment, union containment validation, geometric equality validation, outer ring coverage validation, and outer ring strict containment validation.", "source": "original", "new_id": 1873}
{"id": 342, "function": "ST_ContainsProperly", "question": "对于由ST_Buffer(ST_Point(1,1), 5,1)创建的半径为5、四分之一圆线段数为1的缓冲区几何体，由ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1))创建的连接点(1,1)和点(-1,-1)的线段，以及点(1,1)这三个几何对象，分别查询它们的几何类型、是否包含自身、是否严格包含自身、是否包含自身边界、是否严格包含自身边界。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate a table with three rows, each representing a geometric object (a buffer zone around the point (1,1) with parameters 5 and 1, a line formed by points (1,1) and (-1,-1), and the single point (1,1)), then output their types and the results of four containment relation checks (contains, strictly contains, contains boundary, strictly contains boundary).", "source": "original", "new_id": 1874}
{"id": 342, "function": "ST_ContainsProperly", "question": "分析ST_Buffer(ST_Point(1,1), 5,1)生成的缓冲区、ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1))生成的线段和ST_Point(1,1)生成的点的几何类型，并分别计算这些几何对象是否包含自身、严格包含自身、包含自身边界以及严格包含自身边界。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate a table with three rows, each representing a geometric object (a buffer zone around the point (1,1) with parameters 5 and 1, a line formed by points (1,1) and (-1,-1), and the single point (1,1)), then output their types and the results of four containment relation checks (contains, strictly contains, contains boundary, strictly contains boundary).", "source": "original", "new_id": 1875}
{"id": 342, "function": "ST_ContainsProperly", "question": "针对ST_Buffer(ST_Point(1,1), 5,1)创建的缓冲区（中心点(1,1)，半径5，四分之一圆线段数1）、ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1))创建的线段（起点(1,1)，终点(-1,-1)）和ST_Point(1,1)创建的点，查询它们的几何类型，并验证它们是否包含自身、严格包含自身、包含自身边界以及严格包含自身边界。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate a table with three rows, each representing a geometric object (a buffer zone around the point (1,1) with parameters 5 and 1, a line formed by points (1,1) and (-1,-1), and the single point (1,1)), then output their types and the results of four containment relation checks (contains, strictly contains, contains boundary, strictly contains boundary).", "source": "original", "new_id": 1876}
{"id": 342, "function": "ST_ContainsProperly", "question": "输出三个几何对象（半径为5且四分之一圆线段数为1的缓冲区圆、连接POINT(1 1)和POINT(-1 -1)的直线段、单点POINT(1 1)）的几何类型，以及每个对象与自身及其边界的包含关系布尔值结果表。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate a table with three rows, each representing a geometric object (a buffer zone around the point (1,1) with parameters 5 and 1, a line formed by points (1,1) and (-1,-1), and the single point (1,1)), then output their types and the results of four containment relation checks (contains, strictly contains, contains boundary, strictly contains boundary).", "source": "original", "new_id": 1877}
{"id": 342, "function": "ST_ContainsProperly", "question": "以表格形式返回三个几何对象（圆心在(1,1)的5单位半径缓冲区、从(1,1)到(-1,-1)的直线段、孤立点(1,1)）的ST_Contains和ST_ContainsProperly函数对自身及自身边界的测试结果，包含geomtype列标识原始几何类型。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate a table with three rows, each representing a geometric object (a buffer zone around the point (1,1) with parameters 5 and 1, a line formed by points (1,1) and (-1,-1), and the single point (1,1)), then output their types and the results of four containment relation checks (contains, strictly contains, contains boundary, strictly contains boundary).", "source": "original", "new_id": 1878}
{"id": 342, "function": "ST_ContainsProperly", "question": "生成包含三行数据的表格，每行对应一个几何对象（参数为5和1的(1,1)点缓冲区、两点(1,1)和(-1,-1)构成的线、单点(1,1)），输出其类型及四种包含关系检查结果（自包含、严格自包含、包含边界、严格包含边界）。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Generate a table with three rows, each representing a geometric object (a buffer zone around the point (1,1) with parameters 5 and 1, a line formed by points (1,1) and (-1,-1), and the single point (1,1)), then output their types and the results of four containment relation checks (contains, strictly contains, contains boundary, strictly contains boundary).", "source": "original", "new_id": 1879}
{"id": 343, "function": "ST_CoveredBy", "question": "以POINT(1 2)为中心创建半径10的缓冲区smallc和半径20的缓冲区bigc，检查smallc是否被自身完全覆盖，smallc是否被bigc完全覆盖，bigc的外环是否被bigc自身覆盖，以及bigc的外环是否完全位于bigc内部。", "sql": "SELECT ST_CoveredBy(smallc,smallc) AS smallinsmall, ST_CoveredBy(smallc, bigc) AS smallcoveredbybig, ST_CoveredBy(ST_ExteriorRing(bigc), bigc) AS exteriorcoveredbybig, ST_Within(ST_ExteriorRing(bigc),bigc) AS exeriorwithinbig FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output four spatial relationship evaluation results, specifically: 1) Check if ST_Buffer(POINT(1 2),10) is fully covered by itself; 2) Check if this buffer is fully covered by ST_Buffer(POINT(1 2),20); 3) Check if the exterior ring of ST_Buffer(POINT(1 2),20) is fully covered by itself; 4) Check if this exterior ring is strictly within ST_Buffer(POINT(1 2),20).", "source": "original", "new_id": 1880}
{"id": 343, "function": "ST_CoveredBy", "question": "基于二维点POINT(1 2)生成半径10单位的小圆smallc和半径20单位的大圆bigc，分别测试：1) smallc是否被自身包含 2) smallc是否被bigc包含 3) bigc的外边界环是否被bigc包含 4) bigc的外边界环是否严格位于bigc内部。", "sql": "SELECT ST_CoveredBy(smallc,smallc) AS smallinsmall, ST_CoveredBy(smallc, bigc) AS smallcoveredbybig, ST_CoveredBy(ST_ExteriorRing(bigc), bigc) AS exteriorcoveredbybig, ST_Within(ST_ExteriorRing(bigc),bigc) AS exeriorwithinbig FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output four spatial relationship evaluation results, specifically: 1) Check if ST_Buffer(POINT(1 2),10) is fully covered by itself; 2) Check if this buffer is fully covered by ST_Buffer(POINT(1 2),20); 3) Check if the exterior ring of ST_Buffer(POINT(1 2),20) is fully covered by itself; 4) Check if this exterior ring is strictly within ST_Buffer(POINT(1 2),20).", "source": "original", "new_id": 1881}
{"id": 343, "function": "ST_CoveredBy", "question": "使用ST_Buffer函数以坐标(1,2)为中心创建两个圆形：smallc（半径10）和bigc（半径20），验证以下空间关系：smallc的自包含性、smallc在bigc中的包含性、bigc外环在bigc中的包含性，以及bigc外环在bigc中的严格内部性。", "sql": "SELECT ST_CoveredBy(smallc,smallc) AS smallinsmall, ST_CoveredBy(smallc, bigc) AS smallcoveredbybig, ST_CoveredBy(ST_ExteriorRing(bigc), bigc) AS exteriorcoveredbybig, ST_Within(ST_ExteriorRing(bigc),bigc) AS exeriorwithinbig FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output four spatial relationship evaluation results, specifically: 1) Check if ST_Buffer(POINT(1 2),10) is fully covered by itself; 2) Check if this buffer is fully covered by ST_Buffer(POINT(1 2),20); 3) Check if the exterior ring of ST_Buffer(POINT(1 2),20) is fully covered by itself; 4) Check if this exterior ring is strictly within ST_Buffer(POINT(1 2),20).", "source": "original", "new_id": 1882}
{"id": 343, "function": "ST_CoveredBy", "question": "输出四个布尔值，分别表示：以POINT(1 2)为中心、半径为10的缓冲区是否被自身完全覆盖；该缓冲区是否被以同一点为中心、半径为20的缓冲区完全覆盖；半径为20的缓冲区的外环是否被该缓冲区自身完全覆盖；以及该外环是否严格位于半径为20的缓冲区内部。", "sql": "SELECT ST_CoveredBy(smallc,smallc) AS smallinsmall, ST_CoveredBy(smallc, bigc) AS smallcoveredbybig, ST_CoveredBy(ST_ExteriorRing(bigc), bigc) AS exteriorcoveredbybig, ST_Within(ST_ExteriorRing(bigc),bigc) AS exeriorwithinbig FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output four spatial relationship evaluation results, specifically: 1) Check if ST_Buffer(POINT(1 2),10) is fully covered by itself; 2) Check if this buffer is fully covered by ST_Buffer(POINT(1 2),20); 3) Check if the exterior ring of ST_Buffer(POINT(1 2),20) is fully covered by itself; 4) Check if this exterior ring is strictly within ST_Buffer(POINT(1 2),20).", "source": "original", "new_id": 1883}
{"id": 343, "function": "ST_CoveredBy", "question": "返回一个包含四列的结果表，列名分别为smallinsmall、smallcoveredbybig、exteriorcoveredbybig和exeriorwithinbig，分别对应：半径10的圆形缓冲区自包含检测、该缓冲区被半径20的圆形缓冲区包含检测、半径20缓冲区外环被自身包含检测，以及该外环严格位于半径20缓冲区内部的检测结果。", "sql": "SELECT ST_CoveredBy(smallc,smallc) AS smallinsmall, ST_CoveredBy(smallc, bigc) AS smallcoveredbybig, ST_CoveredBy(ST_ExteriorRing(bigc), bigc) AS exteriorcoveredbybig, ST_Within(ST_ExteriorRing(bigc),bigc) AS exeriorwithinbig FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output four spatial relationship evaluation results, specifically: 1) Check if ST_Buffer(POINT(1 2),10) is fully covered by itself; 2) Check if this buffer is fully covered by ST_Buffer(POINT(1 2),20); 3) Check if the exterior ring of ST_Buffer(POINT(1 2),20) is fully covered by itself; 4) Check if this exterior ring is strictly within ST_Buffer(POINT(1 2),20).", "source": "original", "new_id": 1884}
{"id": 343, "function": "ST_CoveredBy", "question": "输出四个空间关系判断结果，具体为：1) 检查ST_Buffer(POINT(1 2),10)是否被自身完全覆盖；2) 检查该缓冲区是否被ST_Buffer(POINT(1 2),20)完全覆盖；3) 检查ST_Buffer(POINT(1 2),20)的外环是否被自身完全覆盖；4) 检查该外环是否严格位于ST_Buffer(POINT(1 2),20)内部。", "sql": "SELECT ST_CoveredBy(smallc,smallc) AS smallinsmall, ST_CoveredBy(smallc, bigc) AS smallcoveredbybig, ST_CoveredBy(ST_ExteriorRing(bigc), bigc) AS exteriorcoveredbybig, ST_Within(ST_ExteriorRing(bigc),bigc) AS exeriorwithinbig FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output four spatial relationship evaluation results, specifically: 1) Check if ST_Buffer(POINT(1 2),10) is fully covered by itself; 2) Check if this buffer is fully covered by ST_Buffer(POINT(1 2),20); 3) Check if the exterior ring of ST_Buffer(POINT(1 2),20) is fully covered by itself; 4) Check if this exterior ring is strictly within ST_Buffer(POINT(1 2),20).", "source": "original", "new_id": 1885}
{"id": 344, "function": "ST_Covers", "question": "对于以POINT(1 2)为中心点、半径为10的缓冲区几何smallc和半径为20的缓冲区几何bigc，分别检查：1) smallc是否覆盖自身 2) smallc是否覆盖bigc 3) bigc是否覆盖其外环 4) bigc是否包含其外环。", "sql": "SELECT ST_Covers(smallc,smallc) AS smallinsmall, ST_Covers(smallc, bigc) AS smallcoversbig, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output four spatial relationship evaluation results: the self-coverage status of smallc (the 10-unit buffer of POINT(1 2)), the coverage ability of smallc over bigc (a 20-unit buffer sharing the same center), the coverage status of bigc over its exterior ring, and the containment status of bigc over the exterior ring.", "source": "original", "new_id": 1886}
{"id": 344, "function": "ST_Covers", "question": "基于POINT(1 2)生成两个缓冲区（半径10的smallc和半径20的bigc），验证：1) smallc的自覆盖性 2) smallc对bigc的覆盖关系 3) bigc对外环线ST_ExteriorRing(bigc)的覆盖性 4) bigc对外环线的包含性。", "sql": "SELECT ST_Covers(smallc,smallc) AS smallinsmall, ST_Covers(smallc, bigc) AS smallcoversbig, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output four spatial relationship evaluation results: the self-coverage status of smallc (the 10-unit buffer of POINT(1 2)), the coverage ability of smallc over bigc (a 20-unit buffer sharing the same center), the coverage status of bigc over its exterior ring, and the containment status of bigc over the exterior ring.", "source": "original", "new_id": 1887}
{"id": 344, "function": "ST_Covers", "question": "使用ST_Buffer分别以10单位和20单位半径对POINT(1 2)创建smallc和bigc几何后，执行四项空间关系判断：smallc自覆盖、smallc覆盖bigc、bigc覆盖其外环、bigc包含其外环。", "sql": "SELECT ST_Covers(smallc,smallc) AS smallinsmall, ST_Covers(smallc, bigc) AS smallcoversbig, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output four spatial relationship evaluation results: the self-coverage status of smallc (the 10-unit buffer of POINT(1 2)), the coverage ability of smallc over bigc (a 20-unit buffer sharing the same center), the coverage status of bigc over its exterior ring, and the containment status of bigc over the exterior ring.", "source": "original", "new_id": 1888}
{"id": 344, "function": "ST_Covers", "question": "输出四个布尔值，分别表示：以POINT(1 2)为中心、半径为10的缓冲区是否覆盖自身；该缓冲区是否覆盖以同一点为中心、半径为20的更大缓冲区；大缓冲区是否覆盖其自身外环；大缓冲区是否包含其自身外环。", "sql": "SELECT ST_Covers(smallc,smallc) AS smallinsmall, ST_Covers(smallc, bigc) AS smallcoversbig, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output four spatial relationship evaluation results: the self-coverage status of smallc (the 10-unit buffer of POINT(1 2)), the coverage ability of smallc over bigc (a 20-unit buffer sharing the same center), the coverage status of bigc over its exterior ring, and the containment status of bigc over the exterior ring.", "source": "original", "new_id": 1889}
{"id": 344, "function": "ST_Covers", "question": "返回包含四列的结果集，分别验证：半径10的圆形缓冲区自包含性、该缓冲区对半径20缓冲区的覆盖关系、大缓冲区对其外环的覆盖关系、大缓冲区对外环的包含关系，所有缓冲区均基于POINT(1 2)创建。", "sql": "SELECT ST_Covers(smallc,smallc) AS smallinsmall, ST_Covers(smallc, bigc) AS smallcoversbig, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output four spatial relationship evaluation results: the self-coverage status of smallc (the 10-unit buffer of POINT(1 2)), the coverage ability of smallc over bigc (a 20-unit buffer sharing the same center), the coverage status of bigc over its exterior ring, and the containment status of bigc over the exterior ring.", "source": "original", "new_id": 1890}
{"id": 344, "function": "ST_Covers", "question": "输出四个空间关系判断结果，具体为：smallc（POINT(1 2)的10单位缓冲）的自覆盖状态、smallc对bigc（同中心20单位缓冲）的覆盖能力、bigc对其外环的覆盖状态、bigc对外环的包含状态。", "sql": "SELECT ST_Covers(smallc,smallc) AS smallinsmall, ST_Covers(smallc, bigc) AS smallcoversbig, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output four spatial relationship evaluation results: the self-coverage status of smallc (the 10-unit buffer of POINT(1 2)), the coverage ability of smallc over bigc (a 20-unit buffer sharing the same center), the coverage status of bigc over its exterior ring, and the containment status of bigc over the exterior ring.", "source": "original", "new_id": 1891}
{"id": 345, "function": "ST_Covers", "question": "以SRID=4326坐标系下的POINT(-99.327 31.4821)为中心创建300米缓冲区多边形geog_poly，并判断该多边形是否覆盖SRID=4326坐标系下的点POINT(-99.33 31.483)（结果记为poly_covers_pt），同时判断以POINT(-99.33 31.483)为中心创建的10米缓冲区是否覆盖该点本身（结果记为buff_10m_covers_cent）。", "sql": "SELECT ST_Covers(geog_poly, geog_pt) AS poly_covers_pt, ST_Covers(ST_Buffer(geog_pt,10), geog_pt) AS buff_10m_covers_cent FROM (SELECT ST_Buffer(ST_GeogFromText('SRID=4326;POINT(-99.327 31.4821)'), 300) AS geog_poly, ST_GeogFromText('SRID=4326;POINT(-99.33 31.483)') AS geog_pt ) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return a result table with two fields: poly_covers_pt indicates whether the 300-meter geographic buffer of POINT(-99.327 31.4821) in WGS84 contains POINT(-99.33 31.483), and buff_10m_covers_cent indicates whether the 10-meter buffer of POINT(-99.33 31.483) contains its own center point.", "source": "original", "new_id": 1892}
{"id": 345, "function": "ST_Covers", "question": "计算两个空间关系：1) 检查由POINT(-99.327 31.4821)生成的300米半径缓冲区geog_poly是否包含POINT(-99.33 31.483)；2) 检查POINT(-99.33 31.483)的10米缓冲区是否包含其自身点。所有坐标均使用WGS84坐标系（SRID=4326）。", "sql": "SELECT ST_Covers(geog_poly, geog_pt) AS poly_covers_pt, ST_Covers(ST_Buffer(geog_pt,10), geog_pt) AS buff_10m_covers_cent FROM (SELECT ST_Buffer(ST_GeogFromText('SRID=4326;POINT(-99.327 31.4821)'), 300) AS geog_poly, ST_GeogFromText('SRID=4326;POINT(-99.33 31.483)') AS geog_pt ) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return a result table with two fields: poly_covers_pt indicates whether the 300-meter geographic buffer of POINT(-99.327 31.4821) in WGS84 contains POINT(-99.33 31.483), and buff_10m_covers_cent indicates whether the 10-meter buffer of POINT(-99.33 31.483) contains its own center point.", "source": "original", "new_id": 1893}
{"id": 345, "function": "ST_Covers", "question": "在SRID=4326坐标系中，对POINT(-99.327 31.4821)进行300米缓冲得到多边形geog_poly，验证其是否覆盖点POINT(-99.33 31.483)，并验证POINT(-99.33 31.483)的10米缓冲区是否覆盖该点自身。", "sql": "SELECT ST_Covers(geog_poly, geog_pt) AS poly_covers_pt, ST_Covers(ST_Buffer(geog_pt,10), geog_pt) AS buff_10m_covers_cent FROM (SELECT ST_Buffer(ST_GeogFromText('SRID=4326;POINT(-99.327 31.4821)'), 300) AS geog_poly, ST_GeogFromText('SRID=4326;POINT(-99.33 31.483)') AS geog_pt ) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return a result table with two fields: poly_covers_pt indicates whether the 300-meter geographic buffer of POINT(-99.327 31.4821) in WGS84 contains POINT(-99.33 31.483), and buff_10m_covers_cent indicates whether the 10-meter buffer of POINT(-99.33 31.483) contains its own center point.", "source": "original", "new_id": 1894}
{"id": 345, "function": "ST_Covers", "question": "输出两个布尔值，第一个表示以SRID=4326的POINT(-99.327 31.4821)为中心、300米为半径的缓冲区多边形是否包含SRID=4326的POINT(-99.33 31.483)，第二个表示以SRID=4326的POINT(-99.33 31.483)为中心、10米为半径的缓冲区是否包含其自身中心点。", "sql": "SELECT ST_Covers(geog_poly, geog_pt) AS poly_covers_pt, ST_Covers(ST_Buffer(geog_pt,10), geog_pt) AS buff_10m_covers_cent FROM (SELECT ST_Buffer(ST_GeogFromText('SRID=4326;POINT(-99.327 31.4821)'), 300) AS geog_poly, ST_GeogFromText('SRID=4326;POINT(-99.33 31.483)') AS geog_pt ) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return a result table with two fields: poly_covers_pt indicates whether the 300-meter geographic buffer of POINT(-99.327 31.4821) in WGS84 contains POINT(-99.33 31.483), and buff_10m_covers_cent indicates whether the 10-meter buffer of POINT(-99.33 31.483) contains its own center point.", "source": "original", "new_id": 1895}
{"id": 345, "function": "ST_Covers", "question": "输出两列布尔结果，第一列检查SRID=4326坐标系下由POINT(-99.327 31.4821)生成的300米半径缓冲区是否覆盖POINT(-99.33 31.483)，第二列检查POINT(-99.33 31.483)的10米缓冲区是否覆盖其自身几何中心。", "sql": "SELECT ST_Covers(geog_poly, geog_pt) AS poly_covers_pt, ST_Covers(ST_Buffer(geog_pt,10), geog_pt) AS buff_10m_covers_cent FROM (SELECT ST_Buffer(ST_GeogFromText('SRID=4326;POINT(-99.327 31.4821)'), 300) AS geog_poly, ST_GeogFromText('SRID=4326;POINT(-99.33 31.483)') AS geog_pt ) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return a result table with two fields: poly_covers_pt indicates whether the 300-meter geographic buffer of POINT(-99.327 31.4821) in WGS84 contains POINT(-99.33 31.483), and buff_10m_covers_cent indicates whether the 10-meter buffer of POINT(-99.33 31.483) contains its own center point.", "source": "original", "new_id": 1896}
{"id": 345, "function": "ST_Covers", "question": "返回包含两个字段的结果表，字段poly_covers_pt表示WGS84坐标系中POINT(-99.327 31.4821)的300米地理缓冲区对POINT(-99.33 31.483)的包含关系，字段buff_10m_covers_cent表示POINT(-99.33 31.483)的10米缓冲区对其自身中心点的包含关系。", "sql": "SELECT ST_Covers(geog_poly, geog_pt) AS poly_covers_pt, ST_Covers(ST_Buffer(geog_pt,10), geog_pt) AS buff_10m_covers_cent FROM (SELECT ST_Buffer(ST_GeogFromText('SRID=4326;POINT(-99.327 31.4821)'), 300) AS geog_poly, ST_GeogFromText('SRID=4326;POINT(-99.33 31.483)') AS geog_pt ) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return a result table with two fields: poly_covers_pt indicates whether the 300-meter geographic buffer of POINT(-99.327 31.4821) in WGS84 contains POINT(-99.33 31.483), and buff_10m_covers_cent indicates whether the 10-meter buffer of POINT(-99.33 31.483) contains its own center point.", "source": "original", "new_id": 1897}
{"id": 347, "function": "ST_Disjoint", "question": "判断二维点POINT(0 0)与由点(2 0)和点(0 2)构成的折线LINESTRING ( 2 0, 0 2 )是否完全不相交。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output as a boolean whether the 2D point POINT(0 0) has no overlap at all with the line segment LINESTRING(2 0, 0 2) composed of the points (2 0) and (0 2).", "source": "original", "new_id": 1898}
{"id": 347, "function": "ST_Disjoint", "question": "检查坐标为(0,0)的二维点对象POINT(0 0)是否与连接点(2,0)和点(0,2)的线段LINESTRING ( 2 0, 0 2 )在空间上无任何重叠。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output as a boolean whether the 2D point POINT(0 0) has no overlap at all with the line segment LINESTRING(2 0, 0 2) composed of the points (2 0) and (0 2).", "source": "original", "new_id": 1899}
{"id": 347, "function": "ST_Disjoint", "question": "使用PostGIS函数ST_Disjoint，验证几何对象POINT(0 0)和LINESTRING ( 2 0, 0 2 )是否存在空间分离关系（即两者是否无任何交点）。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output as a boolean whether the 2D point POINT(0 0) has no overlap at all with the line segment LINESTRING(2 0, 0 2) composed of the points (2 0) and (0 2).", "source": "original", "new_id": 1900}
{"id": 347, "function": "ST_Disjoint", "question": "判断二维点POINT(0 0)与折线LINESTRING ( 2 0, 0 2 )是否空间分离，输出结果为布尔值。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output as a boolean whether the 2D point POINT(0 0) has no overlap at all with the line segment LINESTRING(2 0, 0 2) composed of the points (2 0) and (0 2).", "source": "original", "new_id": 1901}
{"id": 347, "function": "ST_Disjoint", "question": "检测几何对象POINT(0 0)和LINESTRING ( 2 0, 0 2 )是否存在交集，返回TRUE或FALSE表示是否完全不相交。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output as a boolean whether the 2D point POINT(0 0) has no overlap at all with the line segment LINESTRING(2 0, 0 2) composed of the points (2 0) and (0 2).", "source": "original", "new_id": 1902}
{"id": 347, "function": "ST_Disjoint", "question": "以布尔值形式输出二维点POINT(0 0)是否与由点(2 0)和(0 2)构成的线段LINESTRING ( 2 0, 0 2 )完全无重叠。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output as a boolean whether the 2D point POINT(0 0) has no overlap at all with the line segment LINESTRING(2 0, 0 2) composed of the points (2 0) and (0 2).", "source": "original", "new_id": 1903}
{"id": 348, "function": "ST_Disjoint", "question": "判断二维点POINT(0 0)与由点(0 0)和点(0 2)构成的线段LINESTRING ( 0 0, 0 2 )是否完全不相交。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Execute the spatial predicate function ST_Disjoint to output the disjoint test result (TRUE/FALSE) between the origin point POINT(0 0) and the vertical line segment LINESTRING(0 0, 0 2).", "source": "original", "new_id": 1904}
{"id": 348, "function": "ST_Disjoint", "question": "检测坐标原点POINT(0 0)是否与Y轴上从(0 0)到(0 2)的直线段LINESTRING ( 0 0, 0 2 )存在空间分离关系。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Execute the spatial predicate function ST_Disjoint to output the disjoint test result (TRUE/FALSE) between the origin point POINT(0 0) and the vertical line segment LINESTRING(0 0, 0 2).", "source": "original", "new_id": 1905}
{"id": 348, "function": "ST_Disjoint", "question": "验证几何对象POINT(0 0)和LINESTRING ( 0 0, 0 2 )是否满足ST_Disjoint函数的零接触条件，即两者无任何共有点。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Execute the spatial predicate function ST_Disjoint to output the disjoint test result (TRUE/FALSE) between the origin point POINT(0 0) and the vertical line segment LINESTRING(0 0, 0 2).", "source": "original", "new_id": 1906}
{"id": 348, "function": "ST_Disjoint", "question": "输出判断二维点POINT(0 0)与线段LINESTRING(0 0, 0 2)是否完全不相交的布尔值结果。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Execute the spatial predicate function ST_Disjoint to output the disjoint test result (TRUE/FALSE) between the origin point POINT(0 0) and the vertical line segment LINESTRING(0 0, 0 2).", "source": "original", "new_id": 1907}
{"id": 348, "function": "ST_Disjoint", "question": "检查二维几何对象POINT(0 0)和LINESTRING(0 0, 0 2)的空间关系，并以布尔值形式返回两者是否无任何交点。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Execute the spatial predicate function ST_Disjoint to output the disjoint test result (TRUE/FALSE) between the origin point POINT(0 0) and the vertical line segment LINESTRING(0 0, 0 2).", "source": "original", "new_id": 1908}
{"id": 348, "function": "ST_Disjoint", "question": "执行空间谓词函数ST_Disjoint，输出原点POINT(0 0)与垂直线段LINESTRING(0 0, 0 2)的分离性检测结果（TRUE/FALSE）。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Execute the spatial predicate function ST_Disjoint to output the disjoint test result (TRUE/FALSE) between the origin point POINT(0 0) and the vertical line segment LINESTRING(0 0, 0 2).", "source": "original", "new_id": 1909}
{"id": 349, "function": "ST_Equals", "question": "判断将LINESTRING(0 0, 10 10)的顶点顺序反转后得到的线，是否与LINESTRING(0 0, 5 5, 10 10)这条包含中间点(5 5)的线在空间上完全相等。", "sql": "SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean return value of the geometric equality check between the reversed node order of LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10) containing the intermediate node 5 5.", "source": "original", "new_id": 1910}
{"id": 349, "function": "ST_Equals", "question": "比较反转后的LINESTRING(0 0, 10 10)（即LINESTRING(10 10, 0 0)）与LINESTRING(0 0, 5 5, 10 10)的几何等价性，其中后者在起点(0 0)和终点(10 10)之间插入了顶点(5 5)。", "sql": "SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean return value of the geometric equality check between the reversed node order of LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10) containing the intermediate node 5 5.", "source": "original", "new_id": 1911}
{"id": 349, "function": "ST_Equals", "question": "验证ST_Reverse函数对LINESTRING(0 0, 10 10)的顶点顺序反转操作后，生成的线与LINESTRING(0 0, 5 5, 10 10)是否具有相同的空间形状，注意后者比前者多一个中间点(5 5)。", "sql": "SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean return value of the geometric equality check between the reversed node order of LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10) containing the intermediate node 5 5.", "source": "original", "new_id": 1912}
{"id": 349, "function": "ST_Equals", "question": "输出比较LINESTRING(0 0, 10 10)反转后的几何对象与LINESTRING(0 0, 5 5, 10 10)是否完全相等的布尔值结果。", "sql": "SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean return value of the geometric equality check between the reversed node order of LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10) containing the intermediate node 5 5.", "source": "original", "new_id": 1913}
{"id": 349, "function": "ST_Equals", "question": "输出ST_Reverse函数处理LINESTRING(0 0, 10 10)后生成的几何对象与LINESTRING(0 0, 5 5, 10 10)的空间相等性检测结果（TRUE/FALSE）。", "sql": "SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean return value of the geometric equality check between the reversed node order of LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10) containing the intermediate node 5 5.", "source": "original", "new_id": 1914}
{"id": 349, "function": "ST_Equals", "question": "输出将LINESTRING(0 0, 10 10)的节点顺序反转后，与包含中间节点5 5的LINESTRING(0 0, 5 5, 10 10)进行几何等同性判断的布尔返回值。", "sql": "SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the boolean return value of the geometric equality check between the reversed node order of LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10) containing the intermediate node 5 5.", "source": "original", "new_id": 1915}
{"id": 350, "function": "ST_Equals", "question": "判断由点(0 0)和(10 10)构成的直线段LINESTRING(0 0, 10 10)与由点(0 0)、(5 5)、(10 10)构成的折线LINESTRING(0 0, 5 5, 10 10)在空间上是否完全重合。", "sql": "SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the boolean result of the ST_Equals function's geometric equivalence verification for LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10).", "source": "original", "new_id": 1916}
{"id": 350, "function": "ST_Equals", "question": "比较LINESTRING(0 0, 10 10)和LINESTRING(0 0, 5 5, 10 10)这两个几何对象是否表示相同的空间形状，前者是两点直线，后者是包含中间点(5 5)的三点折线。", "sql": "SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the boolean result of the ST_Equals function's geometric equivalence verification for LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10).", "source": "original", "new_id": 1917}
{"id": 350, "function": "ST_Equals", "question": "验证LINESTRING(0 0, 10 10)和LINESTRING(0 0, 5 5, 10 10)的空间等价性，其中第一个几何体是起点(0 0)到终点(10 10)的直线，第二个几何体是经过中间点(5 5)的同终点折线。", "sql": "SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the boolean result of the ST_Equals function's geometric equivalence verification for LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10).", "source": "original", "new_id": 1918}
{"id": 350, "function": "ST_Equals", "question": "判断LINESTRING(0 0, 10 10)和LINESTRING(0 0, 5 5, 10 10)是否空间相等，返回布尔值结果。", "sql": "SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the boolean result of the ST_Equals function's geometric equivalence verification for LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10).", "source": "original", "new_id": 1919}
{"id": 350, "function": "ST_Equals", "question": "输出比较LINESTRING(0 0, 10 10)与包含中间点5 5的LINESTRING(0 0, 5 5, 10 10)的空间相等性检测结果（true/false）。", "sql": "SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the boolean result of the ST_Equals function's geometric equivalence verification for LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10).", "source": "original", "new_id": 1920}
{"id": 350, "function": "ST_Equals", "question": "返回ST_Equals函数对LINESTRING(0 0, 10 10)和LINESTRING(0 0, 5 5, 10 10)的几何等价性验证结果（布尔类型）。", "sql": "SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Return the boolean result of the ST_Equals function's geometric equivalence verification for LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10).", "source": "original", "new_id": 1921}
{"id": 351, "function": "ST_Intersects", "question": "判断二维点POINT(0 0)是否与由点(2 0)和点(0 2)构成的线段LINESTRING (2 0, 0 2)相交。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial intersection check result between the geometric objects POINT(0 0) and LINESTRING(2 0, 0 2) as a boolean.", "source": "original", "new_id": 1922}
{"id": 351, "function": "ST_Intersects", "question": "检查坐标原点POINT(0 0)是否穿过或接触连接点(2 0)和点(0 2)的直线段LINESTRING (2 0, 0 2)。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial intersection check result between the geometric objects POINT(0 0) and LINESTRING(2 0, 0 2) as a boolean.", "source": "original", "new_id": 1923}
{"id": 351, "function": "ST_Intersects", "question": "使用ST_Intersects函数测试二维几何点POINT(0 0)与二维线段LINESTRING (2 0, 0 2)是否存在空间交集。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial intersection check result between the geometric objects POINT(0 0) and LINESTRING(2 0, 0 2) as a boolean.", "source": "original", "new_id": 1924}
{"id": 351, "function": "ST_Intersects", "question": "输出判断二维点POINT(0 0)是否与线段LINESTRING(2 0, 0 2)相交的布尔值结果。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial intersection check result between the geometric objects POINT(0 0) and LINESTRING(2 0, 0 2) as a boolean.", "source": "original", "new_id": 1925}
{"id": 351, "function": "ST_Intersects", "question": "检查坐标原点POINT(0 0)是否穿过由点(2 0)到点(0 2)构成的直线段，返回true或false。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial intersection check result between the geometric objects POINT(0 0) and LINESTRING(2 0, 0 2) as a boolean.", "source": "original", "new_id": 1926}
{"id": 351, "function": "ST_Intersects", "question": "以布尔值形式输出几何对象POINT(0 0)与LINESTRING(2 0, 0 2)的空间相交性检测结果。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial intersection check result between the geometric objects POINT(0 0) and LINESTRING(2 0, 0 2) as a boolean.", "source": "original", "new_id": 1927}
{"id": 352, "function": "ST_Intersects", "question": "判断SRID为4326的LINESTRING(-43.23456 72.4567,-43.23456 72.4568)与SRID为4326的POINT(-43.23456 72.4567772)这两个地理对象是否相交。", "sql": "SELECT ST_Intersects( 'SRID=4326;LINESTRING(-43.23456 72.4567,-43.23456 72.4568)'::geography, 'SRID=4326;POINT(-43.23456 72.4567772)'::geography );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial intersection check result (as a boolean) between the line segment formed by points (-43.23456 72.4567) and (-43.23456 72.4568) and the point (-43.23456 72.4567772) in geographic coordinate system (SRID=4326).", "source": "original", "new_id": 1928}
{"id": 352, "function": "ST_Intersects", "question": "检查由点(-43.23456 72.4567)和点(-43.23456 72.4568)构成的SRID为4326的线对象是否包含SRID为4326的点(-43.23456 72.4567772)。", "sql": "SELECT ST_Intersects( 'SRID=4326;LINESTRING(-43.23456 72.4567,-43.23456 72.4568)'::geography, 'SRID=4326;POINT(-43.23456 72.4567772)'::geography );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial intersection check result (as a boolean) between the line segment formed by points (-43.23456 72.4567) and (-43.23456 72.4568) and the point (-43.23456 72.4567772) in geographic coordinate system (SRID=4326).", "source": "original", "new_id": 1929}
{"id": 352, "function": "ST_Intersects", "question": "在WGS84坐标系(SRID=4326)下，验证线LINESTRING(-43.23456 72.4567,-43.23456 72.4568)与点POINT(-43.23456 72.4567772)是否存在空间交集。", "sql": "SELECT ST_Intersects( 'SRID=4326;LINESTRING(-43.23456 72.4567,-43.23456 72.4568)'::geography, 'SRID=4326;POINT(-43.23456 72.4567772)'::geography );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial intersection check result (as a boolean) between the line segment formed by points (-43.23456 72.4567) and (-43.23456 72.4568) and the point (-43.23456 72.4567772) in geographic coordinate system (SRID=4326).", "source": "original", "new_id": 1930}
{"id": 352, "function": "ST_Intersects", "question": "输出判断SRID为4326的LINESTRING(-43.23456 72.4567,-43.23456 72.4568)与SRID为4326的POINT(-43.23456 72.4567772)是否相交的布尔值结果。", "sql": "SELECT ST_Intersects( 'SRID=4326;LINESTRING(-43.23456 72.4567,-43.23456 72.4568)'::geography, 'SRID=4326;POINT(-43.23456 72.4567772)'::geography );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial intersection check result (as a boolean) between the line segment formed by points (-43.23456 72.4567) and (-43.23456 72.4568) and the point (-43.23456 72.4567772) in geographic coordinate system (SRID=4326).", "source": "original", "new_id": 1931}
{"id": 352, "function": "ST_Intersects", "question": "输出基于WGS84坐标系（SRID=4326）的LINESTRING(-43.23456 72.4567,-43.23456 72.4568)和POINT(-43.23456 72.4567772)的空间相交性检测结果，返回值为TRUE或FALSE。", "sql": "SELECT ST_Intersects( 'SRID=4326;LINESTRING(-43.23456 72.4567,-43.23456 72.4568)'::geography, 'SRID=4326;POINT(-43.23456 72.4567772)'::geography );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial intersection check result (as a boolean) between the line segment formed by points (-43.23456 72.4567) and (-43.23456 72.4568) and the point (-43.23456 72.4567772) in geographic coordinate system (SRID=4326).", "source": "original", "new_id": 1932}
{"id": 352, "function": "ST_Intersects", "question": "输出地理坐标系（SRID=4326）下，由点(-43.23456 72.4567)和点(-43.23456 72.4568)构成的线段与点(-43.23456 72.4567772)的空间相交判断结果，返回布尔类型。", "sql": "SELECT ST_Intersects( 'SRID=4326;LINESTRING(-43.23456 72.4567,-43.23456 72.4568)'::geography, 'SRID=4326;POINT(-43.23456 72.4567772)'::geography );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the spatial intersection check result (as a boolean) between the line segment formed by points (-43.23456 72.4567) and (-43.23456 72.4568) and the point (-43.23456 72.4567772) in geographic coordinate system (SRID=4326).", "source": "original", "new_id": 1933}
{"id": 353, "function": "ST_Intersects", "question": "判断二维点POINT(0 0)是否与由点(0 0)和点(0 2)构成的线段LINESTRING ( 0 0, 0 2 )相交。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Verify if the geometric point POINT(0 0) has a spatial intersection with the line segment LINESTRING (0 0, 0 2), where the endpoints of the segment are (0 0) and (0 2).", "source": "original", "new_id": 1934}
{"id": 353, "function": "ST_Intersects", "question": "检测坐标原点POINT(0 0)是否落在Y轴上从(0 0)到(0 2)的垂直线段LINESTRING ( 0 0, 0 2 )上。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Verify if the geometric point POINT(0 0) has a spatial intersection with the line segment LINESTRING (0 0, 0 2), where the endpoints of the segment are (0 0) and (0 2).", "source": "original", "new_id": 1935}
{"id": 353, "function": "ST_Intersects", "question": "验证几何点POINT(0 0)与线段LINESTRING ( 0 0, 0 2 )是否存在空间交集，其中线段端点分别为(0 0)和(0 2)。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Verify if the geometric point POINT(0 0) has a spatial intersection with the line segment LINESTRING (0 0, 0 2), where the endpoints of the segment are (0 0) and (0 2).", "source": "original", "new_id": 1936}
{"id": 353, "function": "ST_Intersects", "question": "判断二维点POINT(0 0)是否与线段LINESTRING ( 0 0, 0 2 )存在空间相交关系，输出结果为布尔值true或false。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Verify if the geometric point POINT(0 0) has a spatial intersection with the line segment LINESTRING (0 0, 0 2), where the endpoints of the segment are (0 0) and (0 2).", "source": "original", "new_id": 1937}
{"id": 353, "function": "ST_Intersects", "question": "检测坐标原点POINT(0 0)是否落在由点(0 0)到点(0 2)构成的垂直线段上，返回逻辑判断结果（true/false）。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Verify if the geometric point POINT(0 0) has a spatial intersection with the line segment LINESTRING (0 0, 0 2), where the endpoints of the segment are (0 0) and (0 2).", "source": "original", "new_id": 1938}
{"id": 353, "function": "ST_Intersects", "question": "执行空间关系计算，输出POINT(0 0)与LINESTRING ( 0 0, 0 2 )的相交性检测结果，返回值类型为布尔值。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Verify if the geometric point POINT(0 0) has a spatial intersection with the line segment LINESTRING (0 0, 0 2), where the endpoints of the segment are (0 0) and (0 2).", "source": "original", "new_id": 1939}
{"id": 355, "function": "ST_LineCrossingDirection", "question": "计算LINESTRING(25 169,89 114,40 70,86 43)与LINESTRING(171 154,20 140,71 74,161 53)两条折线的相互交叉方向，分别输出lineA对lineB的交叉方向（A_cross_B）和lineB对lineA的交叉方向（B_cross_A）。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(171 154,20 140,71 74,161 53)') AS lineB ) AS foo;", "execution_result": [[3, -3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1940, "question_en": "Calculate the mutual crossing directions between the linestrings LINESTRING(25 169,89 114,40 70,86 43) and LINESTRING(171 154,20 140,71 74,161 53), outputting the crossing direction of lineA over lineB (A_cross_B) and lineB over lineA (B_cross_A) respectively."}
{"id": 355, "function": "ST_LineCrossingDirection", "question": "给定折线lineA的节点坐标为(25 169)→(89 114)→(40 70)→(86 43)，折线lineB的节点坐标为(171 154)→(20 140)→(71 74)→(161 53)，使用PostGIS的ST_LineCrossingDirection函数判断两条折线在相交时的方向关系，并返回双向结果。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(171 154,20 140,71 74,161 53)') AS lineB ) AS foo;", "execution_result": [[3, -3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1941, "question_en": "Given the vertices of polyline lineA as (25 169)→(89 114)→(40 70)→(86 43) and polyline lineB as (171 154)→(20 140)→(71 74)→(161 53), use PostGIS's ST_LineCrossingDirection function to determine the directional relationship between the two polylines at their intersection and return the bidirectional result."}
{"id": 355, "function": "ST_LineCrossingDirection", "question": "基于WKT格式定义的LINESTRING(25 169,89 114,40 70,86 43)和LINESTRING(171 154,20 140,71 74,161 53)两条空间折线，分析它们的几何交叉行为，要求返回lineA相对于lineB的交叉方向编码（A_cross_B）和lineB相对于lineA的交叉方向编码（B_cross_A）。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(171 154,20 140,71 74,161 53)') AS lineB ) AS foo;", "execution_result": [[3, -3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1942, "question_en": "For the two spatial polylines defined in WKT format, LINESTRING(25 169,89 114,40 70,86 43) and LINESTRING(171 154,20 140,71 74,161 53), analyze their geometric intersection behavior and return the intersection direction codes of lineA relative to lineB (A_cross_B) and lineB relative to lineA (B_cross_A)."}
{"id": 355, "function": "ST_LineCrossingDirection", "question": "输出LINESTRING(25 169,89 114,40 70,86 43)与LINESTRING(171 154,20 140,71 74,161 53)两条线段的相互交叉方向值，分别以A_cross_B和B_cross_A作为列名返回结果。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(171 154,20 140,71 74,161 53)') AS lineB) AS foo;", "execution_result": [[3, -3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1943, "question_en": "Output the cross direction values between the two linestrings LINESTRING(25 169,89 114,40 70,86 43) and LINESTRING(171 154,20 140,71 74,161 53), returning the results with column names A_cross_B and B_cross_A respectively."}
{"id": 355, "function": "ST_LineCrossingDirection", "question": "计算LINESTRING(25 169,89 114,40 70,86 43)相对于LINESTRING(171 154,20 140,71 74,161 53)的交叉方向（A_cross_B），以及反向计算的结果（B_cross_A），并以两列形式输出整数值。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(171 154,20 140,71 74,161 53)') AS lineB) AS foo;", "execution_result": [[3, -3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1944, "question_en": "Calculate the crossing direction (A_cross_B) of LINESTRING(25 169,89 114,40 70,86 43) relative to LINESTRING(171 154,20 140,71 74,161 53), and the reverse calculation (B_cross_A), then output the integer results in two columns."}
{"id": 355, "function": "ST_LineCrossingDirection", "question": "返回两个二维线段LINESTRING(25 169,89 114,40 70,86 43)和LINESTRING(171 154,20 140,71 74,161 53)的ST_LineCrossingDirection函数双向计算结果，要求输出列名严格对应A_cross_B和B_cross_A。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(171 154,20 140,71 74,161 53)') AS lineB) AS foo;", "execution_result": [[3, -3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1945, "question_en": "Return the bidirectional calculation results of the ST_LineCrossingDirection function for the two 2D linestrings LINESTRING(25 169,89 114,40 70,86 43) and LINESTRING(171 154,20 140,71 74,161 53), with output column names strictly corresponding to A_cross_B and B_cross_A."}
{"id": 357, "function": "ST_LineCrossingDirection", "question": "计算LINESTRING(25 169,89 114,40 70,86 43)与LINESTRING (20 140, 71 74, 161 53)两条线段的相互交叉方向，分别输出lineA对lineB的交叉方向（A_cross_B）和lineB对lineA的交叉方向（B_cross_A）。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING (20 140, 71 74, 161 53)') AS lineB ) AS foo;", "execution_result": [[-1, 1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1946, "question_en": "Calculate the mutual crossing directions between LINESTRING(25 169,89 114,40 70,86 43) and LINESTRING (20 140, 71 74, 161 53), outputting the crossing direction of lineA over lineB (A_cross_B) and lineB over lineA (B_cross_A) respectively."}
{"id": 357, "function": "ST_LineCrossingDirection", "question": "对于由四个点构成的折线LINESTRING(25 169,89 114,40 70,86 43)和由三个点构成的折线LINESTRING (20 140, 71 74, 161 53)，查询它们之间的相互交叉方向关系，结果包含A_cross_B和B_cross_A两个字段。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING (20 140, 71 74, 161 53)') AS lineB ) AS foo;", "execution_result": [[-1, 1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1947, "question_en": "For the linestring LINESTRING(25 169,89 114,40 70,86 43) composed of four points and the linestring LINESTRING(20 140, 71 74, 161 53) composed of three points, query their mutual crossing direction relationship, with the results including the fields A_cross_B and B_cross_A."}
{"id": 357, "function": "ST_LineCrossingDirection", "question": "基于LINESTRING(25 169,89 114,40 70,86 43)（lineA）和LINESTRING (20 140, 71 74, 161 53)（lineB）两条折线对象，使用ST_LineCrossingDirection函数分别判断lineA相对于lineB的交叉方向（A_cross_B）和lineB相对于lineA的交叉方向（B_cross_A）。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING (20 140, 71 74, 161 53)') AS lineB ) AS foo;", "execution_result": [[-1, 1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1948, "question_en": "Based on the linestring objects LINESTRING(25 169,89 114,40 70,86 43) (lineA) and LINESTRING (20 140, 71 74, 161 53) (lineB), use the ST_LineCrossingDirection function to determine the crossing direction of lineA relative to lineB (A_cross_B) and lineB relative to lineA (B_cross_A) respectively."}
{"id": 357, "function": "ST_LineCrossingDirection", "question": "输出LINESTRING(25 169,89 114,40 70,86 43)与LINESTRING(20 140,71 74,161 53)两条线段的交叉方向结果，分别以A_cross_B和B_cross_A两列返回整数值。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING (20 140, 71 74, 161 53)') AS lineB ) AS foo;", "execution_result": [[-1, 1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1949, "question_en": "Output the cross direction results of the linestrings LINESTRING(25 169,89 114,40 70,86 43) and LINESTRING(20 140,71 74,161 53) as integer values in two columns named A_cross_B and B_cross_A."}
{"id": 357, "function": "ST_LineCrossingDirection", "question": "计算LINESTRING(25 169,89 114,40 70,86 43)相对于LINESTRING(20 140,71 74,161 53)的交叉方向值（A_cross_B列），以及反向计算的结果（B_cross_A列），输出为包含两个整数字段的表格。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING (20 140, 71 74, 161 53)') AS lineB ) AS foo;", "execution_result": [[-1, 1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1950, "question_en": "Calculate the cross direction value (A_cross_B column) of LINESTRING(25 169,89 114,40 70,86 43) relative to LINESTRING(20 140,71 74,161 53), and the reverse calculation result (B_cross_A column), output as a table containing two integer fields."}
{"id": 357, "function": "ST_LineCrossingDirection", "question": "以两列形式返回空间分析结果：第一列A_cross_B表示LINESTRING(25 169,89 114,40 70,86 43)穿过LINESTRING(20 140,71 74,161 53)的方向代码，第二列B_cross_A表示反向穿过的方向代码。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING (20 140, 71 74, 161 53)') AS lineB ) AS foo;", "execution_result": [[-1, 1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1951, "question_en": "Return the spatial analysis results in two columns: the first column A_cross_B shows the direction code where LINESTRING(25 169,89 114,40 70,86 43) crosses LINESTRING(20 140,71 74,161 53), and the second column B_cross_A shows the direction code for the reverse crossing."}
{"id": 358, "function": "ST_LineCrossingDirection", "question": "计算LINESTRING(25 169,89 114,40 70,86 43)与LINESTRING(5 90, 71 74, 20 140, 171 154)两条折线的相互交叉方向，分别返回lineA对lineB的交叉方向值A_cross_B和lineB对lineA的交叉方向值B_cross_A。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(5 90, 71 74, 20 140, 171 154)') AS lineB ) AS foo;", "execution_result": [[-2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1952, "question_en": "Calculate the mutual crossing directions between LINESTRING(25 169,89 114,40 70,86 43) and LINESTRING(5 90, 71 74, 20 140, 171 154), returning the crossing direction value A_cross_B of lineA relative to lineB and the crossing direction value B_cross_A of lineB relative to lineA."}
{"id": 358, "function": "ST_LineCrossingDirection", "question": "对于由四个顶点构成的折线LINESTRING(25 169,89 114,40 70,86 43)和LINESTRING(5 90, 71 74, 20 140, 171 154)，使用ST_LineCrossingDirection函数检测两者相交时lineA相对于lineB的穿越方向A_cross_B，以及lineB相对于lineA的穿越方向B_cross_A。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(5 90, 71 74, 20 140, 171 154)') AS lineB ) AS foo;", "execution_result": [[-2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1953, "question_en": "For the linestrings LINESTRING(25 169,89 114,40 70,86 43) and LINESTRING(5 90, 71 74, 20 140, 171 154), use the ST_LineCrossingDirection function to detect the crossing direction of lineA relative to lineB (A_cross_B) and the crossing direction of lineB relative to lineA (B_cross_A) when they intersect."}
{"id": 358, "function": "ST_LineCrossingDirection", "question": "基于折线LINESTRING(25 169,89 114,40 70,86 43)（lineA）和LINESTRING(5 90, 71 74, 20 140, 171 154)（lineB）的精确坐标数据，查询两者空间相交时lineA从lineB的哪一侧穿越到另一侧（A_cross_B），以及lineB从lineA的哪一侧穿越到另一侧（B_cross_A）。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(5 90, 71 74, 20 140, 171 154)') AS lineB ) AS foo;", "execution_result": [[-2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1954, "question_en": "Based on the precise coordinate data of linestrings LINESTRING(25 169,89 114,40 70,86 43) (lineA) and LINESTRING(5 90, 71 74, 20 140, 171 154) (lineB), query which side of lineB lineA crosses from to the other side (A_cross_B), and which side of lineA lineB crosses from to the other side (B_cross_A)."}
{"id": 358, "function": "ST_LineCrossingDirection", "question": "输出LINESTRING(25 169,89 114,40 70,86 43)相对于LINESTRING(5 90, 71 74, 20 140, 171 154)的交叉方向值A_cross_B，以及LINESTRING(5 90, 71 74, 20 140, 171 154)相对于LINESTRING(25 169,89 114,40 70,86 43)的交叉方向值B_cross_A。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(5 90, 71 74, 20 140, 171 154)') AS lineB) AS foo;", "execution_result": [[-2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1955, "question_en": "Output the cross direction value A_cross_B of LINESTRING(25 169,89 114,40 70,86 43) relative to LINESTRING(5 90, 71 74, 20 140, 171 154), and the cross direction value B_cross_A of LINESTRING(5 90, 71 74, 20 140, 171 154) relative to LINESTRING(25 169,89 114,40 70,86 43)."}
{"id": 358, "function": "ST_LineCrossingDirection", "question": "计算并返回两个结果列：A_cross_B表示LINESTRING(25 169,89 114,40 70,86 43)从哪个方向穿过LINESTRING(5 90, 71 74, 20 140, 171 154)，B_cross_A表示LINESTRING(5 90, 71 74, 20 140, 171 154)从哪个方向穿过LINESTRING(25 169,89 114,40 70,86 43)。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(5 90, 71 74, 20 140, 171 154)') AS lineB) AS foo;", "execution_result": [[-2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1956, "question_en": "Compute and return two result columns: A_cross_B indicates the direction in which LINESTRING(25 169,89 114,40 70,86 43) crosses LINESTRING(5 90, 71 74, 20 140, 171 154), and B_cross_A indicates the direction in which LINESTRING(5 90, 71 74, 20 140, 171 154) crosses LINESTRING(25 169,89 114,40 70,86 43)."}
{"id": 358, "function": "ST_LineCrossingDirection", "question": "输出一个包含两列的结果表，其中A_cross_B列显示LINESTRING(25 169,89 114,40 70,86 43)与LINESTRING(5 90, 71 74, 20 140, 171 154)的交叉方向值，B_cross_A列显示LINESTRING(5 90, 71 74, 20 140, 171 154)与LINESTRING(25 169,89 114,40 70,86 43)的交叉方向值。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(5 90, 71 74, 20 140, 171 154)') AS lineB) AS foo;", "execution_result": [[-2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1957, "question_en": "Output a result table with two columns: the A_cross_B column displays the crossing direction value between LINESTRING(25 169,89 114,40 70,86 43) and LINESTRING(5 90, 71 74, 20 140, 171 154), and the B_cross_A column displays the crossing direction value between LINESTRING(5 90, 71 74, 20 140, 171 154) and LINESTRING(25 169,89 114,40 70,86 43)."}
{"id": 359, "function": "ST_OrderingEquals", "question": "判断由点(0 0)到点(10 10)的直线段LINESTRING(0 0, 10 10)与经过中间点(5 5)的折线LINESTRING(0 0, 5 5, 10 10)在点的顺序和几何形状上是否严格相等。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1958, "question_en": "Determine whether the line segment LINESTRING(0 0, 10 10) from point (0 0) to point (10 10) is strictly equal in point order and geometric shape to the polyline LINESTRING(0 0, 5 5, 10 10) that passes through the midpoint (5 5)."}
{"id": 359, "function": "ST_OrderingEquals", "question": "比较LINESTRING(0 0, 10 10)和LINESTRING(0 0, 5 5, 10 10)两个线段的几何顺序是否完全相同，其中第一个线段连接(0 0)和(10 10)，第二个线段在(0 0)和(10 10)之间插入了(5 5)。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1959, "question_en": "Compare whether the geometric order of the two linestrings LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10) is exactly the same, where the first connects (0 0) and (10 10), and the second inserts (5 5) between (0 0) and (10 10)."}
{"id": 359, "function": "ST_OrderingEquals", "question": "验证LINESTRING(0 0, 10 10)和LINESTRING(0 0, 5 5, 10 10)是否满足ST_OrderingEquals函数的严格相等条件，即两个线段的点顺序和几何形状完全一致，尽管后者多了一个中间点(5 5)。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1960, "question_en": "Verify if LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10) meet the strict equality condition of the ST_OrderingEquals function, meaning the point order and geometric shape of both linestrings are identical, despite the latter having an extra midpoint (5 5)."}
{"id": 359, "function": "ST_OrderingEquals", "question": "输出比较LINESTRING(0 0, 10 10)和LINESTRING(0 0, 5 5, 10 10)是否在点和顺序上完全相等的布尔值结果。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1961, "question_en": "Output a boolean result comparing whether LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10) are exactly equal in points and order."}
{"id": 359, "function": "ST_OrderingEquals", "question": "输出ST_OrderingEquals函数对LINESTRING(0 0, 10 10)和LINESTRING(0 0, 5 5, 10 10)的空间顺序相等性判断结果，返回值为TRUE或FALSE。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1962, "question_en": "Output the spatial ordering equality result of the ST_OrderingEquals function for LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10), returning TRUE or FALSE."}
{"id": 359, "function": "ST_OrderingEquals", "question": "输出LINESTRING(0 0, 10 10)与包含中间点5 5的LINESTRING(0 0, 5 5, 10 10)是否具有严格相同点序列的布尔值。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1963, "question_en": "Output a boolean value indicating whether LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10) containing the midpoint 5 5 have strictly identical point sequences."}
{"id": 360, "function": "ST_OrderingEquals", "question": "判断由点(0 0)和(10 10)构成的LINESTRING(0 0, 10 10)与由点(0 0)、(0 0)和(10 10)构成的LINESTRING(0 0, 0 0, 10 10)这两个线对象是否在几何顺序上完全相等。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1964, "question_en": "Determine whether the two linestring objects, LINESTRING(0 0, 10 10) formed by points (0 0) and (10 10) and LINESTRING(0 0, 0 0, 10 10) formed by points (0 0), (0 0), and (10 10), are geometrically equal in sequence."}
{"id": 360, "function": "ST_OrderingEquals", "question": "比较LINESTRING(0 0, 10 10)和LINESTRING(0 0, 0 0, 10 10)这两个线对象的几何顺序是否严格一致，其中前者包含两点(0 0)和(10 10)，后者包含三点(0 0)、(0 0)和(10 10)。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1965, "question_en": "Compare whether the geometric order of the two line objects LINESTRING(0 0, 10 10) and LINESTRING(0 0, 0 0, 10 10) is strictly consistent, where the former contains two points (0 0) and (10 10), and the latter contains three points (0 0), (0 0), and (10 10)."}
{"id": 360, "function": "ST_OrderingEquals", "question": "验证LINESTRING(0 0, 10 10)与LINESTRING(0 0, 0 0, 10 10)的几何顺序等价性，第一个线对象由起点(0 0)和终点(10 10)组成，第二个线对象由起点(0 0)、重复点(0 0)和终点(10 10)组成。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1966, "question_en": "Verify the geometric sequence equivalence between LINESTRING(0 0, 10 10) and LINESTRING(0 0, 0 0, 10 10), where the first line object consists of start point (0 0) and end point (10 10), and the second line object consists of start point (0 0), a duplicate point (0 0), and end point (10 10)."}
{"id": 360, "function": "ST_OrderingEquals", "question": "输出比较LINESTRING(0 0, 10 10)和LINESTRING(0 0, 0 0, 10 10)的几何顺序是否完全相同的布尔值结果。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1967, "question_en": "Output a boolean result comparing whether the geometric order of LINESTRING(0 0, 10 10) and LINESTRING(0 0, 0 0, 10 10) is exactly the same."}
{"id": 360, "function": "ST_OrderingEquals", "question": "判断LINESTRING(0 0, 10 10)与包含重复点LINESTRING(0 0, 0 0, 10 10)的几何顺序是否严格一致，输出结果为TRUE或FALSE。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1968, "question_en": "Determine if the geometric order of LINESTRING(0 0, 10 10) strictly matches that of LINESTRING(0 0, 0 0, 10 10) containing duplicate points, outputting TRUE or FALSE."}
{"id": 360, "function": "ST_OrderingEquals", "question": "检查LINESTRING(0 0, 10 10)和LINESTRING(0 0, 0 0, 10 10)的点顺序和坐标值是否完全相同，返回布尔类型的比较结果。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1969, "question_en": "Check if the point order and coordinate values of LINESTRING(0 0, 10 10) and LINESTRING(0 0, 0 0, 10 10) are exactly the same, returning a boolean comparison result."}
{"id": 361, "function": "ST_OrderingEquals", "question": "判断将LINESTRING(0 0, 10 10)的坐标点顺序反转后生成的几何对象，是否与LINESTRING(0 0, 0 0, 10 10)在坐标顺序和几何结构上完全相等。", "sql": "SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1970, "question_en": "Determine whether the geometric object formed by reversing the coordinate order of LINESTRING(0 0, 10 10) is completely equal in coordinate sequence and geometric structure to LINESTRING(0 0, 0 0, 10 10)."}
{"id": 361, "function": "ST_OrderingEquals", "question": "比较反转后的LINESTRING(0 0, 10 10)与包含重复点LINESTRING(0 0, 0 0, 10 10)的几何对象，检查两者是否具有完全相同的坐标顺序和结构。", "sql": "SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1971, "question_en": "Compare the reversed LINESTRING(0 0, 10 10) with the LINESTRING(0 0, 0 0, 10 10) containing duplicate points to check if they have identical coordinate order and structure."}
{"id": 361, "function": "ST_OrderingEquals", "question": "验证ST_Reverse函数处理LINESTRING(0 0, 10 10)后生成的几何对象，是否与LINESTRING(0 0, 0 0, 10 10)在空间顺序和顶点分布上严格一致。", "sql": "SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1972, "question_en": "Verify whether the geometry object generated by the ST_Reverse function processing LINESTRING(0 0, 10 10) is strictly consistent with LINESTRING(0 0, 0 0, 10 10) in spatial order and vertex distribution."}
{"id": 361, "function": "ST_OrderingEquals", "question": "输出比较结果：将LINESTRING(0 0, 10 10)反转后与包含重复点(0 0)的LINESTRING(0 0, 0 0, 10 10)进行严格顺序相等性判断的布尔值。", "sql": "SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1973, "question_en": "Output the comparison result: a boolean value indicating the strict sequential equality check between the reversed LINESTRING(0 0, 10 10) and LINESTRING(0 0, 0 0, 10 10) containing duplicate points."}
{"id": 361, "function": "ST_OrderingEquals", "question": "输出布尔值结果：判断反转后的LINESTRING(0 0, 10 10)与包含两个连续(0 0)点的LINESTRING(0 0, 0 0, 10 10)在点顺序上是否完全一致。", "sql": "SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1974, "question_en": "Output a boolean result: determine if the reversed LINESTRING(0 0, 10 10) is exactly identical in point order to the LINESTRING(0 0, 0 0, 10 10) which contains two consecutive (0 0) points."}
{"id": 361, "function": "ST_OrderingEquals", "question": "输出ST_OrderingEquals函数的执行结果：比较反转LINESTRING(0 0, 10 10)得到的几何体与LINESTRING(0 0, 0 0, 10 10)的点顺序是否完全相同。", "sql": "SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1975, "question_en": "Output the execution result of the ST_OrderingEquals function: compare whether the point order of the reversed LINESTRING(0 0, 10 10) is exactly the same as that of LINESTRING(0 0, 0 0, 10 10)."}
{"id": 362, "function": "ST_Overlaps", "question": "对于由顶点坐标(40 170, 90 30, 180 100, 40 170)构成的POLYGON对象a，和由顶点坐标(110 180, 20 60, 130 90, 110 180)构成的POLYGON对象b，计算它们的空间关系：是否重叠(ST_Overlaps)、是否交叉(ST_Crosses)、是否相交(ST_Intersects)、b是否包含a(ST_Contains)，并分别输出a的维度(ST_Dimension)、b的维度(ST_Dimension)以及它们交集的维度(ST_Dimension(ST_Intersection))。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b, a) AS b_contains_a, ST_Dimension(a) AS dim_a, ST_Dimension(b) AS dim_b, ST_Dimension(ST_Intersection(a,b)) AS dim_int FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('POLYGON ((110 180, 20 60, 130 90, 110 180))') AS b) AS t;", "execution_result": [[true, false, true, false, 2, 2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1976, "question_en": "For POLYGON object a with vertex coordinates (40 170, 90 30, 180 100, 40 170) and POLYGON object b with vertex coordinates (110 180, 20 60, 130 90, 110 180), calculate their spatial relationships: whether they overlap (ST_Overlaps), cross (ST_Crosses), intersect (ST_Intersects), and whether b contains a (ST_Contains). Also output the dimension of a (ST_Dimension), the dimension of b (ST_Dimension), and the dimension of their intersection (ST_Dimension(ST_Intersection))."}
{"id": 362, "function": "ST_Overlaps", "question": "给定两个多边形：a的顶点序列为(40 170, 90 30, 180 100, 40 170)，b的顶点序列为(110 180, 20 60, 130 90, 110 180)，请分析它们的空间关系：重叠性(ST_Overlaps)、交叉性(ST_Crosses)、相交性(ST_Intersects)、包含性(ST_Contains)，并计算各自维度(a和b的ST_Dimension)及交集维度(ST_Dimension(ST_Intersection))。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b, a) AS b_contains_a, ST_Dimension(a) AS dim_a, ST_Dimension(b) AS dim_b, ST_Dimension(ST_Intersection(a,b)) AS dim_int FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('POLYGON ((110 180, 20 60, 130 90, 110 180))') AS b) AS t;", "execution_result": [[true, false, true, false, 2, 2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1977, "question_en": "Given two polygons: a with vertex sequence (40 170, 90 30, 180 100, 40 170) and b with vertex sequence (110 180, 20 60, 130 90, 110 180), analyze their spatial relationships: overlap (ST_Overlaps), crossing (ST_Crosses), intersection (ST_Intersects), containment (ST_Contains), and compute their respective dimensions (ST_Dimension for a and b) and the dimension of their intersection (ST_Dimension(ST_Intersection))."}
{"id": 362, "function": "ST_Overlaps", "question": "基于POLYGON a（坐标点：40 170, 90 30, 180 100, 40 170）和POLYGON b（坐标点：110 180, 20 60, 130 90, 110 180），执行以下空间分析：判断两者是否重叠(ST_Overlaps)、是否交叉(ST_Crosses)、是否相交(ST_Intersects)、b是否完全包含a(ST_Contains)，同时返回a的维度值(dim_a)、b的维度值(dim_b)以及两者交集的维度值(dim_int)。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b, a) AS b_contains_a, ST_Dimension(a) AS dim_a, ST_Dimension(b) AS dim_b, ST_Dimension(ST_Intersection(a,b)) AS dim_int FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('POLYGON ((110 180, 20 60, 130 90, 110 180))') AS b) AS t;", "execution_result": [[true, false, true, false, 2, 2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1978, "question_en": "Based on POLYGON a (coordinates: 40 170, 90 30, 180 100, 40 170) and POLYGON b (coordinates: 110 180, 20 60, 130 90, 110 180), perform the following spatial analyses: determine whether they overlap (ST_Overlaps), cross (ST_Crosses), intersect (ST_Intersects), and whether b fully contains a (ST_Contains), while returning the dimension value of a (dim_a), the dimension value of b (dim_b), and the dimension value of their intersection (dim_int)."}
{"id": 362, "function": "ST_Overlaps", "question": "输出POLYGON ((40 170, 90 30, 180 100, 40 170))与POLYGON ((110 180, 20 60, 130 90, 110 180))的空间关系布尔值（包括overlaps、crosses、intersects、b_contains_a）以及各几何体维度（dim_a、dim_b）和交集维度（dim_int）的完整结果表。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b, a) AS b_contains_a, ST_Dimension(a) AS dim_a, ST_Dimension(b) AS dim_b, ST_Dimension(ST_Intersection(a,b)) AS dim_int FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('POLYGON ((110 180, 20 60, 130 90, 110 180))') AS b) AS t;", "execution_result": [[true, false, true, false, 2, 2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1979, "question_en": "Output the complete result table of the spatial relationship boolean values (including overlaps, crosses, intersects, b_contains_a) between POLYGON ((40 170, 90 30, 180 100, 40 170)) and POLYGON ((110 180, 20 60, 130 90, 110 180)), as well as the dimensions of each geometry (dim_a, dim_b) and the intersection dimension (dim_int)."}
{"id": 362, "function": "ST_Overlaps", "question": "以表格形式返回POLYGON ((40 170, 90 30, 180 100, 40 170))与POLYGON ((110 180, 20 60, 130 90, 110 180))的7项空间分析结果，包括重叠检测、交叉检测、相交检测、包含关系检测，以及原始几何体与交集几何体的维度值。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b, a) AS b_contains_a, ST_Dimension(a) AS dim_a, ST_Dimension(b) AS dim_b, ST_Dimension(ST_Intersection(a,b)) AS dim_int FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('POLYGON ((110 180, 20 60, 130 90, 110 180))') AS b) AS t;", "execution_result": [[true, false, true, false, 2, 2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1980, "question_en": "Return the 7 spatial analysis results of POLYGON ((40 170, 90 30, 180 100, 40 170)) and POLYGON ((110 180, 20 60, 130 90, 110 180)) in tabular form, including overlap detection, cross detection, intersect detection, containment relationship detection, and the dimension values of the original geometries and the intersection geometry."}
{"id": 362, "function": "ST_Overlaps", "question": "精确输出两个多边形（POLYGON ((40 170, 90 30, 180 100, 40 170))和POLYGON ((110 180, 20 60, 130 90, 110 180))）的空间谓词计算结果和维度分析，要求返回包含7列（overlaps、crosses、intersects、b_contains_a、dim_a、dim_b、dim_int）的结构化数据。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b, a) AS b_contains_a, ST_Dimension(a) AS dim_a, ST_Dimension(b) AS dim_b, ST_Dimension(ST_Intersection(a,b)) AS dim_int FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('POLYGON ((110 180, 20 60, 130 90, 110 180))') AS b) AS t;", "execution_result": [[true, false, true, false, 2, 2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1981, "question_en": "Accurately output the spatial predicate calculation results and dimensional analysis of two polygons (POLYGON ((40 170, 90 30, 180 100, 40 170)) and POLYGON ((110 180, 20 60, 130 90, 110 180))), returning structured data with 7 columns (overlaps, crosses, intersects, b_contains_a, dim_a, dim_b, dim_int)."}
{"id": 363, "function": "ST_Overlaps", "question": "判断由顶点坐标(40 170)、(90 30)、(180 100)、(40 170)构成的闭合多边形与起点(10 10)终点(190 190)的直线段之间是否存在重叠、相交、穿越或包含关系。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(a,b) AS contains FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('LINESTRING(10 10, 190 190)') AS b) AS t;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1982, "question_en": "Determine if there is any overlap, intersection, crossing, or containment relationship between the closed polygon formed by vertices (40 170), (90 30), (180 100), (40 170) and the line segment from start point (10 10) to end point (190 190)."}
{"id": 363, "function": "ST_Overlaps", "question": "计算POLYGON((40 170, 90 30, 180 100, 40 170))与LINESTRING(10 10, 190 190)的空间关系，返回两者是否重叠(overlaps)、交叉(crosses)、相交(intersects)或包含(contains)的布尔结果。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(a,b) AS contains FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('LINESTRING(10 10, 190 190)') AS b) AS t;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1983, "question_en": "Determine the spatial relationship between POLYGON((40 170, 90 30, 180 100, 40 170)) and LINESTRING(10 10, 190 190), returning boolean results for whether they overlap, cross, intersect, or contain each other."}
{"id": 363, "function": "ST_Overlaps", "question": "对由四点坐标40 170、90 30、180 100、40 170定义的多边形和端点10 10到190 190的直线进行空间谓词分析，检测重叠、穿越、相交和包含四种拓扑关系。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(a,b) AS contains FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('LINESTRING(10 10, 190 190)') AS b) AS t;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1984, "question_en": "Perform spatial predicate analysis on the polygon defined by the four points (40 170, 90 30, 180 100, 40 170) and the line segment from (10 10) to (190 190), detecting four topological relationships: overlap, crossing, intersection, and containment."}
{"id": 363, "function": "ST_Overlaps", "question": "输出POLYGON ((40 170, 90 30, 180 100, 40 170))与LINESTRING(10 10, 190 190)之间的空间关系检测结果，包括是否重叠（overlaps）、是否交叉（crosses）、是否相交（intersects）以及多边形是否包含线（contains）的布尔值。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(a,b) AS contains FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('LINESTRING(10 10, 190 190)') AS b) AS t;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1985, "question_en": "Output the spatial relationship detection results between POLYGON ((40 170, 90 30, 180 100, 40 170)) and LINESTRING(10 10, 190 190), including boolean values for whether they overlap (overlaps), cross (crosses), intersect (intersects), and whether the polygon contains the line (contains)."}
{"id": 363, "function": "ST_Overlaps", "question": "以四列布尔值形式输出：POLYGON ((40 170, 90 30, 180 100, 40 170))是否与LINESTRING(10 10, 190 190)存在空间重叠、交叉、相交或包含关系。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(a,b) AS contains FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('LINESTRING(10 10, 190 190)') AS b) AS t;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1986, "question_en": "Output four boolean columns indicating whether the POLYGON ((40 170, 90 30, 180 100, 40 170)) spatially overlaps, crosses, intersects, or contains the LINESTRING(10 10, 190 190)."}
{"id": 363, "function": "ST_Overlaps", "question": "返回表格式结果，包含POLYGON ((40 170, 90 30, 180 100, 40 170))对LINESTRING(10 10, 190 190)的四种空间谓词（ST_Overlaps/ST_Crosses/ST_Intersects/ST_Contains）的验证结果。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(a,b) AS contains FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('LINESTRING(10 10, 190 190)') AS b) AS t;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1987, "question_en": "Return a tabular result showing the validation outcomes of four spatial predicates (ST_Overlaps/ST_Crosses/ST_Intersects/ST_Contains) between POLYGON ((40 170, 90 30, 180 100, 40 170)) and LINESTRING(10 10, 190 190)."}
{"id": 364, "function": "ST_Overlaps", "question": "判断二维点POINT(100 100)与折线LINESTRING(30 50, 40 160, 160 40, 180 160)的空间关系，包括是否重叠(ST_Overlaps)、是否交叉(ST_Crosses)、是否相交(ST_Intersects)，以及折线是否包含点(ST_Contains)。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b,a) AS b_contains_a FROM (SELECT ST_GeomFromText('POINT (100 100)') AS a, ST_GeomFromText('LINESTRING (30 50, 40 160, 160 40, 180 160)') AS b) AS t;", "execution_result": [[false, false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1988, "question_en": "Determine the spatial relationship between the 2D point POINT(100 100) and the polyline LINESTRING(30 50, 40 160, 160 40, 180 160), including whether they overlap (ST_Overlaps), cross (ST_Crosses), intersect (ST_Intersects), and whether the polyline contains the point (ST_Contains)."}
{"id": 364, "function": "ST_Overlaps", "question": "给定点POINT(100 100)和由四个顶点(30 50, 40 160, 160 40, 180 160)构成的折线，计算并返回它们的空间谓词结果：重叠性、交叉性、相交性及折线对点的包含性。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b,a) AS b_contains_a FROM (SELECT ST_GeomFromText('POINT (100 100)') AS a, ST_GeomFromText('LINESTRING (30 50, 40 160, 160 40, 180 160)') AS b) AS t;", "execution_result": [[false, false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1989, "question_en": "Given the point POINT(100 100) and a polyline formed by four vertices (30 50, 40 160, 160 40, 180 160), compute and return their spatial predicate results: overlap, crossing, intersection, and the polyline's containment of the point."}
{"id": 364, "function": "ST_Overlaps", "question": "对坐标为(100,100)的二维点对象和由坐标串(30 50, 40 160, 160 40, 180 160)定义的折线对象，执行四种空间关系分析（重叠、交叉、相交、包含），并输出布尔结果。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b,a) AS b_contains_a FROM (SELECT ST_GeomFromText('POINT (100 100)') AS a, ST_GeomFromText('LINESTRING (30 50, 40 160, 160 40, 180 160)') AS b) AS t;", "execution_result": [[false, false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1990, "question_en": "Perform four spatial relationship analyses (overlap, cross, intersect, contain) between a 2D point object at (100,100) and a polyline defined by the coordinate sequence (30 50, 40 160, 160 40, 180 160), and output the Boolean results."}
{"id": 364, "function": "ST_Overlaps", "question": "输出POINT(100 100)与LINESTRING(30 50, 40 160, 160 40, 180 160)的空间关系结果，包括overlaps（重叠）、crosses（交叉）、intersects（相交）和b_contains_a（线包含点）四个布尔值。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b,a) AS b_contains_a FROM (SELECT ST_GeomFromText('POINT (100 100)') AS a, ST_GeomFromText('LINESTRING (30 50, 40 160, 160 40, 180 160)') AS b) AS t;", "execution_result": [[false, false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1991, "question_en": "Output the spatial relationship results between POINT(100 100) and LINESTRING(30 50, 40 160, 160 40, 180 160), including four boolean values: overlaps, crosses, intersects, and b_contains_a (line contains point)."}
{"id": 364, "function": "ST_Overlaps", "question": "以四列布尔值形式返回POINT(100 100)与LINESTRING(30 50, 40 160, 160 40, 180 160)的空间关系检测结果，列名分别为overlaps、crosses、intersects和b_contains_a。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b,a) AS b_contains_a FROM (SELECT ST_GeomFromText('POINT (100 100)') AS a, ST_GeomFromText('LINESTRING (30 50, 40 160, 160 40, 180 160)') AS b) AS t;", "execution_result": [[false, false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1992, "question_en": "Return the spatial relationship detection results between POINT(100 100) and LINESTRING(30 50, 40 160, 160 40, 180 160) as four boolean columns named overlaps, crosses, intersects, and b_contains_a."}
{"id": 364, "function": "ST_Overlaps", "question": "查询结果需明确显示二维点POINT(100 100)是否与折线LINESTRING(30 50, 40 160, 160 40, 180 160)存在重叠、交叉、相交或包含关系，输出为四列布尔值表格。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b,a) AS b_contains_a FROM (SELECT ST_GeomFromText('POINT (100 100)') AS a, ST_GeomFromText('LINESTRING (30 50, 40 160, 160 40, 180 160)') AS b) AS t;", "execution_result": [[false, false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1993, "question_en": "The query result must clearly indicate whether the 2D point POINT(100 100) overlaps, crosses, intersects, or is contained by the polyline LINESTRING(30 50, 40 160, 160 40, 180 160), output as a four-column boolean table."}
{"id": 365, "function": "ST_Relate", "question": "判断POINT(1 2)与以POINT(1 2)为中心、半径为2的缓冲区之间的空间关系是否匹配DE-9IM模式矩阵'0FFFFF212'。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2), '0FFFFF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1994, "question_en": "Determine whether the spatial relationship between POINT(1 2) and a buffer centered at POINT(1 2) with a radius of 2 matches the DE-9IM pattern matrix '0FFFFF212'."}
{"id": 365, "function": "ST_Relate", "question": "使用DE-9IM模式矩阵'0FFFFF212'验证二维点POINT(1 2)是否位于自身缓冲区内，该缓冲区由POINT(1 2)生成且缓冲距离为2。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2), '0FFFFF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1995, "question_en": "Using the DE-9IM pattern matrix '0FFFFF212', verify whether the 2D point POINT(1 2) lies within its own buffer zone generated with a buffer distance of 2."}
{"id": 365, "function": "ST_Relate", "question": "检查坐标(1,2)的二维点与以相同坐标为中心、缓冲半径为2的圆形区域之间的空间拓扑关系是否符合'0FFFFF212'矩阵定义的相交规则。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2), '0FFFFF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1996, "question_en": "Check if the spatial topological relationship between the 2D point at coordinates (1,2) and the circular buffer zone centered at the same coordinates with a radius of 2 complies with the intersection rules defined by the '0FFFFF212' matrix."}
{"id": 365, "function": "ST_Relate", "question": "输出POINT(1 2)与以POINT(1 2)为中心、半径为2的缓冲区之间的空间关系矩阵，使用DE-9IM模式'0FFFFF212'进行匹配验证的结果。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2), '0FFFFF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1997, "question_en": "Output the spatial relationship matrix between POINT(1 2) and its buffer with a radius of 2, using the DE-9IM pattern '0FFFFF212' for matching validation."}
{"id": 365, "function": "ST_Relate", "question": "检查POINT(1 2)是否完全包含在以POINT(1 2)为圆心、2为半径的圆形缓冲区内，并返回DE-9IM模式'0FFFFF212'的匹配结果。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2), '0FFFFF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1998, "question_en": "Check if POINT(1 2) is completely contained within a circular buffer centered at POINT(1 2) with a radius of 2, and return the DE-9IM pattern '0FFFFF212' matching result."}
{"id": 365, "function": "ST_Relate", "question": "基于DE-9IM模式'0FFFFF212'，输出二维点POINT(1 2)与半径为2的POINT(1 2)缓冲区之间的空间拓扑关系验证值。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2), '0FFFFF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1999, "question_en": "Based on the DE-9IM pattern '0FFFFF212', output the spatial topological relationship validation value between the 2D point POINT(1 2) and the buffer of POINT(1 2) with a radius of 2."}
{"id": 366, "function": "ST_Relate", "question": "计算二维点POINT(1 2)与以POINT(1 2)为中心、半径为2的缓冲区之间的空间关系，并使用DE-9IM模式矩阵'*FF*FF212'进行匹配验证。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer('POINT(1 2)', 2), '*FF*FF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2000, "question_en": "Calculate the spatial relationship between the 2D point POINT(1 2) and a buffer centered at POINT(1 2) with a radius of 2, and validate the match using the DE-9IM pattern matrix '*FF*FF212'."}
{"id": 366, "function": "ST_Relate", "question": "基于DE-9IM模式'*FF*FF212'，判断二维点POINT(1 2)是否位于以POINT(1 2)为中心、缓冲距离为2的圆形区域内。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer('POINT(1 2)', 2), '*FF*FF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2001, "question_en": "Based on the DE-9IM pattern '*FF*FF212', determine if the 2D point POINT(1 2) lies within the circular area centered at POINT(1 2) with a buffer distance of 2."}
{"id": 366, "function": "ST_Relate", "question": "使用空间关系函数ST_Relate，验证二维点POINT(1 2)与半径为2的POINT(1 2)缓冲区是否满足'*FF*FF212'定义的拓扑关系规则。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer('POINT(1 2)', 2), '*FF*FF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2002, "question_en": "Use the spatial relationship function ST_Relate to verify whether the 2D point POINT(1 2) and the buffer of POINT(1 2) with a radius of 2 satisfy the topological relationship rule defined by '*FF*FF212'."}
{"id": 366, "function": "ST_Relate", "question": "输出POINT(1 2)与以POINT(1 2)为中心、半径为2的缓冲区之间的空间关系矩阵，矩阵模式为'*FF*FF212'。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer('POINT(1 2)', 2), '*FF*FF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2003, "question_en": "Output the spatial relationship matrix between POINT(1 2) and its buffer with a radius of 2 centered at POINT(1 2), using the matrix pattern '*FF*FF212'."}
{"id": 366, "function": "ST_Relate", "question": "使用DE-9IM模式'*FF*FF212'，计算POINT(1 2)与半径为2的圆形缓冲区的空间关系，结果返回9交模型矩阵。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer('POINT(1 2)', 2), '*FF*FF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2004, "question_en": "Using the DE-9IM pattern '*FF*FF212', calculate the spatial relationship between POINT(1 2) and a circular buffer with radius 2, returning the 9-intersection model matrix."}
{"id": 366, "function": "ST_Relate", "question": "以'*FF*FF212'为关系判定模式，输出二维点POINT(1 2)与自身2单位距离缓冲区的DE-9IM拓扑关系编码值。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer('POINT(1 2)', 2), '*FF*FF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2005, "question_en": "Using the relation predicate pattern '*FF*FF212', output the DE-9IM topological relation code between the point POINT(1 2) and its 2-unit distance buffer."}
{"id": 367, "function": "ST_Relate", "question": "计算二维点POINT(1 2)与以POINT(1 2)为中心、半径为2的缓冲区之间的空间关系矩阵。", "sql": "SELECT ST_Relate( 'POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2));", "execution_result": [["0FFFFF212"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2006, "question_en": "Compute the spatial relationship matrix between the 2D point POINT(1 2) and its buffer with a radius of 2 centered at POINT(1 2)."}
{"id": 367, "function": "ST_Relate", "question": "使用DE-9IM模型分析二维点POINT(1 2)与POINT(1 2)的2单位半径缓冲区的拓扑关系。", "sql": "SELECT ST_Relate( 'POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2));", "execution_result": [["0FFFFF212"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2007, "question_en": "Analyze the topological relationship between the 2D point POINT(1 2) and its 2-unit radius buffer using the DE-9IM model."}
{"id": 367, "function": "ST_Relate", "question": "获取二维点POINT(1 2)在自身2单位缓冲区内时的空间关系九交矩阵结果。", "sql": "SELECT ST_Relate( 'POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2));", "execution_result": [["0FFFFF212"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2008, "question_en": "Obtain the nine-intersection matrix result for the spatial relationship when the 2D point POINT(1 2) is within its own 2-unit buffer."}
{"id": 367, "function": "ST_Relate", "question": "输出POINT(1 2)与以POINT(1 2)为中心、半径为2的缓冲区之间的空间关系矩阵字符串。", "sql": "SELECT ST_Relate( 'POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2));", "execution_result": [["0FFFFF212"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2009, "question_en": "Output the spatial relationship matrix string between POINT(1 2) and the buffer with POINT(1 2) as the center and a radius of 2."}
{"id": 367, "function": "ST_Relate", "question": "返回POINT(1 2)与POINT(1 2)的2单位半径缓冲区的DE-9IM空间关系编码结果。", "sql": "SELECT ST_Relate( 'POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2));", "execution_result": [["0FFFFF212"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2010, "question_en": "Return the DE-9IM spatial relation code between POINT(1 2) and the 2-unit radius buffer of POINT(1 2)."}
{"id": 367, "function": "ST_Relate", "question": "计算并输出二维点POINT(1 2)与POINT(1 2)的2单位缓冲区域的空间拓扑关系九交模型字符串。", "sql": "SELECT ST_Relate( 'POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2));", "execution_result": [["0FFFFF212"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2011, "question_en": "Compute and output the 9-intersection model string for the spatial topological relationship between the 2D point POINT(1 2) and its 2-unit buffer zone."}
{"id": 368, "function": "ST_Relate", "question": "计算LINESTRING(1 2, 3 4)和LINESTRING(5 6, 7 8)这两条线段之间的空间关系，返回DE-9IM矩阵。", "sql": "SELECT ST_Relate( 'LINESTRING(1 2, 3 4)', 'LINESTRING(5 6, 7 8)' );", "execution_result": [["FF1FF0102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2012, "question_en": "Calculate the spatial relationship between the linestrings LINESTRING(1 2, 3 4) and LINESTRING(5 6, 7 8), returning the DE-9IM matrix."}
{"id": 368, "function": "ST_Relate", "question": "使用ST_Relate函数分析LINESTRING(1 2, 3 4)与LINESTRING(5 6, 7 8)之间的拓扑关系，返回9交模型矩阵。", "sql": "SELECT ST_Relate( 'LINESTRING(1 2, 3 4)', 'LINESTRING(5 6, 7 8)' );", "execution_result": [["FF1FF0102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2013, "question_en": "Use the ST_Relate function to analyze the topological relationship between LINESTRING(1 2, 3 4) and LINESTRING(5 6, 7 8), returning the 9-intersection model matrix."}
{"id": 368, "function": "ST_Relate", "question": "查询LINESTRING(1 2, 3 4)和LINESTRING(5 6, 7 8)这两个几何对象的空间拓扑关系，返回维度扩展的9交模型结果。", "sql": "SELECT ST_Relate( 'LINESTRING(1 2, 3 4)', 'LINESTRING(5 6, 7 8)' );", "execution_result": [["FF1FF0102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2014, "question_en": "Query the spatial topological relationship between the geometries LINESTRING(1 2, 3 4) and LINESTRING(5 6, 7 8), returning the Dimensionally Extended 9-Intersection Model result."}
{"id": 368, "function": "ST_Relate", "question": "输出LINESTRING(1 2, 3 4)和LINESTRING(5 6, 7 8)之间的空间关系矩阵，矩阵格式为9字符DE-9IM字符串。", "sql": "SELECT ST_Relate( 'LINESTRING(1 2, 3 4)', 'LINESTRING(5 6, 7 8)' );", "execution_result": [["FF1FF0102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2015, "question_en": "Output the spatial relationship matrix between LINESTRING(1 2, 3 4) and LINESTRING(5 6, 7 8) in the 9-character DE-9IM string format."}
{"id": 368, "function": "ST_Relate", "question": "计算LINESTRING(1 2, 3 4)与LINESTRING(5 6, 7 8)的空间拓扑关系，返回结果是DE-9IM格式的字符串。", "sql": "SELECT ST_Relate( 'LINESTRING(1 2, 3 4)', 'LINESTRING(5 6, 7 8)' );", "execution_result": [["FF1FF0102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2016, "question_en": "Calculate the spatial topological relationship between LINESTRING(1 2, 3 4) and LINESTRING(5 6, 7 8), returning the result as a DE-9IM format string."}
{"id": 368, "function": "ST_Relate", "question": "ST_Relate函数对LINESTRING(1 2, 3 4)和LINESTRING(5 6, 7 8)进行空间关系分析后，输出9字符字符串。", "sql": "SELECT ST_Relate( 'LINESTRING(1 2, 3 4)', 'LINESTRING(5 6, 7 8)' );", "execution_result": [["FF1FF0102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2017, "question_en": "The ST_Relate function outputs a 9-character string after analyzing the spatial relationship between LINESTRING(1 2, 3 4) and LINESTRING(5 6, 7 8)."}
{"id": 369, "function": "ST_Relate", "question": "计算LINESTRING(1 1, 3 3)与MULTILINESTRING((3 3, 3 5), (3 3, 5 3))的空间关系，分别返回模2边界节点规则（参数1）和端点规则（参数2）的九交模型矩阵结果。", "sql": "WITH data AS (SELECT 'LINESTRING(1 1, 3 3)'::geometry AS a_line, 'MULTILINESTRING((3 3, 3 5), (3 3, 5 3))'::geometry AS b_multiline) SELECT ST_Relate(a_line, b_multiline, 1) AS bnr_mod2, ST_Relate(a_line, b_multiline, 2) AS bnr_endpoint FROM data;", "execution_result": [["FF10F0102", "FF1F00102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2018, "question_en": "Calculate the spatial relationship between LINESTRING(1 1, 3 3) and MULTILINESTRING((3 3, 3 5), (3 3, 5 3)), returning the 9-intersection model matrix results for the Mod-2 boundary node rule (parameter 1) and the endpoint rule (parameter 2)."}
{"id": 369, "function": "ST_Relate", "question": "对于LINESTRING(1 1, 3 3)和MULTILINESTRING((3 3, 3 5), (3 3, 5 3))这两个几何对象，使用ST_Relate函数分别输出边界节点模2规则（第3参数为1）和端点规则（第3参数为2）的拓扑关系矩阵。", "sql": "WITH data AS (SELECT 'LINESTRING(1 1, 3 3)'::geometry AS a_line, 'MULTILINESTRING((3 3, 3 5), (3 3, 5 3))'::geometry AS b_multiline) SELECT ST_Relate(a_line, b_multiline, 1) AS bnr_mod2, ST_Relate(a_line, b_multiline, 2) AS bnr_endpoint FROM data;", "execution_result": [["FF10F0102", "FF1F00102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2019, "question_en": "For the geometric objects LINESTRING(1 1, 3 3) and MULTILINESTRING((3 3, 3 5), (3 3, 5 3)), use the ST_Relate function to output the topological relationship matrices for the boundary-node modulo 2 rule (3rd parameter as 1) and the end-point rule (3rd parameter as 2)."}
{"id": 369, "function": "ST_Relate", "question": "在PostGIS中，如何通过ST_Relate函数获取LINESTRING(1 1, 3 3)与MULTILINESTRING((3 3, 3 5), (3 3, 5 3))的两种空间关系矩阵？其中参数1表示模2边界节点规则，参数2表示端点规则。", "sql": "WITH data AS (SELECT 'LINESTRING(1 1, 3 3)'::geometry AS a_line, 'MULTILINESTRING((3 3, 3 5), (3 3, 5 3))'::geometry AS b_multiline) SELECT ST_Relate(a_line, b_multiline, 1) AS bnr_mod2, ST_Relate(a_line, b_multiline, 2) AS bnr_endpoint FROM data;", "execution_result": [["FF10F0102", "FF1F00102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2020, "question_en": "In PostGIS, how to use the ST_Relate function to obtain the two spatial relationship matrices between LINESTRING(1 1, 3 3) and MULTILINESTRING((3 3, 3 5), (3 3, 5 3)), where parameter 1 represents the mod-2 boundary node rule and parameter 2 represents the endpoint rule?"}
{"id": 369, "function": "ST_Relate", "question": "输出LINESTRING(1 1, 3 3)与MULTILINESTRING((3 3, 3 5), (3 3, 5 3))的空间关系矩阵，其中bnr_mod2列使用模式1（边界节点规则模2），bnr_endpoint列使用模式2（端点规则）。", "sql": "WITH data AS (SELECT 'LINESTRING(1 1, 3 3)'::geometry AS a_line, 'MULTILINESTRING((3 3, 3 5), (3 3, 5 3))'::geometry AS b_multiline) SELECT ST_Relate(a_line, b_multiline, 1) AS bnr_mod2, ST_Relate(a_line, b_multiline, 2) AS bnr_endpoint FROM data;", "execution_result": [["FF10F0102", "FF1F00102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2021, "question_en": "Output the spatial relationship matrix between LINESTRING(1 1, 3 3) and MULTILINESTRING((3 3, 3 5), (3 3, 5 3)), where the bnr_mod2 column uses mode 1 (boundary node rule modulo 2) and the bnr_endpoint column uses mode 2 (endpoint rule)."}
{"id": 369, "function": "ST_Relate", "question": "查询结果将返回两列：bnr_mod2显示LINESTRING(1 1, 3 3)和MULTILINESTRING((3 3, 3 5), (3 3, 5 3))按模2边界节点规则计算的空间关系9交矩阵，bnr_endpoint显示按端点规则计算的结果。", "sql": "WITH data AS (SELECT 'LINESTRING(1 1, 3 3)'::geometry AS a_line, 'MULTILINESTRING((3 3, 3 5), (3 3, 5 3))'::geometry AS b_multiline) SELECT ST_Relate(a_line, b_multiline, 1) AS bnr_mod2, ST_Relate(a_line, b_multiline, 2) AS bnr_endpoint FROM data;", "execution_result": [["FF10F0102", "FF1F00102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2022, "question_en": "The query result will return two columns: bnr_mod2 shows the 9-intersection matrix of the spatial relationship between LINESTRING(1 1, 3 3) and MULTILINESTRING((3 3, 3 5), (3 3, 5 3)) calculated using the boundary node rule modulo 2, and bnr_endpoint shows the result calculated using the endpoint rule."}
{"id": 369, "function": "ST_Relate", "question": "以表格形式输出两个结果：1）LINESTRING(1 1, 3 3)与MULTILINESTRING((3 3, 3 5), (3 3, 5 3))的模2边界节点关系矩阵（bnr_mod2列），2）相同几何对象的端点关系矩阵（bnr_endpoint列）。", "sql": "WITH data AS (SELECT 'LINESTRING(1 1, 3 3)'::geometry AS a_line, 'MULTILINESTRING((3 3, 3 5), (3 3, 5 3))'::geometry AS b_multiline) SELECT ST_Relate(a_line, b_multiline, 1) AS bnr_mod2, ST_Relate(a_line, b_multiline, 2) AS bnr_endpoint FROM data;", "execution_result": [["FF10F0102", "FF1F00102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2023, "question_en": "Output two results in table format: 1) The modulo-2 boundary node relation matrix (bnr_mod2 column) between LINESTRING(1 1, 3 3) and MULTILINESTRING((3 3, 3 5), (3 3, 5 3)), and 2) The endpoint relation matrix (bnr_endpoint column) for the same geometries."}
{"id": 371, "function": "ST_RelateMatch", "question": "检查DE-9IM模式矩阵'101202FFF'是否与给定的关系模式'TTTTTTFFF'相匹配。", "sql": "SELECT ST_RelateMatch('101202FFF', 'TTTTTTFFF');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2024, "question_en": "Check if the DE-9IM pattern matrix '101202FFF' matches the given relation pattern 'TTTTTTFFF'."}
{"id": 371, "function": "ST_RelateMatch", "question": "判断空间关系矩阵'101202FFF'是否符合'TTTTTTFFF'定义的拓扑关系模式。", "sql": "SELECT ST_RelateMatch('101202FFF', 'TTTTTTFFF');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2025, "question_en": "Determine if the spatial relation matrix '101202FFF' matches the topological relation pattern defined by 'TTTTTTFFF'."}
{"id": 371, "function": "ST_RelateMatch", "question": "验证DE-9IM编码'101202FFF'是否满足'TTTTTTFFF'描述的空间关系约束条件。", "sql": "SELECT ST_RelateMatch('101202FFF', 'TTTTTTFFF');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2026, "question_en": "Verify if the DE-9IM code '101202FFF' satisfies the spatial relationship constraint described by 'TTTTTTFFF'."}
{"id": 371, "function": "ST_RelateMatch", "question": "输出比较空间关系矩阵'101202FFF'与模式矩阵'TTTTTTFFF'的匹配结果，返回值为布尔类型。", "sql": "SELECT ST_RelateMatch('101202FFF', 'TTTTTTFFF');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2027, "question_en": "Output the matching result between the spatial relation matrix '101202FFF' and the pattern matrix 'TTTTTTFFF', with the return value being a boolean type."}
{"id": 371, "function": "ST_RelateMatch", "question": "判断空间关系矩阵'101202FFF'是否完全匹配模式矩阵'TTTTTTFFF'，返回TRUE或FALSE。", "sql": "SELECT ST_RelateMatch('101202FFF', 'TTTTTTFFF');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2028, "question_en": "Determine if the spatial relation matrix '101202FFF' fully matches the pattern matrix 'TTTTTTFFF', returning TRUE or FALSE."}
{"id": 371, "function": "ST_RelateMatch", "question": "验证DE-9IM矩阵'101202FFF'是否符合'TTTTTTFFF'模式字符串定义的拓扑关系约束，输出结果为布尔值。", "sql": "SELECT ST_RelateMatch('101202FFF', 'TTTTTTFFF');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2029, "question_en": "Verify if the DE-9IM matrix '101202FFF' meets the topological relation constraint defined by the pattern string 'TTTTTTFFF', output the result as a boolean value."}
{"id": 372, "function": "ST_RelateMatch", "question": "对于包含4种空间关系模式（'Equality'模式值为'T1FF1FFF1'，'Overlaps'模式值为'T*T***T**'，'Within'模式值为'T*F**F***'，'Disjoint'模式值为'FF*FF****'）和3种位置矩阵（'non-intersecting'矩阵值为'FF1FF0212'，'overlapping'矩阵值为'1010F0212'，'inside'矩阵值为'1FF0FF212'）的交叉组合，分别计算每个矩阵与每个模式的匹配结果。", "sql": "SELECT pat.name AS relationship, pat.val AS pattern, mat.name AS position, mat.val AS matrix, ST_RelateMatch(mat.val, pat.val) AS match FROM (VALUES ( 'Equality', 'T1FF1FFF1' ), ( 'Overlaps', 'T*T***T**' ), ( 'Within', 'T*F**F***' ), ( 'Disjoint', 'FF*FF****' )) AS pat(name,val) CROSS JOIN (VALUES ('non-intersecting', 'FF1FF0212'), ('overlapping', '1010F0212'), ('inside', '1FF0FF212')) AS mat(name,val);", "execution_result": [["Equality", "T1FF1FFF1", "non-intersecting", "FF1FF0212", false], ["Equality", "T1FF1FFF1", "overlapping", "1010F0212", false], ["Equality", "T1FF1FFF1", "inside", "1FF0FF212", false], ["Overlaps", "T*T***T**", "non-intersecting", "FF1FF0212", false], ["Overlaps", "T*T***T**", "overlapping", "1010F0212", true], ["Overlaps", "T*T***T**", "inside", "1FF0FF212", false], ["Within", "T*F**F***", "non-intersecting", "FF1FF0212", false], ["Within", "T*F**F***", "overlapping", "1010F0212", false], ["Within", "T*F**F***", "inside", "1FF0FF212", true], ["Disjoint", "FF*FF****", "non-intersecting", "FF1FF0212", true], ["Disjoint", "FF*FF****", "overlapping", "1010F0212", false], ["Disjoint", "FF*FF****", "inside", "1FF0FF212", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2030, "question_en": "For the cross combination of 4 spatial relation patterns ('Equality' pattern value 'T1FF1FFF1', 'Overlaps' pattern value 'T*T***T**', 'Within' pattern value 'T*F**F***', 'Disjoint' pattern value 'FF*FF****') and 3 position matrices ('non-intersecting' matrix value 'FF1FF0212', 'overlapping' matrix value '1010F0212', 'inside' matrix value '1FF0FF212'), calculate the matching result of each matrix with each pattern respectively."}
{"id": 372, "function": "ST_RelateMatch", "question": "使用ST_RelateMatch函数检测3种空间位置矩阵（'FF1FF0212'、'1010F0212'、'1FF0FF212'）是否分别满足4种DE-9IM模式（'T1FF1FFF1'、'T*T***T**'、'T*F**F***'、'FF*FF****'），并返回布尔匹配结果。", "sql": "SELECT pat.name AS relationship, pat.val AS pattern, mat.name AS position, mat.val AS matrix, ST_RelateMatch(mat.val, pat.val) AS match FROM (VALUES ( 'Equality', 'T1FF1FFF1' ), ( 'Overlaps', 'T*T***T**' ), ( 'Within', 'T*F**F***' ), ( 'Disjoint', 'FF*FF****' )) AS pat(name,val) CROSS JOIN (VALUES ('non-intersecting', 'FF1FF0212'), ('overlapping', '1010F0212'), ('inside', '1FF0FF212')) AS mat(name,val);", "execution_result": [["Equality", "T1FF1FFF1", "non-intersecting", "FF1FF0212", false], ["Equality", "T1FF1FFF1", "overlapping", "1010F0212", false], ["Equality", "T1FF1FFF1", "inside", "1FF0FF212", false], ["Overlaps", "T*T***T**", "non-intersecting", "FF1FF0212", false], ["Overlaps", "T*T***T**", "overlapping", "1010F0212", true], ["Overlaps", "T*T***T**", "inside", "1FF0FF212", false], ["Within", "T*F**F***", "non-intersecting", "FF1FF0212", false], ["Within", "T*F**F***", "overlapping", "1010F0212", false], ["Within", "T*F**F***", "inside", "1FF0FF212", true], ["Disjoint", "FF*FF****", "non-intersecting", "FF1FF0212", true], ["Disjoint", "FF*FF****", "overlapping", "1010F0212", false], ["Disjoint", "FF*FF****", "inside", "1FF0FF212", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2031, "question_en": "Use the ST_RelateMatch function to check whether the three spatial position matrices ('FF1FF0212', '1010F0212', '1FF0FF212') satisfy the four DE-9IM patterns ('T1FF1FFF1', 'T*T***T**', 'T*F**F***', 'FF*FF****') respectively, and return the Boolean matching results."}
{"id": 372, "function": "ST_RelateMatch", "question": "输出包含relationship列（取值来自pat表的name字段）、pattern列（取值来自pat表的val字段）、position列（取值来自mat表的name字段）、matrix列（取值来自mat表的val字段）以及match列（通过ST_RelateMatch函数比较matrix和pattern值的结果）的表格，其中pat表包含4行数据（Equality-T1FF1FFF1、Overlaps-T*T***T**、Within-T*F**F***、Disjoint-FF*FF****），mat表包含3行数据（non-intersecting-FF1FF0212、overlapping-1010F0212、inside-1FF0FF212）。", "sql": "SELECT pat.name AS relationship, pat.val AS pattern, mat.name AS position, mat.val AS matrix, ST_RelateMatch(mat.val, pat.val) AS match FROM (VALUES ( 'Equality', 'T1FF1FFF1' ), ( 'Overlaps', 'T*T***T**' ), ( 'Within', 'T*F**F***' ), ( 'Disjoint', 'FF*FF****' )) AS pat(name,val) CROSS JOIN (VALUES ('non-intersecting', 'FF1FF0212'), ('overlapping', '1010F0212'), ('inside', '1FF0FF212')) AS mat(name,val);", "execution_result": [["Equality", "T1FF1FFF1", "non-intersecting", "FF1FF0212", false], ["Equality", "T1FF1FFF1", "overlapping", "1010F0212", false], ["Equality", "T1FF1FFF1", "inside", "1FF0FF212", false], ["Overlaps", "T*T***T**", "non-intersecting", "FF1FF0212", false], ["Overlaps", "T*T***T**", "overlapping", "1010F0212", true], ["Overlaps", "T*T***T**", "inside", "1FF0FF212", false], ["Within", "T*F**F***", "non-intersecting", "FF1FF0212", false], ["Within", "T*F**F***", "overlapping", "1010F0212", false], ["Within", "T*F**F***", "inside", "1FF0FF212", true], ["Disjoint", "FF*FF****", "non-intersecting", "FF1FF0212", true], ["Disjoint", "FF*FF****", "overlapping", "1010F0212", false], ["Disjoint", "FF*FF****", "inside", "1FF0FF212", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2032, "question_en": "Output a table with the columns: relationship (values from the name field of the pat table), pattern (values from the val field of the pat table), position (values from the name field of the mat table), matrix (values from the val field of the mat table), and match (result from comparing matrix and pattern values using the ST_RelateMatch function), where the pat table contains 4 rows (Equality-T1FF1FFF1, Overlaps-T*T***T**, Within-T*F**F***, Disjoint-FF*FF****) and the mat table contains 3 rows (non-intersecting-FF1FF0212, overlapping-1010F0212, inside-1FF0FF212)."}
{"id": 372, "function": "ST_RelateMatch", "question": "输出ST_RelateMatch函数的测试结果表，其中包含所有pat表定义的空间关系模式（Equality/Overlaps/Within/Disjoint及其对应的DE-9IM编码）与mat表定义的实际空间位置（non-intersecting/overlapping/inside及其DE-9IM编码）的笛卡尔积组合匹配情况。", "sql": "SELECT pat.name AS relationship, pat.val AS pattern, mat.name AS position, mat.val AS matrix, ST_RelateMatch(mat.val, pat.val) AS match FROM (VALUES ( 'Equality', 'T1FF1FFF1' ), ( 'Overlaps', 'T*T***T**' ), ( 'Within', 'T*F**F***' ), ( 'Disjoint', 'FF*FF****' )) AS pat(name,val) CROSS JOIN (VALUES ('non-intersecting', 'FF1FF0212'), ('overlapping', '1010F0212'), ('inside', '1FF0FF212')) AS mat(name,val);", "execution_result": [["Equality", "T1FF1FFF1", "non-intersecting", "FF1FF0212", false], ["Equality", "T1FF1FFF1", "overlapping", "1010F0212", false], ["Equality", "T1FF1FFF1", "inside", "1FF0FF212", false], ["Overlaps", "T*T***T**", "non-intersecting", "FF1FF0212", false], ["Overlaps", "T*T***T**", "overlapping", "1010F0212", true], ["Overlaps", "T*T***T**", "inside", "1FF0FF212", false], ["Within", "T*F**F***", "non-intersecting", "FF1FF0212", false], ["Within", "T*F**F***", "overlapping", "1010F0212", false], ["Within", "T*F**F***", "inside", "1FF0FF212", true], ["Disjoint", "FF*FF****", "non-intersecting", "FF1FF0212", true], ["Disjoint", "FF*FF****", "overlapping", "1010F0212", false], ["Disjoint", "FF*FF****", "inside", "1FF0FF212", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2033, "question_en": "Output the test result table of the ST_RelateMatch function, including all Cartesian product combinations of spatial relation patterns (Equality/Overlaps/Within/Disjoint and their corresponding DE-9IM codes) defined in the pat table with actual spatial positions (non-intersecting/overlapping/inside and their DE-9IM codes) defined in the mat table."}
{"id": 373, "function": "ST_Touches", "question": "判断由点(0 0)、(1 1)、(0 2)组成的折线LINESTRING(0 0, 1 1, 0 2)是否与点POINT(1 1)在空间上接触。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2034, "question_en": "Determine if the linestring LINESTRING(0 0, 1 1, 0 2) formed by points (0 0), (1 1), (0 2) spatially touches the point POINT(1 1)."}
{"id": 373, "function": "ST_Touches", "question": "检测二维折线LINESTRING(0 0, 1 1, 0 2)与二维点POINT(1 1)是否存在边界接触关系。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2035, "question_en": "Check if the 2D linestring LINESTRING(0 0, 1 1, 0 2) has a boundary contact relationship with the 2D point POINT(1 1)."}
{"id": 373, "function": "ST_Touches", "question": "验证几何对象LINESTRING(0 0, 1 1, 0 2)和POINT(1 1)是否满足ST_Touches函数的空间接触条件。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2036, "question_en": "Verify if the geometric objects LINESTRING(0 0, 1 1, 0 2) and POINT(1 1) satisfy the spatial contact condition of the ST_Touches function."}
{"id": 373, "function": "ST_Touches", "question": "输出LINESTRING(0 0, 1 1, 0 2)与POINT(1 1)是否接触的布尔值结果。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2037, "question_en": "Output the boolean result indicating whether LINESTRING(0 0, 1 1, 0 2) touches POINT(1 1)."}
{"id": 373, "function": "ST_Touches", "question": "判断折线LINESTRING(0 0, 1 1, 0 2)的顶点POINT(1 1)是否与其自身接触，并返回true或false。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2038, "question_en": "Determine if the vertex POINT(1 1) of the linestring LINESTRING(0 0, 1 1, 0 2) touches itself, and return true or false."}
{"id": 373, "function": "ST_Touches", "question": "检测二维折线LINESTRING(0 0, 1 1, 0 2)与二维点POINT(1 1)的空间接触关系，输出结果为布尔类型。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2039, "question_en": "Check the spatial contact relationship between the 2D linestring LINESTRING(0 0, 1 1, 0 2) and the 2D point POINT(1 1), output the result as a boolean."}
{"id": 374, "function": "ST_Touches", "question": "判断由点(0 0)、(1 1)、(0 2)组成的折线LINESTRING(0 0, 1 1, 0 2)是否与点POINT(0 2)在空间上接触。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(0 2)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2040, "question_en": "Determine if the linestring LINESTRING(0 0, 1 1, 0 2) formed by points (0 0), (1 1), (0 2) spatially touches the point POINT(0 2)."}
{"id": 374, "function": "ST_Touches", "question": "检测二维折线LINESTRING(0 0, 1 1, 0 2)的终点POINT(0 2)是否与其自身存在空间接触关系。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(0 2)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2041, "question_en": "Check if the endpoint POINT(0 2) of the 2D linestring LINESTRING(0 0, 1 1, 0 2) spatially touches the linestring itself."}
{"id": 374, "function": "ST_Touches", "question": "验证几何对象LINESTRING(0 0, 1 1, 0 2)与POINT(0 2)是否满足ST_Touches函数的空间接触条件（共享边界但不重叠）。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(0 2)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2042, "question_en": "Verify if the geometric objects LINESTRING(0 0, 1 1, 0 2) and POINT(0 2) satisfy the spatial contact condition of the ST_Touches function (share a boundary but do not overlap)."}
{"id": 374, "function": "ST_Touches", "question": "输出LINESTRING(0 0, 1 1, 0 2)和POINT(0 2)是否在空间上接触的布尔值结果。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(0 2)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2043, "question_en": "Output the boolean result indicating whether LINESTRING(0 0, 1 1, 0 2) and POINT(0 2) are spatially touching."}
{"id": 374, "function": "ST_Touches", "question": "判断由点(0 0)、(1 1)、(0 2)构成的折线与点(0 2)是否存在边界接触关系，输出结果为TRUE或FALSE。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(0 2)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2044, "question_en": "Determine if the polyline formed by points (0 0), (1 1), (0 2) has a boundary contact relationship with point (0 2), output TRUE or FALSE."}
{"id": 374, "function": "ST_Touches", "question": "检测二维线段LINESTRING(0 0, 1 1, 0 2)的终点(0 2)与独立点POINT(0 2)是否共享空间边界，返回布尔类型判定结果。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(0 2)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2045, "question_en": "Check if the endpoint (0 2) of the 2D linestring LINESTRING(0 0, 1 1, 0 2) shares a spatial boundary with the standalone point POINT(0 2), returning a boolean result."}
{"id": 375, "function": "ST_Within", "question": "以POINT(50 50)为中心点，创建半径20单位的圆形smallc和半径40单位的圆形bigc，检测以下空间关系：smallc是否在自身内部(smallinsmall)、smallc是否在bigc内部(smallinbig)、bigc是否在smallc内部(biginsmall)、smallc与bigc的并集是否在bigc内部(unioninbig)、bigc是否在其与smallc的并集内部(biginunion)、bigc是否等于它与smallc的并集(bigisunion)。", "sql": "SELECT ST_Within(smallc,smallc) AS smallinsmall, ST_Within(smallc, bigc) AS smallinbig, ST_Within(bigc,smallc) AS biginsmall, ST_Within(ST_Union(smallc, bigc), bigc) AS unioninbig, ST_Within(bigc, ST_Union(smallc, bigc)) AS biginunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion FROM ( SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) AS smallc, ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) AS bigc) AS foo;", "execution_result": [[true, true, false, true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2046, "question_en": "Create a circle smallc with a radius of 20 units and a circle bigc with a radius of 40 units centered at POINT(50 50), then check the following spatial relationships: whether smallc is within itself (smallinsmall), whether smallc is within bigc (smallinbig), whether bigc is within smallc (biginsmall), whether the union of smallc and bigc is within bigc (unioninbig), whether bigc is within its union with smallc (biginunion), and whether bigc equals its union with smallc (bigisunion)."}
{"id": 375, "function": "ST_Within", "question": "基于XY坐标(50,50)生成两个缓冲圆：smallc(半径20)和bigc(半径40)，验证六项拓扑关系：1. smallc的自包含性 2. smallc被bigc包含 3. bigc被smallc包含 4. 两圆并集被bigc包含 5. bigc被并集包含 6. bigc与并集的几何等价性。", "sql": "SELECT ST_Within(smallc,smallc) AS smallinsmall, ST_Within(smallc, bigc) AS smallinbig, ST_Within(bigc,smallc) AS biginsmall, ST_Within(ST_Union(smallc, bigc), bigc) AS unioninbig, ST_Within(bigc, ST_Union(smallc, bigc)) AS biginunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion FROM ( SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) AS smallc, ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) AS bigc) AS foo;", "execution_result": [[true, true, false, true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2047, "question_en": "Generate two buffer circles based on XY coordinates (50,50): smallc (radius 20) and bigc (radius 40), and verify six topological relationships: 1. self-containment of smallc, 2. smallc is contained by bigc, 3. bigc is contained by smallc, 4. the union of the two circles is contained by bigc, 5. bigc is contained by the union, 6. geometric equivalence between bigc and the union."}
{"id": 375, "function": "ST_Within", "question": "对中心在(50,50)的几何执行：先用20单位缓冲生成smallc，40单位缓冲生成bigc，然后测试：1. ST_Within(smallc,smallc) 2. ST_Within(smallc,bigc) 3. ST_Within(bigc,smallc) 4. ST_Within(两圆并集,bigc) 5. ST_Within(bigc,两圆并集) 6. ST_Equals(bigc,两圆并集)。", "sql": "SELECT ST_Within(smallc,smallc) AS smallinsmall, ST_Within(smallc, bigc) AS smallinbig, ST_Within(bigc,smallc) AS biginsmall, ST_Within(ST_Union(smallc, bigc), bigc) AS unioninbig, ST_Within(bigc, ST_Union(smallc, bigc)) AS biginunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion FROM ( SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) AS smallc, ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) AS bigc) AS foo;", "execution_result": [[true, true, false, true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2048, "question_en": "Perform the following operations on a geometry centered at (50,50): first create a 20-unit buffer to generate smallc, then a 40-unit buffer to generate bigc, and test: 1. ST_Within(smallc,smallc) 2. ST_Within(smallc,bigc) 3. ST_Within(bigc,smallc) 4. ST_Within(union of the two circles, bigc) 5. ST_Within(bigc, union of the two circles) 6. ST_Equals(bigc, union of the two circles)."}
{"id": 375, "function": "ST_Within", "question": "输出一个包含6列的结果表，分别表示：以POINT(50 50)为中心、半径为20的缓冲区是否包含自身(smallinsmall)；该小缓冲区是否包含在以相同中心点、半径为40的大缓冲区中(smallinbig)；大缓冲区是否包含小缓冲区(biginsmall)；小缓冲区与大缓冲区的并集是否包含在大缓冲区中(unioninbig)；大缓冲区是否包含在并集中(biginunion)；大缓冲区是否与并集几何相等(bigisunion)。", "sql": "SELECT ST_Within(smallc,smallc) AS smallinsmall, ST_Within(smallc, bigc) AS smallinbig, ST_Within(bigc,smallc) AS biginsmall, ST_Within(ST_Union(smallc, bigc), bigc) AS unioninbig, ST_Within(bigc, ST_Union(smallc, bigc)) AS biginunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion FROM ( SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) AS smallc, ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) AS bigc) AS foo;", "execution_result": [[true, true, false, true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2049, "question_en": "Output a result table with 6 columns indicating: whether a buffer zone with center POINT(50 50) and radius 20 contains itself (smallinsmall); whether this small buffer is contained within a larger buffer with the same center and radius 40 (smallinbig); whether the large buffer contains the small buffer (biginsmall); whether the union of small and large buffers is contained within the large buffer (unioninbig); whether the large buffer is contained in the union (biginunion); whether the large buffer is geometrically equal to the union (bigisunion)."}
{"id": 375, "function": "ST_Within", "question": "输出布尔值结果表，验证以下空间关系：半径为20的圆形缓冲区(smallc)的自包含性；该缓冲区与半径为40的同中心圆形缓冲区(bigc)的包含关系；两个缓冲区并集与原始缓冲区的包含关系；以及大缓冲区与并集的几何等价性。", "sql": "SELECT ST_Within(smallc,smallc) AS smallinsmall, ST_Within(smallc, bigc) AS smallinbig, ST_Within(bigc,smallc) AS biginsmall, ST_Within(ST_Union(smallc, bigc), bigc) AS unioninbig, ST_Within(bigc, ST_Union(smallc, bigc)) AS biginunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion FROM ( SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) AS smallc, ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) AS bigc) AS foo;", "execution_result": [[true, true, false, true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2050, "question_en": "Output a Boolean result table verifying the following spatial relationships: the self-containment of a circular buffer (smallc) with radius 20; the containment relationship between this buffer and a concentric circular buffer (bigc) with radius 40; the containment relationship between the union of the two buffers and the original buffer; and the geometric equivalence between the larger buffer and the union."}
{"id": 375, "function": "ST_Within", "question": "输出6个布尔列，分别表示：由POINT(50 50)生成的20单位半径缓冲区在自身、40单位半径缓冲区中的包含状态，以及两个缓冲区并集操作后的相互包含关系和几何相等性判断结果。", "sql": "SELECT ST_Within(smallc,smallc) AS smallinsmall, ST_Within(smallc, bigc) AS smallinbig, ST_Within(bigc,smallc) AS biginsmall, ST_Within(ST_Union(smallc, bigc), bigc) AS unioninbig, ST_Within(bigc, ST_Union(smallc, bigc)) AS biginunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion FROM ( SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) AS smallc, ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) AS bigc) AS foo;", "execution_result": [[true, true, false, true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2051, "question_en": "Output six boolean columns indicating: the containment status of a 20-unit radius buffer generated from POINT(50 50) within itself and within a 40-unit radius buffer, as well as the mutual containment relationship and geometric equality evaluation results after the union operation of the two buffers."}
{"id": 376, "function": "ST_3DDWithin", "question": "判断SRID为4326的三维点POINT(-72.1235 42.3521 4)与SRID为4326的三维线LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)在SRID 2163坐标系下，三维距离是否小于等于126.8单位，同时判断它们的二维投影距离是否小于等于126.8单位。", "sql": "SELECT ST_3DDWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_3d,\nST_DWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_5d;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2052, "question_en": "Determine whether the 3D distance between the SRID 4326 point POINT(-72.1235 42.3521 4) and the SRID 4326 linestring LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20) in SRID 2163 coordinate system is less than or equal to 126.8 units, and also determine whether their 2D projected distance is less than or equal to 126.8 units."}
{"id": 376, "function": "ST_3DDWithin", "question": "将WGS84坐标系(SRID 4326)下的三维点POINT(-72.1235 42.3521 4)和三维线LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)转换到US National Atlas坐标系(SRID 2163)后，分别计算它们的三维空间距离和二维平面距离是否都在126.8单位范围内。", "sql": "SELECT ST_3DDWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_3d,\nST_DWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_6d;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2053, "question_en": "Translate the 3D point POINT(-72.1235 42.3521 4) and the 3D line LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20) from WGS84 (SRID 4326) to US National Atlas (SRID 2163), then check whether both their 3D spatial distance and 2D planar distance are within 126.8 units."}
{"id": 376, "function": "ST_3DDWithin", "question": "在US National Atlas投影坐标系中，检测高程为4米的点(-72.1235,42.3521)与由(-72.1260,42.45,15)到(-72.123,42.1546,20)的三维线段之间，三维欧氏距离和二维平面距离是否均不超过126.8米。", "sql": "SELECT ST_3DDWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_3d,\nST_DWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_7d;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2054, "question_en": "In the US National Atlas projected coordinate system, check whether both the 3D Euclidean distance and the 2D planar distance between the point (-72.1235, 42.3521) with an elevation of 4 meters and the 3D line segment from (-72.1260, 42.45, 15) to (-72.123, 42.1546, 20) are within 126.8 meters."}
{"id": 376, "function": "ST_3DDWithin", "question": "输出三维点POINT(-72.1235 42.3521 4)与三维线LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)在SRID 2163坐标系下，三维距离是否在126.8单位内（within_dist_3d列），以及二维投影距离是否在126.8单位内（within_dist_2d列）的布尔结果。", "sql": "SELECT ST_3DDWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_3d,\nST_DWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_17d;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2055, "question_en": "Output boolean results indicating whether the 3D distance between the 3D point POINT(-72.1235 42.3521 4) and the 3D line LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20) is within 126.8 units (within_dist_3d column), and whether the 2D projected distance is within 126.8 units (within_dist_2d column) in SRID 2163 coordinate system."}
{"id": 376, "function": "ST_3DDWithin", "question": "将WGS84坐标系(SRID 4326)的三维点POINT(-72.1235 42.3521 4)和三维线LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)转换到US National Atlas坐标系(SRID 2163)后，输出两个布尔值：三维空间距离是否≤126.8单位(within_dist_3d)，以及不考虑Z轴的二维距离是否≤126.8单位(within_dist_2d)。", "sql": "SELECT ST_3DDWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_3d,\nST_DWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_18d;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2056, "question_en": "Convert the 3D point POINT(-72.1235 42.3521 4) and 3D line LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20) from WGS84 (SRID 4326) to US National Atlas (SRID 2163), then output two boolean values: whether their 3D spatial distance is ≤126.8 units (within_dist_3d), and whether their 2D distance (ignoring Z-axis) is ≤126.8 units (within_dist_2d)."}
{"id": 376, "function": "ST_3DDWithin", "question": "输出包含两列布尔值的表：第一列(within_dist_3d)判断转换到SRID 2163坐标系后，三维点(-72.1235 42.3521 4)与三维折线[(-72.1260 42.45 15)→(-72.123 42.1546 20)]的三维空间距离是否≤126.8；第二列(within_dist_2d)仅基于XY坐标判断相同条件。", "sql": "SELECT ST_3DDWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_3d,\nST_DWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_19d;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2057, "question_en": "Output a table with two boolean columns: the first column (within_dist_3d) checks if the 3D distance between the point (-72.1235 42.3521 4) transformed to SRID 2163 and the 3D polyline [(-72.1260 42.45 15)→(-72.123 42.1546 20)] is ≤126.8; the second column (within_dist_2d) checks the same condition based only on XY coordinates."}
{"id": 377, "function": "ST_3DDFullyWithin", "question": "判断三维点POINT(1 1 2)是否完全在三维距离10以内、部分在三维距离10以内、完全在二维距离20以内、完全在三维距离20以内相对于折线LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)的位置关系，并返回四个布尔结果分别命名为D3DFullyWithin10、D3DWithin10、D2DFullyWithin20和D3DFullyWithin20。", "sql": "SELECT ST_3DDFullyWithin(geom_a, geom_b, 10) as D3DFullyWithin10, ST_3DDWithin(geom_a, geom_b, 10) as D3DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) as D2DFullyWithin20, ST_3DDFullyWithin(geom_a, geom_b, 20) as D3DFullyWithin20 from (select ST_GeomFromEWKT('POINT(1 1 2)') as geom_a, ST_GeomFromEWKT('LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)') as geom_b) t1;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2058, "question_en": "Determine the positional relationship of the 3D point POINT(1 1 2) relative to the polyline LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3) by checking if it is fully within a 3D distance of 10, partially within a 3D distance of 10, fully within a 2D distance of 20, and fully within a 3D distance of 20, returning four boolean results named D3DFullyWithin10, D3DWithin10, D2DFullyWithin20, and D3DFullyWithin20."}
{"id": 377, "function": "ST_3DDFullyWithin", "question": "给定三维点POINT(1 1 2)和三维折线LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)，分别计算：1)点是否完全在折线10单位三维距离内，2)点是否部分在折线10单位三维距离内，3)点是否完全在折线20单位二维距离内，4)点是否完全在折线20单位三维距离内，返回四个对应的布尔值结果。", "sql": "SELECT ST_3DDFullyWithin(geom_a, geom_b, 10) as D3DFullyWithin10, ST_3DDWithin(geom_a, geom_b, 10) as D3DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) as D2DFullyWithin20, ST_3DDFullyWithin(geom_a, geom_b, 20) as D3DFullyWithin20 from (select ST_GeomFromEWKT('POINT(1 1 2)') as geom_a, ST_GeomFromEWKT('LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)') as geom_b) t1;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2059, "question_en": "Given a 3D point POINT(1 1 2) and a 3D linestring LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3), calculate the following respectively: 1) whether the point is entirely within a 10-unit 3D distance of the linestring, 2) whether the point is partially within a 10-unit 3D distance of the linestring, 3) whether the point is entirely within a 20-unit 2D distance of the linestring, 4) whether the point is entirely within a 20-unit 3D distance of the linestring, and return the four corresponding boolean results."}
{"id": 377, "function": "ST_3DDFullyWithin", "question": "使用三维点POINT(1 1 2)和三维折线LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)作为输入，执行以下空间关系判断：1)ST_3DDFullyWithin检查10单位距离内的完全包含，2)ST_3DDWithin检查10单位距离内的部分包含，3)ST_DFullyWithin检查20单位二维距离内的完全包含，4)ST_3DDFullyWithin检查20单位三维距离内的完全包含，返回四个结果列。", "sql": "SELECT ST_3DDFullyWithin(geom_a, geom_b, 10) as D3DFullyWithin10, ST_3DDWithin(geom_a, geom_b, 10) as D3DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) as D2DFullyWithin20, ST_3DDFullyWithin(geom_a, geom_b, 20) as D3DFullyWithin20 from (select ST_GeomFromEWKT('POINT(1 1 2)') as geom_a, ST_GeomFromEWKT('LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)') as geom_b) t1;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2060, "question_en": "Using the 3D point POINT(1 1 2) and the 3D linestring LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3) as inputs, perform the following spatial relationship checks: 1) ST_3DDFullyWithin to check full containment within 10 units, 2) ST_3DDWithin to check partial containment within 10 units, 3) ST_DFullyWithin to check full containment within 20 units in 2D distance, 4) ST_3DDFullyWithin to check full containment within 20 units in 3D distance, returning four result columns."}
{"id": 377, "function": "ST_3DDFullyWithin", "question": "输出三维点POINT(1 1 2)与三维线LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)在10单位距离内是否完全三维包含（D3DFullyWithin10）、是否三维距离内存在（D3DWithin10）、在20单位距离内是否完全二维包含（D2DFullyWithin20）以及是否完全三维包含（D3DFullyWithin20）的布尔结果。", "sql": "SELECT ST_3DDFullyWithin(geom_a, geom_b, 10) as D3DFullyWithin10, ST_3DDWithin(geom_a, geom_b, 10) as D3DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) as D2DFullyWithin20, ST_3DDFullyWithin(geom_a, geom_b, 20) as D3DFullyWithin20 from (select ST_GeomFromEWKT('POINT(1 1 2)') as geom_a, ST_GeomFromEWKT('LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)') as geom_b) t1;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2061, "question_en": "Output the boolean results for whether the 3D point POINT(1 1 2) is fully 3D contained within 10 units of the 3D line LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3) (D3DFullyWithin10), whether it is within 3D distance (D3DWithin10), whether it is fully 2D contained within 20 units (D2DFullyWithin20), and whether it is fully 3D contained within 20 units (D3DFullyWithin20)."}
{"id": 377, "function": "ST_3DDFullyWithin", "question": "查询三维点POINT(1 1 2)与三维线LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)的空间关系，返回四列布尔值：三维完全包含10单位距离结果、三维距离10单位内存在结果、二维完全包含20单位距离结果、三维完全包含20单位距离结果。", "sql": "SELECT ST_3DDFullyWithin(geom_a, geom_b, 10) as D3DFullyWithin10, ST_3DDWithin(geom_a, geom_b, 10) as D3DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) as D2DFullyWithin20, ST_3DDFullyWithin(geom_a, geom_b, 20) as D3DFullyWithin20 from (select ST_GeomFromEWKT('POINT(1 1 2)') as geom_a, ST_GeomFromEWKT('LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)') as geom_b) t1;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2062, "question_en": "Query the spatial relationship between the 3D point POINT(1 1 2) and the 3D line LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3), returning four boolean columns: 3D fully contains within 10 units distance result, 3D exists within 10 units distance result, 2D fully contains within 20 units distance result, 3D fully contains within 20 units distance result."}
{"id": 377, "function": "ST_3DDFullyWithin", "question": "以表格形式输出三维点POINT(1 1 2)与三维线LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)的四项空间关系检测结果，包括10单位三维完全包含、10单位三维邻近、20单位二维完全包含、20单位三维完全包含的布尔值。", "sql": "SELECT ST_3DDFullyWithin(geom_a, geom_b, 10) as D3DFullyWithin10, ST_3DDWithin(geom_a, geom_b, 10) as D3DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) as D2DFullyWithin20, ST_3DDFullyWithin(geom_a, geom_b, 20) as D3DFullyWithin20 from (select ST_GeomFromEWKT('POINT(1 1 2)') as geom_a, ST_GeomFromEWKT('LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)') as geom_b) t1;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2063, "question_en": "Output the spatial relationship test results in tabular form between the 3D point POINT(1 1 2) and the 3D line LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3), including boolean values for 10-unit 3D complete containment, 10-unit 3D proximity, 20-unit 2D complete containment, and 20-unit 3D complete containment."}
{"id": 378, "function": "ST_DFullyWithin", "question": "判断二维点POINT(1 1)与折线LINESTRING(1 5, 2 7, 1 9, 14 12)之间的空间关系：1) 两者所有点是否都在10单位距离内(ST_DFullyWithin)；2) 两者是否有任意点在10单位距离内(ST_DWithin)；3) 两者所有点是否都在20单位距离内(ST_DFullyWithin)。", "sql": "SELECT ST_DFullyWithin(geom_a, geom_b, 10) AS DFullyWithin10, ST_DWithin(geom_a, geom_b, 10) AS DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) AS DFullyWithin20 FROM (VALUES ('POINT(1 1)', 'LINESTRING(1 5, 2 7, 1 9, 14 12)') ) AS v(geom_a, geom_b)", "execution_result": [[false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2064, "question_en": "Determine the spatial relationship between the 2D point POINT(1 1) and the polyline LINESTRING(1 5, 2 7, 1 9, 14 12): 1) Are all points within 10 units distance (ST_DFullyWithin); 2) Are any points within 10 units distance (ST_DWithin); 3) Are all points within 20 units distance (ST_DFullyWithin)."}
{"id": 378, "function": "ST_DFullyWithin", "question": "给定二维点POINT(1 1)和由四个顶点(1 5, 2 7, 1 9, 14 12)构成的折线，分别计算：1) 点与折线所有顶点的最大距离是否≤10；2) 点与折线是否存在≤10的距离；3) 点与折线所有顶点的最大距离是否≤20。", "sql": "SELECT ST_DFullyWithin(geom_a, geom_b, 10) AS DFullyWithin10, ST_DWithin(geom_a, geom_b, 10) AS DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) AS DFullyWithin20 FROM (VALUES ('POINT(1 1)', 'LINESTRING(1 5, 2 7, 1 9, 14 12)') ) AS v(geom_a, geom_b)", "execution_result": [[false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2065, "question_en": "Given the 2D point POINT(1 1) and a polyline formed by four vertices (1 5, 2 7, 1 9, 14 12), calculate respectively: 1) whether the maximum distance between the point and all vertices of the polyline is ≤10; 2) whether there exists a distance ≤10 between the point and the polyline; 3) whether the maximum distance between the point and all vertices of the polyline is ≤20."}
{"id": 378, "function": "ST_DFullyWithin", "question": "对几何对象POINT(1 1)和LINESTRING(1 5, 2 7, 1 9, 14 12)执行三次空间关系检测：第一次检测两者完全在10单位距离内的布尔结果，第二次检测两者存在10单位距离内接触的布尔结果，第三次检测两者完全在20单位距离内的布尔结果。", "sql": "SELECT ST_DFullyWithin(geom_a, geom_b, 10) AS DFullyWithin10, ST_DWithin(geom_a, geom_b, 10) AS DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) AS DFullyWithin20 FROM (VALUES ('POINT(1 1)', 'LINESTRING(1 5, 2 7, 1 9, 14 12)') ) AS v(geom_a, geom_b)", "execution_result": [[false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2066, "question_en": "Perform three spatial relationship tests on the geometric objects POINT(1 1) and LINESTRING(1 5, 2 7, 1 9, 14 12): first, test the boolean result of whether they are entirely within a 10-unit distance; second, test the boolean result of whether they have any contact within a 10-unit distance; third, test the boolean result of whether they are entirely within a 20-unit distance."}
{"id": 378, "function": "ST_DFullyWithin", "question": "输出POINT(1 1)与LINESTRING(1 5, 2 7, 1 9, 14 12)在10单位距离内是否完全包含（DFullyWithin10）、是否在10单位距离内（DWithin10）以及在20单位距离内是否完全包含（DFullyWithin20）的布尔结果。", "sql": "SELECT ST_DFullyWithin(geom_a, geom_b, 10) AS DFullyWithin10, ST_DWithin(geom_a, geom_b, 10) AS DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) AS DFullyWithin20 FROM (VALUES ('POINT(1 1)', 'LINESTRING(1 5, 2 7, 1 9, 14 12)') ) AS v(geom_a, geom_b);", "execution_result": [[false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2067, "question_en": "Output the boolean results for whether POINT(1 1) is fully within 10 units of LINESTRING(1 5, 2 7, 1 9, 14 12) (DFullyWithin10), within 10 units (DWithin10), and fully within 20 units (DFullyWithin20)."}
{"id": 378, "function": "ST_DFullyWithin", "question": "以三列布尔值形式输出结果：第一列检查POINT(1 1)是否完全位于LINESTRING(1 5, 2 7, 1 9, 14 12)的10单位缓冲区内（DFullyWithin10），第二列检查两者是否在10单位距离内（DWithin10），第三列检查20单位缓冲区内的完全包含情况（DFullyWithin20）。", "sql": "SELECT ST_DFullyWithin(geom_a, geom_b, 10) AS DFullyWithin10, ST_DWithin(geom_a, geom_b, 10) AS DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) AS DFullyWithin20 FROM (VALUES ('POINT(1 1)', 'LINESTRING(1 5, 2 7, 1 9, 14 12)') ) AS v(geom_a, geom_b);", "execution_result": [[false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2068, "question_en": "Return the result in three boolean columns: the first checks if POINT(1 1) is fully within the 10-unit buffer of LINESTRING(1 5, 2 7, 1 9, 14 12) (DFullyWithin10), the second checks if they are within 10 units of each other (DWithin10), and the third checks full containment within the 20-unit buffer (DFullyWithin20)."}
{"id": 378, "function": "ST_DFullyWithin", "question": "返回包含三个布尔值的表格：DFullyWithin10列表示POINT(1 1)与LINESTRING(1 5, 2 7, 1 9, 14 12)的最小边界矩形是否完全在10单位距离内，DWithin10列表示两者几何体是否在10单位距离内，DFullyWithin20列表示20单位距离的完全包含判定结果。", "sql": "SELECT ST_DFullyWithin(geom_a, geom_b, 10) AS DFullyWithin10, ST_DWithin(geom_a, geom_b, 10) AS DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) AS DFullyWithin20 FROM (VALUES ('POINT(1 1)', 'LINESTRING(1 5, 2 7, 1 9, 14 12)') ) AS v(geom_a, geom_b);", "execution_result": [[false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2069, "question_en": "Return a table with three boolean values: the DFullyWithin10 column indicates whether the minimum bounding rectangle of POINT(1 1) and LINESTRING(1 5, 2 7, 1 9, 14 12) is fully within 10 units distance, the DWithin10 column indicates whether the geometries are within 10 units distance, and the DFullyWithin20 column indicates the full containment result for 20 units distance."}
{"id": 382, "function": "ST_PointInsideCircle", "question": "判断坐标为(1,2)的二维点是否在以(2,3)为中心、半径为0.5的圆形范围内。", "sql": "SELECT ST_PointInsideCircle(ST_Point(1,2), 0.5, 2, 3);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2070, "question_en": "Determine if the 2D point with coordinates (1,2) is within the circular area centered at (2,3) with a radius of 0.5."}
{"id": 382, "function": "ST_PointInsideCircle", "question": "检查二维点ST_Point(1,2)是否落在圆心坐标为(2,3)、半径长度为0.5的空间圆形内。", "sql": "SELECT ST_PointInsideCircle(ST_Point(1,2), 0.5, 2, 3);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2071, "question_en": "Check if the 2D point ST_Point(1,2) falls within the spatial circle centered at (2,3) with a radius of 0.5."}
{"id": 382, "function": "ST_PointInsideCircle", "question": "给定圆心位置(2,3)和半径0.5，验证点(1,2)是否位于该圆形几何内部。", "sql": "SELECT ST_PointInsideCircle(ST_Point(1,2), 0.5, 2, 3);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2072, "question_en": "Given the center point (2,3) and radius 0.5, verify if the point (1,2) lies inside the circular geometry."}
{"id": 382, "function": "ST_PointInsideCircle", "question": "输出判断二维点POINT(1 2)是否在以点(2,3)为圆心、0.5为半径的圆内的布尔值结果。", "sql": "SELECT ST_PointInsideCircle(ST_Point(1,2), 0.5, 2, 3);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2073, "question_en": "Output the boolean result indicating whether the 2D point POINT(1 2) is inside the circle centered at (2,3) with a radius of 0.5."}
{"id": 382, "function": "ST_PointInsideCircle", "question": "输出ST_PointInsideCircle函数对二维点POINT(1 2)、半径0.5、圆心坐标(2,3)的空间关系检测结果（TRUE/FALSE）。", "sql": "SELECT ST_PointInsideCircle(ST_Point(1,2), 0.5, 2, 3);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2074, "question_en": "Output the spatial relationship detection result (TRUE/FALSE) of the ST_PointInsideCircle function for the 2D point POINT(1 2), radius 0.5, and center coordinates (2,3)."}
{"id": 382, "function": "ST_PointInsideCircle", "question": "输出一个布尔值，表示二维几何点POINT(1 2)是否位于圆心(2,3)、半径0.5的圆形范围内。", "sql": "SELECT ST_PointInsideCircle(ST_Point(1,2), 0.5, 2, 3);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2075, "question_en": "Output a boolean value indicating whether the 2D geometric point POINT(1 2) is within the circular area centered at (2,3) with a radius of 0.5."}
{"id": 383, "function": "ST_Area", "question": "计算SRID=2249坐标系下的多边形POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))的面积，分别以平方英尺和转换为SRID=26986后的平方米返回。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(ST_Transform(geom, 26986)) AS sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27243061337953]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2076, "question_en": "Calculate the area of the polygon POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) in SRID=2249, returning the result in both square feet and square meters after converting to SRID=26986."}
{"id": 383, "function": "ST_Area", "question": "计算SRID为2249的POLYGON几何对象（顶点坐标依次为(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)、(743238 2967416)）的面积，分别以原始坐标系单位平方英尺和转换为SRID 26986坐标系后的平方米单位输出结果。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(ST_Transform(geom, 26986)) AS sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27243061337953]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2077, "question_en": "Calculate the area of a POLYGON geometry object with SRID 2249 (vertices in order: (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416), (743238 2967416)), outputting the results in both the original coordinate system's square feet and after converting to SRID 26986's square meters."}
{"id": 383, "function": "ST_Area", "question": "计算空间坐标系SRID为2249的POLYGON几何对象（顶点坐标依次为(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)、(743238 2967416)）的面积（单位：平方英尺），并将其转换为SRID 26986坐标系后计算面积（单位：平方米）。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(ST_Transform(geom, 26986)) AS sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27243061337953]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2078, "question_en": "Calculate the area (in square feet) of a POLYGON geometry object with SRID 2249 (vertex coordinates in order: (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416), (743238 2967416)), then transform it to SRID 26986 and calculate its area (in square meters)."}
{"id": 383, "function": "ST_Area", "question": "输出多边形POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))在原始坐标系SRID=2249下的面积（平方英尺）和转换坐标系SRID=26986后的面积（平方米）。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(ST_Transform(geom, 26986)) AS sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27243061337953]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2079, "question_en": "Output the area (in square feet) of the polygon POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) in its original SRID=2249 coordinate system and its area (in square meters) after transforming to SRID=26986."}
{"id": 383, "function": "ST_Area", "question": "输出坐标系SRID为2249的POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))几何对象在原坐标系下的面积（单位：平方英尺）和转换为SRID 26986坐标系后的面积（单位：平方米）。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(ST_Transform(geom, 26986)) AS sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27243061337953]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2080, "question_en": "Output the area (in square feet) of the POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) geometry object with SRID 2249 in its original coordinate system, and its area (in square meters) after converting to SRID 26986."}
{"id": 383, "function": "ST_Area", "question": "输出SRID为2249的POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))几何对象的面积，分别以平方英尺和转换为SRID 26986坐标系后的平方米为单位显示。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(ST_Transform(geom, 26986)) AS sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27243061337953]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2081, "question_en": "Output the area of the POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) geometry with SRID 2249, displayed in both square feet and square meters after transforming to SRID 26986 coordinate system."}
{"id": 384, "function": "ST_Area", "question": "计算SRID=2249坐标系下POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))转换为SRID=4326坐标系后的椭球面积（平方英尺）、球体面积（平方英尺）和椭球面积（平方米）。", "sql": "SELECT ST_Area(geog) / 0.3048 ^ 2 sqft_spheroid, ST_Area(geog, false) / 0.3048 ^ 2 sqft_sphere, ST_Area(geog) sqm_spheroid \nFROM ( \n  SELECT ST_Transform( 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry, 4326) :: geography geog ) AS subquery;", "execution_result": [[928.6844043358865, 926.6097622511899, 86.27760436339304]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2082, "question_en": "Calculate the ellipsoidal area (square feet), spherical area (square feet), and ellipsoidal area (square meters) after transforming the POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) from SRID=2249 to SRID=4326."}
{"id": 384, "function": "ST_Area", "question": "将POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))从SRID=2249转换到4326后，计算椭球面积（平方英尺）、球体面积（平方英尺）和椭球面积（平方米）三种面积值。", "sql": "SELECT ST_Area(geog) / 0.3048 ^ 2 sqft_spheroid, ST_Area(geog, false) / 0.3048 ^ 2 sqft_sphere, ST_Area(geog) sqm_spheroid FROM (SELECT ST_Transform('SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry, 4326)::geography geog) AS subquery;", "execution_result": [[928.6844043358865, 926.6097622511899, 86.27760436339304]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2083, "question_en": "Translate the POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) from SRID=2249 to 4326, then calculate three area values: ellipsoidal area (square feet), spherical area (square feet), and ellipsoidal area (square meters)."}
{"id": 384, "function": "ST_Area", "question": "计算从SRID为2249的坐标系转换为4326坐标系后的地理对象POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))的面积，分别输出：1) 使用椭球体模型计算并以平方英尺为单位的面积（通过除以0.3048的平方转换）；2) 使用球体模型计算并以平方英尺为单位的面积（通过除以0.3048的平方转换）；3) 使用椭球体模型计算并以平方米为单位的原始面积。", "sql": "SELECT ST_Area(geog) / 0.3048 ^ 2 sqft_spheroid, ST_Area(geog, false) / 0.3048 ^ 2 sqft_sphere, ST_Area(geog) sqm_spheroid \nFROM ( \n  SELECT ST_Transform( 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry, 4326) :: geography geog ) AS subquery;", "execution_result": [[928.6844043358865, 926.6097622511899, 86.27760436339304]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2084, "question_en": "Calculate the area of the geographic object POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) after transforming from SRID 2249 to 4326, and output: 1) the area in square feet using the ellipsoidal model (converted by dividing by the square of 0.3048); 2) the area in square feet using the spherical model (converted by dividing by the square of 0.3048); 3) the original area in square meters using the ellipsoidal model."}
{"id": 384, "function": "ST_Area", "question": "输出坐标系转换（从SRID=2249转换到4326）后的多边形POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))在椭球面积（平方英尺）、球体面积（平方英尺）和椭球面积（平方米）三种计算方式下的面积值，分别命名为sqft_spheroid、sqft_sphere和sqm_spheroid。", "sql": "SELECT ST_Area(geog) / 0.3048 ^ 2 sqft_spheroid, ST_Area(geog, false) / 0.3048 ^ 2 sqft_sphere, ST_Area(geog) sqm_spheroid FROM (SELECT ST_Transform('SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry, 4326)::geography geog) AS subquery;", "execution_result": [[928.6844043358865, 926.6097622511899, 86.27760436339304]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2085, "question_en": "Output the area values of the polygon POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) after coordinate system transformation (from SRID=2249 to 4326) calculated in three methods: ellipsoidal area (square feet), spherical area (square feet), and ellipsoidal area (square meters), named as sqft_spheroid, sqft_sphere, and sqm_spheroid respectively."}
{"id": 384, "function": "ST_Area", "question": "返回坐标系从SRID=2249转换到4326的多边形POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))包含三种面积计算结果的数据集，包括椭球模型平方英尺、球体模型平方英尺和椭球模型平方米。", "sql": "SELECT ST_Area(geog) / 0.3048 ^ 2 sqft_spheroid, ST_Area(geog, false) / 0.3048 ^ 2 sqft_sphere, ST_Area(geog) sqm_spheroid FROM (SELECT ST_Transform('SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry, 4326)::geography geog) AS subquery;", "execution_result": [[928.6844043358865, 926.6097622511899, 86.27760436339304]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2086, "question_en": "Return a dataset containing three area calculation results for the polygon POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) transformed from SRID=2249 to 4326, including ellipsoidal model square feet, spherical model square feet, and ellipsoidal model square meters."}
{"id": 384, "function": "ST_Area", "question": "输出将SRID为2249的POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))转换为WGS84地理坐标系后，分别计算其椭球面面积（转换为平方英尺）、球面面积（转换为平方英尺）和椭球面面积（保留平方米单位）的三个数值结果。", "sql": "SELECT ST_Area(geog) / 0.3048 ^ 2 sqft_spheroid, ST_Area(geog, false) / 0.3048 ^ 2 sqft_sphere, ST_Area(geog) sqm_spheroid \nFROM ( \n  SELECT ST_Transform( 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry, 4326) :: geography geog ) AS subquery;", "execution_result": [[928.6844043358865, 926.6097622511899, 86.27760436339304]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2087, "question_en": "Output the three numerical results after converting the POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) with SRID 2249 to the WGS84 geographic coordinate system: the ellipsoidal area (converted to square feet), the spherical area (converted to square feet), and the ellipsoidal area (retained in square meters)."}
{"id": 386, "function": "ST_Area", "question": "计算SRID=2249坐标系中多边形POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))的面积，输出平方英尺和平方米值。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(geom) * 0.3048 ^ 2 sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27208552]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2088, "question_en": "Calculate the area of the polygon POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) in SRID=2249 coordinate system, outputting values in both square feet and square meters."}
{"id": 386, "function": "ST_Area", "question": "精确计算SRID=2249坐标系中由坐标点(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)构成的多边形面积，并转换单位（从平方英尺转换到平方米），同时输出转换前后的面积结果。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(geom) * 0.3048 ^ 2 sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27208552]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2089, "question_en": "Calculate the exact area of the polygon formed by coordinates (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416) in SRID=2249, convert the units from square feet to square meters, and output both the original and converted area results."}
{"id": 386, "function": "ST_Area", "question": "计算SRID为2249的POLYGON几何对象（顶点坐标依次为(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)、(743238 2967416)）的面积，分别以平方英尺和平方米为单位输出，其中平方米是通过平方英尺乘以0.3048的平方转换得到的。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(geom) * 0.3048 ^ 2 sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27208552]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2090, "question_en": "Calculate the area of a POLYGON geometry object with SRID 2249 (vertex coordinates in order: (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416), (743238 2967416)), outputting the result in both square feet and square meters, where square meters are converted by multiplying square feet by the square of 0.3048."}
{"id": 386, "function": "ST_Area", "question": "对SRID=2249坐标系的POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))，以两列形式输出结果：第一列为原始面积（平方英尺），第二列为转换后的面积（平方米）。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(geom) * 0.3048 ^ 2 sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27208552]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2091, "question_en": "For the POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) in SRID=2249, output the results in two columns: the first column as the original area (square feet) and the second column as the converted area (square meters)."}
{"id": 386, "function": "ST_Area", "question": "对SRID=2249坐标系的POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))，返回包含双单位制（平方英尺和平方米）面积值的表格，列名分别为sqft和sqm。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(geom) * 0.3048 ^ 2 sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27208552]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2092, "question_en": "For the POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) in SRID=2249 coordinate system, return a table with dual-unit area values (square feet and square meters), with column names sqft and sqm respectively."}
{"id": 386, "function": "ST_Area", "question": "计算SRID为2249的多边形POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))的面积，分别以平方英尺和平方米为单位输出结果，其中平方米是通过平方英尺乘以0.3048的平方转换得到的。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(geom) * 0.3048 ^ 2 sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27208552]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2093, "question_en": "Calculate the area of the polygon POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) with SRID 2249, outputting the results in both square feet and square meters, where square meters are converted by multiplying square feet by the square of 0.3048."}
{"id": 387, "function": "ST_Azimuth", "question": "计算点(25,45)到点(75,100)的方位角，以及点(75,100)到点(25,45)的方位角，并将结果转换为度数。", "sql": "SELECT degrees(ST_Azimuth( ST_Point(25, 45), ST_Point(75, 100))) AS degA_B, degrees(ST_Azimuth( ST_Point(75, 100), ST_Point(25, 45) )) AS degB_A;", "execution_result": [[42.27368900609371, 222.27368900609372]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2094, "question_en": "Calculate the azimuth from point (25,45) to point (75,100), and the azimuth from point (75,100) to point (25,45), converting the results to degrees."}
{"id": 387, "function": "ST_Azimuth", "question": "计算从二维点POINT(25 45)到二维点POINT(75 100)的方位角（以度为单位，命名为degA_B），以及从二维点POINT(75 100)到二维点POINT(25 45)的方位角（以度为单位，命名为degB_A）。", "sql": "SELECT degrees(ST_Azimuth( ST_Point(25, 45), ST_Point(75, 100))) AS degA_B, degrees(ST_Azimuth( ST_Point(75, 100), ST_Point(25, 45) )) AS degB_A;", "execution_result": [[42.27368900609371, 222.27368900609372]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2095, "question_en": "Calculate the azimuth from the 2D point POINT(25 45) to the 2D point POINT(75 100) in degrees (named degA_B), and the azimuth from the 2D point POINT(75 100) to the 2D point POINT(25 45) in degrees (named degB_A)."}
{"id": 387, "function": "ST_Azimuth", "question": "计算从二维点POINT(25 45)指向二维点POINT(75 100)的方位角（以度为单位，命名为degA_B），以及从二维点POINT(75 100)指向二维点POINT(25 45)的方位角（以度为单位，命名为degB_A）。", "sql": "SELECT degrees(ST_Azimuth( ST_Point(25, 45), ST_Point(75, 100))) AS degA_B, degrees(ST_Azimuth( ST_Point(75, 100), ST_Point(25, 45) )) AS degB_A;", "execution_result": [[42.27368900609371, 222.27368900609372]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2096, "question_en": "Calculate the azimuth from the 2D point POINT(25 45) to the 2D point POINT(75 100) (in degrees, named degA_B), and the azimuth from the 2D point POINT(75 100) to the 2D point POINT(25 45) (in degrees, named degB_A)."}
{"id": 387, "function": "ST_Azimuth", "question": "输出点(25,45)到点(75,100)的方位角度数，以及反向的方位角度数。", "sql": "SELECT degrees(ST_Azimuth( ST_Point(25, 45), ST_Point(75, 100))) AS degA_B, degrees(ST_Azimuth( ST_Point(75, 100), ST_Point(25, 45) )) AS degB_A;", "execution_result": [[42.27368900609371, 222.27368900609372]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2097, "question_en": "Output the azimuth angle in degrees from point (25,45) to point (75,100), as well as the reverse azimuth angle."}
{"id": 387, "function": "ST_Azimuth", "question": "输出从二维点POINT(25 45)指向POINT(75 100)的方位角（以度为单位）degA_B，以及从POINT(75 100)指向POINT(25 45)的方位角degB_A。", "sql": "SELECT degrees(ST_Azimuth( ST_Point(25, 45), ST_Point(75, 100))) AS degA_B, degrees(ST_Azimuth( ST_Point(75, 100), ST_Point(25, 45) )) AS degB_A;", "execution_result": [[42.27368900609371, 222.27368900609372]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2098, "question_en": "Output the azimuth in degrees degA_B from the 2D point POINT(25 45) to POINT(75 100), and the azimuth degB_A from POINT(75 100) to POINT(25 45)."}
{"id": 387, "function": "ST_Azimuth", "question": "输出从POINT(25 45)指向POINT(75 100)的方位角（以度为单位）degA_B，以及从POINT(75 100)指向POINT(25 45)的方位角（以度为单位）degB_A。", "sql": "SELECT degrees(ST_Azimuth( ST_Point(25, 45), ST_Point(75, 100))) AS degA_B, degrees(ST_Azimuth( ST_Point(75, 100), ST_Point(25, 45) )) AS degB_A;", "execution_result": [[42.27368900609371, 222.27368900609372]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2099, "question_en": "Output the azimuth in degrees (degA_B) from POINT(25 45) to POINT(75 100), and the azimuth in degrees (degB_A) from POINT(75 100) to POINT(25 45)."}
{"id": 388, "function": "ST_Angle", "question": "计算LINESTRING(0 0, 0.3 0.7, 1 1)和LINESTRING(0 0, 0.2 0.5, 1 0)两条折线的夹角度数。", "sql": "SELECT degrees( ST_Angle('LINESTRING(0 0, 0.3 0.7, 1 1)', 'LINESTRING(0 0, 0.2 0.5, 1 0)') );", "execution_result": [[45.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2100, "question_en": "Calculate the angle in degrees between the two linestrings LINESTRING(0 0, 0.3 0.7, 1 1) and LINESTRING(0 0, 0.2 0.5, 1 0)."}
{"id": 388, "function": "ST_Angle", "question": "计算LINESTRING(0 0, 0.3 0.7, 1 1)和LINESTRING(0 0, 0.2 0.5, 1 0)两条折线之间的夹角（以度为单位），其中第一条折线经过点(0 0)、(0.3 0.7)、(1 1)，第二条折线经过点(0 0)、(0.2 0.5)、(1 0)。", "sql": "SELECT degrees( ST_Angle('LINESTRING(0 0, 0.3 0.7, 1 1)', 'LINESTRING(0 0, 0.2 0.5, 1 0)') );", "execution_result": [[45.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2101, "question_en": "Calculate the angle (in degrees) between the two linestrings LINESTRING(0 0, 0.3 0.7, 1 1) and LINESTRING(0 0, 0.2 0.5, 1 0), where the first linestring passes through points (0 0), (0.3 0.7), (1 1) and the second linestring passes through points (0 0), (0.2 0.5), (1 0)."}
{"id": 388, "function": "ST_Angle", "question": "计算LINESTRING(0 0, 0.3 0.7, 1 1)和LINESTRING(0 0, 0.2 0.5, 1 0)两条折线之间的夹角，并将弧度值转换为度数。", "sql": "SELECT degrees( ST_Angle('LINESTRING(0 0, 0.3 0.7, 1 1)', 'LINESTRING(0 0, 0.2 0.5, 1 0)') );", "execution_result": [[45.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2102, "question_en": "Calculate the angle between the two linestrings LINESTRING(0 0, 0.3 0.7, 1 1) and LINESTRING(0 0, 0.2 0.5, 1 0), and convert the radian value to degrees."}
{"id": 388, "function": "ST_Angle", "question": "输出两条折线LINESTRING(0 0, 0.3 0.7, 1 1)和LINESTRING(0 0, 0.2 0.5, 1 0)的最小夹角，结果以角度值表示。", "sql": "SELECT degrees( ST_Angle('LINESTRING(0 0, 0.3 0.7, 1 1)', 'LINESTRING(0 0, 0.2 0.5, 1 0)') );", "execution_result": [[45.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2103, "question_en": "Output the minimum angle between the two linestrings LINESTRING(0 0, 0.3 0.7, 1 1) and LINESTRING(0 0, 0.2 0.5, 1 0), expressed in degrees."}
{"id": 388, "function": "ST_Angle", "question": "计算LINESTRING(0 0, 0.3 0.7, 1 1)和LINESTRING(0 0, 0.2 0.5, 1 0)两条折线之间的夹角，并将弧度值转换为角度值输出。", "sql": "SELECT degrees( ST_Angle('LINESTRING(0 0, 0.3 0.7, 1 1)', 'LINESTRING(0 0, 0.2 0.5, 1 0)') );", "execution_result": [[45.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2104, "question_en": "Calculate the angle between the two linestrings LINESTRING(0 0, 0.3 0.7, 1 1) and LINESTRING(0 0, 0.2 0.5, 1 0), and convert the radian value to degrees for output."}
{"id": 388, "function": "ST_Angle", "question": "输出LINESTRING(0 0, 0.3 0.7, 1 1)和LINESTRING(0 0, 0.2 0.5, 1 0)两条折线之间夹角的角度值（以度为单位）。", "sql": "SELECT degrees( ST_Angle('LINESTRING(0 0, 0.3 0.7, 1 1)', 'LINESTRING(0 0, 0.2 0.5, 1 0)') );", "execution_result": [[45.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2105, "question_en": "Output the angle value (in degrees) between the two linestrings LINESTRING(0 0, 0.3 0.7, 1 1) and LINESTRING(0 0, 0.2 0.5, 1 0)."}
{"id": 389, "function": "ST_Angle", "question": "计算POINT(10 10)与POINT(0 0)连线、POINT(90 90)与POINT(100 80)连线之间的夹角（单位：度）。", "sql": "SELECT degrees( ST_Angle('POINT (10 10)', 'POINT (0 0)', 'POINT(90 90)', 'POINT (100 80)') );", "execution_result": [[269.9999999999999]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2106, "question_en": "Calculate the angle (in degrees) between the line connecting POINT(10 10) and POINT(0 0) and the line connecting POINT(90 90) and POINT(100 80)."}
{"id": 389, "function": "ST_Angle", "question": "计算由四个二维点POINT (10 10)、POINT (0 0)、POINT(90 90)和POINT (100 80)构成的两条线段之间的夹角（以度为单位），其中第一条线段连接POINT (10 10)和POINT (0 0)，第二条线段连接POINT(90 90)和POINT (100 80)，使用ST_Angle函数获取弧度值后再通过degrees函数转换为角度值。", "sql": "SELECT degrees( ST_Angle('POINT (10 10)', 'POINT (0 0)', 'POINT(90 90)', 'POINT (100 80)') );", "execution_result": [[269.9999999999999]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2107, "question_en": "Calculate the angle (in degrees) between two line segments formed by four 2D points POINT (10 10), POINT (0 0), POINT (90 90), and POINT (100 80), where the first segment connects POINT (10 10) and POINT (0 0), and the second segment connects POINT (90 90) and POINT (100 80), using the ST_Angle function to obtain the radian value and then converting it to degrees with the degrees function."}
{"id": 389, "function": "ST_Angle", "question": "计算由四个二维点POINT (10 10)、POINT (0 0)、POINT(90 90)和POINT (100 80)构成的两条线段之间的夹角（第一条线段连接前两点，第二条线段连接后两点），并将弧度值转换为角度值输出。", "sql": "SELECT degrees( ST_Angle('POINT (10 10)', 'POINT (0 0)', 'POINT(90 90)', 'POINT (100 80)') );", "execution_result": [[269.9999999999999]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2108, "question_en": "Calculate the angle between two line segments formed by the four 2D points POINT (10 10), POINT (0 0), POINT (90 90), and POINT (100 80) (the first segment connects the first two points, the second connects the last two points), and output the result converted from radians to degrees."}
{"id": 389, "function": "ST_Angle", "question": "输出四个Point（二维点几何对象）POINT(5 5)，POINT(1 1)，POINT(30 30)，POINT(25 20)形成的两组向量的夹角度数。", "sql": "SELECT degrees( ST_Angle('POINT (10 10)', 'POINT (0 0)', 'POINT(90 90)', 'POINT (100 80)') );", "execution_result": [[269.9999999999999]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2109, "question_en": "Output the angle in degrees between the two vectors formed by the four Point (2D geometric objects) POINT(5 5), POINT(1 1), POINT(30 30), POINT(25 20)."}
{"id": 389, "function": "ST_Angle", "question": "输出由四个二维点POINT (10 10)、POINT (0 0)、POINT(90 90)和POINT (100 80)构成的三个向量之间夹角的度数结果。", "sql": "SELECT degrees( ST_Angle('POINT (10 10)', 'POINT (0 0)', 'POINT(90 90)', 'POINT (100 80)') );", "execution_result": [[269.9999999999999]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2110, "question_en": "Output the degree results of the angles between the three vectors formed by the four 2D points POINT (10 10), POINT (0 0), POINT (90 90), and POINT (100 80)."}
{"id": 389, "function": "ST_Angle", "question": "计算由四个二维点POINT (10 10)、POINT (0 0)、POINT(90 90)和POINT (100 80)形成的两条线段之间的夹角，并将弧度值转换为角度值输出。", "sql": "SELECT degrees( ST_Angle('POINT (10 10)', 'POINT (0 0)', 'POINT(90 90)', 'POINT (100 80)') );", "execution_result": [[269.9999999999999]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2111, "question_en": "Calculate the angle between the two line segments formed by the four 2D points POINT (10 10), POINT (0 0), POINT (90 90), and POINT (100 80), and convert the radian value to degrees for output."}
{"id": 390, "function": "ST_Angle", "question": "计算POINT(0 0)到POINT(10 10)到POINT(20 0)形成的夹角度数。", "sql": "SELECT degrees( ST_Angle('POINT(0 0)', 'POINT(10 10)', 'POINT(20 0)') );", "execution_result": [[270.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2112, "question_en": "Calculate the angle in degrees formed by the points POINT(0 0), POINT(10 10), and POINT(20 0)."}
{"id": 390, "function": "ST_Angle", "question": "计算由三个点POINT(0 0)、POINT(10 10)和POINT(20 0)形成的夹角的角度值，并将弧度结果转换为度数。", "sql": "SELECT degrees( ST_Angle('POINT(0 0)', 'POINT(10 10)', 'POINT(20 0)') );", "execution_result": [[270.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2113, "question_en": "Calculate the angle formed by the three points POINT(0 0), POINT(10 10), and POINT(20 0), and convert the radian result to degrees."}
{"id": 390, "function": "ST_Angle", "question": "计算由点POINT(0 0)、点POINT(10 10)和点POINT(20 0)构成的夹角的角度值，并将结果转换为度数。", "sql": "SELECT degrees( ST_Angle('POINT(0 0)', 'POINT(10 10)', 'POINT(20 0)') );", "execution_result": [[270.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2114, "question_en": "Calculate the angle value formed by the points POINT(0 0), POINT(10 10), and POINT(20 0), and convert the result to degrees."}
{"id": 390, "function": "ST_Angle", "question": "输出POINT(0 0)到POINT(10 10)到POINT(20 0)三个点形成的夹角角度值。", "sql": "SELECT degrees( ST_Angle('POINT(0 0)', 'POINT(10 10)', 'POINT(20 0)') );", "execution_result": [[270.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2115, "question_en": "Output the angle value formed by the three points POINT(0 0), POINT(10 10), and POINT(20 0)."}
{"id": 390, "function": "ST_Angle", "question": "输出由点三个二维点POINT(0 0)、POINT(10 10)和POINT(20 0)构成的夹角的角度值（以度为单位）。", "sql": "SELECT degrees( ST_Angle('POINT(0 0)', 'POINT(10 10)', 'POINT(20 0)') );", "execution_result": [[270.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2116, "question_en": "Output the angle value (in degrees) formed by the three 2D points POINT(0 0), POINT(10 10), and POINT(20 0)."}
{"id": 390, "function": "ST_Angle", "question": "输出由点POINT(0 0)、POINT(10 10)和POINT(20 0)构成的夹角的角度值（以度为单位）。", "sql": "SELECT degrees( ST_Angle('POINT(0 0)', 'POINT(10 10)', 'POINT(20 0)') );", "execution_result": [[270.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2117, "question_en": "Output the angle value (in degrees) formed by the points POINT(0 0), POINT(10 10), and POINT(20 0)."}
{"id": 391, "function": "ST_ClosestPoint", "question": "计算顶点为(190,150)、(20,10)、(160,70)、(190,150)的多边形上与以(80,160)为中心、30单位半径的圆形缓冲区的最近点，输出WKT文本。", "sql": "SELECT ST_AsText( ST_ClosestPoint( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) )) AS ptwkt;", "execution_result": [["POINT(131.59149149528952 101.89887534906195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2118, "question_en": "Calculate the closest point on the polygon with vertices (190,150), (20,10), (160,70), (190,150) to the circular buffer centered at (80,160) with a 30-unit radius, and output the WKT text."}
{"id": 391, "function": "ST_ClosestPoint", "question": "在POLYGON ((190 150, 20 10, 160 70, 190 150))这个多边形和以POINT(80 160)为中心、半径为30的圆形缓冲区之间，找到最近的点，并以WKT格式输出该点的坐标。", "sql": "SELECT ST_AsText( ST_ClosestPoint( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) )) AS ptwkt;", "execution_result": [["POINT(131.59149149528952 101.89887534906195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2119, "question_en": "Find the closest point between the POLYGON ((190 150, 20 10, 160 70, 190 150)) and the circular buffer centered at POINT(80 160) with a radius of 30, and output the coordinates of this point in WKT format."}
{"id": 391, "function": "ST_ClosestPoint", "question": "计算由顶点坐标(190 150)、(20 10)、(160 70)、(190 150)组成的多边形与以POINT(80 160)为中心、30单位距离为半径的圆形缓冲区之间的最近点，并将结果以WKT格式输出。", "sql": "SELECT ST_AsText( ST_ClosestPoint( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) )) AS ptwkt;", "execution_result": [["POINT(131.59149149528952 101.89887534906195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2120, "question_en": "Calculate the closest point between the polygon with vertices (190 150), (20 10), (160 70), (190 150) and the circular buffer centered at POINT(80 160) with a radius of 30 units, and output the result in WKT format."}
{"id": 391, "function": "ST_ClosestPoint", "question": "输出多边形上与点缓冲区最近点的WKT字符串表示，多边形顶点为(190,150)、(20,10)、(160,70)、(190,150)，缓冲区中心点为(80,160)、半径30。", "sql": "SELECT ST_AsText( ST_ClosestPoint( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) )) AS ptwkt;", "execution_result": [["POINT(131.59149149528952 101.89887534906195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2121, "question_en": "Output the WKT string representation of the closest point on the polygon to the point buffer, where the polygon vertices are (190,150), (20,10), (160,70), (190,150), the buffer center point is (80,160), and the radius is 30."}
{"id": 391, "function": "ST_ClosestPoint", "question": "输出多边形POLYGON ((190 150, 20 10, 160 70, 190 150))与以POINT(80 160)为中心、30单位半径的缓冲区之间的最近点坐标，结果以WKT字符串格式返回。", "sql": "SELECT ST_AsText( ST_ClosestPoint( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) )) AS ptwkt;", "execution_result": [["POINT(131.59149149528952 101.89887534906195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2122, "question_en": "Output the coordinates of the closest point between the polygon POLYGON ((190 150, 20 10, 160 70, 190 150)) and the 30-unit radius buffer centered at POINT(80 160), returning the result in WKT string format."}
{"id": 391, "function": "ST_ClosestPoint", "question": "输出多边形POLYGON ((190 150, 20 10, 160 70, 190 150))与以POINT(80 160)为中心、30单位半径的圆形缓冲区之间的最近点坐标，结果以WKT字符串格式返回。", "sql": "SELECT ST_AsText( ST_ClosestPoint( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) )) AS ptwkt;", "execution_result": [["POINT(131.59149149528952 101.89887534906195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2123, "question_en": "Output the coordinates of the closest point between the polygon POLYGON ((190 150, 20 10, 160 70, 190 150)) and the circular buffer centered at POINT(80 160) with a 30-unit radius, returning the result in WKT string format."}
{"id": 392, "function": "ST_ClosestPoint", "question": "计算点POINT(160 40)到线LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190)的最邻近点，以及该线到该点的最邻近点，输出两者的WKT文本。", "sql": "SELECT ST_AsText( ST_ClosestPoint(pt,line)) AS cp_pt_line, ST_AsText( ST_ClosestPoint(line,pt)) AS cp_line_pt FROM (SELECT 'POINT (160 40)'::geometry AS pt, 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)'::geometry AS line ) AS t;", "execution_result": [["POINT(160 40)", "POINT(125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2124, "question_en": "Calculate the nearest point from POINT(160 40) to LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190), and the nearest point from the linestring to the point, then output their WKT representations."}
{"id": 392, "function": "ST_ClosestPoint", "question": "计算二维点POINT(160 40)与折线LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190)之间的最近点，分别输出点对线最近点ST_ClosestPoint(pt,line)和线对点最近点ST_ClosestPoint(line,pt)的WKT格式结果，并将结果列命名为cp_pt_line和cp_line_pt。", "sql": "SELECT ST_AsText( ST_ClosestPoint(pt,line)) AS cp_pt_line, ST_AsText( ST_ClosestPoint(line,pt)) AS cp_line_pt FROM (SELECT 'POINT (160 40)'::geometry AS pt, 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)'::geometry AS line ) AS t;", "execution_result": [["POINT(160 40)", "POINT(125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2125, "question_en": "Calculate the closest points between the 2D point POINT(160 40) and the polyline LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190), outputting the WKT format results of ST_ClosestPoint(pt,line) and ST_ClosestPoint(line,pt) as columns named cp_pt_line and cp_line_pt respectively."}
{"id": 392, "function": "ST_ClosestPoint", "question": "计算二维点POINT(160 40)到折线LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190)的最近点，以及折线到该点的最近点，并以WKT格式分别输出为cp_pt_line和cp_line_pt字段。", "sql": "SELECT ST_AsText( ST_ClosestPoint(pt,line)) AS cp_pt_line, ST_AsText( ST_ClosestPoint(line,pt)) AS cp_line_pt FROM (SELECT 'POINT (160 40)'::geometry AS pt, 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)'::geometry AS line ) AS t;", "execution_result": [["POINT(160 40)", "POINT(125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2126, "question_en": "Calculate the closest point from the 2D point POINT(160 40) to the linestring LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190), and the closest point from the linestring to that point, then output them in WKT format as fields cp_pt_line and cp_line_pt respectively."}
{"id": 392, "function": "ST_ClosestPoint", "question": "输出点POINT(160 40)到线LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190)的最邻近点，以及该线到该点的最邻近点的WKT字符串。", "sql": "SELECT ST_AsText( ST_ClosestPoint(pt,line)) AS cp_pt_line, ST_AsText( ST_ClosestPoint(line,pt)) AS cp_line_pt FROM (SELECT 'POINT (160 40)'::geometry AS pt, 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)'::geometry AS line ) AS t;", "execution_result": [["POINT(160 40)", "POINT(125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2127, "question_en": "Output the closest point from POINT(160 40) to the line LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190), and the WKT string of the closest point on the line to the point."}
{"id": 392, "function": "ST_ClosestPoint", "question": "输出点POINT(160 40)到线LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190)的最邻近点的WKT表示。", "sql": "SELECT ST_AsText( ST_ClosestPoint(pt,line)) FROM (SELECT 'POINT (160 40)'::geometry AS pt, 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)'::geometry AS line ) AS t;", "execution_result": [["POINT(160 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2128, "question_en": "Output the WKT representation of the nearest point from POINT(160 40) to LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190)."}
{"id": 392, "function": "ST_ClosestPoint", "question": "输出POINT (160 40)到LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)的最近点WKT字符串，以及该折线到该点的最近点WKT字符串，分别命名为cp_pt_line和cp_line_pt。", "sql": "SELECT ST_AsText( ST_ClosestPoint(pt,line)) AS cp_pt_line, ST_AsText( ST_ClosestPoint(line,pt)) AS cp_line_pt FROM (SELECT 'POINT (160 40)'::geometry AS pt, 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)'::geometry AS line ) AS t;", "execution_result": [["POINT(160 40)", "POINT(125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2129, "question_en": "Output the WKT string of the nearest point from POINT (160 40) to LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190), and the WKT string of the nearest point from the polyline to the point, named cp_pt_line and cp_line_pt respectively."}
{"id": 393, "function": "ST_3DClosestPoint", "question": "计算LINESTRING(20 80 20,98 190 1,110 180 3,50 75 900)到MULTIPOINT(100 100 30,50 74 1000)的三维和二维最近点坐标。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(50 75)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2130, "question_en": "Calculate the 3D and 2D nearest point coordinates from LINESTRING(20 80 20,98 190 1,110 180 3,50 75 900) to MULTIPOINT(100 100 30,50 74 1000)."}
{"id": 393, "function": "ST_3DClosestPoint", "question": "计算三维点集合MULTIPOINT(100 100 30, 50 74 1000)与三维线段LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900)之间的三维最近点ST_3DClosestPoint和二维最近点ST_ClosestPoint，并以EWKT格式输出结果，分别命名为cp3d_line_pt和cp2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(50 75)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2131, "question_en": "Calculate the 3D closest point ST_3DClosestPoint and 2D closest point ST_ClosestPoint between the 3D point collection MULTIPOINT(100 100 30, 50 74 1000) and the 3D linestring LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900), and output the results in EWKT format, named cp3d_line_pt and cp2d_line_pt respectively."}
{"id": 393, "function": "ST_3DClosestPoint", "question": "给定一个三维多点对象MULTIPOINT(100 100 30, 50 74 1000)和一个三维线对象LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)，请分别计算并返回：1) 使用ST_3DClosestPoint函数求出线对象上距离多点对象最近的三维点坐标，并以EWKT格式输出别名为cp3d_line_pt；2) 使用ST_ClosestPoint函数求出线对象上距离多点对象最近的二维点坐标，并以EWKT格式输出别名为cp2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(50 75)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2132, "question_en": "Given a 3D multipoint object MULTIPOINT(100 100 30, 50 74 1000) and a 3D linestring object LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900), calculate and return: 1) the 3D point coordinates on the linestring closest to the multipoint object using the ST_3DClosestPoint function, output in EWKT format as alias cp3d_line_pt; 2) the 2D point coordinates on the linestring closest to the multipoint object using the ST_ClosestPoint function, output in EWKT format as alias cp2d_line_pt."}
{"id": 393, "function": "ST_3DClosestPoint", "question": "输出三维线串LINESTRING(20 80 20,98 190 1,110 180 3,50 75 900)到多点集合MULTIPOINT(100 100 30,50 74 1000)的三维和二维最近点坐标，格式为包含SRID的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(50 75)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2133, "question_en": "Output the 3D and 2D nearest point coordinates from the 3D linestring LINESTRING(20 80 20,98 190 1,110 180 3,50 75 900) to the multipoint collection MULTIPOINT(100 100 30,50 74 1000), formatted as EWKT strings including SRID."}
{"id": 393, "function": "ST_3DClosestPoint", "question": "输出点MULTIPOINT(100 100 30, 50 74 1000)与三维线LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900)之间的三维最近点EWKT字符串，以及它们的二维最近点EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(50 75)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2134, "question_en": "Output the 3D nearest point EWKT string between the point MULTIPOINT(100 100 30, 50 74 1000) and the 3D line LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900), as well as their 2D nearest point EWKT string."}
{"id": 393, "function": "ST_3DClosestPoint", "question": "输出三维点MULTIPOINT(100 100 30, 50 74 1000)与三维线LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900)之间的三维最近点EWKT字符串，以及它们的二维最近点EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(50 75)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2135, "question_en": "Output the 3D nearest points EWKT string between the 3D point MULTIPOINT(100 100 30, 50 74 1000) and the 3D line LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900), as well as their 2D nearest points EWKT string."}
{"id": 394, "function": "ST_3DClosestPoint", "question": "计算LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)到POINT(100 100 30)的三维最近点和二维最近点，结果以EWKT格式输出。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(73.07692307692307 115.38461538461539)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2136, "question_en": "Calculate the 3D and 2D closest points from LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000) to POINT(100 100 30) and output the results in EWKT format."}
{"id": 394, "function": "ST_3DClosestPoint", "question": "给定一个三维点POINT(100 100 30)和一条三维线段LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)，分别计算该点到线段的三维最近点ST_3DClosestPoint和二维最近点ST_ClosestPoint，并以EWKT格式输出结果，分别命名为cp3d_line_pt和cp2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(73.07692307692307 115.38461538461539)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2137, "question_en": "Given a 3D point POINT(100 100 30) and a 3D linestring LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000), calculate the 3D closest point ST_3DClosestPoint and the 2D closest point ST_ClosestPoint from the point to the linestring, and output the results in EWKT format, named cp3d_line_pt and cp2d_line_pt respectively."}
{"id": 394, "function": "ST_3DClosestPoint", "question": "给定三维点POINT(100 100 30)和三维线段LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 1000)，分别计算该线段与点的三维最近点（使用ST_3DClosestPoint函数）和二维最近点（使用ST_ClosestPoint函数），并以EWKT格式输出两个结果，分别命名为cp3d_line_pt和cp2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(73.07692307692307 115.38461538461539)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2138, "question_en": "Given a 3D point POINT(100 100 30) and a 3D linestring LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 1000), calculate the 3D closest point (using ST_3DClosestPoint) and the 2D closest point (using ST_ClosestPoint) between the linestring and the point, then output both results in EWKT format, labeled as cp3d_line_pt and cp2d_line_pt respectively."}
{"id": 394, "function": "ST_3DClosestPoint", "question": "输出LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)到POINT(100 100 30)的三维最近点和二维最近点计算结果，输出为EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(73.07692307692307 115.38461538461539)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2139, "question_en": "Output the 3D and 2D nearest point calculation results from LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000) to POINT(100 100 30) in EWKT format."}
{"id": 394, "function": "ST_3DClosestPoint", "question": "输出三维点POINT(100 100 30)到三维线LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)的三维最近点EWKT字符串，以及二维最近点EWKT字符串，分别命名为cp3d_line_pt和cp2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(73.07692307692307 115.38461538461539)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2140, "question_en": "Output the 3D nearest point EWKT string from POINT(100 100 30) to LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000), and the 2D nearest point EWKT string, named as cp3d_line_pt and cp2d_line_pt respectively."}
{"id": 394, "function": "ST_3DClosestPoint", "question": "输出三维点POINT(100 100 30)与三维线段LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)的三维最近点EWKT字符串，以及它们的二维最近点EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(73.07692307692307 115.38461538461539)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2141, "question_en": "Output the 3D nearest point EWKT string between the 3D point POINT(100 100 30) and the 3D linestring LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000), as well as their 2D nearest point EWKT strings."}
{"id": 395, "function": "ST_3DClosestPoint", "question": "对于POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))和MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))这两个几何体，计算它们的三维最近点和二维最近点，输出为EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) AS cp3d, ST_AsEWKT(ST_ClosestPoint(poly, mline)) AS cp2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["POINT(40.45454545454545 53.63636363636364 5)", "POINT(20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2142, "question_en": "For the geometries POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), calculate their 3D and 2D closest points and output in EWKT format."}
{"id": 395, "function": "ST_3DClosestPoint", "question": "对于三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))和三维多线段MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))，分别计算并返回：1) 两者在三维空间中的最近点（使用ST_3DClosestPoint函数）；2) 两者在二维平面上的最近点（使用ST_ClosestPoint函数）。两个结果都要求以EWKT格式输出，并分别命名为cp3d和cp2d。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) AS cp3d, ST_AsEWKT(ST_ClosestPoint(poly, mline)) AS cp2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["POINT(40.45454545454545 53.63636363636364 5)", "POINT(20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2143, "question_en": "For the 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the 3D multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), compute and return: 1) their closest points in 3D space (using ST_3DClosestPoint); 2) their closest points on the 2D plane (using ST_ClosestPoint). Both results should be output in EWKT format, named cp3d and cp2d respectively."}
{"id": 395, "function": "ST_3DClosestPoint", "question": "给定一个三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))和一个三维多线MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))，分别计算并返回三维最近点ST_3DClosestPoint和二维最近点ST_ClosestPoint的结果，并以EWKT格式输出，分别命名为cp3d和cp2d。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) AS cp3d, ST_AsEWKT(ST_ClosestPoint(poly, mline)) AS cp2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["POINT(40.45454545454545 53.63636363636364 5)", "POINT(20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2144, "question_en": "Given a 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and a 3D multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), compute and return the 3D closest point ST_3DClosestPoint and the 2D closest point ST_ClosestPoint, output in EWKT format, named cp3d and cp2d respectively."}
{"id": 395, "function": "ST_3DClosestPoint", "question": "输出三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))到三维多线串MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))的最近点计算结果，包含两个字段：cp3d（三维结果的EWKT格式）和cp2d（二维结果的EWKT格式）。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) AS cp3d, ST_AsEWKT(ST_ClosestPoint(poly, mline)) AS cp2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["POINT(40.45454545454545 53.63636363636364 5)", "POINT(20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2145, "question_en": "Output the nearest point calculation results from the 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) to the 3D multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), including two fields: cp3d (EWKT format of the 3D result) and cp2d (EWKT format of the 2D result)."}
{"id": 395, "function": "ST_3DClosestPoint", "question": "以EWKT格式返回POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))到MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))的最近点计算结果，包含三维和二维两种表示。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) AS cp3d, ST_AsEWKT(ST_ClosestPoint(poly, mline)) AS cp2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["POINT(40.45454545454545 53.63636363636364 5)", "POINT(20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2146, "question_en": "Return the closest point calculation result in EWKT format from POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) to MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), including both 3D and 2D representations."}
{"id": 395, "function": "ST_3DClosestPoint", "question": "输出三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与三维多线MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间的三维最近点EWKT字符串和二维最近点EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) AS cp3d, ST_AsEWKT(ST_ClosestPoint(poly, mline)) AS cp2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["POINT(40.45454545454545 53.63636363636364 5)", "POINT(20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2147, "question_en": "Output the 3D closest point EWKT string and 2D closest point EWKT string between the 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the 3D multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))."}
{"id": 396, "function": "ST_Distance", "question": "计算POINT(-72.1235 42.3521)和LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的椭球面距离和球面距离。", "sql": "SELECT ST_Distance(gg1, gg2) AS spheroid_dist, ST_Distance(gg1, gg2, false) AS sphere_dist FROM (SELECT 'SRID=4326;POINT(-72.1235 42.3521)'::geography AS gg1, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geography AS gg2) AS foo;", "execution_result": [[123.80207675, 123.47573692]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2148, "question_en": "Calculate the ellipsoidal distance and spherical distance between POINT(-72.1235 42.3521) and LINESTRING(-72.1260 42.45, -72.123 42.1546)."}
{"id": 396, "function": "ST_Distance", "question": "计算WGS84坐标系下，点POINT(-72.1235 42.3521)与线LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的椭球体距离（spheroid_dist）和球体距离（sphere_dist），其中球体距离计算时禁用椭球体模型（false参数）。", "sql": "SELECT ST_Distance(gg1, gg2) AS spheroid_dist, ST_Distance(gg1, gg2, false) AS sphere_dist FROM (SELECT 'SRID=4326;POINT(-72.1235 42.3521)'::geography AS gg1, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geography AS gg2) AS foo;", "execution_result": [[123.80207675, 123.47573692]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2149, "question_en": "Calculate the spheroidal distance (spheroid_dist) and spherical distance (sphere_dist) between the point POINT(-72.1235 42.3521) and the line LINESTRING(-72.1260 42.45, -72.123 42.1546) in the WGS84 coordinate system, with the spherical distance calculation disabling the spheroid model (false parameter)."}
{"id": 396, "function": "ST_Distance", "question": "计算SRID为4326的地理坐标系中，点POINT(-72.1235 42.3521)与线LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的椭球体距离（spheroid_dist）和球体距离（sphere_dist），其中球体距离计算时禁用椭球体模型（false参数）。", "sql": "SELECT ST_Distance(gg1, gg2) AS spheroid_dist, ST_Distance(gg1, gg2, false) AS sphere_dist FROM (SELECT 'SRID=4326;POINT(-72.1235 42.3521)'::geography AS gg1, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geography AS gg2) AS foo;", "execution_result": [[123.80207675, 123.47573692]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2150, "question_en": "Calculate the spheroid distance (spheroid_dist) and sphere distance (sphere_dist) between the point POINT(-72.1235 42.3521) and the line LINESTRING(-72.1260 42.45, -72.123 42.1546) in the geographic coordinate system with SRID 4326, where the sphere distance is computed with the spheroid model disabled (false parameter)."}
{"id": 396, "function": "ST_Distance", "question": "输出POINT(-72.1235 42.3521)和LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的椭球面距离和球面距离两个数值。", "sql": "SELECT ST_Distance(gg1, gg2) AS spheroid_dist, ST_Distance(gg1, gg2, false) AS sphere_dist FROM (SELECT 'SRID=4326;POINT(-72.1235 42.3521)'::geography AS gg1, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geography AS gg2) AS foo;", "execution_result": [[123.80207675, 123.47573692]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2151, "question_en": "Output the ellipsoidal distance and spherical distance between POINT(-72.1235 42.3521) and LINESTRING(-72.1260 42.45, -72.123 42.1546)."}
{"id": 396, "function": "ST_Distance", "question": "输出地理坐标系SRID=4326下POINT(-72.1235 42.3521)与LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的椭球体距离（spheroid_dist）和球体距离（sphere_dist）数值结果，其中球体距离计算需禁用椭球体模式。", "sql": "SELECT ST_Distance(gg1, gg2) AS spheroid_dist, ST_Distance(gg1, gg2, false) AS sphere_dist FROM (SELECT 'SRID=4326;POINT(-72.1235 42.3521)'::geography AS gg1, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geography AS gg2) AS foo;", "execution_result": [[123.80207675, 123.47573692]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2152, "question_en": "Output the spheroid distance (spheroid_dist) and sphere distance (sphere_dist) values between POINT(-72.1235 42.3521) and LINESTRING(-72.1260 42.45, -72.123 42.1546) in geographic coordinate system SRID=4326, with sphere distance calculation requiring the spheroid mode to be disabled."}
{"id": 396, "function": "ST_Distance", "question": "输出SRID为4326的地理坐标系下，POINT(-72.1235 42.3521)与LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的椭球体距离（spheroid_dist）和球体距离（sphere_dist），其中球体距离计算时禁用椭球体模型（false参数）。", "sql": "SELECT ST_Distance(gg1, gg2) AS spheroid_dist, ST_Distance(gg1, gg2, false) AS sphere_dist FROM (SELECT 'SRID=4326;POINT(-72.1235 42.3521)'::geography AS gg1, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geography AS gg2) AS foo;", "execution_result": [[123.80207675, 123.47573692]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2153, "question_en": "Output the spheroid distance (spheroid_dist) and sphere distance (sphere_dist) between POINT(-72.1235 42.3521) and LINESTRING(-72.1260 42.45, -72.123 42.1546) in the geographic coordinate system with SRID 4326, where the sphere distance calculation disables the spheroid model (false parameter)."}
{"id": 397, "function": "ST_Distance", "question": "计算SRID为4326的点POINT(-72.1235 42.3521)与SRID为4326的线LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的最小距离。", "sql": "SELECT ST_Distance( 'SRID=4326;POINT(-72.1235 42.3521)'::geometry, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry );", "execution_result": [[0.0015056772638228177]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2154, "question_en": "Calculate the minimum distance between the point POINT(-72.1235 42.3521) with SRID 4326 and the line LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID 4326."}
{"id": 397, "function": "ST_Distance", "question": "计算WGS84坐标系的二维点POINT(-72.1235 42.3521)与SRID为4326的折线LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的空间距离。", "sql": "SELECT ST_Distance( 'SRID=4326;POINT(-72.1235 42.3521)'::geometry, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry );", "execution_result": [[0.0015056772638228177]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2155, "question_en": "Calculate the spatial distance between the 2D point POINT(-72.1235 42.3521) in WGS84 coordinate system and the polyline LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID 4326."}
{"id": 397, "function": "ST_Distance", "question": "计算SRID为4326的二维点POINT(-72.1235 42.3521)与SRID为4326的折线LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的空间距离。", "sql": "SELECT ST_Distance( 'SRID=4326;POINT(-72.1235 42.3521)'::geometry, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry );", "execution_result": [[0.0015056772638228177]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2156, "question_en": "Calculate the spatial distance between the 2D point POINT(-72.1235 42.3521) with SRID 4326 and the polyline LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID 4326."}
{"id": 397, "function": "ST_Distance", "question": "返回点POINT(-72.1235 42.3521)到线LINESTRING(-72.1260 42.45, -72.123 42.1546)的最短距离值。", "sql": "SELECT ST_Distance( 'SRID=4326;POINT(-72.1235 42.3521)'::geometry, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry );", "execution_result": [[0.0015056772638228177]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2157, "question_en": "Return the shortest distance value from point POINT(-72.1235 42.3521) to line LINESTRING(-72.1260 42.45, -72.123 42.1546)."}
{"id": 397, "function": "ST_Distance", "question": "计算WGS84坐标系的二维点POINT(-72.1235 42.3521)与SRID为4326的折线LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的空间距离，并以浮点数形式输出结果。", "sql": "SELECT ST_Distance( 'SRID=4326;POINT(-72.1235 42.3521)'::geometry, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry );", "execution_result": [[0.0015056772638228177]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2158, "question_en": "Calculate the spatial distance between the 2D point POINT(-72.1235 42.3521) in WGS84 and the polyline LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID 4326, and output the result as a floating-point number."}
{"id": 397, "function": "ST_Distance", "question": "输出SRID为4326的二维点POINT(-72.1235 42.3521)与SRID为4326的折线LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的最小距离值，结果以浮点数形式返回。", "sql": "SELECT ST_Distance( 'SRID=4326;POINT(-72.1235 42.3521)'::geometry, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry );", "execution_result": [[0.0015056772638228177]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2159, "question_en": "Output the minimum distance value between the 2D point POINT(-72.1235 42.3521) with SRID 4326 and the linestring LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID 4326, returning the result as a floating-point number."}
{"id": 398, "function": "ST_Distance", "question": "计算SRID=4326的POINT(-72.1235 42.3521)与SRID=4326的LINESTRING(-72.1260 42.45, -72.123 42.1546)在3857投影坐标系下的最小距离。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) );", "execution_result": [[167.44141006544473]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2160, "question_en": "Calculate the minimum distance between POINT(-72.1235 42.3521) with SRID=4326 and LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID=4326 in the 3857 projected coordinate system."}
{"id": 398, "function": "ST_Distance", "question": "计算在Web墨卡托投影(SRID=3857)下，原始坐标为WGS84(SRID=4326)的二维点POINT(-72.1235 42.3521)与折线LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的欧氏距离，要求先将两个几何对象从4326坐标系转换到3857坐标系后再计算距离。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) );", "execution_result": [[167.44141006544473]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2161, "question_en": "Calculate the Euclidean distance between the 2D point POINT(-72.1235 42.3521) in WGS84 (SRID=4326) and the linestring LINESTRING(-72.1260 42.45, -72.123 42.1546) under the Web Mercator projection (SRID=3857), first transforming both geometries from SRID 4326 to 3857 before computing the distance."}
{"id": 398, "function": "ST_Distance", "question": "计算在Web墨卡托投影坐标系(SRID=3857)中，原始坐标为WGS84坐标系(SRID=4326)的二维点POINT(-72.1235 42.3521)与折线LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的最短距离，要求先将两个几何对象从SRID=4326转换到SRID=3857坐标系后再进行距离计算。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) );", "execution_result": [[167.44141006544473]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2162, "question_en": "Calculate the shortest distance between the 2D point POINT(-72.1235 42.3521) in WGS84 (SRID=4326) and the linestring LINESTRING(-72.1260 42.45, -72.123 42.1546), first transforming both geometries from SRID=4326 to Web Mercator (SRID=3857) before computing the distance."}
{"id": 398, "function": "ST_Distance", "question": "返回POINT(-72.1235 42.3521)与LINESTRING(-72.1260 42.45, -72.123 42.1546)在3857坐标系下的最小距离值，结果单位为米。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) );", "execution_result": [[167.44141006544473]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2163, "question_en": "Return the minimum distance in meters between POINT(-72.1235 42.3521) and LINESTRING(-72.1260 42.45, -72.123 42.1546) in the 3857 coordinate system."}
{"id": 398, "function": "ST_Distance", "question": "输出在Web墨卡托投影坐标系(3857)中，计算WGS84坐标系(4326)下的二维点POINT(-72.1235 42.3521)与折线LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的最短距离，结果以米为单位。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) );", "execution_result": [[167.44141006544473]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2164, "question_en": "Output the shortest distance in meters between the 2D point POINT(-72.1235 42.3521) in WGS84 coordinate system (4326) and the linestring LINESTRING(-72.1260 42.45, -72.123 42.1546) in Web Mercator projection coordinate system (3857)."}
{"id": 398, "function": "ST_Distance", "question": "输出将SRID为4326的二维点POINT(-72.1235 42.3521)和SRID为4326的二维折线LINESTRING(-72.1260 42.45, -72.123 42.1546)转换为Web墨卡托投影(SRID 3857)后，计算两者之间的最短距离的数值结果。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) );", "execution_result": [[167.44141006544473]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2165, "question_en": "Output the numerical result of the shortest distance between the 2D point POINT(-72.1235 42.3521) with SRID 4326 and the 2D linestring LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID 4326 after converting them to Web Mercator projection (SRID 3857)."}
{"id": 399, "function": "ST_Distance", "question": "计算SRID=4326的POINT(-72.1235 42.3521)与LINESTRING(-72.1260 42.45, -72.123 42.1546)转换到3857坐标系后的距离，并乘以纬度42.3521的余弦值。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) ) * cosd(42.3521);", "execution_result": [[123.74235125433476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2166, "question_en": "Calculate the distance between POINT(-72.1235 42.3521) and LINESTRING(-72.1260 42.45, -72.123 42.1546) after transforming them to SRID 3857, then multiply by the cosine of latitude 42.3521."}
{"id": 399, "function": "ST_Distance", "question": "计算WGS84坐标系下的二维点POINT(-72.1235 42.3521)与SRID为4326的折线LINESTRING(-72.1260 42.45, -72.123 42.1546)在Web墨卡托投影(SRID=3857)下的球面距离，并将结果乘以纬度42.3521的余弦值cosd(42.3521)。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) ) * cosd(42.3521);", "execution_result": [[123.74235125433476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2167, "question_en": "Calculate the spherical distance between the 2D point POINT(-72.1235 42.3521) in WGS84 and the linestring LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID 4326 under Web Mercator projection (SRID=3857), then multiply the result by the cosine of latitude 42.3521, cosd(42.3521)."}
{"id": 399, "function": "ST_Distance", "question": "计算SRID为4326的二维点POINT(-72.1235 42.3521)与SRID为4326的折线LINESTRING(-72.1260 42.45, -72.123 42.1546)在Web墨卡托投影(SRID 3857)下的球面距离，并将结果乘以纬度42.3521的余弦值cosd(42.3521)。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) ) * cosd(42.3521);", "execution_result": [[123.74235125433476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2168, "question_en": "Calculate the spherical distance between the 2D point POINT(-72.1235 42.3521) with SRID 4326 and the polyline LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID 4326 under the Web Mercator projection (SRID 3857), then multiply the result by the cosine of latitude 42.3521, cosd(42.3521)."}
{"id": 399, "function": "ST_Distance", "question": "返回WGS84坐标系(SRID=4326)中的POINT(-72.1235 42.3521)到LINESTRING(-72.1260 42.45, -72.123 42.1546)在3857投影下的42.3521纬度余弦修正距离值。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) ) * cosd(42.3521);", "execution_result": [[123.74235125433476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2169, "question_en": "Return the cosine-corrected distance value at latitude 42.3521 in the 3857 projection between POINT(-72.1235 42.3521) and LINESTRING(-72.1260 42.45, -72.123 42.1546) in the WGS84 coordinate system (SRID=4326)."}
{"id": 399, "function": "ST_Distance", "question": "输出在Web墨卡托投影坐标系(3857)下，计算经度-72.1235纬度42.3521的二维点POINT(-72.1235 42.3521)与由点(-72.1260 42.45)和点(-72.123 42.1546)构成的线LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的球面距离，并乘以纬度42.3521的余弦值后的最终结果数值。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) ) * cosd(42.3521);", "execution_result": [[123.74235125433476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2170, "question_en": "Output the final numerical result of calculating the spherical distance between the 2D point POINT(-72.1235 42.3521) and the line LINESTRING(-72.1260 42.45, -72.123 42.1546) in the Web Mercator projection coordinate system (3857), multiplied by the cosine of latitude 42.3521."}
{"id": 399, "function": "ST_Distance", "question": "计算并输出在Web墨卡托投影坐标系(3857)下，经度-72.1235纬度42.3521的二维点POINT(-72.1235 42.3521)与由点(-72.1260 42.45)和点(-72.123 42.1546)构成的二维线段LINESTRING(-72.1260 42.45, -72.123 42.1546)之间的球面距离，结果需乘以纬度42.3521的余弦值cosd(42.3521)。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) ) * cosd(42.3521);", "execution_result": [[123.74235125433476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2171, "question_en": "Calculate and output the spherical distance between the 2D point POINT(-72.1235 42.3521) and the 2D linestring LINESTRING(-72.1260 42.45, -72.123 42.1546) in the Web Mercator projection coordinate system (3857), then multiply the result by the cosine of latitude 42.3521 (cosd(42.3521))."}
{"id": 400, "function": "ST_Distance", "question": "计算POINT(-72.1235 42.3521)与LINESTRING(-72.1260 42.45, -72.123 42.1546)在SRID 26986坐标系下的最短距离。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 26986), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 26986) );", "execution_result": [[123.79793787846343]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2172, "question_en": "Calculate the shortest distance between POINT(-72.1235 42.3521) and LINESTRING(-72.1260 42.45, -72.123 42.1546) in the SRID 26986 coordinate system."}
{"id": 400, "function": "ST_Distance", "question": "计算WGS84坐标系下的二维点POINT(-72.1235 42.3521)与SRID为4326的二维折线LINESTRING(-72.1260 42.45, -72.123 42.1546)在坐标系转换到SRID 26986后的空间距离。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 26986), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 26986) );", "execution_result": [[123.79793787846343]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2173, "question_en": "Calculate the spatial distance between the 2D point POINT(-72.1235 42.3521) in WGS84 and the 2D linestring LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID 4326 after transforming to SRID 26986."}
{"id": 400, "function": "ST_Distance", "question": "计算SRID为4326的二维点POINT(-72.1235 42.3521)与SRID为4326的折线LINESTRING(-72.1260 42.45, -72.123 42.1546)在坐标系26986下的最短距离，其中折线由两个顶点(-72.1260 42.45)和(-72.123 42.1546)组成。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 26986), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 26986) );", "execution_result": [[123.79793787846343]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2174, "question_en": "Calculate the shortest distance between the 2D point POINT(-72.1235 42.3521) with SRID 4326 and the linestring LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID 4326 in coordinate system 26986, where the linestring consists of two vertices (-72.1260 42.45) and (-72.123 42.1546)."}
{"id": 400, "function": "ST_Distance", "question": "输出POINT(-72.1235 42.3521)到LINESTRING(-72.1260 42.45, -72.123 42.1546)在UTM 19N坐标系下的米制距离值。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 26986), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 26986) );", "execution_result": [[123.79793787846343]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2175, "question_en": "Output the metric distance value in UTM zone 19N between POINT(-72.1235 42.3521) and LINESTRING(-72.1260 42.45, -72.123 42.1546)."}
{"id": 400, "function": "ST_Distance", "question": "输出WGS84坐标系下的POINT(-72.1235 42.3521)与SRID为4326的LINESTRING(-72.1260 42.45, -72.123 42.1546)在坐标系26986下的空间距离值，结果以浮点数形式返回。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 26986), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 26986) );", "execution_result": [[123.79793787846343]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2176, "question_en": "Output the spatial distance value between POINT(-72.1235 42.3521) in WGS84 coordinate system and LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID 4326 in coordinate system 26986, returning the result as a floating-point number."}
{"id": 400, "function": "ST_Distance", "question": "输出SRID为4326的POINT(-72.1235 42.3521)与SRID为4326的LINESTRING(-72.1260 42.45, -72.123 42.1546)在转换为SRID 26986坐标系后的空间距离值，结果以浮点数形式返回。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 26986), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 26986) );", "execution_result": [[123.79793787846343]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2177, "question_en": "Output the spatial distance value between POINT(-72.1235 42.3521) with SRID 4326 and LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID 4326 after converting to SRID 26986 coordinate system, returning the result as a floating-point number."}
{"id": 401, "function": "ST_Distance", "question": "计算SRID=4326的POINT(-72.1235 42.3521)与SRID=4326的LINESTRING(-72.1260 42.45, -72.123 42.1546)在SRID=2163坐标系中的距离。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 2163) );", "execution_result": [[126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2178, "question_en": "Calculate the distance between POINT(-72.1235 42.3521) with SRID=4326 and LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID=4326 in the SRID=2163 coordinate system."}
{"id": 401, "function": "ST_Distance", "question": "计算WGS84坐标系的二维点POINT(-72.1235 42.3521)与WGS84坐标系的折线LINESTRING(-72.1260 42.45, -72.123 42.1546)在SRID为2163坐标系下的欧氏距离，其中折线由两个顶点组成，第一个顶点坐标为(-72.1260 42.45)，第二个顶点坐标为(-72.123 42.1546)。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 2163) );", "execution_result": [[126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2179, "question_en": "Calculate the Euclidean distance between the 2D point POINT(-72.1235 42.3521) in WGS84 and the polyline LINESTRING(-72.1260 42.45, -72.123 42.1546) in WGS84 under SRID 2163, where the polyline consists of two vertices, the first at (-72.1260 42.45) and the second at (-72.123 42.1546)."}
{"id": 401, "function": "ST_Distance", "question": "计算SRID为4326的二维点POINT(-72.1235 42.3521)与SRID为4326的折线LINESTRING(-72.1260 42.45, -72.123 42.1546)在SRID为2163坐标系下的空间距离，其中折线由两个顶点(-72.1260 42.45)和(-72.123 42.1546)组成。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 2163) );", "execution_result": [[126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2180, "question_en": "Calculate the spatial distance between the 2D point POINT(-72.1235 42.3521) with SRID 4326 and the linestring LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID 4326 in the SRID 2163 coordinate system, where the linestring consists of two vertices (-72.1260 42.45) and (-72.123 42.1546)."}
{"id": 401, "function": "ST_Distance", "question": "输出SRID=4326的POINT(-72.1235 42.3521)与LINESTRING(-72.1260 42.45, -72.123 42.1546)在2163坐标系中的距离值。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 2163) );", "execution_result": [[126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2181, "question_en": "Output the distance value between POINT(-72.1235 42.3521) and LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID=4326 in the 2163 coordinate system."}
{"id": 401, "function": "ST_Distance", "question": "以distance_in_meters为列名，返回POINT(-72.1235 42.3521)与LINESTRING(-72.1260 42.45, -72.123 42.1546)在2163坐标系中的距离值。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 2163) ) AS distance_in_meters;", "execution_result": [[126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2182, "question_en": "Return the distance value between POINT(-72.1235 42.3521) and LINESTRING(-72.1260 42.45, -72.123 42.1546) in the 2163 coordinate system, with the column name as distance_in_meters."}
{"id": 401, "function": "ST_Distance", "question": "输出SRID为4326的POINT(-72.1235 42.3521)与SRID为4326的LINESTRING(-72.1260 42.45, -72.123 42.1546)在SRID 2163坐标系下的空间距离值，结果以浮点数形式返回。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 2163) );", "execution_result": [[126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2183, "question_en": "Output the spatial distance value between POINT(-72.1235 42.3521) with SRID 4326 and LINESTRING(-72.1260 42.45, -72.123 42.1546) with SRID 4326 in the SRID 2163 coordinate system, returning the result as a floating-point number."}
{"id": 402, "function": "ST_3DDistance", "question": "计算POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))的三维和二维距离。", "sql": "SELECT ST_3DDistance(poly, mline) AS dist3d, ST_Distance(poly, mline) AS dist2d \nFROM (SELECT 'POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))'::geometry AS poly, 'MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))'::geometry AS mline) AS foo;", "execution_result": [[0.0, 0.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2184, "question_en": "Calculate the 3D and 2D distances between POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))."}
{"id": 402, "function": "ST_3DDistance", "question": "精确计算给定三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与三维多线串MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))的距离，包括三维距离和二维距离。", "sql": "SELECT ST_3DDistance(poly, mline) AS dist3d, ST_Distance(poly, mline) AS dist2d \nFROM (SELECT 'POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))'::geometry AS poly, 'MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))'::geometry AS mline) AS foo;", "execution_result": [[0.0, 0.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2185, "question_en": "Calculate the exact distance between the given 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the 3D multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), including both 3D and 2D distances."}
{"id": 402, "function": "ST_3DDistance", "question": "计算三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与三维多线MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间的三维距离（ST_3DDistance）和二维距离（ST_Distance），并分别命名为dist3d和dist2d。", "sql": "SELECT ST_3DDistance(poly, mline) AS dist3d, ST_Distance(poly, mline) AS dist2d \nFROM (SELECT 'POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))'::geometry AS poly, 'MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))'::geometry AS mline) AS foo;", "execution_result": [[0.0, 0.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2186, "question_en": "Calculate the 3D distance (ST_3DDistance) and 2D distance (ST_Distance) between the 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the 3D multiline MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), naming them as dist3d and dist2d respectively."}
{"id": 402, "function": "ST_3DDistance", "question": "输出三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与三维多线串MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))的精确三维和二维距离值（dist3d和dist2d两列）。", "sql": "SELECT ST_3DDistance(poly, mline) AS dist3d, ST_Distance(poly, mline) AS dist2d \nFROM (SELECT 'POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))'::geometry AS poly, 'MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))'::geometry AS mline) AS foo;", "execution_result": [[0.0, 0.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2187, "question_en": "Output the exact 3D and 2D distance values (dist3d and dist2d columns) between the 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the 3D multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))."}
{"id": 402, "function": "ST_3DDistance", "question": "对于三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与三维多线串MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))，生成包含两个距离度量结果的数据表：三维距离（dist3d列）和二维距离（dist2d列）。", "sql": "SELECT ST_3DDistance(poly, mline) AS dist3d, ST_Distance(poly, mline) AS dist2d \nFROM (SELECT 'POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))'::geometry AS poly, 'MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))'::geometry AS mline) AS foo;", "execution_result": [[0.0, 0.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2188, "question_en": "For the 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the 3D multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), generate a data table containing two distance metrics: 3D distance (dist3d column) and 2D distance (dist2d column)."}
{"id": 402, "function": "ST_3DDistance", "question": "输出三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与三维多线段MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间的三维距离dist3d和二维距离dist2d的计算结果。", "sql": "SELECT ST_3DDistance(poly, mline) AS dist3d, ST_Distance(poly, mline) AS dist2d \nFROM (SELECT 'POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))'::geometry AS poly, 'MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))'::geometry AS mline) AS foo;", "execution_result": [[0.0, 0.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2189, "question_en": "Output the calculation results of the 3D distance (dist3d) and 2D distance (dist2d) between the 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the 3D multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))."}
{"id": 403, "function": "ST_3DDistance", "question": "在SRID 2163坐标系中，计算POINT(-72.1235 42.3521 4)与LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)的三维距离，以及POINT(-72.1235 42.3521)与LINESTRING(-72.1260 42.45, -72.123 42.1546)的二维距离，结果分别命名为dist_3d和dist_2d。", "sql": "SELECT ST_3DDistance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521 4)'::geometry,2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'::geometry,2163) ) AS dist_3d,  ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry,2163),  ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry,2163) ) AS dist_2d;", "execution_result": [[127.29505932513318, 126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2190, "question_en": "In SRID 2163, calculate the 3D distance between POINT(-72.1235 42.3521 4) and LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20), and the 2D distance between POINT(-72.1235 42.3521) and LINESTRING(-72.1260 42.45, -72.123 42.1546), naming the results dist_3d and dist_2d respectively."}
{"id": 403, "function": "ST_3DDistance", "question": "计算以下两个三维几何对象在SRID 2163坐标系中的三维距离：POINT(-72.1235 42.3521 4)和LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)，并将结果命名为dist_3d；同时计算以下两个二维几何对象在SRID 2163坐标系中的二维距离：POINT(-72.1235 42.3521)和LINESTRING(-72.1260 42.45, -72.123 42.1546)，并将结果命名为dist_2d。", "sql": "SELECT ST_3DDistance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521 4)'::geometry,2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'::geometry,2163) ) AS dist_3d,  ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry,2163),  ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry,2163) ) AS dist_2d;", "execution_result": [[127.29505932513318, 126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2191, "question_en": "Calculate the 3D distance between the following two 3D geometries in SRID 2163: POINT(-72.1235 42.3521 4) and LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20), naming the result dist_3d; also calculate the 2D distance between the following two 2D geometries in SRID 2163: POINT(-72.1235 42.3521) and LINESTRING(-72.1260 42.45, -72.123 42.1546), naming the result dist_2d."}
{"id": 403, "function": "ST_3DDistance", "question": "计算SRID为4326的三维点POINT(-72.1235 42.3521 4)与SRID为4326的三维线LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)在SRID 2163坐标系下的三维距离，并将结果命名为dist_3d；同时计算SRID为4326的二维点POINT(-72.1235 42.3521)与SRID为4326的二维线LINESTRING(-72.1260 42.45, -72.123 42.1546)在SRID 2163坐标系下的二维距离，并将结果命名为dist_2d。", "sql": "SELECT ST_3DDistance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521 4)'::geometry,2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'::geometry,2163) ) AS dist_3d,  ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry,2163),  ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry,2163) ) AS dist_2d;", "execution_result": [[127.29505932513318, 126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2192, "question_en": "Calculate the 3D distance between the SRID 4326 3D point POINT(-72.1235 42.3521 4) and the SRID 4326 3D line LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20) in the SRID 2163 coordinate system, naming the result dist_3d; also calculate the 2D distance between the SRID 4326 2D point POINT(-72.1235 42.3521) and the SRID 4326 2D line LINESTRING(-72.1260 42.45, -72.123 42.1546) in the SRID 2163 coordinate system, naming the result dist_2d."}
{"id": 403, "function": "ST_3DDistance", "question": "输出两个距离值：三维几何对象POINT(-72.1235 42.3521 4)与LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)在SRID 2163坐标系下的空间距离(dist_3d)，以及二维几何对象POINT(-72.1235 42.3521)与LINESTRING(-72.1260 42.45, -72.123 42.1546)在同一坐标系下的平面距离(dist_2d)。", "sql": "SELECT ST_3DDistance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521 4)'::geometry,2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'::geometry,2163) ) AS dist_3d,  ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry,2163),  ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry,2163) ) AS dist_2d;", "execution_result": [[127.29505932513318, 126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2193, "question_en": "Output two distance values: the 3D spatial distance (dist_3d) between geometric objects POINT(-72.1235 42.3521 4) and LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20) in SRID 2163, and the 2D planar distance (dist_2d) between POINT(-72.1235 42.3521) and LINESTRING(-72.1260 42.45, -72.123 42.1546) in the same coordinate system."}
{"id": 403, "function": "ST_3DDistance", "question": "输出三维点POINT(-72.1235 42.3521 4)与三维线LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)在SRID 2163坐标系下的三维距离（dist_3d），以及二维点POINT(-72.1235 42.3521)与二维线LINESTRING(-72.1260 42.45, -72.123 42.1546)在SRID 2163坐标系下的二维距离（dist_2d）。", "sql": "SELECT ST_3DDistance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521 4)'::geometry,2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'::geometry,2163) ) AS dist_3d,  ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry,2163),  ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry,2163) ) AS dist_2d;", "execution_result": [[127.29505932513318, 126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2194, "question_en": "Output the 3D distance (dist_3d) between the 3D point POINT(-72.1235 42.3521 4) and the 3D line LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20) in SRID 2163, and the 2D distance (dist_2d) between the 2D point POINT(-72.1235 42.3521) and the 2D line LINESTRING(-72.1260 42.45, -72.123 42.1546) in SRID 2163."}
{"id": 403, "function": "ST_3DDistance", "question": "输出三维点POINT(-72.1235 42.3521 4)与三维线LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)在SRID 2163坐标系下的三维距离dist_3d，以及二维点POINT(-72.1235 42.3521)与二维线LINESTRING(-72.1260 42.45, -72.123 42.1546)在SRID 2163坐标系下的二维距离dist_2d。", "sql": "SELECT ST_3DDistance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521 4)'::geometry,2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'::geometry,2163) ) AS dist_3d,  ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry,2163),  ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry,2163) ) AS dist_2d;", "execution_result": [[127.29505932513318, 126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2195, "question_en": "Output the 3D distance dist_3d between the 3D point POINT(-72.1235 42.3521 4) and the 3D line LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20) in SRID 2163, and the 2D distance dist_2d between the 2D point POINT(-72.1235 42.3521) and the 2D line LINESTRING(-72.1260 42.45, -72.123 42.1546) in SRID 2163."}
{"id": 404, "function": "ST_DistanceSphere", "question": "计算LINESTRING(-118.584 38.374,-118.583 38.5)的中心点到POINT(-118 38)的球面距离（米）、UTM11带投影距离（米）、角度距离（度）以及该线要素到该点的最小距离（米）。", "sql": "SELECT round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters, \nround(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters, \nround(CAST(ST_Distance(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)', 4326)) AS numeric),5) AS dist_degrees, \nround(CAST(ST_Distance(ST_Transform(geom,32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS min_dist_line_point_meters\n FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70424.71", "70438.00", "0.72900", "65871.18"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2196, "question_en": "Calculate the spherical distance (meters), UTM zone 11 projected distance (meters), angular distance (degrees), and the minimum distance from the LINESTRING(-118.584 38.374,-118.583 38.5) to the POINT(-118 38) (meters)."}
{"id": 404, "function": "ST_DistanceSphere", "question": "对于线要素LINESTRING(-118.584 38.374,-118.583 38.5)，分别计算其中心点与POINT(-118 38)的三种距离：ST_DistanceSphere结果（米）、UTM11带ST_Distance结果（米）、原始坐标系的ST_Distance结果（度），再计算整个线要素到该点的最小距离（米）。", "sql": "SELECT round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters, \nround(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters, \nround(CAST(ST_Distance(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)', 4326)) AS numeric),5) AS dist_degrees, \nround(CAST(ST_Distance(ST_Transform(geom,32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS min_dist_line_point_meters\n FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70424.71", "70438.00", "0.72900", "65871.18"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2197, "question_en": "For the line feature LINESTRING(-118.584 38.374,-118.583 38.5), calculate three distances between its centroid and POINT(-118 38): ST_DistanceSphere result (meters), ST_Distance result in UTM zone 11 (meters), and ST_Distance result in the original coordinate system (degrees). Then calculate the minimum distance (meters) from the entire line feature to this point."}
{"id": 404, "function": "ST_DistanceSphere", "question": "计算LINESTRING(-118.584 38.374,-118.583 38.5)这条线段的几何中心点与POINT(-118 38)之间的四种距离：1) 使用ST_DistanceSphere函数计算球面距离，结果保留2位小数；2) 将两个点转换为UTM 11区坐标系(32611)后计算平面距离，结果保留2位小数；3) 直接计算WGS84坐标系下的角度距离，结果保留5位小数；4) 将线段和点都转换为UTM 11区坐标系后计算线段与点的最小距离，结果保留2位小数。", "sql": "SELECT round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters, \nround(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters, \nround(CAST(ST_Distance(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)', 4326)) AS numeric),5) AS dist_degrees, \nround(CAST(ST_Distance(ST_Transform(geom,32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS min_dist_line_point_meters\n FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70424.71", "70438.00", "0.72900", "65871.18"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2198, "question_en": "Calculate four types of distances between the geometric center of the LINESTRING(-118.584 38.374,-118.583 38.5) and POINT(-118 38): 1) spherical distance using ST_DistanceSphere, rounded to 2 decimal places; 2) planar distance after converting both points to UTM zone 11 (32611), rounded to 2 decimal places; 3) angular distance in WGS84 coordinates, rounded to 5 decimal places; 4) minimum distance between the line and point after converting both to UTM zone 11, rounded to 2 decimal places."}
{"id": 404, "function": "ST_DistanceSphere", "question": "输出LINESTRING(-118.584 38.374,-118.583 38.5)与POINT(-118 38)的四种距离计算结果，分别保留2位小数（线要素中心点到点要素的球面距离、线要素中心点到点要素的UTM距离、线要素本身到点要素的最小距离）和5位小数（线要素中心点到点要素的角度距离）。", "sql": "SELECT round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters, \nround(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters, \nround(CAST(ST_Distance(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)', 4326)) AS numeric),5) AS dist_degrees, \nround(CAST(ST_Distance(ST_Transform(geom,32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS min_dist_line_point_meters\n FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70424.71", "70438.00", "0.72900", "65871.18"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2199, "question_en": "Output the four distance calculation results between LINESTRING(-118.584 38.374,-118.583 38.5) and POINT(-118 38), rounded to 2 decimal places (spherical distance from the line's centroid to the point, UTM distance from the line's centroid to the point, minimum distance from the line itself to the point) and 5 decimal places (angular distance from the line's centroid to the point)."}
{"id": 404, "function": "ST_DistanceSphere", "question": "对于LINESTRING(-118.584 38.374,-118.583 38.5)与POINT(-118 38)，返回包含四个距离度量的结果集：dist_meters（线要素中心点到点要素的球面距离，2位小数）、dist_utm11_meters（线要素中心点到点要素的UTM投影距离，2位小数）、dist_degrees（线要素中心点到点要素的角度距离，5位小数）和min_dist_line_point_meters（线要素本身到点要素的最小距离，2位小数）。", "sql": "SELECT round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters, \nround(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters, \nround(CAST(ST_Distance(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)', 4326)) AS numeric),5) AS dist_degrees, \nround(CAST(ST_Distance(ST_Transform(geom,32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS min_dist_line_point_meters\n FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70424.71", "70438.00", "0.72900", "65871.18"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2200, "question_en": "For LINESTRING(-118.584 38.374,-118.583 38.5) and POINT(-118 38), return a result set containing four distance metrics: dist_meters (spherical distance from the linestring's center point to the point feature, rounded to 2 decimal places), dist_utm11_meters (UTM-projected distance from the linestring's center point to the point feature, rounded to 2 decimal places), dist_degrees (angular distance from the linestring's center point to the point feature, rounded to 5 decimal places), and min_dist_line_point_meters (minimum distance from the linestring itself to the point feature, rounded to 2 decimal places)."}
{"id": 404, "function": "ST_DistanceSphere", "question": "输出以下四个精确到不同小数位数的距离计算结果：1) LINESTRING(-118.584 38.374,-118.583 38.5)的质心与POINT(-118 38)的大地测量距离（米，保留2位小数）；2) 两者在UTM 11N投影坐标系下的平面距离（米，保留2位小数）；3) 两者在WGS84坐标系下的角度距离（保留5位小数）；4) 原始线对象与目标点在UTM 11N坐标系下的最小距离（米，保留2位小数）。", "sql": "SELECT round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters, \nround(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters, \nround(CAST(ST_Distance(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)', 4326)) AS numeric),5) AS dist_degrees, \nround(CAST(ST_Distance(ST_Transform(geom,32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS min_dist_line_point_meters\n FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70424.71", "70438.00", "0.72900", "65871.18"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2201, "question_en": "Output the following four distance calculation results with different decimal precisions: 1) The geodetic distance in meters (rounded to 2 decimal places) between the centroid of LINESTRING(-118.584 38.374,-118.583 38.5) and POINT(-118 38); 2) Their planar distance in meters (rounded to 2 decimal places) in the UTM 11N projected coordinate system; 3) Their angular distance in the WGS84 coordinate system (rounded to 5 decimal places); 4) The minimum distance in meters (rounded to 2 decimal places) between the original line object and the target point in the UTM 11N coordinate system."}
{"id": 405, "function": "ST_DistanceSpheroid", "question": "计算LINESTRING(-118.584 38.374,-118.583 38.5)的中心点到POINT(-118 38)的三种距离：使用WGS84椭球体参数计算的椭球距离、球体距离和UTM11带投影后的平面距离，结果保留两位小数。", "sql": "SELECT round(CAST( ST_DistanceSpheroid(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326), 'SPHEROID[\"WGS 84\",6378137,298.257223563]') AS numeric),2) AS dist_meters_spheroid, round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters_sphere, round(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70454.92", "70424.71", "70438.00"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2202, "question_en": "Calculate three distances from the center point of LINESTRING(-118.584 38.374,-118.583 38.5) to POINT(-118 38): ellipsoidal distance using WGS84 parameters, spherical distance, and planar distance after UTM zone 11 projection, rounding results to two decimal places."}
{"id": 405, "function": "ST_DistanceSpheroid", "question": "对于线LINESTRING(-118.584 38.374,-118.583 38.5)，求其中心点与POINT(-118 38)的三种距离测量值，分别使用SPHEROID[\"WGS 84\",6378137,298.257223563]椭球体模型、球体模型和UTM zone 11N投影坐标系。", "sql": "SELECT round(CAST( ST_DistanceSpheroid(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326), 'SPHEROID[\"WGS 84\",6378137,298.257223563]') AS numeric),2) AS dist_meters_spheroid, round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters_sphere, round(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70454.92", "70424.71", "70438.00"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2203, "question_en": "For the linestring LINESTRING(-118.584 38.374,-118.583 38.5), calculate three distance measurements between its midpoint and POINT(-118 38), using the SPHEROID[\"WGS 84\",6378137,298.257223563] ellipsoid model, sphere model, and UTM zone 11N projected coordinate system respectively."}
{"id": 405, "function": "ST_DistanceSpheroid", "question": "计算LINESTRING(-118.584 38.374,-118.583 38.5)的质心与POINT(-118 38)之间的距离，分别使用三种方法：1) ST_DistanceSpheroid函数，采用WGS84椭球体参数(长半轴6378137米，扁率倒数298.257223563)；2) ST_DistanceSphere函数；3) 将两个点转换为UTM 11N投影坐标系(32611)后的平面距离。所有结果保留2位小数，分别命名为dist_meters_spheroid、dist_meters_sphere和dist_utm11_meters。", "sql": "SELECT round(CAST( ST_DistanceSpheroid(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326), 'SPHEROID[\"WGS 84\",6378137,298.257223563]') AS numeric),2) AS dist_meters_spheroid, round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters_sphere, round(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70454.92", "70424.71", "70438.00"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2204, "question_en": "Calculate the distance between the centroid of LINESTRING(-118.584 38.374,-118.583 38.5) and POINT(-118 38) using three methods: 1) ST_DistanceSpheroid function with WGS84 ellipsoid parameters (semi-major axis 6378137 meters, inverse flattening 298.257223563); 2) ST_DistanceSphere function; 3) planar distance after converting both points to UTM zone 11N projection (EPSG:32611). Round all results to 2 decimal places, named as dist_meters_spheroid, dist_meters_sphere, and dist_utm11_meters respectively."}
{"id": 405, "function": "ST_DistanceSpheroid", "question": "输出LINESTRING(-118.584 38.374,-118.583 38.5)中心点到POINT(-118 38)的三种距离测量结果（使用WGS84椭球体参数计算的椭球距离、球体距离和UTM11带投影后的平面距离），分别命名为dist_meters_spheroid、dist_meters_sphere和dist_utm11_meters，所有数值保留两位小数。", "sql": "SELECT round(CAST( ST_DistanceSpheroid(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326), 'SPHEROID[\"WGS 84\",6378137,298.257223563]') AS numeric),2) AS dist_meters_spheroid, round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters_sphere, round(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70454.92", "70424.71", "70438.00"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2205, "question_en": "Output three distance measurement results from the center point of LINESTRING(-118.584 38.374,-118.583 38.5) to POINT(-118 38) (ellipsoidal distance calculated using WGS84 ellipsoid parameters, spherical distance, and planar distance after UTM zone 11 projection), named as dist_meters_spheroid, dist_meters_sphere, and dist_utm11_meters respectively, with all values rounded to two decimal places."}
{"id": 405, "function": "ST_DistanceSpheroid", "question": "返回包含LINESTRING(-118.584 38.374,-118.583 38.5)中心点到POINT(-118 38)的三个距离值的记录集：椭球距离(dist_meters_spheroid)、球体距离(dist_meters_sphere)和UTM11投影距离(dist_utm11_meters)，所有值都四舍五入到小数点后两位。", "sql": "SELECT round(CAST( ST_DistanceSpheroid(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326), 'SPHEROID[\"WGS 84\",6378137,298.257223563]') AS numeric),2) AS dist_meters_spheroid, round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters_sphere, round(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70454.92", "70424.71", "70438.00"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2206, "question_en": "Return a record set containing three distance values from the center point of LINESTRING(-118.584 38.374,-118.583 38.5) to POINT(-118 38): ellipsoidal distance (dist_meters_spheroid), spherical distance (dist_meters_sphere), and UTM11 projected distance (dist_utm11_meters), all rounded to two decimal places."}
{"id": 405, "function": "ST_DistanceSpheroid", "question": "输出LINESTRING(-118.584 38.374,-118.583 38.5)的中心点与POINT(-118 38)之间的三种距离计算结果，包括：1)基于WGS84椭球体的球面距离(保留2位小数)，2)基于球体的近似距离(保留2位小数)，3)UTM 11N投影坐标系下的平面距离(保留2位小数)，分别命名为dist_meters_spheroid、dist_meters_sphere和dist_utm11_meters。", "sql": "SELECT round(CAST( ST_DistanceSpheroid(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326), 'SPHEROID[\"WGS 84\",6378137,298.257223563]') AS numeric),2) AS dist_meters_spheroid, round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters_sphere, round(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70454.92", "70424.71", "70438.00"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2207, "question_en": "Output three distance calculation results between the center point of LINESTRING(-118.584 38.374,-118.583 38.5) and POINT(-118 38), including: 1) spheroidal distance based on the WGS84 ellipsoid (rounded to 2 decimal places), 2) approximate spherical distance (rounded to 2 decimal places), 3) planar distance in the UTM 11N projected coordinate system (rounded to 2 decimal places), named as dist_meters_spheroid, dist_meters_sphere, and dist_utm11_meters respectively."}
{"id": 406, "function": "ST_FrechetDistance", "question": "计算LINESTRING (0 0, 100 0)和LINESTRING (0 0, 50 50, 100 0)这两条折线在线段插值密度分数0.5下的弗雷歇距离。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry, 0.5);", "execution_result": [[50.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2208, "question_en": "Calculate the Fréchet distance between the linestrings LINESTRING (0 0, 100 0) and LINESTRING (0 0, 50 50, 100 0) with a segment interpolation density fraction of 0.5."}
{"id": 406, "function": "ST_FrechetDistance", "question": "计算LINESTRING (0 0, 100 0)和LINESTRING (0 0, 50 50, 100 0)这两条折线之间的弗雷歇距离frechetdistance，线段插值度参数设置为0.5。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry, 0.5);", "execution_result": [[50.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2209, "question_en": "Calculate the Fréchet distance (frechetdistance) between the linestrings LINESTRING (0 0, 100 0) and LINESTRING (0 0, 50 50, 100 0) with a segment interpolation parameter of 0.5."}
{"id": 406, "function": "ST_FrechetDistance", "question": "计算LINESTRING (0 0, 100 0)和LINESTRING (0 0, 50 50, 100 0)这两条折线之间的弗雷歇距离，其中第一条折线由点(0 0)到点(100 0)组成，第二条折线由点(0 0)到点(50 50)再到点(100 0)组成，线段插值密度参数设置为0.5。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry, 0.5);", "execution_result": [[50.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2210, "question_en": "Calculate the Fréchet distance between the linestrings LINESTRING (0 0, 100 0) and LINESTRING (0 0, 50 50, 100 0), where the first linestring consists of points (0 0) to (100 0), and the second linestring consists of points (0 0) to (50 50) to (100 0), with a segment interpolation density parameter set to 0.5."}
{"id": 406, "function": "ST_FrechetDistance", "question": "输出两条折线LINESTRING (0 0, 100 0)和LINESTRING (0 0, 50 50, 100 0)在密度参数0.5（表示计算时分段处理，每一段占原线段的比例）下的弗雷歇距离数值结果。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry, 0.5);", "execution_result": [[50.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2211, "question_en": "Output the Fréchet distance numerical result between the two linestrings LINESTRING (0 0, 100 0) and LINESTRING (0 0, 50 50, 100 0) with a density parameter of 0.5 (indicating segmented processing during calculation, where each segment accounts for a proportion of the original line segment)."}
{"id": 406, "function": "ST_FrechetDistance", "question": "计算LINESTRING (0 0, 100 0)与LINESTRING (0 0, 50 50, 100 0)之间的弗雷歇距离，其中线段插密度设置为0.5，输出结果为数值类型。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry, 0.5);", "execution_result": [[50.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2212, "question_en": "Calculate the Fréchet distance between LINESTRING (0 0, 100 0) and LINESTRING (0 0, 50 50, 100 0) with a segment interpolation density of 0.5, returning the result as a numeric value."}
{"id": 406, "function": "ST_FrechetDistance", "question": "输出LINESTRING (0 0, 100 0)与LINESTRING (0 0, 50 50, 100 0)这两条折线在线段插密度参数为0.5时的弗雷歇距离数值结果。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry, 0.5);", "execution_result": [[50.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2213, "question_en": "Output the Fréchet distance numerical result between the linestrings LINESTRING (0 0, 100 0) and LINESTRING (0 0, 50 50, 100 0) with a segment interpolation density parameter of 0.5."}
{"id": 407, "function": "ST_FrechetDistance", "question": "计算LINESTRING (0 0, 100 0)和LINESTRING (0 0, 50 50, 100 0)这两条折线之间的弗雷歇距离。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry);", "execution_result": [[70.71067811865476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2214, "question_en": "Calculate the Fréchet distance between the linestrings LINESTRING (0 0, 100 0) and LINESTRING (0 0, 50 50, 100 0)."}
{"id": 407, "function": "ST_FrechetDistance", "question": "计算LINESTRING (0 0, 100 0)和LINESTRING (0 0, 50 50, 100 0)这两条折线之间的弗雷歇距离frechetdistance。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry);", "execution_result": [[70.71067811865476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2215, "question_en": "Calculate the Fréchet distance between the linestrings LINESTRING (0 0, 100 0) and LINESTRING (0 0, 50 50, 100 0)."}
{"id": 407, "function": "ST_FrechetDistance", "question": "计算LINESTRING (0 0, 100 0)这条由点(0 0)到点(100 0)组成的直线段，与LINESTRING (0 0, 50 50, 100 0)这条由点(0 0)到点(50 50)再到点(100 0)组成的折线段之间的弗雷歇距离。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry);", "execution_result": [[70.71067811865476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2216, "question_en": "Calculate the Fréchet distance between the line segment LINESTRING (0 0, 100 0) from point (0 0) to point (100 0) and the polyline LINESTRING (0 0, 50 50, 100 0) from point (0 0) to point (50 50) to point (100 0)."}
{"id": 407, "function": "ST_FrechetDistance", "question": "返回LINESTRING (0 0, 100 0)和LINESTRING (0 0, 50 50, 100 0)的弗雷歇距离数值。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry);", "execution_result": [[70.71067811865476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2217, "question_en": "Return the Fréchet distance value between LINESTRING (0 0, 100 0) and LINESTRING (0 0, 50 50, 100 0)."}
{"id": 407, "function": "ST_FrechetDistance", "question": "输出LINESTRING (0 0, 100 0)与LINESTRING (0 0, 50 50, 100 0)两条折线之间的弗雷歇距离frechetdistance数值结果。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry);", "execution_result": [[70.71067811865476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2218, "question_en": "Output the Fréchet distance numerical result between the linestrings LINESTRING (0 0, 100 0) and LINESTRING (0 0, 50 50, 100 0)."}
{"id": 407, "function": "ST_FrechetDistance", "question": "输出LINESTRING (0 0, 100 0)和LINESTRING (0 0, 50 50, 100 0)两条折线之间的弗雷歇距离数值结果。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry);", "execution_result": [[70.71067811865476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2219, "question_en": "Output the numerical result of the Fréchet distance between the two linestrings LINESTRING (0 0, 100 0) and LINESTRING (0 0, 50 50, 100 0)."}
{"id": 408, "function": "ST_HausdorffDistance", "question": "计算LINESTRING (130 0, 0 0, 0 150)和LINESTRING (10 10, 10 150, 130 10)这两个线串之间的豪斯多夫距离，密度参数设为0.5。", "sql": "SELECT ST_HausdorffDistance( 'LINESTRING (130 0, 0 0, 0 150)'::geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);", "execution_result": [[70.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2220, "question_en": "Calculate the Hausdorff distance between the linestrings LINESTRING (130 0, 0 0, 0 150) and LINESTRING (10 10, 10 150, 130 10) with a density parameter of 0.5."}
{"id": 408, "function": "ST_HausdorffDistance", "question": "计算由点(130,0)、(0,0)、(0,150)组成的线串和由点(10,10)、(10,150)、(130,10)组成的线串之间的豪斯多夫距离，密度参数设为0.5。", "sql": "SELECT ST_HausdorffDistance( 'LINESTRING (130 0, 0 0, 0 150)'::geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);", "execution_result": [[70.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2221, "question_en": "Calculate the Hausdorff distance between the linestring formed by points (130,0), (0,0), (0,150) and the linestring formed by points (10,10), (10,150), (130,10), with a density parameter of 0.5."}
{"id": 408, "function": "ST_HausdorffDistance", "question": "计算LINESTRING (130 0, 0 0, 0 150)和LINESTRING (10 10, 10 150, 130 10)这两条折线之间的豪斯多夫距离，其中密度参数设置为0.5。", "sql": "SELECT ST_HausdorffDistance( 'LINESTRING (130 0, 0 0, 0 150)'::geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);", "execution_result": [[70.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2222, "question_en": "Calculate the Hausdorff distance between the linestrings LINESTRING (130 0, 0 0, 0 150) and LINESTRING (10 10, 10 150, 130 10) with a density parameter of 0.5."}
{"id": 408, "function": "ST_HausdorffDistance", "question": "返回LINESTRING (130 0, 0 0, 0 150)和LINESTRING (10 10, 10 150, 130 10)之间的豪斯多夫距离值，密度参数设为0.5。", "sql": "SELECT ST_HausdorffDistance( 'LINESTRING (130 0, 0 0, 0 150)'::geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);", "execution_result": [[70.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2223, "question_en": "Return the Hausdorff distance value between LINESTRING (130 0, 0 0, 0 150) and LINESTRING (10 10, 10 150, 130 10), with the density parameter set to 0.5."}
{"id": 408, "function": "ST_HausdorffDistance", "question": "计算LINESTRING (130 0, 0 0, 0 150)与LINESTRING (10 10, 10 150, 130 10)之间的豪斯多夫距离，其中密度参数设置为0.5，输出结果为浮点数值。", "sql": "SELECT ST_HausdorffDistance( 'LINESTRING (130 0, 0 0, 0 150)'::geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);", "execution_result": [[70.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2224, "question_en": "Calculate the Hausdorff distance between LINESTRING (130 0, 0 0, 0 150) and LINESTRING (10 10, 10 150, 130 10) with a density parameter of 0.5, returning the result as a floating-point value."}
{"id": 408, "function": "ST_HausdorffDistance", "question": "计算LINESTRING (130 0, 0 0, 0 150)与LINESTRING (10 10, 10 150, 130 10)之间的豪斯多夫距离，其中0.5表示距离计算的密度参数，输出结果为双精度浮点数。", "sql": "SELECT ST_HausdorffDistance( 'LINESTRING (130 0, 0 0, 0 150)'::geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);", "execution_result": [[70.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2225, "question_en": "Calculate the Hausdorff distance between LINESTRING (130 0, 0 0, 0 150) and LINESTRING (10 10, 10 150, 130 10) with a density parameter of 0.5 for distance calculation, returning the result as a double-precision floating-point number."}
{"id": 409, "function": "ST_HausdorffDistance", "question": "计算LINESTRING (20 70, 70 60, 110 70, 170 70)和LINESTRING (20 90, 130 90, 60 100, 190 100)之间的豪斯多夫距离和最小距离。", "sql": "SELECT ST_HausdorffDistance(geomA, geomB), ST_Distance(geomA, geomB) FROM (SELECT 'LINESTRING (20 70, 70 60, 110 70, 170 70)'::geometry AS geomA, 'LINESTRING (20 90, 130 90, 60 100, 190 100)'::geometry AS geomB) AS t;", "execution_result": [[37.26206567625497, 20.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2226, "question_en": "Calculate the Hausdorff distance and the minimum distance between LINESTRING (20 70, 70 60, 110 70, 170 70) and LINESTRING (20 90, 130 90, 60 100, 190 100)."}
{"id": 409, "function": "ST_HausdorffDistance", "question": "精确计算由坐标点(20 70,70 60,110 70,170 70)和(20 90,130 90,60 100,190 100)定义的两条折线的豪斯多夫距离和最小距离。", "sql": "SELECT ST_HausdorffDistance(geomA, geomB), ST_Distance(geomA, geomB) FROM (SELECT 'LINESTRING (20 70, 70 60, 110 70, 170 70)'::geometry AS geomA, 'LINESTRING (20 90, 130 90, 60 100, 190 100)'::geometry AS geomB) AS t;", "execution_result": [[37.26206567625497, 20.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2227, "question_en": "Calculate the Hausdorff distance and the minimum distance between the two polylines defined by the coordinate points (20 70,70 60,110 70,170 70) and (20 90,130 90,60 100,190 100)."}
{"id": 409, "function": "ST_HausdorffDistance", "question": "计算LINESTRING (20 70, 70 60, 110 70, 170 70)和LINESTRING (20 90, 130 90, 60 100, 190 100)这两条折线之间的豪斯多夫距离和欧氏距离。", "sql": "SELECT ST_HausdorffDistance(geomA, geomB), ST_Distance(geomA, geomB) FROM (SELECT 'LINESTRING (20 70, 70 60, 110 70, 170 70)'::geometry AS geomA, 'LINESTRING (20 90, 130 90, 60 100, 190 100)'::geometry AS geomB) AS t;", "execution_result": [[37.26206567625497, 20.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2228, "question_en": "Calculate the Hausdorff distance and Euclidean distance between the linestrings LINESTRING (20 70, 70 60, 110 70, 170 70) and LINESTRING (20 90, 130 90, 60 100, 190 100)."}
{"id": 409, "function": "ST_HausdorffDistance", "question": "输出LINESTRING (20 70,70 60,110 70,170 70)和LINESTRING (20 90,130 90,60 100,190 100)的豪斯多夫距离和最小距离两个数值结果。", "sql": "SELECT ST_HausdorffDistance(geomA, geomB), ST_Distance(geomA, geomB) FROM (SELECT 'LINESTRING (20 70, 70 60, 110 70, 170 70)'::geometry AS geomA, 'LINESTRING (20 90, 130 90, 60 100, 190 100)'::geometry AS geomB) AS t;", "execution_result": [[37.26206567625497, 20.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2229, "question_en": "Output the two numerical results of the Hausdorff distance and the minimum distance between LINESTRING (20 70,70 60,110 70,170 70) and LINESTRING (20 90,130 90,60 100,190 100)."}
{"id": 409, "function": "ST_HausdorffDistance", "question": "返回两条折线几何对象LINESTRING (20 70,70 60,110 70,170 70)和LINESTRING (20 90,130 90,60 100,190 100)的距离计算结果，包含豪斯多夫距离和最小距离两个数值。", "sql": "SELECT ST_HausdorffDistance(geomA, geomB), ST_Distance(geomA, geomB) FROM (SELECT 'LINESTRING (20 70, 70 60, 110 70, 170 70)'::geometry AS geomA, 'LINESTRING (20 90, 130 90, 60 100, 190 100)'::geometry AS geomB) AS t;", "execution_result": [[37.26206567625497, 20.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2230, "question_en": "Return the distance calculation results between the two linestring geometry objects LINESTRING (20 70,70 60,110 70,170 70) and LINESTRING (20 90,130 90,60 100,190 100), including both the Hausdorff distance and the minimum distance values."}
{"id": 409, "function": "ST_HausdorffDistance", "question": "输出LINESTRING (20 70, 70 60, 110 70, 170 70)与LINESTRING (20 90, 130 90, 60 100, 190 100)之间的豪斯多夫距离和欧氏距离，要求返回两个数值结果。", "sql": "SELECT ST_HausdorffDistance(geomA, geomB), ST_Distance(geomA, geomB) FROM (SELECT 'LINESTRING (20 70, 70 60, 110 70, 170 70)'::geometry AS geomA, 'LINESTRING (20 90, 130 90, 60 100, 190 100)'::geometry AS geomB) AS t;", "execution_result": [[37.26206567625497, 20.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2231, "question_en": "Output the Hausdorff distance and Euclidean distance between LINESTRING (20 70, 70 60, 110 70, 170 70) and LINESTRING (20 90, 130 90, 60 100, 190 100), returning both numerical results."}
{"id": 411, "function": "ST_Length", "question": "计算由坐标点(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)、(743238 2967416)组成的闭合线串在SRID 2249坐标系下的长度。", "sql": "SELECT ST_Length(ST_GeomFromText('LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)',2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2232, "question_en": "Calculate the length of the closed linestring formed by the coordinate points (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416), (743238 2967416) in the SRID 2249 coordinate system."}
{"id": 411, "function": "ST_Length", "question": "测量从(743238,2967416)出发，经过(743238,2967450)、(743265,2967450)、(743265.625,2967416)，最后返回起点的线串长度。", "sql": "SELECT ST_Length(ST_GeomFromText('LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)',2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2233, "question_en": "Measure the length of the linestring starting from (743238,2967416), passing through (743238,2967450), (743265,2967450), (743265.625,2967416), and finally returning to the starting point."}
{"id": 411, "function": "ST_Length", "question": "计算由4个顶点构成的LINESTRING几何对象（坐标依次为743238 2967416、743238 2967450、743265 2967450、743265.625 2967416、743238 2967416）在SRID为2249的空间参考系中的总长度。", "sql": "SELECT ST_Length(ST_GeomFromText('LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)',2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2234, "question_en": "Calculate the total length of a LINESTRING geometry object with 4 vertices (coordinates in order: 743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416) in the spatial reference system with SRID 2249."}
{"id": 411, "function": "ST_Length", "question": "输出线串(743238 2967416)-(743238 2967450)-(743265 2967450)-(743265.625 2967416)-(743238 2967416)的长度数值结果。", "sql": "SELECT ST_Length(ST_GeomFromText('LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)',2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2235, "question_en": "Output the length value of the linestring (743238 2967416)-(743238 2967450)-(743265 2967450)-(743265.625 2967416)-(743238 2967416)."}
{"id": 411, "function": "ST_Length", "question": "返回由五个指定坐标点构成的线串LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)的精确长度值。", "sql": "SELECT ST_Length(ST_GeomFromText('LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)',2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2236, "question_en": "Return the exact length value of the linestring LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416) formed by the five specified coordinate points."}
{"id": 411, "function": "ST_Length", "question": "计算并输出LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)在SRID为2249的空间参考系下的总长度数值。", "sql": "SELECT ST_Length(ST_GeomFromText('LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)',2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2237, "question_en": "Calculate and output the total length of LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416) in the spatial reference system with SRID 2249."}
{"id": 412, "function": "ST_Length", "question": "计算SRID=4326的LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)地理线对象在椭球体和球体模型下的长度。", "sql": "SELECT ST_Length(the_geog) AS length_spheroid, ST_Length(the_geog,false) AS length_sphere FROM \n(SELECT ST_GeographyFromText( 'SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)') AS the_geog) AS foo;", "execution_result": [[34310.570362728045, 34346.20609607416]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2238, "question_en": "Calculate the length of the LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546) geographic line object with SRID=4326 under both ellipsoidal and spherical models."}
{"id": 412, "function": "ST_Length", "question": "计算SRID为4326的地理坐标系中，由三个点(-72.1260 42.45)、(-72.1240 42.45666)、(-72.123 42.1546)组成的LINESTRING线段的两种长度：使用椭球体模型计算的长度命名为length_spheroid，使用球体模型计算的长度命名为length_sphere。", "sql": "SELECT ST_Length(the_geog) AS length_spheroid, ST_Length(the_geog,false) AS length_sphere FROM (SELECT ST_GeographyFromText( 'SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)') AS the_geog) AS foo;", "execution_result": [[34310.570362728045, 34346.20609607416]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2239, "question_en": "Calculate the two lengths of the LINESTRING formed by the three points (-72.1260 42.45), (-72.1240 42.45666), (-72.123 42.1546) in the geographic coordinate system with SRID 4326: the length calculated using the spheroid model named as length_spheroid, and the length calculated using the sphere model named as length_sphere."}
{"id": 412, "function": "ST_Length", "question": "计算SRID为4326的LINESTRING类型地理对象（由三个点组成：POINT(-72.1260 42.45)、POINT(-72.1240 42.45666)和POINT(-72.123 42.1546)）在椭球体模型下的长度（命名为length_spheroid）和在球体模型下的长度（命名为length_sphere）。", "sql": "SELECT ST_Length(the_geog) AS length_spheroid, ST_Length(the_geog,false) AS length_sphere FROM (SELECT ST_GeographyFromText( 'SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)') AS the_geog) AS foo;", "execution_result": [[34310.570362728045, 34346.20609607416]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2240, "question_en": "Calculate the length of a LINESTRING geographic object with SRID 4326 (composed of three points: POINT(-72.1260 42.45), POINT(-72.1240 42.45666), and POINT(-72.123 42.1546)) under the spheroid model (named length_spheroid) and under the sphere model (named length_sphere)."}
{"id": 412, "function": "ST_Length", "question": "返回地理线对象LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)在两种测量模型，即椭球体和球体下的长度值，分别命名为length_spheroid和length_sphere。", "sql": "SELECT ST_Length(the_geog) AS length_spheroid, ST_Length(the_geog,false) AS length_sphere FROM (SELECT ST_GeographyFromText( 'SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)') AS the_geog) AS foo;", "execution_result": [[34310.570362728045, 34346.20609607416]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2241, "question_en": "Return the length values of the geographic line object LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546) under two measurement models, namely the ellipsoid and the sphere, named as length_spheroid and length_sphere respectively."}
{"id": 412, "function": "ST_Length", "question": "输出地理坐标系SRID=4326下LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)线段的两种长度计算结果：length_spheroid表示基于椭球体模型计算的测地长度，length_sphere表示基于球体模型计算的测地长度。", "sql": "SELECT ST_Length(the_geog) AS length_spheroid, ST_Length(the_geog,false) AS length_sphere FROM (SELECT ST_GeographyFromText( 'SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)') AS the_geog) AS foo;", "execution_result": [[34310.570362728045, 34346.20609607416]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2242, "question_en": "Output the two length calculation results for the LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546) in geographic coordinate system SRID=4326: length_spheroid represents the geodesic length calculated based on the ellipsoid model, and length_sphere represents the geodesic length calculated based on the sphere model."}
{"id": 412, "function": "ST_Length", "question": "计算并输出SRID为4326的LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)地理线段的两种长度：length_spheroid表示考虑地球椭球体模型的长度，length_sphere表示不考虑椭球体模型的球面长度。", "sql": "SELECT ST_Length(the_geog) AS length_spheroid, ST_Length(the_geog,false) AS length_sphere FROM (SELECT ST_GeographyFromText( 'SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)') AS the_geog) AS foo;", "execution_result": [[34310.570362728045, 34346.20609607416]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2243, "question_en": "Calculate and output two lengths for the LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546) with SRID 4326: length_spheroid represents the length considering the Earth's ellipsoid model, and length_sphere represents the spherical length without the ellipsoid model."}
{"id": 413, "function": "ST_Length", "question": "计算由点(-72.1260 42.45)、(-72.1240 42.45666)和(-72.123 42.1546)组成的线对象在坐标系26986下的长度。", "sql": "SELECT ST_Length(ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)'),26986));", "execution_result": [[34309.45635761903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2244, "question_en": "Calculate the length of the line object formed by points (-72.1260 42.45), (-72.1240 42.45666), and (-72.123 42.1546) in coordinate system 26986."}
{"id": 413, "function": "ST_Length", "question": "计算WGS84坐标系下的LINESTRING几何对象（由三个点组成：第一个点坐标为-72.1260经度42.45纬度，第二个点坐标为-72.1240经度42.45666纬度，第三个点坐标为-72.123经度42.1546纬度）经过坐标转换到SRID 26986后的长度值。", "sql": "SELECT ST_Length(ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)'),26986));", "execution_result": [[34309.45635761903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2245, "question_en": "Calculate the length of the LINESTRING geometry object in WGS84 (composed of three points: first point at longitude -72.1260 latitude 42.45, second point at longitude -72.1240 latitude 42.45666, third point at longitude -72.123 latitude 42.1546) after transforming it to SRID 26986."}
{"id": 413, "function": "ST_Length", "question": "计算SRID为4326的LINESTRING几何对象（由三个点组成：第一个点坐标为-72.1260经度和42.45纬度，第二个点坐标为-72.1240经度和42.45666纬度，第三个点坐标为-72.123经度和42.1546纬度）在转换为SRID 26986坐标系后的长度值。", "sql": "SELECT ST_Length(ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)'),26986));", "execution_result": [[34309.45635761903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2246, "question_en": "Calculate the length of a LINESTRING geometry object (composed of three points: first point at longitude -72.1260 and latitude 42.45, second point at longitude -72.1240 and latitude 42.45666, third point at longitude -72.123 and latitude 42.1546) with SRID 4326 after transforming it to SRID 26986."}
{"id": 413, "function": "ST_Length", "question": "输出由点(-72.1260 42.45)、(-72.1240 42.45666)和(-72.123 42.1546)组成的线对象在坐标系26986下的长度值。", "sql": "SELECT ST_Length(ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)'),26986));", "execution_result": [[34309.45635761903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2247, "question_en": "Output the length value of the line object formed by points (-72.1260 42.45), (-72.1240 42.45666), and (-72.123 42.1546) in coordinate system 26986."}
{"id": 413, "function": "ST_Length", "question": "计算SRID为4326的LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)在坐标系26986下的长度，并以数值形式输出结果。", "sql": "SELECT ST_Length(ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)'),26986));", "execution_result": [[34309.45635761903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2248, "question_en": "Calculate the length of the LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546) with SRID 4326 in coordinate system 26986, and output the result as a numeric value."}
{"id": 413, "function": "ST_Length", "question": "输出SRID为4326的LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)几何对象在坐标系转换为26986后的长度值，结果以浮点数形式返回。", "sql": "SELECT ST_Length(ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)'),26986));", "execution_result": [[34309.45635761903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2249, "question_en": "Output the length of the LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546) geometry with SRID 4326 after converting its coordinate system to 26986, returning the result as a floating-point number."}
{"id": 414, "function": "ST_3DLength", "question": "计算由坐标点(743238 2967416 1)、(743238 2967450 1)、(743265 2967450 3)、(743265.625 2967416 3)、(743238 2967416 3)构成的三维线对象在SRID 2249坐标系下的空间长度。", "sql": "SELECT ST_3DLength(ST_GeomFromText('LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)',2249));", "execution_result": [[122.70471674145682]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2250, "question_en": "Calculate the spatial length of the 3D line object formed by the coordinate points (743238 2967416 1), (743238 2967450 1), (743265 2967450 3), (743265.625 2967416 3), (743238 2967416 3) in the SRID 2249 coordinate system."}
{"id": 414, "function": "ST_3DLength", "question": "计算SRID为2249的三维线LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)的空间长度，其中线段的五个顶点坐标分别为(743238,2967416,1)、(743238,2967450,1)、(743265,2967450,3)、(743265.625,2967416,3)和(743238,2967416,3)。", "sql": "SELECT ST_3DLength(ST_GeomFromText('LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)',2249));", "execution_result": [[122.70471674145682]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2251, "question_en": "Calculate the spatial length of a 3D LINESTRING with SRID 2249: LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3), where the five vertices are (743238,2967416,1), (743238,2967450,1), (743265,2967450,3), (743265.625,2967416,3), and (743238,2967416,3)."}
{"id": 414, "function": "ST_3DLength", "question": "计算SRID为2249的LINESTRING三维线段的长度，该线段由5个三维点组成，坐标依次为：点1(743238 2967416 高度1)、点2(743238 2967450 高度1)、点3(743265 2967450 高度3)、点4(743265.625 2967416 高度3)、点5(743238 2967416 高度3)，使用ST_3DLength函数计算其三维空间长度。", "sql": "SELECT ST_3DLength(ST_GeomFromText('LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)',2249));", "execution_result": [[122.70471674145682]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2252, "question_en": "Calculate the 3D length of a LINESTRING with SRID 2249, composed of 5 3D points with coordinates in order: point1 (743238 2967416 height1), point2 (743238 2967450 height1), point3 (743265 2967450 height3), point4 (743265.625 2967416 height3), point5 (743238 2967416 height3), using the ST_3DLength function."}
{"id": 414, "function": "ST_3DLength", "question": "返回由五个三维点构成的线对象LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)在SRID 2249下的长度数值。", "sql": "SELECT ST_3DLength(ST_GeomFromText('LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)',2249));", "execution_result": [[122.70471674145682]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2253, "question_en": "Return the length value of the LINESTRING object composed of five 3D points (743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3) under SRID 2249."}
{"id": 414, "function": "ST_3DLength", "question": "计算点坐标为(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)的三维折线在SRID 2249坐标系下的空间长度，输出结果为浮点数值。", "sql": "SELECT ST_3DLength(ST_GeomFromText('LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)',2249));", "execution_result": [[122.70471674145682]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2254, "question_en": "Calculate the spatial length of a 3D polyline with coordinates (743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3) in SRID 2249, returning the result as a floating-point value."}
{"id": 414, "function": "ST_3DLength", "question": "计算三维线LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)在SRID 2249坐标系下的空间长度，输出为浮点数值。", "sql": "SELECT ST_3DLength(ST_GeomFromText('LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)',2249));", "execution_result": [[122.70471674145682]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2255, "question_en": "Calculate the spatial length of the 3D linestring LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3) in SRID 2249 coordinate system, output as a floating-point value."}
{"id": 415, "function": "ST_LengthSpheroid", "question": "计算MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))在GRS_1980椭球体下的总长度、第一条线(-118.584 38.374,-118.583 38.5)长度和第二条线(-71.05957 42.3589 , -71.061 43)长度。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) AS tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) AS len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) AS len_line2 \nFROM (SELECT ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))') AS geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' AS spheroid) AS sph_m) AS foo;", "execution_result": [[85204.52077118107, 13986.872528244732, 71217.64824293634]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2256, "question_en": "Calculate the total length of MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43)) on the GRS_1980 ellipsoid, the length of the first line (-118.584 38.374,-118.583 38.5), and the length of the second line (-71.05957 42.3589 , -71.061 43)."}
{"id": 415, "function": "ST_LengthSpheroid", "question": "使用SPHEROID[\"GRS_1980\",6378137,298.257222101]椭球体参数，精确计算由线段(-118.584 38.374到-118.583 38.5)和(-71.05957 42.3589到-71.061 43)构成的多线串集合的长度及各分量长度。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) AS tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) AS len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) AS len_line2 \nFROM (SELECT ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))') AS geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' AS spheroid) AS sph_m) AS foo;", "execution_result": [[85204.52077118107, 13986.872528244732, 71217.64824293634]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2257, "question_en": "Using the ellipsoid parameters SPHEROID[\"GRS_1980\",6378137,298.257222101], accurately calculate the length of the multilinestring collection composed of segments (-118.584 38.374 to -118.583 38.5) and (-71.05957 42.3589 to -71.061 43), as well as the lengths of its individual components."}
{"id": 415, "function": "ST_LengthSpheroid", "question": "计算由两个线段组成的多线段MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))在GRS_1980椭球体(长半轴6378137米，倒数扁率298.257222101)上的总长度、第一条线段(-118.584 38.374到-118.583 38.5)的长度和第二条线段(-71.05957 42.3589到-71.061 43)的长度，分别输出为tot_len、len_line1和len_line2。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) AS tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) AS len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) AS len_line2 \nFROM (SELECT ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))') AS geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' AS spheroid) AS sph_m) AS foo;", "execution_result": [[85204.52077118107, 13986.872528244732, 71217.64824293634]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2258, "question_en": "Calculate the total length of the multilinestring MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43)) on the GRS_1980 ellipsoid (semi-major axis 6378137 meters, inverse flattening 298.257222101), the length of the first line segment (-118.584 38.374 to -118.583 38.5), and the length of the second line segment (-71.05957 42.3589 to -71.061 43), output as tot_len, len_line1, and len_line2 respectively."}
{"id": 415, "function": "ST_LengthSpheroid", "question": "以列形式输出多线串集合MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))的总长度(tot_len)、第一条线长度(len_line1)和第二条线长度(len_line2)的GRS_1980椭球体测量结果。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) AS tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) AS len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) AS len_line2 \nFROM (SELECT ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))') AS geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' AS spheroid) AS sph_m) AS foo;", "execution_result": [[85204.52077118107, 13986.872528244732, 71217.64824293634]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2259, "question_en": "Output the GRS_1980 ellipsoidal measurement results of the total length (tot_len), the length of the first line (len_line1), and the length of the second line (len_line2) for the multilinestring collection MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43)) in column format."}
{"id": 415, "function": "ST_LengthSpheroid", "question": "返回包含三个字段的结果集：多线串MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))在GRS_1980椭球体下的总长度、首条线段(-118.584 38.374,-118.583 38.5)长度和次条线段(-71.05957 42.3589 , -71.061 43)长度。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) AS tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) AS len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) AS len_line2 \nFROM (SELECT ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))') AS geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' AS spheroid) AS sph_m) AS foo;", "execution_result": [[85204.52077118107, 13986.872528244732, 71217.64824293634]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2260, "question_en": "Return a result set with three fields: the total length of the MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43)) on the GRS_1980 ellipsoid, the length of the first line segment (-118.584 38.374,-118.583 38.5), and the length of the second line segment (-71.05957 42.3589 , -71.061 43)."}
{"id": 415, "function": "ST_LengthSpheroid", "question": "输出MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))在GRS_1980椭球体上的总长度、第一条线段(-118.584 38.374,-118.583 38.5)的长度和第二条线段(-71.05957 42.3589 , -71.061 43)的长度，结果包含tot_len、len_line1和len_line2三个字段。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) AS tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) AS len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) AS len_line2 \nFROM (SELECT ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))') AS geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' AS spheroid) AS sph_m) AS foo;", "execution_result": [[85204.52077118107, 13986.872528244732, 71217.64824293634]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2261, "question_en": "Output the total length of MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43)) on the GRS_1980 ellipsoid, the length of the first line segment (-118.584 38.374,-118.583 38.5), and the length of the second line segment (-71.05957 42.3589 , -71.061 43), with the results including the fields tot_len, len_line1, and len_line2."}
{"id": 417, "function": "ST_LengthSpheroid", "question": "计算由点(-118.584 38.374 20)到(-118.583 38.5 30)和点(-71.05957 42.3589 75)到(-71.061 43 90)构成的多线串在GRS_1980椭球体上的总长度和分段长度。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) As tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) As len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) As len_line2 FROM (SELECT ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))') As geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As sph_m) as foo;", "execution_result": [[85204.52592562579, 13986.876103024835, 71217.64982260094]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2262, "question_en": "Calculate the total length and segment lengths of the multiline string formed by points (-118.584 38.374 20) to (-118.583 38.5 30) and (-71.05957 42.3589 75) to (-71.061 43 90) on the GRS_1980 ellipsoid."}
{"id": 417, "function": "ST_LengthSpheroid", "question": "计算三维多线段MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))在GRS_1980椭球体(长半轴6378137米，扁率倒数298.257222101)上的总长度、第一条线段(-118.584 38.374 20到-118.583 38.5 30)的长度和第二条线段(-71.05957 42.3589 75到-71.061 43 90)的长度。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) As tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) As len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) As len_line2 \nFROM (SELECT ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))') As geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As sph_m) as foo;", "execution_result": [[85204.52592562579, 13986.876103024835, 71217.64982260094]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2263, "question_en": "Calculate the total length of the 3D multilinestring MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90)) on the GRS_1980 ellipsoid (semi-major axis 6378137 meters, inverse flattening 298.257222101), the length of the first segment (-118.584 38.374 20 to -118.583 38.5 30), and the length of the second segment (-71.05957 42.3589 75 to -71.061 43 90)."}
{"id": 417, "function": "ST_LengthSpheroid", "question": "计算由EWKT格式定义的三维多线段MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))在GRS_1980椭球体(长半轴6378137米，扁率倒数298.257222101)上的总长度，以及该多线段中第一条线段(-118.584 38.374 20到-118.583 38.5 30)和第二条线段(-71.05957 42.3589 75到-71.061 43 90)各自的长度。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) As tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) As len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) As len_line2 \nFROM (SELECT ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))') As geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As sph_m) as foo;", "execution_result": [[85204.52592562579, 13986.876103024835, 71217.64982260094]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2264, "question_en": "Calculate the total length of the 3D multilinestring defined in EWKT format MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90)) on the GRS_1980 ellipsoid (semi-major axis 6378137 meters, inverse flattening 298.257222101), as well as the individual lengths of the first linestring (-118.584 38.374 20 to -118.583 38.5 30) and the second linestring (-71.05957 42.3589 75 to -71.061 43 90)."}
{"id": 417, "function": "ST_LengthSpheroid", "question": "输出多线串集合MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))在GRS_1980椭球体上的总长度值、第一条线串长度值和第二条线串长度值三个数值结果。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) As tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) As len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) As len_line2 FROM (SELECT ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))') As geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As sph_m) as foo;", "execution_result": [[85204.52592562579, 13986.876103024835, 71217.64982260094]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2265, "question_en": "Output the total length value, the length value of the first linestring, and the length value of the second linestring of the multilinestring collection MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90)) on the GRS_1980 ellipsoid."}
{"id": 417, "function": "ST_LengthSpheroid", "question": "输出基于GRS_1980椭球体（长半轴6378137米，扁率倒数298.257222101）计算的以下结果：1) 整个三维多线段MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))的总长度；2) 第一条三维线段LINESTRING(-118.584 38.374 20,-118.583 38.5 30)的长度；3) 第二条三维线段LINESTRING(-71.05957 42.3589 75, -71.061 43 90)的长度，要求分别以tot_len、len_line1、len_line2作为列名输出。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) As tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) As len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) As len_line2 \nFROM (SELECT ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))') As geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As sph_m) as foo;", "execution_result": [[85204.52592562579, 13986.876103024835, 71217.64982260094]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2266, "question_en": "Output the following results calculated based on the GRS_1980 ellipsoid (semi-major axis 6378137 meters, inverse flattening 298.257222101): 1) The total length of the 3D multilinestring MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90)); 2) The length of the first 3D linestring LINESTRING(-118.584 38.374 20,-118.583 38.5 30); 3) The length of the second 3D linestring LINESTRING(-71.05957 42.3589 75, -71.061 43 90), with column names tot_len, len_line1, and len_line2 respectively."}
{"id": 417, "function": "ST_LengthSpheroid", "question": "输出基于GRS_1980椭球体计算的三维多线段MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))的总长度、第一条线段(-118.584 38.374 20,-118.583 38.5 30)的长度和第二条线段(-71.05957 42.3589 75, -71.061 43 90)的长度，结果分别命名为tot_len、len_line1和len_line2。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) As tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) As len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) As len_line2 \nFROM (SELECT ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))') As geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As sph_m) as foo;", "execution_result": [[85204.52592562579, 13986.876103024835, 71217.64982260094]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2267, "question_en": "Output the total length of the 3D multilinestring MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90)) calculated based on the GRS_1980 ellipsoid, the length of the first linestring (-118.584 38.374 20,-118.583 38.5 30), and the length of the second linestring (-71.05957 42.3589 75, -71.061 43 90), named as tot_len, len_line1, and len_line2 respectively."}
{"id": 418, "function": "ST_LongestLine", "question": "计算由坐标点(40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180)和(60 140, 99 77.5, 90 140, 60 140)组成的多边形的最长对角线WKT表示、多边形最大距离和最长对角线长度。", "sql": "SELECT ST_AsText( ST_LongestLine( geom, geom)) AS llinewkt, ST_MaxDistance( geom, geom) AS max_dist, ST_Length( ST_LongestLine(geom, geom)) AS lenll \nFROM (SELECT 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(20 50,180 180)", 206.15528128088303, 206.15528128088303]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2268, "question_en": "Calculate the WKT representation of the longest diagonal, the maximum distance of the polygon, and the length of the longest diagonal for the polygons formed by the coordinate points (40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180) and (60 140, 99 77.5, 90 140, 60 140)."}
{"id": 418, "function": "ST_LongestLine", "question": "对于由外环(40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180)和内环(60 140, 99 77.5, 90 140, 60 140)构成的多边形，返回其最长线段的WKT格式、最大顶点距离和最长线段长度。", "sql": "SELECT ST_AsText( ST_LongestLine( geom, geom)) AS llinewkt, ST_MaxDistance( geom, geom) AS max_dist, ST_Length( ST_LongestLine(geom, geom)) AS lenll FROM (SELECT 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(20 50,180 180)", 206.15528128088303, 206.15528128088303]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2269, "question_en": "For the polygon defined by the outer ring (40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180) and inner ring (60 140, 99 77.5, 90 140, 60 140), return the WKT format of its longest segment, the maximum vertex distance, and the length of the longest segment."}
{"id": 418, "function": "ST_LongestLine", "question": "对于给定的多边形POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))，使用ST_LongestLine函数计算该多边形内两点之间的最长线段并以WKT格式输出为llinewkt，使用ST_MaxDistance函数计算该多边形内两点之间的最大距离并输出为max_dist，使用ST_Length函数计算该最长线段的长度并输出为lenll。", "sql": "SELECT ST_AsText( ST_LongestLine( geom, geom)) AS llinewkt, ST_MaxDistance( geom, geom) AS max_dist, ST_Length( ST_LongestLine(geom, geom)) AS lenll \nFROM (SELECT 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(20 50,180 180)", 206.15528128088303, 206.15528128088303]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2270, "question_en": "For the given polygon POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140)), use the ST_LongestLine function to calculate the longest line segment between two points within the polygon and output it in WKT format as llinewkt, use the ST_MaxDistance function to calculate the maximum distance between two points within the polygon and output it as max_dist, and use the ST_Length function to calculate the length of this longest line segment and output it as lenll."}
{"id": 418, "function": "ST_LongestLine", "question": "输出POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))的最长线段WKT字符串、最大距离数值和最长线段长度数值。", "sql": "SELECT ST_AsText(ST_LongestLine(geom, geom)) AS llinewkt, ST_MaxDistance(geom, geom) AS max_dist, ST_Length(ST_LongestLine(geom, geom)) AS lenll FROM (SELECT 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(20 50,180 180)", 206.15528128088303, 206.15528128088303]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2271, "question_en": "Output the WKT string of the longest line segment, the maximum distance value, and the length value of the longest line segment for the POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))."}
{"id": 418, "function": "ST_LongestLine", "question": "以WKT格式返回多边形POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))的最长对角线，同时返回最大距离和最长对角线的长度数值。", "sql": "SELECT ST_AsText(ST_LongestLine(geom, geom)) AS llinewkt, ST_MaxDistance(geom, geom) AS max_dist, ST_Length(ST_LongestLine(geom, geom)) AS lenll FROM (SELECT 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(20 50,180 180)", 206.15528128088303, 206.15528128088303]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2272, "question_en": "Return the longest diagonal of the polygon POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140)) in WKT format, along with the maximum distance and the length value of the longest diagonal."}
{"id": 418, "function": "ST_LongestLine", "question": "输出POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))几何对象自身最长线段的WKT字符串表示、几何对象自身的最大距离值，以及最长线段的长度值，要求以llinewkt、max_dist和lenll作为列名返回结果。", "sql": "SELECT ST_AsText( ST_LongestLine( geom, geom)) AS llinewkt, ST_MaxDistance( geom, geom) AS max_dist, ST_Length( ST_LongestLine(geom, geom)) AS lenll \nFROM (SELECT 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(20 50,180 180)", 206.15528128088303, 206.15528128088303]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2273, "question_en": "Output the WKT string representation of the longest line segment within the POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140)) geometry object, the maximum distance value of the geometry itself, and the length value of the longest line segment, with the column names llinewkt, max_dist, and lenll in the result."}
{"id": 419, "function": "ST_LongestLine", "question": "计算POINT(160 40)和LINESTRING(10 30, 50 50, 30 110, 70 90, 180 140, 130 190)之间的最长线段，返回WKT格式。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)' ) ) AS lline;", "execution_result": [["LINESTRING(160 40,130 190)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2274, "question_en": "Calculate the longest line segment between POINT(160 40) and LINESTRING(10 30, 50 50, 30 110, 70 90, 180 140, 130 190), returning the result in WKT format."}
{"id": 419, "function": "ST_LongestLine", "question": "计算二维点POINT(160 40)与折线LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190)之间的最长连线，并以WKT格式输出结果，结果列别名为lline。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)' ) ) AS lline;", "execution_result": [["LINESTRING(160 40,130 190)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2275, "question_en": "Calculate the longest connecting line between the 2D point POINT(160 40) and the linestring LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190), and output the result in WKT format with the column alias 'lline'."}
{"id": 419, "function": "ST_LongestLine", "question": "计算二维点POINT(160 40)与折线LINESTRING(10 30, 50 50, 30 110, 70 90, 180 140, 130 190)之间的最长连线，并使用ST_AsText函数将结果以WKT文本格式输出，结果列别名为lline。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)' ) ) AS lline;", "execution_result": [["LINESTRING(160 40,130 190)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2276, "question_en": "Calculate the longest connecting line between the 2D point POINT(160 40) and the linestring LINESTRING(10 30, 50 50, 30 110, 70 90, 180 140, 130 190), and output the result in WKT text format using the ST_AsText function, with the result column aliased as lline."}
{"id": 419, "function": "ST_LongestLine", "question": "输出POINT(160 40)和LINESTRING(10 30, 50 50, 30 110, 70 90, 180 140, 130 190)之间最长线段的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)' ) ) AS lline;", "execution_result": [["LINESTRING(160 40,130 190)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2277, "question_en": "Output the WKT string representation of the longest line segment between POINT(160 40) and LINESTRING(10 30, 50 50, 30 110, 70 90, 180 140, 130 190)."}
{"id": 419, "function": "ST_LongestLine", "question": "输出POINT(160 40)与LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190)之间的最长连线所对应的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)' ) ) AS lline;", "execution_result": [["LINESTRING(160 40,130 190)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2278, "question_en": "Output the WKT string representation of the longest connecting line between POINT(160 40) and LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190)."}
{"id": 419, "function": "ST_LongestLine", "question": "输出二维点POINT(160 40)与折线LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190)之间的最长连线所对应的WKT字符串。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)' ) ) AS lline;", "execution_result": [["LINESTRING(160 40,130 190)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2279, "question_en": "Output the WKT string representing the longest connecting line between the 2D point POINT(160 40) and the polyline LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190)."}
{"id": 420, "function": "ST_LongestLine", "question": "找出由顶点(190,150)、(20,10)、(160,70)构成的多边形与以(80,160)为中心、半径30的圆形缓冲区之间的最长线段，输出WKT文本。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(20 10,91.4805029709527 187.7163859753386)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2280, "question_en": "Find the longest line segment between the polygon formed by vertices (190,150), (20,10), (160,70) and the circular buffer centered at (80,160) with a radius of 30, and output the WKT text."}
{"id": 420, "function": "ST_LongestLine", "question": "计算由顶点坐标依次为(190 150)、(20 10)、(160 70)、(190 150)的多边形与以点(80 160)为中心、半径为30的圆形缓冲区之间的最长连线，并将结果以WKT格式输出。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(20 10,91.4805029709527 187.7163859753386)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2281, "question_en": "Calculate the longest connecting line between a polygon with vertices (190 150), (20 10), (160 70), (190 150) and a circular buffer centered at (80 160) with a radius of 30, then output the result in WKT format."}
{"id": 420, "function": "ST_LongestLine", "question": "计算由顶点坐标依次为(190 150)、(20 10)、(160 70)、(190 150)组成的多边形与以POINT(80 160)为中心、半径为30的圆形缓冲区之间的最长连线，并将结果以WKT格式输出，输出列别名为llinewkt。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(20 10,91.4805029709527 187.7163859753386)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2282, "question_en": "Calculate the longest connecting line between the polygon formed by vertices (190 150), (20 10), (160 70), (190 150) and the circular buffer centered at POINT(80 160) with a radius of 30, and output the result in WKT format with the column alias 'llinewkt'."}
{"id": 420, "function": "ST_LongestLine", "question": "输出多边形POLYGON ((190 150, 20 10, 160 70, 190 150))和圆形缓冲区（以POINT(80 160)为中心，30单位为半径）之间最长线段的WKT（Well-Known Text）字符串表示。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(20 10,91.4805029709527 187.7163859753386)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2283, "question_en": "Output the WKT (Well-Known Text) representation of the longest line segment between the polygon POLYGON ((190 150, 20 10, 160 70, 190 150)) and the circular buffer (centered at POINT(80 160) with a radius of 30 units)."}
{"id": 420, "function": "ST_LongestLine", "question": "计算多边形POLYGON ((190 150, 20 10, 160 70, 190 150))与以POINT(80 160)为中心、30单位半径的圆形缓冲区之间的最长连线，并以WKT字符串格式返回结果。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(20 10,91.4805029709527 187.7163859753386)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2284, "question_en": "Calculate the longest connecting line between the polygon POLYGON ((190 150, 20 10, 160 70, 190 150)) and the circular buffer centered at POINT(80 160) with a 30-unit radius, and return the result in WKT string format."}
{"id": 420, "function": "ST_LongestLine", "question": "输出多边形POLYGON ((190 150, 20 10, 160 70, 190 150))与以POINT(80 160)为中心、30单位半径的圆形缓冲区之间的最长连线，结果以WKT字符串格式返回。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(20 10,91.4805029709527 187.7163859753386)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2285, "question_en": "Output the longest connecting line between the polygon POLYGON ((190 150, 20 10, 160 70, 190 150)) and the circular buffer centered at POINT(80 160) with a 30-unit radius, returning the result in WKT string format."}
{"id": 421, "function": "ST_3DLongestLine", "question": "计算POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间的三维最长线和二维最长线，输出EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) AS lol3d, ST_AsEWKT(ST_LongestLine(poly, mline)) AS lol2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(175 150 5,1 10 2)", "LINESTRING(175 150,1 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2286, "question_en": "Calculate the 3D longest line and 2D longest line between POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), output in EWKT format."}
{"id": 421, "function": "ST_3DLongestLine", "question": "在三维空间和二维空间中分别计算并返回以下两个几何对象之间的最长线：第一个对象是三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))，第二个对象是三维多线MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))。要求使用ST_3DLongestLine函数计算三维最长线并用ST_AsEWKT输出为lol3d列，同时使用ST_LongestLine函数计算二维最长线并用ST_AsEWKT输出为lol2d列。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) AS lol3d, ST_AsEWKT(ST_LongestLine(poly, mline)) AS lol2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(175 150 5,1 10 2)", "LINESTRING(175 150,1 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2287, "question_en": "Compute and return the longest line between the following two geometric objects in both 3D and 2D space: the first object is the 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)), and the second object is the 3D multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)). Use ST_3DLongestLine to calculate the 3D longest line and output it as column lol3d with ST_AsEWKT, and use ST_LongestLine to calculate the 2D longest line and output it as column lol2d with ST_AsEWKT."}
{"id": 421, "function": "ST_3DLongestLine", "question": "计算三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与三维多线段MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间的三维最长线ST_3DLongestLine和二维最长线ST_LongestLine，并以EWKT格式输出结果，分别命名为lol3d和lol2d。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) AS lol3d, ST_AsEWKT(ST_LongestLine(poly, mline)) AS lol2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(175 150 5,1 10 2)", "LINESTRING(175 150,1 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2288, "question_en": "Calculate the 3D longest line ST_3DLongestLine and 2D longest line ST_LongestLine between the 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the 3D multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), and output the results in EWKT format as lol3d and lol2d respectively."}
{"id": 421, "function": "ST_3DLongestLine", "question": "输出POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间的三维最长线和二维最长线的EWKT字符串表示，分别命名为lol3d和lol2d。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) AS lol3d, ST_AsEWKT(ST_LongestLine(poly, mline)) AS lol2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(175 150 5,1 10 2)", "LINESTRING(175 150,1 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2289, "question_en": "Output the EWKT string representations of the longest 3D line and longest 2D line between POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), named lol3d and lol2d respectively."}
{"id": 421, "function": "ST_3DLongestLine", "question": "输出三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间的最长三维线段的EWKT字符串（别名为lol3d），以及它们之间的最长二维线段的EWKT字符串（别名为lol2d）。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) AS lol3d, ST_AsEWKT(ST_LongestLine(poly, mline)) AS lol2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(175 150 5,1 10 2)", "LINESTRING(175 150,1 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2290, "question_en": "Output the EWKT string of the longest 3D line segment (aliased as lol3d) between the 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), as well as the EWKT string of the longest 2D line segment (aliased as lol2d) between them."}
{"id": 421, "function": "ST_3DLongestLine", "question": "输出三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与三维多线段MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间的最长三维线段的EWKT字符串（别名为lol3d），以及它们之间的最长二维线段的EWKT字符串（别名为lol2d）。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) AS lol3d, ST_AsEWKT(ST_LongestLine(poly, mline)) AS lol2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(175 150 5,1 10 2)", "LINESTRING(175 150,1 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2291, "question_en": "Output the EWKT string (aliased as lol3d) of the longest 3D line segment between the 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the 3D multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), as well as the EWKT string (aliased as lol2d) of their longest 2D line segment."}
{"id": 422, "function": "ST_3DLongestLine", "question": "计算MULTIPOINT(100 100 30, 50 74 1000)与LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900)的三维最长线和二维最长线，输出EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(98 190 1,50 74 1000)", "LINESTRING(98 190,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2292, "question_en": "Calculate the 3D and 2D longest lines between MULTIPOINT(100 100 30, 50 74 1000) and LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900), output in EWKT format."}
{"id": 422, "function": "ST_3DLongestLine", "question": "计算三维多点对象MULTIPOINT(100 100 30, 50 74 1000)与LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)之间的最长三维线段，并以EWKT格式输出为lol3d_line_pt；同时计算这两个几何对象在二维投影下的最长线段，并以EWKT格式输出为lol2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(98 190 1,50 74 1000)", "LINESTRING(98 190,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2293, "question_en": "Calculate the longest 3D line segment between the 3D multipoint object MULTIPOINT(100 100 30, 50 74 1000) and LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900), and output it in EWKT format as lol3d_line_pt; also compute the longest 2D projected line segment between these two geometries and output it in EWKT format as lol2d_line_pt."}
{"id": 422, "function": "ST_3DLongestLine", "question": "计算几何对象MULTIPOINT(100 100 30, 50 74 1000)与LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)之间的最长三维线段，并以EWKT格式输出为lol3d_line_pt列；同时计算这两个几何对象在二维投影下的最长线段，并以EWKT格式输出为lol2d_line_pt列。其中MULTIPOINT包含两个三维点(100 100 30)和(50 74 1000)，LINESTRING包含四个三维顶点(20 80 20)、(98 190 1)、(110 180 3)和(50 75 900)。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(98 190 1,50 74 1000)", "LINESTRING(98 190,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2294, "question_en": "Calculate the longest 3D line segment between the geometry MULTIPOINT(100 100 30, 50 74 1000) and LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900), and output it in EWKT format as the column lol3d_line_pt; also compute the longest 2D projected line segment between these geometries and output it in EWKT format as the column lol2d_line_pt. The MULTIPOINT contains two 3D points (100 100 30) and (50 74 1000), while the LINESTRING consists of four 3D vertices (20 80 20), (98 190 1), (110 180 3), and (50 75 900)."}
{"id": 422, "function": "ST_3DLongestLine", "question": "输出三维空间对象多点集合MULTIPOINT(100 100 30, 50 74 1000)和线串LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900)间最长距离线段的EWKT表示和二维投影最长距离线段的EWKT表示。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(98 190 1,50 74 1000)", "LINESTRING(98 190,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2295, "question_en": "Output the EWKT representation of the longest distance segment between the 3D multipoint collection MULTIPOINT(100 100 30, 50 74 1000) and the linestring LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900), as well as the EWKT representation of the longest distance segment in their 2D projection."}
{"id": 422, "function": "ST_3DLongestLine", "question": "输出几何对象MULTIPOINT(100 100 30, 50 74 1000)与三维线LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900)之间的最长三维线段的EWKT字符串，以及它们之间的最长二维线段的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(98 190 1,50 74 1000)", "LINESTRING(98 190,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2296, "question_en": "Output the EWKT string of the longest 3D line segment between the geometry object MULTIPOINT(100 100 30, 50 74 1000) and the 3D line LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900), as well as the EWKT string of the longest 2D line segment between them."}
{"id": 422, "function": "ST_3DLongestLine", "question": "输出三维点MULTIPOINT(100 100 30, 50 74 1000)与三维线LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900)之间的最长三维线段的EWKT字符串，以及它们之间的最长二维线段的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(98 190 1,50 74 1000)", "LINESTRING(98 190,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2297, "question_en": "Output the EWKT string of the longest 3D line segment between the 3D point MULTIPOINT(100 100 30, 50 74 1000) and the 3D line LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900), as well as the EWKT string of the longest 2D line segment between them."}
{"id": 423, "function": "ST_3DLongestLine", "question": "计算POINT(100 100 30)与LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)的三维最长距离线段和二维最长距离线段，结果以EWKT格式输出。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(50 75 1000,100 100 30)", "LINESTRING(98 190,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2298, "question_en": "Calculate the 3D and 2D longest distance segments between POINT(100 100 30) and LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000), and output the results in EWKT format."}
{"id": 423, "function": "ST_3DLongestLine", "question": "计算点POINT(100 100 30)与线LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)之间的最长三维线段，以及它们在二维投影下的最长线段，分别以EWKT格式输出结果列名为lol3d_line_pt和lol2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(50 75 1000,100 100 30)", "LINESTRING(98 190,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2299, "question_en": "Calculate the longest 3D line segment between the point POINT(100 100 30) and the line LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000), as well as their longest line segment under 2D projection, outputting the results in EWKT format with column names lol3d_line_pt and lol2d_line_pt respectively."}
{"id": 423, "function": "ST_3DLongestLine", "question": "计算三维点POINT(100 100 30)与三维线LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)之间的最长三维线段，以及它们在二维投影下的最长线段，分别以EWKT格式输出为lol3d_line_pt和lol2d_line_pt字段。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(50 75 1000,100 100 30)", "LINESTRING(98 190,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2300, "question_en": "Calculate the longest 3D line segment between the 3D point POINT(100 100 30) and the 3D line LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000), as well as their longest line segment in 2D projection, and output them in EWKT format as fields lol3d_line_pt and lol2d_line_pt respectively."}
{"id": 423, "function": "ST_3DLongestLine", "question": "输出POINT(100 100 30)与LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)的三维和二维最长距离线段的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(50 75 1000,100 100 30)", "LINESTRING(98 190,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2301, "question_en": "Output the EWKT strings of the 3D and 2D longest distance segments between POINT(100 100 30) and LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)."}
{"id": 423, "function": "ST_3DLongestLine", "question": "输出三维点POINT(100 100 30)与三维线LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)之间的最长三维线段的EWKT字符串，以及它们在二维平面上的最长线段的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(50 75 1000,100 100 30)", "LINESTRING(98 190,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2302, "question_en": "Output the EWKT string of the longest 3D line segment between the 3D point POINT(100 100 30) and the 3D line LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000), as well as the EWKT string of their longest line segment in the 2D plane."}
{"id": 423, "function": "ST_3DLongestLine", "question": "输出点POINT(100 100 30)与线LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)之间的最长三维线段的EWKT字符串，以及它们之间的最长二维线段的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(50 75 1000,100 100 30)", "LINESTRING(98 190,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2303, "question_en": "Output the EWKT string of the longest 3D line segment between point POINT(100 100 30) and line LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000), as well as the EWKT string of the longest 2D line segment between them."}
{"id": 424, "function": "ST_MaxDistance", "question": "计算POINT(0 0)与LINESTRING(2 2, 2 2)之间的最大距离。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 2, 2 2 )'::geometry);", "execution_result": [[2.8284271247461903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2304, "question_en": "Calculate the maximum distance between POINT(0 0) and LINESTRING(2 2, 2 2)."}
{"id": 424, "function": "ST_MaxDistance", "question": "计算二维点POINT(0 0)与由两个相同坐标点(2 2)和(2 2)组成的LINESTRING线段之间的最大距离。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 2, 2 2 )'::geometry);", "execution_result": [[2.8284271247461903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2305, "question_en": "Calculate the maximum distance between the 2D point POINT(0 0) and the LINESTRING composed of two identical points (2 2) and (2 2)."}
{"id": 424, "function": "ST_MaxDistance", "question": "计算二维点POINT(0 0)与折线LINESTRING(2 2, 2 2)之间的最大距离，其中折线由起点(2 2)和终点(2 2)构成。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 2, 2 2 )'::geometry);", "execution_result": [[2.8284271247461903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2306, "question_en": "Calculate the maximum distance between the 2D point POINT(0 0) and the linestring LINESTRING(2 2, 2 2), where the linestring consists of the start point (2 2) and end point (2 2)."}
{"id": 424, "function": "ST_MaxDistance", "question": "输出POINT(0 0)与LINESTRING(2 2, 2 2)之间的最大距离值。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 2, 2 2 )'::geometry);", "execution_result": [[2.8284271247461903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2307, "question_en": "Output the maximum distance value between POINT(0 0) and LINESTRING(2 2, 2 2)."}
{"id": 424, "function": "ST_MaxDistance", "question": "输出二维点POINT(0 0)与二维线段LINESTRING(2 2, 2 2)之间的最大距离值，结果以浮点数形式返回。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 2, 2 2 )'::geometry);", "execution_result": [[2.8284271247461903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2308, "question_en": "Output the maximum distance value between the 2D point POINT(0 0) and the 2D line segment LINESTRING(2 2, 2 2), returning the result as a floating-point number."}
{"id": 424, "function": "ST_MaxDistance", "question": "计算输出二维点POINT(0 0)与二维线段LINESTRING(2 2, 2 2)之间的最大距离值，结果以浮点数形式返回。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 2, 2 2 )'::geometry);", "execution_result": [[2.8284271247461903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2309, "question_en": "Calculate and return the maximum distance between the 2D point POINT(0 0) and the 2D line segment LINESTRING(2 2, 2 2) as a floating-point number."}
{"id": 425, "function": "ST_MaxDistance", "question": "计算由顶点(10 10, 10 0, 0 0, 10 10)构成的两个相同多边形之间的最大距离。", "sql": "SELECT ST_MaxDistance('POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry, 'POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry);", "execution_result": [[14.142135623730951]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2310, "question_en": "Calculate the maximum distance between two identical polygons formed by the vertices (10 10, 10 0, 0 0, 10 10)."}
{"id": 425, "function": "ST_MaxDistance", "question": "计算两个完全相同的三角形POLYGON ((10 10, 10 0, 0 0, 10 10))之间的最大距离，两个多边形的顶点坐标依次为(10 10)、(10 0)、(0 0)、(10 10)。", "sql": "SELECT ST_MaxDistance('POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry, 'POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry);", "execution_result": [[14.142135623730951]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2311, "question_en": "Calculate the maximum distance between two identical triangle POLYGONs ((10 10, 10 0, 0 0, 10 10)), with vertex coordinates (10 10), (10 0), (0 0), (10 10) for each polygon."}
{"id": 425, "function": "ST_MaxDistance", "question": "计算两个完全相同的不规则三角形POLYGON ((10 10, 10 0, 0 0, 10 10))之间的最大可能距离，其中两个多边形均由顶点坐标(10 10)、(10 0)、(0 0)构成闭合区域。", "sql": "SELECT ST_MaxDistance('POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry, 'POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry);", "execution_result": [[14.142135623730951]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2312, "question_en": "Calculate the maximum possible distance between two identical irregular triangle POLYGONs ((10 10, 10 0, 0 0, 10 10)), where both polygons form a closed area with vertex coordinates (10 10), (10 0), (0 0)."}
{"id": 425, "function": "ST_MaxDistance", "question": "返回两个相同多边形之间的最大距离值，多边形顶点为(10 10, 10 0, 0 0, 10 10)。", "sql": "SELECT ST_MaxDistance('POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry, 'POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry);", "execution_result": [[14.142135623730951]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2313, "question_en": "Return the maximum distance value between two identical polygons with vertices (10 10, 10 0, 0 0, 10 10)."}
{"id": 425, "function": "ST_MaxDistance", "question": "输出两个相同多边形POLYGON((10 10, 10 0, 0 0, 10 10))之间的最大距离值，结果以浮点数形式返回。", "sql": "SELECT ST_MaxDistance('POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry, 'POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry);", "execution_result": [[14.142135623730951]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2314, "question_en": "Output the maximum distance value between two identical polygons POLYGON((10 10, 10 0, 0 0, 10 10)), returning the result as a floating-point number."}
{"id": 425, "function": "ST_MaxDistance", "question": "输出两个相同三角形POLYGON ((10 10, 10 0, 0 0, 10 10))之间的最大距离值，结果以浮点数形式返回。", "sql": "SELECT ST_MaxDistance('POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry, 'POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry);", "execution_result": [[14.142135623730951]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2315, "question_en": "Output the maximum distance value between two identical triangle POLYGONs ((10 10, 10 0, 0 0, 10 10)), returned as a floating-point number."}
{"id": 426, "function": "ST_MaxDistance", "question": "计算点POINT(0 0)与线LINESTRING(2 0, 0 2)之间的最大距离。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2316, "question_en": "Calculate the maximum distance between the point POINT(0 0) and the line LINESTRING(2 0, 0 2)."}
{"id": 426, "function": "ST_MaxDistance", "question": "计算二维点POINT(0 0)与折线LINESTRING(2 0, 0 2)之间的最大距离，其中折线由坐标点(2 0)和(0 2)连接而成。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2317, "question_en": "Calculate the maximum distance between the 2D point POINT(0 0) and the linestring LINESTRING(2 0, 0 2), where the linestring is formed by connecting the coordinate points (2 0) and (0 2)."}
{"id": 426, "function": "ST_MaxDistance", "question": "计算二维点POINT(0 0)与折线LINESTRING(2 0, 0 2)之间的最大距离，其中折线由两个顶点(2 0)和(0 2)组成。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2318, "question_en": "Calculate the maximum distance between the 2D point POINT(0 0) and the linestring LINESTRING(2 0, 0 2), where the linestring consists of two vertices (2 0) and (0 2)."}
{"id": 426, "function": "ST_MaxDistance", "question": "返回点POINT(0 0)与线LINESTRING(2 0, 0 2)之间的最大距离值。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2319, "question_en": "Return the maximum distance value between the point POINT(0 0) and the line LINESTRING(2 0, 0 2)."}
{"id": 426, "function": "ST_MaxDistance", "question": "计算输出二维点POINT(0 0)与折线LINESTRING(2 0, 0 2)之间的最大距离值，结果以浮点数形式返回。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2320, "question_en": "Calculate and return the maximum distance between the 2D point POINT(0 0) and the linestring LINESTRING(2 0, 0 2) as a floating-point value."}
{"id": 426, "function": "ST_MaxDistance", "question": "输出二维点POINT(0 0)与折线LINESTRING(2 0, 0 2)之间的最大距离值，结果以浮点数形式返回。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2321, "question_en": "Output the maximum distance value between the 2D point POINT(0 0) and the linestring LINESTRING(2 0, 0 2), returning the result as a floating-point number."}
{"id": 427, "function": "ST_3DMaxDistance", "question": "计算SRID为4326的三维点POINT(-72.1235 42.3521 10000)与SRID为4326的三维线LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)在SRID为2163的投影坐标系中的最大三维距离和最大二维距离。", "sql": "SELECT ST_3DMaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_3d, ST_MaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_2d;", "execution_result": [[24383.746748844314, 22247.84721072526]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2322, "question_en": "Calculate the maximum 3D distance and maximum 2D distance between the 3D point POINT(-72.1235 42.3521 10000) with SRID 4326 and the 3D line LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20) with SRID 4326 in the projected coordinate system with SRID 2163."}
{"id": 427, "function": "ST_3DMaxDistance", "question": "计算经度-72.1235、纬度42.3521、高度10000米的点与由点(-72.1260,42.45,15)和点(-72.123,42.1546,20)组成的线在US National Atlas Equal Area投影坐标系中的三维最大距离和二维最大距离。", "sql": "SELECT ST_3DMaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_3d, ST_MaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_2d;", "execution_result": [[24383.746748844314, 22247.84721072526]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2323, "question_en": "Calculate the 3D maximum distance and 2D maximum distance between the point with longitude -72.1235, latitude 42.3521, and height 10,000 meters, and the line formed by points (-72.1260,42.45,15) and (-72.123,42.1546,20) in the US National Atlas Equal Area projected coordinate system."}
{"id": 427, "function": "ST_3DMaxDistance", "question": "计算SRID为4326的三维点POINT(-72.1235 42.3521 10000)与SRID为4326的线段LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)之间的三维最大距离（使用ST_3DMaxDistance函数）和二维最大距离（使用ST_MaxDistance函数），其中两个几何对象都先通过ST_Transform函数从SRID 4326转换为SRID 2163坐标系，最终结果分别命名为dist_3d和dist_2d。", "sql": "SELECT ST_3DMaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_3d, ST_MaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_2d;", "execution_result": [[24383.746748844314, 22247.84721072526]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2324, "question_en": "Calculate the 3D maximum distance (using ST_3DMaxDistance function) and 2D maximum distance (using ST_MaxDistance function) between the 3D point POINT(-72.1235 42.3521 10000) with SRID 4326 and the line LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20) with SRID 4326, where both geometries are first transformed from SRID 4326 to SRID 2163 using ST_Transform function, with the final results named dist_3d and dist_2d respectively."}
{"id": 427, "function": "ST_3DMaxDistance", "question": "输出点POINT(-72.1235 42.3521 10000)和线串LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)在SRID=2163坐标系中的三维最大距离和二维最大距离两个数值。", "sql": "SELECT ST_3DMaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_3d, ST_MaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_2d;", "execution_result": [[24383.746748844314, 22247.84721072526]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2325, "question_en": "Output the 3D maximum distance and 2D maximum distance between point POINT(-72.1235 42.3521 10000) and linestring LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20) in SRID=2163 coordinate system."}
{"id": 427, "function": "ST_3DMaxDistance", "question": "输出三维点对象POINT(-72.1235 42.3521 10000)与折线LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)在SRID 2163坐标系下的三维最大距离(dist_3d)和二维最大距离(dist_2d)。", "sql": "SELECT ST_3DMaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_3d, ST_MaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_2d;", "execution_result": [[24383.746748844314, 22247.84721072526]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2326, "question_en": "Output the 3D maximum distance (dist_3d) and 2D maximum distance (dist_2d) between the 3D point object POINT(-72.1235 42.3521 10000) and the polyline LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20) in the SRID 2163 coordinate system."}
{"id": 427, "function": "ST_3DMaxDistance", "question": "输出三维点POINT(-72.1235 42.3521 10000)与线段LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)在SRID 2163坐标系下的三维最大距离(dist_3d)和二维最大距离(dist_2d)的数值结果。", "sql": "SELECT ST_3DMaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_3d, ST_MaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_2d;", "execution_result": [[24383.746748844314, 22247.84721072526]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2327, "question_en": "Output the numerical results of the 3D maximum distance (dist_3d) and 2D maximum distance (dist_2d) between the 3D point POINT(-72.1235 42.3521 10000) and the line segment LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20) in the SRID 2163 coordinate system."}
{"id": 428, "function": "ST_MinimumClearance", "question": "计算由顶点(0 0)、(1 0)、(1 1)、(0.5 0.00032)、(0 0)构成的多边形的最小间隙距离。", "sql": "SELECT ST_MinimumClearance('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))');", "execution_result": [[0.00032]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2328, "question_en": "Calculate the minimum clearance distance of the polygon formed by the vertices (0 0), (1 0), (1 1), (0.5 0.00032), (0 0)."}
{"id": 428, "function": "ST_MinimumClearance", "question": "计算由顶点坐标(0 0)、(1 0)、(1 1)、(0.5 0.00032)、(0 0)组成的闭合多边形的最小间隙值，使用ST_MinimumClearance函数直接处理该POLYGON几何对象。", "sql": "SELECT ST_MinimumClearance('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))');", "execution_result": [[0.00032]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2329, "question_en": "Calculate the minimum clearance value of the closed polygon formed by the vertex coordinates (0 0), (1 0), (1 1), (0.5 0.00032), (0 0) using the ST_MinimumClearance function directly on this POLYGON geometry object."}
{"id": 428, "function": "ST_MinimumClearance", "question": "计算由顶点坐标(0 0)、(1 0)、(1 1)、(0.5 0.00032)、(0 0)组成的多边形的最小间隙值，该值表示多边形边与边之间的最小距离。", "sql": "SELECT ST_MinimumClearance('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))');", "execution_result": [[0.00032]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2330, "question_en": "Calculate the minimum clearance value of the polygon defined by the vertices (0 0), (1 0), (1 1), (0.5 0.00032), (0 0), which represents the smallest distance between any two edges of the polygon."}
{"id": 428, "function": "ST_MinimumClearance", "question": "返回由顶点(0 0)、(1 0)、(1 1)、(0.5 0.00032)、(0 0)构成的多边形的最小间隙距离值。", "sql": "SELECT ST_MinimumClearance('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))');", "execution_result": [[0.00032]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2331, "question_en": "Return the minimum clearance distance value of the polygon formed by the vertices (0 0), (1 0), (1 1), (0.5 0.00032), (0 0)."}
{"id": 428, "function": "ST_MinimumClearance", "question": "输出POLYGON ((0 0, 1 0, 1 1, 0.5 0.00032, 0 0))几何体的最小间隙值，要求返回浮点数值结果。", "sql": "SELECT ST_MinimumClearance('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))');", "execution_result": [[0.00032]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2332, "question_en": "Output the minimum clearance value of the POLYGON ((0 0, 1 0, 1 1, 0.5 0.00032, 0 0)) geometry, returning a floating-point numerical result."}
{"id": 428, "function": "ST_MinimumClearance", "question": "输出多边形POLYGON ((0 0, 1 0, 1 1, 0.5 0.00032, 0 0))的最小间隙值（Minimum Clearance），要求返回浮点数值结果。", "sql": "SELECT ST_MinimumClearance('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))');", "execution_result": [[0.00032]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2333, "question_en": "Output the minimum clearance value (as a floating-point number) of the polygon POLYGON ((0 0, 1 0, 1 1, 0.5 0.00032, 0 0))."}
{"id": 429, "function": "ST_MinimumClearanceLine", "question": "计算顶点坐标为(0,0)、(1,0)、(1,1)、(0.5,0.00032)、(0,0)的多边形的最小间隙线，并以WKT格式输出。", "sql": "SELECT ST_AsText(ST_MinimumClearanceLine('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))'));", "execution_result": [["LINESTRING(0.5 0.00032,0.5 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2334, "question_en": "Calculate the minimum clearance line of the polygon with vertex coordinates (0,0), (1,0), (1,1), (0.5,0.00032), (0,0) and output it in WKT format."}
{"id": 429, "function": "ST_MinimumClearanceLine", "question": "对由顶点坐标(0 0)、(1 0)、(1 1)、(0.5 0.00032)、(0 0)构成的闭合多边形，计算其最小间隙连接线并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_MinimumClearanceLine('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))'));", "execution_result": [["LINESTRING(0.5 0.00032,0.5 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2335, "question_en": "For the closed polygon defined by vertex coordinates (0 0), (1 0), (1 1), (0.5 0.00032), (0 0), calculate its minimum clearance connecting line and output the result in WKT format."}
{"id": 429, "function": "ST_MinimumClearanceLine", "question": "对多边形POLYGON ((0 0, 1 0, 1 1, 0.5 0.00032, 0 0))执行ST_MinimumClearanceLine函数计算最小间隙连接线，并通过ST_AsText函数以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_MinimumClearanceLine('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))'));", "execution_result": [["LINESTRING(0.5 0.00032,0.5 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2336, "question_en": "Execute the ST_MinimumClearanceLine function on the polygon POLYGON ((0 0, 1 0, 1 1, 0.5 0.00032, 0 0)) to calculate the minimum clearance line and output the result in WKT format using the ST_AsText function."}
{"id": 429, "function": "ST_MinimumClearanceLine", "question": "输出多边形POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))的最小间隙线的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_MinimumClearanceLine('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))'));", "execution_result": [["LINESTRING(0.5 0.00032,0.5 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2337, "question_en": "Output the WKT string representation of the minimum clearance line for the polygon POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))."}
{"id": 429, "function": "ST_MinimumClearanceLine", "question": "输出多边形POLYGON ((0 0, 1 0, 1 1, 0.5 0.00032, 0 0))的最小间隙连接（Minimum Clearance Line，跨越几何体最小间隙的两点线）的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_MinimumClearanceLine('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))'));", "execution_result": [["LINESTRING(0.5 0.00032,0.5 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2338, "question_en": "Output the WKT string representation of the minimum clearance line (the line connecting the two points that span the smallest gap across the geometry) for the polygon POLYGON ((0 0, 1 0, 1 1, 0.5 0.00032, 0 0))."}
{"id": 429, "function": "ST_MinimumClearanceLine", "question": "输出多边形POLYGON ((0 0, 1 0, 1 1, 0.5 0.00032, 0 0))的最小净空线（Minimum Clearance Line，跨越几何体最小间隙的两点线）的WKT字符串表示，其中0.5 3.2e-4需转换为精确数值0.5 0.00032。", "sql": "SELECT ST_AsText(ST_MinimumClearanceLine('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))'));", "execution_result": [["LINESTRING(0.5 0.00032,0.5 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2339, "question_en": "Output the WKT string representation of the Minimum Clearance Line (the line connecting the two points spanning the smallest gap in the geometry) for the polygon POLYGON ((0 0, 1 0, 1 1, 0.5 0.00032, 0 0)), where 0.5 3.2e-4 should be converted to the exact value 0.5 0.00032."}
{"id": 430, "function": "ST_Perimeter", "question": "计算由坐标点(-71.1776848522251 42.3902896512902)、(-71.1776843766326 42.3903829478009)、(-71.1775844305465 42.3903826677917)、(-71.1775825927231 42.3902893647987)构成的多边形周长，输出米和英尺两种单位的结果。", "sql": "SELECT ST_Perimeter(geog) AS per_meters, ST_Perimeter(geog)/0.3048 AS per_ft FROM ST_GeogFromText('POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))') AS geog;", "execution_result": [[37.379046253787024, 122.63466618696529]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2340, "question_en": "Calculate the perimeter of the polygon formed by the coordinates (-71.1776848522251 42.3902896512902), (-71.1776843766326 42.3903829478009), (-71.1775844305465 42.3903826677917), (-71.1775825927231 42.3902893647987), and output the result in both meters and feet."}
{"id": 430, "function": "ST_Perimeter", "question": "计算由地理坐标点POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))构成的多边形的周长，分别以米和英尺为单位输出结果，其中英尺是通过将米转换为英尺（1英尺=0.3048米）得到的。", "sql": "SELECT ST_Perimeter(geog) AS per_meters, ST_Perimeter(geog)/0.3048 AS per_ft \nFROM ST_GeogFromText('POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))') AS geog;", "execution_result": [[37.379046253787024, 122.63466618696529]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2341, "question_en": "Calculate the perimeter of the polygon defined by the geographic coordinates POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902)), outputting the results in both meters and feet, where feet are obtained by converting meters (1 foot = 0.3048 meters)."}
{"id": 430, "function": "ST_Perimeter", "question": "计算由ST_GeogFromText函数从WKT格式字符串'POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))'创建的地理对象的周长，分别以米为单位和英尺为单位输出，其中英尺是通过将米数除以0.3048转换得到的。", "sql": "SELECT ST_Perimeter(geog) AS per_meters, ST_Perimeter(geog)/0.3048 AS per_ft \nFROM ST_GeogFromText('POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))') AS geog;", "execution_result": [[37.379046253787024, 122.63466618696529]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2342, "question_en": "Calculate the perimeter of the geographic object created by the ST_GeogFromText function from the WKT string 'POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))', outputting the result in both meters and feet, where feet are obtained by dividing the meters by 0.3048."}
{"id": 430, "function": "ST_Perimeter", "question": "输出多边形POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))的周长值，包含以米为单位的原始值和转换为英尺后的值两列。", "sql": "SELECT ST_Perimeter(geog) AS per_meters, ST_Perimeter(geog)/0.3048 AS per_ft FROM ST_GeogFromText('POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))') AS geog;", "execution_result": [[37.379046253787024, 122.63466618696529]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2343, "question_en": "Output the perimeter of the polygon POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902)), including two columns: the original value in meters and the converted value in feet."}
{"id": 430, "function": "ST_Perimeter", "question": "输出多边形POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))的周长英尺值。", "sql": "SELECT ST_Perimeter(geog)/0.3048 AS perimeter_feet FROM ST_GeogFromText('POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))') AS geog;", "execution_result": [[122.63466618696529]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2344, "question_en": "Output the perimeter in feet for the polygon POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))."}
{"id": 430, "function": "ST_Perimeter", "question": "输出由地理多边形POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009,-71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))计算得到的周长，分别以米为单位和英尺为单位，其中英尺值通过将米值除以0.3048转换得到。", "sql": "SELECT ST_Perimeter(geog) AS per_meters, ST_Perimeter(geog)/0.3048 AS per_ft \nFROM ST_GeogFromText('POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))') AS geog;", "execution_result": [[37.379046253787024, 122.63466618696529]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2345, "question_en": "Output the perimeter of the geographic polygon POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009,-71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902)) in both meters and feet, where the feet value is obtained by dividing the meter value by 0.3048."}
{"id": 431, "function": "ST_Perimeter", "question": "计算由顶点(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)构成的多边形在SRID 2249下的周长。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450, 743265.625 2967416,743238 2967416))', 2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2346, "question_en": "Calculate the perimeter of the polygon formed by the vertices (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416) under SRID 2249."}
{"id": 431, "function": "ST_Perimeter", "question": "计算SRID为2249的POLYGON几何对象的周长，该多边形顶点坐标依次为(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)，最后闭合回起点(743238 2967416)。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450, 743265.625 2967416,743238 2967416))', 2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2347, "question_en": "Calculate the perimeter of a POLYGON geometry object with SRID 2249, whose vertices are (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416), and closing back to the starting point (743238 2967416)."}
{"id": 431, "function": "ST_Perimeter", "question": "计算SRID为2249的POLYGON几何对象的周长，该多边形由4个顶点组成，顶点坐标依次为(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)，最后回到起点(743238 2967416)闭合。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450, 743265.625 2967416,743238 2967416))', 2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2348, "question_en": "Calculate the perimeter of a POLYGON geometry object with SRID 2249, which consists of 4 vertices with coordinates (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416), and closes back to the starting point (743238 2967416)."}
{"id": 431, "function": "ST_Perimeter", "question": "返回由给定顶点构成的多边形POLYGON((743238 2967416,743238 2967450,743265 2967450, 743265.625 2967416,743238 2967416))在SRID 2249下的周长数值。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450, 743265.625 2967416,743238 2967416))', 2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2349, "question_en": "Return the perimeter value of the polygon POLYGON((743238 2967416,743238 2967450,743265 2967450, 743265.625 2967416,743238 2967416)) under SRID 2249."}
{"id": 431, "function": "ST_Perimeter", "question": "输出空间参考系为SRID 2249的多边形POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))的周长数值。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450, 743265.625 2967416,743238 2967416))', 2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2350, "question_en": "Output the perimeter value of the polygon POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) with spatial reference system SRID 2249."}
{"id": 431, "function": "ST_Perimeter", "question": "输出SRID为2249的POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))几何对象的周长数值，结果以浮点数形式返回。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450, 743265.625 2967416,743238 2967416))', 2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2351, "question_en": "Output the perimeter value of the POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)) geometry object with SRID 2249, returning the result as a floating-point number."}
{"id": 432, "function": "ST_Perimeter", "question": "计算由坐标点763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003和763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003组成的MULTIPOLYGON在SRID 2249坐标系中的周长。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003)))', 2249));", "execution_result": [[845.2277133668246]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2352, "question_en": "Calculate the perimeter of the MULTIPOLYGON formed by the coordinate points 763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003 and 763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003 in the SRID 2249 coordinate system."}
{"id": 432, "function": "ST_Perimeter", "question": "计算SRID为2249的多多边形几何对象的周长，该几何对象由两个多边形组成：第一个多边形顶点坐标依次为(763104.471273676 2949418.44119003)、(763104.477769673 2949418.42538203)、(763104.189609677 2949418.22343004)、(763104.471273676 2949418.44119003)；第二个多边形顶点坐标依次为(763104.471273676 2949418.44119003)、(763095.804579742 2949436.33850239)、(763086.132105649 2949451.46730207)、(763078.452329651 2949462.11549407)、(763075.354136904 2949466.17407812)、(763064.362142565 2949477.64291974)、(763059.953961626 2949481.28983009)、(762994.637609571 2949532.04103014)、(762990.568508415 2949535.06640477)、(762986.710889563 2949539.61421415)、(763117.237897679 2949709.50493431)、(763235.236617789 2949617.95619822)、(763287.718121842 2949562.20592617)、(763111.553321674 2949423.91664605)、(763104.471273676 2949418.44119003)。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003)))', 2249));", "execution_result": [[845.2277133668246]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2353, "question_en": "Calculate the perimeter of a multipolygon geometry with SRID 2249, which consists of two polygons: the first polygon has vertices at (763104.471273676 2949418.44119003), (763104.477769673 2949418.42538203), (763104.189609677 2949418.22343004), (763104.471273676 2949418.44119003); the second polygon has vertices at (763104.471273676 2949418.44119003), (763095.804579742 2949436.33850239), (763086.132105649 2949451.46730207), (763078.452329651 2949462.11549407), (763075.354136904 2949466.17407812), (763064.362142565 2949477.64291974), (763059.953961626 2949481.28983009), (762994.637609571 2949532.04103014), (762990.568508415 2949535.06640477), (762986.710889563 2949539.61421415), (763117.237897679 2949709.50493431), (763235.236617789 2949617.95619822), (763287.718121842 2949562.20592617), (763111.553321674 2949423.91664605), (763104.471273676 2949418.44119003)."}
{"id": 432, "function": "ST_Perimeter", "question": "计算SRID为2249的MULTIPOLYGON几何对象的周长，该几何对象由两个多边形组成：第一个多边形由四个顶点组成，坐标依次为(763104.471273676 2949418.44119003)、(763104.477769673 2949418.42538203)、(763104.189609677 2949418.22343004)、(763104.471273676 2949418.44119003)；第二个多边形由十五个顶点组成，坐标依次为(763104.471273676 2949418.44119003)、(763095.804579742 2949436.33850239)、(763086.132105649 2949451.46730207)、(763078.452329651 2949462.11549407)、(763075.354136904 2949466.17407812)、(763064.362142565 2949477.64291974)、(763059.953961626 2949481.28983009)、(762994.637609571 2949532.04103014)、(762990.568508415 2949535.06640477)、(762986.710889563 2949539.61421415)、(763117.237897679 2949709.50493431)、(763235.236617789 2949617.95619822)、(763287.718121842 2949562.20592617)、(763111.553321674 2949423.91664605)、(763104.471273676 2949418.44119003)。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003)))', 2249));", "execution_result": [[845.2277133668246]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2354, "question_en": "Calculate the perimeter of a MULTIPOLYGON geometry with SRID 2249, which consists of two polygons: the first polygon has four vertices with coordinates (763104.471273676 2949418.44119003), (763104.477769673 2949418.42538203), (763104.189609677 2949418.22343004), (763104.471273676 2949418.44119003); the second polygon has fifteen vertices with coordinates (763104.471273676 2949418.44119003), (763095.804579742 2949436.33850239), (763086.132105649 2949451.46730207), (763078.452329651 2949462.11549407), (763075.354136904 2949466.17407812), (763064.362142565 2949477.64291974), (763059.953961626 2949481.28983009), (762994.637609571 2949532.04103014), (762990.568508415 2949535.06640477), (762986.710889563 2949539.61421415), (763117.237897679 2949709.50493431), (763235.236617789 2949617.95619822), (763287.718121842 2949562.20592617), (763111.553321674 2949423.91664605), (763104.471273676 2949418.44119003)."}
{"id": 432, "function": "ST_Perimeter", "question": "输出SRID 2249坐标系中的MULTIPOLYGON(((763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003)))的周长数值。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003)))', 2249));", "execution_result": [[845.2277133668246]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2355, "question_en": "Output the perimeter value of the MULTIPOLYGON(((763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003))) in SRID 2249 coordinate system."}
{"id": 432, "function": "ST_Perimeter", "question": "计算SRID为2249的MULTIPOLYGON几何对象（由两个多边形组成：第一个多边形顶点为763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003；第二个多边形顶点为763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003）的周长数值结果。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003)))', 2249));", "execution_result": [[845.2277133668246]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2356, "question_en": "Calculate the perimeter value of a MULTIPOLYGON geometry object with SRID 2249 (composed of two polygons: the first polygon vertices are 763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003; the second polygon vertices are 763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003)."}
{"id": 432, "function": "ST_Perimeter", "question": "计算SRID为2249的MULTIPOLYGON几何对象的周长数值（由两个多边形组成：第一个多边形顶点为763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003；第二个多边形顶点为763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003），结果以浮点数形式返回。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003)))', 2249));", "execution_result": [[845.2277133668246]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2357, "question_en": "Calculate the perimeter value of a MULTIPOLYGON geometry with SRID 2249 (composed of two polygons: the first polygon has vertices at 763104.471273676 2949418.44119003, 763104.477769673 2949418.42538203, 763104.189609677 2949418.22343004, 763104.471273676 2949418.44119003; the second polygon has vertices at 763104.471273676 2949418.44119003, 763095.804579742 2949436.33850239, 763086.132105649 2949451.46730207, 763078.452329651 2949462.11549407, 763075.354136904 2949466.17407812, 763064.362142565 2949477.64291974, 763059.953961626 2949481.28983009, 762994.637609571 2949532.04103014, 762990.568508415 2949535.06640477, 762986.710889563 2949539.61421415, 763117.237897679 2949709.50493431, 763235.236617789 2949617.95619822, 763287.718121842 2949562.20592617, 763111.553321674 2949423.91664605, 763104.471273676 2949418.44119003), and return the result as a floating-point number."}
{"id": 433, "function": "ST_Perimeter", "question": "计算由坐标点(-71.1044543107478 42.340674480411)、(-71.1044542869917 42.3406744369506)、(-71.1044553562977 42.340673886454)等构成的多面体MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))的周长，分别返回米制单位、球面米制单位和英尺单位三种结果。", "sql": "SELECT ST_Perimeter(geog) As per_meters, ST_Perimeter(geog,false) As per_sphere_meters, ST_Perimeter(geog)/0.3048 As per_ft \nFROM ST_GeogFromText('MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))') As geog;", "execution_result": [[257.6342836842405, 257.41231144633684, 845.2568362343848]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2358, "question_en": "Calculate the perimeter of the MULTIPOLYGON composed of coordinates (-71.1044543107478 42.340674480411), (-71.1044542869917 42.3406744369506), (-71.1044553562977 42.340673886454), etc., and return the results in three units: metric, spherical metric, and feet."}
{"id": 433, "function": "ST_Perimeter", "question": "计算由ST_GeogFromText函数从WKT格式创建的MULTIPOLYGON几何对象的地理周长（以米为单位）、椭球体模型下的周长（以米为单位）以及转换为英尺单位的周长。该MULTIPOLYGON由两个多边形组成：第一个多边形包含四个顶点（(-71.1044543107478 42.340674480411)、(-71.1044542869917 42.3406744369506)、(-71.1044553562977 42.340673886454)、(-71.1044543107478 42.340674480411)），第二个多边形包含十五个顶点（(-71.1044543107478 42.340674480411)、(-71.1044860600303 42.3407237015564)、(-71.1045215770124 42.3407653385914)、(-71.1045498002983 42.3407946553165)、(-71.1045611902745 42.3408058316308)、(-71.1046016507427 42.340837442371)、(-71.104617893173 42.3408475056957)、(-71.1048586153981 42.3409875993595)、(-71.1048736143677 42.3409959528211)、(-71.1048878050242 42.3410084812078)、(-71.1044020965803 42.3414730072048)、(-71.1039672113619 42.3412202916693)、(-71.1037740497748 42.3410666421308)、(-71.1044280218456 42.3406894151355)、(-71.1044543107478 42.340674480411)）。", "sql": "SELECT ST_Perimeter(geog) As per_meters, ST_Perimeter(geog,false) As per_sphere_meters, ST_Perimeter(geog)/0.3048 As per_ft \nFROM ST_GeogFromText('MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))') As geog;", "execution_result": [[257.6342836842405, 257.41231144633684, 845.2568362343848]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2359, "question_en": "Calculate the geographic perimeter (in meters), the perimeter under the ellipsoid model (in meters), and the perimeter converted to feet for a MULTIPOLYGON geometry object created from WKT format using the ST_GeogFromText function. The MULTIPOLYGON consists of two polygons: the first polygon has four vertices ((-71.1044543107478 42.340674480411), (-71.1044542869917 42.3406744369506), (-71.1044553562977 42.340673886454), (-71.1044543107478 42.340674480411)), and the second polygon has fifteen vertices ((-71.1044543107478 42.340674480411), (-71.1044860600303 42.3407237015564), (-71.1045215770124 42.3407653385914), (-71.1045498002983 42.3407946553165), (-71.1045611902745 42.3408058316308), (-71.1046016507427 42.340837442371), (-71.104617893173 42.3408475056957), (-71.1048586153981 42.3409875993595), (-71.1048736143677 42.3409959528211), (-71.1048878050242 42.3410084812078), (-71.1044020965803 42.3414730072048), (-71.1039672113619 42.3412202916693), (-71.1037740497748 42.3410666421308), (-71.1044280218456 42.3406894151355), (-71.1044543107478 42.340674480411))."}
{"id": 433, "function": "ST_Perimeter", "question": "计算由WKT文本'MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))'定义的地理对象的周长，分别返回：以米为单位的平面周长(per_meters)、以米为单位的球面周长(per_sphere_meters)以及转换为英尺单位的周长(per_ft)。", "sql": "SELECT ST_Perimeter(geog) As per_meters, ST_Perimeter(geog,false) As per_sphere_meters, ST_Perimeter(geog)/0.3048 As per_ft \nFROM ST_GeogFromText('MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))') As geog;", "execution_result": [[257.6342836842405, 257.41231144633684, 845.2568362343848]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2360, "question_en": "Calculate the perimeter of the geographic object defined by the WKT text 'MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))', returning the planar perimeter in meters (per_meters), the spherical perimeter in meters (per_sphere_meters), and the perimeter converted to feet (per_ft)."}
{"id": 433, "function": "ST_Perimeter", "question": "输出多面体地理对象MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))的三列周长计算结果：第一列为平面米制周长，第二列为球面米制周长，第三列为转换为英尺单位的周长值。", "sql": "SELECT ST_Perimeter(geog) As per_meters, ST_Perimeter(geog,false) As per_sphere_meters, ST_Perimeter(geog)/0.3048 As per_ft \nFROM ST_GeogFromText('MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))') As geog;", "execution_result": [[257.6342836842405, 257.41231144633684, 845.2568362343848]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2361, "question_en": "Output the three-column perimeter calculation results for the multipolygon geographic object MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411))): the first column as planar metric perimeter, the second as spherical metric perimeter, and the third as the perimeter value converted to feet."}
{"id": 433, "function": "ST_Perimeter", "question": "输出地理对象MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))的三个周长值：以米为单位的平面周长(per_meters)、以米为单位的球面周长(per_sphere_meters)和以英尺为单位的周长(per_ft)。", "sql": "SELECT ST_Perimeter(geog) As per_meters, ST_Perimeter(geog,false) As per_sphere_meters, ST_Perimeter(geog)/0.3048 As per_ft \nFROM ST_GeogFromText('MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))') As geog;", "execution_result": [[257.6342836842405, 257.41231144633684, 845.2568362343848]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2362, "question_en": "Output the three perimeter values of the geographic object MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411))): planar perimeter in meters (per_meters), spherical perimeter in meters (per_sphere_meters), and perimeter in feet (per_ft)."}
{"id": 433, "function": "ST_Perimeter", "question": "输出由地理对象MULTIPOLYGON计算得到的三个周长值：以米为单位的平面周长（per_meters）、以米为单位的球面周长（per_sphere_meters）以及转换为英尺单位的周长（per_ft）。几何对象的坐标为(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))。", "sql": "SELECT ST_Perimeter(geog) As per_meters, ST_Perimeter(geog,false) As per_sphere_meters, ST_Perimeter(geog)/0.3048 As per_ft \nFROM ST_GeogFromText('MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))') As geog;", "execution_result": [[257.6342836842405, 257.41231144633684, 845.2568362343848]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2363, "question_en": "Output three perimeter values calculated from the geographic object MULTIPOLYGON: planar perimeter in meters (per_meters), spherical perimeter in meters (per_sphere_meters), and perimeter converted to feet (per_ft). The coordinates of the geometry are (((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))."}
{"id": 434, "function": "ST_3DPerimeter", "question": "计算SRID=2249坐标系下POLYGON((743238 2967416 2,743238 2967450 1,743265.625 2967416 1,743238 2967416 2))的三维周长、二维周长和默认周长。", "sql": "SELECT ST_3DPerimeter(geom), ST_Perimeter2d(geom), ST_Perimeter(geom) FROM (SELECT ST_GeomFromEWKT('SRID=2249;POLYGON((743238 2967416 2,743238 2967450 1, 743265.625 2967416 1,743238 2967416 2))') AS geom) AS foo;", "execution_result": [[105.46579359767418, 105.43299727218763, 105.43299727218763]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2364, "question_en": "Calculate the 3D perimeter, 2D perimeter, and default perimeter of the polygon POLYGON((743238 2967416 2,743238 2967450 1,743265.625 2967416 1,743238 2967416 2)) in the SRID=2249 coordinate system."}
{"id": 434, "function": "ST_3DPerimeter", "question": "计算SRID为2249的三维多边形POLYGON((743238 2967416 2,743238 2967450 1,743265.625 2967416 1,743238 2967416 2))的三维周长、二维投影周长和默认维度周长，该多边形由四个三维点构成闭合环，坐标分别为(743238 2967416 2)、(743238 2967450 1)、(743265.625 2967416 1)和(743238 2967416 2)。", "sql": "SELECT ST_3DPerimeter(geom), ST_Perimeter2d(geom), ST_Perimeter(geom) \nFROM (SELECT ST_GeomFromEWKT('SRID=2249;POLYGON((743238 2967416 2,743238 2967450 1, 743265.625 2967416 1,743238 2967416 2))') AS geom) AS foo;", "execution_result": [[105.46579359767418, 105.43299727218763, 105.43299727218763]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2365, "question_en": "Calculate the 3D perimeter, 2D projected perimeter, and default-dimensional perimeter of a 3D polygon with SRID 2249, POLYGON((743238 2967416 2,743238 2967450 1,743265.625 2967416 1,743238 2967416 2)), which forms a closed ring with four 3D points at coordinates (743238 2967416 2), (743238 2967450 1), (743265.625 2967416 1), and (743238 2967416 2)."}
{"id": 434, "function": "ST_3DPerimeter", "question": "计算由EWKT格式定义的SRID为2249的三维多边形POLYGON((743238 2967416 2,743238 2967450 1,743265.625 2967416 1,743238 2967416 2))的三维周长ST_3DPerimeter、二维周长ST_Perimeter2d和默认周长ST_Perimeter，其中多边形顶点坐标依次为(743238,2967416,2)、(743238,2967450,1)、(743265.625,2967416,1)，最后闭合回起点(743238,2967416,2)。", "sql": "SELECT ST_3DPerimeter(geom), ST_Perimeter2d(geom), ST_Perimeter(geom) \nFROM (SELECT ST_GeomFromEWKT('SRID=2249;POLYGON((743238 2967416 2,743238 2967450 1, 743265.625 2967416 1,743238 2967416 2))') AS geom) AS foo;", "execution_result": [[105.46579359767418, 105.43299727218763, 105.43299727218763]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2366, "question_en": "Calculate the 3D perimeter ST_3DPerimeter, 2D perimeter ST_Perimeter2d, and default perimeter ST_Perimeter for a 3D polygon defined in EWKT format with SRID 2249: POLYGON((743238 2967416 2,743238 2967450 1,743265.625 2967416 1,743238 2967416 2)), where the polygon vertices are (743238,2967416,2), (743238,2967450,1), (743265.625,2967416,1), and closing back to the starting point (743238,2967416,2)."}
{"id": 434, "function": "ST_3DPerimeter", "question": "输出三维多边形POLYGON((743238 2967416 2,743238 2967450 1,743265.625 2967416 1,743238 2967416 2))在SRID=2249坐标系下的三种周长计算结果：三维周长值、二维周长值和默认周长值。", "sql": "SELECT ST_3DPerimeter(geom), ST_Perimeter2d(geom), ST_Perimeter(geom) FROM (SELECT ST_GeomFromEWKT('SRID=2249;POLYGON((743238 2967416 2,743238 2967450 1, 743265.625 2967416 1,743238 2967416 2))') AS geom) AS foo;", "execution_result": [[105.46579359767418, 105.43299727218763, 105.43299727218763]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2367, "question_en": "Output three perimeter calculation results for the 3D polygon POLYGON((743238 2967416 2,743238 2967450 1,743265.625 2967416 1,743238 2967416 2)) in the SRID=2249 coordinate system: 3D perimeter value, 2D perimeter value, and default perimeter value."}
{"id": 434, "function": "ST_3DPerimeter", "question": "输出SRID为2249的三维多边形POLYGON((743238 2967416 2,743238 2967450 1,743265.625 2967416 1,743238 2967416 2))的三维周长、二维平面周长和自动判断维度的周长值，要求返回三个数值结果。", "sql": "SELECT ST_3DPerimeter(geom), ST_Perimeter2d(geom), ST_Perimeter(geom) \nFROM (SELECT ST_GeomFromEWKT('SRID=2249;POLYGON((743238 2967416 2,743238 2967450 1, 743265.625 2967416 1,743238 2967416 2))') AS geom) AS foo;", "execution_result": [[105.46579359767418, 105.43299727218763, 105.43299727218763]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2368, "question_en": "Output the 3D perimeter, 2D planar perimeter, and automatically determined dimension perimeter values for the 3D polygon POLYGON((743238 2967416 2,743238 2967450 1,743265.625 2967416 1,743238 2967416 2)) with SRID 2249, returning three numerical results."}
{"id": 434, "function": "ST_3DPerimeter", "question": "输出SRID为2249的多边形POLYGON((743238 2967416 2,743238 2967450 1,743265.625 2967416 1,743238 2967416 2))的三维周长、二维平面周长和自动判断维度的周长值，要求返回结果为三个数值列。", "sql": "SELECT ST_3DPerimeter(geom), ST_Perimeter2d(geom), ST_Perimeter(geom) \nFROM (SELECT ST_GeomFromEWKT('SRID=2249;POLYGON((743238 2967416 2,743238 2967450 1, 743265.625 2967416 1,743238 2967416 2))') AS geom) AS foo;", "execution_result": [[105.46579359767418, 105.43299727218763, 105.43299727218763]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2369, "question_en": "Output the 3D perimeter, 2D planar perimeter, and automatically determined dimension perimeter values for the polygon POLYGON((743238 2967416 2,743238 2967450 1,743265.625 2967416 1,743238 2967416 2)) with SRID 2249, returning the results as three numeric columns."}
{"id": 435, "function": "ST_ShortestLine", "question": "计算POINT(160 40)与LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190)之间的最短连线，输出WKT格式结果。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)') ) AS sline;", "execution_result": [["LINESTRING(160 40,125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2370, "question_en": "Calculate the shortest connecting line between POINT(160 40) and LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190), and output the result in WKT format."}
{"id": 435, "function": "ST_ShortestLine", "question": "计算二维点POINT(160 40)与二维折线LINESTRING(10 30, 50 50, 30 110, 70 90, 180 140, 130 190)之间的最短连线，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)') ) AS sline;", "execution_result": [["LINESTRING(160 40,125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2371, "question_en": "Calculate the shortest connecting line between the 2D point POINT(160 40) and the 2D linestring LINESTRING(10 30, 50 50, 30 110, 70 90, 180 140, 130 190), and output the result in WKT format."}
{"id": 435, "function": "ST_ShortestLine", "question": "计算二维点POINT(160 40)与折线LINESTRING(10 30, 50 50, 30 110, 70 90, 180 140, 130 190)之间的最短连线，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)') ) AS sline;", "execution_result": [["LINESTRING(160 40,125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2372, "question_en": "Calculate the shortest connecting line between the 2D point POINT(160 40) and the linestring LINESTRING(10 30, 50 50, 30 110, 70 90, 180 140, 130 190), and output the result in WKT format."}
{"id": 435, "function": "ST_ShortestLine", "question": "输出POINT(160 40)到LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190)的最短连线的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)') ) AS sline;", "execution_result": [["LINESTRING(160 40,125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2373, "question_en": "Output the WKT string representation of the shortest connecting line from POINT(160 40) to LINESTRING(10 30,50 50,30 110,70 90,180 140,130 190)."}
{"id": 435, "function": "ST_ShortestLine", "question": "输出二维点POINT(160 40)与折线LINESTRING(10 30, 50 50, 30 110, 70 90, 180 140, 130 190)之间的最短连线，并以WKT字符串格式返回结果。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)') ) AS sline;", "execution_result": [["LINESTRING(160 40,125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2374, "question_en": "Output the shortest connecting line between the 2D point POINT(160 40) and the polyline LINESTRING(10 30, 50 50, 30 110, 70 90, 180 140, 130 190), and return the result in WKT string format."}
{"id": 435, "function": "ST_ShortestLine", "question": "输出POINT(160 40)与LINESTRING(10 30, 50 50, 30 110, 70 90, 180 140, 130 190)之间的最短连线所对应的WKT字符串。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)') ) AS sline;", "execution_result": [["LINESTRING(160 40,125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2375, "question_en": "Output the WKT string representing the shortest connecting line between POINT(160 40) and LINESTRING(10 30, 50 50, 30 110, 70 90, 180 140, 130 190)."}
{"id": 436, "function": "ST_ShortestLine", "question": "计算顶点为(190,150)、(20,10)、(160,70)的多边形与以(80,160)为中心、半径30的圆形缓冲区之间的最短连线，输出WKT格式。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(131.59149149528952 101.89887534906195,101.21320343559643 138.78679656440357)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2376, "question_en": "Calculate the shortest connecting line between the polygon with vertices (190,150), (20,10), (160,70) and the circular buffer centered at (80,160) with radius 30, output in WKT format."}
{"id": 436, "function": "ST_ShortestLine", "question": "计算由顶点坐标依次为(190 150)、(20 10)、(160 70)、(190 150)组成的多边形与以点(80 160)为中心、半径为30的圆形缓冲区之间的最短连线，并将结果以WKT格式输出。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(131.59149149528952 101.89887534906195,101.21320343559643 138.78679656440357)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2377, "question_en": "Calculate the shortest connecting line between the polygon with vertices (190 150), (20 10), (160 70), (190 150) and the circular buffer centered at (80 160) with a radius of 30, and output the result in WKT format."}
{"id": 436, "function": "ST_ShortestLine", "question": "计算由顶点坐标(190 150)、(20 10)、(160 70)、(190 150)组成的多边形与以点(80 160)为中心、半径为30的圆形缓冲区之间的最短连线，并将结果以WKT格式输出。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(131.59149149528952 101.89887534906195,101.21320343559643 138.78679656440357)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2378, "question_en": "Calculate the shortest connecting line between the polygon formed by vertices (190 150), (20 10), (160 70), (190 150) and the circular buffer centered at point (80 160) with a radius of 30, and output the result in WKT format."}
{"id": 436, "function": "ST_ShortestLine", "question": "输出多边形与点的缓冲区的最短连线的WKT字符串，其中多边形顶点为(190,150)、(20,10)、(160,70)，点坐标为(80,160)，缓冲区半径30。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(131.59149149528952 101.89887534906195,101.21320343559643 138.78679656440357)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2379, "question_en": "Output the WKT string of the shortest connecting line between the polygon and the point's buffer, where the polygon vertices are (190,150), (20,10), (160,70), the point coordinates are (80,160), and the buffer radius is 30."}
{"id": 436, "function": "ST_ShortestLine", "question": "计算多边形POLYGON ((190 150, 20 10, 160 70, 190 150))与以POINT(80 160)为中心、30单位半径的缓冲区之间的最短连线，结果以WKT字符串格式返回。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(131.59149149528952 101.89887534906195,101.21320343559643 138.78679656440357)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2380, "question_en": "Calculate the shortest connecting line between the polygon POLYGON ((190 150, 20 10, 160 70, 190 150)) and the 30-unit radius buffer centered at POINT(80 160), returning the result in WKT string format."}
{"id": 436, "function": "ST_ShortestLine", "question": "输出多边形与以POINT(80 160)为中心、30单位半径的圆形缓冲区之间的最短连线，结果以WKT字符串格式返回，多边形的坐标为POLYGON ((190 150, 20 10, 160 70, 190 150))。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(131.59149149528952 101.89887534906195,101.21320343559643 138.78679656440357)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2381, "question_en": "Output the shortest connecting line between the polygon with coordinates POLYGON ((190 150, 20 10, 160 70, 190 150)) and the circular buffer centered at POINT(80 160) with a 30-unit radius, returning the result in WKT string format."}
{"id": 437, "function": "ST_3DShortestLine", "question": "计算POINT(100 100 30)与LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)的三维最短距离线和二维最短距离线，输出EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(73.07692307692307 115.38461538461539,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2382, "question_en": "Calculate the 3D and 2D shortest distance lines between POINT(100 100 30) and LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000), output the results in EWKT format."}
{"id": 437, "function": "ST_3DShortestLine", "question": "计算三维点POINT(100 100 30)与三维折线LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 1000)之间的三维最短连线ST_3DShortestLine，以及二维最短连线ST_ShortestLine，并将结果分别以EWKT格式输出为shl3d_line_pt和shl2d_line_pt字段。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(73.07692307692307 115.38461538461539,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2383, "question_en": "Calculate the 3D shortest line ST_3DShortestLine and the 2D shortest line ST_ShortestLine between the 3D point POINT(100 100 30) and the 3D linestring LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 1000), and output the results in EWKT format as fields shl3d_line_pt and shl2d_line_pt respectively."}
{"id": 437, "function": "ST_3DShortestLine", "question": "计算三维点POINT(100 100 30)与三维线LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)之间的三维最短连线，以及它们在二维投影上的最短连线，分别以EWKT格式输出结果，并将结果列命名为shl3d_line_pt和shl2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(73.07692307692307 115.38461538461539,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2384, "question_en": "Calculate the 3D shortest connecting line between the 3D point POINT(100 100 30) and the 3D line LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000), as well as their shortest connecting line in 2D projection, output the results in EWKT format, and name the result columns shl3d_line_pt and shl2d_line_pt."}
{"id": 437, "function": "ST_3DShortestLine", "question": "输出POINT(100 100 30)与LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)的三维和二维最短距离线的EWKT字符串表示。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(73.07692307692307 115.38461538461539,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2385, "question_en": "Output the EWKT string representations of the 3D and 2D shortest distance lines between POINT(100 100 30) and LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)."}
{"id": 437, "function": "ST_3DShortestLine", "question": "输出三维点与三维线之间的三维最短连线EWKT字符串，以及它们之间的二维最短连线EWKT字符串，三维点坐标为POINT(100 100 30)，线坐标为LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(73.07692307692307 115.38461538461539,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2386, "question_en": "Output the EWKT strings of the 3D shortest connecting line between the 3D point and the 3D line, and their 2D shortest connecting line. The 3D point coordinates are POINT(100 100 30), and the line coordinates are LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 1000)."}
{"id": 437, "function": "ST_3DShortestLine", "question": "输出三维点POINT(100 100 30)与三维线LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)之间的三维最短连线EWKT字符串，以及它们之间的二维最短连线EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(73.07692307692307 115.38461538461539,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2387, "question_en": "Output the EWKT string of the 3D shortest connecting line between the 3D point POINT(100 100 30) and the 3D line LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000), as well as the EWKT string of their 2D shortest connecting line."}
{"id": 438, "function": "ST_3DShortestLine", "question": "计算POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间的三维和二维最短线。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(poly, mline)) AS shl3d, ST_AsEWKT(ST_ShortestLine(poly, mline)) AS shl2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(40.45454545454545 53.63636363636364 5,40.45454545454545 53.63636363636364 5)", "LINESTRING(20 40,20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2388, "question_en": "Compute the 3D and 2D shortest lines between POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))."}
{"id": 438, "function": "ST_3DShortestLine", "question": "计算多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与多线段几何对象MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间的三维最短连线ST_3DShortestLine和二维最短连线ST_ShortestLine，并以EWKT格式输出结果，分别命名为shl3d和shl2d。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(poly, mline)) AS shl3d, ST_AsEWKT(ST_ShortestLine(poly, mline)) AS shl2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(40.45454545454545 53.63636363636364 5,40.45454545454545 53.63636363636364 5)", "LINESTRING(20 40,20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2389, "question_en": "Calculate the 3D shortest line ST_3DShortestLine and the 2D shortest line ST_ShortestLine between the polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the multilinestring geometry MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), and output the results in EWKT format, named shl3d and shl2d respectively."}
{"id": 438, "function": "ST_3DShortestLine", "question": "计算三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与三维多线段MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间的三维最短连线ST_3DShortestLine和二维最短连线ST_ShortestLine，并分别以EWKT格式输出为shl3d和shl2d字段。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(poly, mline)) AS shl3d, ST_AsEWKT(ST_ShortestLine(poly, mline)) AS shl2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(40.45454545454545 53.63636363636364 5,40.45454545454545 53.63636363636364 5)", "LINESTRING(20 40,20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2390, "question_en": "Calculate the 3D shortest line ST_3DShortestLine and 2D shortest line ST_ShortestLine between the 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the 3D multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), and output them in EWKT format as fields shl3d and shl2d respectively."}
{"id": 438, "function": "ST_3DShortestLine", "question": "输出三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与多线串MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间的三维最短线和二维最短线的EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(poly, mline)) AS shl3d, ST_AsEWKT(ST_ShortestLine(poly, mline)) AS shl2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(40.45454545454545 53.63636363636364 5,40.45454545454545 53.63636363636364 5)", "LINESTRING(20 40,20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2391, "question_en": "Output the EWKT format results of the 3D shortest line and 2D shortest line between the 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))."}
{"id": 438, "function": "ST_3DShortestLine", "question": "输出三维多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与三维多线段MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间的三维最短连线EWKT字符串和二维最短连线EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(poly, mline)) AS shl3d, ST_AsEWKT(ST_ShortestLine(poly, mline)) AS shl2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(40.45454545454545 53.63636363636364 5,40.45454545454545 53.63636363636364 5)", "LINESTRING(20 40,20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2392, "question_en": "Output the 3D shortest connecting line EWKT string and the 2D shortest connecting line EWKT string between the 3D polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the 3D multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))."}
{"id": 438, "function": "ST_3DShortestLine", "question": "输出多边形POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))与三维多线段MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间的三维最短连线EWKT字符串和二维最短连线EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(poly, mline)) AS shl3d, ST_AsEWKT(ST_ShortestLine(poly, mline)) AS shl2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(40.45454545454545 53.63636363636364 5,40.45454545454545 53.63636363636364 5)", "LINESTRING(20 40,20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2393, "question_en": "Output the EWKT strings for the 3D shortest connecting line and the 2D shortest connecting line between the polygon POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) and the 3D multilinestring MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))."}
{"id": 439, "function": "ST_3DShortestLine", "question": "计算MULTIPOINT(100 100 30, 50 74 1000)与LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)的三维最短距离线和二维最短距离线，输出为EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(50 75,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2394, "question_en": "Calculate the 3D shortest distance line and 2D shortest distance line between MULTIPOINT(100 100 30, 50 74 1000) and LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900), output in EWKT format."}
{"id": 439, "function": "ST_3DShortestLine", "question": "计算三维点集合MULTIPOINT(100 100 30, 50 74 1000)与三维线段LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900)之间的三维最短连线ST_3DShortestLine结果，以及二维最短连线ST_ShortestLine结果，分别以EWKT格式输出为shl3d_line_pt和shl2d_line_pt字段。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(50 75,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2395, "question_en": "Calculate the 3D shortest line ST_3DShortestLine and the 2D shortest line ST_ShortestLine between the 3D point set MULTIPOINT(100 100 30, 50 74 1000) and the 3D linestring LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900), and output the results in EWKT format as fields shl3d_line_pt and shl2d_line_pt respectively."}
{"id": 439, "function": "ST_3DShortestLine", "question": "计算三维几何对象MULTIPOINT(100 100 30, 50 74 1000)与LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)之间的三维最短连线，以及二维最短连线，并分别以EWKT格式输出结果，其中三维最短连线使用ST_3DShortestLine函数，二维最短连线使用ST_ShortestLine函数。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(50 75,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2396, "question_en": "Calculate the 3D shortest line between the 3D geometry object MULTIPOINT(100 100 30, 50 74 1000) and LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900), and the 2D shortest line, outputting the results in EWKT format, using the ST_3DShortestLine function for the 3D line and the ST_ShortestLine function for the 2D line."}
{"id": 439, "function": "ST_3DShortestLine", "question": "输出MULTIPOINT(100 100 30, 50 74 1000)与LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)的三维和二维最短距离线的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(50 75,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2397, "question_en": "Output the EWKT strings of the 3D and 2D shortest distance lines between MULTIPOINT(100 100 30, 50 74 1000) and LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)."}
{"id": 439, "function": "ST_3DShortestLine", "question": "输出多点类型对象MULTIPOINT(100 100 30, 50 74 1000)与三维线LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900)之间的三维最短连线EWKT字符串，以及它们的二维最短连线EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(50 75,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2398, "question_en": "Output the 3D shortest connecting line EWKT string between the multipoint object MULTIPOINT(100 100 30, 50 74 1000) and the 3D linestring LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900), as well as their 2D shortest connecting line EWKT string."}
{"id": 439, "function": "ST_3DShortestLine", "question": "输出三维点MULTIPOINT(100 100 30, 50 74 1000)与三维线LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900)之间的三维最短连线EWKT字符串，以及它们之间的二维最短连线EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(50 75,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2399, "question_en": "Output the 3D shortest connecting line EWKT string between the 3D point MULTIPOINT(100 100 30, 50 74 1000) and the 3D line LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900), as well as the 2D shortest connecting line EWKT string between them."}
{"id": 441, "function": "ST_Difference", "question": "计算LINESTRING(50 100, 50 200)与LINESTRING(50 50, 50 150)的几何差集，返回WKT格式结果。", "sql": "SELECT ST_AsText( ST_Difference( 'LINESTRING(50 100, 50 200)'::geometry, 'LINESTRING(50 50, 50 150)'::geometry ) );", "execution_result": [["LINESTRING(50 150,50 200)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2400, "question_en": "Calculate the geometric difference between LINESTRING(50 100, 50 200) and LINESTRING(50 50, 50 150), returning the result in WKT format."}
{"id": 441, "function": "ST_Difference", "question": "计算两条LINESTRING线对象的几何差集，并以WKT格式输出结果。其中第一个线段的端点坐标是(50 100)和(50 200)，第二个线段的端点坐标是(50 50)和(50 150)。", "sql": "SELECT ST_AsText( ST_Difference( 'LINESTRING(50 100, 50 200)'::geometry, 'LINESTRING(50 50, 50 150)'::geometry ) );", "execution_result": [["LINESTRING(50 150,50 200)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2401, "question_en": "Compute the geometric difference between two LINESTRING objects and output the result in WKT format. The first line's endpoints are (50 100) and (50 200), and the second line's endpoints are (50 50) and (50 150)."}
{"id": 441, "function": "ST_Difference", "question": "计算LINESTRING(50 100, 50 200)与LINESTRING(50 50, 50 150)的几何差集，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_Difference( 'LINESTRING(50 100, 50 200)'::geometry, 'LINESTRING(50 50, 50 150)'::geometry ) );", "execution_result": [["LINESTRING(50 150,50 200)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2402, "question_en": "Calculate the geometric difference between LINESTRING(50 100, 50 200) and LINESTRING(50 50, 50 150), and output the result in WKT format."}
{"id": 441, "function": "ST_Difference", "question": "输出LINESTRING(50 100, 50 200)减去LINESTRING(50 50, 50 150)后剩余的几何部分的WKT字符串。", "sql": "SELECT ST_AsText( ST_Difference( 'LINESTRING(50 100, 50 200)'::geometry, 'LINESTRING(50 50, 50 150)'::geometry ) );", "execution_result": [["LINESTRING(50 150,50 200)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2403, "question_en": "Output the WKT string of the remaining geometric part after subtracting LINESTRING(50 50, 50 150) from LINESTRING(50 100, 50 200)."}
{"id": 441, "function": "ST_Difference", "question": "输出线段LINESTRING(50 100, 50 200)与LINESTRING(50 50, 50 150)进行几何差集运算后结果的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_Difference( 'LINESTRING(50 100, 50 200)'::geometry, 'LINESTRING(50 50, 50 150)'::geometry ) );", "execution_result": [["LINESTRING(50 150,50 200)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2404, "question_en": "Output the WKT string representation of the geometric difference operation between the linestrings LINESTRING(50 100, 50 200) and LINESTRING(50 50, 50 150)."}
{"id": 441, "function": "ST_Difference", "question": "输出LINESTRING(50 100, 50 200)与LINESTRING(50 50, 50 150)进行几何差集运算后得到的WKT字符串结果。", "sql": "SELECT ST_AsText( ST_Difference( 'LINESTRING(50 100, 50 200)'::geometry, 'LINESTRING(50 50, 50 150)'::geometry ) );", "execution_result": [["LINESTRING(50 150,50 200)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2405, "question_en": "Output the WKT string result of the geometric difference operation between LINESTRING(50 100, 50 200) and LINESTRING(50 50, 50 150)."}
{"id": 442, "function": "ST_Difference", "question": "从MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)中移除POINT(-118.614 38.281 5)，输出EWKT格式结果。", "sql": "SELECT ST_AsEWKT( ST_Difference( 'MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)' :: geometry, 'POINT(-118.614 38.281 5)' :: geometry ) );", "execution_result": [["MULTIPOINT(-118.6 38.329 6,-118.58 38.38 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2406, "question_en": "Remove POINT(-118.614 38.281 5) from MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7) and output the result in EWKT format."}
{"id": 442, "function": "ST_Difference", "question": "计算一个三维多点集合与三维点POINT(-118.614 38.281 5)的几何差集，并以EWKT格式输出结果。三维多点集合为MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)。", "sql": "SELECT ST_AsEWKT( ST_Difference( 'MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)' :: geometry, 'POINT(-118.614 38.281 5)' :: geometry ) );", "execution_result": [["MULTIPOINT(-118.6 38.329 6,-118.58 38.38 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2407, "question_en": "Compute the geometric difference between a 3D multipoint set MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7) and a 3D point POINT(-118.614 38.281 5), and output the result in EWKT format."}
{"id": 442, "function": "ST_Difference", "question": "计算三维多点集合MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)与三维点POINT(-118.614 38.281 5)的几何差集，并以EWKT格式输出结果。其中MULTIPOINT包含三个三维点：第一个点坐标为(-118.58, 38.38)且Z值为5，第二个点坐标为(-118.60, 38.329)且Z值为6，第三个点坐标为(-118.614, 38.281)且Z值为7。", "sql": "SELECT ST_AsEWKT( ST_Difference( 'MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)' :: geometry, 'POINT(-118.614 38.281 5)' :: geometry ) );", "execution_result": [["MULTIPOINT(-118.6 38.329 6,-118.58 38.38 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2408, "question_en": "Compute the geometric difference between the 3D multipoint collection MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7) and the 3D point POINT(-118.614 38.281 5), and output the result in EWKT format. The MULTIPOINT contains three 3D points: the first point has coordinates (-118.58, 38.38) with Z value 5, the second point (-118.60, 38.329) with Z value 6, and the third point (-118.614, 38.281) with Z value 7."}
{"id": 442, "function": "ST_Difference", "question": "输出三维多点集合MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)减去三维点POINT(-118.614 38.281 5)后的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT( ST_Difference( 'MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)' :: geometry, 'POINT(-118.614 38.281 5)' :: geometry ) );", "execution_result": [["MULTIPOINT(-118.6 38.329 6,-118.58 38.38 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2409, "question_en": "Output the EWKT format string of the 3D multipoint collection MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7) minus the 3D point POINT(-118.614 38.281 5)."}
{"id": 442, "function": "ST_Difference", "question": "输出三维多点集合与三维点POINT(-118.614 38.281 5)进行空间差集运算后得到的EWKT格式字符串结果，三维多点集合为MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)。", "sql": "SELECT ST_AsEWKT( ST_Difference( 'MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)' :: geometry, 'POINT(-118.614 38.281 5)' :: geometry ) );", "execution_result": [["MULTIPOINT(-118.6 38.329 6,-118.58 38.38 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2410, "question_en": "Output the EWKT format string result of the spatial difference operation between a 3D multipoint collection MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7) and a 3D point POINT(-118.614 38.281 5)."}
{"id": 442, "function": "ST_Difference", "question": "输出三维多点集合MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)与三维点POINT(-118.614 38.281 5)进行空间差集运算后得到的EWKT格式字符串结果。", "sql": "SELECT ST_AsEWKT( ST_Difference( 'MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)' :: geometry, 'POINT(-118.614 38.281 5)' :: geometry ) );", "execution_result": [["MULTIPOINT(-118.6 38.329 6,-118.58 38.38 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2411, "question_en": "Output the EWKT format string result of the spatial difference operation between the 3D multipoint collection MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7) and the 3D point POINT(-118.614 38.281 5)."}
{"id": 443, "function": "ST_Intersection", "question": "计算二维点POINT(0 0)与折线LINESTRING ( 2 0, 0 2 )的空间交集，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry));", "execution_result": [["POINT EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2412, "question_en": "Calculate the spatial intersection between the 2D point POINT(0 0) and the linestring LINESTRING (2 0, 0 2), and output the result in WKT format."}
{"id": 443, "function": "ST_Intersection", "question": "在PostGIS中，如何获取坐标点为(0,0)的二维点与连接点(2,0)和点(0,2)的线段的空间相交部分，并以文本形式展示？", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry));", "execution_result": [["POINT EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2413, "question_en": "In PostGIS, how to get the spatial intersection between a 2D point at (0,0) and the line segment connecting points (2,0) and (0,2), and display it as text?"}
{"id": 443, "function": "ST_Intersection", "question": "将几何对象POINT(0 0)与LINESTRING ( 2 0, 0 2 )进行空间相交运算，返回结果的WKT文本表示。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry));", "execution_result": [["POINT EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2414, "question_en": "Perform a spatial intersection operation between the geometric objects POINT(0 0) and LINESTRING (2 0, 0 2), and return the WKT text representation of the result."}
{"id": 443, "function": "ST_Intersection", "question": "输出POINT(0 0)与LINESTRING ( 2 0, 0 2 )的空间交集结果的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry));", "execution_result": [["POINT EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2415, "question_en": "Output the WKT string representation of the spatial intersection result between POINT(0 0) and LINESTRING(2 0, 0 2)."}
{"id": 443, "function": "ST_Intersection", "question": "将二维点POINT(0 0)与线段LINESTRING ( 2 0, 0 2 )的几何交集转换为WKT格式文本输出。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry));", "execution_result": [["POINT EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2416, "question_en": "Convert the geometric intersection of the 2D point POINT(0 0) and the line LINESTRING (2 0, 0 2) into WKT format text output."}
{"id": 443, "function": "ST_Intersection", "question": "以WKT字符串形式返回POINT(0 0)和LINESTRING ( 2 0, 0 2 )两个几何对象的相交部分。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry));", "execution_result": [["POINT EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2417, "question_en": "Return the intersection of the two geometries POINT(0 0) and LINESTRING(2 0, 0 2) as a WKT string."}
{"id": 446, "function": "ST_Intersection", "question": "计算三维线LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)与三维面POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))的空间相交部分，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_Intersection(linestring, polygon)) AS wkt FROM ST_GeomFromText('LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)') AS linestring CROSS JOIN ST_GeomFromText('POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))') AS polygon;", "execution_result": [["LINESTRING Z (1 1 8,0.5 0.5 8,0 0 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2418, "question_en": "Calculate the spatial intersection between the 3D linestring LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10) and the 3D polygon POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8)), and output the result in WKT format."}
{"id": 446, "function": "ST_Intersection", "question": "将包含五个三维坐标点(2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)的线对象与顶点为(0 0 8,0 1 8,1 1 8,1 0 8)的三维多边形求交，返回交集的WKT文本表示。", "sql": "SELECT ST_AsText(ST_Intersection(linestring, polygon)) AS wkt FROM ST_GeomFromText('LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)') AS linestring CROSS JOIN ST_GeomFromText('POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))') AS polygon;", "execution_result": [["LINESTRING Z (1 1 8,0.5 0.5 8,0 0 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2419, "question_en": "Find the intersection between a line object with five 3D coordinates (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10) and a 3D polygon with vertices (0 0 8,0 1 8,1 1 8,1 0 8), and return the WKT representation of the intersection."}
{"id": 446, "function": "ST_Intersection", "question": "求Z坐标线LINESTRING Z (2 2 6至0 0 10)与Z坐标面POLYGON((0 0 8,0 1 8,1 1 8,1 0 8))的几何交集，要求输出结果为Well-Known Text格式。", "sql": "SELECT ST_AsText(ST_Intersection(linestring, polygon)) AS wkt \nFROM ST_GeomFromText('LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)') AS linestring CROSS JOIN ST_GeomFromText('POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))') AS polygon;", "execution_result": [["LINESTRING Z (1 1 8,0.5 0.5 8,0 0 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2420, "question_en": "Find the geometric intersection between the Z-coordinate line LINESTRING Z (2 2 6 to 0 0 10) and the Z-coordinate plane POLYGON((0 0 8,0 1 8,1 1 8,1 0 8)), and output the result in Well-Known Text format."}
{"id": 446, "function": "ST_Intersection", "question": "输出三维线LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)与三维面POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))相交部分的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Intersection(linestring, polygon)) AS wkt FROM ST_GeomFromText('LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)') AS linestring CROSS JOIN ST_GeomFromText('POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))') AS polygon;", "execution_result": [["LINESTRING Z (1 1 8,0.5 0.5 8,0 0 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2421, "question_en": "Output the WKT string representation of the intersection between the 3D linestring LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10) and the 3D polygon POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))."}
{"id": 446, "function": "ST_Intersection", "question": "将三维线LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)与三维面POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))的空间交集转换为WKT格式文本输出。", "sql": "SELECT ST_AsText(ST_Intersection(linestring, polygon)) AS wkt FROM ST_GeomFromText('LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)') AS linestring CROSS JOIN ST_GeomFromText('POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))') AS polygon;", "execution_result": [["LINESTRING Z (1 1 8,0.5 0.5 8,0 0 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2422, "question_en": "Convert the spatial intersection of the 3D linestring LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10) and the 3D polygon POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8)) into WKT format text output."}
{"id": 446, "function": "ST_Intersection", "question": "查询并输出三维线LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)与三维面POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))相交部分的几何对象WKT表示。", "sql": "SELECT ST_AsText(ST_Intersection(linestring, polygon)) AS wkt FROM ST_GeomFromText('LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)') AS linestring CROSS JOIN ST_GeomFromText('POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))') AS polygon;", "execution_result": [["LINESTRING Z (1 1 8,0.5 0.5 8,0 0 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2423, "question_en": "Query and output the WKT representation of the intersection between the 3D linestring LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10) and the 3D polygon POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))."}
{"id": 447, "function": "ST_Intersection", "question": "计算二维点POINT(0 0)与折线LINESTRING ( 0 0, 0 2 )的空间交集，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2424, "question_en": "Calculate the spatial intersection between the 2D point POINT(0 0) and the linestring LINESTRING (0 0, 0 2), and output the result in WKT format."}
{"id": 447, "function": "ST_Intersection", "question": "在PostGIS中，如何获取坐标为(0,0)的二维点与从(0,0)延伸到(0,2)的线段之间的相交部分，并以文本形式展示？", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2425, "question_en": "In PostGIS, how to get the intersection between a 2D point at (0,0) and a line segment extending from (0,0) to (0,2), and display it as text?"}
{"id": 447, "function": "ST_Intersection", "question": "将几何对象POINT(0 0)和LINESTRING ( 0 0, 0 2 )进行空间相交运算，返回结果的WKT文本表示。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2426, "question_en": "Perform a spatial intersection operation on the geometric objects POINT(0 0) and LINESTRING (0 0, 0 2), and return the WKT text representation of the result."}
{"id": 447, "function": "ST_Intersection", "question": "输出POINT(0 0)与LINESTRING ( 0 0, 0 2 )的空间交集结果的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2427, "question_en": "Output the WKT string representation of the spatial intersection result between POINT(0 0) and LINESTRING(0 0, 0 2)."}
{"id": 447, "function": "ST_Intersection", "question": "将二维点POINT(0 0)与线段LINESTRING ( 0 0, 0 2 )的几何交集转换为WKT文本格式输出。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2428, "question_en": "Convert the geometric intersection of the 2D point POINT(0 0) and the line segment LINESTRING(0 0, 0 2) into WKT text format output."}
{"id": 447, "function": "ST_Intersection", "question": "以WKT字符串形式返回POINT(0 0)和LINESTRING ( 0 0, 0 2 )两个几何对象的相交部分。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2429, "question_en": "Return the intersection of the two geometries POINT(0 0) and LINESTRING(0 0, 0 2) as a WKT string."}
{"id": 449, "function": "ST_Node", "question": "对由两条折线组成的MULTILINESTRING对象进行相交节点分割操作，第一条折线坐标为(2 5, 2 1, 7 1)，第二条折线坐标为(6 1, 4 1, 2 3, 2 5)，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_Node('MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING((2 5,2 3),(2 3,2 1,4 1),(4 1,2 3),(4 1,6 1),(6 1,7 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2430, "question_en": "Perform an intersection node split operation on a MULTILINESTRING object composed of two polylines, with the first polyline coordinates (2 5, 2 1, 7 1) and the second polyline coordinates (6 1, 4 1, 2 3, 2 5), and output the result in WKT format."}
{"id": 449, "function": "ST_Node", "question": "将MULTILINESTRING类型的两条折线（第一条路径经过点(2 5)、(2 1)、(7 1)，第二条路径经过点(6 1)、(4 1)、(2 3)、(2 5)）在交点处分割为独立线段，返回WKT文本表示。", "sql": "SELECT ST_AsText( ST_Node('MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING((2 5,2 3),(2 3,2 1,4 1),(4 1,2 3),(4 1,6 1),(6 1,7 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2431, "question_en": "Split the two polylines of MULTILINESTRING type (the first path passes through points (2 5), (2 1), (7 1), and the second path passes through points (6 1), (4 1), (2 3), (2 5)) into individual segments at their intersection points, and return the WKT text representation."}
{"id": 449, "function": "ST_Node", "question": "使用ST_Node函数处理包含两条折线的MULTILINESTRING对象（第一条折线顶点为2 5→2 1→7 1，第二条折线顶点为6 1→4 1→2 3→2 5），输出节点分割后的几何对象的WKT字符串。", "sql": "SELECT ST_AsText( ST_Node('MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING((2 5,2 3),(2 3,2 1,4 1),(4 1,2 3),(4 1,6 1),(6 1,7 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2432, "question_en": "Process a MULTILINESTRING object containing two polylines (first polyline vertices: 2 5→2 1→7 1, second polyline vertices: 6 1→4 1→2 3→2 5) using the ST_Node function, and output the WKT string of the resulting noded geometry."}
{"id": 449, "function": "ST_Node", "question": "输出对MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))进行节点分割操作后生成的WKT字符串。", "sql": "SELECT ST_AsText( ST_Node('MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING((2 5,2 3),(2 3,2 1,4 1),(4 1,2 3),(4 1,6 1),(6 1,7 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2433, "question_en": "Output the WKT string generated by performing a node-split operation on MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))."}
{"id": 449, "function": "ST_Node", "question": "将MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))几何对象通过ST_Node函数处理后的结果以WKT文本格式输出。", "sql": "SELECT ST_AsText( ST_Node('MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING((2 5,2 3),(2 3,2 1,4 1),(4 1,2 3),(4 1,6 1),(6 1,7 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2434, "question_en": "Output the result of processing the MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5)) geometry with the ST_Node function in WKT text format."}
{"id": 449, "function": "ST_Node", "question": "输出ST_Node函数对由两条折线（第一条折线点序列为(2 5, 2 1, 7 1)，第二条折线点序列为(6 1, 4 1, 2 3, 2 5)）组成的MULTILINESTRING几何对象进行节点分割后的WKT表示。", "sql": "SELECT ST_AsText( ST_Node('MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING((2 5,2 3),(2 3,2 1,4 1),(4 1,2 3),(4 1,6 1),(6 1,7 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2435, "question_en": "Output the WKT representation of the MULTILINESTRING geometry object formed by two polylines (first polyline point sequence: (2 5, 2 1, 7 1), second polyline point sequence: (6 1, 4 1, 2 3, 2 5)) after node splitting using the ST_Node function."}
{"id": 450, "function": "ST_Node", "question": "对三维线LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)进行节点分割操作，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_Node('LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING Z ((0 0 0,5 5 4.5),(5 5 4.5,10 10 10,0 10 5,5 5 4.5),(5 5 4.5,10 0 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2436, "question_en": "Perform a node splitting operation on the 3D linestring LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3) and output the result in WKT format."}
{"id": 450, "function": "ST_Node", "question": "将包含四个三维坐标点(0 0 0)、(10 10 10)、(0 10 5)、(10 0 3)的LINESTRINGZ几何对象进行节点化处理，输出WKT格式的结果。", "sql": "SELECT ST_AsText( ST_Node('LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING Z ((0 0 0,5 5 4.5),(5 5 4.5,10 10 10,0 10 5,5 5 4.5),(5 5 4.5,10 0 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2437, "question_en": "Nodify the LINESTRINGZ geometry object containing the four 3D coordinates (0 0 0), (10 10 10), (0 10 5), (10 0 3) and output the result in WKT format."}
{"id": 450, "function": "ST_Node", "question": "使用ST_Node函数处理三维线串LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)，将其在自相交处分割为多个线段，并以WKT文本格式返回结果。", "sql": "SELECT ST_AsText( ST_Node('LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING Z ((0 0 0,5 5 4.5),(5 5 4.5,10 10 10,0 10 5,5 5 4.5),(5 5 4.5,10 0 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2438, "question_en": "Process the 3D linestring LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3) with the ST_Node function to split it into multiple segments at self-intersections and return the result in WKT text format."}
{"id": 450, "function": "ST_Node", "question": "输出对三维线LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)进行节点化处理后得到的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_Node('LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING Z ((0 0 0,5 5 4.5),(5 5 4.5,10 10 10,0 10 5,5 5 4.5),(5 5 4.5,10 0 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2439, "question_en": "Output the WKT string representation of the noded 3D linestring LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)."}
{"id": 450, "function": "ST_Node", "question": "将包含四个三维坐标点(0 0 0)、(10 10 10)、(0 10 5)、(10 0 3)的线串进行自相交节点分割后，输出结果的WKT格式文本。", "sql": "SELECT ST_AsText( ST_Node('LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING Z ((0 0 0,5 5 4.5),(5 5 4.5,10 10 10,0 10 5,5 5 4.5),(5 5 4.5,10 0 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2440, "question_en": "Split the linestring containing the four 3D coordinates (0 0 0), (10 10 10), (0 10 5), (10 0 3) at self-intersection nodes and output the resulting WKT format text."}
{"id": 450, "function": "ST_Node", "question": "对三维坐标线LINESTRINGZ(0 0 0到10 10 10到0 10 5到10 0 3)执行ST_Node操作后，返回以WKT文本形式输出的几何对象？", "sql": "SELECT ST_AsText( ST_Node('LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING Z ((0 0 0,5 5 4.5),(5 5 4.5,10 10 10,0 10 5,5 5 4.5),(5 5 4.5,10 0 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2441, "question_en": "Perform the ST_Node operation on the 3D linestring LINESTRINGZ(0 0 0 to 10 10 10 to 0 10 5 to 10 0 3) and return the resulting geometry object in WKT text format."}
{"id": 451, "function": "ST_Split", "question": "以POINT(100 90)为中心创建半径为50的圆形缓冲区，然后用连接点ST_Point(10, 10)和ST_Point(190, 190)的直线分割该缓冲区，最后以WKT格式输出分割结果。", "sql": "SELECT ST_AsText( ST_Split( ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50), ST_MakeLine(ST_Point(10, 10),ST_Point(190, 190)) ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((150 90,149.0392640201615 80.24548389919359,146.19397662556435 70.86582838174552,141.57348061512727 62.22148834901989,135.35533905932738 54.64466094067263,127.77851165098011 48.42651938487274,119.1341716182545 43.80602337443566,109.75451610080641 40.960735979838475,100 40,90.24548389919359 40.960735979838475,80.86582838174552 43.80602337443566,72.2214883490199 48.42651938487273,64.64466094067262 54.64466094067262,60.13711795745844 60.13711795745844,129.86288204254154 129.86288204254154,135.35533905932738 125.35533905932738,141.57348061512727 117.77851165098011,146.19397662556432 109.13417161825453,149.0392640201615 99.75451610080644,150 90)),POLYGON((60.13711795745844 60.13711795745844,58.426519384872734 62.22148834901989,53.80602337443566 70.8658283817455,50.960735979838475 80.24548389919357,50 90,50.960735979838475 99.75451610080641,53.80602337443566 109.13417161825448,58.42651938487273 117.7785116509801,64.64466094067262 125.35533905932738,72.22148834901989 131.57348061512727,80.86582838174549 136.19397662556432,90.24548389919357 139.0392640201615,100 140,109.75451610080641 139.0392640201615,119.1341716182545 136.19397662556435,127.7785116509801 131.57348061512727,129.86288204254154 129.86288204254154,60.13711795745844 60.13711795745844)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2442, "question_en": "Create a circular buffer with a radius of 50 centered at POINT(100 90), then split this buffer with the straight line connecting points ST_Point(10, 10) and ST_Point(190, 190), and finally output the split result in WKT format."}
{"id": 451, "function": "ST_Split", "question": "将坐标为POINT(100 90)的点扩展为半径50的圆形缓冲区后，用起点ST_Point(10, 10)到终点ST_Point(190, 190)的线段进行切割，并返回切割结果的文本表示。", "sql": "SELECT ST_AsText( ST_Split( ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50), ST_MakeLine(ST_Point(10, 10),ST_Point(190, 190)) ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((150 90,149.0392640201615 80.24548389919359,146.19397662556435 70.86582838174552,141.57348061512727 62.22148834901989,135.35533905932738 54.64466094067263,127.77851165098011 48.42651938487274,119.1341716182545 43.80602337443566,109.75451610080641 40.960735979838475,100 40,90.24548389919359 40.960735979838475,80.86582838174552 43.80602337443566,72.2214883490199 48.42651938487273,64.64466094067262 54.64466094067262,60.13711795745844 60.13711795745844,129.86288204254154 129.86288204254154,135.35533905932738 125.35533905932738,141.57348061512727 117.77851165098011,146.19397662556432 109.13417161825453,149.0392640201615 99.75451610080644,150 90)),POLYGON((60.13711795745844 60.13711795745844,58.426519384872734 62.22148834901989,53.80602337443566 70.8658283817455,50.960735979838475 80.24548389919357,50 90,50.960735979838475 99.75451610080641,53.80602337443566 109.13417161825448,58.42651938487273 117.7785116509801,64.64466094067262 125.35533905932738,72.22148834901989 131.57348061512727,80.86582838174549 136.19397662556432,90.24548389919357 139.0392640201615,100 140,109.75451610080641 139.0392640201615,119.1341716182545 136.19397662556435,127.7785116509801 131.57348061512727,129.86288204254154 129.86288204254154,60.13711795745844 60.13711795745844)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2443, "question_en": "Expand the point with coordinates POINT(100 90) into a circular buffer with a radius of 50, then split it using the line segment from start point ST_Point(10, 10) to end point ST_Point(190, 190), and return the textual representation of the split result."}
{"id": 451, "function": "ST_Split", "question": "对XY坐标为(100,90)的点生成50单位半径的缓冲区，用从(10,10)到(190,190)的直线将其分割，最终输出分割后几何体的WKT文本。", "sql": "SELECT ST_AsText( ST_Split( ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50), ST_MakeLine(ST_Point(10, 10),ST_Point(190, 190)) ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((150 90,149.0392640201615 80.24548389919359,146.19397662556435 70.86582838174552,141.57348061512727 62.22148834901989,135.35533905932738 54.64466094067263,127.77851165098011 48.42651938487274,119.1341716182545 43.80602337443566,109.75451610080641 40.960735979838475,100 40,90.24548389919359 40.960735979838475,80.86582838174552 43.80602337443566,72.2214883490199 48.42651938487273,64.64466094067262 54.64466094067262,60.13711795745844 60.13711795745844,129.86288204254154 129.86288204254154,135.35533905932738 125.35533905932738,141.57348061512727 117.77851165098011,146.19397662556432 109.13417161825453,149.0392640201615 99.75451610080644,150 90)),POLYGON((60.13711795745844 60.13711795745844,58.426519384872734 62.22148834901989,53.80602337443566 70.8658283817455,50.960735979838475 80.24548389919357,50 90,50.960735979838475 99.75451610080641,53.80602337443566 109.13417161825448,58.42651938487273 117.7785116509801,64.64466094067262 125.35533905932738,72.22148834901989 131.57348061512727,80.86582838174549 136.19397662556432,90.24548389919357 139.0392640201615,100 140,109.75451610080641 139.0392640201615,119.1341716182545 136.19397662556435,127.7785116509801 131.57348061512727,129.86288204254154 129.86288204254154,60.13711795745844 60.13711795745844)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2444, "question_en": "Generate a 50-unit radius buffer around the point at XY coordinates (100,90), split it with a line from (10,10) to (190,190), and output the WKT text of the resulting geometries."}
{"id": 451, "function": "ST_Split", "question": "输出以POINT(100 90)为中心创建50单位半径的缓冲区后，被线段LINESTRING(10 10, 190 190)分割生成的几何集合的WKT字符串。", "sql": "SELECT ST_AsText( ST_Split( ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50), ST_MakeLine(ST_Point(10, 10),ST_Point(190, 190)) ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((150 90,149.0392640201615 80.24548389919359,146.19397662556435 70.86582838174552,141.57348061512727 62.22148834901989,135.35533905932738 54.64466094067263,127.77851165098011 48.42651938487274,119.1341716182545 43.80602337443566,109.75451610080641 40.960735979838475,100 40,90.24548389919359 40.960735979838475,80.86582838174552 43.80602337443566,72.2214883490199 48.42651938487273,64.64466094067262 54.64466094067262,60.13711795745844 60.13711795745844,129.86288204254154 129.86288204254154,135.35533905932738 125.35533905932738,141.57348061512727 117.77851165098011,146.19397662556432 109.13417161825453,149.0392640201615 99.75451610080644,150 90)),POLYGON((60.13711795745844 60.13711795745844,58.426519384872734 62.22148834901989,53.80602337443566 70.8658283817455,50.960735979838475 80.24548389919357,50 90,50.960735979838475 99.75451610080641,53.80602337443566 109.13417161825448,58.42651938487273 117.7785116509801,64.64466094067262 125.35533905932738,72.22148834901989 131.57348061512727,80.86582838174549 136.19397662556432,90.24548389919357 139.0392640201615,100 140,109.75451610080641 139.0392640201615,119.1341716182545 136.19397662556435,127.7785116509801 131.57348061512727,129.86288204254154 129.86288204254154,60.13711795745844 60.13711795745844)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2445, "question_en": "Output the WKT string of the geometry collection generated by splitting the 50-unit radius buffer centered at POINT(100 90) with the line segment LINESTRING(10 10, 190 190)."}
{"id": 451, "function": "ST_Split", "question": "将POINT(100 90)的50单位半径缓冲区分割为两部分的分割线是连接二维点ST_Point(10, 10)和ST_Point(190, 190)的直线，输出分割结果的WKT文本表示。", "sql": "SELECT ST_AsText( ST_Split( ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50), ST_MakeLine(ST_Point(10, 10),ST_Point(190, 190)) ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((150 90,149.0392640201615 80.24548389919359,146.19397662556435 70.86582838174552,141.57348061512727 62.22148834901989,135.35533905932738 54.64466094067263,127.77851165098011 48.42651938487274,119.1341716182545 43.80602337443566,109.75451610080641 40.960735979838475,100 40,90.24548389919359 40.960735979838475,80.86582838174552 43.80602337443566,72.2214883490199 48.42651938487273,64.64466094067262 54.64466094067262,60.13711795745844 60.13711795745844,129.86288204254154 129.86288204254154,135.35533905932738 125.35533905932738,141.57348061512727 117.77851165098011,146.19397662556432 109.13417161825453,149.0392640201615 99.75451610080644,150 90)),POLYGON((60.13711795745844 60.13711795745844,58.426519384872734 62.22148834901989,53.80602337443566 70.8658283817455,50.960735979838475 80.24548389919357,50 90,50.960735979838475 99.75451610080641,53.80602337443566 109.13417161825448,58.42651938487273 117.7785116509801,64.64466094067262 125.35533905932738,72.22148834901989 131.57348061512727,80.86582838174549 136.19397662556432,90.24548389919357 139.0392640201615,100 140,109.75451610080641 139.0392640201615,119.1341716182545 136.19397662556435,127.7785116509801 131.57348061512727,129.86288204254154 129.86288204254154,60.13711795745844 60.13711795745844)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2446, "question_en": "The dividing line that splits the 50-unit radius buffer of POINT(100 90) into two parts is the straight line connecting the 2D points ST_Point(10, 10) and ST_Point(190, 190). Output the WKT representation of the split results."}
{"id": 451, "function": "ST_Split", "question": "输出执行ST_Split函数用ST_MakeLine(ST_Point(10, 10), ST_Point(190, 190))生成的直线将ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)生成的圆形缓冲区进行分割后的几何结果的WKT格式字符串。", "sql": "SELECT ST_AsText( ST_Split( ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50), ST_MakeLine(ST_Point(10, 10),ST_Point(190, 190)) ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((150 90,149.0392640201615 80.24548389919359,146.19397662556435 70.86582838174552,141.57348061512727 62.22148834901989,135.35533905932738 54.64466094067263,127.77851165098011 48.42651938487274,119.1341716182545 43.80602337443566,109.75451610080641 40.960735979838475,100 40,90.24548389919359 40.960735979838475,80.86582838174552 43.80602337443566,72.2214883490199 48.42651938487273,64.64466094067262 54.64466094067262,60.13711795745844 60.13711795745844,129.86288204254154 129.86288204254154,135.35533905932738 125.35533905932738,141.57348061512727 117.77851165098011,146.19397662556432 109.13417161825453,149.0392640201615 99.75451610080644,150 90)),POLYGON((60.13711795745844 60.13711795745844,58.426519384872734 62.22148834901989,53.80602337443566 70.8658283817455,50.960735979838475 80.24548389919357,50 90,50.960735979838475 99.75451610080641,53.80602337443566 109.13417161825448,58.42651938487273 117.7785116509801,64.64466094067262 125.35533905932738,72.22148834901989 131.57348061512727,80.86582838174549 136.19397662556432,90.24548389919357 139.0392640201615,100 140,109.75451610080641 139.0392640201615,119.1341716182545 136.19397662556435,127.7785116509801 131.57348061512727,129.86288204254154 129.86288204254154,60.13711795745844 60.13711795745844)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2447, "question_en": "Output the WKT format string of the geometric result after splitting the circular buffer generated by ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50) with the line generated by ST_MakeLine(ST_Point(10, 10), ST_Point(190, 190)) using the ST_Split function."}
{"id": 452, "function": "ST_Split", "question": "用坐标为(30,30)的二维点分割由两条折线组成的MULTILINESTRING对象（第一条折线端点坐标为(10 10, 190 190)，第二条折线顶点坐标为(15 15, 30 30, 100 90)），并以WKT格式返回分割结果。", "sql": "SELECT ST_AsText(ST_Split( 'MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))', ST_Point(30,30))) AS split;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(10 10,30 30),LINESTRING(30 30,190 190),LINESTRING(15 15,30 30),LINESTRING(30 30,100 90))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2448, "question_en": "Split a MULTILINESTRING object composed of two linestrings (the first linestring has endpoints at (10 10, 190 190), and the second linestring has vertices at (15 15, 30 30, 100 90)) using a 2D point at (30, 30), and return the split result in WKT format."}
{"id": 452, "function": "ST_Split", "question": "如何用ST_Point(30,30)在MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))的几何对象上进行切割？要求输出WKT格式的切割结果。", "sql": "SELECT ST_AsText(ST_Split( 'MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))', ST_Point(30,30))) AS split;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(10 10,30 30),LINESTRING(30 30,190 190),LINESTRING(15 15,30 30),LINESTRING(30 30,100 90))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2449, "question_en": "How to split a MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90)) geometry using ST_Point(30,30)? The output should be in WKT format."}
{"id": 452, "function": "ST_Split", "question": "将包含两条折线（第一条折线从(10,10)到(190,190)，第二条折线经过(15,15)、(30,30)、(100,90)）的MULTILINESTRING对象，在坐标(30,30)处进行分割，并以文本形式输出分割后的几何图形。", "sql": "SELECT ST_AsText(ST_Split( 'MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))', ST_Point(30,30))) AS split;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(10 10,30 30),LINESTRING(30 30,190 190),LINESTRING(15 15,30 30),LINESTRING(30 30,100 90))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2450, "question_en": "Split the MULTILINESTRING object containing two polylines (the first from (10,10) to (190,190), the second passing through (15,15), (30,30), (100,90)) at the coordinate (30,30) and output the resulting geometries as text."}
{"id": 452, "function": "ST_Split", "question": "输出将MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))在二维点ST_Point(30,30)处分割后生成的WKT字符串格式的结果。", "sql": "SELECT ST_AsText(ST_Split( 'MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))', ST_Point(30,30))) AS split;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(10 10,30 30),LINESTRING(30 30,190 190),LINESTRING(15 15,30 30),LINESTRING(30 30,100 90))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2451, "question_en": "Output the WKT string format result of splitting the MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90)) at the 2D point ST_Point(30,30)."}
{"id": 452, "function": "ST_Split", "question": "以WKT文本格式返回用二维点ST_Point(30,30)切割MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))后的几何对象。", "sql": "SELECT ST_AsText(ST_Split( 'MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))', ST_Point(30,30))) AS split;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(10 10,30 30),LINESTRING(30 30,190 190),LINESTRING(15 15,30 30),LINESTRING(30 30,100 90))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2452, "question_en": "Return the geometry object resulting from splitting the MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90)) with the 2D point ST_Point(30,30) in WKT format."}
{"id": 452, "function": "ST_Split", "question": "将包含两条折线（(10 10, 190 190)和(15 15, 30 30, 100 90)）的MULTILINESTRING在XY坐标为(30,30)的点处分割，输出结果的WKT表示形式。", "sql": "SELECT ST_AsText(ST_Split( 'MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))', ST_Point(30,30))) AS split;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(10 10,30 30),LINESTRING(30 30,190 190),LINESTRING(15 15,30 30),LINESTRING(30 30,100 90))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2453, "question_en": "Split the MULTILINESTRING containing two polylines ((10 10, 190 190) and (15 15, 30 30, 100 90)) at the point with XY coordinates (30,30), and output the resulting WKT representation."}
{"id": 453, "function": "ST_Split", "question": "对于LINESTRING(0 0, 100 100)这条线段和POINT(51 50)这个点，先用1单位的容差将线段捕捉到点，然后在该点处分割线段，并以WKT格式输出结果；同时直接尝试在POINT(51 50)处分割LINESTRING(0 0, 100 100)而不进行捕捉，并以WKT格式输出结果。", "sql": "WITH data AS (SELECT 'LINESTRING(0 0, 100 100)'::geometry AS line, 'POINT(51 50)':: geometry AS point ) SELECT ST_AsText( ST_Split( ST_Snap(line, point, 1), point)) AS snapped_split, ST_AsText( ST_Split(line, point)) AS not_snapped_not_split FROM data;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,51 50),LINESTRING(51 50,100 100))", "GEOMETRYCOLLECTION(LINESTRING(0 0,100 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2454, "question_en": "For the line segment LINESTRING(0 0, 100 100) and the point POINT(51 50), first snap the line to the point with a 1-unit tolerance, then split the line at that point and output the result in WKT format; also, directly attempt to split LINESTRING(0 0, 100 100) at POINT(51 50) without snapping and output the result in WKT format."}
{"id": 453, "function": "ST_Split", "question": "给定LINESTRING(0 0, 100 100)和POINT(51 50)，当使用1单位的捕捉距离时，如何使用ST_Snap函数调整线段到点位置，然后使用ST_Split函数在该点分割线段？同时展示不进行捕捉直接分割的结果。", "sql": "WITH data AS (SELECT 'LINESTRING(0 0, 100 100)'::geometry AS line, 'POINT(51 50)':: geometry AS point ) SELECT ST_AsText( ST_Split( ST_Snap(line, point, 1), point)) AS snapped_split, ST_AsText( ST_Split(line, point)) AS not_snapped_not_split FROM data;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,51 50),LINESTRING(51 50,100 100))", "GEOMETRYCOLLECTION(LINESTRING(0 0,100 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2455, "question_en": "Given LINESTRING(0 0, 100 100) and POINT(51 50), how to use the ST_Snap function to adjust the line to the point location with a 1-unit snap distance, then use ST_Split function to split the line at that point? Also show the result of splitting without snapping."}
{"id": 453, "function": "ST_Split", "question": "比较两种分割LINESTRING(0 0, 100 100)的方法：第一种先用1单位容差的ST_Snap将线段捕捉到POINT(51 50)后再分割，第二种直接对LINESTRING(0 0, 100 100)在POINT(51 50)处分割，分别以WKT格式输出结果。", "sql": "WITH data AS (SELECT 'LINESTRING(0 0, 100 100)'::geometry AS line, 'POINT(51 50)':: geometry AS point ) SELECT ST_AsText( ST_Split( ST_Snap(line, point, 1), point)) AS snapped_split, ST_AsText( ST_Split(line, point)) AS not_snapped_not_split FROM data;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,51 50),LINESTRING(51 50,100 100))", "GEOMETRYCOLLECTION(LINESTRING(0 0,100 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2456, "question_en": "Compare two methods of splitting LINESTRING(0 0, 100 100): the first uses ST_Snap with a 1-unit tolerance to snap the line to POINT(51 50) before splitting, while the second splits LINESTRING(0 0, 100 100) directly at POINT(51 50), and outputs the results in WKT format for each."}
{"id": 453, "function": "ST_Split", "question": "输出LINESTRING(0 0, 100 100)在POINT(51 50)处经过ST_Snap(容差1)预处理后ST_Split分割的WKT结果，以及未经ST_Snap预处理直接ST_Split分割的WKT结果。", "sql": "WITH data AS (SELECT 'LINESTRING(0 0, 100 100)'::geometry AS line, 'POINT(51 50)':: geometry AS point ) SELECT ST_AsText( ST_Split( ST_Snap(line, point, 1), point)) AS snapped_split, ST_AsText( ST_Split(line, point)) AS not_snapped_not_split FROM data;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,51 50),LINESTRING(51 50,100 100))", "GEOMETRYCOLLECTION(LINESTRING(0 0,100 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2457, "question_en": "Output the WKT results of splitting LINESTRING(0 0, 100 100) at POINT(51 50) after ST_Snap preprocessing (tolerance 1) and without ST_Snap preprocessing directly using ST_Split."}
{"id": 453, "function": "ST_Split", "question": "以WKT格式返回两个结果：1)将LINESTRING(0 0, 100 100)按POINT(51 50)进行1单位距离捕捉后在该点分割的几何体，2)同一线串不经过捕捉直接按同一点分割的几何体。", "sql": "WITH data AS (SELECT 'LINESTRING(0 0, 100 100)'::geometry AS line, 'POINT(51 50)':: geometry AS point ) SELECT ST_AsText( ST_Split( ST_Snap(line, point, 1), point)) AS snapped_split, ST_AsText( ST_Split(line, point)) AS not_snapped_not_split FROM data;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,51 50),LINESTRING(51 50,100 100))", "GEOMETRYCOLLECTION(LINESTRING(0 0,100 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2458, "question_en": "Return two results in WKT format: 1) The geometry after snapping LINESTRING(0 0, 100 100) to POINT(51 50) with a 1-unit distance and splitting at that point, 2) The same linestring split directly at the same point without snapping."}
{"id": 453, "function": "ST_Split", "question": "分别输出ST_Snap(容差参数1)预处理后的LINESTRING(0 0, 100 100)在POINT(51 50)处分割的WKT表示，以及原始线串在同一点未预处理分割的WKT表示。", "sql": "WITH data AS (SELECT 'LINESTRING(0 0, 100 100)'::geometry AS line, 'POINT(51 50)':: geometry AS point ) SELECT ST_AsText( ST_Split( ST_Snap(line, point, 1), point)) AS snapped_split, ST_AsText( ST_Split(line, point)) AS not_snapped_not_split FROM data;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,51 50),LINESTRING(51 50,100 100))", "GEOMETRYCOLLECTION(LINESTRING(0 0,100 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2459, "question_en": "Output the WKT representations of the LINESTRING(0 0, 100 100) split at POINT(51 50) after ST_Snap preprocessing (tolerance parameter 1) and the original linestring split at the same point without preprocessing."}
{"id": 455, "function": "ST_Subdivide", "question": "输出将POLYGON((132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150, 57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122, 190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10))按最大顶点数10进行细分后，每个子多边形的WKT字符串及其行号。", "sql": "SELECT row_number() OVER() AS rn, ST_AsText(geom) AS wkt FROM (SELECT ST_SubDivide( 'POLYGON((132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150, 57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122, 190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10))'::geometry,10)) AS f(geom);", "execution_result": [[1, "POLYGON((85 35,68 29,66 28,32 56,22 64,29.82608695652174 100,119 100,119 23,85 35))"], [2, "POLYGON((186 52,178 34,168 18,147 13,132 10,119 23,119 56,186 56,186 52))"], [3, "POLYGON((185 79,186 56,119 56,119 100,190 100,185 79))"], [4, "POLYGON((40 119,36 150,57 158,75 171,92 182,114 184,114 100,29.82608695652174 100,32 110,40 119))"], [5, "POLYGON((132 186,146 178,176 184,179 162,184 141,190 122,190 100,114 100,114 184,132 186))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2460, "question_en": "Output the WKT string and row number of each sub-polygon after subdividing POLYGON((132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150, 57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122, 190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10)) with a maximum vertex count of 10."}
{"id": 455, "function": "ST_Subdivide", "question": "输出POLYGON((132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150, 57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122, 190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10))被ST_SubDivide函数以最大顶点数10分割后，所有子多边形的行号(rn)和WKT格式(wkt)的列表。", "sql": "SELECT row_number() OVER() AS rn, ST_AsText(geom) AS wkt FROM (SELECT ST_SubDivide( 'POLYGON((132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150, 57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122, 190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10))'::geometry,10)) AS f(geom);", "execution_result": [[1, "POLYGON((85 35,68 29,66 28,32 56,22 64,29.82608695652174 100,119 100,119 23,85 35))"], [2, "POLYGON((186 52,178 34,168 18,147 13,132 10,119 23,119 56,186 56,186 52))"], [3, "POLYGON((185 79,186 56,119 56,119 100,190 100,185 79))"], [4, "POLYGON((40 119,36 150,57 158,75 171,92 182,114 184,114 100,29.82608695652174 100,32 110,40 119))"], [5, "POLYGON((132 186,146 178,176 184,179 162,184 141,190 122,190 100,114 100,114 184,132 186))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2461, "question_en": "Output the list of row numbers (rn) and WKT formats (wkt) for all sub-polygons after dividing the POLYGON((132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150,57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122,190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10)) using the ST_SubDivide function with a maximum vertex count of 10."}
{"id": 455, "function": "ST_Subdivide", "question": "输出将顶点为(132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150, 57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122, 190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10)的多边形按最大顶点数10细分后，每个子多边形的序号和WKT文本表示。", "sql": "SELECT row_number() OVER() AS rn, ST_AsText(geom) AS wkt FROM (SELECT ST_SubDivide( 'POLYGON((132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150, 57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122, 190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10))'::geometry,10)) AS f(geom);", "execution_result": [[1, "POLYGON((85 35,68 29,66 28,32 56,22 64,29.82608695652174 100,119 100,119 23,85 35))"], [2, "POLYGON((186 52,178 34,168 18,147 13,132 10,119 23,119 56,186 56,186 52))"], [3, "POLYGON((185 79,186 56,119 56,119 100,190 100,185 79))"], [4, "POLYGON((40 119,36 150,57 158,75 171,92 182,114 184,114 100,29.82608695652174 100,32 110,40 119))"], [5, "POLYGON((132 186,146 178,176 184,179 162,184 141,190 122,190 100,114 100,114 184,132 186))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2462, "question_en": "Output the serial number and WKT representation of each sub-polygon after subdividing the polygon with vertices (132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150,57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122,190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10) into parts with a maximum of 10 vertices each."}
{"id": 456, "function": "ST_Subdivide", "question": "将地理类型LINESTRING(0 0, 85 85)按最大1200000米间距进行线段分割后转换为几何类型，再将其细分为最多8个顶点组成的子线段，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_Subdivide( ST_Segmentize('LINESTRING(0 0, 85 85)'::geography, 1200000)::geometry, 8));", "execution_result": [["LINESTRING(0 0,0.487578359029357 5.576590567461958,0.984542144675897 11.152772115509297,1.501010596397223 16.728103548357065,1.945321136303313 21.25)"], ["LINESTRING(1.945321136303313 21.25,2.048695380627787 22.30207413873394,2.642046419676733 27.874053354515492,3.299940624127865 33.44321680294103,4.048367194897422 39.008428252023904,4.598904684206937 42.5)"], ["LINESTRING(4.598904684206937 42.5,4.924985039227316 44.56803892063212,5.987374093906392 50.11952292447013,7.329091976767396 55.65876468790251,8.796387499384128 60.19695059949241)"], ["LINESTRING(8.796387499384128 60.19695059949241,9.113755795337793 61.17853631776249,11.65581666913683 66.66485041602019,15.642041247655008 72.08676906017453,22.871662720021188 77.36096281168942,24.699178513155204 77.89390119898482)"], ["LINESTRING(24.699178513155204 77.89390119898482,39.40460966227439 82.18228480176364,44.79945234210347 82.51567662270111)"], ["LINESTRING(44.79945234210347 82.51567662270111,85 85)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2463, "question_en": "Split the geographic type LINESTRING(0 0, 85 85) into segments with a maximum spacing of 1,200,000 meters, convert it to a geometry type, then subdivide it into sub-linestrings with a maximum of 8 vertices each, and output the result in WKT format."}
{"id": 456, "function": "ST_Subdivide", "question": "对起点坐标(0 0)到终点坐标(85 85)的地理线串执行1200000米最大分段操作后，将其转换为几何类型并进行最大8个顶点细分，最终输出WKT文本表示。", "sql": "SELECT ST_AsText( ST_Subdivide( ST_Segmentize('LINESTRING(0 0, 85 85)'::geography, 1200000)::geometry, 8));", "execution_result": [["LINESTRING(0 0,0.487578359029357 5.576590567461958,0.984542144675897 11.152772115509297,1.501010596397223 16.728103548357065,1.945321136303313 21.25)"], ["LINESTRING(1.945321136303313 21.25,2.048695380627787 22.30207413873394,2.642046419676733 27.874053354515492,3.299940624127865 33.44321680294103,4.048367194897422 39.008428252023904,4.598904684206937 42.5)"], ["LINESTRING(4.598904684206937 42.5,4.924985039227316 44.56803892063212,5.987374093906392 50.11952292447013,7.329091976767396 55.65876468790251,8.796387499384128 60.19695059949241)"], ["LINESTRING(8.796387499384128 60.19695059949241,9.113755795337793 61.17853631776249,11.65581666913683 66.66485041602019,15.642041247655008 72.08676906017453,22.871662720021188 77.36096281168942,24.699178513155204 77.89390119898482)"], ["LINESTRING(24.699178513155204 77.89390119898482,39.40460966227439 82.18228480176364,44.79945234210347 82.51567662270111)"], ["LINESTRING(44.79945234210347 82.51567662270111,85 85)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2464, "question_en": "Perform a maximum segmentation operation of 1,200,000 meters on the geographic linestring from start point (0 0) to end point (85 85), convert it to geometry type, subdivide it into a maximum of 8 vertices, and output the final WKT representation."}
{"id": 456, "function": "ST_Subdivide", "question": "处理LINESTRING(0 0, 85 85)地理线串时，先用ST_Segmentize函数确保相邻顶点间距不超过1200000米，再通过ST_Subdivide函数生成最多包含8个顶点的子线段集合，最后用ST_AsText输出WKT格式。", "sql": "SELECT ST_AsText( ST_Subdivide( ST_Segmentize('LINESTRING(0 0, 85 85)'::geography, 1200000)::geometry, 8));", "execution_result": [["LINESTRING(0 0,0.487578359029357 5.576590567461958,0.984542144675897 11.152772115509297,1.501010596397223 16.728103548357065,1.945321136303313 21.25)"], ["LINESTRING(1.945321136303313 21.25,2.048695380627787 22.30207413873394,2.642046419676733 27.874053354515492,3.299940624127865 33.44321680294103,4.048367194897422 39.008428252023904,4.598904684206937 42.5)"], ["LINESTRING(4.598904684206937 42.5,4.924985039227316 44.56803892063212,5.987374093906392 50.11952292447013,7.329091976767396 55.65876468790251,8.796387499384128 60.19695059949241)"], ["LINESTRING(8.796387499384128 60.19695059949241,9.113755795337793 61.17853631776249,11.65581666913683 66.66485041602019,15.642041247655008 72.08676906017453,22.871662720021188 77.36096281168942,24.699178513155204 77.89390119898482)"], ["LINESTRING(24.699178513155204 77.89390119898482,39.40460966227439 82.18228480176364,44.79945234210347 82.51567662270111)"], ["LINESTRING(44.79945234210347 82.51567662270111,85 85)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2465, "question_en": "When processing the geographic linestring LINESTRING(0 0, 85 85), first use the ST_Segmentize function to ensure the distance between adjacent vertices does not exceed 1,200,000 meters, then generate a collection of sub-linestrings with a maximum of 8 vertices using ST_Subdivide, and finally output the WKT format with ST_AsText."}
{"id": 456, "function": "ST_Subdivide", "question": "输出将LINESTRING(0 0, 85 85)地理对象按1200000米间距分段后，再分割为最多8个顶点的子几何体的WKT字符串结果。", "sql": "SELECT ST_AsText( ST_Subdivide( ST_Segmentize('LINESTRING(0 0, 85 85)'::geography, 1200000)::geometry, 8));", "execution_result": [["LINESTRING(0 0,0.487578359029357 5.576590567461958,0.984542144675897 11.152772115509297,1.501010596397223 16.728103548357065,1.945321136303313 21.25)"], ["LINESTRING(1.945321136303313 21.25,2.048695380627787 22.30207413873394,2.642046419676733 27.874053354515492,3.299940624127865 33.44321680294103,4.048367194897422 39.008428252023904,4.598904684206937 42.5)"], ["LINESTRING(4.598904684206937 42.5,4.924985039227316 44.56803892063212,5.987374093906392 50.11952292447013,7.329091976767396 55.65876468790251,8.796387499384128 60.19695059949241)"], ["LINESTRING(8.796387499384128 60.19695059949241,9.113755795337793 61.17853631776249,11.65581666913683 66.66485041602019,15.642041247655008 72.08676906017453,22.871662720021188 77.36096281168942,24.699178513155204 77.89390119898482)"], ["LINESTRING(24.699178513155204 77.89390119898482,39.40460966227439 82.18228480176364,44.79945234210347 82.51567662270111)"], ["LINESTRING(44.79945234210347 82.51567662270111,85 85)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2466, "question_en": "Output the WKT string results of splitting the geographic object LINESTRING(0 0, 85 85) into segments at 1,200,000-meter intervals, then further dividing them into sub-geometries with a maximum of 8 vertices."}
{"id": 456, "function": "ST_Subdivide", "question": "以WKT格式返回对LINESTRING(0 0, 85 85)执行1200000米分段和8顶点限制细分后的复合几何体的文本表示。", "sql": "SELECT ST_AsText( ST_Subdivide( ST_Segmentize('LINESTRING(0 0, 85 85)'::geography, 1200000)::geometry, 8));", "execution_result": [["LINESTRING(0 0,0.487578359029357 5.576590567461958,0.984542144675897 11.152772115509297,1.501010596397223 16.728103548357065,1.945321136303313 21.25)"], ["LINESTRING(1.945321136303313 21.25,2.048695380627787 22.30207413873394,2.642046419676733 27.874053354515492,3.299940624127865 33.44321680294103,4.048367194897422 39.008428252023904,4.598904684206937 42.5)"], ["LINESTRING(4.598904684206937 42.5,4.924985039227316 44.56803892063212,5.987374093906392 50.11952292447013,7.329091976767396 55.65876468790251,8.796387499384128 60.19695059949241)"], ["LINESTRING(8.796387499384128 60.19695059949241,9.113755795337793 61.17853631776249,11.65581666913683 66.66485041602019,15.642041247655008 72.08676906017453,22.871662720021188 77.36096281168942,24.699178513155204 77.89390119898482)"], ["LINESTRING(24.699178513155204 77.89390119898482,39.40460966227439 82.18228480176364,44.79945234210347 82.51567662270111)"], ["LINESTRING(44.79945234210347 82.51567662270111,85 85)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2467, "question_en": "Return the text representation of the composite geometry resulting from segmenting LINESTRING(0 0, 85 85) with a 1,200,000-meter segmentation and 8-vertex limit in WKT format."}
{"id": 456, "function": "ST_Subdivide", "question": "将LINESTRING(0 0, 85 85)转换为几何类型后，先进行1200000米最大间距的线段分割，再进行最大8个顶点的子划分，最终输出结果的WKT文本。", "sql": "SELECT ST_AsText( ST_Subdivide( ST_Segmentize('LINESTRING(0 0, 85 85)'::geography, 1200000)::geometry, 8));", "execution_result": [["LINESTRING(0 0,0.487578359029357 5.576590567461958,0.984542144675897 11.152772115509297,1.501010596397223 16.728103548357065,1.945321136303313 21.25)"], ["LINESTRING(1.945321136303313 21.25,2.048695380627787 22.30207413873394,2.642046419676733 27.874053354515492,3.299940624127865 33.44321680294103,4.048367194897422 39.008428252023904,4.598904684206937 42.5)"], ["LINESTRING(4.598904684206937 42.5,4.924985039227316 44.56803892063212,5.987374093906392 50.11952292447013,7.329091976767396 55.65876468790251,8.796387499384128 60.19695059949241)"], ["LINESTRING(8.796387499384128 60.19695059949241,9.113755795337793 61.17853631776249,11.65581666913683 66.66485041602019,15.642041247655008 72.08676906017453,22.871662720021188 77.36096281168942,24.699178513155204 77.89390119898482)"], ["LINESTRING(24.699178513155204 77.89390119898482,39.40460966227439 82.18228480176364,44.79945234210347 82.51567662270111)"], ["LINESTRING(44.79945234210347 82.51567662270111,85 85)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2468, "question_en": "Convert the LINESTRING(0 0, 85 85) to a geometry type, first split it into segments with a maximum spacing of 1,200,000 meters, then subdivide into segments with a maximum of 8 vertices, and finally output the WKT text of the result."}
{"id": 458, "function": "ST_SymDifference", "question": "计算LINESTRING(50 100, 50 200)和LINESTRING(50 50, 50 150)这两条线段的对称差集，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_SymDifference( ST_GeomFromText('LINESTRING(50 100, 50 200)'), ST_GeomFromText('LINESTRING(50 50, 50 150)') ) );", "execution_result": [["MULTILINESTRING((50 150,50 200),(50 50,50 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2469, "question_en": "Calculate the symmetric difference between the linestrings LINESTRING(50 100, 50 200) and LINESTRING(50 50, 50 150), and output the result in WKT format."}
{"id": 458, "function": "ST_SymDifference", "question": "将垂直线段LINESTRING(50 100, 50 200)与垂直线段LINESTRING(50 50, 50 150)进行对称差集运算，输出WKT格式的几何结果。", "sql": "SELECT ST_AsText( ST_SymDifference( ST_GeomFromText('LINESTRING(50 100, 50 200)'), ST_GeomFromText('LINESTRING(50 50, 50 150)') ) );", "execution_result": [["MULTILINESTRING((50 150,50 200),(50 50,50 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2470, "question_en": "Perform a symmetric difference operation on the vertical linestrings LINESTRING(50 100, 50 200) and LINESTRING(50 50, 50 150), and output the geometric result in WKT format."}
{"id": 458, "function": "ST_SymDifference", "question": "对X坐标为50的两条垂直线段LINESTRING(50 100, 50 200)和LINESTRING(50 50, 50 150)执行对称差集操作，返回WKT文本表示的结果。", "sql": "SELECT ST_AsText( ST_SymDifference( ST_GeomFromText('LINESTRING(50 100, 50 200)'), ST_GeomFromText('LINESTRING(50 50, 50 150)') ) );", "execution_result": [["MULTILINESTRING((50 150,50 200),(50 50,50 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2471, "question_en": "Perform a symmetric difference operation on two vertical line segments LINESTRING(50 100, 50 200) and LINESTRING(50 50, 50 150) with X-coordinate 50, and return the result as WKT text."}
{"id": 458, "function": "ST_SymDifference", "question": "输出LINESTRING(50 100, 50 200)和LINESTRING(50 50, 50 150)的对称差集结果的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_SymDifference( ST_GeomFromText('LINESTRING(50 100, 50 200)'), ST_GeomFromText('LINESTRING(50 50, 50 150)') ) );", "execution_result": [["MULTILINESTRING((50 150,50 200),(50 50,50 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2472, "question_en": "Output the WKT string representation of the symmetric difference between LINESTRING(50 100, 50 200) and LINESTRING(50 50, 50 150)."}
{"id": 458, "function": "ST_SymDifference", "question": "计算垂直线段LINESTRING(50 100, 50 200)与垂直线段LINESTRING(50 50, 50 150)的对称差集，并以WKT格式输出结果几何对象。", "sql": "SELECT ST_AsText( ST_SymDifference( ST_GeomFromText('LINESTRING(50 100, 50 200)'), ST_GeomFromText('LINESTRING(50 50, 50 150)') ) );", "execution_result": [["MULTILINESTRING((50 150,50 200),(50 50,50 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2473, "question_en": "Calculate the symmetric difference between the vertical linestrings LINESTRING(50 100, 50 200) and LINESTRING(50 50, 50 150), and output the resulting geometry object in WKT format."}
{"id": 458, "function": "ST_SymDifference", "question": "将X坐标为50的垂直线段LINESTRING(50 100, 50 200)与X坐标为50的垂直线段LINESTRING(50 50, 50 150)进行对称差集运算，返回结果的WKT文本表示。", "sql": "SELECT ST_AsText( ST_SymDifference( ST_GeomFromText('LINESTRING(50 100, 50 200)'), ST_GeomFromText('LINESTRING(50 50, 50 150)') ) );", "execution_result": [["MULTILINESTRING((50 150,50 200),(50 50,50 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2474, "question_en": "Perform a symmetric difference operation on the vertical line segments LINESTRING(50 100, 50 200) and LINESTRING(50 50, 50 150) with X-coordinate 50, and return the WKT representation of the result."}
{"id": 459, "function": "ST_SymDifference", "question": "计算三维线段LINESTRING(1 2 1, 1 4 2)和三维线段LINESTRING(1 1 3, 1 3 4)的对称差集，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_SymDifference(ST_GeomFromEWKT('LINESTRING(1 2 1, 1 4 2)'), ST_GeomFromEWKT('LINESTRING(1 1 3, 1 3 4)')));", "execution_result": [["MULTILINESTRING((1 3 4,1 4 2),(1 1 3,1 2 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2475, "question_en": "Calculate the symmetric difference between the 3D linestrings LINESTRING(1 2 1, 1 4 2) and LINESTRING(1 1 3, 1 3 4), and output the result in EWKT format."}
{"id": 459, "function": "ST_SymDifference", "question": "对具有Z坐标的三维线段LINESTRING(1 2 1, 1 4 2)和三维线段LINESTRING(1 1 3, 1 3 4)执行对称差集操作，返回EWKT格式的几何对象。", "sql": "SELECT ST_AsEWKT(ST_SymDifference(ST_GeomFromEWKT('LINESTRING(1 2 1, 1 4 2)'), ST_GeomFromEWKT('LINESTRING(1 1 3, 1 3 4)')));", "execution_result": [["MULTILINESTRING((1 3 4,1 4 2),(1 1 3,1 2 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2476, "question_en": "Perform a symmetric difference operation on the 3D linestrings LINESTRING(1 2 1, 1 4 2) and LINESTRING(1 1 3, 1 3 4), returning the resulting geometry in EWKT format."}
{"id": 459, "function": "ST_SymDifference", "question": "将三维线段LINESTRING(1 2 1, 1 4 2)与三维线段LINESTRING(1 1 3, 1 3 4)进行对称差集运算，并以扩展WKT(EWKT)格式输出结果几何体。", "sql": "SELECT ST_AsEWKT(ST_SymDifference(ST_GeomFromEWKT('LINESTRING(1 2 1, 1 4 2)'), ST_GeomFromEWKT('LINESTRING(1 1 3, 1 3 4)')));", "execution_result": [["MULTILINESTRING((1 3 4,1 4 2),(1 1 3,1 2 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2477, "question_en": "Perform a symmetric difference operation between the 3D linestrings LINESTRING(1 2 1, 1 4 2) and LINESTRING(1 1 3, 1 3 4), and output the resulting geometry in Extended WKT (EWKT) format."}
{"id": 459, "function": "ST_SymDifference", "question": "输出三维线对象LINESTRING(1 2 1, 1 4 2)与三维线对象LINESTRING(1 1 3, 1 3 4)的对称差集几何体，并以EWKT格式字符串返回结果。", "sql": "SELECT ST_AsEWKT(ST_SymDifference(ST_GeomFromEWKT('LINESTRING(1 2 1, 1 4 2)'), ST_GeomFromEWKT('LINESTRING(1 1 3, 1 3 4)')));", "execution_result": [["MULTILINESTRING((1 3 4,1 4 2),(1 1 3,1 2 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2478, "question_en": "Output the symmetric difference geometry between the 3D linestring LINESTRING(1 2 1, 1 4 2) and the 3D linestring LINESTRING(1 1 3, 1 3 4), and return the result as an EWKT format string."}
{"id": 459, "function": "ST_SymDifference", "question": "将Z坐标为1到2的三维线LINESTRING(1 2 1, 1 4 2)与Z坐标为3到4的三维线LINESTRING(1 1 3, 1 3 4)进行对称差运算后，返回包含SRID信息的EWKT格式输出。", "sql": "SELECT ST_AsEWKT(ST_SymDifference(ST_GeomFromEWKT('LINESTRING(1 2 1, 1 4 2)'), ST_GeomFromEWKT('LINESTRING(1 1 3, 1 3 4)')));", "execution_result": [["MULTILINESTRING((1 3 4,1 4 2),(1 1 3,1 2 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2479, "question_en": "Perform a symmetric difference operation between the 3D linestring LINESTRING(1 2 1, 1 4 2) with Z-coordinates from 1 to 2 and the 3D linestring LINESTRING(1 1 3, 1 3 4) with Z-coordinates from 3 to 4, then return the result in EWKT format including SRID information."}
{"id": 459, "function": "ST_SymDifference", "question": "计算两个三维线对象的对称差集：第一个线对象从点(1 2 1)延伸到(1 4 2)，第二个线对象从点(1 1 3)延伸到(1 3 4)，最终结果以EWKT字符串形式输出。", "sql": "SELECT ST_AsEWKT(ST_SymDifference(ST_GeomFromEWKT('LINESTRING(1 2 1, 1 4 2)'), ST_GeomFromEWKT('LINESTRING(1 1 3, 1 3 4)')));", "execution_result": [["MULTILINESTRING((1 3 4,1 4 2),(1 1 3,1 2 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2480, "question_en": "Compute the symmetric difference between two 3D line objects: the first line extends from point (1 2 1) to (1 4 2), and the second line extends from point (1 1 3) to (1 3 4), output the final result as an EWKT string."}
{"id": 460, "function": "ST_Union", "question": "将LINESTRING(1 2, 3 4)和LINESTRING(3 4, 4 5)这两条折线通过ST_Union函数合并，并以WKT格式输出合并后的几何对象。", "sql": "SELECT ST_AsText(ST_Union(ARRAY[ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)')])) AS wktunion;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2481, "question_en": "Merge the two linestrings LINESTRING(1 2, 3 4) and LINESTRING(3 4, 4 5) using the ST_Union function and output the merged geometry object in WKT format."}
{"id": 460, "function": "ST_Union", "question": "使用PostGIS的ST_Union函数对LINESTRING(1 2, 3 4)和LINESTRING(3 4, 4 5)这两条折线进行空间合并操作，并将结果转换为WKT文本格式输出。", "sql": "SELECT ST_AsText(ST_Union(ARRAY[ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)')])) AS wktunion;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2482, "question_en": "Use the PostGIS ST_Union function to spatially merge the two linestrings LINESTRING(1 2, 3 4) and LINESTRING(3 4, 4 5), and output the result in WKT text format."}
{"id": 460, "function": "ST_Union", "question": "在PostGIS中，如何将起点为(1,2)终点为(3,4)的折线和起点为(3,4)终点为(4,5)的折线合并为一个几何对象，并以WKT格式输出合并结果？", "sql": "SELECT ST_AsText(ST_Union(ARRAY[ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)')])) AS wktunion;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2483, "question_en": "In PostGIS, how to merge a polyline from point (1,2) to (3,4) and a polyline from point (3,4) to (4,5) into a single geometry object and output the merged result in WKT format?"}
{"id": 461, "function": "ST_Union", "question": "将三维多边形POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))、三维点POINT(5 5 5)、三维点POINT(-2 3 1)和三维线LINESTRING(5 5 5, 10 10 10)合并为一个几何对象，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Union(geom)) FROM ( SELECT 'POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))'::geometry geom UNION ALL SELECT 'POINT(5 5 5)'::geometry geom UNION ALL SELECT 'POINT(-2 3 1)'::geometry geom UNION ALL SELECT 'LINESTRING(5 5 5, 10 10 10)'::geometry geom ) AS foo;", "execution_result": [["GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,-7 4.2 2)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2484, "question_en": "Combine the 3D polygon POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2)), 3D point POINT(5 5 5), 3D point POINT(-2 3 1), and 3D line LINESTRING(5 5 5, 10 10 10) into a single geometry object and output the result in EWKT format."}
{"id": 461, "function": "ST_Union", "question": "如何用PostGIS将包含Z坐标的三维多边形POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))、两个三维点POINT(5 5 5)和POINT(-2 3 1)，以及三维线段LINESTRING(5 5 5, 10 10 10)合并为一个几何对象，并以EWKT格式返回？", "sql": "SELECT ST_AsEWKT(ST_Union(geom)) FROM ( SELECT 'POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))'::geometry geom UNION ALL SELECT 'POINT(5 5 5)'::geometry geom UNION ALL SELECT 'POINT(-2 3 1)'::geometry geom UNION ALL SELECT 'LINESTRING(5 5 5, 10 10 10)'::geometry geom ) AS foo;", "execution_result": [["GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,-7 4.2 2)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2485, "question_en": "How to use PostGIS to combine a 3D polygon POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2)), two 3D points POINT(5 5 5) and POINT(-2 3 1), and a 3D linestring LINESTRING(5 5 5, 10 10 10) into a single geometry object and return it in EWKT format?"}
{"id": 461, "function": "ST_Union", "question": "在PostGIS中执行空间合并操作，输入几何对象包括：带Z值的闭合多边形POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))，两个带Z值的点POINT(5 5 5)和POINT(-2 3 1)，以及带Z值的线段LINESTRING(5 5 5, 10 10 10)，最终以EWKT格式输出合并结果。", "sql": "SELECT ST_AsEWKT(ST_Union(geom)) FROM ( SELECT 'POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))'::geometry geom UNION ALL SELECT 'POINT(5 5 5)'::geometry geom UNION ALL SELECT 'POINT(-2 3 1)'::geometry geom UNION ALL SELECT 'LINESTRING(5 5 5, 10 10 10)'::geometry geom ) AS foo;", "execution_result": [["GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,-7 4.2 2)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2486, "question_en": "Perform a spatial union operation in PostGIS with input geometries including: a closed polygon with Z values POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2)), two points with Z values POINT(5 5 5) and POINT(-2 3 1), and a linestring with Z values LINESTRING(5 5 5, 10 10 10), then output the merged result in EWKT format."}
{"id": 461, "function": "ST_Union", "question": "输出将三维多边形POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))、三维点POINT(5 5 5)、三维点POINT(-2 3 1)和三维线LINESTRING(5 5 5, 10 10 10)进行空间合并后生成的结果的EWKT格式字符串表示。", "sql": "SELECT ST_AsEWKT(ST_Union(geom)) FROM ( SELECT 'POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))'::geometry geom UNION ALL SELECT 'POINT(5 5 5)'::geometry geom UNION ALL SELECT 'POINT(-2 3 1)'::geometry geom UNION ALL SELECT 'LINESTRING(5 5 5, 10 10 10)'::geometry geom ) AS foo;", "execution_result": [["GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,-7 4.2 2)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2487, "question_en": "Output the EWKT format string representation of the spatial union result of the 3D polygon POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2)), 3D point POINT(5 5 5), 3D point POINT(-2 3 1), and 3D line LINESTRING(5 5 5, 10 10 10)."}
{"id": 461, "function": "ST_Union", "question": "将包含Z坐标的三维几何对象（多边形POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))、点POINT(5 5 5)、点POINT(-2 3 1)和线LINESTRING(5 5 5, 10 10 10)）进行空间联合运算后，返回EWKT格式的结果字符串。", "sql": "SELECT ST_AsEWKT(ST_Union(geom)) FROM ( SELECT 'POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))'::geometry geom UNION ALL SELECT 'POINT(5 5 5)'::geometry geom UNION ALL SELECT 'POINT(-2 3 1)'::geometry geom UNION ALL SELECT 'LINESTRING(5 5 5, 10 10 10)'::geometry geom ) AS foo;", "execution_result": [["GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,-7 4.2 2)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2488, "question_en": "Perform a spatial union operation on the 3D geometries (polygon POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2)), point POINT(5 5 5), point POINT(-2 3 1), and linestring LINESTRING(5 5 5, 10 10 10)), then return the result string in EWKT format."}
{"id": 461, "function": "ST_Union", "question": "输出ST_Union函数对四个三维几何对象（多边形POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))、点POINT(5 5 5)、点POINT(-2 3 1)和线LINESTRING(5 5 5, 10 10 10)）执行空间合并操作后，通过ST_AsEWKT转换为的扩展WKT字符串。", "sql": "SELECT ST_AsEWKT(ST_Union(geom)) FROM ( SELECT 'POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))'::geometry geom UNION ALL SELECT 'POINT(5 5 5)'::geometry geom UNION ALL SELECT 'POINT(-2 3 1)'::geometry geom UNION ALL SELECT 'LINESTRING(5 5 5, 10 10 10)'::geometry geom ) AS foo;", "execution_result": [["GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,-7 4.2 2)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2489, "question_en": "Output the extended WKT string converted by ST_AsEWKT after performing a spatial union operation with ST_Union on four 3D geometries: polygon POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2)), point POINT(5 5 5), point POINT(-2 3 1), and line LINESTRING(5 5 5, 10 10 10)."}
{"id": 464, "function": "ST_Union", "question": "将二维点POINT(1 2)和二维点POINT(-2 3)进行几何合并操作，并以WKT文本格式输出结果。", "sql": "SELECT ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(-2 3)' :: geometry));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2490, "question_en": "Merge the 2D points POINT(1 2) and POINT(-2 3) into a single geometry and output the result in WKT format."}
{"id": 464, "function": "ST_Union", "question": "使用ST_Union函数合并坐标为(1,2)的点和坐标为(-2,3)的点，并通过ST_AsText函数将结果转换为WKT格式文本。", "sql": "SELECT ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(-2 3)' :: geometry));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2491, "question_en": "Use the ST_Union function to merge the point at coordinates (1,2) and the point at coordinates (-2,3), and convert the result to WKT format text using the ST_AsText function."}
{"id": 464, "function": "ST_Union", "question": "对XY坐标分别为1,2和-2,3的两个二维点执行空间联合操作，并以Well-Known Text格式返回联合后的几何对象。", "sql": "SELECT ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(-2 3)' :: geometry));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2492, "question_en": "Perform a spatial union operation on the two 2D points with XY coordinates (1,2) and (-2,3), and return the resulting geometry in Well-Known Text format."}
{"id": 464, "function": "ST_Union", "question": "输出将二维点POINT(1 2)和二维点POINT(-2 3)进行空间合并操作后生成的WKT格式字符串格式结果。", "sql": "SELECT ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(-2 3)' :: geometry));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2493, "question_en": "Output the WKT format string result of performing a spatial union operation on the 2D points POINT(1 2) and POINT(-2 3)."}
{"id": 464, "function": "ST_Union", "question": "以WKT文本形式返回二维点POINT(1 2)与二维点POINT(-2 3)通过ST_Union函数合并后的几何结果。", "sql": "SELECT ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(-2 3)' :: geometry));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2494, "question_en": "Return the geometric result of merging the 2D point POINT(1 2) with the 2D point POINT(-2 3) using the ST_Union function in WKT format."}
{"id": 464, "function": "ST_Union", "question": "将二维几何对象POINT(1 2)和POINT(-2 3)执行空间联合运算后，输出结果的Well-Known Text表示形式。", "sql": "SELECT ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(-2 3)' :: geometry));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2495, "question_en": "Perform a spatial union operation on the 2D geometric objects POINT(1 2) and POINT(-2 3), then output the Well-Known Text representation of the result."}
{"id": 465, "function": "ST_Union", "question": "将POINT(1 2)和POINT(1 2)这两个相同的二维点进行空间合并操作，并以WKT格式输出结果。", "sql": "select ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(1 2)' :: geometry));", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2496, "question_en": "Merge the two identical 2D points POINT(1 2) and POINT(1 2) spatially and output the result in WKT format."}
{"id": 465, "function": "ST_Union", "question": "对坐标完全相同的两个二维点POINT(1 2)和POINT(1 2)执行ST_Union空间联合操作，返回WKT文本表示的结果。", "sql": "select ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(1 2)' :: geometry));", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2497, "question_en": "Perform a ST_Union spatial union operation on two identical 2D points POINT(1 2) and POINT(1 2), and return the result in WKT text representation."}
{"id": 465, "function": "ST_Union", "question": "使用ST_Union函数合并两个XY坐标均为(1,2)的二维点几何对象'POINT(1 2)'和'POINT(1 2)'，并通过ST_AsText输出合并后的WKT格式。", "sql": "select ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(1 2)' :: geometry));", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2498, "question_en": "Use the ST_Union function to merge two 2D point geometries 'POINT(1 2)' and 'POINT(1 2)' with XY coordinates (1,2), and output the merged WKT format using ST_AsText."}
{"id": 465, "function": "ST_Union", "question": "输出将二维点POINT(1 2)与二维点POINT(1 2)进行空间合并后生成的WKT格式字符串。", "sql": "select ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(1 2)' :: geometry))", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2499, "question_en": "Output the WKT format string generated by spatially merging the 2D point POINT(1 2) with the 2D point POINT(1 2)."}
{"id": 465, "function": "ST_Union", "question": "执行ST_Union操作合并两个完全相同的二维点POINT(1 2)，并以WKT文本格式返回结果。", "sql": "select ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(1 2)' :: geometry))", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2500, "question_en": "Perform an ST_Union operation to merge two identical 2D points POINT(1 2) and return the result in WKT text format."}
{"id": 465, "function": "ST_Union", "question": "将两个XY坐标均为(1,2)的二维几何点对象进行联合操作，输出结果的Well-Known Text表示形式。", "sql": "select ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(1 2)' :: geometry))", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2501, "question_en": "Perform a union operation on two 2D geometric point objects with XY coordinates (1,2) and output the Well-Known Text representation of the result."}
{"id": 467, "function": "ST_Buffer", "question": "计算以POINT(100 90)为中心点、50单位半径的缓冲区多边形顶点数（使用默认8段圆弧模拟），以及相同中心点和半径但仅用2段圆弧模拟的缓冲区多边形顶点数，分别命名为promisingcircle_pcount和lamecircle_pcount。", "sql": "SELECT ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) AS promisingcircle_pcount, ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50, 2)) AS lamecircle_pcount;", "execution_result": [[33, 9]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2502, "question_en": "Calculate the number of vertices for a buffer polygon centered at POINT(100 90) with a 50-unit radius (using the default 8 arc segments) and for a buffer polygon with the same center and radius but only 2 arc segments, named promisingcircle_pcount and lamecircle_pcount respectively."}
{"id": 467, "function": "ST_Buffer", "question": "对于二维点POINT(100 90)，分别生成默认8段圆弧（参数缺省）和2段圆弧（显式参数）的50单位半径缓冲区，统计两个缓冲多边形的顶点数量并输出为promisingcircle_pcount和lamecircle_pcount字段。", "sql": "SELECT ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) AS promisingcircle_pcount, ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50, 2)) AS lamecircle_pcount;", "execution_result": [[33, 9]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2503, "question_en": "For the 2D point POINT(100 90), generate buffers with a 50-unit radius using the default 8-segment arcs (parameters omitted) and 2-segment arcs (explicit parameters), then count the vertices of the two buffered polygons and output them as the fields promisingcircle_pcount and lamecircle_pcount."}
{"id": 467, "function": "ST_Buffer", "question": "使用ST_Buffer函数对POINT(100 90)创建两个缓冲区：第一个以默认8段圆弧生成50单位半径多边形，第二个强制指定2段圆弧生成相同半径多边形，通过ST_NPoints获取两者的顶点数并分别别名为promisingcircle_pcount和lamecircle_pcount。", "sql": "SELECT ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) AS promisingcircle_pcount, ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50, 2)) AS lamecircle_pcount;", "execution_result": [[33, 9]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2504, "question_en": "Use the ST_Buffer function to create two buffers for POINT(100 90): the first generates a 50-unit radius polygon with the default 8 arc segments, and the second forcibly specifies 2 arc segments to generate a polygon of the same radius, then use ST_NPoints to get the vertex counts for both, aliased as promisingcircle_pcount and lamecircle_pcount respectively."}
{"id": 467, "function": "ST_Buffer", "question": "分别输出以POINT(100 90)为中心点、50单位半径生成的默认缓冲圆（使用8段弧线模拟）与仅用2段弧线模拟的缓冲圆的顶点数量，结果分别命名为promisingcircle_pcount和lamecircle_pcount。", "sql": "SELECT ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) AS promisingcircle_pcount, ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50, 2)) AS lamecircle_pcount;", "execution_result": [[33, 9]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2505, "question_en": "Output the vertex counts of a default buffer circle (simulated with 8 arc segments) and a buffer circle simulated with only 2 arc segments, both centered at POINT(100 90) with a 50-unit radius, named promisingcircle_pcount and lamecircle_pcount respectively."}
{"id": 467, "function": "ST_Buffer", "question": "计算并返回POINT(100 90)的两种缓冲区几何的顶点数：第一种是标准8段弧线缓冲区（半径50单位），第二种是低精度的2段弧线缓冲区（半径50单位），输出字段分别标记为promisingcircle_pcount和lamecircle_pcount。", "sql": "SELECT ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) AS promisingcircle_pcount, ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50, 2)) AS lamecircle_pcount;", "execution_result": [[33, 9]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2506, "question_en": "Calculate and return the vertex counts of two buffer geometries for POINT(100 90): the first is a standard 8-segment arc buffer (radius 50 units), and the second is a low-precision 2-segment arc buffer (radius 50 units), with output fields labeled as promisingcircle_pcount and lamecircle_pcount."}
{"id": 467, "function": "ST_Buffer", "question": "查询POINT(100 90)在50单位半径下，默认缓冲区（弧线段数8）与简化缓冲区（弧线段数2）的顶点数量，结果输出为promisingcircle_pcount和lamecircle_pcount列。", "sql": "SELECT ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) AS promisingcircle_pcount, ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50, 2)) AS lamecircle_pcount;", "execution_result": [[33, 9]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2507, "question_en": "Query the number of vertices for the default buffer (8 arc segments) and the simplified buffer (2 arc segments) of POINT(100 90) with a 50-unit radius, outputting the results as promisingcircle_pcount and lamecircle_pcount columns."}
{"id": 468, "function": "ST_Buffer", "question": "对POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))的边界强制调整为右手法则方向后，在其左侧生成20单位宽度的缓冲区。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))), 20, 'side=left');", "execution_result": [["010300000001000000050000000000000000004940000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000C06240000000000000494000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2508, "question_en": "Adjust the boundary of POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50)) to enforce the right-hand rule direction, then generate a 20-unit-wide buffer on its left side."}
{"id": 468, "function": "ST_Buffer", "question": "将POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))转换为边界线，调整其顶点顺序为右手法则方向，并在该边界左侧创建20单位距离的缓冲区。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))), 20, 'side=left');", "execution_result": [["010300000001000000050000000000000000004940000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000C06240000000000000494000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2509, "question_en": "Convert the POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50)) into a boundary line, adjust its vertex order to follow the right-hand rule, and create a 20-unit buffer on the left side of this boundary."}
{"id": 468, "function": "ST_Buffer", "question": "基于POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))的边界几何，强制右手法则方向后，仅在该几何体的左侧生成宽度为20的空间缓冲区。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))), 20, 'side=left');", "execution_result": [["010300000001000000050000000000000000004940000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000C06240000000000000494000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2510, "question_en": "Based on the boundary geometry of POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50)), after enforcing the right-hand rule, generate a spatial buffer with a width of 20 only on the left side of the geometry."}
{"id": 468, "function": "ST_Buffer", "question": "输出POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))的边界经ST_ForceRHR强制调整为右手法则方向后，在其左侧创建的20单位距离缓冲区的几何对象。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))), 20, 'side=left');", "execution_result": [["010300000001000000050000000000000000004940000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000C06240000000000000494000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2511, "question_en": "Output the geometric object of a 20-unit buffer created on the left side of the POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50)) after its boundary is adjusted to the right-hand rule direction by ST_ForceRHR."}
{"id": 468, "function": "ST_Buffer", "question": "将POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))转换为边界线并强制右手法则后，返回其左侧20单位缓冲区的几何结果。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))), 20, 'side=left');", "execution_result": [["010300000001000000050000000000000000004940000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000C06240000000000000494000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2512, "question_en": "Convert the POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50)) into its boundary line, enforce the right-hand rule, and return the geometric result of a 20-unit left-side buffer."}
{"id": 468, "function": "ST_Buffer", "question": "基于POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))的右手法则边界线，生成左侧20单位宽度的缓冲区多边形几何体，输出为PostGIS默认几何类型。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))), 20, 'side=left');", "execution_result": [["010300000001000000050000000000000000004940000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000C06240000000000000494000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2513, "question_en": "Generate a left-side 20-unit-wide buffer polygon geometry based on the right-hand rule boundary line of POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50)), output as PostGIS default geometry type."}
{"id": 469, "function": "ST_Buffer", "question": "以POINT(100 90)为中心点，生成一个半径为50单位、每个四分之一圆弧用2条线段近似的缓冲区多边形。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=2');", "execution_result": [["010300000001000000090000000000000000C062400000000000805640AED904F05EEB60404999EC3F84524B4000000000000059400000000000004440A44CF61F422950404899EC3F84524B4000000000000049400000000000805640A44CF61F422950405CB309E0BD565F4000000000000059400000000000806140AED904F05EEB60405CB309E0BD565F400000000000C062400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2514, "question_en": "Generate a buffer polygon centered at POINT(100 90) with a radius of 50 units, approximating each quarter arc with 2 line segments."}
{"id": 469, "function": "ST_Buffer", "question": "对二维点POINT(100 90)执行缓冲区分析，缓冲区距离为50单位，并指定quad_segs参数为2以控制圆弧分段精度。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=2');", "execution_result": [["010300000001000000090000000000000000C062400000000000805640AED904F05EEB60404999EC3F84524B4000000000000059400000000000004440A44CF61F422950404899EC3F84524B4000000000000049400000000000805640A44CF61F422950405CB309E0BD565F4000000000000059400000000000806140AED904F05EEB60405CB309E0BD565F400000000000C062400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2515, "question_en": "Perform a buffer analysis on the 2D point POINT(100 90) with a buffer distance of 50 units, specifying the quad_segs parameter as 2 to control arc segment precision."}
{"id": 469, "function": "ST_Buffer", "question": "使用PostGIS的ST_Buffer函数，为坐标(100, 90)的二维点创建缓冲区域，缓冲半径为50，且设置四分之一圆弧的线段分段数为2。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=2');", "execution_result": [["010300000001000000090000000000000000C062400000000000805640AED904F05EEB60404999EC3F84524B4000000000000059400000000000004440A44CF61F422950404899EC3F84524B4000000000000049400000000000805640A44CF61F422950405CB309E0BD565F4000000000000059400000000000806140AED904F05EEB60405CB309E0BD565F400000000000C062400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2516, "question_en": "Use the ST_Buffer function in PostGIS to create a buffer zone for the 2D point at coordinates (100, 90) with a buffer radius of 50, and set the number of segments per quarter circle to 2."}
{"id": 469, "function": "ST_Buffer", "question": "输出以二维点POINT(100 90)为中心、50单位半径、每个象限使用2个线段近似的缓冲区多边形。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=2');", "execution_result": [["010300000001000000090000000000000000C062400000000000805640AED904F05EEB60404999EC3F84524B4000000000000059400000000000004440A44CF61F422950404899EC3F84524B4000000000000049400000000000805640A44CF61F422950405CB309E0BD565F4000000000000059400000000000806140AED904F05EEB60405CB309E0BD565F400000000000C062400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2517, "question_en": "Output a buffer polygon centered at the 2D point POINT(100 90) with a 50-unit radius, approximating each quadrant with 2 line segments."}
{"id": 469, "function": "ST_Buffer", "question": "输出以二维点POINT(100 90)为中心、缓冲距离为50单位、四分之一圆分段数为2的缓冲区。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=2');", "execution_result": [["010300000001000000090000000000000000C062400000000000805640AED904F05EEB60404999EC3F84524B4000000000000059400000000000004440A44CF61F422950404899EC3F84524B4000000000000049400000000000805640A44CF61F422950405CB309E0BD565F4000000000000059400000000000806140AED904F05EEB60405CB309E0BD565F400000000000C062400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2518, "question_en": "Output a buffer centered at the 2D point POINT(100 90) with a buffer distance of 50 units and 2 segments per quarter-circle."}
{"id": 469, "function": "ST_Buffer", "question": "为二维点POINT(100 90)生成缓冲区，缓冲距离为50单位，且每个四分之一圆弧用2段线段模拟。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=2');", "execution_result": [["010300000001000000090000000000000000C062400000000000805640AED904F05EEB60404999EC3F84524B4000000000000059400000000000004440A44CF61F422950404899EC3F84524B4000000000000049400000000000805640A44CF61F422950405CB309E0BD565F4000000000000059400000000000806140AED904F05EEB60405CB309E0BD565F400000000000C062400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2519, "question_en": "Generate a buffer for the 2D point POINT(100 90) with a buffer distance of 50 units, using 2 line segments to approximate each quarter-arc."}
{"id": 470, "function": "ST_Buffer", "question": "对LINESTRING(50 50,150 150,150 50)这条折线生成仅右侧的缓冲区，缓冲区宽度为10个单位。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=right');", "execution_result": [["01030000000100000007000000000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000004940000000000080614000000000000049400000000000806140A81EFC3FE7765F4058E103C018894C40A81EFC3FE776454000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2520, "question_en": "Generate a right-side-only buffer for the LINESTRING(50 50,150 150,150 50) with a width of 10 units."}
{"id": 470, "function": "ST_Buffer", "question": "以LINESTRING(50 50,150 150,150 50)为输入几何，创建宽度为10且仅在线段右侧生成的缓冲区多边形。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=right');", "execution_result": [["01030000000100000007000000000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000004940000000000080614000000000000049400000000000806140A81EFC3FE7765F4058E103C018894C40A81EFC3FE776454000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2521, "question_en": "Using LINESTRING(50 50,150 150,150 50) as the input geometry, create a buffer polygon with a width of 10 that is generated only on the right side of the line segments."}
{"id": 470, "function": "ST_Buffer", "question": "使用PostGIS的ST_Buffer函数，为折线LINESTRING(50 50,150 150,150 50)构建单侧（右侧）缓冲区，缓冲距离设置为10个单位。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=right');", "execution_result": [["01030000000100000007000000000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000004940000000000080614000000000000049400000000000806140A81EFC3FE7765F4058E103C018894C40A81EFC3FE776454000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2522, "question_en": "Using PostGIS's ST_Buffer function, create a single-sided (right side) buffer for the linestring LINESTRING(50 50,150 150,150 50) with a buffer distance of 10 units."}
{"id": 470, "function": "ST_Buffer", "question": "输出LINESTRING(50 50,150 150,150 50)在右侧生成的10单位宽度的缓冲区。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=right');", "execution_result": [["01030000000100000007000000000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000004940000000000080614000000000000049400000000000806140A81EFC3FE7765F4058E103C018894C40A81EFC3FE776454000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2523, "question_en": "Output a 10-unit wide buffer generated on the right side of LINESTRING(50 50,150 150,150 50)."}
{"id": 470, "function": "ST_Buffer", "question": "返回LINESTRING(50 50,150 150,150 50)的右侧单边缓冲区几何体，缓冲区距离为10单位。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=right');", "execution_result": [["01030000000100000007000000000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000004940000000000080614000000000000049400000000000806140A81EFC3FE7765F4058E103C018894C40A81EFC3FE776454000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2524, "question_en": "Return the right-side unilateral buffer geometry of LINESTRING(50 50,150 150,150 50) with a buffer distance of 10 units."}
{"id": 470, "function": "ST_Buffer", "question": "将LINESTRING(50 50,150 150,150 50)转换为仅右侧10单位宽度的缓冲区多边形并输出。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=right');", "execution_result": [["01030000000100000007000000000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000004940000000000080614000000000000049400000000000806140A81EFC3FE7765F4058E103C018894C40A81EFC3FE776454000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2525, "question_en": "Create a 10-unit right-side buffer polygon from the LINESTRING(50 50,150 150,150 50) and output it."}
{"id": 474, "function": "ST_Buffer", "question": "将坐标为(-71.063526, 42.35785)的二维点设置为SRID 4269空间参考系统，转换为SRID 26986空间参考系统后，生成一个半径为100单位、每四分之一圆用2段线段近似表示的缓冲区，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_Buffer( ST_Transform( ST_SetSRID(ST_Point(-71.063526, 42.35785),4269), 26986) ,100,2)) AS octagon;", "execution_result": [["POLYGON((236057.5905746494 900908.7599186979,236028.30125276805 900838.0492405792,235957.5905746494 900808.7599186979,235886.87989653074 900838.0492405792,235857.5905746494 900908.7599186979,235886.87989653074 900979.4705968165,235957.5905746494 901008.7599186979,236028.30125276805 900979.4705968165,236057.5905746494 900908.7599186979))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2526, "question_en": "Set the 2D point with coordinates (-71.063526, 42.35785) to SRID 4269 spatial reference system, transform it to SRID 26986 spatial reference system, then generate a buffer with a radius of 100 units approximated by 2 segments per quarter-circle, and output the result in WKT format."}
{"id": 474, "function": "ST_Buffer", "question": "以坐标为(-71.063526, 42.35785)的二维点为基础，先赋予其NAD83空间参考（SRID 4269），再转换为马萨诸塞州平面米制坐标（SRID 26986），最终创建边数为8（每象限2段）的100米半径正八边形缓冲区，输出WKT文本。", "sql": "SELECT ST_AsText(ST_Buffer( ST_Transform( ST_SetSRID(ST_Point(-71.063526, 42.35785),4269), 26986) ,100,2)) AS octagon;", "execution_result": [["POLYGON((236057.5905746494 900908.7599186979,236028.30125276805 900838.0492405792,235957.5905746494 900808.7599186979,235886.87989653074 900838.0492405792,235857.5905746494 900908.7599186979,235886.87989653074 900979.4705968165,235957.5905746494 901008.7599186979,236028.30125276805 900979.4705968165,236057.5905746494 900908.7599186979))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2527, "question_en": "Based on the 2D point with coordinates (-71.063526, 42.35785), first assign it the NAD83 spatial reference (SRID 4269), then convert it to Massachusetts State Plane meters (SRID 26986), and finally create a regular octagon buffer with a 100-meter radius (2 segments per quadrant, totaling 8 sides), outputting the WKT text."}
{"id": 474, "function": "ST_Buffer", "question": "对经度-71.063526、纬度42.35785的二维点执行以下操作：1) 设置EPSG:4269地理坐标系 2) 投影转换为EPSG:26986平面坐标系 3) 构建100单位距离的缓冲区，其中圆弧用每象限2段直线逼近，返回结果的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Buffer( ST_Transform( ST_SetSRID(ST_Point(-71.063526, 42.35785),4269), 26986) ,100,2)) AS octagon;", "execution_result": [["POLYGON((236057.5905746494 900908.7599186979,236028.30125276805 900838.0492405792,235957.5905746494 900808.7599186979,235886.87989653074 900838.0492405792,235857.5905746494 900908.7599186979,235886.87989653074 900979.4705968165,235957.5905746494 901008.7599186979,236028.30125276805 900979.4705968165,236057.5905746494 900908.7599186979))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2528, "question_en": "Perform the following operations on the 2D point with longitude -71.063526 and latitude 42.35785: 1) Set the geographic coordinate system EPSG:4269 2) Project and transform to the planar coordinate system EPSG:26986 3) Create a 100-unit buffer with arcs approximated by 2 line segments per quadrant, and return the WKT string representation of the result."}
{"id": 474, "function": "ST_Buffer", "question": "输出经度-71.063526、纬度42.35785的二维点（SRID 4269）转换为SRID 26986坐标系后生成的100单位距离、8段线段模拟圆形的缓冲区结果的WKT格式字符串。", "sql": "SELECT ST_AsText(ST_Buffer( ST_Transform( ST_SetSRID(ST_Point(-71.063526, 42.35785),4269), 26986) ,100,2)) AS octagon;", "execution_result": [["POLYGON((236057.5905746494 900908.7599186979,236028.30125276805 900838.0492405792,235957.5905746494 900808.7599186979,235886.87989653074 900838.0492405792,235857.5905746494 900908.7599186979,235886.87989653074 900979.4705968165,235957.5905746494 901008.7599186979,236028.30125276805 900979.4705968165,236057.5905746494 900908.7599186979))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2529, "question_en": "Output the WKT format string of the buffer result, which simulates a circle with a 100-unit distance and 8 segments, generated by transforming the 2D point (longitude -71.063526, latitude 42.35785, SRID 4269) to the SRID 26986 coordinate system."}
{"id": 474, "function": "ST_Buffer", "question": "将SRID 4269坐标系下的二维点ST_Point(-71.063526, 42.35785)转换为SRID 26986坐标系后，生成一个100单位半径、每象限2段线段（共8段）的八边形缓冲区，输出其WKT文本表示。", "sql": "SELECT ST_AsText(ST_Buffer( ST_Transform( ST_SetSRID(ST_Point(-71.063526, 42.35785),4269), 26986) ,100,2)) AS octagon;", "execution_result": [["POLYGON((236057.5905746494 900908.7599186979,236028.30125276805 900838.0492405792,235957.5905746494 900808.7599186979,235886.87989653074 900838.0492405792,235857.5905746494 900908.7599186979,235886.87989653074 900979.4705968165,235957.5905746494 901008.7599186979,236028.30125276805 900979.4705968165,236057.5905746494 900908.7599186979))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2530, "question_en": "Convert the 2D point ST_Point(-71.063526, 42.35785) from SRID 4269 to SRID 26986, then generate an octagonal buffer with a 100-unit radius and 2 segments per quadrant (8 segments total), and output its WKT representation."}
{"id": 474, "function": "ST_Buffer", "question": "输出经过坐标系转换（从SRID 4269到26986）后的点ST_Point(-71.063526, 42.35785)的缓冲区WKT结果，缓冲区距离为100单位，且使用2段线段模拟每个四分之一圆弧。", "sql": "SELECT ST_AsText(ST_Buffer( ST_Transform( ST_SetSRID(ST_Point(-71.063526, 42.35785),4269), 26986) ,100,2)) AS octagon;", "execution_result": [["POLYGON((236057.5905746494 900908.7599186979,236028.30125276805 900838.0492405792,235957.5905746494 900808.7599186979,235886.87989653074 900838.0492405792,235857.5905746494 900908.7599186979,235886.87989653074 900979.4705968165,235957.5905746494 901008.7599186979,236028.30125276805 900979.4705968165,236057.5905746494 900908.7599186979))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2531, "question_en": "Output the WKT result of the buffer for the point ST_Point(-71.063526, 42.35785) after coordinate system transformation (from SRID 4269 to 26986), with a buffer distance of 100 units and using 2 segments to approximate each quarter arc."}
{"id": 476, "function": "ST_Buffer", "question": "以POINT(100 90)为中心点，生成一个半径为50单位、每个四分之一圆用8段线段近似的缓冲区多边形。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=8');", "execution_result": [["010300000001000000210000000000000000C0624000000000008056401A509EA641A16240C9AE1902B60F544098DF770E35466240EBE271BB69B7514092DB04F459B2614024BEEFBA591C4F40AED904F05EEB60404999EC3F84524B40EE208822D3F15F40B991EC2F98364840161D8E4496C85D40A18120C62BE745403751E6FD49705B4096BF8665F97A444000000000000059400000000000004440C9AE1902B68F564096BF8665F97A4440EBE271BB69375440A18120C62BE7454013DF77DD2C0E5240B791EC2F98364840A44CF61F422950404899EC3F84524B40B891EC2F98364D4024BEEFBA591C4F40A18120C62BE74A40EAE271BB69B7514096BF8665F97A4940C8AE1902B60F54400000000000004940000000000080564096BF8665F97A49403751E6FD49F05840A18120C62BE74A40151D8E4496485B40B791EC2F98364D40ED208822D3715D40A44CF61F422950405CB309E0BD565F4012DF77DD2C0E524092DB04F459726040E9E271BB6937544097DF770E35066140C8AE1902B68F56401A509EA641616140000000000000594000000000008061403751E6FD49705B401A509EA641616140161D8E4496C85D4098DF770E35066140ED208822D3F15F4092DB04F459726040AED904F05EEB60405CB309E0BD565F4092DB04F459B26140EE208822D3715D4097DF770E35466240181D8E4496485B401A509EA641A162403951E6FD49F058400000000000C062400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2532, "question_en": "Generate a buffer polygon centered at POINT(100 90) with a radius of 50 units, approximating each quarter-circle with 8 line segments."}
{"id": 476, "function": "ST_Buffer", "question": "为二维点POINT(100 90)创建缓冲区，缓冲距离为50单位，并指定缓冲区边界用8段线段模拟每个四分之一圆弧。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=8');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2533, "question_en": "Create a buffer for the 2D point POINT(100 90) with a buffer distance of 50 units, specifying 8 segments per quarter-circle to approximate the buffer boundary."}
{"id": 476, "function": "ST_Buffer", "question": "使用ST_Buffer函数处理坐标为(100,90)的二维点，缓冲半径为50单位，且设置quad_segs参数为8以控制圆弧平滑度。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=8');", "execution_result": [["010300000001000000210000000000000000C0624000000000008056401A509EA641A16240C9AE1902B60F544098DF770E35466240EBE271BB69B7514092DB04F459B2614024BEEFBA591C4F40AED904F05EEB60404999EC3F84524B40EE208822D3F15F40B991EC2F98364840161D8E4496C85D40A18120C62BE745403751E6FD49705B4096BF8665F97A444000000000000059400000000000004440C9AE1902B68F564096BF8665F97A4440EBE271BB69375440A18120C62BE7454013DF77DD2C0E5240B791EC2F98364840A44CF61F422950404899EC3F84524B40B891EC2F98364D4024BEEFBA591C4F40A18120C62BE74A40EAE271BB69B7514096BF8665F97A4940C8AE1902B60F54400000000000004940000000000080564096BF8665F97A49403751E6FD49F05840A18120C62BE74A40151D8E4496485B40B791EC2F98364D40ED208822D3715D40A44CF61F422950405CB309E0BD565F4012DF77DD2C0E524092DB04F459726040E9E271BB6937544097DF770E35066140C8AE1902B68F56401A509EA641616140000000000000594000000000008061403751E6FD49705B401A509EA641616140161D8E4496C85D4098DF770E35066140ED208822D3F15F4092DB04F459726040AED904F05EEB60405CB309E0BD565F4092DB04F459B26140EE208822D3715D4097DF770E35466240181D8E4496485B401A509EA641A162403951E6FD49F058400000000000C062400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2534, "question_en": "Use the ST_Buffer function to process a 2D point with coordinates (100, 90), set the buffer radius to 50 units, and configure the quad_segs parameter as 8 to control arc smoothness."}
{"id": 476, "function": "ST_Buffer", "question": "输出以二维点POINT(100 90)为中心、50单位距离为半径、每个四分之一圆用8段线段模拟的缓冲区多边形。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=8');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2535, "question_en": "Output a buffer polygon centered at the 2D point POINT(100 90) with a radius of 50 units, approximating each quarter-circle with 8 line segments."}
{"id": 476, "function": "ST_Buffer", "question": "输出二维点POINT(100 90)的缓冲区多边形，缓冲半径为50单位且每个四分之一圆分段数为8。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=8');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2536, "question_en": "Generate the buffer polygon for the 2D point POINT(100 90) with a buffer radius of 50 units and 8 segments per quarter circle."}
{"id": 476, "function": "ST_Buffer", "question": "返回对二维点POINT(100 90)执行50单位半径缓冲区分析的结果，使用8段线段近似表示四分之一圆弧。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=8');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2537, "question_en": "Return the result of performing a 50-unit radius buffer analysis on the 2D point POINT(100 90), using 8 segments to approximate a quarter circle."}
{"id": 477, "function": "ST_Buffer", "question": "对POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))的边界强制调整为右手法则方向后，在其右侧生成20单位距离的缓冲区。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))')) ), 20,'side=right');", "execution_result": [["01030000000200000007000000000000000000494000000000000049400000000000004940000000000080514000000000000049400000000000C062400000000000C062400000000000C062400000000000C0624000000000000049400000000000805140000000000000494000000000000049400000000000004940050000000000000000805140000000000080514000000000004060400000000000805140000000000040604000000000004060400000000000805140000000000040604000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2538, "question_en": "Adjust the boundary of POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50)) to follow the right-hand rule, then generate a 20-unit buffer on its right side."}
{"id": 477, "function": "ST_Buffer", "question": "将POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))的边界提取后，强制调整为右手法则方向，并在其右侧创建宽度为20单位的缓冲区。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))')) ), 20,'side=right');", "execution_result": [["01030000000200000007000000000000000000494000000000000049400000000000004940000000000080514000000000000049400000000000C062400000000000C062400000000000C062400000000000C0624000000000000049400000000000805140000000000000494000000000000049400000000000004940050000000000000000805140000000000080514000000000004060400000000000805140000000000040604000000000004060400000000000805140000000000040604000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2539, "question_en": "Extract the boundary of POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50)), enforce the right-hand rule orientation, and create a 20-unit wide buffer on its right side."}
{"id": 477, "function": "ST_Buffer", "question": "对POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))的边界，先应用右手法则方向修正，再仅在该几何右侧生成20单位宽度的缓冲区。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))')) ), 20,'side=right');", "execution_result": [["01030000000200000007000000000000000000494000000000000049400000000000004940000000000080514000000000000049400000000000C062400000000000C062400000000000C062400000000000C0624000000000000049400000000000805140000000000000494000000000000049400000000000004940050000000000000000805140000000000080514000000000004060400000000000805140000000000040604000000000004060400000000000805140000000000040604000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2540, "question_en": "For the boundary of POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50)), first apply the right-hand rule for orientation correction, then generate a 20-unit-wide buffer only on the right side of the geometry."}
{"id": 477, "function": "ST_Buffer", "question": "输出POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))的边界线经过强制右手法则校正后，在其右侧生成的20单位距离缓冲区。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))')) ), 20,'side=right');", "execution_result": [["01030000000200000007000000000000000000494000000000000049400000000000004940000000000080514000000000000049400000000000C062400000000000C062400000000000C062400000000000C0624000000000000049400000000000805140000000000000494000000000000049400000000000004940050000000000000000805140000000000080514000000000004060400000000000805140000000000040604000000000004060400000000000805140000000000040604000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2541, "question_en": "Output a 20-unit buffer generated on the right side of the boundary line of POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50)) after enforcing the right-hand rule correction."}
{"id": 477, "function": "ST_Buffer", "question": "将POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))转换为边界线后，强制调整为右手法则方向，并仅在该边界线右侧创建宽度为20单位的缓冲区几何体，输出结果几何对象。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))')) ), 20,'side=right');", "execution_result": [["01030000000200000007000000000000000000494000000000000049400000000000004940000000000080514000000000000049400000000000C062400000000000C062400000000000C062400000000000C0624000000000000049400000000000805140000000000000494000000000000049400000000000004940050000000000000000805140000000000080514000000000004060400000000000805140000000000040604000000000004060400000000000805140000000000040604000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2542, "question_en": "Convert the POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50)) into its boundary line, enforce right-hand rule orientation, and create a 20-unit buffer geometry only on the right side of this boundary line, then output the resulting geometry."}
{"id": 477, "function": "ST_Buffer", "question": "基于POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))的边界几何，通过ST_ForceRHR确保顶点顺序符合右手法则后，使用参数'side=right'限制缓冲区仅生成在边界右侧，创建20单位距离缓冲区，最终输出缓冲区几何数据。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))')) ), 20,'side=right');", "execution_result": [["01030000000200000007000000000000000000494000000000000049400000000000004940000000000080514000000000000049400000000000C062400000000000C062400000000000C062400000000000C0624000000000000049400000000000805140000000000000494000000000000049400000000000004940050000000000000000805140000000000080514000000000004060400000000000805140000000000040604000000000004060400000000000805140000000000040604000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2543, "question_en": "Based on the boundary geometry of POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50)), ensure the vertex order follows the right-hand rule using ST_ForceRHR, then create a 20-unit buffer restricted to the right side of the boundary with the parameter 'side=right', and finally output the buffered geometry data."}
{"id": 481, "function": "ST_Buffer", "question": "以LINESTRING(50 50,150 150,150 50)这条折线为基准，在其左侧生成宽度为10个单位的缓冲区。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=left');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2544, "question_en": "Generate a buffer with a width of 10 units on the left side of the LINESTRING(50 50,150 150,150 50) polyline."}
{"id": 481, "function": "ST_Buffer", "question": "对由坐标点(50 50)、(150 150)、(150 50)构成的折线对象，执行左侧单边缓冲区分析，缓冲区距离设置为10个单位。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=left');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2545, "question_en": "Perform a left-side single-sided buffer analysis on the polyline object formed by the coordinate points (50 50), (150 150), (150 50), with a buffer distance set to 10 units."}
{"id": 481, "function": "ST_Buffer", "question": "使用PostGIS的ST_Buffer函数，处理LINESTRING(50 50,150 150,150 50)这一几何图形，仅在折线左侧创建10个单位宽度的缓冲区域。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=left');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2546, "question_en": "Using PostGIS's ST_Buffer function, process the geometry LINESTRING(50 50,150 150,150 50) to create a 10-unit-wide buffer zone only on the left side of the polyline."}
{"id": 481, "function": "ST_Buffer", "question": "输出LINESTRING(50 50,150 150,150 50)在左侧生成的10单位宽度的缓冲区。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=left');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2547, "question_en": "Output a 10-unit wide buffer generated on the left side of LINESTRING(50 50,150 150,150 50)."}
{"id": 481, "function": "ST_Buffer", "question": "返回LINESTRING(50 50,150 150,150 50)几何对象创建左侧单边缓冲区(宽度10单位)后的结果。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=left');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2548, "question_en": "Return the result of creating a left-side single-sided buffer (width 10 units) for the LINESTRING(50 50,150 150,150 50) geometry object."}
{"id": 481, "function": "ST_Buffer", "question": "将LINESTRING(50 50,150 150,150 50)进行左侧缓冲区处理(缓冲距离10单位)。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=left');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2549, "question_en": "Perform a left-side buffer operation (buffer distance 10 units) on LINESTRING(50 50,150 150,150 50)."}
{"id": 482, "function": "ST_BuildArea", "question": "将LINESTRING (180 40, 30 20, 20 90)、LINESTRING (180 40, 160 160)、LINESTRING (160 160, 80 190, 80 120, 20 90)、LINESTRING (80 60, 120 130, 150 80)和LINESTRING (80 60, 150 80)这五条折线合并后构建成面对象，并以WKT格式输出。", "sql": "WITH data(geom) AS (VALUES ('LINESTRING (180 40, 30 20, 20 90)'::geometry), ('LINESTRING (180 40, 160 160)'::geometry), ('LINESTRING (160 160, 80 190, 80 120, 20 90)'::geometry), ('LINESTRING (80 60, 120 130, 150 80)'::geometry), ('LINESTRING (80 60, 150 80)'::geometry)) SELECT ST_AsText(ST_BuildArea(ST_Collect(geom))) FROM data;", "execution_result": [["POLYGON((180 40,30 20,20 90,80 120,80 190,160 160,180 40),(150 80,120 130,80 60,150 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2550, "question_en": "Merge the five linestrings LINESTRING (180 40, 30 20, 20 90), LINESTRING (180 40, 160 160), LINESTRING (160 160, 80 190, 80 120, 20 90), LINESTRING (80 60, 120 130, 150 80), and LINESTRING (80 60, 150 80) into a polygon and output it in WKT format."}
{"id": 482, "function": "ST_BuildArea", "question": "使用ST_BuildArea函数将包含LINESTRING (180 40, 30 20, 20 90)、LINESTRING (180 40, 160 160)、LINESTRING (160 160, 80 190, 80 120, 20 90)、LINESTRING (80 60, 120 130, 150 80)和LINESTRING (80 60, 150 80)的几何集合转换为面对象，并以WKT文本格式输出结果。", "sql": "WITH data(geom) AS (VALUES ('LINESTRING (180 40, 30 20, 20 90)'::geometry), ('LINESTRING (180 40, 160 160)'::geometry), ('LINESTRING (160 160, 80 190, 80 120, 20 90)'::geometry), ('LINESTRING (80 60, 120 130, 150 80)'::geometry), ('LINESTRING (80 60, 150 80)'::geometry)) SELECT ST_AsText(ST_BuildArea(ST_Collect(geom))) \nFROM data;", "execution_result": [["POLYGON((180 40,30 20,20 90,80 120,80 190,160 160,180 40),(150 80,120 130,80 60,150 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2551, "question_en": "Use the ST_BuildArea function to convert a geometry collection containing LINESTRING (180 40, 30 20, 20 90), LINESTRING (180 40, 160 160), LINESTRING (160 160, 80 190, 80 120, 20 90), LINESTRING (80 60, 120 130, 150 80), and LINESTRING (80 60, 150 80) into a polygon object, and output the result in WKT text format."}
{"id": 482, "function": "ST_BuildArea", "question": "给定五条折线：LINESTRING (180 40, 30 20, 20 90)、LINESTRING (180 40, 160 160)、LINESTRING (160 160, 80 190, 80 120, 20 90)、LINESTRING (80 60, 120 130, 150 80)和LINESTRING (80 60, 150 80)，将它们收集合并后构建成面对象，并以WKT格式输出该面对象。", "sql": "WITH data(geom) AS (VALUES ('LINESTRING (180 40, 30 20, 20 90)'::geometry), ('LINESTRING (180 40, 160 160)'::geometry), ('LINESTRING (160 160, 80 190, 80 120, 20 90)'::geometry), ('LINESTRING (80 60, 120 130, 150 80)'::geometry), ('LINESTRING (80 60, 150 80)'::geometry)) SELECT ST_AsText(ST_BuildArea(ST_Collect(geom))) FROM data;", "execution_result": [["POLYGON((180 40,30 20,20 90,80 120,80 190,160 160,180 40),(150 80,120 130,80 60,150 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2552, "question_en": "Given five linestrings: LINESTRING (180 40, 30 20, 20 90), LINESTRING (180 40, 160 160), LINESTRING (160 160, 80 190, 80 120, 20 90), LINESTRING (80 60, 120 130, 150 80), and LINESTRING (80 60, 150 80), collect and merge them to form a polygon object, then output this polygon in WKT format."}
{"id": 482, "function": "ST_BuildArea", "question": "输出将LINESTRING (180 40, 30 20, 20 90)、LINESTRING (180 40, 160 160)、LINESTRING (160 160, 80 190, 80 120, 20 90)、LINESTRING (80 60, 120 130, 150 80)和LINESTRING (80 60, 150 80)合并后构建面域结果的WKT字符串表示。", "sql": "WITH data(geom) AS (VALUES ('LINESTRING (180 40, 30 20, 20 90)'::geometry) ,('LINESTRING (180 40, 160 160)'::geometry) ,('LINESTRING (160 160, 80 190, 80 120, 20 90)'::geometry) ,('LINESTRING (80 60, 120 130, 150 80)'::geometry) ,('LINESTRING (80 60, 150 80)'::geometry) ) SELECT ST_AsText( ST_BuildArea( ST_Collect( geom ))) FROM data;", "execution_result": [["POLYGON((180 40,30 20,20 90,80 120,80 190,160 160,180 40),(150 80,120 130,80 60,150 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2553, "question_en": "Output the WKT string representation of the polygon result formed by merging the following linestrings: LINESTRING (180 40, 30 20, 20 90), LINESTRING (180 40, 160 160), LINESTRING (160 160, 80 190, 80 120, 20 90), LINESTRING (80 60, 120 130, 150 80), and LINESTRING (80 60, 150 80)."}
{"id": 482, "function": "ST_BuildArea", "question": "输出通过ST_BuildArea函数将五条线串LINESTRING (180 40, 30 20, 20 90)、LINESTRING (180 40, 160 160)、LINESTRING (160 160, 80 190, 80 120, 20 90)、LINESTRING (80 60, 120 130, 150 80)和LINESTRING (80 60, 150 80)构建成面域后的WKT文本格式。", "sql": "WITH data(geom) AS (VALUES ('LINESTRING (180 40, 30 20, 20 90)'::geometry) ,('LINESTRING (180 40, 160 160)'::geometry) ,('LINESTRING (160 160, 80 190, 80 120, 20 90)'::geometry) ,('LINESTRING (80 60, 120 130, 150 80)'::geometry) ,('LINESTRING (80 60, 150 80)'::geometry) ) SELECT ST_AsText( ST_BuildArea( ST_Collect( geom ))) FROM data;", "execution_result": [["POLYGON((180 40,30 20,20 90,80 120,80 190,160 160,180 40),(150 80,120 130,80 60,150 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2554, "question_en": "Output the WKT text format of the polygon area constructed from the five linestrings LINESTRING (180 40, 30 20, 20 90), LINESTRING (180 40, 160 160), LINESTRING (160 160, 80 190, 80 120, 20 90), LINESTRING (80 60, 120 130, 150 80), and LINESTRING (80 60, 150 80) using the ST_BuildArea function."}
{"id": 482, "function": "ST_BuildArea", "question": "输出将五条二维线串几何对象LINESTRING (180 40, 30 20, 20 90)、LINESTRING (180 40, 160 160)、LINESTRING (160 160, 80 190, 80 120, 20 90)、LINESTRING (80 60, 120 130, 150 80)和LINESTRING (80 60, 150 80)经过ST_Collect聚合和ST_BuildArea构建后生成的面域的WKT格式表示。", "sql": "WITH data(geom) AS (VALUES ('LINESTRING (180 40, 30 20, 20 90)'::geometry) ,('LINESTRING (180 40, 160 160)'::geometry) ,('LINESTRING (160 160, 80 190, 80 120, 20 90)'::geometry) ,('LINESTRING (80 60, 120 130, 150 80)'::geometry) ,('LINESTRING (80 60, 150 80)'::geometry) ) SELECT ST_AsText( ST_BuildArea( ST_Collect( geom ))) FROM data;", "execution_result": [["POLYGON((180 40,30 20,20 90,80 120,80 190,160 160,180 40),(150 80,120 130,80 60,150 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2555, "question_en": "Output the WKT representation of the polygon generated by aggregating the five 2D linestring geometries LINESTRING (180 40, 30 20, 20 90), LINESTRING (180 40, 160 160), LINESTRING (160 160, 80 190, 80 120, 20 90), LINESTRING (80 60, 120 130, 150 80), and LINESTRING (80 60, 150 80) using ST_Collect and ST_BuildArea."}
{"id": 483, "function": "ST_BuildArea", "question": "以POINT(100 90)为中心点，分别创建半径为25和50的两个缓冲区inring和outring，然后将这两个缓冲区合并为一个几何集合，并构建一个包含这两个缓冲区的区域。", "sql": "SELECT ST_BuildArea(ST_Collect(inring,outring)) FROM (SELECT ST_Buffer('POINT(100 90)', 25) AS inring, ST_Buffer('POINT(100 90)', 50) AS outring) AS t;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2556, "question_en": "Create two buffers, inring and outring, with radii of 25 and 50 respectively, centered at POINT(100 90), then merge these buffers into a geometry collection and construct an area encompassing both buffers."}
{"id": 483, "function": "ST_BuildArea", "question": "使用ST_Buffer函数对二维点POINT(100 90)生成两个缓冲区：inring（半径25）和outring（半径50），通过ST_Collect将它们合并为一个几何集合，最后用ST_BuildArea构建一个包含这两个缓冲区的区域。", "sql": "SELECT ST_BuildArea(ST_Collect(inring,outring)) FROM (SELECT ST_Buffer('POINT(100 90)', 25) AS inring, ST_Buffer('POINT(100 90)', 50) AS outring) AS t;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2557, "question_en": "Use the ST_Buffer function to generate two buffers for the 2D point POINT(100 90): inring (radius 25) and outring (radius 50), combine them into a geometry collection via ST_Collect, and finally use ST_BuildArea to construct an area encompassing these two buffers."}
{"id": 483, "function": "ST_BuildArea", "question": "基于二维点POINT(100 90)，先创建半径25的缓冲区inring和半径50的缓冲区outring，再通过ST_Collect聚合这两个缓冲区，最后用ST_BuildArea生成一个由这两个环组成的区域几何对象。", "sql": "SELECT ST_BuildArea(ST_Collect(inring,outring)) FROM (SELECT ST_Buffer('POINT(100 90)', 25) AS inring, ST_Buffer('POINT(100 90)', 50) AS outring) AS t;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2558, "question_en": "Based on the 2D point POINT(100 90), first create a buffer with radius 25 as inring and a buffer with radius 50 as outring, then aggregate these two buffers using ST_Collect, and finally generate a polygonal geometry object composed of these two rings using ST_BuildArea."}
{"id": 483, "function": "ST_BuildArea", "question": "输出将中心点POINT(100 90)的25单位半径缓冲区和50单位半径缓冲区合并后构建的面的WKT表示。", "sql": "SELECT ST_BuildArea(ST_Collect(inring,outring)) FROM (SELECT ST_Buffer('POINT(100 90)', 25) AS inring, ST_Buffer('POINT(100 90)', 50) AS outring) AS t;", "execution_result": [["010300000002000000210000000000000000C0624000000000008056401A509EA641A16240C9AE1902B60F544098DF770E35466240EBE271BB69B7514092DB04F459B2614024BEEFBA591C4F40AED904F05EEB60404999EC3F84524B40EE208822D3F15F40B991EC2F98364840161D8E4496C85D40A18120C62BE745403751E6FD49705B4096BF8665F97A444000000000000059400000000000004440C9AE1902B68F564096BF8665F97A4440EBE271BB69375440A18120C62BE7454013DF77DD2C0E5240B791EC2F98364840A44CF61F422950404899EC3F84524B40B891EC2F98364D4024BEEFBA591C4F40A18120C62BE74A40EAE271BB69B7514096BF8665F97A4940C8AE1902B60F54400000000000004940000000000080564096BF8665F97A49403751E6FD49F05840A18120C62BE74A40151D8E4496485B40B791EC2F98364D40ED208822D3715D40A44CF61F422950405CB309E0BD565F4012DF77DD2C0E524092DB04F459726040E9E271BB6937544097DF770E35066140C8AE1902B68F56401A509EA641616140000000000000594000000000008061403751E6FD49705B401A509EA641616140161D8E4496C85D4098DF770E35066140ED208822D3F15F4092DB04F459726040AED904F05EEB60405CB309E0BD565F4092DB04F459B26140EE208822D3715D4097DF770E35466240181D8E4496485B401A509EA641A162403951E6FD49F058400000000000C062400000000000805640210000000000000000405F4000000000008056401A509EA641215F409C28F3FE24B8574097DF770E35C65E408C0E47224BE4584092DB04F459325E4077104491E9F85940AED904F05E6B5D40AED904F05EEB5A4076104491E9785C4092DB04F459B25B408B0E47224B645B4098DF770E35465C409C28F3FE24385A401A509EA641A15C4000000000000059400000000000C05C4064D70C01DBC757401A509EA641A15C4074F1B8DDB49B564097DF770E35465C4089EFBB6E1687554092DB04F459B25B405226FB0FA1945440AED904F05EEB5A406E24FB0BA6CD534077104491E9F85940682088F1CA3953408A0E47224BE45840E6AF6159BEDE52409C28F3FE24B857400000000000C052400000000000805640E6AF6159BEDE524064D70C01DB475540682088F1CA39534075F1B8DDB41B54406E24FB0BA6CD534089EFBB6E160753405226FB0FA19454405226FB0FA114524089EFBB6E168755406E24FB0BA64D514075F1B8DDB49B5640682088F1CAB9504065D70C01DBC75740E6AF6159BE5E5040000000000000594000000000004050409C28F3FE24385A40E6AF6159BE5E50408B0E47224B645B40682088F1CAB9504077104491E9785C406E24FB0BA64D5140AED904F05E6B5D405226FB0FA114524092DB04F459325E4089EFBB6E1607534098DF770E35C65E4075F1B8DDB41B54401A509EA641215F4064D70C01DB4755400000000000405F400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2559, "question_en": "Output the WKT representation of the polygon formed by merging the 25-unit and 50-unit radius buffers around the center point POINT(100 90)."}
{"id": 483, "function": "ST_BuildArea", "question": "以POINT(100 90)为中心生成25单位内环和50单位外环缓冲区后，输出两者叠加形成的闭合区域的几何对象。", "sql": "SELECT ST_BuildArea(ST_Collect(inring,outring)) FROM (SELECT ST_Buffer('POINT(100 90)', 25) AS inring, ST_Buffer('POINT(100 90)', 50) AS outring) AS t;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2560, "question_en": "Generate buffers with a 25-unit inner ring and 50-unit outer ring centered at POINT(100 90), then output the geometric object of the closed area formed by their overlay."}
{"id": 483, "function": "ST_BuildArea", "question": "输出通过聚合POINT(100 90)的25单位缓冲圈和50单位缓冲圈所生成的面域几何体。", "sql": "SELECT ST_BuildArea(ST_Collect(inring,outring)) FROM (SELECT ST_Buffer('POINT(100 90)', 25) AS inring, ST_Buffer('POINT(100 90)', 50) AS outring) AS t;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2561, "question_en": "Output the polygonal geometries generated by aggregating the 25-unit and 50-unit buffer zones around POINT(100 90)."}
{"id": 484, "function": "ST_Centroid", "question": "计算由13个二维点组成的多点集合MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )的几何中心点坐标，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));", "execution_result": [["POINT(2.307692307692308 3.307692307692308)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2562, "question_en": "Calculate the centroid coordinates of the multipoint collection MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 ) consisting of 13 two-dimensional points, and output the result in WKT format."}
{"id": 484, "function": "ST_Centroid", "question": "将多点几何对象MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )的质心坐标转换为WKT文本格式输出。", "sql": "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));", "execution_result": [["POINT(2.307692307692308 3.307692307692308)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2563, "question_en": "Convert the centroid coordinates of the MULTIPOINT geometry (-1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6) to WKT format output."}
{"id": 484, "function": "ST_Centroid", "question": "对包含坐标点(-1 0)、(-1 2)、(-1 3)、(-1 4)、(-1 7)、(0 1)、(0 3)、(1 1)、(2 0)、(6 0)、(7 8)、(9 8)、(10 6)的多点集合执行质心计算，并返回WKT格式的结果。", "sql": "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));", "execution_result": [["POINT(2.307692307692308 3.307692307692308)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2564, "question_en": "Calculate the centroid of the multipoint collection containing coordinates (-1 0), (-1 2), (-1 3), (-1 4), (-1 7), (0 1), (0 3), (1 1), (2 0), (6 0), (7 8), (9 8), (10 6) and return the result in WKT format."}
{"id": 484, "function": "ST_Centroid", "question": "输出由13个二维点组成的MULTIPOINT (-1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6)几何集合的质心坐标，结果以WKT字符串格式返回。", "sql": "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));", "execution_result": [["POINT(2.307692307692308 3.307692307692308)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2565, "question_en": "Output the centroid coordinates of the MULTIPOINT (-1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6) geometry collection consisting of 13 two-dimensional points, returning the result in WKT string format."}
{"id": 484, "function": "ST_Centroid", "question": "计算MULTIPOINT类型几何对象包含的13个点(-1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6)的几何中心点，并以WKT文本格式输出结果。", "sql": "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));", "execution_result": [["POINT(2.307692307692308 3.307692307692308)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2566, "question_en": "Calculate the geometric center point of a MULTIPOINT geometry object containing 13 points (-1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6) and output the result in WKT text format."}
{"id": 484, "function": "ST_Centroid", "question": "将MULTIPOINT几何对象中所有点(-1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6)的坐标平均值作为质心，返回该质心的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));", "execution_result": [["POINT(2.307692307692308 3.307692307692308)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2567, "question_en": "Return the WKT string representation of the centroid calculated as the average coordinates of all points in the MULTIPOINT geometry (-1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6)."}
{"id": 485, "function": "ST_Centroid", "question": "计算由复合曲线COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))构成的几何图形的质心，并以WKT格式输出。", "sql": "SELECT ST_AsText(ST_Centroid(g)) FROM ST_GeomFromText('COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))' ) AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2568, "question_en": "Calculate the centroid of the geometric shape formed by the compound curve COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2)) and output it in WKT format."}
{"id": 485, "function": "ST_Centroid", "question": "将复合曲线COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))转换为几何对象后，求其质心的WKT文本表示。", "sql": "SELECT ST_AsText(ST_Centroid(g)) FROM ST_GeomFromText('COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))' ) AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2569, "question_en": "After converting the compound curve COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2)) to a geometry object, find the WKT representation of its centroid."}
{"id": 485, "function": "ST_Centroid", "question": "对于由圆弧CIRCULARSTRING(0 2, -1 1,0 0)、线段(0 0, 0.5 0, 1 0)、圆弧CIRCULARSTRING( 1 0, 2 1, 1 2)和线段(1 2, 0.5 2, 0 2)组成的复合曲线，计算其几何中心的WKT坐标文本。", "sql": "SELECT ST_AsText(ST_Centroid(g)) FROM ST_GeomFromText('COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))' ) AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2570, "question_en": "For the composite curve consisting of the arc CIRCULARSTRING(0 2, -1 1, 0 0), the line segment (0 0, 0.5 0, 1 0), the arc CIRCULARSTRING(1 0, 2 1, 1 2), and the line segment (1 2, 0.5 2, 0 2), calculate the WKT coordinate text of its geometric center."}
{"id": 485, "function": "ST_Centroid", "question": "输出复合曲线COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))的质心的WKT字符串。", "sql": "SELECT ST_AsText(ST_Centroid(g)) FROM ST_GeomFromText('COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2571, "question_en": "Output the WKT string of the centroid for the compound curve COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1, 0 0), (0 0, 0.5 0, 1 0), CIRCULARSTRING(1 0, 2 1, 1 2), (1 2, 0.5 2, 0 2))."}
{"id": 485, "function": "ST_Centroid", "question": "计算并输出由圆弧CIRCULARSTRING(0 2, -1 1,0 0)、线段(0 0, 0.5 0, 1 0)、圆弧CIRCULARSTRING( 1 0, 2 1, 1 2)和线段(1 2, 0.5 2, 0 2)组成的复合曲线的几何中心的WKT文本表示。", "sql": "SELECT ST_AsText(ST_Centroid(g)) FROM ST_GeomFromText('COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2572, "question_en": "Calculate and output the WKT representation of the geometric center of the composite curve formed by the circular arc CIRCULARSTRING(0 2, -1 1, 0 0), the line segment (0 0, 0.5 0, 1 0), the circular arc CIRCULARSTRING(1 0, 2 1, 1 2), and the line segment (1 2, 0.5 2, 0 2)."}
{"id": 485, "function": "ST_Centroid", "question": "将复合曲线COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))转换为几何对象后，输出其质心坐标的WKT格式字符串。", "sql": "SELECT ST_AsText(ST_Centroid(g)) FROM ST_GeomFromText('COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2573, "question_en": "Convert the compound curve COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2)) to a geometry object, then output the WKT format string of its centroid coordinates."}
{"id": 486, "function": "ST_Centroid", "question": "计算由CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)定义的圆弧几何图形的质心，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_centroid(g)) FROM ST_GeomFromText('CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2574, "question_en": "Calculate the centroid of the circular arc geometry defined by CIRCULARSTRING(0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2) and output the result in WKT format."}
{"id": 486, "function": "ST_Centroid", "question": "将CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)这个圆弧几何图形从字符串转换为几何对象后，求其质心的WKT文本表示。", "sql": "SELECT ST_AsText(ST_centroid(g)) FROM ST_GeomFromText('CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2575, "question_en": "Convert the circular string CIRCULARSTRING(0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2) from a string to a geometry object, then find the WKT representation of its centroid."}
{"id": 486, "function": "ST_Centroid", "question": "对于由坐标序列(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)定义的CIRCULARSTRING几何图形，计算并返回其质心的WKT格式文本。", "sql": "SELECT ST_AsText(ST_centroid(g)) FROM ST_GeomFromText('CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2576, "question_en": "For the CIRCULARSTRING geometry defined by the coordinate sequence (0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2), calculate and return the WKT format text of its centroid."}
{"id": 486, "function": "ST_Centroid", "question": "输出由CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)定义的圆弧几何图形的质心坐标的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_centroid(g)) FROM ST_GeomFromText('CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2577, "question_en": "Output the WKT string representation of the centroid coordinates for the circular arc geometry defined by CIRCULARSTRING(0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)."}
{"id": 486, "function": "ST_Centroid", "question": "计算并输出由点序列(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)构成的圆弧几何图形的几何中心的WKT格式坐标。", "sql": "SELECT ST_AsText(ST_centroid(g)) FROM ST_GeomFromText('CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2578, "question_en": "Calculate and output the WKT-formatted coordinates of the geometric center of the arc-shaped geometry formed by the point sequence (0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)."}
{"id": 486, "function": "ST_Centroid", "question": "将CIRCULARSTRING类型几何图形(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)的质心坐标转换为WKT文本格式输出。", "sql": "SELECT ST_AsText(ST_centroid(g)) FROM ST_GeomFromText('CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2579, "question_en": "Output the centroid coordinates of the CIRCULARSTRING geometry (0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2) in WKT text format."}
{"id": 487, "function": "ST_ChaikinSmoothing", "question": "对由顶点坐标(0 0)、(8 8)、(0 16)、(0 0)构成的闭合多边形进行Chaikin平滑处理，并以WKT格式输出结果几何图形。", "sql": "SELECT ST_AsText(ST_ChaikinSmoothing(geom)) smoothed FROM (SELECT 'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) AS foo;", "execution_result": [["POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2580, "question_en": "Perform Chaikin smoothing on the closed polygon defined by vertex coordinates (0 0), (8 8), (0 16), (0 0) and output the resulting geometry in WKT format."}
{"id": 487, "function": "ST_ChaikinSmoothing", "question": "使用PostGIS的ST_ChaikinSmoothing函数对POLYGON((0 0, 8 8, 0 16, 0 0))几何对象执行平滑操作，返回平滑后的几何体的WKT文本表示。", "sql": "SELECT ST_AsText(ST_ChaikinSmoothing(geom)) smoothed FROM (SELECT 'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) AS foo;", "execution_result": [["POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2581, "question_en": "Perform a smoothing operation on the POLYGON((0 0, 8 8, 0 16, 0 0)) geometry using PostGIS's ST_ChaikinSmoothing function and return the WKT representation of the smoothed geometry."}
{"id": 487, "function": "ST_ChaikinSmoothing", "question": "将原始多边形POLYGON((0 0, 8 8, 0 16, 0 0))通过Chaikin算法平滑后，输出其Well-Known Text格式的处理结果。", "sql": "SELECT ST_AsText(ST_ChaikinSmoothing(geom)) smoothed FROM (SELECT 'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) AS foo;", "execution_result": [["POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2582, "question_en": "Smooth the original polygon POLYGON((0 0, 8 8, 0 16, 0 0)) using the Chaikin algorithm and output its Well-Known Text formatted result."}
{"id": 487, "function": "ST_ChaikinSmoothing", "question": "输出对POLYGON((0 0, 8 8, 0 16, 0 0))几何对象应用Chaikin平滑算法后生成的WKT格式结果。", "sql": "SELECT ST_AsText(ST_ChaikinSmoothing(geom)) smoothed FROM (SELECT 'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) AS foo;", "execution_result": [["POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2583, "question_en": "Output the WKT format result after applying the Chaikin smoothing algorithm to the geometry object POLYGON((0 0, 8 8, 0 16, 0 0))."}
{"id": 487, "function": "ST_ChaikinSmoothing", "question": "将POLYGON((0 0, 8 8, 0 16, 0 0))多边形经过ST_ChaikinSmoothing函数处理后的几何结果转换为WKT文本输出。", "sql": "SELECT ST_AsText(ST_ChaikinSmoothing(geom)) smoothed FROM (SELECT 'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) AS foo;", "execution_result": [["POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2584, "question_en": "Output the WKT text representation of the geometry result after processing the POLYGON((0 0, 8 8, 0 16, 0 0)) polygon with the ST_ChaikinSmoothing function."}
{"id": 487, "function": "ST_ChaikinSmoothing", "question": "以WKT字符串形式返回POLYGON((0 0, 8 8, 0 16, 0 0))经过Chaikin平滑算法处理后的几何图形。", "sql": "SELECT ST_AsText(ST_ChaikinSmoothing(geom)) smoothed FROM (SELECT 'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) AS foo;", "execution_result": [["POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2585, "question_en": "Return the geometry processed by the Chaikin smoothing algorithm in WKT string format for POLYGON((0 0, 8 8, 0 16, 0 0))."}
{"id": 488, "function": "ST_ChaikinSmoothing", "question": "对顶点坐标为(20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20)的多边形依次进行1次、2次和3次Chaikin平滑处理，并返回结果。", "sql": "SELECT ST_ChaikinSmoothing( 'POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2586, "question_en": "Perform 1, 2, and 3 iterations of Chaikin smoothing on the polygon with vertex coordinates (20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20) and return the results."}
{"id": 488, "function": "ST_ChaikinSmoothing", "question": "使用Chaikin算法对由坐标点(20 20)、(60 90)、(10 150)、(100 190)、(190 160)、(130 120)、(190 50)、(140 70)、(120 10)、(90 60)、(20 20)组成的闭合多边形分别执行1次、2次和3次平滑迭代，输出平滑后的几何图形。", "sql": "SELECT ST_ChaikinSmoothing( 'POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2587, "question_en": "Apply the Chaikin algorithm to perform 1, 2, and 3 smoothing iterations on the closed polygon formed by the coordinate points (20 20), (60 90), (10 150), (100 190), (190 160), (130 120), (190 50), (140 70), (120 10), (90 60), (20 20), and output the smoothed geometries."}
{"id": 488, "function": "ST_ChaikinSmoothing", "question": "将多边形POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))作为输入，分别应用1次、2次和3次Chaikin平滑算法，返回平滑处理后的结果。", "sql": "SELECT ST_ChaikinSmoothing( 'POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2588, "question_en": "Take the polygon POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20)) as input, apply the Chaikin smoothing algorithm once, twice, and three times respectively, and return the smoothed results."}
{"id": 488, "function": "ST_ChaikinSmoothing", "question": "输出对POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))分别进行1次、2次和3次Chaikin平滑处理后的结果。", "sql": "SELECT ST_ChaikinSmoothing( 'POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2589, "question_en": "Output the results of applying 1, 2, and 3 iterations of Chaikin smoothing to the POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))."}
{"id": 488, "function": "ST_ChaikinSmoothing", "question": "输出POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))经过1至3次迭代的Chaikin平滑处理后的几何对象集合。", "sql": "SELECT ST_ChaikinSmoothing( 'POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2590, "question_en": "Output the collection of geometric objects after applying 1 to 3 iterations of Chaikin smoothing to the POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))."}
{"id": 488, "function": "ST_ChaikinSmoothing", "question": "输出对POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))应用Chaikin平滑算法时，迭代次数参数为1、2和3时生成的三个平滑后的多边形。", "sql": "SELECT ST_ChaikinSmoothing( 'POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2591, "question_en": "Output the three smoothed polygons generated by applying the Chaikin smoothing algorithm to POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20)) with iteration count parameters of 1, 2, and 3."}
{"id": 489, "function": "ST_ChaikinSmoothing", "question": "对LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)这条折线应用Chaikin平滑算法，分别进行1次、2次和3次迭代平滑处理，并返回结果。", "sql": "SELECT ST_ChaikinSmoothing( 'LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2592, "question_en": "Apply the Chaikin smoothing algorithm to the LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100), perform 1, 2, and 3 iterations of smoothing, and return the results."}
{"id": 489, "function": "ST_ChaikinSmoothing", "question": "使用ST_ChaikinSmoothing函数处理LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)这条由8个点组成的折线，生成1到3次不同迭代次数的平滑结果。", "sql": "SELECT ST_ChaikinSmoothing( 'LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2593, "question_en": "Apply the ST_ChaikinSmoothing function to the LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100), which consists of 8 points, to generate smoothed results with 1 to 3 different iteration counts."}
{"id": 489, "function": "ST_ChaikinSmoothing", "question": "对坐标为(10 140)、(80 130)、(100 190)、(190 150)、(140 20)、(120 120)、(50 30)、(30 100)的8个点构成的LINESTRING几何对象，执行1次、2次和3次Chaikin平滑处理，返回平滑后的几何对象。", "sql": "SELECT ST_ChaikinSmoothing( 'LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2594, "question_en": "For the LINESTRING geometry object formed by the 8 points with coordinates (10 140), (80 130), (100 190), (190 150), (140 20), (120 120), (50 30), (30 100), perform 1, 2, and 3 iterations of Chaikin smoothing and return the smoothed geometry objects."}
{"id": 489, "function": "ST_ChaikinSmoothing", "question": "输出对LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)分别进行1次、2次和3次Chaikin平滑处理后的结果。", "sql": "SELECT ST_ChaikinSmoothing('LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)', generate_series(1, 3));", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2595, "question_en": "Output the results of applying 1, 2, and 3 iterations of Chaikin smoothing to the LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)."}
{"id": 489, "function": "ST_ChaikinSmoothing", "question": "将LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)作为输入，输出迭代次数参数为1、2、3时的Chaikin平滑处理结果。", "sql": "SELECT ST_ChaikinSmoothing('LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)', generate_series(1, 3));", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2596, "question_en": "Using LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100) as input, output the Chaikin smoothing results with iteration parameters of 1, 2, and 3."}
{"id": 489, "function": "ST_ChaikinSmoothing", "question": "针对LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)几何对象，分别执行1次、2次和3次Chaikin平滑算法，输出三个平滑结果。", "sql": "SELECT ST_ChaikinSmoothing('LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)', generate_series(1, 3));", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2597, "question_en": "For the LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100) geometry object, apply the Chaikin smoothing algorithm once, twice, and three times respectively, and output the three smoothed results."}
{"id": 490, "function": "ST_ConcaveHull", "question": "对包含具体坐标点(10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167)的MULTIPOINT几何对象，使用参数0.1计算其凹包，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))', 0.1 ) );", "execution_result": [["POLYGON((21 151,27 160,35 167,44 172,54 175,64 178,74 180,84 181,94 181,104 181,114 181,124 181,134 179,144 177,153 173,162 168,171 162,177 154,182 145,184 135,173 134,161 134,150 133,139 132,136 142,128 149,119 153,109 155,99 155,89 155,79 153,69 150,61 144,63 134,72 128,82 125,92 123,102 121,112 119,122 118,132 116,142 113,151 110,161 106,170 102,178 96,185 88,189 78,190 68,189 58,185 49,179 41,171 34,162 29,153 25,143 23,133 21,123 19,113 19,102 19,92 19,82 19,72 21,62 22,52 25,43 29,33 34,25 41,19 49,14 58,10 72,21 73,31 74,42 74,53 76,56 66,63 58,71 51,81 48,91 46,101 45,111 46,121 47,131 50,140 55,145 64,144 74,135 80,125 83,115 85,105 87,95 89,85 91,75 93,65 95,55 98,45 102,37 107,29 114,22 122,19 132,18 142,21 151))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2598, "question_en": "For the MULTIPOINT geometry object containing the specific coordinate points (10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167), compute its concave hull using the parameter 0.1 and output the result in WKT format."}
{"id": 490, "function": "ST_ConcaveHull", "question": "执行 ST_ConcaveHull 函数，输入几何为 MULTIPOINT，包含二维点 (10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167)，并设置允许凹度参数为 0.1，然后通过 ST_AsText 函数将结果转换为 WKT 文本格式输出。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))', 0.1 ) );", "execution_result": [["POLYGON((21 151,27 160,35 167,44 172,54 175,64 178,74 180,84 181,94 181,104 181,114 181,124 181,134 179,144 177,153 173,162 168,171 162,177 154,182 145,184 135,173 134,161 134,150 133,139 132,136 142,128 149,119 153,109 155,99 155,89 155,79 153,69 150,61 144,63 134,72 128,82 125,92 123,102 121,112 119,122 118,132 116,142 113,151 110,161 106,170 102,178 96,185 88,189 78,190 68,189 58,185 49,179 41,171 34,162 29,153 25,143 23,133 21,123 19,113 19,102 19,92 19,82 19,72 21,62 22,52 25,43 29,33 34,25 41,19 49,14 58,10 72,21 73,31 74,42 74,53 76,56 66,63 58,71 51,81 48,91 46,101 45,111 46,121 47,131 50,140 55,145 64,144 74,135 80,125 83,115 85,105 87,95 89,85 91,75 93,65 95,55 98,45 102,37 107,29 114,22 122,19 132,18 142,21 151))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2599, "question_en": "Execute the ST_ConcaveHull function with the input geometry as MULTIPOINT containing 2D points (10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167), set the concavity parameter to 0.1, and convert the result to WKT text format using ST_AsText."}
{"id": 490, "function": "ST_ConcaveHull", "question": "给定一个由二维点 (10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167) 组成的 MULTIPOINT 几何，使用 ST_ConcaveHull 函数以允许凹度参数 0.1 计算凹包，并通过 ST_AsText 函数生成其 WKT 文本输出。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))', 0.1 ) );", "execution_result": [["POLYGON((21 151,27 160,35 167,44 172,54 175,64 178,74 180,84 181,94 181,104 181,114 181,124 181,134 179,144 177,153 173,162 168,171 162,177 154,182 145,184 135,173 134,161 134,150 133,139 132,136 142,128 149,119 153,109 155,99 155,89 155,79 153,69 150,61 144,63 134,72 128,82 125,92 123,102 121,112 119,122 118,132 116,142 113,151 110,161 106,170 102,178 96,185 88,189 78,190 68,189 58,185 49,179 41,171 34,162 29,153 25,143 23,133 21,123 19,113 19,102 19,92 19,82 19,72 21,62 22,52 25,43 29,33 34,25 41,19 49,14 58,10 72,21 73,31 74,42 74,53 76,56 66,63 58,71 51,81 48,91 46,101 45,111 46,121 47,131 50,140 55,145 64,144 74,135 80,125 83,115 85,105 87,95 89,85 91,75 93,65 95,55 98,45 102,37 107,29 114,22 122,19 132,18 142,21 151))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2600, "question_en": "Given a MULTIPOINT geometry composed of the 2D points (10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167), use the ST_ConcaveHull function with a concavity parameter of 0.1 to compute the concave hull, and generate its WKT text output via the ST_AsText function."}
{"id": 490, "function": "ST_ConcaveHull", "question": "输出MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))通过凹包算法（允许凹度参数设置为0.1）处理后生成的WKT字符串表示的多边形。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))', 0.1 ) );", "execution_result": [["POLYGON((21 151,27 160,35 167,44 172,54 175,64 178,74 180,84 181,94 181,104 181,114 181,124 181,134 179,144 177,153 173,162 168,171 162,177 154,182 145,184 135,173 134,161 134,150 133,139 132,136 142,128 149,119 153,109 155,99 155,89 155,79 153,69 150,61 144,63 134,72 128,82 125,92 123,102 121,112 119,122 118,132 116,142 113,151 110,161 106,170 102,178 96,185 88,189 78,190 68,189 58,185 49,179 41,171 34,162 29,153 25,143 23,133 21,123 19,113 19,102 19,92 19,82 19,72 21,62 22,52 25,43 29,33 34,25 41,19 49,14 58,10 72,21 73,31 74,42 74,53 76,56 66,63 58,71 51,81 48,91 46,101 45,111 46,121 47,131 50,140 55,145 64,144 74,135 80,125 83,115 85,105 87,95 89,85 91,75 93,65 95,55 98,45 102,37 107,29 114,22 122,19 132,18 142,21 151))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2601, "question_en": "Output the WKT string representation of the polygon generated by processing the given MULTIPOINT with the concave hull algorithm (concavity parameter set to 0.1)."}
{"id": 490, "function": "ST_ConcaveHull", "question": "将MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))使用凹包算法处理（允许凹度参数设置为0.1），最终输出结果的WKT文本格式表示。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))', 0.1 ) );", "execution_result": [["POLYGON((21 151,27 160,35 167,44 172,54 175,64 178,74 180,84 181,94 181,104 181,114 181,124 181,134 179,144 177,153 173,162 168,171 162,177 154,182 145,184 135,173 134,161 134,150 133,139 132,136 142,128 149,119 153,109 155,99 155,89 155,79 153,69 150,61 144,63 134,72 128,82 125,92 123,102 121,112 119,122 118,132 116,142 113,151 110,161 106,170 102,178 96,185 88,189 78,190 68,189 58,185 49,179 41,171 34,162 29,153 25,143 23,133 21,123 19,113 19,102 19,92 19,82 19,72 21,62 22,52 25,43 29,33 34,25 41,19 49,14 58,10 72,21 73,31 74,42 74,53 76,56 66,63 58,71 51,81 48,91 46,101 45,111 46,121 47,131 50,140 55,145 64,144 74,135 80,125 83,115 85,105 87,95 89,85 91,75 93,65 95,55 98,45 102,37 107,29 114,22 122,19 132,18 142,21 151))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2602, "question_en": "Process the MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167)) using the concave hull algorithm (with concavity parameter set to 0.1) and output the result in WKT format."}
{"id": 490, "function": "ST_ConcaveHull", "question": "对MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))执行ST_ConcaveHull运算（凹度参数设为0.1），并以WKT文本格式输出结果多边形。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))', 0.1 ) );", "execution_result": [["POLYGON((21 151,27 160,35 167,44 172,54 175,64 178,74 180,84 181,94 181,104 181,114 181,124 181,134 179,144 177,153 173,162 168,171 162,177 154,182 145,184 135,173 134,161 134,150 133,139 132,136 142,128 149,119 153,109 155,99 155,89 155,79 153,69 150,61 144,63 134,72 128,82 125,92 123,102 121,112 119,122 118,132 116,142 113,151 110,161 106,170 102,178 96,185 88,189 78,190 68,189 58,185 49,179 41,171 34,162 29,153 25,143 23,133 21,123 19,113 19,102 19,92 19,82 19,72 21,62 22,52 25,43 29,33 34,25 41,19 49,14 58,10 72,21 73,31 74,42 74,53 76,56 66,63 58,71 51,81 48,91 46,101 45,111 46,121 47,131 50,140 55,145 64,144 74,135 80,125 83,115 85,105 87,95 89,85 91,75 93,65 95,55 98,45 102,37 107,29 114,22 122,19 132,18 142,21 151))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2603, "question_en": "Perform the ST_ConcaveHull operation on the MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167)) with a concavity parameter of 0.1, and output the resulting polygon in WKT text format."}
{"id": 491, "function": "ST_ConcaveHull", "question": "对包含多个二维点的多点集合MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))，使用凹包算法ST_ConcaveHull计算其凹包，设置目标凹度参数为0.15（允许15%的凹陷），设置true参数允许孔洞存在，最终以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))', 0.15, true ) );", "execution_result": [["POLYGON((88 180,101 180,112 180,119 164,126 149,132 131,139 113,143 100,150 84,157 69,163 51,168 36,174 20,163 20,150 20,143 36,139 49,132 64,114 64,99 64,81 64,63 64,57 49,52 36,46 20,37 20,26 20,32 36,35 45,39 55,43 69,50 84,57 100,63 118,68 133,74 149,81 164,88 180),(92 138,88 124,81 109,74 93,83 82,99 82,112 82,121 96,114 109,110 122,103 138,92 138))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2604, "question_en": "For the multipoint collection MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45)), compute its concave hull using the ST_ConcaveHull algorithm with a target concavity parameter of 0.15 (allowing 15% concavity), set the true parameter to allow holes, and output the result in WKT format."}
{"id": 491, "function": "ST_ConcaveHull", "question": "给定一个由多个二维坐标点组成的多点集合MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))，使用PostGIS的ST_ConcaveHull函数，以0.15的凹度参数（允许15%的凹陷比例）和允许孔洞（第三个参数为true）的条件，生成该点集的凹包，并通过ST_AsText函数将结果转换为WKT文本格式输出。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))', 0.15, true ) );", "execution_result": [["POLYGON((88 180,101 180,112 180,119 164,126 149,132 131,139 113,143 100,150 84,157 69,163 51,168 36,174 20,163 20,150 20,143 36,139 49,132 64,114 64,99 64,81 64,63 64,57 49,52 36,46 20,37 20,26 20,32 36,35 45,39 55,43 69,50 84,57 100,63 118,68 133,74 149,81 164,88 180),(92 138,88 124,81 109,74 93,83 82,99 82,112 82,121 96,114 109,110 122,103 138,92 138))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2605, "question_en": "Given a multipoint set MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45)), use PostGIS's ST_ConcaveHull function with a concavity parameter of 0.15 (allowing 15% concavity) and holes allowed (third parameter set to true) to generate the concave hull of the point set, and output the result as WKT text format using ST_AsText."}
{"id": 491, "function": "ST_ConcaveHull", "question": "基于MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))，执行PostGIS空间操作：使用ST_ConcaveHull函数计算凹包，其中凹度参数设为0.15（表示允许15%的凹陷程度），且设置允许孔洞（第三个参数为true），最后通过ST_AsText函数将生成的凹包几何对象转换为WKT文本格式输出。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))', 0.15, true ) );", "execution_result": [["POLYGON((88 180,101 180,112 180,119 164,126 149,132 131,139 113,143 100,150 84,157 69,163 51,168 36,174 20,163 20,150 20,143 36,139 49,132 64,114 64,99 64,81 64,63 64,57 49,52 36,46 20,37 20,26 20,32 36,35 45,39 55,43 69,50 84,57 100,63 118,68 133,74 149,81 164,88 180),(92 138,88 124,81 109,74 93,83 82,99 82,112 82,121 96,114 109,110 122,103 138,92 138))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2606, "question_en": "Based on MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45)), perform a PostGIS spatial operation: calculate the concave hull using the ST_ConcaveHull function with a concavity parameter of 0.15 (indicating 15% concavity allowed) and set to allow holes (third parameter as true), then convert the resulting concave hull geometry to WKT text format using ST_AsText for output."}
{"id": 491, "function": "ST_ConcaveHull", "question": "输出由MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))构建的凹包几何体的WKT字符串，其中凹包参数为0.15且允许多边形带孔。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))', 0.15, true ) );", "execution_result": [["POLYGON((88 180,101 180,112 180,119 164,126 149,132 131,139 113,143 100,150 84,157 69,163 51,168 36,174 20,163 20,150 20,143 36,139 49,132 64,114 64,99 64,81 64,63 64,57 49,52 36,46 20,37 20,26 20,32 36,35 45,39 55,43 69,50 84,57 100,63 118,68 133,74 149,81 164,88 180),(92 138,88 124,81 109,74 93,83 82,99 82,112 82,121 96,114 109,110 122,103 138,92 138))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2607, "question_en": "Output the WKT string of the concave hull geometry constructed from MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45)), with a concave hull parameter of 0.15 and allowing polygons with holes."}
{"id": 491, "function": "ST_ConcaveHull", "question": "输出包含MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))所有点的凹包几何体的WKT文本表示，凹包参数设为0.15且允许结果多边形包含孔洞。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))', 0.15, true ) );", "execution_result": [["POLYGON((88 180,101 180,112 180,119 164,126 149,132 131,139 113,143 100,150 84,157 69,163 51,168 36,174 20,163 20,150 20,143 36,139 49,132 64,114 64,99 64,81 64,63 64,57 49,52 36,46 20,37 20,26 20,32 36,35 45,39 55,43 69,50 84,57 100,63 118,68 133,74 149,81 164,88 180),(92 138,88 124,81 109,74 93,83 82,99 82,112 82,121 96,114 109,110 122,103 138,92 138))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2608, "question_en": "Output the WKT representation of the concave hull geometry that contains all points in MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45)), with a concave hull parameter of 0.15 and allowing the resulting polygon to contain holes."}
{"id": 491, "function": "ST_ConcaveHull", "question": "输出多点集合 'MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))' 经过 ST_ConcaveHull 函数处理，凹度参数为 0.15 且允许孔洞，最终生成的几何对象的 WKT 字符串。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))', 0.15, true ) );", "execution_result": [["POLYGON((88 180,101 180,112 180,119 164,126 149,132 131,139 113,143 100,150 84,157 69,163 51,168 36,174 20,163 20,150 20,143 36,139 49,132 64,114 64,99 64,81 64,63 64,57 49,52 36,46 20,37 20,26 20,32 36,35 45,39 55,43 69,50 84,57 100,63 118,68 133,74 149,81 164,88 180),(92 138,88 124,81 109,74 93,83 82,99 82,112 82,121 96,114 109,110 122,103 138,92 138))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2609, "question_en": "Output the WKT string of the resulting geometry after processing the multipoint collection 'MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))' with the ST_ConcaveHull function, using a concavity parameter of 0.15 and allowing holes."}
{"id": 492, "function": "ST_ConcaveHull", "question": "给定一个多边形POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))，分别计算该多边形几何体的凹包（凹度参数0.1）和该多边形所有顶点组成的点集的凹包（凹度参数0.1）。", "sql": "WITH data(geom) AS (VALUES ('POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))'::geometry) ) SELECT ST_ConcaveHull( geom, 0.1) AS polygon_hull, ST_ConcaveHull( ST_Points(geom), 0.1) AS points_hull FROM data;", "execution_result": [["0103000000010000000D0000000000000000004E40000000000000244000000000000049400000000000003E4000000000008045400000000000003B400000000000003E40000000000000244000000000000034400000000000003440000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E400000000000002440", "0103000000010000001000000000000000000039400000000000004E40000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E4000000000000024400000000000003E4000000000000024400000000000003440000000000000344000000000008045400000000000003B4000000000000049400000000000003E400000000000804F4000000000000043400000000000804E400000000000C0534000000000000039400000000000004E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2610, "question_en": "Given a polygon POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90)), calculate both the concave hull of the polygon geometry (concavity parameter 0.1) and the concave hull of the set of all its vertices (concavity parameter 0.1)."}
{"id": 492, "function": "ST_ConcaveHull", "question": "对于多边形POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))，使用0.1作为凹度参数，分别生成该多边形本身的凹包和从该多边形提取的所有顶点的凹包。", "sql": "WITH data(geom) AS (VALUES ('POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))'::geometry) ) SELECT ST_ConcaveHull( geom, 0.1) AS polygon_hull, ST_ConcaveHull( ST_Points(geom), 0.1) AS points_hull FROM data;", "execution_result": [["0103000000010000000D0000000000000000004E40000000000000244000000000000049400000000000003E4000000000008045400000000000003B400000000000003E40000000000000244000000000000034400000000000003440000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E400000000000002440", "0103000000010000001000000000000000000039400000000000004E40000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E4000000000000024400000000000003E4000000000000024400000000000003440000000000000344000000000008045400000000000003B4000000000000049400000000000003E400000000000804F4000000000000043400000000000804E400000000000C0534000000000000039400000000000004E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2611, "question_en": "For the polygon POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90)), using 0.1 as the concavity parameter, generate both the concave hull of the polygon itself and the concave hull of all its extracted vertices."}
{"id": 492, "function": "ST_ConcaveHull", "question": "基于具有16个顶点的多边形POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))，计算两种凹包：一是直接对多边形几何体应用ST_ConcaveHull函数（凹度参数0.1），二是先提取多边形所有顶点再应用ST_ConcaveHull函数（凹度参数0.1）。", "sql": "WITH data(geom) AS (VALUES ('POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))'::geometry) ) SELECT ST_ConcaveHull( geom, 0.1) AS polygon_hull, ST_ConcaveHull( ST_Points(geom), 0.1) AS points_hull FROM data;", "execution_result": [["0103000000010000000D0000000000000000004E40000000000000244000000000000049400000000000003E4000000000008045400000000000003B400000000000003E40000000000000244000000000000034400000000000003440000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E400000000000002440", "0103000000010000001000000000000000000039400000000000004E40000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E4000000000000024400000000000003E4000000000000024400000000000003440000000000000344000000000008045400000000000003B4000000000000049400000000000003E400000000000804F4000000000000043400000000000804E400000000000C0534000000000000039400000000000004E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2612, "question_en": "Based on the polygon POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90)) with 16 vertices, compute two concave hulls: first by directly applying the ST_ConcaveHull function to the polygon geometry (concavity parameter 0.1), and second by extracting all vertices of the polygon and then applying ST_ConcaveHull (concavity parameter 0.1)."}
{"id": 492, "function": "ST_ConcaveHull", "question": "输出POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))几何对象及其顶点集合分别经过凹包计算（凹度参数为0.1）后得到的两个结果。", "sql": "WITH data(geom) AS (VALUES ('POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))'::geometry) ) SELECT ST_ConcaveHull( geom, 0.1) AS polygon_hull, ST_ConcaveHull( ST_Points(geom), 0.1) AS points_hull FROM data;", "execution_result": [["0103000000010000000D0000000000000000004E40000000000000244000000000000049400000000000003E4000000000008045400000000000003B400000000000003E40000000000000244000000000000034400000000000003440000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E400000000000002440", "0103000000010000001000000000000000000039400000000000004E40000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E4000000000000024400000000000003E4000000000000024400000000000003440000000000000344000000000008045400000000000003B4000000000000049400000000000003E400000000000804F4000000000000043400000000000804E400000000000C0534000000000000039400000000000004E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2613, "question_en": "Output the two results obtained by performing concave hull calculations (with a concavity parameter of 0.1) on the POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90)) geometry object and its vertex set respectively."}
{"id": 492, "function": "ST_ConcaveHull", "question": "将POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))和其顶点集合分别进行凹包计算（凹度参数为0.1），返回两个结果。", "sql": "WITH data(geom) AS (VALUES ('POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))'::geometry) ) SELECT ST_ConcaveHull( geom, 0.1) AS polygon_hull, ST_ConcaveHull( ST_Points(geom), 0.1) AS points_hull FROM data;", "execution_result": [["0103000000010000000D0000000000000000004E40000000000000244000000000000049400000000000003E4000000000008045400000000000003B400000000000003E40000000000000244000000000000034400000000000003440000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E400000000000002440", "0103000000010000001000000000000000000039400000000000004E40000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E4000000000000024400000000000003E4000000000000024400000000000003440000000000000344000000000008045400000000000003B4000000000000049400000000000003E400000000000804F4000000000000043400000000000804E400000000000C0534000000000000039400000000000004E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2614, "question_en": "Compute the concave hull for both the POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90)) and its vertex set (concavity parameter 0.1), and return both results."}
{"id": 492, "function": "ST_ConcaveHull", "question": "查询返回POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))原始几何的凹包（凹度参数0.1）和其顶点集合的凹包（凹度参数0.1）。", "sql": "WITH data(geom) AS (VALUES ('POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))'::geometry) ) SELECT ST_ConcaveHull( geom, 0.1) AS polygon_hull, ST_ConcaveHull( ST_Points(geom), 0.1) AS points_hull FROM data;", "execution_result": [["0103000000010000000D0000000000000000004E40000000000000244000000000000049400000000000003E4000000000008045400000000000003B400000000000003E40000000000000244000000000000034400000000000003440000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E400000000000002440", "0103000000010000001000000000000000000039400000000000004E40000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E4000000000000024400000000000003E4000000000000024400000000000003440000000000000344000000000008045400000000000003B4000000000000049400000000000003E400000000000804F4000000000000043400000000000804E400000000000C0534000000000000039400000000000004E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2615, "question_en": "Query to return the concave hull (concavity parameter 0.1) of the original POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90)) geometry and the concave hull (concavity parameter 0.1) of its vertex set."}
{"id": 494, "function": "ST_ConvexHull", "question": "计算由MULTILINESTRING((100 190,10 8),(150 10, 20 30))和MULTIPOINT(50 5, 150 30, 50 10, 10 10)合并后的几何集合的凸包，并以WKT格式输出。", "sql": "SELECT ST_AsText(ST_ConvexHull( ST_Collect( ST_GeomFromText('MULTILINESTRING((100 190,10 8),(150 10, 20 30))'), ST_GeomFromText('MULTIPOINT(50 5, 150 30, 50 10, 10 10)') )) );", "execution_result": [["POLYGON((50 5,10 8,10 10,100 190,150 30,150 10,50 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2616, "question_en": "Compute the convex hull of the combined geometry collection from MULTILINESTRING((100 190,10 8),(150 10, 20 30)) and MULTIPOINT(50 5, 150 30, 50 10, 10 10), and output it in WKT format."}
{"id": 494, "function": "ST_ConvexHull", "question": "将包含两条线段(100 190到10 8)和(150 10到20 30)的MULTILINESTRING与包含四个点(50 5)、(150 30)、(50 10)、(10 10)的MULTIPOINT合并后，求其凸包并以WKT文本格式输出。", "sql": "SELECT ST_AsText(ST_ConvexHull( ST_Collect( ST_GeomFromText('MULTILINESTRING((100 190,10 8),(150 10, 20 30))'), ST_GeomFromText('MULTIPOINT(50 5, 150 30, 50 10, 10 10)') )) );", "execution_result": [["POLYGON((50 5,10 8,10 10,100 190,150 30,150 10,50 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2617, "question_en": "Merge a MULTILINESTRING containing two line segments ((100 190 to 10 8) and (150 10 to 20 30)) with a MULTIPOINT containing four points (50 5, 150 30, 50 10, 10 10), then compute its convex hull and output it in WKT format."}
{"id": 494, "function": "ST_ConvexHull", "question": "对由两条折线(100 190,10 8)和(150 10,20 30)组成的MULTILINESTRING与四个离散点(50 5)、(150 30)、(50 10)、(10 10)组成的MULTIPOINT进行空间合并后，计算最小凸多边形边界，输出WKT格式结果。", "sql": "SELECT ST_AsText(ST_ConvexHull( ST_Collect( ST_GeomFromText('MULTILINESTRING((100 190,10 8),(150 10, 20 30))'), ST_GeomFromText('MULTIPOINT(50 5, 150 30, 50 10, 10 10)') )) );", "execution_result": [["POLYGON((50 5,10 8,10 10,100 190,150 30,150 10,50 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2618, "question_en": "Compute the minimum convex polygon boundary (in WKT format) after spatially merging a MULTILINESTRING composed of two linestrings ((100 190,10 8) and (150 10,20 30)) with a MULTIPOINT consisting of four discrete points ((50 5), (150 30), (50 10), (10 10))."}
{"id": 494, "function": "ST_ConvexHull", "question": "输出由MULTILINESTRING((100 190,10 8),(150 10, 20 30))和MULTIPOINT(50 5, 150 30, 50 10, 10 10)合并后生成的凸包的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_ConvexHull( ST_Collect( ST_GeomFromText('MULTILINESTRING((100 190,10 8),(150 10, 20 30))'), ST_GeomFromText('MULTIPOINT(50 5, 150 30, 50 10, 10 10)') )) );", "execution_result": [["POLYGON((50 5,10 8,10 10,100 190,150 30,150 10,50 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2619, "question_en": "Output the WKT string representation of the convex hull formed by merging MULTILINESTRING((100 190,10 8),(150 10, 20 30)) and MULTIPOINT(50 5, 150 30, 50 10, 10 10)."}
{"id": 494, "function": "ST_ConvexHull", "question": "将MULTILINESTRING((100 190,10 8),(150 10, 20 30))和MULTIPOINT(50 5, 150 30, 50 10, 10 10)合并后，计算其凸包并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_ConvexHull( ST_Collect( ST_GeomFromText('MULTILINESTRING((100 190,10 8),(150 10, 20 30))'), ST_GeomFromText('MULTIPOINT(50 5, 150 30, 50 10, 10 10)') )) );", "execution_result": [["POLYGON((50 5,10 8,10 10,100 190,150 30,150 10,50 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2620, "question_en": "Combine MULTILINESTRING((100 190,10 8),(150 10, 20 30)) and MULTIPOINT(50 5, 150 30, 50 10, 10 10), then compute their convex hull and output the result in WKT format."}
{"id": 494, "function": "ST_ConvexHull", "question": "输出ST_ConvexHull函数对MULTILINESTRING((100 190,10 8),(150 10, 20 30))和MULTIPOINT(50 5, 150 30, 50 10, 10 10)合并后的几何集合进行凸包计算得到的结果的WKT字符串格式表示。", "sql": "SELECT ST_AsText(ST_ConvexHull( ST_Collect( ST_GeomFromText('MULTILINESTRING((100 190,10 8),(150 10, 20 30))'), ST_GeomFromText('MULTIPOINT(50 5, 150 30, 50 10, 10 10)') )) );", "execution_result": [["POLYGON((50 5,10 8,10 10,100 190,150 30,150 10,50 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2621, "question_en": "Output the WKT string representation of the convex hull result computed by the ST_ConvexHull function on the combined geometry collection of MULTILINESTRING((100 190,10 8),(150 10, 20 30)) and MULTIPOINT(50 5, 150 30, 50 10, 10 10)."}
{"id": 496, "function": "ST_DelaunayTriangles", "question": "基于POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))和以POINT(110 170)为中心、半径为20的圆形缓冲区的并集，生成Delaunay三角网，其中容差参数为0.001，标志参数为1。", "sql": "SELECT ST_DelaunayTriangles( ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20) ),0.001,1) AS dtriag;", "execution_result": [["01050000005C0000000102000000020000005F40034121475E40A12435FB235467400000000000E065400000000000C062400102000000020000003CA505B5D5695D4009F32F6C488F67405F40034121475E40A12435FB235467400102000000020000007C205C32B7795C403E533FDCB3B367403CA505B5D5695D4009F32F6C488F67400102000000020000000000000000805B400000000000C067407C205C32B7795C403E533FDCB3B3674001020000000200000083DFA3CD48865A403E533FDCB3B367400000000000805B400000000000C06740010200000002000000C45AFA4A2A96594009F32F6C488F674083DFA3CD48865A403E533FDCB3B36740010200000002000000A1BFFCBEDEB85840A12435FB23546740C45AFA4A2A96594009F32F6C488F6740010200000002000000A81EFC3FE7F65740ACF001608C046740A1BFFCBEDEB85840A12435FB23546740010200000002000000BEB69509B857574030A081A090A36640A81EFC3FE7F65740ACF001608C046740010200000002000000ED19A0276FE156409ED282DAEA346640BEB69509B857574030A081A090A3664001020000000200000000000000000034400000000000004440ED19A0276FE156409ED282DAEA346640010200000002000000000000000000344000000000000044400000000000405F4000000000000059400102000000020000000000000000405F4000000000000059400000000000E065400000000000C0624001020000000200000058E103C018095F40540FFE9F737B63400000000000405F40000000000000594001020000000200000058E103C018095F40540FFE9F737B63400000000000E065400000000000C0624001020000000200000058E103C018095F40540FFE9F737B634042496AF647A85F40D05F7E5F6FDC634001020000000200000042496AF647A85F40D05F7E5F6FDC63400000000000E065400000000000C0624001020000000200000042496AF647A85F40D05F7E5F6FDC63400AF32F6C480F6040622D7D25154B64400102000000020000000AF32F6C480F6040622D7D25154B64400000000000E065400000000000C062400102000000020000000AF32F6C480F6040622D7D25154B64403E533FDCB3336040C2EFD16624C364400102000000020000003E533FDCB3336040C2EFD16624C364400000000000E065400000000000C062400102000000020000003E533FDCB3336040C2EFD16624C3644000000000004060400000000000406540010200000002000000000000000040604000000000004065400000000000E065400000000000C062400102000000020000003E533FDCB33360403F102E99DBBC6540000000000040604000000000004065400102000000020000003E533FDCB33360403F102E99DBBC65400000000000E065400000000000C0624001020000000200000009F32F6C480F60409ED282DAEA3466403E533FDCB33360403F102E99DBBC654001020000000200000009F32F6C480F60409ED282DAEA3466400000000000E065400000000000C0624001020000000200000042496AF647A85F4030A081A090A3664009F32F6C480F60409ED282DAEA34664001020000000200000042496AF647A85F4030A081A090A366400000000000E065400000000000C0624001020000000200000058E103C018095F40ACF001608C04674042496AF647A85F4030A081A090A3664001020000000200000058E103C018095F40ACF001608C0467400000000000E065400000000000C062400102000000020000005F40034121475E40A12435FB2354674058E103C018095F40ACF001608C0467400102000000020000003CA505B5D5695D4009F32F6C488F674058E103C018095F40ACF001608C04674001020000000200000058E103C018095F40ACF001608C04674009F32F6C480F60409ED282DAEA3466400102000000020000003CA505B5D5695D4009F32F6C488F674009F32F6C480F60409ED282DAEA346640010200000002000000C45AFA4A2A96594009F32F6C488F674009F32F6C480F60409ED282DAEA346640010200000002000000C45AFA4A2A96594009F32F6C488F67403CA505B5D5695D4009F32F6C488F6740010200000002000000C45AFA4A2A96594009F32F6C488F67400000000000805B400000000000C067400102000000020000000000000000805B400000000000C067403CA505B5D5695D4009F32F6C488F67400102000000020000000000000000805B400000000000C0624009F32F6C480F60409ED282DAEA346640010200000002000000C45AFA4A2A96594009F32F6C488F67400000000000805B400000000000C06240010200000002000000A1BFFCBEDEB858405FDBCA04DC2B63400000000000805B400000000000C06240010200000002000000A1BFFCBEDEB858405FDBCA04DC2B6340C45AFA4A2A96594009F32F6C488F6740010200000002000000A81EFC3FE7F65740ACF001608C046740A1BFFCBEDEB858405FDBCA04DC2B6340010200000002000000A81EFC3FE7F65740ACF001608C046740C45AFA4A2A96594009F32F6C488F6740010200000002000000A81EFC3FE7F65740540FFE9F737B6340A1BFFCBEDEB858405FDBCA04DC2B6340010200000002000000A81EFC3FE7F65740540FFE9F737B6340A81EFC3FE7F65740ACF001608C046740010200000002000000ED19A0276FE156409ED282DAEA346640A81EFC3FE7F65740540FFE9F737B6340010200000002000000ED19A0276FE156409ED282DAEA346640A81EFC3FE7F65740ACF001608C04674001020000000200000084598147989856403E102E99DBBC6540A81EFC3FE7F65740540FFE9F737B634001020000000200000084598147989856403E102E99DBBC6540ED19A0276FE156409ED282DAEA3466400102000000020000000000000000003440000000000000444084598147989856403E102E99DBBC65400102000000020000000000000000805640000000000040654084598147989856403E102E99DBBC65400102000000020000000000000000003440000000000000444000000000008056400000000000406540010200000002000000000000000080564000000000004065408459814798985640C2EFD16624C36440010200000002000000000000000000344000000000000044408459814798985640C2EFD16624C3644001020000000200000000000000000049400000000000004E408459814798985640C2EFD16624C364400102000000020000000000000000003440000000000000444000000000000049400000000000004E4001020000000200000000000000000049400000000000004E400000000000405F40000000000000594001020000000200000000000000000049400000000000004E40A1BFFCBEDEB858405FDBCA04DC2B6340010200000002000000A1BFFCBEDEB858405FDBCA04DC2B63400000000000405F400000000000005940010200000002000000A1BFFCBEDEB858405FDBCA04DC2B6340C45AFA4A2A965940F60CD093B7F06240010200000002000000C45AFA4A2A965940F60CD093B7F062400000000000405F400000000000005940010200000002000000C45AFA4A2A965940F60CD093B7F0624084DFA3CD48865A40C2ACC0234CCC624001020000000200000084DFA3CD48865A40C2ACC0234CCC62400000000000405F40000000000000594001020000000200000084DFA3CD48865A40C2ACC0234CCC62400000000000805B400000000000C062400102000000020000000000000000805B400000000000C062400000000000405F4000000000000059400102000000020000000000000000805B400000000000C062407C205C32B7795C40C2ACC0234CCC62400102000000020000007C205C32B7795C40C2ACC0234CCC62400000000000405F4000000000000059400102000000020000007C205C32B7795C40C2ACC0234CCC62403CA505B5D5695D40F60CD093B7F062400102000000020000003CA505B5D5695D40F60CD093B7F062400000000000405F4000000000000059400102000000020000003CA505B5D5695D40F60CD093B7F062405F40034121475E405FDBCA04DC2B63400102000000020000005F40034121475E405FDBCA04DC2B63400000000000405F4000000000000059400102000000020000005F40034121475E405FDBCA04DC2B634058E103C018095F40540FFE9F737B63400102000000020000000000000000805B400000000000C062405F40034121475E405FDBCA04DC2B63400102000000020000000000000000805B400000000000C0624058E103C018095F40540FFE9F737B63400102000000020000007C205C32B7795C40C2ACC0234CCC62405F40034121475E405FDBCA04DC2B6340010200000002000000A1BFFCBEDEB858405FDBCA04DC2B634084DFA3CD48865A40C2ACC0234CCC624001020000000200000000000000000049400000000000004E40A81EFC3FE7F65740540FFE9F737B634001020000000200000000000000000049400000000000004E40BEB69509B8575740D05F7E5F6FDC6340010200000002000000BEB69509B8575740D05F7E5F6FDC6340A81EFC3FE7F65740540FFE9F737B6340010200000002000000ED19A0276FE15640622D7D25154B6440BEB69509B8575740D05F7E5F6FDC6340010200000002000000ED19A0276FE15640622D7D25154B6440A81EFC3FE7F65740540FFE9F737B634001020000000200000000000000008056400000000000406540ED19A0276FE15640622D7D25154B644001020000000200000000000000008056400000000000406540A81EFC3FE7F65740540FFE9F737B63400102000000020000008459814798985640C2EFD16624C36440ED19A0276FE15640622D7D25154B644001020000000200000000000000000049400000000000004E40ED19A0276FE15640622D7D25154B644001020000000200000058E103C018095F40540FFE9F737B634009F32F6C480F60409ED282DAEA34664001020000000200000009F32F6C480F60409ED282DAEA3466400000000000406040000000000040654001020000000200000058E103C018095F40540FFE9F737B63400000000000406040000000000040654001020000000200000058E103C018095F40540FFE9F737B63403E533FDCB3336040C2EFD16624C3644001020000000200000042496AF647A85F40D05F7E5F6FDC63403E533FDCB3336040C2EFD16624C36440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2622, "question_en": "Generate a Delaunay triangulation based on the union of POLYGON((175 150, 20 40, 50 60, 125 100, 175 150)) and a circular buffer centered at POINT(110 170) with a radius of 20, using a tolerance parameter of 0.001 and a flag parameter of 1."}
{"id": 496, "function": "ST_DelaunayTriangles", "question": "将POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))与POINT(110 170)的20单位半径缓冲区进行空间合并后，计算其Delaunay三角剖分，设置容差为0.001，边界标志为1。", "sql": "SELECT ST_DelaunayTriangles( ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20) ),0.001,1) AS dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2623, "question_en": "Perform a spatial union between POLYGON((175 150, 20 40, 50 60, 125 100, 175 150)) and the 20-unit radius buffer of POINT(110 170), then calculate its Delaunay triangulation with a tolerance of 0.001 and boundary flag set to 1."}
{"id": 496, "function": "ST_DelaunayTriangles", "question": "对由POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))和POINT(110 170)生成的20单位半径缓冲区的并集几何体，执行Delaunay三角化操作，参数设置为容差0.001和边界标记1。", "sql": "SELECT ST_DelaunayTriangles( ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20) ),0.001,1) AS dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2624, "question_en": "Perform Delaunay triangulation on the union geometry of a 20-unit radius buffer generated from POLYGON((175 150, 20 40, 50 60, 125 100, 175 150)) and POINT(110 170), with parameters set to tolerance 0.001 and boundary flag 1."}
{"id": 496, "function": "ST_DelaunayTriangles", "question": "输出将POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))与以POINT(110 170)为中心、半径为20的缓冲区合并后，生成的Delaunay三角网，其中容差参数为0.001，标志参数为1。", "sql": "SELECT ST_DelaunayTriangles( ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20) ),0.001,1) AS dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2625, "question_en": "Output the Delaunay triangulation generated by merging the POLYGON((175 150, 20 40, 50 60, 125 100, 175 150)) with a buffer centered at POINT(110 170) and radius of 20, using a tolerance parameter of 0.001 and a flag parameter of 1."}
{"id": 496, "function": "ST_DelaunayTriangles", "question": "输出POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))与POINT(110 170)的20单位半径缓冲区进行空间联合后，经Delaunay三角化处理（容差0.001，边界标志1）的结果。", "sql": "SELECT ST_DelaunayTriangles( ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20) ),0.001,1) AS dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2626, "question_en": "Output the result of Delaunay triangulation (tolerance 0.001, boundary flag 1) applied to the spatial union of POLYGON((175 150, 20 40, 50 60, 125 100, 175 150)) and the 20-unit radius buffer of POINT(110 170)."}
{"id": 496, "function": "ST_DelaunayTriangles", "question": "输出由POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))和POINT(110 170)的20单位缓冲区的并集生成的Delaunay三角网，其中三角化容差为0.001，边界处理标志为1。", "sql": "SELECT ST_DelaunayTriangles( ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20) ),0.001,1) AS dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2627, "question_en": "Output the Delaunay triangulation generated by the union of POLYGON((175 150, 20 40, 50 60, 125 100, 175 150)) and the 20-unit buffer of POINT(110 170), with a triangulation tolerance of 0.001 and a boundary handling flag of 1."}
{"id": 497, "function": "ST_DelaunayTriangles", "question": "对由POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))和以POINT(110 170)为中心、半径为20的圆形缓冲区合并后的几何对象，执行Delaunay三角剖分，结果命名为dtriag。", "sql": "SELECT ST_DelaunayTriangles(ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20))) As dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2628, "question_en": "Perform Delaunay triangulation on the combined geometric object of POLYGON((175 150, 20 40, 50 60, 125 100, 175 150)) and a circular buffer centered at POINT(110 170) with a radius of 20, naming the result as dtriag."}
{"id": 497, "function": "ST_DelaunayTriangles", "question": "将POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))与点POINT(110 170)的20单位半径缓冲区进行几何合并后，生成Delaunay三角网，输出列名为dtriag。", "sql": "SELECT ST_DelaunayTriangles(ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20))) As dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2629, "question_en": "Merge the POLYGON((175 150, 20 40, 50 60, 125 100, 175 150)) with the 20-unit radius buffer of point POINT(110 170), then generate a Delaunay triangulation with the output column named dtriag."}
{"id": 497, "function": "ST_DelaunayTriangles", "question": "计算由顶点在(175 150)、(20 40)、(50 60)、(125 100)、(175 150)的多边形和中心在(110 170)、半径20的圆形缓冲区的并集几何体的Delaunay三角剖分结果，输出到dtriag列。", "sql": "SELECT ST_DelaunayTriangles(ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20))) As dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2630, "question_en": "Compute the Delaunay triangulation result of the union geometry between the polygon with vertices at (175 150), (20 40), (50 60), (125 100), (175 150) and the circular buffer centered at (110 170) with a radius of 20, and output to the dtriag column."}
{"id": 497, "function": "ST_DelaunayTriangles", "question": "输出将POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))与以POINT(110 170)为中心、半径为20的圆形缓冲区合并后，生成的Delaunay三角网。", "sql": "SELECT ST_DelaunayTriangles(ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20))) As dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2631, "question_en": "Output the Delaunay triangulation generated by merging the POLYGON((175 150, 20 40, 50 60, 125 100, 175 150)) with a circular buffer centered at POINT(110 170) and a radius of 20."}
{"id": 497, "function": "ST_DelaunayTriangles", "question": "输出POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))和POINT(110 170)的20单位半径缓冲区几何体的并集经Delaunay三角化后的几何对象。", "sql": "SELECT ST_DelaunayTriangles(ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20))) As dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2632, "question_en": "Output the Delaunay triangulated geometry object of the union of the 20-unit radius buffers around POLYGON((175 150, 20 40, 50 60, 125 100, 175 150)) and POINT(110 170)."}
{"id": 497, "function": "ST_DelaunayTriangles", "question": "输出由POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))与POINT(110 170)的20单位缓冲圆合并后的几何体经Delaunay三角化生成的结果几何。", "sql": "SELECT ST_DelaunayTriangles(ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20))) As dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2633, "question_en": "Output the resulting geometry after performing Delaunay triangulation on the union of POLYGON((175 150, 20 40, 50 60, 125 100, 175 150)) and the 20-unit buffer circle around POINT(110 170)."}
{"id": 499, "function": "ST_DelaunayTriangles", "question": "对三维点集合MULTIPOINT Z(14 14 10, 150 14 100, 34 6 25, 20 10 150)执行Delaunay三角剖分，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_DelaunayTriangles(ST_GeomFromText('MULTIPOINT Z(14 14 10, 150 14 100,34 6 25, 20 10 150)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION Z (POLYGON Z ((14 14 10,20 10 150,34 6 25,14 14 10)),POLYGON Z ((14 14 10,34 6 25,150 14 100,14 14 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2634, "question_en": "Perform Delaunay triangulation on the 3D point set MULTIPOINT Z(14 14 10, 150 14 100, 34 6 25, 20 10 150) and output the result in WKT format."}
{"id": 499, "function": "ST_DelaunayTriangles", "question": "将MULTIPOINT Z(14 14 10, 150 14 100, 34 6 25, 20 10 150)转换为Delaunay三角网，返回WKT文本表示。", "sql": "SELECT ST_AsText(ST_DelaunayTriangles(ST_GeomFromText('MULTIPOINT Z(14 14 10, 150 14 100,34 6 25, 20 10 150)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION Z (POLYGON Z ((14 14 10,20 10 150,34 6 25,14 14 10)),POLYGON Z ((14 14 10,34 6 25,150 14 100,14 14 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2635, "question_en": "Convert the MULTIPOINT Z(14 14 10, 150 14 100, 34 6 25, 20 10 150) into a Delaunay triangulation and return the WKT representation."}
{"id": 499, "function": "ST_DelaunayTriangles", "question": "计算三维点集MULTIPOINT Z(14 14 10, 150 14 100, 34 6 25, 20 10 150)的Delaunay三角剖分结果，并通过ST_AsText函数输出WKT格式字符串。", "sql": "SELECT ST_AsText(ST_DelaunayTriangles(ST_GeomFromText('MULTIPOINT Z(14 14 10, 150 14 100,34 6 25, 20 10 150)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION Z (POLYGON Z ((14 14 10,20 10 150,34 6 25,14 14 10)),POLYGON Z ((14 14 10,34 6 25,150 14 100,14 14 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2636, "question_en": "Compute the Delaunay triangulation of the 3D point set MULTIPOINT Z(14 14 10, 150 14 100, 34 6 25, 20 10 150) and output the result as a WKT format string using the ST_AsText function."}
{"id": 499, "function": "ST_DelaunayTriangles", "question": "输出由三维点MULTIPOINT Z(14 14 10, 150 14 100, 34 6 25, 20 10 150)生成的Delaunay三角网的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_DelaunayTriangles(ST_GeomFromText('MULTIPOINT Z(14 14 10, 150 14 100,34 6 25, 20 10 150)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION Z (POLYGON Z ((14 14 10,20 10 150,34 6 25,14 14 10)),POLYGON Z ((14 14 10,34 6 25,150 14 100,14 14 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2637, "question_en": "Output the WKT string representation of the Delaunay triangulation generated from the 3D points MULTIPOINT Z(14 14 10, 150 14 100, 34 6 25, 20 10 150)."}
{"id": 499, "function": "ST_DelaunayTriangles", "question": "将包含Z坐标的三维点集MULTIPOINT Z(14 14 10, 150 14 100, 34 6 25, 20 10 150)进行Delaunay三角剖分后，返回结果的WKT格式文本。", "sql": "SELECT ST_AsText(ST_DelaunayTriangles(ST_GeomFromText('MULTIPOINT Z(14 14 10, 150 14 100,34 6 25, 20 10 150)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION Z (POLYGON Z ((14 14 10,20 10 150,34 6 25,14 14 10)),POLYGON Z ((14 14 10,34 6 25,150 14 100,14 14 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2638, "question_en": "Perform Delaunay triangulation on the 3D point set MULTIPOINT Z(14 14 10, 150 14 100, 34 6 25, 20 10 150) and return the result in WKT format."}
{"id": 499, "function": "ST_DelaunayTriangles", "question": "对三维坐标点14 14 10、150 14 100、34 6 25和20 10 150组成的MULTIPOINT Z几何对象执行ST_DelaunayTriangles操作，并以WKT字符串形式输出结果。", "sql": "SELECT ST_AsText(ST_DelaunayTriangles(ST_GeomFromText('MULTIPOINT Z(14 14 10, 150 14 100,34 6 25, 20 10 150)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION Z (POLYGON Z ((14 14 10,20 10 150,34 6 25,14 14 10)),POLYGON Z ((14 14 10,34 6 25,150 14 100,14 14 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2639, "question_en": "Perform the ST_DelaunayTriangles operation on the MULTIPOINT Z geometry object composed of the 3D coordinate points 14 14 10, 150 14 100, 34 6 25, and 20 10 150, and output the result as a WKT string."}
{"id": 500, "function": "ST_FilterByM", "question": "对LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)这条折线先计算有效面积，再筛选出M值大于30的顶点，最后以WKT格式输出简化后的几何图形。", "sql": "SELECT ST_AsText(ST_FilterByM(geom,30)) simplified FROM (SELECT ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry) geom) AS foo;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2640, "question_en": "For the LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10), first calculate its effective area, then filter out vertices with M-values greater than 30, and finally output the simplified geometry in WKT format."}
{"id": 500, "function": "ST_FilterByM", "question": "将LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)通过ST_SetEffectiveArea函数处理后，使用ST_FilterByM函数过滤掉M值小于等于30的顶点，最终返回简化结果的WKT文本。", "sql": "SELECT ST_AsText(ST_FilterByM(geom,30)) simplified FROM (SELECT ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry) geom) AS foo;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2641, "question_en": "Process the LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) with the ST_SetEffectiveArea function, then use the ST_FilterByM function to filter out vertices with M values less than or equal to 30, and finally return the WKT text of the simplified result."}
{"id": 500, "function": "ST_FilterByM", "question": "针对由5个顶点组成的折线LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)，先设置其顶点有效面积属性，再按M值阈值30进行筛选，过滤掉M值小于等于30的顶点，输出保留顶点的WKT格式几何体。", "sql": "SELECT ST_AsText(ST_FilterByM(geom,30)) simplified FROM (SELECT ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry) geom) AS foo;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2642, "question_en": "For the linestring LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) composed of 5 vertices, first set its vertex effective area attribute, then filter by an M-value threshold of 30 to remove vertices with M-values less than or equal to 30, and output the remaining vertices in WKT format geometry."}
{"id": 500, "function": "ST_FilterByM", "question": "输出LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)经过ST_SetEffectiveArea计算有效面积后，再通过ST_FilterByM筛选M值大于等于30的顶点后生成的WKT字符串格式的结果。", "sql": "SELECT ST_AsText(ST_FilterByM(geom,30)) simplified FROM (SELECT ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry) geom) AS foo;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2643, "question_en": "Output the WKT string format result of LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) after applying ST_SetEffectiveArea to calculate effective areas, then filtering vertices with M values greater than or equal to 30 using ST_FilterByM."}
{"id": 500, "function": "ST_FilterByM", "question": "将原始折线LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)经过ST_SetEffectiveArea处理并应用ST_FilterByM函数保留M值≥30的顶点后，返回结果的WKT文本表示。", "sql": "SELECT ST_AsText(ST_FilterByM(geom,30)) simplified FROM (SELECT ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry) geom) AS foo;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2644, "question_en": "After processing the original linestring LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) with ST_SetEffectiveArea and applying ST_FilterByM to retain vertices with M values ≥30, return the WKT representation of the result."}
{"id": 500, "function": "ST_FilterByM", "question": "输出一个WKT字符串，该字符串是LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)经过ST_SetEffectiveArea赋予顶点有效面积属性后，再通过ST_FilterByM函数以M值阈值30过滤后的简化几何体。", "sql": "SELECT ST_AsText(ST_FilterByM(geom,30)) simplified FROM (SELECT ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry) geom) AS foo;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2645, "question_en": "Output a WKT string that represents the simplified geometry of LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) after assigning effective area attributes to its vertices using ST_SetEffectiveArea and then filtering by an M-value threshold of 30 with ST_FilterByM."}
{"id": 503, "function": "ST_GeometricMedian", "question": "计算由点(10 10)、(10 40)、(40 10)和(190 190)组成的MULTIPOINT几何对象的质心和几何中位数点，并以WKT格式输出结果。", "sql": "WITH test AS ( SELECT 'MULTIPOINT((10 10), (10 40), (40 10), (190 190))'::geometry geom) SELECT ST_AsText(ST_Centroid(geom)) centroid, ST_AsText(ST_GeometricMedian(geom)) median FROM test;", "execution_result": [["POINT(62.5 62.5)", "POINT(25.01778421249728 25.01778421249728)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2646, "question_en": "Calculate the centroid and geometric median points of the MULTIPOINT geometry composed of points (10 10), (10 40), (40 10), and (190 190), and output the results in WKT format."}
{"id": 503, "function": "ST_GeometricMedian", "question": "对于包含四个点(10 10)、(10 40)、(40 10)和(190 190)的MULTIPOINT几何对象，分别使用ST_Centroid和ST_GeometricMedian函数计算其中心点，并将结果转换为WKT文本格式显示。", "sql": "WITH test AS ( SELECT 'MULTIPOINT((10 10), (10 40), (40 10), (190 190))'::geometry geom) SELECT ST_AsText(ST_Centroid(geom)) centroid, ST_AsText(ST_GeometricMedian(geom)) median FROM test;", "execution_result": [["POINT(62.5 62.5)", "POINT(25.01778421249728 25.01778421249728)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2647, "question_en": "For a MULTIPOINT geometry containing the four points (10 10), (10 40), (40 10), and (190 190), calculate its center point using both the ST_Centroid and ST_GeometricMedian functions, and display the results in WKT text format."}
{"id": 503, "function": "ST_GeometricMedian", "question": "给定一个由坐标(10 10)、(10 40)、(40 10)和(190 190)构成的MULTIPOINT几何对象，查询该几何对象的质心坐标和几何中位数点坐标，并将结果以WKT文本形式返回。", "sql": "WITH test AS ( SELECT 'MULTIPOINT((10 10), (10 40), (40 10), (190 190))'::geometry geom) SELECT ST_AsText(ST_Centroid(geom)) centroid, ST_AsText(ST_GeometricMedian(geom)) median FROM test;", "execution_result": [["POINT(62.5 62.5)", "POINT(25.01778421249728 25.01778421249728)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2648, "question_en": "Given a MULTIPOINT geometry object with coordinates (10 10), (10 40), (40 10), and (190 190), query the centroid coordinates and geometric median point coordinates of this geometry, and return the results in WKT text format."}
{"id": 503, "function": "ST_GeometricMedian", "question": "输出MULTIPOINT((10 10), (10 40), (40 10), (190 190))几何对象的质心坐标和几何中位数坐标的WKT字符串表示。", "sql": "WITH test AS ( SELECT 'MULTIPOINT((10 10), (10 40), (40 10), (190 190))'::geometry geom) SELECT ST_AsText(ST_Centroid(geom)) centroid, ST_AsText(ST_GeometricMedian(geom)) median FROM test;", "execution_result": [["POINT(62.5 62.5)", "POINT(25.01778421249728 25.01778421249728)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2649, "question_en": "Output the WKT string representations of the centroid coordinates and geometric median coordinates of the MULTIPOINT((10 10), (10 40), (40 10), (190 190)) geometry object."}
{"id": 503, "function": "ST_GeometricMedian", "question": "计算并输出由点(10 10)、(10 40)、(40 10)和(190 190)组成的MULTIPOINT几何对象的质心WKT字符串和几何中位数WKT字符串。", "sql": "WITH test AS ( SELECT 'MULTIPOINT((10 10), (10 40), (40 10), (190 190))'::geometry geom) SELECT ST_AsText(ST_Centroid(geom)) centroid, ST_AsText(ST_GeometricMedian(geom)) median FROM test;", "execution_result": [["POINT(62.5 62.5)", "POINT(25.01778421249728 25.01778421249728)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2650, "question_en": "Compute and output the WKT strings for the centroid and geometric median of the MULTIPOINT geometry composed of points (10 10), (10 40), (40 10), and (190 190)."}
{"id": 503, "function": "ST_GeometricMedian", "question": "将MULTIPOINT((10 10), (10 40), (40 10), (190 190))几何对象的ST_Centroid函数计算结果和ST_GeometricMedian函数计算结果分别转换为WKT格式字符串输出。", "sql": "WITH test AS ( SELECT 'MULTIPOINT((10 10), (10 40), (40 10), (190 190))'::geometry geom) SELECT ST_AsText(ST_Centroid(geom)) centroid, ST_AsText(ST_GeometricMedian(geom)) median FROM test;", "execution_result": [["POINT(62.5 62.5)", "POINT(25.01778421249728 25.01778421249728)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2651, "question_en": "Output the WKT format strings of the ST_Centroid and ST_GeometricMedian function results for the MULTIPOINT((10 10), (10 40), (40 10), (190 190)) geometry object."}
{"id": 504, "function": "ST_LineMerge", "question": "将MULTILINESTRING类型的三条线段((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))合并为一条连续的线，并以WKT格式输出。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))' ));", "execution_result": [["LINESTRING(10 160,60 120,120 140,180 120)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2652, "question_en": "Merge the three linestrings of type MULTILINESTRING ((10 160, 60 120), (120 140, 60 120), (120 140, 180 120)) into a single continuous line and output it in WKT format."}
{"id": 504, "function": "ST_LineMerge", "question": "将包含三条线段((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))的MULTILINESTRING几何对象合并为一条连续的线，并以WKT文本格式输出结果。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))' ));", "execution_result": [["LINESTRING(10 160,60 120,120 140,180 120)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2653, "question_en": "Merge the MULTILINESTRING geometry object containing three line segments ((10 160, 60 120), (120 140, 60 120), (120 140, 180 120)) into a single continuous line and output the result in WKT format."}
{"id": 504, "function": "ST_LineMerge", "question": "使用ST_LineMerge函数将MULTILINESTRING对象的三条线段((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))合并为一条连续的线，并通过ST_AsText函数以WKT格式输出合并后的结果。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))' ));", "execution_result": [["LINESTRING(10 160,60 120,120 140,180 120)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2654, "question_en": "Use the ST_LineMerge function to merge the three segments of a MULTILINESTRING object ((10 160, 60 120), (120 140, 60 120), (120 140, 180 120)) into a single continuous line and output the merged result in WKT format using the ST_AsText function."}
{"id": 504, "function": "ST_LineMerge", "question": "输出将MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))合并为LINESTRING后的结果的WKT字符串格式表示。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))' ));", "execution_result": [["LINESTRING(10 160,60 120,120 140,180 120)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2655, "question_en": "Output the WKT string representation of the result after merging MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120)) into a LINESTRING."}
{"id": 504, "function": "ST_LineMerge", "question": "输出由三个线段(10 160到60 120)、(120 140到60 120)和(120 140到180 120)组成的MULTILINESTRING合并后的单一线段的WKT表示。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))' ));", "execution_result": [["LINESTRING(10 160,60 120,120 140,180 120)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2656, "question_en": "Output the WKT representation of the single merged line segment formed by combining the MULTILINESTRING composed of three line segments (10 160 to 60 120), (120 140 to 60 120), and (120 140 to 180 120)."}
{"id": 504, "function": "ST_LineMerge", "question": "输出将包含三个连接线段(10 160,60 120)、(120 140,60 120)和(120 140,180 120)的MULTILINESTRING几何对象合并为单一线对象后的WKT格式结果。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))' ));", "execution_result": [["LINESTRING(10 160,60 120,120 140,180 120)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2657, "question_en": "Output the WKT format result of merging the three connected line segments (10 160,60 120), (120 140,60 120), and (120 140,180 120) from a MULTILINESTRING geometry object into a single line object."}
{"id": 505, "function": "ST_LineMerge", "question": "将三维多线对象MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))合并为可能的最少线对象，并以WKT格式输出。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))' ));", "execution_result": [["LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 -32 11)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2658, "question_en": "Merge the 3D multilinestring object MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11)) into the fewest possible linestring objects and output in WKT format."}
{"id": 505, "function": "ST_LineMerge", "question": "对包含三条三维线段的MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))执行线合并操作，输出合并后的WKT格式结果。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))' ));", "execution_result": [["LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 -32 11)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2659, "question_en": "Perform a line merge operation on the MULTILINESTRING containing three 3D linestrings ((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11)) and output the merged result in WKT format."}
{"id": 505, "function": "ST_LineMerge", "question": "使用ST_LineMerge函数处理由三个三维线段组成的MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))，将结果转换为WKT文本格式输出。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))' ));", "execution_result": [["LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 -32 11)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2660, "question_en": "Process the MULTILINESTRING composed of three 3D line segments ((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11)) using the ST_LineMerge function and output the result in WKT text format."}
{"id": 505, "function": "ST_LineMerge", "question": "输出将三维多线对象MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))进行线段合并操作后生成的WKT字符串格式的结果。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))' ));", "execution_result": [["LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 -32 11)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2661, "question_en": "Output the WKT string format result after performing a line merge operation on the 3D multiline object MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))."}
{"id": 505, "function": "ST_LineMerge", "question": "输出ST_LineMerge函数处理MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6)、(-29 -27 12,-30 -29.7 5)和(-45 -33 1,-46 -32 11))对象后，返回的几何体的WKT格式表示。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))' ));", "execution_result": [["LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 -32 11)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2662, "question_en": "Output the WKT format representation of the geometry returned after processing the MULTILINESTRING objects ((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11)) with the ST_LineMerge function."}
{"id": 505, "function": "ST_LineMerge", "question": "输出通过合并三维多线对象MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))中所有相连线段生成的结果的WKT文本表示。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))' ));", "execution_result": [["LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 -32 11)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2663, "question_en": "Output the WKT representation of the result generated by merging all connected line segments in the 3D multilinestring object MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))."}
{"id": 506, "function": "ST_LineMerge", "question": "将MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))这个由三条线段组成的多线段进行合并操作（不合并具有相反方向的线），并将结果以WKT格式输出。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))', TRUE));", "execution_result": [["MULTILINESTRING((120 50,60 30,10 70),(120 50,180 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2664, "question_en": "Merge the MULTILINESTRING composed of three line segments ((60 30, 10 70), (120 50, 60 30), (120 50, 180 30)) without merging lines with opposite directions, and output the result in WKT format."}
{"id": 506, "function": "ST_LineMerge", "question": "对MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))这个多线段执行ST_LineMerge操作（不合并具有相反方向的线），并将结果转换为WKT文本格式输出。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))', TRUE));", "execution_result": [["MULTILINESTRING((120 50,60 30,10 70),(120 50,180 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2665, "question_en": "Perform the ST_LineMerge operation on the MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30)) (without merging lines with opposite directions) and output the result in WKT format."}
{"id": 506, "function": "ST_LineMerge", "question": "使用ST_LineMerge函数处理MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))这个多线段几何对象（不合并具有相反方向的线），最后通过ST_AsText函数将结果转换为WKT格式文本输出。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))', TRUE));", "execution_result": [["MULTILINESTRING((120 50,60 30,10 70),(120 50,180 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2666, "question_en": "Use the ST_LineMerge function to process the MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30)) multilinestring geometry object (without merging lines with opposite directions), then convert the result to WKT format text output via ST_AsText."}
{"id": 506, "function": "ST_LineMerge", "question": "输出将MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))合并后的结果的WKT字符串（不合并具有相反方向的线）。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))', TRUE));", "execution_result": [["MULTILINESTRING((120 50,60 30,10 70),(120 50,180 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2667, "question_en": "Output the WKT string of the merged result of MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30)) without merging lines with opposite directions."}
{"id": 506, "function": "ST_LineMerge", "question": "输出由三个线段(60 30到10 70)、(120 50到60 30)和(120 50到180 30)组成的MULTILINESTRING合并后结果的WKT表示，注意不合并具有相反方向的线。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))', TRUE));", "execution_result": [["MULTILINESTRING((120 50,60 30,10 70),(120 50,180 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2668, "question_en": "Output the WKT representation of the merged result of a MULTILINESTRING composed of three line segments (60 30 to 10 70), (120 50 to 60 30), and (120 50 to 180 30), ensuring not to merge lines with opposite directions."}
{"id": 506, "function": "ST_LineMerge", "question": "输出将包含三个二维线段的MULTILINESTRING(第一个线段从点(60 30)到(10 70)，第二个从(120 50)到(60 30)，第三个从(120 50)到(180 30))合并的WKT文本格式结果（不合并具有相反方向的线）。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))', TRUE));", "execution_result": [["MULTILINESTRING((120 50,60 30,10 70),(120 50,180 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2669, "question_en": "Output the WKT text format result of merging a MULTILINESTRING containing three 2D line segments (the first segment from point (60 30) to (10 70), the second from (120 50) to (60 30), and the third from (120 50) to (180 30)) without merging lines with opposite directions."}
{"id": 507, "function": "ST_LineMerge", "question": "将MULTILINESTRING类型几何对象的两条线段((-29 -27,-30 -29.7,-36 -31,-45 -33)和(-45.2 -33.2,-46 -32))合并，并以WKT格式输出。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))' ));", "execution_result": [["MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2670, "question_en": "Merge the two linestrings ((-29 -27,-30 -29.7,-36 -31,-45 -33) and (-45.2 -33.2,-46 -32)) of a MULTILINESTRING geometry object and output in WKT format."}
{"id": 507, "function": "ST_LineMerge", "question": "对由点(-29 -27)到(-30 -29.7)到(-36 -31)到(-45 -33)构成的第一条线段和由点(-45.2 -33.2)到(-46 -32)构成的第二条线段组成的MULTILINESTRING对象进行线段合并操作，输出合并后的WKT格式结果。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))' ));", "execution_result": [["MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2671, "question_en": "Perform a line merge operation on the MULTILINESTRING object composed of the first segment from point (-29 -27) to (-30 -29.7) to (-36 -31) to (-45 -33) and the second segment from point (-45.2 -33.2) to (-46 -32), and output the merged result in WKT format."}
{"id": 507, "function": "ST_LineMerge", "question": "使用ST_LineMerge函数处理包含两条线段的MULTILINESTRING对象，第一条线段经过点(-29 -27)、(-30 -29.7)、(-36 -31)和(-45 -33)，第二条线段经过点(-45.2 -33.2)和(-46 -32)，将结果以WKT文本格式输出。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))' ));", "execution_result": [["MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2672, "question_en": "Process a MULTILINESTRING object containing two line segments using the ST_LineMerge function. The first line segment passes through points (-29 -27), (-30 -29.7), (-36 -31), and (-45 -33), while the second line segment passes through points (-45.2 -33.2) and (-46 -32). Output the result in WKT text format."}
{"id": 507, "function": "ST_LineMerge", "question": "输出将MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))合并后的WKT字符串格式结果。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))' ));", "execution_result": [["MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2673, "question_en": "Output the WKT string format result after merging the MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))."}
{"id": 507, "function": "ST_LineMerge", "question": "将包含两条线段（第一条由点(-29 -27)到(-45 -33)，第二条由点(-45.2 -33.2)到(-46 -32)）的MULTILINESTRING对象合并后，返回WKT格式的结果。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))' ));", "execution_result": [["MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2674, "question_en": "Merge the MULTILINESTRING object containing two line segments (the first from point (-29 -27) to (-45 -33), the second from point (-45.2 -33.2) to (-46 -32)) and return the result in WKT format."}
{"id": 507, "function": "ST_LineMerge", "question": "对MULTILINESTRING类型几何体（包含线段组[(-29 -27),(-30 -29.7),(-36 -31),(-45 -33)]和[(-45.2 -33.2),(-46 -32)]）执行线段合并操作，输出结果的标准WKT文本表示。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))' ));", "execution_result": [["MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2675, "question_en": "Perform a line merge operation on a MULTILINESTRING geometry (containing line segments [(-29 -27),(-30 -29.7),(-36 -31),(-45 -33)] and [(-45.2 -33.2),(-46 -32)]) and output the standard WKT representation of the result."}
{"id": 508, "function": "ST_LineMerge", "question": "将MULTILINESTRING类型对象（包含四条线段：(10 160, 60 120)、(120 140, 60 120)、(120 140, 180 120)、(100 180, 120 140)）合并，并以WKT格式输出。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140))' ));", "execution_result": [["MULTILINESTRING((10 160,60 120,120 140),(100 180,120 140),(120 140,180 120))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2676, "question_en": "Merge the MULTILINESTRING object (containing four line segments: (10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140)) and output it in WKT format."}
{"id": 508, "function": "ST_LineMerge", "question": "对由四个二维线段(10 160到60 120)、(120 140到60 120)、(120 140到180 120)、(100 180到120 140)组成的MULTILINESTRING几何对象执行线段合并操作，并返回结果的WKT文本表示。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140))' ));", "execution_result": [["MULTILINESTRING((10 160,60 120,120 140),(100 180,120 140),(120 140,180 120))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2677, "question_en": "Perform a line merge operation on the MULTILINESTRING geometry composed of four 2D line segments (10 160 to 60 120), (120 140 to 60 120), (120 140 to 180 120), and (100 180 to 120 140), and return the WKT representation of the result."}
{"id": 508, "function": "ST_LineMerge", "question": "将包含四个二维线段的MULTILINESTRING对象（具体坐标：(10 160,60 120)、(120 140,60 120)、(120 140,180 120)、(100 180,120 140)）通过ST_LineMerge函数合并，并用ST_AsText函数输出WKT格式结果。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140))' ));", "execution_result": [["MULTILINESTRING((10 160,60 120,120 140),(100 180,120 140),(120 140,180 120))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2678, "question_en": "Merge a MULTILINESTRING object containing four 2D line segments (coordinates: (10 160,60 120), (120 140,60 120), (120 140,180 120), (100 180,120 140)) using the ST_LineMerge function and output the result in WKT format with ST_AsText."}
{"id": 508, "function": "ST_LineMerge", "question": "输出将MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140))合并后生成的结果的WKT字符串格式表示。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140))' ));", "execution_result": [["MULTILINESTRING((10 160,60 120,120 140),(100 180,120 140),(120 140,180 120))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2679, "question_en": "Output the WKT string representation of the result after merging the MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140))."}
{"id": 508, "function": "ST_LineMerge", "question": "输出对由线段(10 160到60 120)、(120 140到60 120)、(120 140到180 120)、(100 180到120 140)组成的MULTILINESTRING进行线合并操作后的WKT文本格式结果。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140))' ));", "execution_result": [["MULTILINESTRING((10 160,60 120,120 140),(100 180,120 140),(120 140,180 120))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2680, "question_en": "Output the WKT text format result of merging the MULTILINESTRING composed of line segments (10 160 to 60 120), (120 140 to 60 120), (120 140 to 180 120), and (100 180 to 120 140) into a single linestring."}
{"id": 508, "function": "ST_LineMerge", "question": "输出ST_LineMerge函数处理包含四个线段(10 160,60 120)、(120 140,60 120)、(120 140,180 120)、(100 180,120 140)的MULTILINESTRING几何对象后生成的结果的WKT格式字符串表示。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140))' ));", "execution_result": [["MULTILINESTRING((10 160,60 120,120 140),(100 180,120 140),(120 140,180 120))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2681, "question_en": "Output the WKT format string representation of the result generated by the ST_LineMerge function processing a MULTILINESTRING geometry object containing four line segments: (10 160,60 120), (120 140,60 120), (120 140,180 120), (100 180,120 140)."}
{"id": 509, "function": "ST_MaximumInscribedCircle", "question": "计算由外环顶点坐标(40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180)和内环顶点坐标(60 140, 50 90, 90 140, 60 140)组成的多边形内最大内接圆的半径、圆心坐标（WKT格式）及圆心到多边形边界的最近点坐标（WKT格式）。", "sql": "SELECT radius, ST_AsText(center) AS center, ST_AsText(nearest) AS nearest FROM ST_MaximumInscribedCircle( 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))');", "execution_result": [[45.18896951053177, "POINT(96.9287109375 76.3232421875)", "POINT(61.64205411585366 104.55256764481707)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2682, "question_en": "Calculate the radius of the largest inscribed circle, the coordinates of its center (in WKT format), and the coordinates of the nearest point on the polygon boundary to the center (in WKT format) for a polygon defined by the outer ring vertices (40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180) and inner ring vertices (60 140, 50 90, 90 140, 60 140)."}
{"id": 509, "function": "ST_MaximumInscribedCircle", "question": "对于复杂多边形POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))，返回其最大内接圆的半径值、圆心位置（WKT文本）以及圆心到多边形边缘的最近点位置（WKT文本）。", "sql": "SELECT radius, ST_AsText(center) AS center, ST_AsText(nearest) AS nearest FROM ST_MaximumInscribedCircle( 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))');", "execution_result": [[45.18896951053177, "POINT(96.9287109375 76.3232421875)", "POINT(61.64205411585366 104.55256764481707)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2683, "question_en": "For the complex polygon POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140)), return the radius of its largest inscribed circle, the center position (WKT text), and the nearest point on the polygon boundary to the center (WKT text)."}
{"id": 509, "function": "ST_MaximumInscribedCircle", "question": "对由外环(40 180→110 160→180 180→180 120→140 90→160 40→80 10→70 40→20 50→40 180)和内环孔洞(60 140→50 90→90 140→60 140)定义的多边形执行最大内接圆分析，输出圆的半径数值、圆心几何对象文本表示和边界最近点几何对象文本表示。", "sql": "SELECT radius, ST_AsText(center) AS center, ST_AsText(nearest) AS nearest FROM ST_MaximumInscribedCircle( 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))');", "execution_result": [[45.18896951053177, "POINT(96.9287109375 76.3232421875)", "POINT(61.64205411585366 104.55256764481707)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2684, "question_en": "Perform a maximum inscribed circle analysis on the polygon defined by the outer ring (40 180→110 160→180 180→180 120→140 90→160 40→80 10→70 40→20 50→40 180) and the inner ring hole (60 140→50 90→90 140→60 140), output the circle's radius value, the geometric object text representation of the center point, and the geometric object text representation of the closest boundary point."}
{"id": 509, "function": "ST_MaximumInscribedCircle", "question": "输出POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))的最大内切圆的半径、圆心坐标（WKT格式）以及圆心到多边形边界的最近点坐标（WKT格式）。", "sql": "SELECT radius, ST_AsText(center) AS center, ST_AsText(nearest) AS nearest FROM ST_MaximumInscribedCircle('POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))');", "execution_result": [[45.18896951053177, "POINT(96.9287109375 76.3232421875)", "POINT(61.64205411585366 104.55256764481707)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2685, "question_en": "Output the radius of the maximum inscribed circle, the center coordinates (in WKT format), and the nearest point coordinates on the polygon boundary to the center (in WKT format) for the POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))."}
{"id": 509, "function": "ST_MaximumInscribedCircle", "question": "以WKT字符串格式返回POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))的最大内切圆的圆心位置和圆心到边界的最近点位置，以及返回最大内切圆的半径值。", "sql": "SELECT radius, ST_AsText(center) AS center, ST_AsText(nearest) AS nearest FROM ST_MaximumInscribedCircle('POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))');", "execution_result": [[45.18896951053177, "POINT(96.9287109375 76.3232421875)", "POINT(61.64205411585366 104.55256764481707)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2686, "question_en": "Return the center position of the maximum inscribed circle and the closest point on the boundary from the center, as well as the radius value of the maximum inscribed circle, for the POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140)) in WKT string format."}
{"id": 509, "function": "ST_MaximumInscribedCircle", "question": "计算并输出带内环的多边形POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))的最大内切圆信息，包括半径数值、圆心坐标（WKT格式）和边界最近点坐标（WKT格式）。", "sql": "SELECT radius, ST_AsText(center) AS center, ST_AsText(nearest) AS nearest FROM ST_MaximumInscribedCircle('POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))');", "execution_result": [[45.18896951053177, "POINT(96.9287109375 76.3232421875)", "POINT(61.64205411585366 104.55256764481707)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2687, "question_en": "Compute and output the maximum inscribed circle information for the polygon with an inner ring POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140)), including the radius value, center coordinates (in WKT format), and closest boundary point coordinates (in WKT format)."}
{"id": 510, "function": "ST_LargestEmptyCircle", "question": "在由三条折线组成的复合线MULTILINESTRING(第一条折线点坐标依次为(10 100, 60 180, 130 150, 190 160)，第二条折线点坐标依次为(20 50, 70 70, 90 20, 110 40)，第三条折线点坐标依次为(160 30, 100 100, 180 100))中，计算最大空圆的半径、圆心位置和最近边界点。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( 'MULTILINESTRING ( (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), (160 30, 100 100, 180 100))');", "execution_result": [[39.26054532232516, "010100000000000000C0CB4E400000000060165B40", "010100000000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2688, "question_en": "In the MULTILINESTRING composed of three polylines (the first polyline's point coordinates are (10 100, 60 180, 130 150, 190 160), the second polyline's point coordinates are (20 50, 70 70, 90 20, 110 40), and the third polyline's point coordinates are (160 30, 100 100, 180 100)), calculate the radius, center position, and nearest boundary point of the largest empty circle."}
{"id": 510, "function": "ST_LargestEmptyCircle", "question": "基于包含三条折线的复合线(第一条折线连接点(10 100)到(60 180)到(130 150)到(190 160)，第二条折线连接点(20 50)到(70 70)到(90 20)到(110 40)，第三条折线连接点(160 30)到(100 100)到(180 100))，查询该空间内可容纳的最大空圆的半径值、圆心和距离最近的边界点。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( 'MULTILINESTRING ( (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), (160 30, 100 100, 180 100))');", "execution_result": [[39.26054532232516, "010100000000000000C0CB4E400000000060165B40", "010100000000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2689, "question_en": "Based on a composite line containing three polylines (the first polyline connects points (10 100) to (60 180) to (130 150) to (190 160), the second polyline connects points (20 50) to (70 70) to (90 20) to (110 40), and the third polyline connects points (160 30) to (100 100) to (180 100)), query the radius, center, and nearest boundary point of the largest empty circle within this spatial area."}
{"id": 510, "function": "ST_LargestEmptyCircle", "question": "针对由三个线段组成的复合线(第一条线段顶点为(10 100)、(60 180)、(130 150)、(190 160)，第二条线段顶点为(20 50)、(70 70)、(90 20)、(110 40)，第三条线段顶点为(160 30)、(100 100)、(180 100))，执行最大空圆分析并返回圆的半径长度、圆心和最近边界点。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( 'MULTILINESTRING ( (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), (160 30, 100 100, 180 100))');", "execution_result": [[39.26054532232516, "010100000000000000C0CB4E400000000060165B40", "010100000000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2690, "question_en": "For a composite line consisting of three segments (the first segment with vertices (10 100), (60 180), (130 150), (190 160); the second segment with vertices (20 50), (70 70), (90 20), (110 40); the third segment with vertices (160 30), (100 100), (180 100)), perform the largest empty circle analysis and return the circle's radius, center point, and the closest boundary point."}
{"id": 510, "function": "ST_LargestEmptyCircle", "question": "输出由MULTILINESTRING对象（包含三条折线：(10 100, 60 180, 130 150, 190 160)、(20 50, 70 70, 90 20, 110 40)、(160 30, 100 100, 180 100)）计算得到的最大空圆的半径、圆心和最近边界点。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle('MULTILINESTRING ( (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), (160 30, 100 100, 180 100))');", "execution_result": [[39.26054532232516, "010100000000000000C0CB4E400000000060165B40", "010100000000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2691, "question_en": "Output the radius, center, and closest boundary point of the largest empty circle calculated from a MULTILINESTRING object (containing three polylines: (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), (160 30, 100 100, 180 100))."}
{"id": 510, "function": "ST_LargestEmptyCircle", "question": "返回MULTILINESTRING（由折线(10 100, 60 180, 130 150, 190 160)、(20 50, 70 70, 90 20, 110 40)、(160 30, 100 100, 180 100)组成）的最大空圆分析结果，包含半径值、圆心和最近边界点三个字段。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle('MULTILINESTRING ( (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), (160 30, 100 100, 180 100))');", "execution_result": [[39.26054532232516, "010100000000000000C0CB4E400000000060165B40", "010100000000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2692, "question_en": "Return the largest empty circle analysis result of the MULTILINESTRING (composed of polylines (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), (160 30, 100 100, 180 100)), including the three fields: radius value, center point, and nearest boundary point."}
{"id": 510, "function": "ST_LargestEmptyCircle", "question": "查询由三条折线（第一条：10 100→60 180→130 150→190 160；第二条：20 50→70 70→90 20→110 40；第三条：160 30→100 100→180 100）构成的多线对象中最大空圆的半径数值、圆心几何和最近边界点几何。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle('MULTILINESTRING ( (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), (160 30, 100 100, 180 100))');", "execution_result": [[39.26054532232516, "010100000000000000C0CB4E400000000060165B40", "010100000000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2693, "question_en": "Query the radius value of the largest empty circle, its center geometry, and the nearest boundary point geometry in the multiline object composed of three polylines (first: 10 100→60 180→130 150→190 160; second: 20 50→70 70→90 20→110 40; third: 160 30→100 100→180 100)."}
{"id": 511, "function": "ST_LargestEmptyCircle", "question": "在由MULTIPOINT ((70 50), (60 130), (130 150), (80 90))和POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))合并而成的几何集合中，以POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))为边界，计算最大空圆的半径、圆心位置和最近边界点。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( ST_Collect( 'MULTIPOINT ((70 50), (60 130), (130 150), (80 90))'::geometry, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry), 0, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry );", "execution_result": [[19.903875992225455, "010100000055555555554F5840ABAAAAAAAAFC5840", "010100000000000000000054400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2694, "question_en": "In the geometry collection formed by combining MULTIPOINT ((70 50), (60 130), (130 150), (80 90)) and POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190)), using POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190)) as the boundary, calculate the radius, center location, and closest boundary point of the largest empty circle."}
{"id": 511, "function": "ST_LargestEmptyCircle", "question": "给定几何集合包含点集MULTIPOINT ((70 50), (60 130), (130 150), (80 90))和多边形POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))，并以该多边形为约束边界，查询其最大空圆的半径值、圆心及最近边界点。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( ST_Collect( 'MULTIPOINT ((70 50), (60 130), (130 150), (80 90))'::geometry, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry), 0, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry );", "execution_result": [[19.903875992225455, "010100000055555555554F5840ABAAAAAAAAFC5840", "010100000000000000000054400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2695, "question_en": "Given a geometry collection containing a multipoint MULTIPOINT ((70 50), (60 130), (130 150), (80 90)) and a polygon POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190)), use the polygon as a constraint boundary to query the radius, center, and nearest boundary point of its largest empty circle."}
{"id": 511, "function": "ST_LargestEmptyCircle", "question": "基于点集MULTIPOINT ((70 50), (60 130), (130 150), (80 90))与多边形POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))的几何集合，在完全相同的多边形边界POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))内，返回最大空圆的半径、圆心几何和最近边界点几何。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( ST_Collect( 'MULTIPOINT ((70 50), (60 130), (130 150), (80 90))'::geometry, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry), 0, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry );", "execution_result": [[19.903875992225455, "010100000055555555554F5840ABAAAAAAAAFC5840", "010100000000000000000054400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2696, "question_en": "Based on the geometric collection of the multipoint MULTIPOINT ((70 50), (60 130), (130 150), (80 90)) and the polygon POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190)), return the radius, center geometry, and closest boundary point geometry of the largest empty circle within the exact same polygon boundary POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))."}
{"id": 511, "function": "ST_LargestEmptyCircle", "question": "输出在由MULTIPOINT ((70 50), (60 130), (130 150), (80 90))和POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))组成的几何集合中，以POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))为边界时，计算得到的最大空圆的半径、中心点和最近边界点。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( ST_Collect( 'MULTIPOINT ((70 50), (60 130), (130 150), (80 90))'::geometry, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry), 0, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry );", "execution_result": [[19.903875992225455, "010100000055555555554F5840ABAAAAAAAAFC5840", "010100000000000000000054400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2697, "question_en": "Output the radius, center point, and nearest boundary point of the largest empty circle calculated within the geometry collection formed by MULTIPOINT ((70 50), (60 130), (130 150), (80 90)) and POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190)), using POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190)) as the boundary."}
{"id": 511, "function": "ST_LargestEmptyCircle", "question": "输出ST_LargestEmptyCircle函数在由MULTIPOINT ((70 50), (60 130), (130 150), (80 90))和POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))组成的几何集合中，以POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))为边界时，计算得到的最大空圆的半径、中心点和最近边界点。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( ST_Collect( 'MULTIPOINT ((70 50), (60 130), (130 150), (80 90))'::geometry, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry), 0, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry );", "execution_result": [[19.903875992225455, "010100000055555555554F5840ABAAAAAAAAFC5840", "010100000000000000000054400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2698, "question_en": "Output the radius, center point, and nearest boundary point of the largest empty circle calculated by the ST_LargestEmptyCircle function within the geometric collection composed of MULTIPOINT ((70 50), (60 130), (130 150), (80 90)) and POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190)), using POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190)) as the boundary."}
{"id": 511, "function": "ST_LargestEmptyCircle", "question": "输出在由MULTIPOINT ((70 50), (60 130), (130 150), (80 90))和POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))组成的几何集合中，以POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))为边界时，计算得到的最大空圆的半径数值、中心点几何对象和最近边界点几何对象。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( ST_Collect( 'MULTIPOINT ((70 50), (60 130), (130 150), (80 90))'::geometry, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry), 0, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry );", "execution_result": [[19.903875992225455, "010100000055555555554F5840ABAAAAAAAAFC5840", "010100000000000000000054400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2699, "question_en": "Output the radius value, center point geometry object, and nearest boundary point geometry object of the largest empty circle calculated within the geometric collection composed of MULTIPOINT ((70 50), (60 130), (130 150), (80 90)) and POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190)), using POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190)) as the boundary."}
{"id": 513, "function": "ST_MinimumBoundingCircle", "question": "将LINESTRING(55 75,125 150)这条折线和坐标为(20, 80)的点合并为一个集合，然后计算包含这个集合的最小外接圆，并以WKT格式输出，设置参数8以用8段线段来近似表示四分之一圆。", "sql": "SELECT ST_AsText(ST_MinimumBoundingCircle( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)), 8 )) AS wktmbc;", "execution_result": [["POLYGON((72.5 178.4024474346694,84.86920388664029 177.18418718546332,96.76306620464646 173.57622349601382,107.72451249529237 167.71720838753708,117.33230052487836 159.83230052487838,125.21720838753708 150.22451249529237,131.07622349601382 139.26306620464646,134.68418718546332 127.3692038866403,135.9024474346694 115,134.68418718546332 102.63079611335971,131.07622349601382 90.73693379535354,125.21720838753708 79.77548750470766,117.33230052487838 70.16769947512164,107.72451249529237 62.282791612462916,96.76306620464648 56.42377650398619,84.86920388664032 52.815812814536685,72.50000000000001 51.59755256533059,60.13079611335969 52.815812814536685,48.236933795353536 56.42377650398618,37.27548750470765 62.28279161246291,27.667699475121637 70.16769947512162,19.782791612462923 79.77548750470763,13.923776503986204 90.7369337953535,10.315812814536692 102.63079611335968,9.097552565330588 114.99999999999999,10.315812814536685 127.3692038866403,13.923776503986197 139.2630662046465,19.78279161246291 150.22451249529234,27.667699475121623 159.83230052487835,37.275487504707634 167.71720838753708,48.236933795353494 173.5762234960138,60.13079611335967 177.18418718546332,72.49999999999999 178.4024474346694))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2700, "question_en": "Combine the LINESTRING(55 75,125 150) and the point at (20, 80) into a collection, then calculate the minimum bounding circle that contains this collection, and output it in WKT format with parameter 8 to approximate quarter-circles using 8 line segments."}
{"id": 513, "function": "ST_MinimumBoundingCircle", "question": "以LINESTRING(55 75,125 150)和点(20, 80)为输入，先通过ST_Collect函数将它们合并为一个几何集合，再使用ST_MinimumBoundingCircle函数计算该集合的最小外接圆（设置参数8以用8段线段来近似表示四分之一圆），最后用ST_AsText函数以WKT格式输出这个圆。", "sql": "SELECT ST_AsText(ST_MinimumBoundingCircle( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)), 8 )) AS wktmbc;", "execution_result": [["POLYGON((72.5 178.4024474346694,84.86920388664029 177.18418718546332,96.76306620464646 173.57622349601382,107.72451249529237 167.71720838753708,117.33230052487836 159.83230052487838,125.21720838753708 150.22451249529237,131.07622349601382 139.26306620464646,134.68418718546332 127.3692038866403,135.9024474346694 115,134.68418718546332 102.63079611335971,131.07622349601382 90.73693379535354,125.21720838753708 79.77548750470766,117.33230052487838 70.16769947512164,107.72451249529237 62.282791612462916,96.76306620464648 56.42377650398619,84.86920388664032 52.815812814536685,72.50000000000001 51.59755256533059,60.13079611335969 52.815812814536685,48.236933795353536 56.42377650398618,37.27548750470765 62.28279161246291,27.667699475121637 70.16769947512162,19.782791612462923 79.77548750470763,13.923776503986204 90.7369337953535,10.315812814536692 102.63079611335968,9.097552565330588 114.99999999999999,10.315812814536685 127.3692038866403,13.923776503986197 139.2630662046465,19.78279161246291 150.22451249529234,27.667699475121623 159.83230052487835,37.275487504707634 167.71720838753708,48.236933795353494 173.5762234960138,60.13079611335967 177.18418718546332,72.49999999999999 178.4024474346694))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2701, "question_en": "Using LINESTRING(55 75,125 150) and point (20, 80) as inputs, first combine them into a geometry collection with ST_Collect, then compute the minimum bounding circle of this collection using ST_MinimumBoundingCircle (with parameter 8 to approximate quarter circles using 8 segments), and finally output this circle in WKT format using ST_AsText."}
{"id": 513, "function": "ST_MinimumBoundingCircle", "question": "给定一条起点为(55,75)、终点为(125,150)的线段和一个位于(20,80)的点，先合并这两个几何对象，然后计算它们的最小外接圆（用8段线段来近似表示四分之一圆），并以WKT文本格式输出该圆。", "sql": "SELECT ST_AsText(ST_MinimumBoundingCircle( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)), 8 )) AS wktmbc;", "execution_result": [["POLYGON((72.5 178.4024474346694,84.86920388664029 177.18418718546332,96.76306620464646 173.57622349601382,107.72451249529237 167.71720838753708,117.33230052487836 159.83230052487838,125.21720838753708 150.22451249529237,131.07622349601382 139.26306620464646,134.68418718546332 127.3692038866403,135.9024474346694 115,134.68418718546332 102.63079611335971,131.07622349601382 90.73693379535354,125.21720838753708 79.77548750470766,117.33230052487838 70.16769947512164,107.72451249529237 62.282791612462916,96.76306620464648 56.42377650398619,84.86920388664032 52.815812814536685,72.50000000000001 51.59755256533059,60.13079611335969 52.815812814536685,48.236933795353536 56.42377650398618,37.27548750470765 62.28279161246291,27.667699475121637 70.16769947512162,19.782791612462923 79.77548750470763,13.923776503986204 90.7369337953535,10.315812814536692 102.63079611335968,9.097552565330588 114.99999999999999,10.315812814536685 127.3692038866403,13.923776503986197 139.2630662046465,19.78279161246291 150.22451249529234,27.667699475121623 159.83230052487835,37.275487504707634 167.71720838753708,48.236933795353494 173.5762234960138,60.13079611335967 177.18418718546332,72.49999999999999 178.4024474346694))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2702, "question_en": "Given a line segment with start point (55,75) and end point (125,150), and a point located at (20,80), first merge these two geometric objects, then calculate their minimum bounding circle (approximating quarter circles with 8 segments), and output the circle in WKT text format."}
{"id": 513, "function": "ST_MinimumBoundingCircle", "question": "输出LINESTRING(55 75,125 150)和二维点POINT(20 80)合并后，其最小外接圆的WKT字符串格式表示（用8段线段来近似表示四分之一圆）。", "sql": "SELECT ST_AsText(ST_MinimumBoundingCircle( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)), 8 )) AS wktmbc;", "execution_result": [["POLYGON((72.5 178.4024474346694,84.86920388664029 177.18418718546332,96.76306620464646 173.57622349601382,107.72451249529237 167.71720838753708,117.33230052487836 159.83230052487838,125.21720838753708 150.22451249529237,131.07622349601382 139.26306620464646,134.68418718546332 127.3692038866403,135.9024474346694 115,134.68418718546332 102.63079611335971,131.07622349601382 90.73693379535354,125.21720838753708 79.77548750470766,117.33230052487838 70.16769947512164,107.72451249529237 62.282791612462916,96.76306620464648 56.42377650398619,84.86920388664032 52.815812814536685,72.50000000000001 51.59755256533059,60.13079611335969 52.815812814536685,48.236933795353536 56.42377650398618,37.27548750470765 62.28279161246291,27.667699475121637 70.16769947512162,19.782791612462923 79.77548750470763,13.923776503986204 90.7369337953535,10.315812814536692 102.63079611335968,9.097552565330588 114.99999999999999,10.315812814536685 127.3692038866403,13.923776503986197 139.2630662046465,19.78279161246291 150.22451249529234,27.667699475121623 159.83230052487835,37.275487504707634 167.71720838753708,48.236933795353494 173.5762234960138,60.13079611335967 177.18418718546332,72.49999999999999 178.4024474346694))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2703, "question_en": "Output the WKT string representation of the minimum bounding circle (approximated with 8 segments per quarter-circle) after merging LINESTRING(55 75,125 150) and the 2D point POINT(20 80)."}
{"id": 513, "function": "ST_MinimumBoundingCircle", "question": "将LINESTRING(55 75,125 150)与POINT(20 80)几何集合的最小外接圆转换为WKT格式文本，其中用8段线段来近似表示四分之一圆。", "sql": "SELECT ST_AsText(ST_MinimumBoundingCircle( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)), 8 )) AS wktmbc;", "execution_result": [["POLYGON((72.5 178.4024474346694,84.86920388664029 177.18418718546332,96.76306620464646 173.57622349601382,107.72451249529237 167.71720838753708,117.33230052487836 159.83230052487838,125.21720838753708 150.22451249529237,131.07622349601382 139.26306620464646,134.68418718546332 127.3692038866403,135.9024474346694 115,134.68418718546332 102.63079611335971,131.07622349601382 90.73693379535354,125.21720838753708 79.77548750470766,117.33230052487838 70.16769947512164,107.72451249529237 62.282791612462916,96.76306620464648 56.42377650398619,84.86920388664032 52.815812814536685,72.50000000000001 51.59755256533059,60.13079611335969 52.815812814536685,48.236933795353536 56.42377650398618,37.27548750470765 62.28279161246291,27.667699475121637 70.16769947512162,19.782791612462923 79.77548750470763,13.923776503986204 90.7369337953535,10.315812814536692 102.63079611335968,9.097552565330588 114.99999999999999,10.315812814536685 127.3692038866403,13.923776503986197 139.2630662046465,19.78279161246291 150.22451249529234,27.667699475121623 159.83230052487835,37.275487504707634 167.71720838753708,48.236933795353494 173.5762234960138,60.13079611335967 177.18418718546332,72.49999999999999 178.4024474346694))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2704, "question_en": "Convert the minimum bounding circle of the geometric collection consisting of LINESTRING(55 75,125 150) and POINT(20 80) into WKT format text, using 8 segments to approximate a quarter circle."}
{"id": 513, "function": "ST_MinimumBoundingCircle", "question": "以WKT字符串形式返回包含LINESTRING(55 75,125 150)和POINT(20 80)的几何集合的最小外接圆（用8段线段来近似表示四分之一圆）。", "sql": "SELECT ST_AsText(ST_MinimumBoundingCircle( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)), 8 )) AS wktmbc;", "execution_result": [["POLYGON((72.5 178.4024474346694,84.86920388664029 177.18418718546332,96.76306620464646 173.57622349601382,107.72451249529237 167.71720838753708,117.33230052487836 159.83230052487838,125.21720838753708 150.22451249529237,131.07622349601382 139.26306620464646,134.68418718546332 127.3692038866403,135.9024474346694 115,134.68418718546332 102.63079611335971,131.07622349601382 90.73693379535354,125.21720838753708 79.77548750470766,117.33230052487838 70.16769947512164,107.72451249529237 62.282791612462916,96.76306620464648 56.42377650398619,84.86920388664032 52.815812814536685,72.50000000000001 51.59755256533059,60.13079611335969 52.815812814536685,48.236933795353536 56.42377650398618,37.27548750470765 62.28279161246291,27.667699475121637 70.16769947512162,19.782791612462923 79.77548750470763,13.923776503986204 90.7369337953535,10.315812814536692 102.63079611335968,9.097552565330588 114.99999999999999,10.315812814536685 127.3692038866403,13.923776503986197 139.2630662046465,19.78279161246291 150.22451249529234,27.667699475121623 159.83230052487835,37.275487504707634 167.71720838753708,48.236933795353494 173.5762234960138,60.13079611335967 177.18418718546332,72.49999999999999 178.4024474346694))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2705, "question_en": "Return the minimum bounding circle (approximated with 8 segments per quarter circle) of the geometry collection containing LINESTRING(55 75,125 150) and POINT(20 80) as a WKT string."}
{"id": 514, "function": "ST_MinimumBoundingRadius", "question": "计算由顶点坐标26426 65078、26531 65242、26075 65136、26096 65427、26426 65078构成的闭合多边形的最小外接圆的圆心坐标（WKT格式）和半径值。", "sql": "SELECT ST_AsText(center), radius FROM ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))');", "execution_result": [["POINT(26284.84180271327 65267.114509082545)", 247.43604559140658]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2706, "question_en": "Calculate the center coordinates (in WKT format) and radius of the minimum bounding circle for the closed polygon defined by vertices 26426 65078, 26531 65242, 26075 65136, 26096 65427, 26426 65078."}
{"id": 514, "function": "ST_MinimumBoundingRadius", "question": "对于多边形POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))，返回其最小包围圆的圆心位置（文本格式）和半径长度。", "sql": "SELECT ST_AsText(center), radius FROM ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))');", "execution_result": [["POINT(26284.84180271327 65267.114509082545)", 247.43604559140658]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2707, "question_en": "For the polygon POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078)), return the center position (in text format) and radius length of its minimum bounding circle."}
{"id": 514, "function": "ST_MinimumBoundingRadius", "question": "如何用PostGIS获取由点26426 65078、26531 65242、26075 65136、26096 65427、26426 65078组成的多边形的最小外接圆的中心点（文本表示）和半径数值？", "sql": "SELECT ST_AsText(center), radius FROM ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))');", "execution_result": [["POINT(26284.84180271327 65267.114509082545)", 247.43604559140658]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2708, "question_en": "How to use PostGIS to get the center point (in text representation) and radius value of the minimum bounding circle for the polygon formed by points 26426 65078, 26531 65242, 26075 65136, 26096 65427, 26426 65078?"}
{"id": 514, "function": "ST_MinimumBoundingRadius", "question": "输出POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))的最小外接圆的圆心（WKT格式）和半径值。", "sql": "SELECT ST_AsText(center), radius FROM ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))');", "execution_result": [["POINT(26284.84180271327 65267.114509082545)", 247.43604559140658]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2709, "question_en": "Output the center (in WKT format) and radius value of the minimum bounding circle for POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))."}
{"id": 514, "function": "ST_MinimumBoundingRadius", "question": "将POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))的最小外接圆圆心以WKT文本形式输出，并返回该圆的半径数值。", "sql": "SELECT ST_AsText(center), radius FROM ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))');", "execution_result": [["POINT(26284.84180271327 65267.114509082545)", 247.43604559140658]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2710, "question_en": "Output the center of the minimum bounding circle for POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078)) in WKT format and return the radius value of the circle."}
{"id": 514, "function": "ST_MinimumBoundingRadius", "question": "查询由顶点(26426 65078)、(26531 65242)、(26075 65136)、(26096 65427)构成的多边形的最小外接圆的圆心的WKT字符串和半径长度。", "sql": "SELECT ST_AsText(center), radius FROM ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))');", "execution_result": [["POINT(26284.84180271327 65267.114509082545)", 247.43604559140658]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2711, "question_en": "Query the WKT string of the center point and the radius length of the minimum bounding circle for the polygon formed by vertices (26426 65078), (26531 65242), (26075 65136), (26096 65427)."}
{"id": 515, "function": "ST_OrientedEnvelope", "question": "计算由LINESTRING(55 75,125 150)这条折线和坐标为(20, 80)的二维点组成的几何集合的最小面积定向矩形，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 80,125 150,138.0769230769241 130.38461538461573,33.07692307692291 60.384615384615195,20 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2712, "question_en": "Calculate the minimum area oriented rectangle of the geometry collection consisting of the LINESTRING(55 75,125 150) and the 2D point at (20, 80), and output the result in WKT format."}
{"id": 515, "function": "ST_OrientedEnvelope", "question": "将LINESTRING(55 75,125 150)和ST_Point(20, 80)合并后，求其最小外接矩形，并以WKT文本形式返回。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 80,125 150,138.0769230769241 130.38461538461573,33.07692307692291 60.384615384615195,20 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2713, "question_en": "Merge LINESTRING(55 75,125 150) and ST_Point(20, 80), then calculate their minimum bounding rectangle and return it as WKT text."}
{"id": 515, "function": "ST_OrientedEnvelope", "question": "对包含LINESTRING(55 75,125 150)和点(20, 80)的几何集合，使用ST_OrientedEnvelope函数生成最小面积包围盒，并通过ST_AsText输出WKT格式。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 80,125 150,138.0769230769241 130.38461538461573,33.07692307692291 60.384615384615195,20 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2714, "question_en": "Generate the minimum area oriented bounding box using ST_OrientedEnvelope for a geometry collection containing LINESTRING(55 75,125 150) and point (20, 80), then output the result in WKT format using ST_AsText."}
{"id": 515, "function": "ST_OrientedEnvelope", "question": "输出LINESTRING(55 75,125 150)和二维点POINT(20 80)合并后结果的最小定向外包矩形（Oriented Minimum Bounding Box）的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 80,125 150,138.0769230769241 130.38461538461573,33.07692307692291 60.384615384615195,20 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2715, "question_en": "Output the WKT string representation of the Oriented Minimum Bounding Box for the merged result of LINESTRING(55 75,125 150) and the 2D point POINT(20 80)."}
{"id": 515, "function": "ST_OrientedEnvelope", "question": "将折线LINESTRING(55 75,125 150)与二维点POINT(20 80)聚合后，计算其最小面积定向矩形，并以WKT文本格式输出结果。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 80,125 150,138.0769230769241 130.38461538461573,33.07692307692291 60.384615384615195,20 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2716, "question_en": "Aggregate the linestring LINESTRING(55 75,125 150) with the 2D point POINT(20 80), then calculate its minimum area oriented rectangle and output the result in WKT text format."}
{"id": 515, "function": "ST_OrientedEnvelope", "question": "如何以WKT字符串形式获取LINESTRING(55 75,125 150)和ST_Point(20, 80)组合几何体的最小外包矩形？", "sql": "SELECT ST_AsText(ST_OrientedEnvelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 80,125 150,138.0769230769241 130.38461538461573,33.07692307692291 60.384615384615195,20 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2717, "question_en": "How to get the minimum bounding rectangle of the combined geometry of LINESTRING(55 75,125 150) and ST_Point(20, 80) as a WKT string?"}
{"id": 516, "function": "ST_OrientedEnvelope", "question": "计算由点(0 0)、点(-1 -1)和点(3 2)组成的MULTIPOINT几何对象的最小面积定向矩形，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 2))'));", "execution_result": [["POLYGON((3 2,-1 -1,-1.12 -0.84,2.88 2.16,3 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2718, "question_en": "Calculate the minimum area oriented rectangle for the MULTIPOINT geometry composed of points (0 0), (-1 -1), and (3 2), and output the result in WKT format."}
{"id": 516, "function": "ST_OrientedEnvelope", "question": "对于包含坐标(0 0)、(-1 -1)和(3 2)这三个点的MULTIPOINT几何对象，求其最小面积定向矩形的WKT文本表示。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 2))'));", "execution_result": [["POLYGON((3 2,-1 -1,-1.12 -0.84,2.88 2.16,3 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2719, "question_en": "For the MULTIPOINT geometry object containing the coordinates (0 0), (-1 -1), and (3 2), find the WKT representation of its minimum area oriented rectangle."}
{"id": 516, "function": "ST_OrientedEnvelope", "question": "将MULTIPOINT类型几何对象（由点(0 0)、点(-1 -1)和点(3 2)构成）转换为最小面积定向包围矩形，并输出该矩形的WKT格式文本。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 2))'));", "execution_result": [["POLYGON((3 2,-1 -1,-1.12 -0.84,2.88 2.16,3 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2720, "question_en": "Convert the MULTIPOINT geometry object (composed of points (0 0), (-1 -1), and (3 2)) into the minimum area oriented bounding rectangle and output the WKT format text of this rectangle."}
{"id": 516, "function": "ST_OrientedEnvelope", "question": "输出MULTIPOINT ((0 0), (-1 -1), (3 2))的最小面积定向矩形（Oriented Envelope）的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 2))'));", "execution_result": [["POLYGON((3 2,-1 -1,-1.12 -0.84,2.88 2.16,3 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2721, "question_en": "Output the WKT string representation of the minimum area oriented envelope (Oriented Envelope) for MULTIPOINT ((0 0), (-1 -1), (3 2))."}
{"id": 516, "function": "ST_OrientedEnvelope", "question": "将包含点(0 0)、(-1 -1)和(3 2)的多点集合MULTIPOINT ((0 0), (-1 -1), (3 2))转换为最小面积定向矩形，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 2))'));", "execution_result": [["POLYGON((3 2,-1 -1,-1.12 -0.84,2.88 2.16,3 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2722, "question_en": "Convert the multipoint collection MULTIPOINT ((0 0), (-1 -1), (3 2)) containing points (0 0), (-1 -1), and (3 2) into the minimum area oriented rectangle and output the result in WKT format."}
{"id": 516, "function": "ST_OrientedEnvelope", "question": "计算并输出MULTIPOINT ((0 0), (-1 -1), (3 2))的最小外接矩形（Oriented Envelope）的WKT文本表示，该矩形会旋转以最小化面积。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 2))'));", "execution_result": [["POLYGON((3 2,-1 -1,-1.12 -0.84,2.88 2.16,3 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2723, "question_en": "Compute and output the WKT representation of the minimum oriented envelope (smallest rotated rectangle) for the MULTIPOINT ((0 0), (-1 -1), (3 2))."}
{"id": 518, "function": "ST_OffsetCurve", "question": "对于LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,44 16,24 16,20 16,18 16,17 17,16 18,16 20,16 40,16 60,16 80,16 100,16 120,16 140,16 160,16 180,16 195)这条折线，先分别生成距离为15单位（quad_segs=4 join=round参数）的右侧偏移曲线，以及先偏移-30单位再偏移-15单位的左侧偏移曲线（相同参数），将这两条曲线合并为集合并以WKT格式输出。", "sql": "SELECT ST_AsText(ST_Collect(\n    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=round'),\n    ST_OffsetCurve(ST_OffsetCurve(geom,\n    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')\n    )\n) As parallel_curves\n    FROM ST_GeomFromText(\n'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n    44 16,24 16,20 16,18 16,17 17,\n    16 18,16 20,16 40,16 60,16 80,16 100,\n    16 120,16 140,16 160,16 180,16 195)') As geom;", "execution_result": [["MULTILINESTRING((164 1,18 1,15.073645169758077 1.288220793951544,12.259748514523654 2.141807012330698,9.66644650470597 3.527955815461818,7.393398282201788 5.393398282201788,5.393398282201788 7.393398282201788,3.527955815461818 9.66644650470597,2.141807012330696 12.259748514523654,1.288220793951544 15.073645169758075,1 18,1 195),(164 61,61 61,61 195))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2724, "question_en": "For the LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,44 16,24 16,20 16,18 16,17 17,16 18,16 20,16 40,16 60,16 80,16 100,16 120,16 140,16 160,16 180,16 195), first generate a right-side offset curve with a distance of 15 units (parameters quad_segs=4 join=round), and a left-side offset curve by first offsetting -30 units then -15 units (same parameters), merge these two curves into a collection, and output in WKT format."}
{"id": 518, "function": "ST_OffsetCurve", "question": "基于LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,44 16,24 16,20 16,18 16,17 17,16 18,16 20,16 40,16 60,16 80,16 100,16 120,16 140,16 160,16 180,16 195)，使用quad_segs=4和join=round参数，先创建距离原始线15单位的平行线，再创建先偏移-30单位后偏移-15单位的嵌套偏移平行线，最终将这两个结果合并输出WKT文本。", "sql": "SELECT ST_AsText(ST_Collect(\n    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=round'),\n    ST_OffsetCurve(ST_OffsetCurve(geom,\n    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')\n    )\n) As parallel_curves\n    FROM ST_GeomFromText(\n'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n    44 16,24 16,20 16,18 16,17 17,\n    16 18,16 20,16 40,16 60,16 80,16 100,\n    16 120,16 140,16 160,16 180,16 195)') As geom;", "execution_result": [["MULTILINESTRING((164 1,18 1,15.073645169758077 1.288220793951544,12.259748514523654 2.141807012330698,9.66644650470597 3.527955815461818,7.393398282201788 5.393398282201788,5.393398282201788 7.393398282201788,3.527955815461818 9.66644650470597,2.141807012330696 12.259748514523654,1.288220793951544 15.073645169758075,1 18,1 195),(164 61,61 61,61 195))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2725, "question_en": "Based on the LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,44 16,24 16,20 16,18 16,17 17,16 18,16 20,16 40,16 60,16 80,16 100,16 120,16 140,16 160,16 180,16 195), using quad_segs=4 and join=round parameters, first create a parallel line 15 units away from the original line, then create nested offset parallel lines by first offsetting -30 units followed by -15 units, and finally merge these two results to output the WKT text."}
{"id": 518, "function": "ST_OffsetCurve", "question": "处理折线对象LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,44 16,24 16,20 16,18 16,17 17,16 18,16 20,16 40,16 60,16 80,16 100,16 120,16 140,16 160,16 180,16 195)，通过ST_OffsetCurve函数分别执行：1)单次15单位正偏移 2)先-30单位后-15单位的两次负偏移，均采用quad_segs=4的圆弧分段参数和round连接方式，最后输出合并两次结果的组合曲线的WKT表示。", "sql": "SELECT ST_AsText(ST_Collect(\n    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=round'),\n    ST_OffsetCurve(ST_OffsetCurve(geom,\n    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')\n    )\n) As parallel_curves\n    FROM ST_GeomFromText(\n'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n    44 16,24 16,20 16,18 16,17 17,\n    16 18,16 20,16 40,16 60,16 80,16 100,\n    16 120,16 140,16 160,16 180,16 195)') As geom;", "execution_result": [["MULTILINESTRING((164 1,18 1,15.073645169758077 1.288220793951544,12.259748514523654 2.141807012330698,9.66644650470597 3.527955815461818,7.393398282201788 5.393398282201788,5.393398282201788 7.393398282201788,3.527955815461818 9.66644650470597,2.141807012330696 12.259748514523654,1.288220793951544 15.073645169758075,1 18,1 195),(164 61,61 61,61 195))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2726, "question_en": "Process the linestring object LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,44 16,24 16,20 16,18 16,17 17,16 18,16 20,16 40,16 60,16 80,16 100,16 120,16 140,16 160,16 180,16 195) using the ST_OffsetCurve function to perform: 1) a single positive offset of 15 units, and 2) two negative offsets of -30 units followed by -15 units, both with quad_segs=4 for arc segmentation and round join style, then output the WKT representation of the combined curve merging both results."}
{"id": 518, "function": "ST_OffsetCurve", "question": "输出LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,44 16,24 16,20 16,18 16,17 17,16 18,16 20,16 40,16 60,16 80,16 100,16 120,16 140,16 160,16 180,16 195)几何对象经过以下处理后的WKT字符串：首先对原线生成15单位正偏移曲线（使用quad_segs=4和round连接类型），再与原线先负偏移30单位后二次负偏移15单位（均使用相同参数）的结果曲线合并为一个几何集合。", "sql": "SELECT ST_AsText(ST_Collect(\n    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=round'),\n    ST_OffsetCurve(ST_OffsetCurve(geom,\n    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')\n    )\n) As parallel_curves\n    FROM ST_GeomFromText(\n'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n    44 16,24 16,20 16,18 16,17 17,\n    16 18,16 20,16 40,16 60,16 80,16 100,\n    16 120,16 140,16 160,16 180,16 195)') As geom;", "execution_result": [["MULTILINESTRING((164 1,18 1,15.073645169758077 1.288220793951544,12.259748514523654 2.141807012330698,9.66644650470597 3.527955815461818,7.393398282201788 5.393398282201788,5.393398282201788 7.393398282201788,3.527955815461818 9.66644650470597,2.141807012330696 12.259748514523654,1.288220793951544 15.073645169758075,1 18,1 195),(164 61,61 61,61 195))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2727, "question_en": "Output the WKT string of the LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,44 16,24 16,20 16,18 16,17 17,16 18,16 20,16 40,16 60,16 80,16 100,16 120,16 140,16 160,16 180,16 195) geometry after the following processing: first generate a 15-unit positive offset curve from the original line (using quad_segs=4 and round join type), then merge it with the result curve obtained by first applying a -30-unit negative offset followed by a -15-unit negative offset to the original line (both using the same parameters) into a geometry collection."}
{"id": 518, "function": "ST_OffsetCurve", "question": "将LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,44 16,24 16,20 16,18 16,17 17,16 18,16 20,16 40,16 60,16 80,16 100,16 120,16 140,16 160,16 180,16 195)线对象进行偏移操作，包括正偏移15单位，以及组合偏移先负30单位再负15单位，均配置quad_segs=4和join=round参数，最终以WKT格式输出两条偏移曲线的几何集合。", "sql": "SELECT ST_AsText(ST_Collect(\n    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=round'),\n    ST_OffsetCurve(ST_OffsetCurve(geom,\n    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')\n    )\n) As parallel_curves\n    FROM ST_GeomFromText(\n'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n    44 16,24 16,20 16,18 16,17 17,\n    16 18,16 20,16 40,16 60,16 80,16 100,\n    16 120,16 140,16 160,16 180,16 195)') As geom;", "execution_result": [["MULTILINESTRING((164 1,18 1,15.073645169758077 1.288220793951544,12.259748514523654 2.141807012330698,9.66644650470597 3.527955815461818,7.393398282201788 5.393398282201788,5.393398282201788 7.393398282201788,3.527955815461818 9.66644650470597,2.141807012330696 12.259748514523654,1.288220793951544 15.073645169758075,1 18,1 195),(164 61,61 61,61 195))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2728, "question_en": "Offset the LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,44 16,24 16,20 16,18 16,17 17,16 18,16 20,16 40,16 60,16 80,16 100,16 120,16 140,16 160,16 180,16 195) line object with a positive offset of 15 units and a combined offset of first -30 units then -15 units, both configured with quad_segs=4 and join=round parameters, and output the resulting two offset curves as a geometry collection in WKT format."}
{"id": 518, "function": "ST_OffsetCurve", "question": "输出LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,44 16,24 16,20 16,18 16,17 17,16 18,16 20,16 40,16 60,16 80,16 100,16 120,16 140,16 160,16 180,16 195)几何体经过以下处理后的WKT字符串：先对原始线生成15单位偏移（四分之一圆线段数4，圆形连接），再对原始线先进行-30单位偏移后再次进行-15单位偏移（参数相同），最后将两个偏移结果合并为一个几何集合。", "sql": "SELECT ST_AsText(ST_Collect(\n    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=round'),\n    ST_OffsetCurve(ST_OffsetCurve(geom,\n    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')\n    )\n) As parallel_curves\n    FROM ST_GeomFromText(\n'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n    44 16,24 16,20 16,18 16,17 17,\n    16 18,16 20,16 40,16 60,16 80,16 100,\n    16 120,16 140,16 160,16 180,16 195)') As geom;", "execution_result": [["MULTILINESTRING((164 1,18 1,15.073645169758077 1.288220793951544,12.259748514523654 2.141807012330698,9.66644650470597 3.527955815461818,7.393398282201788 5.393398282201788,5.393398282201788 7.393398282201788,3.527955815461818 9.66644650470597,2.141807012330696 12.259748514523654,1.288220793951544 15.073645169758075,1 18,1 195),(164 61,61 61,61 195))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2729, "question_en": "Output the WKT string of the LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,44 16,24 16,20 16,18 16,17 17,16 18,16 20,16 40,16 60,16 80,16 100,16 120,16 140,16 160,16 180,16 195) geometry after the following processing: first generate a 15-unit offset on the original line (quarter-circle segments 4, round join), then apply a -30-unit offset followed by a -15-unit offset (same parameters) to the original line, and finally merge the two offset results into a single geometry collection."}
{"id": 524, "function": "ST_PointOnSurface", "question": "对于几何对象POINT(0 5)，使用ST_PointOnSurface函数获取其表面点（必然是其自身），并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2730, "question_en": "For the geometry object POINT(0 5), use the ST_PointOnSurface function to obtain its surface point (which must be itself) and output the result in WKT format."}
{"id": 524, "function": "ST_PointOnSurface", "question": "将二维点POINT(0 5)作为输入，通过ST_PointOnSurface函数计算其表面点，并以文本形式返回结果。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2731, "question_en": "Take the 2D point POINT(0 5) as input, compute its surface point using the ST_PointOnSurface function, and return the result in text format."}
{"id": 524, "function": "ST_PointOnSurface", "question": "对几何对象POINT(0 5)执行ST_PointOnSurface操作（由于输入是点，输出与输入相同），并通过ST_AsText函数输出结果的WKT表示。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2732, "question_en": "Perform the ST_PointOnSurface operation on the geometric object POINT(0 5) (since the input is a point, the output is the same as the input) and output the WKT representation of the result using the ST_AsText function."}
{"id": 524, "function": "ST_PointOnSurface", "question": "输出几何对象POINT(0 5)的表面点（ST_PointOnSurface）的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2733, "question_en": "Output the WKT string representation of the surface point (ST_PointOnSurface) for the geometry object POINT(0 5)."}
{"id": 524, "function": "ST_PointOnSurface", "question": "将二维点POINT(0 5)转换为表面点后，返回其WKT格式的文本结果。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2734, "question_en": "Convert the 2D point POINT(0 5) to a surface point and return its WKT format text result."}
{"id": 524, "function": "ST_PointOnSurface", "question": "计算POINT(0 5)的表面点（ST_PointOnSurface），并以WKT字符串形式输出结果。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2735, "question_en": "Calculate the surface point (ST_PointOnSurface) of POINT(0 5) and output the result as a WKT string."}
{"id": 525, "function": "ST_PointOnSurface", "question": "对于三维折线LINESTRING(0 5 1, 0 0 1, 0 10 2)，计算其表面上的一个点，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 1, 0 10 2)')));", "execution_result": [["POINT(0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2736, "question_en": "For the 3D linestring LINESTRING(0 5 1, 0 0 1, 0 10 2), calculate a point on its surface and output the result in EWKT format."}
{"id": 525, "function": "ST_PointOnSurface", "question": "在包含三个三维点(0 5 1)、(0 0 1)和(0 10 2)的折线对象上，使用ST_PointOnSurface函数获取其表面点，并以EWKT格式输出。", "sql": "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 1, 0 10 2)')));", "execution_result": [["POINT(0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2737, "question_en": "For a polyline object containing the three 3D points (0 5 1), (0 0 1), and (0 10 2), use the ST_PointOnSurface function to obtain its surface point and output it in EWKT format."}
{"id": 525, "function": "ST_PointOnSurface", "question": "将三维折线LINESTRING(0 5 1, 0 0 1, 0 10 2)转换为几何对象后，求取其表面上的一个代表点，最终以EWKT格式输出该点。", "sql": "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 1, 0 10 2)')));", "execution_result": [["POINT(0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2738, "question_en": "Convert the 3D polyline LINESTRING(0 5 1, 0 0 1, 0 10 2) into a geometry object, then find a representative point on its surface, and finally output the point in EWKT format."}
{"id": 525, "function": "ST_PointOnSurface", "question": "输出三维折线LINESTRING(0 5 1, 0 0 1, 0 10 2)的表面点（ST_PointOnSurface）的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 1, 0 10 2)')));", "execution_result": [["POINT(0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2739, "question_en": "Output the EWKT format string of the surface point (ST_PointOnSurface) for the 3D linestring LINESTRING(0 5 1, 0 0 1, 0 10 2)."}
{"id": 525, "function": "ST_PointOnSurface", "question": "将包含三个三维点(0 5 1)、(0 0 1)、(0 10 2)的折线转换为几何对象后，计算其表面点并返回EWKT格式的结果。", "sql": "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 1, 0 10 2)')));", "execution_result": [["POINT(0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2740, "question_en": "Convert the polyline containing the three 3D points (0 5 1), (0 0 1), (0 10 2) into a geometry object, calculate its surface point, and return the result in EWKT format."}
{"id": 525, "function": "ST_PointOnSurface", "question": "对三维折线LINESTRING(0 5 1, 0 0 1, 0 10 2)执行ST_PointOnSurface操作，输出结果的扩展WKT表示。", "sql": "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 1, 0 10 2)')));", "execution_result": [["POINT(0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2741, "question_en": "Perform the ST_PointOnSurface operation on the 3D linestring LINESTRING(0 5 1, 0 0 1, 0 10 2) and output the result in extended WKT representation."}
{"id": 526, "function": "ST_PointOnSurface", "question": "计算由顶点坐标(130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120)组成的多边形内部任意一点(ST_PointOnSurface)和几何中心点(ST_Centroid)，并以WKT格式输出这两个点。", "sql": "SELECT ST_AsText(ST_PointOnSurface(geom)) AS pt_on_surf, ST_AsText(ST_Centroid(geom)) AS centroid FROM (SELECT 'POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120))'::geometry AS geom) AS t;", "execution_result": [["POINT(62.5 110)", "POINT(100.18264840182648 85.11415525114155)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2742, "question_en": "Calculate an arbitrary interior point (ST_PointOnSurface) and the centroid (ST_Centroid) of the polygon defined by vertex coordinates (130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120), and output both points in WKT format."}
{"id": 526, "function": "ST_PointOnSurface", "question": "对于由坐标序列130 120→120 190→30 140→50 20→190 20→170 100→90 60→90 130→130 120构成的非规则多边形，分别获取其表面点和几何质心点的WKT文本表示。", "sql": "SELECT ST_AsText(ST_PointOnSurface(geom)) AS pt_on_surf, ST_AsText(ST_Centroid(geom)) AS centroid FROM (SELECT 'POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120))'::geometry AS geom) AS t;", "execution_result": [["POINT(62.5 110)", "POINT(100.18264840182648 85.11415525114155)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2743, "question_en": "For the irregular polygon defined by the coordinate sequence 130 120→120 190→30 140→50 20→190 20→170 100→90 60→90 130→130 120, obtain the WKT representations of its surface point and geometric centroid point."}
{"id": 526, "function": "ST_PointOnSurface", "question": "在由9个顶(130,120)、(120,190)、(30,140)、(50,20)、(190,20)、(170,100)、(90,60)、(90,130)、(130,120)定义的复杂多边形中，使用ST_PointOnSurface函数计算面内代表点，使用ST_Centroid函数计算几何中心，并返回两者的WKT格式文本。", "sql": "SELECT ST_AsText(ST_PointOnSurface(geom)) AS pt_on_surf, ST_AsText(ST_Centroid(geom)) AS centroid FROM (SELECT 'POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120))'::geometry AS geom) AS t;", "execution_result": [["POINT(62.5 110)", "POINT(100.18264840182648 85.11415525114155)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2744, "question_en": "Within the complex polygon defined by the 9 vertices (130,120), (120,190), (30,140), (50,20), (190,20), (170,100), (90,60), (90,130), (130,120), use the ST_PointOnSurface function to calculate a representative point inside the polygon, use the ST_Centroid function to calculate the geometric center, and return the WKT format text of both."}
{"id": 526, "function": "ST_PointOnSurface", "question": "输出POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120))几何图形的表面点（ST_PointOnSurface）和质心（ST_Centroid）的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_PointOnSurface(geom)) AS pt_on_surf, ST_AsText(ST_Centroid(geom)) AS centroid FROM (SELECT 'POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120))'::geometry AS geom) AS t;", "execution_result": [["POINT(62.5 110)", "POINT(100.18264840182648 85.11415525114155)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2745, "question_en": "Output the WKT string representations of the surface point (ST_PointOnSurface) and centroid (ST_Centroid) for the POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120)) geometry."}
{"id": 526, "function": "ST_PointOnSurface", "question": "将POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120))几何图形的表面点和质心分别转换为WKT格式文本输出。", "sql": "SELECT ST_AsText(ST_PointOnSurface(geom)) AS pt_on_surf, ST_AsText(ST_Centroid(geom)) AS centroid FROM (SELECT 'POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120))'::geometry AS geom) AS t;", "execution_result": [["POINT(62.5 110)", "POINT(100.18264840182648 85.11415525114155)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2746, "question_en": "Convert the surface point and centroid of the POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120)) geometry into WKT format text output."}
{"id": 526, "function": "ST_PointOnSurface", "question": "查询并输出由顶点坐标(130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120)构成的POLYGON几何体的表面任意点WKT表示和几何中心点WKT表示。", "sql": "SELECT ST_AsText(ST_PointOnSurface(geom)) AS pt_on_surf, ST_AsText(ST_Centroid(geom)) AS centroid FROM (SELECT 'POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120))'::geometry AS geom) AS t;", "execution_result": [["POINT(62.5 110)", "POINT(100.18264840182648 85.11415525114155)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2747, "question_en": "Query and output the WKT representation of any point on the surface and the WKT representation of the centroid of the POLYGON geometry defined by the vertex coordinates (130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120)."}
{"id": 527, "function": "ST_PointOnSurface", "question": "在LINESTRING(0 5, 0 10)这条由点(0 5)和点(0 10)组成的线段上，计算并返回一个保证位于该线段上的点，并以WKT格式输出。", "sql": "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2748, "question_en": "On the LINESTRING(0 5, 0 10) composed of points (0 5) and (0 10), calculate and return a point guaranteed to lie on this line segment, and output it in WKT format."}
{"id": 527, "function": "ST_PointOnSurface", "question": "对于LINESTRING(0 5, 0 10)这条从坐标(0 5)延伸到(0 10)的直线，使用ST_PointOnSurface函数获取其表面上的一个点，并将结果转换为WKT文本格式输出。", "sql": "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2749, "question_en": "For the LINESTRING(0 5, 0 10) line extending from coordinates (0 5) to (0 10), use the ST_PointOnSurface function to obtain a point on its surface and output the result in WKT text format."}
{"id": 527, "function": "ST_PointOnSurface", "question": "将LINESTRING(0 5, 0 10)这条由点(0 5)和点(0 10)定义的线段的表面点转换为WKT文本格式输出，其中ST_PointOnSurface函数确保返回的点位于该线段上。", "sql": "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2750, "question_en": "Convert the surface point of the LINESTRING(0 5, 0 10) defined by points (0 5) and (0 10) to WKT text format, ensuring the ST_PointOnSurface function returns a point located on this line segment."}
{"id": 527, "function": "ST_PointOnSurface", "question": "输出LINESTRING(0 5, 0 10)几何对象上任意一点的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2751, "question_en": "Output the WKT string representation of any point on the LINESTRING(0 5, 0 10) geometry object."}
{"id": 527, "function": "ST_PointOnSurface", "question": "将LINESTRING(0 5, 0 10)线段几何体转换为其上某一点的WKT格式文本输出。", "sql": "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2752, "question_en": "Convert the LINESTRING(0 5, 0 10) line segment geometry into WKT format text output for a point on it."}
{"id": 527, "function": "ST_PointOnSurface", "question": "计算并返回LINESTRING(0 5, 0 10)线段几何体表面点的WKT字符串结果。", "sql": "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2753, "question_en": "Calculate and return the WKT string result of the surface points for the LINESTRING(0 5, 0 10) line segment geometry."}
{"id": 528, "function": "ST_PointOnSurface", "question": "对于由顶点坐标(0 0)、(0 5)、(5 5)、(5 0)构成的闭合多边形POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))，计算其内部任意一点并输出WKT格式结果。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::geometry));", "execution_result": [["POINT(2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2754, "question_en": "For the closed polygon POLYGON((0 0, 0 5, 5 5, 5 0, 0 0)) defined by vertex coordinates (0 0), (0 5), (5 5), (5 0), calculate any point inside it and output the result in WKT format."}
{"id": 528, "function": "ST_PointOnSurface", "question": "将POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))这个四顶点多边形转换为几何对象后，求其内部保证在面内的一个点坐标，结果以WKT文本形式返回。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::geometry));", "execution_result": [["POINT(2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2755, "question_en": "Convert the four-vertex polygon POLYGON((0 0, 0 5, 5 5, 5 0, 0 0)) into a geometry object, then find a point coordinate guaranteed to be inside the polygon, returning the result in WKT format."}
{"id": 528, "function": "ST_PointOnSurface", "question": "使用ST_PointOnSurface函数处理XY坐标为(0 0)、(0 5)、(5 5)、(5 0)的矩形多边形POLYGON，返回该面内任意一点的WKT文本表示。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::geometry));", "execution_result": [["POINT(2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2756, "question_en": "Use the ST_PointOnSurface function to process the rectangular polygon POLYGON with XY coordinates (0 0), (0 5), (5 5), (5 0), and return the WKT representation of any point within the surface."}
{"id": 528, "function": "ST_PointOnSurface", "question": "输出POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))几何图形内部任意一点的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::geometry));", "execution_result": [["POINT(2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2757, "question_en": "Output the WKT string representation of any point inside the POLYGON((0 0, 0 5, 5 5, 5 0, 0 0)) geometry."}
{"id": 528, "function": "ST_PointOnSurface", "question": "将POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))多边形转换为内部某一点的WKT文本格式输出。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::geometry));", "execution_result": [["POINT(2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2758, "question_en": "Convert the polygon POLYGON((0 0, 0 5, 5 5, 5 0, 0 0)) to a WKT text format output representing a point inside it."}
{"id": 528, "function": "ST_PointOnSurface", "question": "查询以(0 0, 0 5, 5 5, 5 0, 0 0)为顶点的多边形内部任意一点，并以WKT字符串形式返回结果。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::geometry));", "execution_result": [["POINT(2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2759, "question_en": "Query for any point inside the polygon with vertices (0 0, 0 5, 5 5, 5 0, 0 0) and return the result as a WKT string."}
{"id": 529, "function": "ST_Polygonize", "question": "给定9条二维折线：LINESTRING (180 40, 30 20, 20 90)、LINESTRING (180 40, 160 160)、LINESTRING (80 60, 120 130, 150 80)、LINESTRING (80 60, 150 80)、LINESTRING (20 90, 70 70, 80 130)、LINESTRING (80 130, 160 160)、LINESTRING (20 90, 20 160, 70 190)、LINESTRING (70 190, 80 130)、LINESTRING (70 190, 160 160)，使用ST_Polygonize函数将这些折线组合成多边形，并以WKT格式输出结果。", "sql": "WITH data(geom) AS (VALUES\n   ('LINESTRING (180 40, 30 20, 20 90)'::geometry)\n  ,('LINESTRING (180 40, 160 160)'::geometry)\n  ,('LINESTRING (80 60, 120 130, 150 80)'::geometry)\n  ,('LINESTRING (80 60, 150 80)'::geometry)\n  ,('LINESTRING (20 90, 70 70, 80 130)'::geometry)\n  ,('LINESTRING (80 130, 160 160)'::geometry)\n  ,('LINESTRING (20 90, 20 160, 70 190)'::geometry)\n  ,('LINESTRING (70 190, 80 130)'::geometry)\n  ,('LINESTRING (70 190, 160 163)'::geometry)\n)\nSELECT ST_AsText( ST_Polygonize( geom ))\n    FROM data;\n", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((180 40,30 20,20 90,70 70,80 130,160 160,180 40),(150 80,120 130,80 60,150 80)),POLYGON((80 60,120 130,150 80,80 60)),POLYGON((80 130,70 70,20 90,20 160,70 190,80 130)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2760, "question_en": "Given 9 two-dimensional linestrings: LINESTRING (180 40, 30 20, 20 90), LINESTRING (180 40, 160 160), LINESTRING (80 60, 120 130, 150 80), LINESTRING (80 60, 150 80), LINESTRING (20 90, 70 70, 80 130), LINESTRING (80 130, 160 160), LINESTRING (20 90, 20 160, 70 190), LINESTRING (70 190, 80 130), LINESTRING (70 190, 160 160), use the ST_Polygonize function to combine these linestrings into polygons and output the result in WKT format."}
{"id": 529, "function": "ST_Polygonize", "question": "使用PostGIS的ST_Polygonize函数，将包含以下9条二维折线的数据集：LINESTRING (180 40, 30 20, 20 90)、LINESTRING (180 40, 160 160)、LINESTRING (80 60, 120 130, 150 80)、LINESTRING (80 60, 150 80)、LINESTRING (20 90, 70 70, 80 130)、LINESTRING (80 130, 160 160)、LINESTRING (20 90, 20 160, 70 190)、LINESTRING (70 190, 80 130)、LINESTRING (70 190, 160 160)转换为多边形，并以WKT文本格式输出生成的多边形。", "sql": "WITH data(geom) AS (VALUES\n   ('LINESTRING (180 40, 30 20, 20 90)'::geometry)\n  ,('LINESTRING (180 40, 160 160)'::geometry)\n  ,('LINESTRING (80 60, 120 130, 150 80)'::geometry)\n  ,('LINESTRING (80 60, 150 80)'::geometry)\n  ,('LINESTRING (20 90, 70 70, 80 130)'::geometry)\n  ,('LINESTRING (80 130, 160 160)'::geometry)\n  ,('LINESTRING (20 90, 20 160, 70 190)'::geometry)\n  ,('LINESTRING (70 190, 80 130)'::geometry)\n  ,('LINESTRING (70 190, 160 164)'::geometry)\n)\nSELECT ST_AsText( ST_Polygonize( geom ))\n    FROM data;\n", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((180 40,30 20,20 90,70 70,80 130,160 160,180 40),(150 80,120 130,80 60,150 80)),POLYGON((80 60,120 130,150 80,80 60)),POLYGON((80 130,70 70,20 90,20 160,70 190,80 130)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2761, "question_en": "Using PostGIS's ST_Polygonize function, convert a dataset containing the following nine 2D linestrings: LINESTRING (180 40, 30 20, 20 90), LINESTRING (180 40, 160 160), LINESTRING (80 60, 120 130, 150 80), LINESTRING (80 60, 150 80), LINESTRING (20 90, 70 70, 80 130), LINESTRING (80 130, 160 160), LINESTRING (20 90, 20 160, 70 190), LINESTRING (70 190, 80 130), LINESTRING (70 190, 160 160) into polygons, and output the generated polygons in WKT text format."}
{"id": 529, "function": "ST_Polygonize", "question": "基于以下9条二维折线几何对象：LINESTRING (180 40, 30 20, 20 90)、LINESTRING (180 40, 160 160)、LINESTRING (80 60, 120 130, 150 80)、LINESTRING (80 60, 150 80)、LINESTRING (20 90, 70 70, 80 130)、LINESTRING (80 130, 160 160)、LINESTRING (20 90, 20 160, 70 190)、LINESTRING (70 190, 80 130)、LINESTRING (70 190, 160 160)，执行ST_Polygonize操作生成多边形，并通过ST_AsText函数将结果以WKT格式输出。", "sql": "WITH data(geom) AS (VALUES\n   ('LINESTRING (180 40, 30 20, 20 90)'::geometry)\n  ,('LINESTRING (180 40, 160 160)'::geometry)\n  ,('LINESTRING (80 60, 120 130, 150 80)'::geometry)\n  ,('LINESTRING (80 60, 150 80)'::geometry)\n  ,('LINESTRING (20 90, 70 70, 80 130)'::geometry)\n  ,('LINESTRING (80 130, 160 160)'::geometry)\n  ,('LINESTRING (20 90, 20 160, 70 190)'::geometry)\n  ,('LINESTRING (70 190, 80 130)'::geometry)\n  ,('LINESTRING (70 190, 160 165)'::geometry)\n)\nSELECT ST_AsText( ST_Polygonize( geom ))\n    FROM data;\n", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((180 40,30 20,20 90,70 70,80 130,160 160,180 40),(150 80,120 130,80 60,150 80)),POLYGON((80 60,120 130,150 80,80 60)),POLYGON((80 130,70 70,20 90,20 160,70 190,80 130)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2762, "question_en": "Given the following 9 two-dimensional linestring geometries: LINESTRING (180 40, 30 20, 20 90), LINESTRING (180 40, 160 160), LINESTRING (80 60, 120 130, 150 80), LINESTRING (80 60, 150 80), LINESTRING (20 90, 70 70, 80 130), LINESTRING (80 130, 160 160), LINESTRING (20 90, 20 160, 70 190), LINESTRING (70 190, 80 130), LINESTRING (70 190, 160 160), perform ST_Polygonize to generate polygons and output the result in WKT format using ST_AsText."}
{"id": 529, "function": "ST_Polygonize", "question": "输出将LINESTRING (180 40, 30 20, 20 90)、LINESTRING (180 40, 160 160)、LINESTRING (80 60, 120 130, 150 80)、LINESTRING (80 60, 150 80)、LINESTRING (20 90, 70 70, 80 130)、LINESTRING (80 130, 160 160)、LINESTRING (20 90, 20 160, 70 190)、LINESTRING (70 190, 80 130)和LINESTRING (70 190, 160 160)这9条线段进行多边形化处理后得到的WKT字符串。", "sql": "WITH data(geom) AS (VALUES\n   ('LINESTRING (180 40, 30 20, 20 90)'::geometry)\n  ,('LINESTRING (180 40, 160 160)'::geometry)\n  ,('LINESTRING (80 60, 120 130, 150 80)'::geometry)\n  ,('LINESTRING (80 60, 150 80)'::geometry)\n  ,('LINESTRING (20 90, 70 70, 80 130)'::geometry)\n  ,('LINESTRING (80 130, 160 160)'::geometry)\n  ,('LINESTRING (20 90, 20 160, 70 190)'::geometry)\n  ,('LINESTRING (70 190, 80 130)'::geometry)\n  ,('LINESTRING (70 190, 160 175)'::geometry)\n)\nSELECT ST_AsText( ST_Polygonize( geom ))\n    FROM data;\n", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((180 40,30 20,20 90,70 70,80 130,160 160,180 40),(150 80,120 130,80 60,150 80)),POLYGON((80 60,120 130,150 80,80 60)),POLYGON((80 130,70 70,20 90,20 160,70 190,80 130)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2763, "question_en": "Output the WKT string obtained by polygonizing the following 9 linestrings: LINESTRING (180 40, 30 20, 20 90), LINESTRING (180 40, 160 160), LINESTRING (80 60, 120 130, 150 80), LINESTRING (80 60, 150 80), LINESTRING (20 90, 70 70, 80 130), LINESTRING (80 130, 160 160), LINESTRING (20 90, 20 160, 70 190), LINESTRING (70 190, 80 130), and LINESTRING (70 190, 160 160)."}
{"id": 529, "function": "ST_Polygonize", "question": "输出具体坐标值为LINESTRING (180 40, 30 20, 20 90)、LINESTRING (180 40, 160 160)、LINESTRING (80 60, 120 130, 150 80)、LINESTRING (80 60, 150 80)、LINESTRING (20 90, 70 70, 80 130)、LINESTRING (80 130, 160 160)、LINESTRING (20 90, 20 160, 70 190)、LINESTRING (70 190, 80 130)和LINESTRING (70 190, 160 160)共9条线段组成的几何集合进行多边形化处理后生成的WKT格式结果。", "sql": "WITH data(geom) AS (VALUES\n   ('LINESTRING (180 40, 30 20, 20 90)'::geometry)\n  ,('LINESTRING (180 40, 160 160)'::geometry)\n  ,('LINESTRING (80 60, 120 130, 150 80)'::geometry)\n  ,('LINESTRING (80 60, 150 80)'::geometry)\n  ,('LINESTRING (20 90, 70 70, 80 130)'::geometry)\n  ,('LINESTRING (80 130, 160 160)'::geometry)\n  ,('LINESTRING (20 90, 20 160, 70 190)'::geometry)\n  ,('LINESTRING (70 190, 80 130)'::geometry)\n  ,('LINESTRING (70 190, 160 176)'::geometry)\n)\nSELECT ST_AsText( ST_Polygonize( geom ))\n    FROM data;\n", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((180 40,30 20,20 90,70 70,80 130,160 160,180 40),(150 80,120 130,80 60,150 80)),POLYGON((80 60,120 130,150 80,80 60)),POLYGON((80 130,70 70,20 90,20 160,70 190,80 130)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2764, "question_en": "Output the WKT format result after polygonizing the geometry collection consisting of the following 9 linestrings: LINESTRING (180 40, 30 20, 20 90), LINESTRING (180 40, 160 160), LINESTRING (80 60, 120 130, 150 80), LINESTRING (80 60, 150 80), LINESTRING (20 90, 70 70, 80 130), LINESTRING (80 130, 160 160), LINESTRING (20 90, 20 160, 70 190), LINESTRING (70 190, 80 130), and LINESTRING (70 190, 160 160)."}
{"id": 529, "function": "ST_Polygonize", "question": "输出将9条特定线段（包括LINESTRING (180 40, 30 20, 20 90)、LINESTRING (180 40, 160 160)、LINESTRING (80 60, 120 130, 150 80)、LINESTRING (80 60, 150 80)、LINESTRING (20 90, 70 70, 80 130)、LINESTRING (80 130, 160 160)、LINESTRING (20 90, 20 160, 70 190)、LINESTRING (70 190, 80 130)和LINESTRING (70 190, 160 160))到LINESTRING (70 190, 160 160)）通过ST_Polygonize函数处理后生成的WKT文本表示的多边形几何对象。", "sql": "WITH data(geom) AS (VALUES\n   ('LINESTRING (180 40, 30 20, 20 90)'::geometry)\n  ,('LINESTRING (180 40, 160 160)'::geometry)\n  ,('LINESTRING (80 60, 120 130, 150 80)'::geometry)\n  ,('LINESTRING (80 60, 150 80)'::geometry)\n  ,('LINESTRING (20 90, 70 70, 80 130)'::geometry)\n  ,('LINESTRING (80 130, 160 160)'::geometry)\n  ,('LINESTRING (20 90, 20 160, 70 190)'::geometry)\n  ,('LINESTRING (70 190, 80 130)'::geometry)\n  ,('LINESTRING (70 190, 160 177)'::geometry)\n)\nSELECT ST_AsText( ST_Polygonize( geom ))\n    FROM data;\n", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((180 40,30 20,20 90,70 70,80 130,160 160,180 40),(150 80,120 130,80 60,150 80)),POLYGON((80 60,120 130,150 80,80 60)),POLYGON((80 130,70 70,20 90,20 160,70 190,80 130)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2765, "question_en": "Output the WKT representation of the polygon geometry object generated by processing the following 9 specific line segments (including LINESTRING (180 40, 30 20, 20 90), LINESTRING (180 40, 160 160), LINESTRING (80 60, 120 130, 150 80), LINESTRING (80 60, 150 80), LINESTRING (20 90, 70 70, 80 130), LINESTRING (80 130, 160 160), LINESTRING (20 90, 20 160, 70 190), LINESTRING (70 190, 80 130), and LINESTRING (70 190, 160 160)) with the ST_Polygonize function."}
{"id": 532, "function": "ST_ReducePrecision", "question": "将折线LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)的坐标精度降低到小数点后1位，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_ReducePrecision('LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)', 1));", "execution_result": [["LINESTRING(10 10,20 30,40 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2766, "question_en": "Reduce the coordinate precision of the linestring LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40) to 1 decimal place and output the result in WKT format."}
{"id": 532, "function": "ST_ReducePrecision", "question": "对由五个顶点(10 10)、(19.6 30.1)、(20 30)、(20.3 30)、(40 40)组成的折线进行精度缩减，保留1位小数，输出WKT格式的几何对象。", "sql": "SELECT ST_AsText(ST_ReducePrecision('LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)', 1));", "execution_result": [["LINESTRING(10 10,20 30,40 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2767, "question_en": "Reduce the precision of the polyline formed by the five vertices (10 10), (19.6 30.1), (20 30), (20.3 30), (40 40) to one decimal place and output the geometric object in WKT format."}
{"id": 532, "function": "ST_ReducePrecision", "question": "使用PostGIS的ST_ReducePrecision函数处理折线LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)，精度参数设为1，并将结果转换为WKT文本格式输出。", "sql": "SELECT ST_AsText(ST_ReducePrecision('LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)', 1));", "execution_result": [["LINESTRING(10 10,20 30,40 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2768, "question_en": "Process the polyline LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40) using PostGIS's ST_ReducePrecision function with a precision parameter of 1, and output the result in WKT text format."}
{"id": 532, "function": "ST_ReducePrecision", "question": "输出LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)在精度参数为1时的简化结果，格式为WKT字符串。", "sql": "SELECT ST_AsText(ST_ReducePrecision('LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)', 1));", "execution_result": [["LINESTRING(10 10,20 30,40 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2769, "question_en": "Output the simplified result of LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40) with a precision parameter of 1, formatted as a WKT string."}
{"id": 532, "function": "ST_ReducePrecision", "question": "将LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)进行精度为1的简化处理后，返回WKT格式的几何对象。", "sql": "SELECT ST_AsText(ST_ReducePrecision('LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)', 1));", "execution_result": [["LINESTRING(10 10,20 30,40 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2770, "question_en": "Simplify the LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40) with a tolerance of 1 and return the geometry object in WKT format."}
{"id": 532, "function": "ST_ReducePrecision", "question": "以WKT字符串形式输出LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)经过精度参数1处理后的结果。", "sql": "SELECT ST_AsText(ST_ReducePrecision('LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)', 1));", "execution_result": [["LINESTRING(10 10,20 30,40 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2771, "question_en": "Output the WKT string of LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40) after processing with a precision parameter of 1."}
{"id": 533, "function": "ST_ReducePrecision", "question": "将二维点POINT(1.412 19.323)的坐标精度降低到1.0单位，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 1.0));", "execution_result": [["POINT(1 19)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2772, "question_en": "Reduce the coordinate precision of the 2D point POINT(1.412 19.323) to 1.0 unit and output the result in WKT format."}
{"id": 533, "function": "ST_ReducePrecision", "question": "对坐标为(1.412, 19.323)的二维点执行精度缩减操作，精度参数为1.0，返回WKT文本表示。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 1.0));", "execution_result": [["POINT(1 19)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2773, "question_en": "Perform a precision reduction operation on the 2D point with coordinates (1.412, 19.323) using a precision parameter of 1.0, and return the WKT text representation."}
{"id": 533, "function": "ST_ReducePrecision", "question": "使用ST_ReducePrecision函数处理点POINT(1.412 19.323)，设置网格大小为1.0，输出结果的文本表达。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 1.0));", "execution_result": [["POINT(1 19)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2774, "question_en": "Use the ST_ReducePrecision function to process the point POINT(1.412 19.323) with a grid size of 1.0, and output the textual representation of the result."}
{"id": 533, "function": "ST_ReducePrecision", "question": "输出将二维点POINT(1.412 19.323)的坐标精度降低到小数点后1位后得到的WKT字符串。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 1.0));", "execution_result": [["POINT(1 19)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2775, "question_en": "Output the WKT string obtained by reducing the coordinate precision of the 2D point POINT(1.412 19.323) to 1 decimal place."}
{"id": 533, "function": "ST_ReducePrecision", "question": "输出对二维点POINT(1.412 19.323)执行精度缩减（参数为1.0表示保留1位小数）后的WKT格式结果。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 1.0));", "execution_result": [["POINT(1 19)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2776, "question_en": "Output the WKT format result after performing precision reduction (parameter 1.0 means keeping 1 decimal place) on the 2D point POINT(1.412 19.323)."}
{"id": 533, "function": "ST_ReducePrecision", "question": "输出ST_ReducePrecision函数处理二维点POINT(1.412 19.323)（精度参数为1.0）后生成的WKT文本表示。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 1.0));", "execution_result": [["POINT(1 19)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2777, "question_en": "Output the WKT representation of the 2D point POINT(1.412 19.323) after processing by the ST_ReducePrecision function with a precision parameter of 1.0."}
{"id": 534, "function": "ST_ReducePrecision", "question": "将POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))这个多边形几何对象按照10单位的网格精度进行坐标简化，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))', 10));", "execution_result": [["MULTIPOLYGON(((40 40,50 10,10 10,40 40)),((60 60,70 30,40 40,60 60)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2778, "question_en": "Simplify the polygon geometry object POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10)) to a 10-unit grid precision and output the result in WKT format."}
{"id": 534, "function": "ST_ReducePrecision", "question": "对由顶点坐标(10 10)、(60 60.1)、(70 30)、(40 40)、(50 10)构成的闭合多边形执行10单位精度的坐标归约操作，返回WKT格式的简化结果。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))', 10));", "execution_result": [["MULTIPOLYGON(((40 40,50 10,10 10,40 40)),((60 60,70 30,40 40,60 60)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2779, "question_en": "Perform a coordinate reduction operation with a 10-unit precision on the closed polygon defined by vertices (10 10), (60 60.1), (70 30), (40 40), (50 10), and return the simplified result in WKT format."}
{"id": 534, "function": "ST_ReducePrecision", "question": "使用ST_ReducePrecision函数处理POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))几何对象，其中网格精度参数设为10，并将处理后的几何体转换为WKT文本输出。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))', 10));", "execution_result": [["MULTIPOLYGON(((40 40,50 10,10 10,40 40)),((60 60,70 30,40 40,60 60)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2780, "question_en": "Process the POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10)) geometry using the ST_ReducePrecision function with a grid precision parameter of 10, and output the processed geometry as WKT text."}
{"id": 534, "function": "ST_ReducePrecision", "question": "输出将POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))按10单位精度简化后的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))', 10));", "execution_result": [["MULTIPOLYGON(((40 40,50 10,10 10,40 40)),((60 60,70 30,40 40,60 60)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2781, "question_en": "Output the WKT string representation of the POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10)) simplified with a 10-unit precision."}
{"id": 534, "function": "ST_ReducePrecision", "question": "以WKT格式输出POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))经过10单位网格精度简化后的几何图形。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))', 10));", "execution_result": [["MULTIPOLYGON(((40 40,50 10,10 10,40 40)),((60 60,70 30,40 40,60 60)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2782, "question_en": "Output the geometry simplified with a 10-unit grid precision in WKT format for POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))."}
{"id": 534, "function": "ST_ReducePrecision", "question": "将POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))应用10单位精度简化后，返回其WKT文本表示形式。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))', 10));", "execution_result": [["MULTIPOLYGON(((40 40,50 10,10 10,40 40)),((60 60,70 30,40 40,60 60)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2783, "question_en": "Return the WKT text representation of the POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10)) after applying a 10-unit precision simplification."}
{"id": 535, "function": "ST_ReducePrecision", "question": "将二维点POINT(1.412 19.323)的坐标精度降低到小数点后10位，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 10));", "execution_result": [["POINT(0 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2784, "question_en": "Reduce the coordinate precision of the 2D point POINT(1.412 19.323) to 10 decimal places and output the result in WKT format."}
{"id": 535, "function": "ST_ReducePrecision", "question": "对坐标为(1.412, 19.323)的二维点对象执行精度缩减操作，保留10位小数精度，返回其WKT文本表示。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 10));", "execution_result": [["POINT(0 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2785, "question_en": "Perform a precision reduction operation on the 2D point object with coordinates (1.412, 19.323), retaining 10 decimal places, and return its WKT text representation."}
{"id": 535, "function": "ST_ReducePrecision", "question": "使用ST_ReducePrecision函数处理WKT格式的二维点POINT(1.412 19.323)，其中第二个参数10表示目标小数位数，最终输出精度调整后的WKT字符串。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 10));", "execution_result": [["POINT(0 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2786, "question_en": "Use the ST_ReducePrecision function to process the 2D point in WKT format POINT(1.412 19.323), where the second parameter 10 represents the target decimal places, and output the precision-adjusted WKT string."}
{"id": 535, "function": "ST_ReducePrecision", "question": "输出将二维点POINT(1.412 19.323)的坐标精度降低到小数点后10位后的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 10));", "execution_result": [["POINT(0 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2787, "question_en": "Output the WKT string representation of the 2D point POINT(1.412 19.323) after reducing its coordinate precision to 10 decimal places."}
{"id": 535, "function": "ST_ReducePrecision", "question": "以WKT格式返回二维点POINT(1.412 19.323)经过精度缩减（保留10位小数）后的几何对象文本。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 10));", "execution_result": [["POINT(0 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2788, "question_en": "Return the geometry object text in WKT format after reducing the precision (retaining 10 decimal places) of the 2D point POINT(1.412 19.323)."}
{"id": 535, "function": "ST_ReducePrecision", "question": "将二维点POINT(1.412 19.323)的坐标值按10位小数精度截断后，输出其标准WKT文本结果。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 10));", "execution_result": [["POINT(0 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2789, "question_en": "Truncate the coordinates of the 2D point POINT(1.412 19.323) to 10 decimal places and output its standard WKT text result."}
{"id": 536, "function": "ST_ReducePrecision", "question": "将二维点POINT(1.412 19.323)的坐标精度降低到小数点后1位，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 0.1));", "execution_result": [["POINT(1.4 19.3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2790, "question_en": "Reduce the coordinate precision of the 2D point POINT(1.412 19.323) to 1 decimal place and output the result in WKT format."}
{"id": 536, "function": "ST_ReducePrecision", "question": "对坐标为(1.412, 19.323)的二维点应用精度缩减函数，精度参数设为0.1，返回WKT文本表示。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 0.1));", "execution_result": [["POINT(1.4 19.3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2791, "question_en": "Apply a precision reduction function to the 2D point with coordinates (1.412, 19.323), set the precision parameter to 0.1, and return the WKT text representation."}
{"id": 536, "function": "ST_ReducePrecision", "question": "使用ST_ReducePrecision函数处理二维点POINT(1.412 19.323)，设置精度阈值为0.1，输出结果的文本格式。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 0.1));", "execution_result": [["POINT(1.4 19.3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2792, "question_en": "Process the 2D point POINT(1.412 19.323) using the ST_ReducePrecision function with a precision threshold of 0.1, and output the result in text format."}
{"id": 536, "function": "ST_ReducePrecision", "question": "输出将二维点POINT(1.412 19.323)的坐标精度降低到0.1后得到的WKT字符串。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 0.1));", "execution_result": [["POINT(1.4 19.3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2793, "question_en": "Output the WKT string obtained by reducing the coordinate precision of the 2D point POINT(1.412 19.323) to 0.1."}
{"id": 536, "function": "ST_ReducePrecision", "question": "以WKT格式返回POINT(1.412 19.323)经过精度参数0.1处理后的几何对象文本表示。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 0.1));", "execution_result": [["POINT(1.4 19.3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2794, "question_en": "Return the textual representation of the geometry object POINT(1.412 19.323) in WKT format after processing with a precision parameter of 0.1."}
{"id": 536, "function": "ST_ReducePrecision", "question": "将二维点POINT(1.412 19.323)按0.1的精度阈值进行坐标舍入后，输出其标准WKT字符串结果。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 0.1));", "execution_result": [["POINT(1.4 19.3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2795, "question_en": "Round the 2D point POINT(1.412 19.323) to a precision threshold of 0.1 and output its standard WKT string result."}
{"id": 537, "function": "ST_SharedPaths", "question": "找出MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))和LINESTRING(151 100,126 156.25,126 125,90 161,76 175)这两个几何对象之间的共享路径，并以WKT格式输出。", "sql": "SELECT ST_AsText(ST_SharedPaths(ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))'),ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161,76 175)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),(101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2796, "question_en": "Find the shared path between the two geometries MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)) and LINESTRING(151 100,126 156.25,126 125,90 161,76 175), and output it in WKT format."}
{"id": 537, "function": "ST_SharedPaths", "question": "计算由两个线段组成的MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))和由五个点组成的LINESTRING(151 100,126 156.25,126 125,90 161,76 175)之间的共同路径，并以WKT文本形式返回结果。", "sql": "SELECT ST_AsText(ST_SharedPaths(ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))'),ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161,76 175)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),(101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2797, "question_en": "Calculate the common path between a MULTILINESTRING composed of two line segments ((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)) and a LINESTRING composed of five points (151 100,126 156.25,126 125,90 161,76 175), and return the result in WKT format."}
{"id": 537, "function": "ST_SharedPaths", "question": "对MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))和LINESTRING(151 100,126 156.25,126 125,90 161,76 175)这两个几何对象执行ST_SharedPaths操作，找出它们共有的线段部分，并将结果以WKT格式输出。", "sql": "SELECT ST_AsText(ST_SharedPaths(ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))'),ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161,76 175)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),(101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2798, "question_en": "Perform the ST_SharedPaths operation on the two geometries MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)) and LINESTRING(151 100,126 156.25,126 125,90 161,76 175) to identify their shared path segments, and output the result in WKT format."}
{"id": 537, "function": "ST_SharedPaths", "question": "输出MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))和LINESTRING(151 100,126 156.25,126 125,90 161,76 175)两个几何对象之间共享路径部分的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_SharedPaths(ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))'),ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161,76 175)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),(101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2799, "question_en": "Output the WKT string representation of the shared path segments between the two geometric objects MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)) and LINESTRING(151 100,126 156.25,126 125,90 161,76 175)."}
{"id": 537, "function": "ST_SharedPaths", "question": "将MULTILINESTRING类型对象（包含两条线段：(26 125,26 200,126 200,126 125,26 125)和(51 150,101 150,76 175,51 150)）与LINESTRING(151 100,126 156.25,126 125,90 161,76 175)进行共享路径计算，返回结果的WKT格式文本。", "sql": "SELECT ST_AsText(ST_SharedPaths(ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))'),ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161,76 175)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),(101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2800, "question_en": "Calculate the shared path between a MULTILINESTRING object (containing two linestrings: (26 125,26 200,126 200,126 125,26 125) and (51 150,101 150,76 175,51 150)) and a LINESTRING(151 100,126 156.25,126 125,90 161,76 175), returning the result in WKT format."}
{"id": 537, "function": "ST_SharedPaths", "question": "查询由MULTILINESTRING（包含(26 125到26 200到126 200到126 125到26 125的闭合环和51 150到101 150到76 175到51 150的三角形）与LINESTRING（151 100到126 156.25到126 125到90 161到76 175的折线）共同组成的共享路径的WKT文本输出。", "sql": "SELECT ST_AsText(ST_SharedPaths(ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))'),ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161,76 175)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),(101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2801, "question_en": "Query the WKT text output of the shared path formed by a MULTILINESTRING (containing a closed loop from (26 125 to 26 200 to 126 200 to 126 125 to 26 125) and a triangle from (51 150 to 101 150 to 76 175 to 51 150)) and a LINESTRING (a polyline from 151 100 to 126 156.25 to 126 125 to 90 161 to 76 175)."}
{"id": 538, "function": "ST_SharedPaths", "question": "计算LINESTRING(76 175,90 161,126 125,126 156.25,151 100)与MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))这两个几何对象之间的共享路径，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(\n  ST_SharedPaths(\n   ST_GeomFromText('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),\n   ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),\n       (51 150,101 150,76 175,51 150))')\n    )\n  ) As wkt", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,MULTILINESTRING((76 175,90 161),(90 161,101 150),(126 125,126 156.25)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2802, "question_en": "Calculate the shared path between the geometries LINESTRING(76 175,90 161,126 125,126 156.25,151 100) and MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)), and output the result in WKT format."}
{"id": 538, "function": "ST_SharedPaths", "question": "找出由点76 175,90 161,126 125,126 156.25,151 100组成的折线与由两条折线(26 125,26 200,126 200,126 125,26 125)和(51 150,101 150,76 175,51 150)组成的多折线之间的共同路径，输出WKT格式的结果。", "sql": "SELECT ST_AsText(\n  ST_SharedPaths(\n   ST_GeomFromText('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),\n   ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),\n       (51 150,101 150,76 175,51 150))')\n    )\n  ) As wkt", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,MULTILINESTRING((76 175,90 161),(90 161,101 150),(126 125,126 156.25)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2803, "question_en": "Find the common path between the linestring composed of points 76 175, 90 161, 126 125, 126 156.25, 151 100 and the multiline composed of two linestrings (26 125, 26 200, 126 200, 126 125, 26 125) and (51 150, 101 150, 76 175, 51 150), and output the result in WKT format."}
{"id": 538, "function": "ST_SharedPaths", "question": "使用ST_SharedPaths函数比较LINESTRING(76 175,90 161,126 125,126 156.25,151 100)和MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))这两个几何对象，返回它们共有的线段部分，结果以WKT文本形式展示。", "sql": "SELECT ST_AsText(\n  ST_SharedPaths(\n   ST_GeomFromText('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),\n   ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),\n       (51 150,101 150,76 175,51 150))')\n    )\n  ) As wkt", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,MULTILINESTRING((76 175,90 161),(90 161,101 150),(126 125,126 156.25)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2804, "question_en": "Use the ST_SharedPaths function to compare the LINESTRING(76 175,90 161,126 125,126 156.25,151 100) and MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)) geometries, returning their shared path segments as WKT text."}
{"id": 538, "function": "ST_SharedPaths", "question": "输出LINESTRING(76 175,90 161,126 125,126 156.25,151 100)与MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))的共享路径部分的WKT字符串表示。", "sql": "SELECT ST_AsText(\n  ST_SharedPaths(\n   ST_GeomFromText('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),\n   ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),\n       (51 150,101 150,76 175,51 150))')\n    )\n  ) As wkt", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,MULTILINESTRING((76 175,90 161),(90 161,101 150),(126 125,126 156.25)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2805, "question_en": "Output the WKT string representation of the shared path between LINESTRING(76 175,90 161,126 125,126 156.25,151 100) and MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))."}
{"id": 538, "function": "ST_SharedPaths", "question": "将LINESTRING(76 175,90 161,126 125,126 156.25,151 100)和由两个闭合环组成的MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))进行共享路径计算后，输出结果的WKT格式文本。", "sql": "SELECT ST_AsText(\n  ST_SharedPaths(\n   ST_GeomFromText('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),\n   ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),\n       (51 150,101 150,76 175,51 150))')\n    )\n  ) As wkt", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,MULTILINESTRING((76 175,90 161),(90 161,101 150),(126 125,126 156.25)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2806, "question_en": "Calculate the shared path between LINESTRING(76 175,90 161,126 125,126 156.25,151 100) and MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)), then output the result in WKT format."}
{"id": 538, "function": "ST_SharedPaths", "question": "以WKT字符串格式输出五节点LINESTRING(76 175,90 161,126 125,126 156.25,151 100)与包含五节点多边形(26 125,26 200,126 200,126 125,26 125)和三节点三角形(51 150,101 150,76 175,51 150)的MULTILINESTRING之间的几何共享路径。", "sql": "SELECT ST_AsText(\n  ST_SharedPaths(\n   ST_GeomFromText('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),\n   ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),\n       (51 150,101 150,76 175,51 150))')\n    )\n  ) As wkt", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,MULTILINESTRING((76 175,90 161),(90 161,101 150),(126 125,126 156.25)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2807, "question_en": "Output the geometric shared path between a five-node LINESTRING(76 175,90 161,126 125,126 156.25,151 100) in WKT string format and a MULTILINESTRING containing a five-node polygon (26 125,26 200,126 200,126 125,26 125) and a three-node triangle (51 150,101 150,76 175,51 150)."}
{"id": 539, "function": "ST_Simplify", "question": "以POINT(1 3)为中心创建半径为10、四分之一圆线段数为12的缓冲区多边形，分别计算原始几何体的点数，以及用0.1、0.5、1、10、100作为简化容差参数简化后的点数，并检查容差100时几何体是否消失。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_Simplify(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_Simplify(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_Simplify(geom, 1)) AS np1_octagon, ST_NPoints(ST_Simplify(geom, 10)) AS np10_triangle, (ST_Simplify(geom, 100) IS NULL) AS np100_geometrygoesaway FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, null, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2808, "question_en": "Create a buffer polygon centered at POINT(1 3) with a radius of 10 and 12 segments per quarter-circle, then count the points of the original geometry and the simplified versions using tolerance parameters 0.1, 0.5, 1, 10, and 100, checking if the geometry disappears at tolerance 100."}
{"id": 539, "function": "ST_Simplify", "question": "对由ST_Buffer('POINT(1 3)', 10,12)生成的12段缓冲区多边形，统计原始顶点数(np_before)，以及容差0.1(np01_notbadcircle)、0.5(np05_notquitecircle)、1(np1_octagon)、10(np10_triangle)简化后的顶点数，并验证容差100时几何体是否变为NULL(np100_geometrygoesaway)。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_Simplify(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_Simplify(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_Simplify(geom, 1)) AS np1_octagon, ST_NPoints(ST_Simplify(geom, 10)) AS np10_triangle, (ST_Simplify(geom, 100) IS NULL) AS np100_geometrygoesaway FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, null, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2809, "question_en": "For the 12-segment buffer polygon generated by ST_Buffer('POINT(1 3)', 10,12), count the original vertex count (np_before), and the vertex counts after simplification with tolerances 0.1 (np01_notbadcircle), 0.5 (np05_notquitecircle), 1 (np1_octagon), and 10 (np10_triangle), then verify if the geometry becomes NULL with a tolerance of 100 (np100_geometrygoesaway)."}
{"id": 539, "function": "ST_Simplify", "question": "基于中心点POINT(1 3)生成的12段圆形缓冲区，分析不同简化容差(0.1/0.5/1/10/100)对顶点数量的影响：原始顶点数命名为np_before，容差0.1结果命名为np01_notbadcircle，容差0.5为np05_notquitecircle，容差1为np1_octagon，容差10为np10_triangle，容差100时检测几何体是否存在(np100_geometrygoesaway)。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_Simplify(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_Simplify(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_Simplify(geom, 1)) AS np1_octagon, ST_NPoints(ST_Simplify(geom, 10)) AS np10_triangle, (ST_Simplify(geom, 100) IS NULL) AS np100_geometrygoesaway FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, null, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2810, "question_en": "Analyze the impact of different simplification tolerances (0.1/0.5/1/10/100) on vertex count for a 12-segment circular buffer generated from center point POINT(1 3): original vertex count named np_before, tolerance 0.1 result named np01_notbadcircle, tolerance 0.5 named np05_notquitecircle, tolerance 1 named np1_octagon, tolerance 10 named np10_triangle, and check if geometry exists for tolerance 100 (np100_geometrygoesaway)."}
{"id": 539, "function": "ST_Simplify", "question": "输出以POINT(1 3)为中心、半径为10、用12段线段模拟四分之一圆的缓冲区的原始点数，以及分别用0.1、0.5、1、10、100作为容差参数简化后的点数，并判断容差为100时几何是否消失。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_Simplify(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_Simplify(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_Simplify(geom, 1)) AS np1_octagon, ST_NPoints(ST_Simplify(geom, 10)) AS np10_triangle, (ST_Simplify(geom, 100) IS NULL) AS np100_geometrygoesaway FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, null, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2811, "question_en": "Output the original number of points in a quarter-circle buffer centered at POINT(1 3) with a radius of 10, approximated by 12 line segments, and the number of points after simplification using tolerance parameters of 0.1, 0.5, 1, 10, and 100, respectively, and determine whether the geometry disappears when the tolerance is 100."}
{"id": 539, "function": "ST_Simplify", "question": "输出ST_Buffer('POINT(1 3)', 10,12)生成的几何对象在原始状态和分别用0.1、0.5、1、10、100作为ST_Simplify容差参数时的顶点数量变化情况，包括容差为100时几何是否变为NULL。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_Simplify(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_Simplify(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_Simplify(geom, 1)) AS np1_octagon, ST_NPoints(ST_Simplify(geom, 10)) AS np10_triangle, (ST_Simplify(geom, 100) IS NULL) AS np100_geometrygoesaway FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, null, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2812, "question_en": "Output the number of vertices in the geometry object generated by ST_Buffer('POINT(1 3)', 10,12) in its original state and after applying ST_Simplify with tolerance parameters 0.1, 0.5, 1, 10, and 100, including whether the geometry becomes NULL at a tolerance of 100."}
{"id": 539, "function": "ST_Simplify", "question": "输出包含6列的结果表，分别显示由ST_Buffer('POINT(1 3)',10,12)创建的几何对象的原始顶点数，以及用0.1、0.5、1、10、100作为简化容差后的顶点数变化，最后一列指示容差为100时几何是否消失。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_Simplify(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_Simplify(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_Simplify(geom, 1)) AS np1_octagon, ST_NPoints(ST_Simplify(geom, 10)) AS np10_triangle, (ST_Simplify(geom, 100) IS NULL) AS np100_geometrygoesaway FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, null, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2813, "question_en": "Output a result table with 6 columns, showing the original vertex count of the geometry created by ST_Buffer('POINT(1 3)',10,12), the vertex count changes after simplification with tolerances of 0.1, 0.5, 1, 10, and 100, and the last column indicating whether the geometry disappears with a tolerance of 100."}
{"id": 540, "function": "ST_Simplify", "question": "对MULTIPOLYGON对象（包含两个多边形：第一个多边形顶点为(90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)，第二个多边形包含外环(40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80)和内环(180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)）执行简化操作，容差参数为40。", "sql": "SELECT ST_Simplify( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2814, "question_en": "Simplify the MULTIPOLYGON object (containing two polygons: the first polygon with vertices (90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110), and the second polygon with an outer ring (40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80) and an inner ring (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)) using a tolerance parameter of 40."}
{"id": 540, "function": "ST_Simplify", "question": "使用Douglas-Peucker算法（容差40）简化MULTIPOLYGON几何体，该几何体由两部分组成：第一部分是单环多边形(90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)，第二部分是带孔洞的多边形（外环40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80，内环180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70）。", "sql": "SELECT ST_Simplify( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2815, "question_en": "Simplify the MULTIPOLYGON geometry using the Douglas-Peucker algorithm (tolerance 40), which consists of two parts: the first is a single-ring polygon (90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110), and the second is a polygon with a hole (outer ring 40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80, inner ring 180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)."}
{"id": 540, "function": "ST_Simplify", "question": "以40单位容差简化复合多边形：第一个子多边形边界为(90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)；第二个子多边形包含主边界(40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80)和内部空洞边界(180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)。", "sql": "SELECT ST_Simplify( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2816, "question_en": "Simplify the composite polygon with a 40-unit tolerance: the first sub-polygon boundary is (90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110); the second sub-polygon includes the main boundary (40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80) and an internal hole boundary (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)."}
{"id": 540, "function": "ST_Simplify", "question": "输出将MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))以40为简化容差进行几何简化后的WKT字符串。", "sql": "SELECT ST_Simplify( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2817, "question_en": "Output the WKT string of the MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70))) simplified with a tolerance of 40."}
{"id": 540, "function": "ST_Simplify", "question": "输出对包含两个外环和一个内环的MULTIPOLYGON对象（具体坐标点为MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))）执行ST_Simplify操作后生成的几何对象WKT表示，其中简化容差参数为40。", "sql": "SELECT ST_Simplify( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2818, "question_en": "Output the WKT representation of the geometry object resulting from applying the ST_Simplify operation with a tolerance parameter of 40 to a MULTIPOLYGON containing two outer rings and one inner ring (with specific coordinate points: MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70))))."}
{"id": 540, "function": "ST_Simplify", "question": "输出使用Douglas-Peucker算法（容差40）简化MULTIPOLYGON对象MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))后得到的WKT格式结果。", "sql": "SELECT ST_Simplify( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2819, "question_en": "Output the WKT format result after simplifying the MULTIPOLYGON object MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70))) using the Douglas-Peucker algorithm (tolerance 40)."}
{"id": 541, "function": "ST_Simplify", "question": "对由五部分组成的MULTILINESTRING对象（具体坐标：(20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120)、(20 10, 80 30, 90 120)、(90 120, 130 130)、(130 130, 130 70, 160 40, 180 60, 180 90, 140 80)、(50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40)）执行简化操作，容差值为40。", "sql": "SELECT ST_Simplify( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["010500000005000000010200000003000000000000000000344000000000008066400000000000004940000000000000594000000000004065400000000000005E400102000000020000000000000000003440000000000000244000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000400000000000000004060400000000000406040000000000000644000000000000044400000000000806640000000000080564000000000008061400000000000005440010200000003000000000000000000494000000000000044400000000000005440000000000080514000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2820, "question_en": "Simplify a MULTILINESTRING object composed of five parts (with coordinates: (20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40)) using a tolerance value of 40."}
{"id": 541, "function": "ST_Simplify", "question": "使用ST_Simplify函数处理MULTILINESTRING几何体MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))，设置简化容差参数为40单位。", "sql": "SELECT ST_Simplify( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["010500000005000000010200000003000000000000000000344000000000008066400000000000004940000000000000594000000000004065400000000000005E400102000000020000000000000000003440000000000000244000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000400000000000000004060400000000000406040000000000000644000000000000044400000000000806640000000000080564000000000008061400000000000005440010200000003000000000000000000494000000000000044400000000000005440000000000080514000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2821, "question_en": "Simplify the MULTILINESTRING geometry MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40)) using the ST_Simplify function with a tolerance parameter of 40 units."}
{"id": 541, "function": "ST_Simplify", "question": "以40为容差阈值，简化MULTILINESTRING对象（由五组折线构成：组1坐标串20 180→170 120，组2坐标串20 10→90 120，组3坐标串90 120→130 130，组4坐标串130 130→140 80，组5坐标串50 40→50 40形成闭合环）。", "sql": "SELECT ST_Simplify( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["010500000005000000010200000003000000000000000000344000000000008066400000000000004940000000000000594000000000004065400000000000005E400102000000020000000000000000003440000000000000244000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000400000000000000004060400000000000406040000000000000644000000000000044400000000000806640000000000080564000000000008061400000000000005440010200000003000000000000000000494000000000000044400000000000005440000000000080514000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2822, "question_en": "Simplify the MULTILINESTRING object (composed of five polylines: group 1 coordinate sequence 20 180→170 120, group 2 coordinate sequence 20 10→90 120, group 3 coordinate sequence 90 120→130 130, group 4 coordinate sequence 130 130→140 80, group 5 coordinate sequence 50 40→50 40 forming a closed loop) with a tolerance threshold of 40."}
{"id": 541, "function": "ST_Simplify", "question": "输出将MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))以40为简化容差进行几何简化后的WKT字符串结果。", "sql": "SELECT ST_Simplify( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["010500000005000000010200000003000000000000000000344000000000008066400000000000004940000000000000594000000000004065400000000000005E400102000000020000000000000000003440000000000000244000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000400000000000000004060400000000000406040000000000000644000000000000044400000000000806640000000000080564000000000008061400000000000005440010200000003000000000000000000494000000000000044400000000000005440000000000080514000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2823, "question_en": "Output the WKT string result of geometrically simplifying the MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40)) with a simplification tolerance of 40."}
{"id": 541, "function": "ST_Simplify", "question": "以40单位距离为简化阈值，对由5个子线段组成的MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))）执行ST_Simplify操作后，返回的简化几何体的WKT格式是什么？", "sql": "SELECT ST_Simplify( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["010500000005000000010200000003000000000000000000344000000000008066400000000000004940000000000000594000000000004065400000000000005E400102000000020000000000000000003440000000000000244000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000400000000000000004060400000000000406040000000000000644000000000000044400000000000806640000000000080564000000000008061400000000000005440010200000003000000000000000000494000000000000044400000000000005440000000000080514000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2824, "question_en": "Using a simplification threshold of 40 units, what is the WKT format of the simplified geometry after performing ST_Simplify on the MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40)))?"}
{"id": 541, "function": "ST_Simplify", "question": "使用PostGIS的ST_Simplify函数，对MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))几何对象进行容差为40的简化处理，最终输出的WKT字符串结果是什么？", "sql": "SELECT ST_Simplify( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["010500000005000000010200000003000000000000000000344000000000008066400000000000004940000000000000594000000000004065400000000000005E400102000000020000000000000000003440000000000000244000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000400000000000000004060400000000000406040000000000000644000000000000044400000000000806640000000000080564000000000008061400000000000005440010200000003000000000000000000494000000000000044400000000000005440000000000080514000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2825, "question_en": "Using PostGIS's ST_Simplify function, simplify the MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40)) geometry with a tolerance of 40. What is the final output WKT string?"}
{"id": 542, "function": "ST_SimplifyPreserveTopology", "question": "对MULTIPOLYGON对象（包含两个多边形：第一个多边形顶点为90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110；第二个多边形包含外环40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80和内环180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70）执行拓扑保持简化操作，容差值为40。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000500000000000000008056400000000000805B40000000000000544000000000008066400000000000002440000000000040654000000000000034400000000000805B4000000000008056400000000000805B40010300000002000000060000000000000000004440000000000000544000000000000059400000000000005940000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000004440000000000000544004000000000000000080664000000000008051400000000000D06140000000000010604000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2826, "question_en": "Perform a topology-preserving simplification operation on a MULTIPOLYGON object (containing two polygons: the first polygon has vertices at 90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110; the second polygon includes an outer ring 40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80 and an inner ring 180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70) with a tolerance value of 40."}
{"id": 542, "function": "ST_SimplifyPreserveTopology", "question": "使用ST_SimplifyPreserveTopology函数，以40为简化容差，处理由两个多边形组成的MULTIPOLYGON对象（第一个多边形顶点序列为90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110；第二个多边形外环为40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80，内环为180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70）。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000500000000000000008056400000000000805B40000000000000544000000000008066400000000000002440000000000040654000000000000034400000000000805B4000000000008056400000000000805B40010300000002000000060000000000000000004440000000000000544000000000000059400000000000005940000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000004440000000000000544004000000000000000080664000000000008051400000000000D06140000000000010604000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2827, "question_en": "Use the ST_SimplifyPreserveTopology function with a simplification tolerance of 40 to process a MULTIPOLYGON object composed of two polygons (the first polygon has vertex sequence 90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110; the second polygon has an outer ring 40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80 and an inner ring 180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)."}
{"id": 542, "function": "ST_SimplifyPreserveTopology", "question": "对包含两个多边形的MULTIPOLYGON对象（多边形1顶点：90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110；多边形2外环：40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80，内环：180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70）执行拓扑保持简化，容差参数设置为40。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000500000000000000008056400000000000805B40000000000000544000000000008066400000000000002440000000000040654000000000000034400000000000805B4000000000008056400000000000805B40010300000002000000060000000000000000004440000000000000544000000000000059400000000000005940000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000004440000000000000544004000000000000000080664000000000008051400000000000D06140000000000010604000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2828, "question_en": "Perform topology-preserving simplification on a MULTIPOLYGON object containing two polygons (Polygon 1 vertices: 90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110; Polygon 2 outer ring: 40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80, inner ring: 180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70) with a tolerance parameter of 40."}
{"id": 542, "function": "ST_SimplifyPreserveTopology", "question": "输出对MULTIPOLYGON对象（包含两个多边形：第一个由顶点90 110,80 180,50 160,10 170,10 140,20 110,90 110构成，第二个由外环40 80,100 100,120 160,170 180,190 70,140 10,110 40,60 40,40 80和内环180 70,170 110,142.5 128.5,128.5 77.5,90 60,180 70构成）进行容差为40的拓扑保持简化后的WKT字符串。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000500000000000000008056400000000000805B40000000000000544000000000008066400000000000002440000000000040654000000000000034400000000000805B4000000000008056400000000000805B40010300000002000000060000000000000000004440000000000000544000000000000059400000000000005940000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000004440000000000000544004000000000000000080664000000000008051400000000000D06140000000000010604000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2829, "question_en": "Output the WKT string of the topologically preserved simplification with a tolerance of 40 for the MULTIPOLYGON object (containing two polygons: the first with vertices 90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110, and the second with an outer ring 40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80 and an inner ring 180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)."}
{"id": 542, "function": "ST_SimplifyPreserveTopology", "question": "当容差参数设置为40时，输出对包含嵌套环的复杂MULTIPOLYGON（外多边形90 110,80 180,50 160,10 170,10 140,20 110,90 110；内多边形组40 80,100 100,120 160,170 180,190 70,140 10,110 40,60 40,40 80和180 70,170 110,142.5 128.5,128.5 77.5,90 60,180 70）执行ST_SimplifyPreserveTopology操作后的几何WKT表示。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000500000000000000008056400000000000805B40000000000000544000000000008066400000000000002440000000000040654000000000000034400000000000805B4000000000008056400000000000805B40010300000002000000060000000000000000004440000000000000544000000000000059400000000000005940000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000004440000000000000544004000000000000000080664000000000008051400000000000D06140000000000010604000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2830, "question_en": "When the tolerance parameter is set to 40, output the geometric WKT representation after performing the ST_SimplifyPreserveTopology operation on a complex MULTIPOLYGON containing nested rings (outer polygon 90 110,80 180,50 160,10 170,10 140,20 110,90 110; inner polygon groups 40 80,100 100,120 160,170 180,190 70,140 10,110 40,60 40,40 80 and 180 70,170 110,142.5 128.5,128.5 77.5,90 60,180 70)."}
{"id": 542, "function": "ST_SimplifyPreserveTopology", "question": "输出将MULTIPOLYGON（由两个要素组成：要素1是单环多边形90 110,80 180,50 160,10 170,10 140,20 110,90 110；要素2是带孔洞的多边形，主环40 80,100 100,120 160,170 180,190 70,140 10,110 40,60 40,40 80，内环180 70,170 110,142.5 128.5,128.5 77.5,90 60,180 70）以40单位距离阈值进行拓扑保持简化后的标准WKT格式结果。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000500000000000000008056400000000000805B40000000000000544000000000008066400000000000002440000000000040654000000000000034400000000000805B4000000000008056400000000000805B40010300000002000000060000000000000000004440000000000000544000000000000059400000000000005940000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000004440000000000000544004000000000000000080664000000000008051400000000000D06140000000000010604000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2831, "question_en": "Output the standard WKT format result after topologically preserving simplification of the MULTIPOLYGON (composed of two elements: element 1 is a single-ring polygon 90 110,80 180,50 160,10 170,10 140,20 110,90 110; element 2 is a polygon with a hole, main ring 40 80,100 100,120 160,170 180,190 70,140 10,110 40,60 40,40 80, inner ring 180 70,170 110,142.5 128.5,128.5 77.5,90 60,180 70) with a 40-unit distance threshold."}
{"id": 543, "function": "ST_SimplifyPreserveTopology", "question": "对MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))这个由5条折线组成的多线对象，使用40作为容差阈值执行保持拓扑结构的简化操作。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["01050000000500000001020000000400000000000000000034400000000000806640000000000000494000000000000059400000000000805B400000000000C0624000000000004065400000000000005E400102000000030000000000000000003440000000000000244000000000000054400000000000003E4000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000500000000000000004060400000000000406040000000000040604000000000008051400000000000006440000000000000444000000000008066400000000000805640000000000080614000000000000054400102000000050000000000000000004940000000000000444000000000008051400000000000004440000000000000544000000000008051400000000000004E400000000000004E4000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2832, "question_en": "For the MULTILINESTRING composed of 5 polylines ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40)), perform a topology-preserving simplification operation using a tolerance threshold of 40."}
{"id": 543, "function": "ST_SimplifyPreserveTopology", "question": "用PostGIS的ST_SimplifyPreserveTopology函数处理MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))，其中第一条折线包含7个顶点，第二条3个顶点，第三条2个顶点，第四条6个顶点，第五条7个顶点，容差参数设置为40。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["01050000000500000001020000000400000000000000000034400000000000806640000000000000494000000000000059400000000000805B400000000000C0624000000000004065400000000000005E400102000000030000000000000000003440000000000000244000000000000054400000000000003E4000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000500000000000000004060400000000000406040000000000040604000000000008051400000000000006440000000000000444000000000008066400000000000805640000000000080614000000000000054400102000000050000000000000000004940000000000000444000000000008051400000000000004440000000000000544000000000008051400000000000004E400000000000004E4000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2833, "question_en": "Use PostGIS's ST_SimplifyPreserveTopology function to process the MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40)), where the first linestring has 7 vertices, the second has 3, the third has 2, the fourth has 6, and the fifth has 7, with a tolerance parameter set to 40."}
{"id": 543, "function": "ST_SimplifyPreserveTopology", "question": "基于40单位的距离容差，简化MULTILINESTRING对象，该对象由以下5部分构成：①从(20 180)经(20 150,50 150,50 100,110 150,150 140)到(170 120)的折线；②从(20 10)经(80 30)到(90 120)的折线；③(90 120)到(130 130)的线段；④从(130 130)经(130 70,160 40,180 60,180 90)到(140 80)的折线；⑤闭合折线(50 40,70 40,80 70,70 60,60 60,50 50,50 40)。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["01050000000500000001020000000400000000000000000034400000000000806640000000000000494000000000000059400000000000805B400000000000C0624000000000004065400000000000005E400102000000030000000000000000003440000000000000244000000000000054400000000000003E4000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000500000000000000004060400000000000406040000000000040604000000000008051400000000000006440000000000000444000000000008066400000000000805640000000000080614000000000000054400102000000050000000000000000004940000000000000444000000000008051400000000000004440000000000000544000000000008051400000000000004E400000000000004E4000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2834, "question_en": "Simplify the MULTILINESTRING object with a distance tolerance of 40 units, composed of the following 5 parts: ① a polyline from (20 180) via (20 150, 50 150, 50 100, 110 150, 150 140) to (170 120); ② a polyline from (20 10) via (80 30) to (90 120); ③ a line segment from (90 120) to (130 130); ④ a polyline from (130 130) via (130 70, 160 40, 180 60, 180 90) to (140 80); ⑤ a closed polyline (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40)."}
{"id": 543, "function": "ST_SimplifyPreserveTopology", "question": "输出对MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))进行拓扑保持简化后得到的WKT字符串，其中简化容差参数为40。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["01050000000500000001020000000400000000000000000034400000000000806640000000000000494000000000000059400000000000805B400000000000C0624000000000004065400000000000005E400102000000030000000000000000003440000000000000244000000000000054400000000000003E4000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000500000000000000004060400000000000406040000000000040604000000000008051400000000000006440000000000000444000000000008066400000000000805640000000000080614000000000000054400102000000050000000000000000004940000000000000444000000000008051400000000000004440000000000000544000000000008051400000000000004E400000000000004E4000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2835, "question_en": "Output the WKT string of the topologically preserved simplification result for MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40)) with a simplification tolerance parameter of 40."}
{"id": 543, "function": "ST_SimplifyPreserveTopology", "question": "以40为简化距离阈值，对由五条折线组成的MULTILINESTRING几何体进行拓扑保持简化后，输出结果WKT字符串。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["01050000000500000001020000000400000000000000000034400000000000806640000000000000494000000000000059400000000000805B400000000000C0624000000000004065400000000000005E400102000000030000000000000000003440000000000000244000000000000054400000000000003E4000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000500000000000000004060400000000000406040000000000040604000000000008051400000000000006440000000000000444000000000008066400000000000805640000000000080614000000000000054400102000000050000000000000000004940000000000000444000000000008051400000000000004440000000000000544000000000008051400000000000004E400000000000004E4000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2836, "question_en": "Simplify a MULTILINESTRING geometry composed of five polylines with a simplification distance threshold of 40 while preserving topology, and output the resulting WKT string."}
{"id": 543, "function": "ST_SimplifyPreserveTopology", "question": "当简化容差设置为40单位时，对包含MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))执行ST_SimplifyPreserveTopology操作，输出WKT格式的几何对象。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["01050000000500000001020000000400000000000000000034400000000000806640000000000000494000000000000059400000000000805B400000000000C0624000000000004065400000000000005E400102000000030000000000000000003440000000000000244000000000000054400000000000003E4000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000500000000000000004060400000000000406040000000000040604000000000008051400000000000006440000000000000444000000000008066400000000000805640000000000080614000000000000054400102000000050000000000000000004940000000000000444000000000008051400000000000004440000000000000544000000000008051400000000000004E400000000000004E4000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2837, "question_en": "When the simplification tolerance is set to 40 units, perform the ST_SimplifyPreserveTopology operation on the MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40)) and output the geometric object in WKT format."}
{"id": 544, "function": "ST_SimplifyPreserveTopology", "question": "计算以POINT(1 3)为中心、半径为10、用12段线段模拟四分之一圆的缓冲区几何体在简化前和分别使用0.1、0.5、1、10、100作为简化容差参数时的顶点数量。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 1)) AS np1_octagon, ST_NPoints(ST_SimplifyPreserveTopology(geom, 10)) AS np10_square, ST_NPoints(ST_SimplifyPreserveTopology(geom, 100)) AS np100_stillsquare FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, 4, 4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2838, "question_en": "Calculate the number of vertices in the buffer geometry, centered at POINT(1 3) with a radius of 10 and approximated by 12 segments for a quarter-circle, before simplification and after simplification using tolerance parameters of 0.1, 0.5, 1, 10, and 100."}
{"id": 544, "function": "ST_SimplifyPreserveTopology", "question": "对于由ST_Buffer('POINT(1 3)', 10,12)生成的12段缓冲圆，原始几何体和使用0.1/0.5/1/10/100五种不同容差参数进行拓扑保持简化后的几何体，分别返回它们的顶点数量。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 1)) AS np1_octagon, ST_NPoints(ST_SimplifyPreserveTopology(geom, 10)) AS np10_square, ST_NPoints(ST_SimplifyPreserveTopology(geom, 100)) AS np100_stillsquare FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, 4, 4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2839, "question_en": "For the 12-segment buffered circle generated by ST_Buffer('POINT(1 3)', 10,12), return the vertex counts of the original geometry and the topologically preserved simplified geometries using five different tolerance parameters: 0.1, 0.5, 1, 10, and 100."}
{"id": 544, "function": "ST_SimplifyPreserveTopology", "question": "分析POINT(1 3)点缓冲区的顶点数变化：原始12段缓冲圆在0.1容差下近似圆、0.5容差下接近圆、1容差下变成八边形、10和100容差下变成方形时的顶点数量对比。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 1)) AS np1_octagon, ST_NPoints(ST_SimplifyPreserveTopology(geom, 10)) AS np10_square, ST_NPoints(ST_SimplifyPreserveTopology(geom, 100)) AS np100_stillsquare FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, 4, 4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2840, "question_en": "Analyze the change in vertex count for the buffer zone of POINT(1 3): compare the number of vertices when the original 12-segment buffer circle approximates a circle at 0.1 tolerance, approaches a circle at 0.5 tolerance, becomes an octagon at 1 tolerance, and turns into a square at 10 and 100 tolerances."}
{"id": 544, "function": "ST_SimplifyPreserveTopology", "question": "输出以POINT(1 3)为中心、半径为10、用12段线段模拟四分之一圆的缓冲区几何体在原始状态及简化容差分别为0.1、0.5、1、10、100时的顶点数量，列名依次为np_before原始顶点数、np01_notbadcircle容差0.1简化结果顶点数、np05_notquitecircle容差0.5简化结果顶点数、np1_octagon容差1简化结果顶点数、np10_square容差10简化结果顶点数、np100_stillsquare容差100简化结果顶点数。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 1)) AS np1_octagon, ST_NPoints(ST_SimplifyPreserveTopology(geom, 10)) AS np10_square, ST_NPoints(ST_SimplifyPreserveTopology(geom, 100)) AS np100_stillsquare FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, 4, 4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2841, "question_en": "Output the number of vertices for a quarter-circle buffer geometry centered at POINT(1 3) with a radius of 10, approximated by 12 line segments, in its original state and after simplification with tolerances of 0.1, 0.5, 1, 10, and 100. Column names are: np_before (original vertex count), np01_notbadcircle (simplified with tolerance 0.1), np05_notquitecircle (simplified with tolerance 0.5), np1_octagon (simplified with tolerance 1), np10_square (simplified with tolerance 10), np100_stillsquare (simplified with tolerance 100)."}
{"id": 544, "function": "ST_SimplifyPreserveTopology", "question": "输出ST_Buffer生成的12段线段圆形缓冲区几何体（中心POINT(1 3)、半径10）在ST_SimplifyPreserveTopology函数处理下，容差参数0.1、0.5、1、10、100分别对应的简化结果几何体顶点数量，要求返回包含原始顶点数和各简化阶段顶点数的六列表格。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 1)) AS np1_octagon, ST_NPoints(ST_SimplifyPreserveTopology(geom, 10)) AS np10_square, ST_NPoints(ST_SimplifyPreserveTopology(geom, 100)) AS np100_stillsquare FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, 4, 4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2842, "question_en": "Output the number of vertices in the simplified geometries generated by ST_SimplifyPreserveTopology with tolerance parameters 0.1, 0.5, 1, 10, and 100 for a 12-segment circular buffer (center POINT(1 3), radius 10) created by ST_Buffer, returning a six-column table including the original vertex count and the vertex counts at each simplification stage."}
{"id": 544, "function": "ST_SimplifyPreserveTopology", "question": "输出通过ST_Buffer('POINT(1 3)',10,12)创建的12边圆形缓冲区几何体，在原始状态及容差0.1、0.5、1、10、100的ST_SimplifyPreserveTopology简化操作后，各阶段几何体的顶点数量统计结果，列名需体现各容差对应的几何特征（如np1_octagon表示容差1生成的八边形）。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 1)) AS np1_octagon, ST_NPoints(ST_SimplifyPreserveTopology(geom, 10)) AS np10_square, ST_NPoints(ST_SimplifyPreserveTopology(geom, 100)) AS np100_stillsquare FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, 4, 4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2843, "question_en": "Output the vertex count statistics of the 12-sided circular buffer geometry created by ST_Buffer('POINT(1 3)',10,12) in its original state and after ST_SimplifyPreserveTopology operations with tolerances 0.1, 0.5, 1, 10, 100, with column names indicating the geometric features corresponding to each tolerance (e.g., np1_octagon represents the octagon generated with tolerance 1)."}
{"id": 545, "function": "ST_SimplifyPolygonHull", "question": "使用参数0.3作为顶点比例，对POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))这个多边形进行外轮廓简化，且生成内壳。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3, false);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2844, "question_en": "Simplify the outer contour of the POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158)) using a vertex ratio of 0.3 and generate the inner shell."}
{"id": 545, "function": "ST_SimplifyPolygonHull", "question": "给定一个由131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158这些顶点构成的多边形，如何用ST_SimplifyPolygonHull函数以0.3的顶点比例简化其外轮廓，且生成内壳？", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3, false);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2845, "question_en": "Given a polygon formed by the vertices 131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158, how to simplify its outer contour using the ST_SimplifyPolygonHull function with a vertex ratio of 0.3 and generate an inner hull?"}
{"id": 545, "function": "ST_SimplifyPolygonHull", "question": "执行ST_SimplifyPolygonHull函数，对POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))这个复杂多边形进行简化，其中参数0.3表示保留30%的顶点，false表示生成内壳。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3, false);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2846, "question_en": "Execute the ST_SimplifyPolygonHull function to simplify the complex polygon POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158)), where the parameter 0.3 means retaining 30% of the vertices and false indicates generating an inner hull."}
{"id": 545, "function": "ST_SimplifyPolygonHull", "question": "输出对POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))进行参数为0.3和false的凸包简化后得到的几何对象。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3, false);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2847, "question_en": "Output the geometric object obtained after performing a convex hull simplification with parameters 0.3 and false on the POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))."}
{"id": 545, "function": "ST_SimplifyPolygonHull", "question": "输出POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))经过ST_SimplifyPolygonHull函数处理后的结果，其中设置参数0.3表示顶点保留比例，false表示生成内壳。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3, false);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2848, "question_en": "Output the result of processing POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158)) with the ST_SimplifyPolygonHull function, where the parameter 0.3 represents the vertex retention ratio and false indicates generating an inner hull."}
{"id": 545, "function": "ST_SimplifyPolygonHull", "question": "输出参数为0.3和false的ST_SimplifyPolygonHull函数对POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))进行凸包简化后的几何对象。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3, false);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2849, "question_en": "Output the simplified convex hull geometry object of the given POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158)) using the ST_SimplifyPolygonHull function with parameters 0.3 and false."}
{"id": 546, "function": "ST_SimplifyPolygonHull", "question": "对由顶点坐标序列131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158构成的POLYGON几何对象，使用参数0.3进行多边形凸包简化操作。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3);", "execution_result": [["0103000000010000001A00000000000000002064400000000000A064400000000000A065400000000000806340000000000040674000000000000062400000000000C067400000000000206140000000000020674000000000006060400000000000C065400000000000005F400000000000C064400000000000C05D400000000000C064400000000000C053400000000000C063400000000000804C400000000000005140000000000000404000000000000044400000000000003F4000000000000039400000000000004140000000000000314000000000008044400000000000002C40000000000000474000000000000026400000000000804C400000000000004C400000000000C05640000000000080404000000000004058400000000000003740000000000000594000000000000036400000000000C05A400000000000003C40000000000060604000000000000054400000000000E060400000000000405240000000000020624000000000004055400000000000A063400000000000C0584000000000004064400000000000805E40000000000040654000000000002064400000000000A06440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2850, "question_en": "For the POLYGON geometry object defined by the vertex coordinate sequence 131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158, perform a polygon convex hull simplification operation with a parameter of 0.3."}
{"id": 546, "function": "ST_SimplifyPolygonHull", "question": "如何用ST_SimplifyPolygonHull函数对POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))这个复杂多边形进行凸包简化，其中简化参数设置为0.3？", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3);", "execution_result": [["0103000000010000001A00000000000000002064400000000000A064400000000000A065400000000000806340000000000040674000000000000062400000000000C067400000000000206140000000000020674000000000006060400000000000C065400000000000005F400000000000C064400000000000C05D400000000000C064400000000000C053400000000000C063400000000000804C400000000000005140000000000000404000000000000044400000000000003F4000000000000039400000000000004140000000000000314000000000008044400000000000002C40000000000000474000000000000026400000000000804C400000000000004C400000000000C05640000000000080404000000000004058400000000000003740000000000000594000000000000036400000000000C05A400000000000003C40000000000060604000000000000054400000000000E060400000000000405240000000000020624000000000004055400000000000A063400000000000C0584000000000004064400000000000805E40000000000040654000000000002064400000000000A06440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2851, "question_en": "How to use the ST_SimplifyPolygonHull function to simplify the convex hull of the complex polygon POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158)) with a simplification parameter of 0.3?"}
{"id": 546, "function": "ST_SimplifyPolygonHull", "question": "给定一个由精确坐标点131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158定义的多边形，使用顶点保留比例参数为0.3的ST_SimplifyPolygonHull函数对其进行简化。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2852, "question_en": "Given a polygon defined by the precise coordinate points 131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158, simplify it using the ST_SimplifyPolygonHull function with a vertex retention ratio parameter of 0.3."}
{"id": 546, "function": "ST_SimplifyPolygonHull", "question": "输出参数为0.3时，对POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))进行凸包简化后的几何对象。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2853, "question_en": "Output the simplified convex hull geometry object when the parameter is set to 0.3 for the given POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))."}
{"id": 546, "function": "ST_SimplifyPolygonHull", "question": "输出简化参数为0.3时，对由多个顶点构成的复杂多边形POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))进行凸包简化后的几何对象。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2854, "question_en": "Output the simplified convex hull geometry of the complex polygon POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158)) with a simplification parameter of 0.3."}
{"id": 546, "function": "ST_SimplifyPolygonHull", "question": "输出参数为0.3时，对几何对象POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))执行ST_SimplifyPolygonHull操作后的结果。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3);", "execution_result": [["0103000000010000001A00000000000000002064400000000000A064400000000000A065400000000000806340000000000040674000000000000062400000000000C067400000000000206140000000000020674000000000006060400000000000C065400000000000005F400000000000C064400000000000C05D400000000000C064400000000000C053400000000000C063400000000000804C400000000000005140000000000000404000000000000044400000000000003F4000000000000039400000000000004140000000000000314000000000008044400000000000002C40000000000000474000000000000026400000000000804C400000000000004C400000000000C05640000000000080404000000000004058400000000000003740000000000000594000000000000036400000000000C05A400000000000003C40000000000060604000000000000054400000000000E060400000000000405240000000000020624000000000004055400000000000A063400000000000C0584000000000004064400000000000805E40000000000040654000000000002064400000000000A06440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2855, "question_en": "When the output parameter is 0.3, perform the ST_SimplifyPolygonHull operation on the geometry object POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158)) and return the result."}
{"id": 547, "function": "ST_SimplifyPolygonHull", "question": "对由ST_Letters('xt')生成的字母\"x\"和\"t\"的几何图形，先用2.0的间距进行线段分割处理，再使用0.1的阈值对多边形外壳进行简化处理。", "sql": "SELECT ST_SimplifyPolygonHull( ST_Segmentize(ST_Letters('xt'), 2.0), 0.1);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2856, "question_en": "For the geometric shapes of the letters \"x\" and \"t\" generated by ST_Letters('xt'), first perform line segmentation with a spacing of 2.0, then simplify the polygon shells using a threshold of 0.1."}
{"id": 547, "function": "ST_SimplifyPolygonHull", "question": "将ST_Letters('xt')生成的字母\"x\"和\"t\"的几何图形，通过ST_Segmentize函数以2.0为最大间距插入节点分割线段后，再用ST_SimplifyPolygonHull函数以0.1为顶点保留比例简化多边形。", "sql": "SELECT ST_SimplifyPolygonHull( ST_Segmentize(ST_Letters('xt'), 2.0), 0.1);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2857, "question_en": "Segment the geometric shapes of the letters \"x\" and \"t\" generated by ST_Letters('xt') by inserting nodes with a maximum spacing of 2.0 using ST_Segmentize, then simplify the polygon by retaining 0.1 of the vertices using ST_SimplifyPolygonHull."}
{"id": 547, "function": "ST_SimplifyPolygonHull", "question": "对字符串\"xt\"调用ST_Letters生成的多字母几何体，先执行ST_Segmentize操作（确保所有线段顶点间距不超过2.0单位），再以0.1为简化阈值调用ST_SimplifyPolygonHull计算多边形凸包简化结果。", "sql": "SELECT ST_SimplifyPolygonHull( ST_Segmentize(ST_Letters('xt'), 2.0), 0.1);", "execution_result": [["0106000000020000000103000000010000000E0000003433333333B34640CDCCCCCCCCCC4C40CECCCCCCCC5046406766666666E64B403433333333EF40409A99999999993E40CDCCCCCCCC4C474000000000000000000000000000803D400000000000000000CDCCCCCCCCCC33403433333333331940343333333373324034333333333309409A999999991931400000000000000000000000000000000000000000000000000000000000F02540676666666666374000000000006023406666666666E6424000000000008000406666666666E64B40CDCCCCCCCCCCF43FCDCCCCCCCCCC4C403433333333B34640CDCCCCCCCCCC4C40010300000001000000190000008988888888E0544000000000000030408988888888E05440CDCCCCCCCCCCECBF89888888882052400000000000000000EFEEEEEEEEC651409A9999999999C93F23222222229A5140343333333333D33F8988888888405140343333333333E33F5655555555ED50409A9999999999F13F8988888888C05040676666666666F63F56555555556D5040000000000000004023222222221A504067666666666606407877777777E74F409A99999999990940DFDDDDDDDD4D4F4067666666666610401211111111C14E40CDCCCCCCCCCC14401211111111414E409A999999999919401211111111C14D403433333333331F40DFDDDDDDDD8D4D4033333333333321407877777777274D40CDCCCCCCCCCC24404544444444F44C409A99999999992640DFDDDDDDDDCD4C409A99999999992840DEDDDDDDDD8D49406766666666E64440DEDDDDDDDD8D49403433333333734D401211111111414C409A99999999D9524023222222229A52409A99999999D952408988888888A054403433333333734D408988888888E054400000000000003040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2858, "question_en": "For the multi-letter geometry generated by calling ST_Letters on the string \"xt\", first perform ST_Segmentize (ensuring no segment vertices are more than 2.0 units apart), then calculate the simplified polygon convex hull using ST_SimplifyPolygonHull with a simplification threshold of 0.1."}
{"id": 547, "function": "ST_SimplifyPolygonHull", "question": "输出将字母'xt'转换为几何图形后，以2.0为最大分段长度进行线段化处理，再以0.1为顶点简化比例进行多边形凸包简化的结果几何对象。", "sql": "SELECT ST_SimplifyPolygonHull( ST_Segmentize(ST_Letters('xt'), 2.0), 0.1);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2859, "question_en": "Output the geometric object resulting from converting the letters 'xt' to a geometry, segmentizing it with a maximum segment length of 2.0, and then simplifying the polygon convex hull with a vertex simplification ratio of 0.1."}
{"id": 547, "function": "ST_SimplifyPolygonHull", "question": "返回ST_Letters('xt')生成的几何图形经过最大2.0单位长度的分段化处理，再经过0.1顶点保留比例的凸包简化后的多边形结果。", "sql": "SELECT ST_SimplifyPolygonHull( ST_Segmentize(ST_Letters('xt'), 2.0), 0.1);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2860, "question_en": "Return the polygon result of the geometry generated by ST_Letters('xt') after undergoing segmentation with a maximum segment length of 2.0 units, followed by convex hull simplification with a vertex retention ratio of 0.1."}
{"id": 547, "function": "ST_SimplifyPolygonHull", "question": "输出对ST_Letters('xt')生成的二维字母几何体进行以2.0为最大分段长度的线段分割，再应用0.1单位顶点保留比例的凸包简化算法后得到的多边形几何数据。", "sql": "SELECT ST_SimplifyPolygonHull( ST_Segmentize(ST_Letters('xt'), 2.0), 0.1);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2861, "question_en": "Output the polygon geometry data obtained by segmenting the 2D letter geometry generated by ST_Letters('xt') with a maximum segment length of 2.0, then applying a convex hull simplification algorithm with a vertex retention ratio of 0.1 units."}
{"id": 548, "function": "ST_SimplifyVW", "question": "对LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)这条折线使用Visvalingam-Whyatt算法进行简化，容差参数设置为30，并以WKT格式输出简化后的结果。", "sql": "SELECT ST_AsText(ST_SimplifyVW(geom,30)) simplified FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2862, "question_en": "Simplify the LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) using the Visvalingam-Whyatt algorithm with a tolerance of 30 and output the simplified result in WKT format."}
{"id": 548, "function": "ST_SimplifyVW", "question": "将LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)这条折线几何对象通过ST_SimplifyVW函数处理，其中面积容差阈值设为30，最终返回简化后的几何体的WKT文本表示。", "sql": "SELECT ST_AsText(ST_SimplifyVW(geom,30)) simplified FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2863, "question_en": "Simplify the LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) geometry using the ST_SimplifyVW function with an area tolerance threshold of 30, and return the WKT representation of the simplified geometry."}
{"id": 548, "function": "ST_SimplifyVW", "question": "使用ST_SimplifyVW函数对由点(5 2)、(3 8)、(6 20)、(7 25)、(10 10)构成的折线进行简化，面积容差参数为30，并以WKT文本格式输出简化后的几何对象。", "sql": "SELECT ST_AsText(ST_SimplifyVW(geom,30)) simplified FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2864, "question_en": "Simplify the polyline formed by points (5 2), (3 8), (6 20), (7 25), (10 10) using the ST_SimplifyVW function with an area tolerance parameter of 30, and output the simplified geometry object in WKT format."}
{"id": 548, "function": "ST_SimplifyVW", "question": "输出LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)经过Visvalingam-Whyatt算法简化（容差参数30）后的结果的WKT字符串。", "sql": "SELECT ST_AsText(ST_SimplifyVW(geom,30)) simplified FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2865, "question_en": "Output the WKT string of the LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) after simplification using the Visvalingam-Whyatt algorithm (tolerance parameter 30)."}
{"id": 548, "function": "ST_SimplifyVW", "question": "将LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)几何对象以30为面积容差阈值进行ST_SimplifyVW简化，返回结果的WKT文本表示。", "sql": "SELECT ST_AsText(ST_SimplifyVW(geom,30)) simplified FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2866, "question_en": "Simplify the LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) geometry using ST_SimplifyVW with an area tolerance threshold of 30 and return the WKT representation of the result."}
{"id": 548, "function": "ST_SimplifyVW", "question": "输出对LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)执行ST_SimplifyVW操作（容差30）的结果的WKT格式表示。", "sql": "SELECT ST_AsText(ST_SimplifyVW(geom,30)) simplified FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2867, "question_en": "Output the WKT representation of the result after performing ST_SimplifyVW with a tolerance of 30 on LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)."}
{"id": 549, "function": "ST_SimplifyVW", "question": "对MULTIPOLYGON对象（包含两个多边形：第一个多边形顶点为(90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)，第二个多边形包含外环(40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80)和内环(180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)）执行Visvalingam-Whyatt算法简化，容差参数为40。", "sql": "SELECT ST_SimplifyVW( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000700000000000000008056400000000000805B400000000000005440000000000080664000000000000049400000000000006440000000000000244000000000004065400000000000002440000000000080614000000000000034400000000000805B4000000000008056400000000000805B400103000000020000000900000000000000000044400000000000005440000000000000594000000000000059400000000000005E400000000000006440000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000805B4000000000000044400000000000004E40000000000000444000000000000044400000000000005440060000000000000000806640000000000080514000000000004065400000000000805B400000000000D0614000000000001060400000000000106040000000000060534000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2868, "question_en": "Simplify the MULTIPOLYGON object (containing two polygons: the first polygon has vertices (90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110), and the second polygon has an exterior ring (40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80) and an interior ring (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)) using the Visvalingam-Whyatt algorithm with a tolerance parameter of 40."}
{"id": 549, "function": "ST_SimplifyVW", "question": "使用Visvalingam-Whyatt算法简化（简化容差为40）MULTIPOLYGON对象，该对象包含两个多边形，其中第一个多边形由顶点(90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)构成，第二个多边形由外环(40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80)和内环(180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)构成。", "sql": "SELECT ST_SimplifyVW( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000700000000000000008056400000000000805B400000000000005440000000000080664000000000000049400000000000006440000000000000244000000000004065400000000000002440000000000080614000000000000034400000000000805B4000000000008056400000000000805B400103000000020000000900000000000000000044400000000000005440000000000000594000000000000059400000000000005E400000000000006440000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000805B4000000000000044400000000000004E40000000000000444000000000000044400000000000005440060000000000000000806640000000000080514000000000004065400000000000805B400000000000D0614000000000001060400000000000106040000000000060534000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2869, "question_en": "Simplify the MULTIPOLYGON object using the Visvalingam-Whyatt algorithm (with a tolerance of 40), which contains two polygons: the first polygon consists of vertices (90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110), and the second polygon has an outer ring (40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80) and an inner ring (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)."}
{"id": 549, "function": "ST_SimplifyVW", "question": "以40为面积容差阈值，对包含两个多边形的MULTIPOLYGON对象执行ST_SimplifyVW简化：第一个多边形顶点序列为(90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)，第二个多边形包含外环(40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80)和内环(180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)。", "sql": "SELECT ST_SimplifyVW( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000700000000000000008056400000000000805B400000000000005440000000000080664000000000000049400000000000006440000000000000244000000000004065400000000000002440000000000080614000000000000034400000000000805B4000000000008056400000000000805B400103000000020000000900000000000000000044400000000000005440000000000000594000000000000059400000000000005E400000000000006440000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000805B4000000000000044400000000000004E40000000000000444000000000000044400000000000005440060000000000000000806640000000000080514000000000004065400000000000805B400000000000D0614000000000001060400000000000106040000000000060534000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2870, "question_en": "Perform ST_SimplifyVW simplification on a MULTIPOLYGON object containing two polygons with an area tolerance threshold of 40: the first polygon has vertex sequence (90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110), and the second polygon includes an outer ring (40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80) and an inner ring (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)."}
{"id": 549, "function": "ST_SimplifyVW", "question": "输出对MULTIPOLYGON对象MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))执行Visvalingam-Whyatt算法简化后的几何结果，其中简化容差参数为40。", "sql": "SELECT ST_SimplifyVW( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000700000000000000008056400000000000805B400000000000005440000000000080664000000000000049400000000000006440000000000000244000000000004065400000000000002440000000000080614000000000000034400000000000805B4000000000008056400000000000805B400103000000020000000900000000000000000044400000000000005440000000000000594000000000000059400000000000005E400000000000006440000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000805B4000000000000044400000000000004E40000000000000444000000000000044400000000000005440060000000000000000806640000000000080514000000000004065400000000000805B400000000000D0614000000000001060400000000000106040000000000060534000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2871, "question_en": "Output the simplified geometric result of applying the Visvalingam-Whyatt algorithm to the MULTIPOLYGON object MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70))) with a simplification tolerance parameter of 40."}
{"id": 549, "function": "ST_SimplifyVW", "question": "返回MULTIPOLYGON（包含两个多边形：第一个多边形顶点为90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110；第二个多边形包含外环40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80和内环180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70）经过面积阈值40的Visvalingam-Whyatt简化后的结果。", "sql": "SELECT ST_SimplifyVW( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000700000000000000008056400000000000805B400000000000005440000000000080664000000000000049400000000000006440000000000000244000000000004065400000000000002440000000000080614000000000000034400000000000805B4000000000008056400000000000805B400103000000020000000900000000000000000044400000000000005440000000000000594000000000000059400000000000005E400000000000006440000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000805B4000000000000044400000000000004E40000000000000444000000000000044400000000000005440060000000000000000806640000000000080514000000000004065400000000000805B400000000000D0614000000000001060400000000000106040000000000060534000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2872, "question_en": "Return the Visvalingam-Whyatt simplification result of the MULTIPOLYGON (containing two polygons: the first polygon with vertices 90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110; the second polygon with an outer ring 40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80 and an inner ring 180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70) after applying an area threshold of 40."}
{"id": 549, "function": "ST_SimplifyVW", "question": "将MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))通过Visvalingam-Whyatt算法简化，输出简化后的几何结果，其中面积容差参数设置为40。", "sql": "SELECT ST_SimplifyVW( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000700000000000000008056400000000000805B400000000000005440000000000080664000000000000049400000000000006440000000000000244000000000004065400000000000002440000000000080614000000000000034400000000000805B4000000000008056400000000000805B400103000000020000000900000000000000000044400000000000005440000000000000594000000000000059400000000000005E400000000000006440000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000805B4000000000000044400000000000004E40000000000000444000000000000044400000000000005440060000000000000000806640000000000080514000000000004065400000000000805B400000000000D0614000000000001060400000000000106040000000000060534000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2873, "question_en": "Simplify the MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70))) using the Visvalingam-Whyatt algorithm with an area tolerance parameter of 40, and output the simplified geometry."}
{"id": 550, "function": "ST_SimplifyVW", "question": "对LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)这条折线使用Visvalingam-Whyatt算法进行简化，面积阈值为1600。", "sql": "SELECT ST_SimplifyVW( 'LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)', 1600);", "execution_result": [["0102000000060000000000000000002440000000000000244000000000000059400000000000005940000000000000594000000000008066400000000000C0624000000000004065400000000000C0674000000000008056400000000000C062400000000000003440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2874, "question_en": "Simplify the LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20) using the Visvalingam-Whyatt algorithm with an area threshold of 1600."}
{"id": 550, "function": "ST_SimplifyVW", "question": "使用ST_SimplifyVW函数处理LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)这条折线，设置面积阈值为1600平方单位。", "sql": "SELECT ST_SimplifyVW( 'LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)', 1600);", "execution_result": [["0102000000060000000000000000002440000000000000244000000000000059400000000000005940000000000000594000000000008066400000000000C0624000000000004065400000000000C0674000000000008056400000000000C062400000000000003440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2875, "question_en": "Process the LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20) using the ST_SimplifyVW function with an area threshold of 1600 square units."}
{"id": 550, "function": "ST_SimplifyVW", "question": "将LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)输入ST_SimplifyVW函数，通过移除对有效面积贡献小于1600的顶点来简化该折线。", "sql": "SELECT ST_SimplifyVW( 'LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)', 1600);", "execution_result": [["0102000000060000000000000000002440000000000000244000000000000059400000000000005940000000000000594000000000008066400000000000C0624000000000004065400000000000C0674000000000008056400000000000C062400000000000003440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2876, "question_en": "Input the LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20) into the ST_SimplifyVW function to simplify the polyline by removing vertices contributing less than 1600 to the effective area."}
{"id": 550, "function": "ST_SimplifyVW", "question": "输出对LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)使用Visvalingam-Whyatt算法进行简化后的结果几何，其中面积容差阈值设为1600。", "sql": "SELECT ST_SimplifyVW( 'LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)', 1600);", "execution_result": [["0102000000060000000000000000002440000000000000244000000000000059400000000000005940000000000000594000000000008066400000000000C0624000000000004065400000000000C0674000000000008056400000000000C062400000000000003440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2877, "question_en": "Output the simplified geometry result after applying the Visvalingam-Whyatt algorithm to the LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20) with an area tolerance threshold of 1600."}
{"id": 550, "function": "ST_SimplifyVW", "question": "返回LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)经过ST_SimplifyVW函数处理后的结果，其中面积容差参数设置为1600。", "sql": "SELECT ST_SimplifyVW( 'LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)', 1600);", "execution_result": [["0102000000060000000000000000002440000000000000244000000000000059400000000000005940000000000000594000000000008066400000000000C0624000000000004065400000000000C0674000000000008056400000000000C062400000000000003440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2878, "question_en": "Return the result of processing LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20) with the ST_SimplifyVW function, where the area tolerance parameter is set to 1600."}
{"id": 550, "function": "ST_SimplifyVW", "question": "执行ST_SimplifyVW函数后，输出LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)的简化版本几何对象，函数使用的面积容差为1600。", "sql": "SELECT ST_SimplifyVW( 'LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)', 1600);", "execution_result": [["0102000000060000000000000000002440000000000000244000000000000059400000000000005940000000000000594000000000008066400000000000C0624000000000004065400000000000C0674000000000008056400000000000C062400000000000003440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2879, "question_en": "After applying the ST_SimplifyVW function, output the simplified version of the LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20) geometry with an area tolerance of 1600."}
{"id": 551, "function": "ST_SetEffectiveArea", "question": "对LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)这条折线执行ST_SetEffectiveArea操作，分别计算默认参数下的有效面积结果和阈值为30时的有效面积结果，并以WKT格式输出两个结果列（命别名为all_pts和thrshld_30）。", "sql": "SELECT ST_AsText(ST_SetEffectiveArea(geom)) all_pts, ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30 FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) AS foo;", "execution_result": [["LINESTRING M (5 2 3.402823466385289e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 3.402823466385289e+38)", "LINESTRING M (5 2 3.402823466385289e+38,7 25 49.5,10 10 3.402823466385289e+38)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2880, "question_en": "Perform the ST_SetEffectiveArea operation on the LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) polyline, calculate the effective area results under default parameters and with a threshold of 30, and output both results in WKT format as columns (aliased as all_pts and thrshld_30)."}
{"id": 551, "function": "ST_SetEffectiveArea", "question": "将LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)作为输入几何，通过ST_SetEffectiveArea函数生成两个输出：1) 默认阈值参数时所有顶点的有效面积结果（all_pts列） 2) 指定阈值参数为30时的简化结果（thrshld_30列），均转换为WKT文本格式。", "sql": "SELECT ST_AsText(ST_SetEffectiveArea(geom)) all_pts, ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30 FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) AS foo;", "execution_result": [["LINESTRING M (5 2 3.402823466385289e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 3.402823466385289e+38)", "LINESTRING M (5 2 3.402823466385289e+38,7 25 49.5,10 10 3.402823466385289e+38)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2881, "question_en": "Using LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) as the input geometry, generate two outputs via the ST_SetEffectiveArea function: 1) effective area results for all vertices with default threshold parameter (all_pts column) 2) simplified result with threshold parameter set to 30 (thrshld_30 column), both converted to WKT text format."}
{"id": 551, "function": "ST_SetEffectiveArea", "question": "针对由5个顶点(5 2, 3 8, 6 20, 7 25, 10 10)构成的LINESTRING几何对象，应用ST_SetEffectiveArea函数生成两列结果：第一列all_pts显示默认参数下的完整顶点有效面积计算结果，第二列thrshld_30显示当设置面积阈值为30时的简化结果，两列结果均以WKT格式输出。", "sql": "SELECT ST_AsText(ST_SetEffectiveArea(geom)) all_pts, ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30 FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) AS foo;", "execution_result": [["LINESTRING M (5 2 3.402823466385289e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 3.402823466385289e+38)", "LINESTRING M (5 2 3.402823466385289e+38,7 25 49.5,10 10 3.402823466385289e+38)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2882, "question_en": "For the LINESTRING geometry object formed by 5 vertices (5 2, 3 8, 6 20, 7 25, 10 10), apply the ST_SetEffectiveArea function to generate two result columns: the first column 'all_pts' displays the full vertex effective area calculation results with default parameters, and the second column 'thrshld_30' shows the simplified results when the area threshold is set to 30, with both columns output in WKT format."}
{"id": 551, "function": "ST_SetEffectiveArea", "question": "输出LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)经过ST_SetEffectiveArea函数处理后的两个结果：默认参数下的处理结果的WKT字符串(all_pts列)和阈值参数设为30时的处理结果的WKT字符串(thrshld_30列)。", "sql": "SELECT ST_AsText(ST_SetEffectiveArea(geom)) all_pts, ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30 FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) AS foo;", "execution_result": [["LINESTRING M (5 2 3.402823466385289e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 3.402823466385289e+38)", "LINESTRING M (5 2 3.402823466385289e+38,7 25 49.5,10 10 3.402823466385289e+38)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2883, "question_en": "Output the two results of LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) processed by the ST_SetEffectiveArea function: the WKT string of the result with default parameters (all_pts column) and the WKT string of the result with the threshold parameter set to 30 (thrshld_30 column)."}
{"id": 551, "function": "ST_SetEffectiveArea", "question": "以WKT格式返回LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)的两种ST_SetEffectiveArea有效面积计算结果：未指定阈值的原始有效面积计算(all_pts)和阈值为30时的计算(thrshld_30)。", "sql": "SELECT ST_AsText(ST_SetEffectiveArea(geom)) all_pts, ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30 FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) AS foo;", "execution_result": [["LINESTRING M (5 2 3.402823466385289e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 3.402823466385289e+38)", "LINESTRING M (5 2 3.402823466385289e+38,7 25 49.5,10 10 3.402823466385289e+38)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2884, "question_en": "Return the two ST_SetEffectiveArea effective area calculation results for LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) in WKT format: the original effective area calculation without a specified threshold (all_pts) and the calculation with a threshold of 30 (thrshld_30)."}
{"id": 551, "function": "ST_SetEffectiveArea", "question": "将LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)用ST_SetEffectiveArea函数处理，输出默认参数生成的结果的WKT文本和指定阈值30时生成的结果的WKT文本，分别命名为all_pts和thrshld_30。", "sql": "SELECT ST_AsText(ST_SetEffectiveArea(geom)) all_pts, ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30 FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) AS foo;", "execution_result": [["LINESTRING M (5 2 3.402823466385289e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 3.402823466385289e+38)", "LINESTRING M (5 2 3.402823466385289e+38,7 25 49.5,10 10 3.402823466385289e+38)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2885, "question_en": "Process the LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) with the ST_SetEffectiveArea function, output the WKT text of the result generated with default parameters and the WKT text of the result generated with a specified threshold of 30, named all_pts and thrshld_30 respectively."}
{"id": 552, "function": "ST_TriangulatePolygon", "question": "将闭合多边形POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))进行三角剖分，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_TriangulatePolygon('POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0,0 1,1 1,0 0)),POLYGON((1 1,1 0,0 0,1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2886, "question_en": "Triangulate the closed polygon POLYGON((0 0, 0 1, 1 1, 1 0, 0 0)) and output the result in WKT format."}
{"id": 552, "function": "ST_TriangulatePolygon", "question": "使用ST_TriangulatePolygon函数对由坐标点(0 0)、(0 1)、(1 1)、(1 0)构成的单环多边形进行三角化处理，并以文本形式返回结果。", "sql": "SELECT ST_AsText( ST_TriangulatePolygon('POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0,0 1,1 1,0 0)),POLYGON((1 1,1 0,0 0,1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2887, "question_en": "Use the ST_TriangulatePolygon function to triangulate a single-ring polygon formed by the coordinate points (0 0), (0 1), (1 1), (1 0) and return the result in text format."}
{"id": 552, "function": "ST_TriangulatePolygon", "question": "将边界点依次为(0 0)→(0 1)→(1 1)→(1 0)→(0 0)的四边形POLYGON对象转换为三角化结果，并输出为WKT格式。", "sql": "SELECT ST_AsText( ST_TriangulatePolygon('POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0,0 1,1 1,0 0)),POLYGON((1 1,1 0,0 0,1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2888, "question_en": "Convert the quadrilateral POLYGON object with boundary points sequentially at (0 0)→(0 1)→(1 1)→(1 0)→(0 0) into a triangulated result and output it in WKT format."}
{"id": 552, "function": "ST_TriangulatePolygon", "question": "输出将POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))进行三角剖分后得到的结果的WKT字符串格式表示。", "sql": "SELECT ST_AsText( ST_TriangulatePolygon('POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0,0 1,1 1,0 0)),POLYGON((1 1,1 0,0 0,1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2889, "question_en": "Output the WKT string representation of the result after triangulating the polygon POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))."}
{"id": 552, "function": "ST_TriangulatePolygon", "question": "以WKT文本格式返回由顶点(0 0)、(0 1)、(1 1)、(1 0)构成的闭合多边形的三角剖分结果。", "sql": "SELECT ST_AsText( ST_TriangulatePolygon('POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0,0 1,1 1,0 0)),POLYGON((1 1,1 0,0 0,1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2890, "question_en": "Return the triangulation result of the closed polygon formed by vertices (0 0), (0 1), (1 1), (1 0) in WKT text format."}
{"id": 552, "function": "ST_TriangulatePolygon", "question": "将POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))分解为三角形集合后，输出其标准WKT字符串表示形式。", "sql": "SELECT ST_AsText( ST_TriangulatePolygon('POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0,0 1,1 1,0 0)),POLYGON((1 1,1 0,0 0,1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2891, "question_en": "Decompose the POLYGON((0 0, 0 1, 1 1, 1 0, 0 0)) into a set of triangles and output their standard WKT string representations."}
{"id": 553, "function": "ST_TriangulatePolygon", "question": "将外环由点序列(26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17)组成，内环由点序列(152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147)组成的多边形进行三角剖分，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_TriangulatePolygon( 'POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147))' ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((25 183,10 185,10 190,25 183)),POLYGON((126 175,121 189,139 187,126 175)),POLYGON((137 169,139 187,154 182,137 169)),POLYGON((149 157,167 177,177 169,149 157)),POLYGON((153 141,189 152,190 141,153 141)),POLYGON((153 141,188 128,186 123,153 141)),POLYGON((186 123,184 117,180 113,186 123)),POLYGON((149 123,176 108,170 104,149 123)),POLYGON((147 118,164 101,151 96,147 118)),POLYGON((121 102,136 92,119 89,121 102)),POLYGON((85 99,73 89,73 100,85 99)),POLYGON((89 17,106 15,106 10,89 17)),POLYGON((26 17,10 10,10 15,26 17)),POLYGON((100 190,25 183,10 190,100 190)),POLYGON((121 189,109 179,100 190,121 189)),POLYGON((189 152,152 147,184 161,189 152)),POLYGON((153 141,190 141,188 128,153 141)),POLYGON((147 118,170 104,164 101,147 118)),POLYGON((139 110,151 96,136 92,139 110)),POLYGON((73 89,85 99,86 89,73 89)),POLYGON((83 18,89 17,106 10,83 18)),POLYGON((83 18,10 10,26 17,83 18)),POLYGON((100 190,30 181,25 183,100 190)),POLYGON((189 152,153 141,152 147,189 152)),POLYGON((176 108,151 128,180 113,176 108)),POLYGON((91 99,86 89,85 99,91 99)),POLYGON((10 10,83 18,106 10,10 10)),POLYGON((76 178,100 190,80 179,76 178)),POLYGON((86 89,91 99,100 89,86 89)),POLYGON((31 19,83 18,26 17,31 19)),POLYGON((102 99,100 89,91 99,102 99)),POLYGON((83 18,31 19,79 20,83 18)),POLYGON((112 100,100 89,102 99,112 100)),POLYGON((34 21,79 20,31 19,34 21)),POLYGON((100 89,112 100,119 89,100 89)),POLYGON((37 24,79 20,34 21,37 24)),POLYGON((119 89,112 100,121 102,119 89)),POLYGON((79 20,37 24,77 23,79 20)),POLYGON((136 92,121 102,128 104,136 92)),POLYGON((77 23,37 24,75 27,77 23)),POLYGON((134 107,136 92,128 104,134 107)),POLYGON((38 29,75 27,37 24,38 29)),POLYGON((139 110,136 92,134 107,139 110)),POLYGON((75 27,38 29,74 32,75 27)),POLYGON((151 96,139 110,143 114,151 96)),POLYGON((74 32,38 29,73 39,74 32)),POLYGON((151 96,143 114,147 118,151 96)),POLYGON((39 43,73 39,38 29,39 43)),POLYGON((170 104,147 118,149 123,170 104)),POLYGON((73 39,39 43,73 89,73 39)),POLYGON((176 108,149 123,151 128,176 108)),POLYGON((73 89,39 43,73 100,73 89)),POLYGON((180 113,151 128,186 123,180 113)),POLYGON((39 161,73 100,39 43,39 161)),POLYGON((186 123,151 128,153 141,186 123)),POLYGON((73 100,39 161,73 171,73 100)),POLYGON((151 152,184 161,152 147,151 152)),POLYGON((38 172,73 171,39 161,38 172)),POLYGON((184 161,151 152,177 169,184 161)),POLYGON((73 171,38 172,74 176,73 171)),POLYGON((149 157,177 169,151 152,149 157)),POLYGON((36 176,74 176,38 172,36 176)),POLYGON((146 162,167 177,149 157,146 162)),POLYGON((34 179,74 176,36 176,34 179)),POLYGON((167 177,146 162,154 182,167 177)),POLYGON((74 176,34 179,76 178,74 176)),POLYGON((154 182,146 162,142 166,154 182)),POLYGON((30 181,76 178,34 179,30 181)),POLYGON((154 182,142 166,137 169,154 182)),POLYGON((100 190,76 178,30 181,100 190)),POLYGON((139 187,137 169,132 172,139 187)),POLYGON((80 179,100 190,89 180,80 179)),POLYGON((139 187,132 172,126 175,139 187)),POLYGON((100 190,99 180,89 180,100 190)),POLYGON((121 189,126 175,118 177,121 189)),POLYGON((100 190,109 179,99 180,100 190)),POLYGON((121 189,118 177,109 179,121 189)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2892, "question_en": "Triangulate the polygon with the outer ring composed of point sequence (26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17) and the inner ring composed of point sequence (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147), then output the result in WKT format."}
{"id": 553, "function": "ST_TriangulatePolygon", "question": "对包含外环坐标串(26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17)和内环坐标串(152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147)的复杂多边形执行ST_TriangulatePolygon操作，并用ST_AsText函数输出WKT格式的三角剖分结果。", "sql": "SELECT ST_AsText(ST_TriangulatePolygon( 'POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147))' ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((25 183,10 185,10 190,25 183)),POLYGON((126 175,121 189,139 187,126 175)),POLYGON((137 169,139 187,154 182,137 169)),POLYGON((149 157,167 177,177 169,149 157)),POLYGON((153 141,189 152,190 141,153 141)),POLYGON((153 141,188 128,186 123,153 141)),POLYGON((186 123,184 117,180 113,186 123)),POLYGON((149 123,176 108,170 104,149 123)),POLYGON((147 118,164 101,151 96,147 118)),POLYGON((121 102,136 92,119 89,121 102)),POLYGON((85 99,73 89,73 100,85 99)),POLYGON((89 17,106 15,106 10,89 17)),POLYGON((26 17,10 10,10 15,26 17)),POLYGON((100 190,25 183,10 190,100 190)),POLYGON((121 189,109 179,100 190,121 189)),POLYGON((189 152,152 147,184 161,189 152)),POLYGON((153 141,190 141,188 128,153 141)),POLYGON((147 118,170 104,164 101,147 118)),POLYGON((139 110,151 96,136 92,139 110)),POLYGON((73 89,85 99,86 89,73 89)),POLYGON((83 18,89 17,106 10,83 18)),POLYGON((83 18,10 10,26 17,83 18)),POLYGON((100 190,30 181,25 183,100 190)),POLYGON((189 152,153 141,152 147,189 152)),POLYGON((176 108,151 128,180 113,176 108)),POLYGON((91 99,86 89,85 99,91 99)),POLYGON((10 10,83 18,106 10,10 10)),POLYGON((76 178,100 190,80 179,76 178)),POLYGON((86 89,91 99,100 89,86 89)),POLYGON((31 19,83 18,26 17,31 19)),POLYGON((102 99,100 89,91 99,102 99)),POLYGON((83 18,31 19,79 20,83 18)),POLYGON((112 100,100 89,102 99,112 100)),POLYGON((34 21,79 20,31 19,34 21)),POLYGON((100 89,112 100,119 89,100 89)),POLYGON((37 24,79 20,34 21,37 24)),POLYGON((119 89,112 100,121 102,119 89)),POLYGON((79 20,37 24,77 23,79 20)),POLYGON((136 92,121 102,128 104,136 92)),POLYGON((77 23,37 24,75 27,77 23)),POLYGON((134 107,136 92,128 104,134 107)),POLYGON((38 29,75 27,37 24,38 29)),POLYGON((139 110,136 92,134 107,139 110)),POLYGON((75 27,38 29,74 32,75 27)),POLYGON((151 96,139 110,143 114,151 96)),POLYGON((74 32,38 29,73 39,74 32)),POLYGON((151 96,143 114,147 118,151 96)),POLYGON((39 43,73 39,38 29,39 43)),POLYGON((170 104,147 118,149 123,170 104)),POLYGON((73 39,39 43,73 89,73 39)),POLYGON((176 108,149 123,151 128,176 108)),POLYGON((73 89,39 43,73 100,73 89)),POLYGON((180 113,151 128,186 123,180 113)),POLYGON((39 161,73 100,39 43,39 161)),POLYGON((186 123,151 128,153 141,186 123)),POLYGON((73 100,39 161,73 171,73 100)),POLYGON((151 152,184 161,152 147,151 152)),POLYGON((38 172,73 171,39 161,38 172)),POLYGON((184 161,151 152,177 169,184 161)),POLYGON((73 171,38 172,74 176,73 171)),POLYGON((149 157,177 169,151 152,149 157)),POLYGON((36 176,74 176,38 172,36 176)),POLYGON((146 162,167 177,149 157,146 162)),POLYGON((34 179,74 176,36 176,34 179)),POLYGON((167 177,146 162,154 182,167 177)),POLYGON((74 176,34 179,76 178,74 176)),POLYGON((154 182,146 162,142 166,154 182)),POLYGON((30 181,76 178,34 179,30 181)),POLYGON((154 182,142 166,137 169,154 182)),POLYGON((100 190,76 178,30 181,100 190)),POLYGON((139 187,137 169,132 172,139 187)),POLYGON((80 179,100 190,89 180,80 179)),POLYGON((139 187,132 172,126 175,139 187)),POLYGON((100 190,99 180,89 180,100 190)),POLYGON((121 189,126 175,118 177,121 189)),POLYGON((100 190,109 179,99 180,100 190)),POLYGON((121 189,118 177,109 179,121 189)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2893, "question_en": "Perform the ST_TriangulatePolygon operation on a complex polygon containing an outer ring coordinate string (26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17) and an inner ring coordinate string (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147), then output the triangulation result in WKT format using the ST_AsText function."}
{"id": 553, "function": "ST_TriangulatePolygon", "question": "使用ST_TriangulatePolygon函数处理由外边界点序列(26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17)和内边界点序列(152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147)定义的带孔多边形，并通过ST_AsText函数以WKT文本格式返回三角剖分后的几何集合。", "sql": "SELECT ST_AsText(ST_TriangulatePolygon( 'POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147))' ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((25 183,10 185,10 190,25 183)),POLYGON((126 175,121 189,139 187,126 175)),POLYGON((137 169,139 187,154 182,137 169)),POLYGON((149 157,167 177,177 169,149 157)),POLYGON((153 141,189 152,190 141,153 141)),POLYGON((153 141,188 128,186 123,153 141)),POLYGON((186 123,184 117,180 113,186 123)),POLYGON((149 123,176 108,170 104,149 123)),POLYGON((147 118,164 101,151 96,147 118)),POLYGON((121 102,136 92,119 89,121 102)),POLYGON((85 99,73 89,73 100,85 99)),POLYGON((89 17,106 15,106 10,89 17)),POLYGON((26 17,10 10,10 15,26 17)),POLYGON((100 190,25 183,10 190,100 190)),POLYGON((121 189,109 179,100 190,121 189)),POLYGON((189 152,152 147,184 161,189 152)),POLYGON((153 141,190 141,188 128,153 141)),POLYGON((147 118,170 104,164 101,147 118)),POLYGON((139 110,151 96,136 92,139 110)),POLYGON((73 89,85 99,86 89,73 89)),POLYGON((83 18,89 17,106 10,83 18)),POLYGON((83 18,10 10,26 17,83 18)),POLYGON((100 190,30 181,25 183,100 190)),POLYGON((189 152,153 141,152 147,189 152)),POLYGON((176 108,151 128,180 113,176 108)),POLYGON((91 99,86 89,85 99,91 99)),POLYGON((10 10,83 18,106 10,10 10)),POLYGON((76 178,100 190,80 179,76 178)),POLYGON((86 89,91 99,100 89,86 89)),POLYGON((31 19,83 18,26 17,31 19)),POLYGON((102 99,100 89,91 99,102 99)),POLYGON((83 18,31 19,79 20,83 18)),POLYGON((112 100,100 89,102 99,112 100)),POLYGON((34 21,79 20,31 19,34 21)),POLYGON((100 89,112 100,119 89,100 89)),POLYGON((37 24,79 20,34 21,37 24)),POLYGON((119 89,112 100,121 102,119 89)),POLYGON((79 20,37 24,77 23,79 20)),POLYGON((136 92,121 102,128 104,136 92)),POLYGON((77 23,37 24,75 27,77 23)),POLYGON((134 107,136 92,128 104,134 107)),POLYGON((38 29,75 27,37 24,38 29)),POLYGON((139 110,136 92,134 107,139 110)),POLYGON((75 27,38 29,74 32,75 27)),POLYGON((151 96,139 110,143 114,151 96)),POLYGON((74 32,38 29,73 39,74 32)),POLYGON((151 96,143 114,147 118,151 96)),POLYGON((39 43,73 39,38 29,39 43)),POLYGON((170 104,147 118,149 123,170 104)),POLYGON((73 39,39 43,73 89,73 39)),POLYGON((176 108,149 123,151 128,176 108)),POLYGON((73 89,39 43,73 100,73 89)),POLYGON((180 113,151 128,186 123,180 113)),POLYGON((39 161,73 100,39 43,39 161)),POLYGON((186 123,151 128,153 141,186 123)),POLYGON((73 100,39 161,73 171,73 100)),POLYGON((151 152,184 161,152 147,151 152)),POLYGON((38 172,73 171,39 161,38 172)),POLYGON((184 161,151 152,177 169,184 161)),POLYGON((73 171,38 172,74 176,73 171)),POLYGON((149 157,177 169,151 152,149 157)),POLYGON((36 176,74 176,38 172,36 176)),POLYGON((146 162,167 177,149 157,146 162)),POLYGON((34 179,74 176,36 176,34 179)),POLYGON((167 177,146 162,154 182,167 177)),POLYGON((74 176,34 179,76 178,74 176)),POLYGON((154 182,146 162,142 166,154 182)),POLYGON((30 181,76 178,34 179,30 181)),POLYGON((154 182,142 166,137 169,154 182)),POLYGON((100 190,76 178,30 181,100 190)),POLYGON((139 187,137 169,132 172,139 187)),POLYGON((80 179,100 190,89 180,80 179)),POLYGON((139 187,132 172,126 175,139 187)),POLYGON((100 190,99 180,89 180,100 190)),POLYGON((121 189,126 175,118 177,121 189)),POLYGON((100 190,109 179,99 180,100 190)),POLYGON((121 189,118 177,109 179,121 189)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2894, "question_en": "Use the ST_TriangulatePolygon function to process a polygon with an outer boundary point sequence (26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17) and an inner boundary point sequence (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147), then return the triangulated geometry collection in WKT text format using the ST_AsText function."}
{"id": 553, "function": "ST_TriangulatePolygon", "question": "输出由外环(26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17)和内环(152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147)组成的POLYGON对象三角剖分后的结果的WKT字符串格式表示。", "sql": "SELECT ST_AsText(ST_TriangulatePolygon( 'POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147))' ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((25 183,10 185,10 190,25 183)),POLYGON((126 175,121 189,139 187,126 175)),POLYGON((137 169,139 187,154 182,137 169)),POLYGON((149 157,167 177,177 169,149 157)),POLYGON((153 141,189 152,190 141,153 141)),POLYGON((153 141,188 128,186 123,153 141)),POLYGON((186 123,184 117,180 113,186 123)),POLYGON((149 123,176 108,170 104,149 123)),POLYGON((147 118,164 101,151 96,147 118)),POLYGON((121 102,136 92,119 89,121 102)),POLYGON((85 99,73 89,73 100,85 99)),POLYGON((89 17,106 15,106 10,89 17)),POLYGON((26 17,10 10,10 15,26 17)),POLYGON((100 190,25 183,10 190,100 190)),POLYGON((121 189,109 179,100 190,121 189)),POLYGON((189 152,152 147,184 161,189 152)),POLYGON((153 141,190 141,188 128,153 141)),POLYGON((147 118,170 104,164 101,147 118)),POLYGON((139 110,151 96,136 92,139 110)),POLYGON((73 89,85 99,86 89,73 89)),POLYGON((83 18,89 17,106 10,83 18)),POLYGON((83 18,10 10,26 17,83 18)),POLYGON((100 190,30 181,25 183,100 190)),POLYGON((189 152,153 141,152 147,189 152)),POLYGON((176 108,151 128,180 113,176 108)),POLYGON((91 99,86 89,85 99,91 99)),POLYGON((10 10,83 18,106 10,10 10)),POLYGON((76 178,100 190,80 179,76 178)),POLYGON((86 89,91 99,100 89,86 89)),POLYGON((31 19,83 18,26 17,31 19)),POLYGON((102 99,100 89,91 99,102 99)),POLYGON((83 18,31 19,79 20,83 18)),POLYGON((112 100,100 89,102 99,112 100)),POLYGON((34 21,79 20,31 19,34 21)),POLYGON((100 89,112 100,119 89,100 89)),POLYGON((37 24,79 20,34 21,37 24)),POLYGON((119 89,112 100,121 102,119 89)),POLYGON((79 20,37 24,77 23,79 20)),POLYGON((136 92,121 102,128 104,136 92)),POLYGON((77 23,37 24,75 27,77 23)),POLYGON((134 107,136 92,128 104,134 107)),POLYGON((38 29,75 27,37 24,38 29)),POLYGON((139 110,136 92,134 107,139 110)),POLYGON((75 27,38 29,74 32,75 27)),POLYGON((151 96,139 110,143 114,151 96)),POLYGON((74 32,38 29,73 39,74 32)),POLYGON((151 96,143 114,147 118,151 96)),POLYGON((39 43,73 39,38 29,39 43)),POLYGON((170 104,147 118,149 123,170 104)),POLYGON((73 39,39 43,73 89,73 39)),POLYGON((176 108,149 123,151 128,176 108)),POLYGON((73 89,39 43,73 100,73 89)),POLYGON((180 113,151 128,186 123,180 113)),POLYGON((39 161,73 100,39 43,39 161)),POLYGON((186 123,151 128,153 141,186 123)),POLYGON((73 100,39 161,73 171,73 100)),POLYGON((151 152,184 161,152 147,151 152)),POLYGON((38 172,73 171,39 161,38 172)),POLYGON((184 161,151 152,177 169,184 161)),POLYGON((73 171,38 172,74 176,73 171)),POLYGON((149 157,177 169,151 152,149 157)),POLYGON((36 176,74 176,38 172,36 176)),POLYGON((146 162,167 177,149 157,146 162)),POLYGON((34 179,74 176,36 176,34 179)),POLYGON((167 177,146 162,154 182,167 177)),POLYGON((74 176,34 179,76 178,74 176)),POLYGON((154 182,146 162,142 166,154 182)),POLYGON((30 181,76 178,34 179,30 181)),POLYGON((154 182,142 166,137 169,154 182)),POLYGON((100 190,76 178,30 181,100 190)),POLYGON((139 187,137 169,132 172,139 187)),POLYGON((80 179,100 190,89 180,80 179)),POLYGON((139 187,132 172,126 175,139 187)),POLYGON((100 190,99 180,89 180,100 190)),POLYGON((121 189,126 175,118 177,121 189)),POLYGON((100 190,109 179,99 180,100 190)),POLYGON((121 189,118 177,109 179,121 189)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2895, "question_en": "Output the WKT string representation of the triangulated result of a POLYGON object formed by an outer ring (26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17) and an inner ring (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147)."}
{"id": 553, "function": "ST_TriangulatePolygon", "question": "将复杂多边形POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147))进行三角剖分，输出结果几何的WKT文本表示。", "sql": "SELECT ST_AsText(ST_TriangulatePolygon( 'POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147))' ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((25 183,10 185,10 190,25 183)),POLYGON((126 175,121 189,139 187,126 175)),POLYGON((137 169,139 187,154 182,137 169)),POLYGON((149 157,167 177,177 169,149 157)),POLYGON((153 141,189 152,190 141,153 141)),POLYGON((153 141,188 128,186 123,153 141)),POLYGON((186 123,184 117,180 113,186 123)),POLYGON((149 123,176 108,170 104,149 123)),POLYGON((147 118,164 101,151 96,147 118)),POLYGON((121 102,136 92,119 89,121 102)),POLYGON((85 99,73 89,73 100,85 99)),POLYGON((89 17,106 15,106 10,89 17)),POLYGON((26 17,10 10,10 15,26 17)),POLYGON((100 190,25 183,10 190,100 190)),POLYGON((121 189,109 179,100 190,121 189)),POLYGON((189 152,152 147,184 161,189 152)),POLYGON((153 141,190 141,188 128,153 141)),POLYGON((147 118,170 104,164 101,147 118)),POLYGON((139 110,151 96,136 92,139 110)),POLYGON((73 89,85 99,86 89,73 89)),POLYGON((83 18,89 17,106 10,83 18)),POLYGON((83 18,10 10,26 17,83 18)),POLYGON((100 190,30 181,25 183,100 190)),POLYGON((189 152,153 141,152 147,189 152)),POLYGON((176 108,151 128,180 113,176 108)),POLYGON((91 99,86 89,85 99,91 99)),POLYGON((10 10,83 18,106 10,10 10)),POLYGON((76 178,100 190,80 179,76 178)),POLYGON((86 89,91 99,100 89,86 89)),POLYGON((31 19,83 18,26 17,31 19)),POLYGON((102 99,100 89,91 99,102 99)),POLYGON((83 18,31 19,79 20,83 18)),POLYGON((112 100,100 89,102 99,112 100)),POLYGON((34 21,79 20,31 19,34 21)),POLYGON((100 89,112 100,119 89,100 89)),POLYGON((37 24,79 20,34 21,37 24)),POLYGON((119 89,112 100,121 102,119 89)),POLYGON((79 20,37 24,77 23,79 20)),POLYGON((136 92,121 102,128 104,136 92)),POLYGON((77 23,37 24,75 27,77 23)),POLYGON((134 107,136 92,128 104,134 107)),POLYGON((38 29,75 27,37 24,38 29)),POLYGON((139 110,136 92,134 107,139 110)),POLYGON((75 27,38 29,74 32,75 27)),POLYGON((151 96,139 110,143 114,151 96)),POLYGON((74 32,38 29,73 39,74 32)),POLYGON((151 96,143 114,147 118,151 96)),POLYGON((39 43,73 39,38 29,39 43)),POLYGON((170 104,147 118,149 123,170 104)),POLYGON((73 39,39 43,73 89,73 39)),POLYGON((176 108,149 123,151 128,176 108)),POLYGON((73 89,39 43,73 100,73 89)),POLYGON((180 113,151 128,186 123,180 113)),POLYGON((39 161,73 100,39 43,39 161)),POLYGON((186 123,151 128,153 141,186 123)),POLYGON((73 100,39 161,73 171,73 100)),POLYGON((151 152,184 161,152 147,151 152)),POLYGON((38 172,73 171,39 161,38 172)),POLYGON((184 161,151 152,177 169,184 161)),POLYGON((73 171,38 172,74 176,73 171)),POLYGON((149 157,177 169,151 152,149 157)),POLYGON((36 176,74 176,38 172,36 176)),POLYGON((146 162,167 177,149 157,146 162)),POLYGON((34 179,74 176,36 176,34 179)),POLYGON((167 177,146 162,154 182,167 177)),POLYGON((74 176,34 179,76 178,74 176)),POLYGON((154 182,146 162,142 166,154 182)),POLYGON((30 181,76 178,34 179,30 181)),POLYGON((154 182,142 166,137 169,154 182)),POLYGON((100 190,76 178,30 181,100 190)),POLYGON((139 187,137 169,132 172,139 187)),POLYGON((80 179,100 190,89 180,80 179)),POLYGON((139 187,132 172,126 175,139 187)),POLYGON((100 190,99 180,89 180,100 190)),POLYGON((121 189,126 175,118 177,121 189)),POLYGON((100 190,109 179,99 180,100 190)),POLYGON((121 189,118 177,109 179,121 189)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2896, "question_en": "Triangulate the complex polygon POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147)) and output the WKT representation of the resulting geometry."}
{"id": 553, "function": "ST_TriangulatePolygon", "question": "输出POLYGON对象POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147))经过ST_TriangulatePolygon函数处理后的结果的WKT格式字符串。", "sql": "SELECT ST_AsText(ST_TriangulatePolygon( 'POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147))' ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((25 183,10 185,10 190,25 183)),POLYGON((126 175,121 189,139 187,126 175)),POLYGON((137 169,139 187,154 182,137 169)),POLYGON((149 157,167 177,177 169,149 157)),POLYGON((153 141,189 152,190 141,153 141)),POLYGON((153 141,188 128,186 123,153 141)),POLYGON((186 123,184 117,180 113,186 123)),POLYGON((149 123,176 108,170 104,149 123)),POLYGON((147 118,164 101,151 96,147 118)),POLYGON((121 102,136 92,119 89,121 102)),POLYGON((85 99,73 89,73 100,85 99)),POLYGON((89 17,106 15,106 10,89 17)),POLYGON((26 17,10 10,10 15,26 17)),POLYGON((100 190,25 183,10 190,100 190)),POLYGON((121 189,109 179,100 190,121 189)),POLYGON((189 152,152 147,184 161,189 152)),POLYGON((153 141,190 141,188 128,153 141)),POLYGON((147 118,170 104,164 101,147 118)),POLYGON((139 110,151 96,136 92,139 110)),POLYGON((73 89,85 99,86 89,73 89)),POLYGON((83 18,89 17,106 10,83 18)),POLYGON((83 18,10 10,26 17,83 18)),POLYGON((100 190,30 181,25 183,100 190)),POLYGON((189 152,153 141,152 147,189 152)),POLYGON((176 108,151 128,180 113,176 108)),POLYGON((91 99,86 89,85 99,91 99)),POLYGON((10 10,83 18,106 10,10 10)),POLYGON((76 178,100 190,80 179,76 178)),POLYGON((86 89,91 99,100 89,86 89)),POLYGON((31 19,83 18,26 17,31 19)),POLYGON((102 99,100 89,91 99,102 99)),POLYGON((83 18,31 19,79 20,83 18)),POLYGON((112 100,100 89,102 99,112 100)),POLYGON((34 21,79 20,31 19,34 21)),POLYGON((100 89,112 100,119 89,100 89)),POLYGON((37 24,79 20,34 21,37 24)),POLYGON((119 89,112 100,121 102,119 89)),POLYGON((79 20,37 24,77 23,79 20)),POLYGON((136 92,121 102,128 104,136 92)),POLYGON((77 23,37 24,75 27,77 23)),POLYGON((134 107,136 92,128 104,134 107)),POLYGON((38 29,75 27,37 24,38 29)),POLYGON((139 110,136 92,134 107,139 110)),POLYGON((75 27,38 29,74 32,75 27)),POLYGON((151 96,139 110,143 114,151 96)),POLYGON((74 32,38 29,73 39,74 32)),POLYGON((151 96,143 114,147 118,151 96)),POLYGON((39 43,73 39,38 29,39 43)),POLYGON((170 104,147 118,149 123,170 104)),POLYGON((73 39,39 43,73 89,73 39)),POLYGON((176 108,149 123,151 128,176 108)),POLYGON((73 89,39 43,73 100,73 89)),POLYGON((180 113,151 128,186 123,180 113)),POLYGON((39 161,73 100,39 43,39 161)),POLYGON((186 123,151 128,153 141,186 123)),POLYGON((73 100,39 161,73 171,73 100)),POLYGON((151 152,184 161,152 147,151 152)),POLYGON((38 172,73 171,39 161,38 172)),POLYGON((184 161,151 152,177 169,184 161)),POLYGON((73 171,38 172,74 176,73 171)),POLYGON((149 157,177 169,151 152,149 157)),POLYGON((36 176,74 176,38 172,36 176)),POLYGON((146 162,167 177,149 157,146 162)),POLYGON((34 179,74 176,36 176,34 179)),POLYGON((167 177,146 162,154 182,167 177)),POLYGON((74 176,34 179,76 178,74 176)),POLYGON((154 182,146 162,142 166,154 182)),POLYGON((30 181,76 178,34 179,30 181)),POLYGON((154 182,142 166,137 169,154 182)),POLYGON((100 190,76 178,30 181,100 190)),POLYGON((139 187,137 169,132 172,139 187)),POLYGON((80 179,100 190,89 180,80 179)),POLYGON((139 187,132 172,126 175,139 187)),POLYGON((100 190,99 180,89 180,100 190)),POLYGON((121 189,126 175,118 177,121 189)),POLYGON((100 190,109 179,99 180,100 190)),POLYGON((121 189,118 177,109 179,121 189)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2897, "question_en": "Output the WKT format string of the result after processing the POLYGON object POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147)) with the ST_TriangulatePolygon function."}
{"id": 554, "function": "ST_TriangulatePolygon", "question": "对由顶点(10 190)、(10 70)、(80 70)、(80 130)、(50 160)、(120 160)、(120 190)构成的非凸多边形进行三角剖分操作。", "sql": "SELECT ST_TriangulatePolygon( 'POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))'::geometry );", "execution_result": [["01070000000500000001030000000100000004000000000000000000494000000000000064400000000000005E400000000000C067400000000000005E40000000000000644000000000000049400000000000006440010300000001000000040000000000000000002440000000000080514000000000000054400000000000406040000000000000544000000000008051400000000000002440000000000080514001030000000100000004000000000000000000494000000000000064400000000000002440000000000080514000000000000024400000000000C0674000000000000049400000000000006440010300000001000000040000000000000000005E400000000000C067400000000000004940000000000000644000000000000024400000000000C067400000000000005E400000000000C067400103000000010000000400000000000000000054400000000000406040000000000000244000000000008051400000000000004940000000000000644000000000000054400000000000406040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2898, "question_en": "Perform a triangulation operation on the non-convex polygon defined by the vertices (10 190), (10 70), (80 70), (80 130), (50 160), (120 160), (120 190)."}
{"id": 554, "function": "ST_TriangulatePolygon", "question": "将WKT格式字符串定义的几何对象POLYGON ((10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190))通过三角剖分转换为三角网集合。", "sql": "SELECT ST_TriangulatePolygon( 'POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))'::geometry );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2899, "question_en": "Convert the geometric object defined by the WKT string POLYGON ((10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190)) into a collection of triangular meshes through triangulation."}
{"id": 554, "function": "ST_TriangulatePolygon", "question": "使用PostGIS的ST_TriangulatePolygon函数处理包含多个顶点（坐标依次为：10 190→10 70→80 70→80 130→50 160→120 160→120 190→10 190）的复杂多边形。", "sql": "SELECT ST_TriangulatePolygon( 'POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))'::geometry );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2900, "question_en": "Process a complex polygon with multiple vertices (coordinates in order: 10 190→10 70→80 70→80 130→50 160→120 160→120 190→10 190) using PostGIS's ST_TriangulatePolygon function."}
{"id": 554, "function": "ST_TriangulatePolygon", "question": "输出将POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))进行三角剖分后得到的几何对象。", "sql": "SELECT ST_TriangulatePolygon( 'POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))'::geometry );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2901, "question_en": "Output the geometric objects obtained by triangulating the polygon POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))."}
{"id": 554, "function": "ST_TriangulatePolygon", "question": "输出对由顶点序列(10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190)构成的非凸多边形进行三角剖分后的结果几何对象。", "sql": "SELECT ST_TriangulatePolygon( 'POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))'::geometry );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2902, "question_en": "Output the resulting geometric object after performing a triangulation on the non-convex polygon defined by the vertex sequence (10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190)."}
{"id": 554, "function": "ST_TriangulatePolygon", "question": "输出POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))经过ST_TriangulatePolygon函数处理后的三角形集合的几何表示。", "sql": "SELECT ST_TriangulatePolygon( 'POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))'::geometry );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2903, "question_en": "Output the geometric representation of the triangle set obtained by processing POLYGON ((10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190)) with the ST_TriangulatePolygon function."}
{"id": 555, "function": "ST_VoronoiLines", "question": "基于坐标为(50 30)、(60 30)、(100 100)、(10 150)、(110 120)的五个点组成的MULTIPOINT几何对象，使用30作为容差参数，生成Voronoi图的边界线并返回几何结果。", "sql": "SELECT ST_VoronoiLines( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_result": [["0105000000030000000102000000020000001DC7711CC7F160400000000000E07040E9A28B2EBA684240D145175D74115740010200000002000000E9A28B2EBA684240D145175D741157400000000000805BC0A9AAAAAAAAAA45400102000000020000000000000000C06C40BA6DDBB66DDB46C0E9A28B2EBA684240D145175D74115740"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2904, "question_en": "For a MULTIPOINT geometry object composed of five points with coordinates (50 30), (60 30), (100 100), (10 150), and (110 120), generate the boundary lines of the Voronoi diagram using a tolerance parameter of 30 and return the geometric result."}
{"id": 555, "function": "ST_VoronoiLines", "question": "对MULTIPOINT类型几何对象（包含点(50 30)、(60 30)、(100 100)、(10 150)、(110 120)）执行ST_VoronoiLines操作，其中容差参数设置为30，输出Voronoi边界线几何体。", "sql": "SELECT ST_VoronoiLines( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_result": [["0105000000030000000102000000020000001DC7711CC7F160400000000000E07040E9A28B2EBA684240D145175D74115740010200000002000000E9A28B2EBA684240D145175D741157400000000000805BC0A9AAAAAAAAAA45400102000000020000000000000000C06C40BA6DDBB66DDB46C0E9A28B2EBA684240D145175D74115740"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2905, "question_en": "Perform the ST_VoronoiLines operation on a MULTIPOINT geometry object (containing points (50 30), (60 30), (100 100), (10 150), (110 120)) with a tolerance parameter of 30, and output the Voronoi boundary line geometry."}
{"id": 555, "function": "ST_VoronoiLines", "question": "用PostGIS函数ST_VoronoiLines处理由(50 30)、(60 30)、(100 100)、(10 150)、(110 120)五个点构成的多点几何，容差参数为30，计算并返回Voronoi分割线几何数据。", "sql": "SELECT ST_VoronoiLines( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_result": [["0105000000030000000102000000020000001DC7711CC7F160400000000000E07040E9A28B2EBA684240D145175D74115740010200000002000000E9A28B2EBA684240D145175D741157400000000000805BC0A9AAAAAAAAAA45400102000000020000000000000000C06C40BA6DDBB66DDB46C0E9A28B2EBA684240D145175D74115740"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2906, "question_en": "Use the PostGIS function ST_VoronoiLines to process a multipoint geometry consisting of the five points (50 30), (60 30), (100 100), (10 150), (110 120) with a tolerance parameter of 30, and return the Voronoi tessellation line geometry data."}
{"id": 555, "function": "ST_VoronoiLines", "question": "输出由MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120)生成的泰森多边形边界线几何对象，其中设置容差参数为30，结果以几何对象形式返回。", "sql": "SELECT ST_VoronoiLines( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_result": [["0105000000030000000102000000020000001DC7711CC7F160400000000000E07040E9A28B2EBA684240D145175D74115740010200000002000000E9A28B2EBA684240D145175D741157400000000000805BC0A9AAAAAAAAAA45400102000000020000000000000000C06C40BA6DDBB66DDB46C0E9A28B2EBA684240D145175D74115740"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2907, "question_en": "Output the Voronoi polygon boundary line geometry object generated from MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120), with a tolerance parameter set to 30, and return the result as a geometry object."}
{"id": 555, "function": "ST_VoronoiLines", "question": "将MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120)作为输入点集，输出其泰森多边形边界线，容差参数设置为30。", "sql": "SELECT ST_VoronoiLines( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_result": [["0105000000030000000102000000020000001DC7711CC7F160400000000000E07040E9A28B2EBA684240D145175D74115740010200000002000000E9A28B2EBA684240D145175D741157400000000000805BC0A9AAAAAAAAAA45400102000000020000000000000000C06C40BA6DDBB66DDB46C0E9A28B2EBA684240D145175D74115740"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2908, "question_en": "Using the input point set MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120), output the boundary lines of its Voronoi polygons with a tolerance parameter set to 30."}
{"id": 555, "function": "ST_VoronoiLines", "question": "输出使用ST_VoronoiLines函数生成的MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120)的泰森多边形边界线，容差参数设置为30。", "sql": "SELECT ST_VoronoiLines( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_result": [["0105000000030000000102000000020000001DC7711CC7F160400000000000E07040E9A28B2EBA684240D145175D74115740010200000002000000E9A28B2EBA684240D145175D741157400000000000805BC0A9AAAAAAAAAA45400102000000020000000000000000C06C40BA6DDBB66DDB46C0E9A28B2EBA684240D145175D74115740"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2909, "question_en": "Output the Thiessen polygon boundary lines generated using the ST_VoronoiLines function for the MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120) with a tolerance parameter set to 30."}
{"id": 556, "function": "ST_VoronoiPolygons", "question": "基于由五个二维点组成的多点集合 MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120)，生成其Voronoi多边形图，并将结果命名为geom。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry ) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2910, "question_en": "Generate the Voronoi polygons from the multipoint collection MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120) and name the resulting geometry as geom."}
{"id": 556, "function": "ST_VoronoiPolygons", "question": "如何利用PostGIS函数ST_VoronoiPolygons，对包含坐标点(50,30)、(60,30)、(100,100)、(10,150)、(110,120)的多点几何对象计算Voronoi划分？", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry ) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2911, "question_en": "How to use the PostGIS function ST_VoronoiPolygons to compute the Voronoi tessellation for a multi-point geometry object containing the coordinates (50,30), (60,30), (100,100), (10,150), and (110,120)?"}
{"id": 556, "function": "ST_VoronoiPolygons", "question": "执行SQL语句，输入MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120)作为几何参数，调用ST_VoronoiPolygons函数生成Voronoi多边形，输出列名为geom。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry ) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2912, "question_en": "Execute the SQL statement, input MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120) as the geometry parameter, call the ST_VoronoiPolygons function to generate Voronoi polygons, and output the column named geom."}
{"id": 556, "function": "ST_VoronoiPolygons", "question": "输出基于MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120)生成的Voronoi多边形的几何对象集合，结果以PostGIS几何对象格式返回。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry ) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2913, "question_en": "Output the collection of Voronoi polygon geometries generated from MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120), returning the result in PostGIS geometry format."}
{"id": 556, "function": "ST_VoronoiPolygons", "question": "将MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120)作为输入点集，计算其Voronoi图并以多边形的形式返回结果几何对象。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry ) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2914, "question_en": "Take the MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120) as the input point set, compute its Voronoi diagram, and return the resulting geometry object as polygons."}
{"id": 556, "function": "ST_VoronoiPolygons", "question": "输出由五个二维点(50 30, 60 30, 100 100, 10 150, 110 120)构成的Voronoi多边形的几何集合，返回类型为PostGIS几何对象。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry ) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2915, "question_en": "Output the geometric collection of Voronoi polygons formed by the five 2D points (50 30, 60 30, 100 100, 10 150, 110 120), returning the type as a PostGIS geometry object."}
{"id": 557, "function": "ST_VoronoiPolygons", "question": "基于坐标为(50 30)、(60 30)、(100 100)、(10 150)、(110 120)的五个点组成的MULTIPOINT几何对象，生成容差距离为30的泰森多边形，并将结果命名为geom。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2916, "question_en": "Generate Thiessen polygons with a tolerance distance of 30 for a MULTIPOINT geometry object composed of five points with coordinates (50 30), (60 30), (100 100), (10 150), and (110 120), and name the resulting geometry as geom."}
{"id": 557, "function": "ST_VoronoiPolygons", "question": "使用PostGIS函数ST_VoronoiPolygons，输入参数为MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)和容差距离30，计算并返回这些点的泰森多边形几何结果。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2917, "question_en": "Using the PostGIS function ST_VoronoiPolygons with input parameters MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120) and a tolerance distance of 30, calculate and return the Voronoi polygon geometries for these points."}
{"id": 557, "function": "ST_VoronoiPolygons", "question": "对几何对象MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)执行泰森多边形分析，设置容差距离为30个单位，输出结果列名为geom。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2918, "question_en": "Perform Thiessen polygon analysis on the geometric object MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120) with a tolerance distance of 30 units, and output the result column as geom."}
{"id": 557, "function": "ST_VoronoiPolygons", "question": "输出基于MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120)生成的泰森多边形几何对象，其中30表示顶点容差距离参数，结果以PostGIS几何对象格式返回。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2919, "question_en": "Output the Voronoi polygons generated from MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120) with a vertex tolerance distance parameter of 30, returning the result in PostGIS geometry object format."}
{"id": 557, "function": "ST_VoronoiPolygons", "question": "将MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120)作为输入点集，计算其泰森多边形，顶点容差距离参数为30，最终输出几何对象的WKB格式。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2920, "question_en": "Using the input point set MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120), calculate its Voronoi polygons with a vertex tolerance distance parameter of 30, and output the WKB format of the resulting geometry object."}
{"id": 557, "function": "ST_VoronoiPolygons", "question": "以MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120)为种子点，生成泰森多边形几何集合，顶点容差距离参数设置为30，输出结果以PostGIS标准几何列形式返回。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2921, "question_en": "Using MULTIPOINT (50 30, 60 30, 100 100, 10 150, 110 120) as seed points, generate a Voronoi polygon geometry collection with a vertex tolerance distance parameter set to 30, and return the result in PostGIS standard geometry column format."}
{"id": 559, "function": "ST_CoverageInvalidEdges", "question": "对于由四个多边形组成的覆盖层数据（具体为：ID=1的多边形POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))、ID=2的多边形POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))、ID=3的多边形POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))和ID=4的多边形POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))），使用窗口函数检测是否形成有效的多边形覆盖范围，计算每个多边形的不合法边，并以WKT格式输出结果。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))'::geometry),\n  (2, 'POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))'::geometry),\n  (3, 'POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))'::geometry),\n  (4, 'POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageInvalidEdges(geom) OVER ())\n  FROM coverage;", "execution_result": [[1, "LINESTRING(40 110,100 70)"], [2, "MULTILINESTRING((100 130,140 120,140 160,100 190),(40 110,50 80,74 110.5))"], [3, "LINESTRING(140 80,140 190)"], [4, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2922, "question_en": "For a coverage layer consisting of four polygons (specifically: polygon with ID=1 POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190)), ID=2 POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190)), ID=3 POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190)), and ID=4 POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))), use window functions to check if they form a valid polygon coverage, compute the invalid edges for each polygon, and output the results in WKT format."}
{"id": 559, "function": "ST_CoverageInvalidEdges", "question": "给定四个具体多边形（ID=1的坐标串为10 190,30 160,40 110,100 70,120 10,10 10,10 190；ID=2的坐标串为100 190,10 190,30 160,40 110,50 80,74 110.5,100 130,140 120,140 160,100 190；ID=3的坐标串为140 190,190 190,190 80,140 80,140 190；ID=4的坐标串为180 40,120 10,100 70,140 80,190 80,180 40），如何用ST_CoverageInvalidEdges函数检测每个多边形在覆盖层中的无效边，并通过ST_AsText以WKT形式展示？", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))'::geometry),\n  (2, 'POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))'::geometry),\n  (3, 'POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))'::geometry),\n  (4, 'POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageInvalidEdges(geom) OVER ())\n  FROM coverage;", "execution_result": [[1, "LINESTRING(40 110,100 70)"], [2, "MULTILINESTRING((100 130,140 120,140 160,100 190),(40 110,50 80,74 110.5))"], [3, "LINESTRING(140 80,140 190)"], [4, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2923, "question_en": "Given four specific polygons (ID=1 with coordinate string 10 190,30 160,40 110,100 70,120 10,10 10,10 190; ID=2 with coordinate string 100 190,10 190,30 160,40 110,50 80,74 110.5,100 130,140 120,140 160,100 190; ID=3 with coordinate string 140 190,190 190,190 80,140 80,140 190; ID=4 with coordinate string 180 40,120 10,100 70,140 80,190 80,180 40), how to use the ST_CoverageInvalidEdges function to detect invalid edges of each polygon in the coverage and display them in WKT format via ST_AsText?"}
{"id": 559, "function": "ST_CoverageInvalidEdges", "question": "针对四个明确的多边形几何体（ID=1的顶点为(10,190),(30,160),(40,110),(100,70),(120,10),(10,10),(10,190)；ID=2的顶点为(100,190),(10,190),(30,160),(40,110),(50,80),(74,110.5),(100,130),(140,120),(140,160),(100,190)；ID=3的顶点为(140,190),(190,190),(190,80),(140,80),(140,190)；ID=4的顶点为(180,40),(120,10),(100,70),(140,80),(190,80),(180,40)），如何执行覆盖层无效边检测并返回每个多边形ID及其对应的无效边WKT文本？", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))'::geometry),\n  (2, 'POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))'::geometry),\n  (3, 'POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))'::geometry),\n  (4, 'POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageInvalidEdges(geom) OVER ())\n  FROM coverage;", "execution_result": [[1, "LINESTRING(40 110,100 70)"], [2, "MULTILINESTRING((100 130,140 120,140 160,100 190),(40 110,50 80,74 110.5))"], [3, "LINESTRING(140 80,140 190)"], [4, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2924, "question_en": "For four specified polygon geometries (ID=1 with vertices (10,190),(30,160),(40,110),(100,70),(120,10),(10,10),(10,190); ID=2 with vertices (100,190),(10,190),(30,160),(40,110),(50,80),(74,110.5),(100,130),(140,120),(140,160),(100,190); ID=3 with vertices (140,190),(190,190),(190,80),(140,80),(140,190); ID=4 with vertices (180,40),(120,10),(100,70),(140,80),(190,80),(180,40)), how to perform an overlay invalid edge detection and return each polygon ID along with its corresponding invalid edge WKT text?"}
{"id": 559, "function": "ST_CoverageInvalidEdges", "question": "输出四个多边形POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))、POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))、POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))和POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))的无效边检测结果，以WKT字符串格式返回每个多边形的ID和对应的无效边。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))'::geometry),\n  (2, 'POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))'::geometry),\n  (3, 'POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))'::geometry),\n  (4, 'POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageInvalidEdges(geom) OVER ())\n  FROM coverage;", "execution_result": [[1, "LINESTRING(40 110,100 70)"], [2, "MULTILINESTRING((100 130,140 120,140 160,100 190),(40 110,50 80,74 110.5))"], [3, "LINESTRING(140 80,140 190)"], [4, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2925, "question_en": "Output the invalid edge detection results for the four polygons POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190)), POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190)), POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190)), and POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40)), returning each polygon's ID and corresponding invalid edges in WKT string format."}
{"id": 559, "function": "ST_CoverageInvalidEdges", "question": "对于四个多边形POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))、POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))、POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))和POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))，输出每个多边形的ID和其无效边检测结果的WKT字符串表示。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))'::geometry),\n  (2, 'POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))'::geometry),\n  (3, 'POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))'::geometry),\n  (4, 'POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageInvalidEdges(geom) OVER ())\n  FROM coverage;", "execution_result": [[1, "LINESTRING(40 110,100 70)"], [2, "MULTILINESTRING((100 130,140 120,140 160,100 190),(40 110,50 80,74 110.5))"], [3, "LINESTRING(140 80,140 190)"], [4, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2926, "question_en": "For the four polygons POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190)), POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190)), POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190)), and POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40)), output each polygon's ID and the WKT string representation of its invalid edge detection result."}
{"id": 559, "function": "ST_CoverageInvalidEdges", "question": "输出四个多边形POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))、POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))、POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))和POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))的无效边检测结果，以WKT格式返回每个多边形的ID和对应的无效边几何对象。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))'::geometry),\n  (2, 'POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))'::geometry),\n  (3, 'POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))'::geometry),\n  (4, 'POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageInvalidEdges(geom) OVER ())\n  FROM coverage;", "execution_result": [[1, "LINESTRING(40 110,100 70)"], [2, "MULTILINESTRING((100 130,140 120,140 160,100 190),(40 110,50 80,74 110.5))"], [3, "LINESTRING(140 80,140 190)"], [4, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2927, "question_en": "Output the invalid edge detection results for the four polygons POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190)), POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190)), POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190)), and POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40)), returning each polygon's ID and corresponding invalid edge geometry object in WKT format."}
{"id": 560, "function": "ST_CoverageSimplify", "question": "对于包含四个多边形（ID为1的多边形由外环(160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150)和内环(40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160)组成；ID为2的多边形由(40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160)组成；ID为3的多边形由(110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130)组成；ID为4的多边形由(160 150, 150 120, 160 90, 160 50, 110 130, 160 150)组成）的coverage表，使用ST_CoverageSimplify函数以30为容差参数进行简化，并以WKT格式输出简化后的几何图形。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))'::geometry),\n  (2, 'POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))'::geometry),\n  (3, 'POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))'::geometry),\n  (4, 'POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageSimplify(geom, 30) OVER ())\n  FROM coverage;", "execution_result": [[1, "POLYGON((160 150,110 130,50 10,10 60,20 170,90 190,160 150),(40 160,66 125,90 170,40 160))"], [2, "POLYGON((40 160,66 125,90 170,40 160))"], [3, "POLYGON((110 130,160 50,50 10,110 130))"], [4, "POLYGON((160 150,160 50,110 130,160 150))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2928, "question_en": "For a coverage table containing four polygons (polygon with ID 1 consists of an outer ring (160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150) and an inner ring (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160); polygon with ID 2 consists of (40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160); polygon with ID 3 consists of (110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130); polygon with ID 4 consists of (160 150, 150 120, 160 90, 160 50, 110 130, 160 150)), simplify them using the ST_CoverageSimplify function with a tolerance parameter of 30 and output the simplified geometries in WKT format."}
{"id": 560, "function": "ST_CoverageSimplify", "question": "给定四个多边形几何体（ID=1的POLYGON包含外环坐标(160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150)和内环坐标(40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160)；ID=2的POLYGON坐标(40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160)；ID=3的POLYGON坐标(110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130)；ID=4的POLYGON坐标(160 150, 150 120, 160 90, 160 50, 110 130, 160 150)），通过窗口函数应用ST_CoverageSimplify算法（容差=30）后返回各几何体的WKT表示。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))'::geometry),\n  (2, 'POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))'::geometry),\n  (3, 'POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))'::geometry),\n  (4, 'POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageSimplify(geom, 30) OVER ())\n  FROM coverage;", "execution_result": [[1, "POLYGON((160 150,110 130,50 10,10 60,20 170,90 190,160 150),(40 160,66 125,90 170,40 160))"], [2, "POLYGON((40 160,66 125,90 170,40 160))"], [3, "POLYGON((110 130,160 50,50 10,110 130))"], [4, "POLYGON((160 150,160 50,110 130,160 150))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2929, "question_en": "Given four polygon geometries (ID=1 POLYGON with exterior ring coordinates (160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150) and interior ring coordinates (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160); ID=2 POLYGON coordinates (40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160); ID=3 POLYGON coordinates (110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130); ID=4 POLYGON coordinates (160 150, 150 120, 160 90, 160 50, 110 130, 160 150)), return the WKT representation of each geometry after applying the ST_CoverageSimplify algorithm (tolerance=30) via a window function."}
{"id": 560, "function": "ST_CoverageSimplify", "question": "在PostGIS中，对四个具体定义的多边形（ID=1的POLYGON包含外环坐标(160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150)和内环坐标(40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160)；ID=2的POLYGON坐标(40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160)；ID=3的POLYGON坐标(110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130)；ID=4的POLYGON坐标(160 150, 150 120, 160 90, 160 50, 110 130, 160 150)）执行覆盖简化操作，使用30作为ST_CoverageSimplify函数的容差参数，并通过OVER()窗口函数将简化结果转换为WKT文本格式输出。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))'::geometry),\n  (2, 'POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))'::geometry),\n  (3, 'POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))'::geometry),\n  (4, 'POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageSimplify(geom, 30) OVER ())\n  FROM coverage;", "execution_result": [[1, "POLYGON((160 150,110 130,50 10,10 60,20 170,90 190,160 150),(40 160,66 125,90 170,40 160))"], [2, "POLYGON((40 160,66 125,90 170,40 160))"], [3, "POLYGON((110 130,160 50,50 10,110 130))"], [4, "POLYGON((160 150,160 50,110 130,160 150))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2930, "question_en": "In PostGIS, perform a coverage simplification operation on four specific polygons (ID=1 POLYGON with exterior ring coordinates (160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150) and interior ring coordinates (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160); ID=2 POLYGON coordinates (40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160); ID=3 POLYGON coordinates (110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130); ID=4 POLYGON coordinates (160 150, 150 120, 160 90, 160 50, 110 130, 160 150)), using 30 as the tolerance parameter for the ST_CoverageSimplify function, and output the simplified results in WKT text format via the OVER() window function."}
{"id": 560, "function": "ST_CoverageSimplify", "question": "输出id为1、2、3、4的四个多边形（具体坐标分别为POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))、POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))、POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))、POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))）经过ST_CoverageSimplify函数处理（容差参数为30）后的WKT字符串结果。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))'::geometry),\n  (2, 'POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))'::geometry),\n  (3, 'POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))'::geometry),\n  (4, 'POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageSimplify(geom, 30) OVER ())\n  FROM coverage;", "execution_result": [[1, "POLYGON((160 150,110 130,50 10,10 60,20 170,90 190,160 150),(40 160,66 125,90 170,40 160))"], [2, "POLYGON((40 160,66 125,90 170,40 160))"], [3, "POLYGON((110 130,160 50,50 10,110 130))"], [4, "POLYGON((160 150,160 50,110 130,160 150))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2931, "question_en": "Output the WKT string results of polygons with IDs 1, 2, 3, and 4 (with coordinates POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160)), POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160)), POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130)), POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))) after processing with the ST_CoverageSimplify function (tolerance parameter 30)."}
{"id": 560, "function": "ST_CoverageSimplify", "question": "以WKT字符串格式返回四个多边形（具体坐标分别为POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))、POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))、POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))、POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))）在窗口函数中使用ST_CoverageSimplify函数（容差参数30）简化后的几何表示。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))'::geometry),\n  (2, 'POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))'::geometry),\n  (3, 'POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))'::geometry),\n  (4, 'POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageSimplify(geom, 30) OVER ())\n  FROM coverage;", "execution_result": [[1, "POLYGON((160 150,110 130,50 10,10 60,20 170,90 190,160 150),(40 160,66 125,90 170,40 160))"], [2, "POLYGON((40 160,66 125,90 170,40 160))"], [3, "POLYGON((110 130,160 50,50 10,110 130))"], [4, "POLYGON((160 150,160 50,110 130,160 150))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2932, "question_en": "Return the simplified geometric representations in WKT string format of four polygons (with specific coordinates POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160)), POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160)), POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130)), POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))) simplified using the ST_CoverageSimplify function (tolerance parameter 30) in a window function."}
{"id": 560, "function": "ST_CoverageSimplify", "question": "输出四个多边形（具体坐标分别为POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))、POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))、POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))、POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))）经过ST_CoverageSimplify函数处理（容差参数30）后，转换为WKT格式的几何对象及其原始id。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))'::geometry),\n  (2, 'POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))'::geometry),\n  (3, 'POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))'::geometry),\n  (4, 'POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageSimplify(geom, 30) OVER ())\n  FROM coverage;", "execution_result": [[1, "POLYGON((160 150,110 130,50 10,10 60,20 170,90 190,160 150),(40 160,66 125,90 170,40 160))"], [2, "POLYGON((40 160,66 125,90 170,40 160))"], [3, "POLYGON((110 130,160 50,50 10,110 130))"], [4, "POLYGON((160 150,160 50,110 130,160 150))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2933, "question_en": "Output the four polygons (with specific coordinates POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160)), POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160)), POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130)), POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))) after processing with the ST_CoverageSimplify function (tolerance parameter 30), converted to WKT-format geometry objects along with their original IDs."}
{"id": 561, "function": "ST_CoverageUnion", "question": "将五个多边形（POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))、POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))、POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))、POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))、POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))）进行覆盖联合操作，并以WKT格式输出结果。", "sql": "WITH coverage(id, geom) AS (VALUES (1, 'POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))'::geometry), (2, 'POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))'::geometry), (3, 'POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))'::geometry), (4, 'POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))'::geometry), (5, 'POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))'::geometry) ) SELECT ST_AsText(ST_CoverageUnion(geom)) FROM coverage;", "execution_result": [["MULTIPOLYGON(((10 150,80 190,110 150,140 80,120 10,10 10,10 150),(50 60,100 70,40 110,50 60)),((120 170,140 190,180 160,170 140,140 130,120 170)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2934, "question_en": "Merge the following five polygons (POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10)), POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10)), POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80)), POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190)), POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))) using a union overlay operation and output the result in WKT format."}
{"id": 561, "function": "ST_CoverageUnion", "question": "使用ST_CoverageUnion函数对五个多边形（ID为1的POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))、ID为2的POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))、ID为3的POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))、ID为4的POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))、ID为5的POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))）进行联合操作，并以WKT格式输出结果。", "sql": "WITH coverage(id, geom) AS (VALUES (1, 'POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))'::geometry), (2, 'POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))'::geometry), (3, 'POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))'::geometry), (4, 'POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))'::geometry), (5, 'POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))'::geometry) ) SELECT ST_AsText(ST_CoverageUnion(geom)) FROM coverage;", "execution_result": [["MULTIPOLYGON(((10 150,80 190,110 150,140 80,120 10,10 10,10 150),(50 60,100 70,40 110,50 60)),((120 170,140 190,180 160,170 140,140 130,120 170)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2935, "question_en": "Use the ST_CoverageUnion function to perform a union operation on five polygons (ID 1: POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10)), ID 2: POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10)), ID 3: POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80)), ID 4: POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190)), ID 5: POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))) and output the result in WKT format."}
{"id": 561, "function": "ST_CoverageUnion", "question": "给定五个多边形（POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))、POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))、POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))、POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))、POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))），使用ST_CoverageUnion函数计算它们的覆盖联合，并以WKT格式输出结果。", "sql": "WITH coverage(id, geom) AS (VALUES (1, 'POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))'::geometry), (2, 'POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))'::geometry), (3, 'POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))'::geometry), (4, 'POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))'::geometry), (5, 'POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))'::geometry) ) SELECT ST_AsText(ST_CoverageUnion(geom)) FROM coverage;", "execution_result": [["MULTIPOLYGON(((10 150,80 190,110 150,140 80,120 10,10 10,10 150),(50 60,100 70,40 110,50 60)),((120 170,140 190,180 160,170 140,140 130,120 170)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2936, "question_en": "Given five polygons (POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10)), POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10)), POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80)), POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190)), POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))), use the ST_CoverageUnion function to compute their coverage union and output the result in WKT format."}
{"id": 561, "function": "ST_CoverageUnion", "question": "输出将五个多边形（POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))、POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))、POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))、POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))、POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))）进行覆盖合并后得到的WKT字符串。", "sql": "WITH coverage(id, geom) AS (VALUES (1, 'POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))'::geometry), (2, 'POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))'::geometry), (3, 'POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))'::geometry), (4, 'POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))'::geometry), (5, 'POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))'::geometry) ) SELECT ST_AsText(ST_CoverageUnion(geom)) FROM coverage;", "execution_result": [["MULTIPOLYGON(((10 150,80 190,110 150,140 80,120 10,10 10,10 150),(50 60,100 70,40 110,50 60)),((120 170,140 190,180 160,170 140,140 130,120 170)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2937, "question_en": "Output the WKT string resulting from the union overlay of the following five polygons: POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10)), POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10)), POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80)), POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190)), POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))."}
{"id": 561, "function": "ST_CoverageUnion", "question": "输出通过ST_CoverageUnion函数合并ID为1到5的五个多边形（具体坐标分别为POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))、POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))、POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))、POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))、POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))）后生成的WKT格式结果。", "sql": "WITH coverage(id, geom) AS (VALUES (1, 'POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))'::geometry), (2, 'POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))'::geometry), (3, 'POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))'::geometry), (4, 'POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))'::geometry), (5, 'POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))'::geometry) ) SELECT ST_AsText(ST_CoverageUnion(geom)) FROM coverage;", "execution_result": [["MULTIPOLYGON(((10 150,80 190,110 150,140 80,120 10,10 10,10 150),(50 60,100 70,40 110,50 60)),((120 170,140 190,180 160,170 140,140 130,120 170)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2938, "question_en": "Output the WKT format result after merging five polygons with IDs 1 to 5 using the ST_CoverageUnion function (specific coordinates: POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10)), POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10)), POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80)), POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190)), POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160)))."}
{"id": 561, "function": "ST_CoverageUnion", "question": "输出将五个定义在WITH子句中的多边形（ID 1：POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))；ID 2：POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))；ID 3：POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))；ID 4：POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))；ID 5：POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))）进行覆盖联合操作后转换为WKT文本的结果。", "sql": "WITH coverage(id, geom) AS (VALUES (1, 'POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))'::geometry), (2, 'POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))'::geometry), (3, 'POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))'::geometry), (4, 'POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))'::geometry), (5, 'POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))'::geometry) ) SELECT ST_AsText(ST_CoverageUnion(geom)) FROM coverage;", "execution_result": [["MULTIPOLYGON(((10 150,80 190,110 150,140 80,120 10,10 10,10 150),(50 60,100 70,40 110,50 60)),((120 170,140 190,180 160,170 140,140 130,120 170)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2939, "question_en": "Output the WKT text result of performing a union overlay operation on the five polygons defined in the WITH clause (ID 1: POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10)); ID 2: POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10)); ID 3: POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80)); ID 4: POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190)); ID 5: POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160)))."}
{"id": 562, "function": "ST_Affine", "question": "对三维线段LINESTRING(1 2 3, 1 4 3)分别执行两种旋转变换：第一种使用ST_Affine函数，参数为cos(π)作为x缩放因子，-sin(π)作为y剪切因子，0作为z剪切因子，sin(π)作为x剪切因子，cos(π)作为y缩放因子，0作为z平移量，0作为x平移量，0作为y平移量，1作为z缩放因子，0作为x偏移量，0作为y偏移量，0作为z偏移量；第二种使用ST_Rotate函数绕Z轴旋转π弧度。以EWKT格式输出两种结果。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0, 1, 0, 0, 0)) AS using_affine, ST_AsEWKT(ST_Rotate(geom, pi())) AS using_rotate FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 -2 3,-1 -4 3)", "LINESTRING(-1 -2 3,-1 -4 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2940, "question_en": "Perform two rotation transformations on the 3D linestring LINESTRING(1 2 3, 1 4 3): first using the ST_Affine function with parameters cos(π) as the x scale factor, -sin(π) as the y shear factor, 0 as the z shear factor, sin(π) as the x shear factor, cos(π) as the y scale factor, 0 as the z translation, 0 as the x translation, 0 as the y translation, 1 as the z scale factor, 0 as the x offset, 0 as the y offset, and 0 as the z offset; second using the ST_Rotate function to rotate π radians around the Z-axis. Output both results in EWKT format."}
{"id": 562, "function": "ST_Affine", "question": "比较三维线段LINESTRING(1 2 3, 1 4 3)的两种旋转输出：第一种通过12参数仿射矩阵实现，其中cos(π)控制X轴缩放，-sin(π)控制Y轴倾斜，sin(π)控制X轴倾斜，cos(π)控制Y轴缩放，Z轴缩放固定为1；第二种直接使用ST_Rotate函数进行π弧度的Z轴旋转。要求返回EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0, 1, 0, 0, 0)) AS using_affine, ST_AsEWKT(ST_Rotate(geom, pi())) AS using_rotate FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 -2 3,-1 -4 3)", "LINESTRING(-1 -2 3,-1 -4 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2941, "question_en": "Compare the two rotation outputs of the 3D linestring LINESTRING(1 2 3, 1 4 3): the first achieved via a 12-parameter affine matrix where cos(π) controls X-axis scaling, -sin(π) controls Y-axis shearing, sin(π) controls X-axis shearing, cos(π) controls Y-axis scaling, and Z-axis scaling is fixed at 1; the second using the ST_Rotate function directly for a π-radian Z-axis rotation. Return results in EWKT format."}
{"id": 562, "function": "ST_Affine", "question": "针对三维线段LINESTRING(1 2 3, 1 4 3)，分别计算：1) 使用三角函数值cos(π)和sin(π)构建的12参数仿射变换结果（参数顺序为：a,b,c,d,e,f,g,h,i,xoff,yoff,zoff）；2) 直接绕Z轴旋转π弧度的结果。最终以包含Z坐标的EWKT格式展示两种变换后的几何体。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0, 1, 0, 0, 0)) AS using_affine, ST_AsEWKT(ST_Rotate(geom, pi())) AS using_rotate FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 -2 3,-1 -4 3)", "LINESTRING(-1 -2 3,-1 -4 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2942, "question_en": "For the 3D linestring LINESTRING(1 2 3, 1 4 3), calculate: 1) the result of a 12-parameter affine transformation using trigonometric values cos(π) and sin(π) (parameter order: a,b,c,d,e,f,g,h,i,xoff,yoff,zoff); 2) the result of directly rotating around the Z-axis by π radians. Display both transformed geometries in EWKT format including Z coordinates."}
{"id": 562, "function": "ST_Affine", "question": "输出LINESTRING(1 2 3, 1 4 3)分别通过ST_Affine函数（使用旋转矩阵参数cos(π)、-sin(π)、0、sin(π)、cos(π)、0、0、0、1、0、0、0）和ST_Rotate函数（旋转角度π弧度）变换后的EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0, 1, 0, 0, 0)) AS using_affine,    ST_AsEWKT(ST_Rotate(geom, pi())) AS using_rotate FROM (  SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 -2 3,-1 -4 3)", "LINESTRING(-1 -2 3,-1 -4 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2943, "question_en": "Output the EWKT format results of LINESTRING(1 2 3, 1 4 3) after transformation using the ST_Affine function (with rotation matrix parameters cos(π), -sin(π), 0, sin(π), cos(π), 0, 0, 0, 1, 0, 0, 0) and the ST_Rotate function (rotation angle π radians)."}
{"id": 562, "function": "ST_Affine", "question": "以EWKT格式输出三维线对象LINESTRING(1 2 3, 1 4 3)经过两种旋转变换的结果：第一种使用ST_Affine函数（参数为12个元素的仿射矩阵，其中旋转分量由cos(π)和sin(π)构成），第二种使用ST_Rotate函数（旋转π弧度）。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0, 1, 0, 0, 0)) AS using_affine,    ST_AsEWKT(ST_Rotate(geom, pi())) AS using_rotate FROM (  SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 -2 3,-1 -4 3)", "LINESTRING(-1 -2 3,-1 -4 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2944, "question_en": "Output the 3D line object LINESTRING(1 2 3, 1 4 3) in EWKT format after two rotation transformations: the first using the ST_Affine function (with a 12-element affine matrix where the rotation components are cos(π) and sin(π)), and the second using the ST_Rotate function (rotating by π radians)."}
{"id": 562, "function": "ST_Affine", "question": "将三维线对象LINESTRING(1 2 3, 1 4 3)分别通过12参数仿射变换（旋转分量为cos(π)和sin(π)）和π弧度旋转后，输出两个结果的EWKT字符串表示，要求显示SRID信息（若无则显式标注无SRID）。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0, 1, 0, 0, 0)) AS using_affine,    ST_AsEWKT(ST_Rotate(geom, pi())) AS using_rotate FROM (  SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 -2 3,-1 -4 3)", "LINESTRING(-1 -2 3,-1 -4 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2945, "question_en": "Convert the 3D line object LINESTRING(1 2 3, 1 4 3) using a 12-parameter affine transformation (with rotation components cos(π) and sin(π)) and a π-radian rotation, then output the EWKT string representations of both results, explicitly indicating SRID information (or marking \"no SRID\" if absent)."}
{"id": 563, "function": "ST_Affine", "question": "对三维线段LINESTRING(1 2 3, 1 4 3)应用仿射变换，变换矩阵参数为：第一行cos(pi()), -sin(pi()), 0；第二行sin(pi()), cos(pi()), -sin(pi())；第三行0, sin(pi()), cos(pi())；平移参数0, 0, 0，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0)) FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') As geom) As foo;", "execution_result": [["LINESTRING(-1 -2 -3,-1 -4 -3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2946, "question_en": "Apply an affine transformation to the 3D linestring LINESTRING(1 2 3, 1 4 3) with the transformation matrix parameters: first row cos(pi()), -sin(pi()), 0; second row sin(pi()), cos(pi()), -sin(pi()); third row 0, sin(pi()), cos(pi()); translation parameters 0, 0, 0, and output the result in EWKT format."}
{"id": 563, "function": "ST_Affine", "question": "将三维线段LINESTRING(1 2 3, 1 4 3)进行旋转（旋转角度为π弧度）但不平移（平移量0, 0, 0）的仿射变换，其中旋转矩阵由cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi())构成，最终以EWKT格式输出变换后的几何体。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0)) FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') As geom) As foo;", "execution_result": [["LINESTRING(-1 -2 -3,-1 -4 -3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2947, "question_en": "Perform an affine transformation on the 3D linestring LINESTRING(1 2 3, 1 4 3) by rotating it (rotation angle π radians) without translating (translation amount 0, 0, 0), where the rotation matrix is composed of cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), and output the transformed geometry in EWKT format."}
{"id": 563, "function": "ST_Affine", "question": "基于三维线段LINESTRING(1 2 3, 1 4 3)，使用包含cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi())的3×3旋转矩阵和0, 0, 0平移向量执行仿射变换，并返回EWKT格式的结果。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0)) FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') As geom) As foo;", "execution_result": [["LINESTRING(-1 -2 -3,-1 -4 -3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2948, "question_en": "Perform an affine transformation on the 3D linestring LINESTRING(1 2 3, 1 4 3) using a 3×3 rotation matrix containing cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()) and a translation vector of 0, 0, 0, then return the result in EWKT format."}
{"id": 563, "function": "ST_Affine", "question": "输出LINESTRING(1 2 3, 1 4 3)经过由cos(π)、-sin(π)、0、sin(π)、cos(π)、-sin(π)、0、sin(π)、cos(π)、0、0、0这12个参数定义的仿射变换后的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0)) FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') As geom) As foo;", "execution_result": [["LINESTRING(-1 -2 -3,-1 -4 -3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2949, "question_en": "Output the EWKT format string of LINESTRING(1 2 3, 1 4 3) after applying the affine transformation defined by the 12 parameters: cos(π), -sin(π), 0, sin(π), cos(π), -sin(π), 0, sin(π), cos(π), 0, 0, 0."}
{"id": 563, "function": "ST_Affine", "question": "将三维线段LINESTRING(1 2 3, 1 4 3)应用包含三角函数值的12参数仿射变换矩阵后，返回其扩展WKT(EWKT)表示形式。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0)) FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') As geom) As foo;", "execution_result": [["LINESTRING(-1 -2 -3,-1 -4 -3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2950, "question_en": "Apply a 12-parameter affine transformation matrix containing trigonometric values to the 3D linestring LINESTRING(1 2 3, 1 4 3) and return its extended WKT (EWKT) representation."}
{"id": 563, "function": "ST_Affine", "question": "以EWKT格式输出三维线段LINESTRING(1 2 3, 1 4 3)经过仿射变换后的结果，其中变换矩阵参数依次为cos(π)、-sin(π)、0、sin(π)、cos(π)、-sin(π)、0、sin(π)、cos(π)、0、0、0。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0)) FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') As geom) As foo;", "execution_result": [["LINESTRING(-1 -2 -3,-1 -4 -3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2951, "question_en": "Output the result of the 3D linestring LINESTRING(1 2 3, 1 4 3) after affine transformation in EWKT format, where the transformation matrix parameters are cos(π), -sin(π), 0, sin(π), cos(π), -sin(π), 0, sin(π), cos(π), 0, 0, 0 in order."}
{"id": 564, "function": "ST_Rotate", "question": "将折线LINESTRING (50 160, 50 50, 100 50)绕原点逆时针旋转π弧度（180度），并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()));", "execution_result": [["LINESTRING(-50.00000000000002 -160,-50.00000000000001 -49.99999999999999,-100 -49.999999999999986)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2952, "question_en": "Rotate the linestring LINESTRING (50 160, 50 50, 100 50) counterclockwise by π radians (180 degrees) around the origin and output the result in EWKT format."}
{"id": 564, "function": "ST_Rotate", "question": "对由三个顶点(50 160)、(50 50)、(100 50)构成的折线执行绕原点π弧度的逆时针旋转变换，输出扩展WKT格式的几何体。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()));", "execution_result": [["LINESTRING(-50.00000000000002 -160,-50.00000000000001 -49.99999999999999,-100 -49.999999999999986)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2953, "question_en": "Perform a π-radian counterclockwise rotation transformation around the origin on the polyline formed by the three vertices (50 160), (50 50), (100 50), and output the geometry in extended WKT format."}
{"id": 564, "function": "ST_Rotate", "question": "使用PostGIS的ST_Rotate函数，将包含坐标点50 160、50 50和100 50的折线几何体旋转3.14159弧度（π值），并通过ST_AsEWKT函数返回带SRID的文本表示。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()));", "execution_result": [["LINESTRING(-50.00000000000002 -160,-50.00000000000001 -49.99999999999999,-100 -49.999999999999986)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2954, "question_en": "Using PostGIS's ST_Rotate function, rotate a linestring geometry containing coordinate points 50 160, 50 50, and 100 50 by 3.14159 radians (π value), and return the text representation with SRID using ST_AsEWKT function."}
{"id": 564, "function": "ST_Rotate", "question": "输出将折线LINESTRING (50 160, 50 50, 100 50)绕原点旋转π弧度后的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()));", "execution_result": [["LINESTRING(-50.00000000000002 -160,-50.00000000000001 -49.99999999999999,-100 -49.999999999999986)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2955, "question_en": "Output the EWKT format string of the LINESTRING (50 160, 50 50, 100 50) rotated by π radians around the origin."}
{"id": 564, "function": "ST_Rotate", "question": "以EWKT格式返回经过π弧度旋转后的折线对象LINESTRING (50 160, 50 50, 100 50)的空间表示。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()));", "execution_result": [["LINESTRING(-50.00000000000002 -160,-50.00000000000001 -49.99999999999999,-100 -49.999999999999986)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2956, "question_en": "Return the spatial representation of the linestring object LINESTRING (50 160, 50 50, 100 50) rotated by π radians in EWKT format."}
{"id": 564, "function": "ST_Rotate", "question": "将包含三个顶点(50 160)、(50 50)、(100 50)的折线绕原点逆时针旋转180度（π弧度）后，输出其扩展WKT表示。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()));", "execution_result": [["LINESTRING(-50.00000000000002 -160,-50.00000000000001 -49.99999999999999,-100 -49.999999999999986)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2957, "question_en": "Translate the polyline with vertices (50 160), (50 50), (100 50) by rotating it 180 degrees (π radians) counterclockwise around the origin, then output its extended WKT representation."}
{"id": 565, "function": "ST_Rotate", "question": "将折线LINESTRING (50 160, 50 50, 100 50)以点(50,160)为中心逆时针旋转π/6弧度（30度），并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()/6, 50, 160));", "execution_result": [["LINESTRING(50 160,104.99999999999999 64.73720558371174,148.30127018922192 89.73720558371173)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2958, "question_en": "Rotate the linestring LINESTRING (50 160, 50 50, 100 50) counterclockwise by π/6 radians (30 degrees) around the point (50,160) and output the result in EWKT format."}
{"id": 565, "function": "ST_Rotate", "question": "使用PostGIS的ST_Rotate函数，对由三个顶点(50 160)、(50 50)、(100 50)构成的折线进行逆时针旋转操作，旋转角度为π/6弧度，旋转中心点为(50,160)，最后以EWKT格式返回旋转后的几何体。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()/6, 50, 160));", "execution_result": [["LINESTRING(50 160,104.99999999999999 64.73720558371174,148.30127018922192 89.73720558371173)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2959, "question_en": "Using PostGIS's ST_Rotate function, perform a counterclockwise rotation on the polyline formed by three vertices (50 160), (50 50), (100 50) with a rotation angle of π/6 radians centered at (50, 160), and return the rotated geometry in EWKT format."}
{"id": 565, "function": "ST_Rotate", "question": "在空间坐标系中，将起点(50 160)、经过点(50 50)、终点(100 50)的线段围绕坐标点(50,160)逆时针旋转30度（π/6弧度），并以扩展WKT格式输出旋转后的几何图形。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()/6, 50, 160));", "execution_result": [["LINESTRING(50 160,104.99999999999999 64.73720558371174,148.30127018922192 89.73720558371173)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2960, "question_en": "In the spatial coordinate system, rotate the line segment with start point (50 160), passing point (50 50), and end point (100 50) counterclockwise by 30 degrees (π/6 radians) around the coordinate point (50, 160), and output the rotated geometry in extended WKT format."}
{"id": 565, "function": "ST_Rotate", "question": "输出将LINESTRING (50 160, 50 50, 100 50)绕点(50,160)逆时针旋转π/6弧度后得到的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()/6, 50, 160));", "execution_result": [["LINESTRING(50 160,104.99999999999999 64.73720558371174,148.30127018922192 89.73720558371173)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2961, "question_en": "Output the EWKT format string of the LINESTRING (50 160, 50 50, 100 50) after rotating it counterclockwise by π/6 radians around the point (50,160)."}
{"id": 565, "function": "ST_Rotate", "question": "以EWKT格式返回原始折线LINESTRING (50 160, 50 50, 100 50)经过30度（π/6弧度）逆时针旋转后的几何对象，旋转中心点为(50,160)。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()/6, 50, 160));", "execution_result": [["LINESTRING(50 160,104.99999999999999 64.73720558371174,148.30127018922192 89.73720558371173)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2962, "question_en": "Return the original polyline LINESTRING (50 160, 50 50, 100 50) rotated 30 degrees (π/6 radians) counterclockwise around the center point (50,160) in EWKT format."}
{"id": 565, "function": "ST_Rotate", "question": "将包含三个顶点(50 160)、(50 50)、(100 50)的折线对象，以点(50,160)为旋转中心进行30度（π/6弧度）旋转后，输出其扩展WKT(EWKT)表示形式。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()/6, 50, 160));", "execution_result": [["LINESTRING(50 160,104.99999999999999 64.73720558371174,148.30127018922192 89.73720558371173)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2963, "question_en": "Translate the polyline object with vertices (50 160), (50 50), (100 50) by rotating it 30 degrees (π/6 radians) around the point (50,160) as the center, then output its extended WKT (EWKT) representation."}
{"id": 566, "function": "ST_Rotate", "question": "将LINESTRING (50 160, 50 50, 100 50)这条折线围绕其质心逆时针旋转π/3弧度（即60度），并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Rotate(geom, -pi()/3, ST_Centroid(geom))) \nFROM (SELECT 'LINESTRING (50 160, 50 50, 100 50)'::geometry AS geom) AS foo;", "execution_result": [["LINESTRING(116.42245883568916 130.67207346706593,21.15966441940092 75.67207346706593,46.15966441940093 32.370803277844)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2964, "question_en": "Rotate the LINESTRING (50 160, 50 50, 100 50) counterclockwise by π/3 radians (60 degrees) around its centroid and output the result in EWKT format."}
{"id": 566, "function": "ST_Rotate", "question": "以LINESTRING (50 160, 50 50, 100 50)的质心为旋转中心，将该折线旋转-π/3弧度（负值表示顺时针方向），最终输出旋转后的几何对象的EWKT表示。", "sql": "SELECT ST_AsEWKT(ST_Rotate(geom, -pi()/3, ST_Centroid(geom))) \nFROM (SELECT 'LINESTRING (50 160, 50 50, 100 50)'::geometry AS geom) AS foo;", "execution_result": [["LINESTRING(116.42245883568916 130.67207346706593,21.15966441940092 75.67207346706593,46.15966441940093 32.370803277844)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2965, "question_en": "Rotate the LINESTRING (50 160, 50 50, 100 50) by -π/3 radians (negative value indicates clockwise direction) using its centroid as the rotation center, and output the EWKT representation of the resulting geometry."}
{"id": 566, "function": "ST_Rotate", "question": "对由三个顶点（50 160, 50 50, 100 50）构成的折线执行几何旋转操作，旋转角度为-π/3弧度（即逆时针60度），旋转基准点为该折线的质心，并返回EWKT格式的旋转结果。", "sql": "SELECT ST_AsEWKT(ST_Rotate(geom, -pi()/3, ST_Centroid(geom))) \nFROM (SELECT 'LINESTRING (50 160, 50 50, 100 50)'::geometry AS geom) AS foo;", "execution_result": [["LINESTRING(116.42245883568916 130.67207346706593,21.15966441940092 75.67207346706593,46.15966441940093 32.370803277844)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2966, "question_en": "Perform a geometric rotation operation on the polyline formed by three vertices (50 160, 50 50, 100 50) with a rotation angle of -π/3 radians (i.e., 60 degrees counterclockwise), using the centroid of the polyline as the rotation pivot, and return the rotated result in EWKT format."}
{"id": 566, "function": "ST_Rotate", "question": "输出LINESTRING (50 160, 50 50, 100 50)几何对象绕其质心逆时针旋转π/3弧度后的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Rotate(geom, -pi()/3, ST_Centroid(geom))) \nFROM (SELECT 'LINESTRING (50 160, 50 50, 100 50)'::geometry AS geom) AS foo;", "execution_result": [["LINESTRING(116.42245883568916 130.67207346706593,21.15966441940092 75.67207346706593,46.15966441940093 32.370803277844)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2967, "question_en": "Output the EWKT format string of the LINESTRING (50 160, 50 50, 100 50) geometry object after rotating it counterclockwise by π/3 radians around its centroid."}
{"id": 566, "function": "ST_Rotate", "question": "将LINESTRING (50 160, 50 50, 100 50)几何对象以-π/3弧度（即逆时针60度）绕其自身质心旋转后，返回带SRID的EWKT格式字符串结果。", "sql": "SELECT ST_AsEWKT(ST_Rotate(geom, -pi()/3, ST_Centroid(geom))) \nFROM (SELECT 'LINESTRING (50 160, 50 50, 100 50)'::geometry AS geom) AS foo;", "execution_result": [["LINESTRING(116.42245883568916 130.67207346706593,21.15966441940092 75.67207346706593,46.15966441940093 32.370803277844)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2968, "question_en": "Rotate the LINESTRING (50 160, 50 50, 100 50) geometry by -π/3 radians (i.e., 60 degrees counterclockwise) around its own centroid and return the result as an EWKT string with SRID."}
{"id": 566, "function": "ST_Rotate", "question": "计算LINESTRING (50 160, 50 50, 100 50)几何对象绕其质心逆时针旋转1.04719755弧度（π/3）后的空间位置，并以包含SRID的EWKT文本格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Rotate(geom, -pi()/3, ST_Centroid(geom))) \nFROM (SELECT 'LINESTRING (50 160, 50 50, 100 50)'::geometry AS geom) AS foo;", "execution_result": [["LINESTRING(116.42245883568916 130.67207346706593,21.15966441940092 75.67207346706593,46.15966441940093 32.370803277844)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2969, "question_en": "Calculate the spatial position of the LINESTRING (50 160, 50 50, 100 50) geometry after rotating it counterclockwise by 1.04719755 radians (π/3) around its centroid, and output the result in EWKT format including SRID."}
{"id": 567, "function": "ST_RotateX", "question": "将三维线段LINESTRING(1 2 3, 1 1 1)绕X轴旋转π/2弧度（90度），并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_RotateX(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(1 -3 2,1 -1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2970, "question_en": "Rotate the 3D linestring LINESTRING(1 2 3, 1 1 1) around the X-axis by π/2 radians (90 degrees) and output the result in EWKT format."}
{"id": 567, "function": "ST_RotateX", "question": "对由点(1 2 3)和点(1 1 1)构成的三维线段执行绕X轴旋转（旋转量为π/2弧度），返回扩展WKT表示的结果。", "sql": "SELECT ST_AsEWKT(ST_RotateX(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(1 -3 2,1 -1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2971, "question_en": "Perform a rotation around the X-axis (rotation amount π/2 radians) on the 3D line segment formed by points (1 2 3) and (1 1 1), and return the result in extended WKT representation."}
{"id": 567, "function": "ST_RotateX", "question": "使用ST_RotateX函数将LINESTRING(1 2 3, 1 1 1)这个三维线段绕X轴旋转90度（π/2弧度），并通过ST_AsEWKT输出旋转后的几何体。", "sql": "SELECT ST_AsEWKT(ST_RotateX(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(1 -3 2,1 -1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2972, "question_en": "Use the ST_RotateX function to rotate the 3D linestring LINESTRING(1 2 3, 1 1 1) by 90 degrees (π/2 radians) around the X-axis, and output the rotated geometry using ST_AsEWKT."}
{"id": 567, "function": "ST_RotateX", "question": "输出LINESTRING(1 2 3, 1 1 1)绕X轴旋转π/2弧度后的三维线几何体的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_RotateX(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(1 -3 2,1 -1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2973, "question_en": "Output the EWKT format string of the 3D line geometry resulting from rotating LINESTRING(1 2 3, 1 1 1) around the X-axis by π/2 radians."}
{"id": 567, "function": "ST_RotateX", "question": "将三维线几何体LINESTRING(1 2 3, 1 1 1)以X轴为旋转轴旋转90度（π/2弧度）后，返回其扩展WKT表示形式的字符串。", "sql": "SELECT ST_AsEWKT(ST_RotateX(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(1 -3 2,1 -1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2974, "question_en": "Rotate the 3D line geometry LINESTRING(1 2 3, 1 1 1) by 90 degrees (π/2 radians) around the X-axis and return its extended WKT representation string."}
{"id": 567, "function": "ST_RotateX", "question": "对包含两个三维点(1 2 3)和(1 1 1)的线几何体执行X轴旋转π/2弧度的变换，输出变换后几何体的EWKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_RotateX(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(1 -3 2,1 -1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2975, "question_en": "Perform a rotation transformation of π/2 radians around the X-axis on a line geometry containing the two 3D points (1 2 3) and (1 1 1), then output the transformed geometry in EWKT format."}
{"id": 568, "function": "ST_RotateY", "question": "将三维线段LINESTRING(1 2 3, 1 1 1)绕Y轴旋转π/2弧度（90度），并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_RotateY(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(3 2 -1,1 1 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2976, "question_en": "Rotate the 3D linestring LINESTRING(1 2 3, 1 1 1) by π/2 radians (90 degrees) around the Y-axis and output the result in EWKT format."}
{"id": 568, "function": "ST_RotateY", "question": "对由点(1 2 3)和点(1 1 1)构成的三维线段执行Y轴旋转操作，旋转角度为π/2弧度，返回EWKT格式的几何体。", "sql": "SELECT ST_AsEWKT(ST_RotateY(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(3 2 -1,1 1 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2977, "question_en": "Perform a Y-axis rotation operation on the 3D line segment formed by points (1 2 3) and (1 1 1) with a rotation angle of π/2 radians, and return the geometry in EWKT format."}
{"id": 568, "function": "ST_RotateY", "question": "使用ST_RotateY函数将三维线段LINESTRING(1 2 3, 1 1 1)绕Y轴旋转90度（π/2弧度），并通过ST_AsEWKT输出旋转后的几何体。", "sql": "SELECT ST_AsEWKT(ST_RotateY(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(3 2 -1,1 1 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2978, "question_en": "Use the ST_RotateY function to rotate the 3D linestring LINESTRING(1 2 3, 1 1 1) 90 degrees (π/2 radians) around the Y-axis and output the rotated geometry with ST_AsEWKT."}
{"id": 568, "function": "ST_RotateY", "question": "输出将三维线段LINESTRING(1 2 3, 1 1 1)绕Y轴旋转π/2弧度后得到的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_RotateY(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(3 2 -1,1 1 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2979, "question_en": "Output the EWKT format string of the 3D linestring LINESTRING(1 2 3, 1 1 1) after rotating it π/2 radians around the Y-axis."}
{"id": 568, "function": "ST_RotateY", "question": "以EWKT格式输出几何对象，该对象是通过对LINESTRING(1 2 3, 1 1 1)执行绕Y轴90度（π/2弧度）旋转后得到的。", "sql": "SELECT ST_AsEWKT(ST_RotateY(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(3 2 -1,1 1 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2980, "question_en": "Output the geometry object in EWKT format, which is obtained by rotating LINESTRING(1 2 3, 1 1 1) 90 degrees (π/2 radians) around the Y-axis."}
{"id": 568, "function": "ST_RotateY", "question": "将三维线段LINESTRING(1 2 3, 1 1 1)作为输入，计算其绕Y轴旋转π/2弧度后的结果，并以包含SRID的WKT格式（EWKT）输出。", "sql": "SELECT ST_AsEWKT(ST_RotateY(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(3 2 -1,1 1 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2981, "question_en": "Take the 3D linestring LINESTRING(1 2 3, 1 1 1) as input, calculate its result after rotating π/2 radians around the Y-axis, and output in EWKT format with SRID included."}
{"id": 569, "function": "ST_RotateZ", "question": "将三维线段LINESTRING(1 2 3, 1 1 1)绕Z轴旋转π/2弧度（90度），并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(-2 1 3,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2982, "question_en": "Rotate the 3D linestring LINESTRING(1 2 3, 1 1 1) by π/2 radians (90 degrees) around the Z-axis and output the result in EWKT format."}
{"id": 569, "function": "ST_RotateZ", "question": "对由三维坐标点(1,2,3)和(1,1,1)构成的线段执行Z轴旋转操作，旋转量为π/2弧度，返回EWKT格式的几何对象。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(-2 1 3,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2983, "question_en": "Perform a Z-axis rotation operation on the line segment formed by 3D coordinate points (1,2,3) and (1,1,1) with a rotation amount of π/2 radians, and return the geometric object in EWKT format."}
{"id": 569, "function": "ST_RotateZ", "question": "使用PostGIS函数将三维线段LINESTRING(1 2 3, 1 1 1)进行Z轴旋转，旋转角度为π/2弧度，最终输出EWKT格式的几何数据。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(-2 1 3,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2984, "question_en": "Use PostGIS functions to rotate the 3D linestring LINESTRING(1 2 3, 1 1 1) around the Z-axis by π/2 radians, and output the resulting geometry in EWKT format."}
{"id": 569, "function": "ST_RotateZ", "question": "输出三维线段LINESTRING(1 2 3, 1 1 1)绕Z轴旋转π/2弧度后的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(-2 1 3,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2985, "question_en": "Output the EWKT format string of the 3D line LINESTRING(1 2 3, 1 1 1) after rotating π/2 radians around the Z-axis."}
{"id": 569, "function": "ST_RotateZ", "question": "将包含两个三维点(1 2 3)和(1 1 1)的线段绕Z轴旋转90度后，返回扩展WKT(EWKT)格式的结果。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(-2 1 3,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2986, "question_en": "Return the result in Extended WKT (EWKT) format after rotating the line segment containing the two 3D points (1 2 3) and (1 1 1) by 90 degrees around the Z-axis."}
{"id": 569, "function": "ST_RotateZ", "question": "以EWKT格式输出三维线段LINESTRING(1 2 3, 1 1 1)经过Z轴旋转π/2弧度变换后的几何对象。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(-2 1 3,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2987, "question_en": "Output the transformed geometric object in EWKT format after applying a Z-axis rotation of π/2 radians to the 3D linestring LINESTRING(1 2 3, 1 1 1)."}
{"id": 570, "function": "ST_RotateZ", "question": "以POINT(234 567)为中心创建半径为3的缓冲区，将缓冲区多边形转换为曲线几何，然后绕Z轴旋转π/2弧度（90度），最后以EWKT格式输出结果几何。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(geom, pi()/2)) \nFROM (SELECT ST_LineToCurve(ST_Buffer(ST_GeomFromText('POINT(234 567)'), 3)) As geom) As foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(-567 237.00000000000003,-567 231.00000000000003,-567 237.00000000000003))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2988, "question_en": "Create a buffer with a radius of 3 centered at POINT(234 567), convert the buffer polygon to a curve geometry, rotate it by π/2 radians (90 degrees) around the Z-axis, and output the resulting geometry in EWKT format."}
{"id": 570, "function": "ST_RotateZ", "question": "对POINT(234 567)进行半径为3的缓冲区生成，将生成的缓冲区多边形转换为曲线类型，再将该曲线几何绕Z轴旋转90度（π/2弧度），最终输出EWKT格式的旋转后几何体。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(geom, pi()/2)) \nFROM (SELECT ST_LineToCurve(ST_Buffer(ST_GeomFromText('POINT(234 567)'), 3)) As geom) As foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(-567 237.00000000000003,-567 231.00000000000003,-567 237.00000000000003))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2989, "question_en": "Generate a buffer with a radius of 3 around POINT(234 567), convert the resulting buffer polygon to a curve type, then rotate this curve geometry 90 degrees (π/2 radians) around the Z-axis, and finally output the rotated geometry in EWKT format."}
{"id": 570, "function": "ST_RotateZ", "question": "基于二维点POINT(234 567)生成半径为3的圆形缓冲区，将缓冲区边界转换为曲线几何，通过ST_RotateZ函数以Z轴为旋转轴旋转π/2弧度，并以包含SRID的EWKT格式返回结果。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(geom, pi()/2)) \nFROM (SELECT ST_LineToCurve(ST_Buffer(ST_GeomFromText('POINT(234 567)'), 3)) As geom) As foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(-567 237.00000000000003,-567 231.00000000000003,-567 237.00000000000003))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2990, "question_en": "Generate a circular buffer with a radius of 3 around the 2D point POINT(234 567), convert the buffer boundary to a curve geometry, rotate it by π/2 radians around the Z-axis using the ST_RotateZ function, and return the result in EWKT format including the SRID."}
{"id": 570, "function": "ST_RotateZ", "question": "输出将POINT(234 567)生成半径为3的缓冲区、转换为曲线几何后，再绕Z轴旋转π/2弧度（90度）的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(geom, pi()/2)) \nFROM (SELECT ST_LineToCurve(ST_Buffer(ST_GeomFromText('POINT(234 567)'), 3)) As geom) As foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(-567 237.00000000000003,-567 231.00000000000003,-567 237.00000000000003))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2991, "question_en": "Output the EWKT format string after creating a 3-unit radius buffer from POINT(234 567), converting it to a curved geometry, and then rotating it π/2 radians (90 degrees) around the Z-axis."}
{"id": 570, "function": "ST_RotateZ", "question": "以EWKT格式输出几何对象，该对象由POINT(234 567)的3单位半径缓冲区经ST_LineToCurve转换为曲线后，再通过ST_RotateZ函数绕Z轴旋转90度（π/2弧度）得到。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(geom, pi()/2)) \nFROM (SELECT ST_LineToCurve(ST_Buffer(ST_GeomFromText('POINT(234 567)'), 3)) As geom) As foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(-567 237.00000000000003,-567 231.00000000000003,-567 237.00000000000003))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2992, "question_en": "Output the geometry object in EWKT format, which is obtained by first converting the 3-unit radius buffer of POINT(234 567) to a curve using ST_LineToCurve, then rotating it 90 degrees (π/2 radians) around the Z-axis with the ST_RotateZ function."}
{"id": 570, "function": "ST_RotateZ", "question": "将POINT(234 567)的3单位距离缓冲区转换为曲线几何，并绕Z轴旋转π/2弧度，最终输出的EWKT字符串包含哪些几何信息？", "sql": "SELECT ST_AsEWKT(ST_RotateZ(geom, pi()/2)) \nFROM (SELECT ST_LineToCurve(ST_Buffer(ST_GeomFromText('POINT(234 567)'), 3)) As geom) As foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(-567 237.00000000000003,-567 231.00000000000003,-567 237.00000000000003))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2993, "question_en": "Convert the 3-unit distance buffer of POINT(234 567) into a curved geometry, rotate it π/2 radians around the Z-axis, and specify the geometric information in the final EWKT string."}
{"id": 571, "function": "ST_Scale", "question": "将三维线段LINESTRING(1 2 3, 1 1 1)在X轴方向缩放0.5倍、Y轴方向缩放0.75倍、Z轴方向缩放0.8倍后，以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75, 0.8));", "execution_result": [["LINESTRING(0.5 1.5 2.4,0.5 0.75 0.8)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2994, "question_en": "Scale the 3D linestring LINESTRING(1 2 3, 1 1 1) by 0.5 times in the X-axis, 0.75 times in the Y-axis, and 0.8 times in the Z-axis, then output the result in EWKT format."}
{"id": 571, "function": "ST_Scale", "question": "对由点(1 2 3)和点(1 1 1)构成的三维线段进行空间缩放，X/Y/Z轴的缩放因子分别为0.5、0.75、0.8，最终返回EWKT格式的几何体。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75, 0.8));", "execution_result": [["LINESTRING(0.5 1.5 2.4,0.5 0.75 0.8)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2995, "question_en": "Perform a spatial scaling on the 3D line segment formed by points (1 2 3) and (1 1 1), with scaling factors of 0.5, 0.75, and 0.8 for the X, Y, and Z axes respectively, and return the resulting geometry in EWKT format."}
{"id": 571, "function": "ST_Scale", "question": "使用ST_Scale函数对三维线段LINESTRING(1 2 3, 1 1 1)执行非均匀缩放，其中X坐标乘以0.5，Y坐标乘以0.75，Z坐标乘以0.8，并以EWKT文本形式输出变换后的几何对象。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75, 0.8));", "execution_result": [["LINESTRING(0.5 1.5 2.4,0.5 0.75 0.8)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2996, "question_en": "Perform non-uniform scaling on the 3D linestring LINESTRING(1 2 3, 1 1 1) using the ST_Scale function, multiplying the X coordinate by 0.5, Y by 0.75, Z by 0.8, and output the transformed geometry object in EWKT format."}
{"id": 571, "function": "ST_Scale", "question": "输出将三维线对象LINESTRING(1 2 3, 1 1 1)在X轴缩放0.5倍、Y轴缩放0.75倍、Z轴缩放0.8倍后的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75, 0.8));", "execution_result": [["LINESTRING(0.5 1.5 2.4,0.5 0.75 0.8)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2997, "question_en": "Output the EWKT string of the 3D line object LINESTRING(1 2 3, 1 1 1) after scaling it by 0.5 times on the X-axis, 0.75 times on the Y-axis, and 0.8 times on the Z-axis."}
{"id": 571, "function": "ST_Scale", "question": "以EWKT格式返回三维线对象LINESTRING(1 2 3, 1 1 1)经过X方向0.5倍缩放、Y方向0.75倍缩放、Z方向0.8倍缩放后的几何结果。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75, 0.8));", "execution_result": [["LINESTRING(0.5 1.5 2.4,0.5 0.75 0.8)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2998, "question_en": "Return the geometric result of the 3D line object LINESTRING(1 2 3, 1 1 1) after scaling by 0.5 in the X direction, 0.75 in the Y direction, and 0.8 in the Z direction, in EWKT format."}
{"id": 571, "function": "ST_Scale", "question": "将三维线对象LINESTRING(1 2 3, 1 1 1)的X坐标乘以0.5、Y坐标乘以0.75、Z坐标乘以0.8后，输出其扩展WKT（EWKT）表示形式。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75, 0.8));", "execution_result": [["LINESTRING(0.5 1.5 2.4,0.5 0.75 0.8)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2999, "question_en": "Scale the X-coordinate by 0.5, Y-coordinate by 0.75, and Z-coordinate by 0.8 for the 3D linestring LINESTRING(1 2 3, 1 1 1), then output its extended WKT (EWKT) representation."}
{"id": 572, "function": "ST_Scale", "question": "将三维线段LINESTRING(1 2 3, 1 1 1)在X轴方向缩放0.5倍、Y轴方向缩放0.75倍（Z轴保持不变），并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75));", "execution_result": [["LINESTRING(0.5 1.5 3,0.5 0.75 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3000, "question_en": "Scale the 3D linestring LINESTRING(1 2 3, 1 1 1) by 0.5 times in the X-axis direction and 0.75 times in the Y-axis direction (keeping Z-axis unchanged), and output the result in EWKT format."}
{"id": 572, "function": "ST_Scale", "question": "对三维线段LINESTRING(1 2 3, 1 1 1)执行空间缩放操作，其中X坐标乘以0.5，Y坐标乘以0.75，Z坐标不变，最终输出EWKT格式的几何体。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75));", "execution_result": [["LINESTRING(0.5 1.5 3,0.5 0.75 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3001, "question_en": "Perform a spatial scaling operation on the 3D linestring LINESTRING(1 2 3, 1 1 1), scaling the X-coordinate by 0.5, the Y-coordinate by 0.75, and leaving the Z-coordinate unchanged, then output the resulting geometry in EWKT format."}
{"id": 572, "function": "ST_Scale", "question": "使用ST_Scale函数对三维线段LINESTRING(1 2 3, 1 1 1)进行非均匀缩放，X轴缩放因子为0.5，Y轴缩放因子为0.75，Z轴保持不变，并通过ST_AsEWKT返回缩放后的几何体的文本表示。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75));", "execution_result": [["LINESTRING(0.5 1.5 3,0.5 0.75 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3002, "question_en": "Use the ST_Scale function to non-uniformly scale the 3D linestring LINESTRING(1 2 3, 1 1 1) with an X-axis scaling factor of 0.5, Y-axis scaling factor of 0.75, keeping the Z-axis unchanged, and return the text representation of the scaled geometry via ST_AsEWKT."}
{"id": 572, "function": "ST_Scale", "question": "输出将三维线对象LINESTRING(1 2 3, 1 1 1)在X轴缩放0.5倍、Y轴缩放0.75倍后生成的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75));", "execution_result": [["LINESTRING(0.5 1.5 3,0.5 0.75 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3003, "question_en": "Output the EWKT format string after scaling the 3D line object LINESTRING(1 2 3, 1 1 1) by 0.5 times on the X-axis and 0.75 times on the Y-axis."}
{"id": 572, "function": "ST_Scale", "question": "以EWKT格式返回三维线段LINESTRING(1 2 3, 1 1 1)经过X方向0.5倍缩放和Y方向0.75倍缩放后的几何对象。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75));", "execution_result": [["LINESTRING(0.5 1.5 3,0.5 0.75 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3004, "question_en": "Return the 3D linestring LINESTRING(1 2 3, 1 1 1) in EWKT format after scaling it by 0.5 in the X direction and 0.75 in the Y direction."}
{"id": 572, "function": "ST_Scale", "question": "将包含两个三维点(1 2 3)和(1 1 1)的线对象按X轴0.5倍、Y轴0.75倍的比例因子缩放后，输出其扩展WKT表示形式。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75));", "execution_result": [["LINESTRING(0.5 1.5 3,0.5 0.75 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3005, "question_en": "Scale the line object containing the two 3D points (1 2 3) and (1 1 1) by a factor of 0.5 on the X-axis and 0.75 on the Y-axis, then output its extended WKT representation."}
{"id": 573, "function": "ST_Scale", "question": "将LINESTRING(1 2 3 4, 1 1 1 1)这条带有XYZM坐标的四维线段，按照ST_MakePoint(0.5, 0.75, 2, -1)定义的X轴缩放0.5倍、Y轴缩放0.75倍、Z轴缩放2倍、M轴缩放-1倍的比例进行缩放，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)'), ST_MakePoint(0.5, 0.75, 2, -1)));", "execution_result": [["LINESTRING(0.5 1.5 6 -4,0.5 0.75 2 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3006, "question_en": "Scale the 4D LINESTRING(1 2 3 4, 1 1 1 1) with XYZM coordinates by a factor of 0.5 on the X-axis, 0.75 on the Y-axis, 2 on the Z-axis, and -1 on the M-axis as defined by ST_MakePoint(0.5, 0.75, 2, -1), and output the result in EWKT format."}
{"id": 573, "function": "ST_Scale", "question": "使用ST_Scale函数对LINESTRING(1 2 3 4, 1 1 1 1)这条四维线段进行非均匀缩放，其中X坐标乘以0.5，Y坐标乘以0.75，Z坐标乘以2，M坐标乘以-1，最终以EWKT格式返回缩放后的几何体。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)'), ST_MakePoint(0.5, 0.75, 2, -1)));", "execution_result": [["LINESTRING(0.5 1.5 6 -4,0.5 0.75 2 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3007, "question_en": "Use the ST_Scale function to non-uniformly scale the 4D LINESTRING(1 2 3 4, 1 1 1 1), multiplying the X coordinate by 0.5, Y by 0.75, Z by 2, and M by -1, then return the scaled geometry in EWKT format."}
{"id": 573, "function": "ST_Scale", "question": "将包含两个顶点(1 2 3 4)和(1 1 1 1)的四维线段，通过ST_MakePoint(0.5, 0.75, 2, -1)指定的缩放因子分别在X、Y、Z、M四个维度上进行缩放变换，并将结果以EWKT格式输出。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)'), ST_MakePoint(0.5, 0.75, 2, -1)));", "execution_result": [["LINESTRING(0.5 1.5 6 -4,0.5 0.75 2 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3008, "question_en": "Scale the 4D line segment with vertices (1 2 3 4) and (1 1 1 1) using the scaling factors specified by ST_MakePoint(0.5, 0.75, 2, -1) along the X, Y, Z, and M dimensions, and output the result in EWKT format."}
{"id": 573, "function": "ST_Scale", "question": "输出将LINESTRING(1 2 3 4, 1 1 1 1)按照X轴缩放0.5倍、Y轴缩放0.75倍、Z轴缩放2倍、M值缩放-1倍后得到的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)'), ST_MakePoint(0.5, 0.75, 2, -1)));", "execution_result": [["LINESTRING(0.5 1.5 6 -4,0.5 0.75 2 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3009, "question_en": "Output the EWKT format string after scaling LINESTRING(1 2 3 4, 1 1 1 1) by 0.5 times on the X-axis, 0.75 times on the Y-axis, 2 times on the Z-axis, and -1 times on the M-value."}
{"id": 573, "function": "ST_Scale", "question": "输出一个四维线串LINESTRING(1 2 3 4, 1 1 1 1)经过ST_MakePoint(0.5, 0.75, 2, -1)定义的各维度缩放因子变换后的EWKT表示结果。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)'), ST_MakePoint(0.5, 0.75, 2, -1)));", "execution_result": [["LINESTRING(0.5 1.5 6 -4,0.5 0.75 2 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3010, "question_en": "Output the EWKT representation of a 4D linestring LINESTRING(1 2 3 4, 1 1 1 1) after applying the scaling factors defined by ST_MakePoint(0.5, 0.75, 2, -1) for each dimension."}
{"id": 573, "function": "ST_Scale", "question": "输出用ST_MakePoint(0.5, 0.75, 2, -1)作为缩放因子对四维线串LINESTRING(1 2 3 4, 1 1 1 1)进行各维度缩放后生成的EWKT格式几何体。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)'), ST_MakePoint(0.5, 0.75, 2, -1)));", "execution_result": [["LINESTRING(0.5 1.5 6 -4,0.5 0.75 2 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3011, "question_en": "Output the EWKT format geometry generated by scaling each dimension of the 4D linestring LINESTRING(1 2 3 4, 1 1 1 1) using ST_MakePoint(0.5, 0.75, 2, -1) as the scaling factor."}
{"id": 574, "function": "ST_Scale", "question": "以POINT(2 2)作为缩放因子，POINT(1 1)作为原点，对LINESTRING(1 1, 2 2)进行缩放操作，并将结果以WKT格式输出。", "sql": "SELECT ST_AsText(ST_Scale('LINESTRING(1 1, 2 2)', 'POINT(2 2)', 'POINT(1 1)'::geometry));", "execution_result": [["LINESTRING(1 1,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3012, "question_en": "Scale the LINESTRING(1 1, 2 2) using POINT(2 2) as the scaling factor and POINT(1 1) as the origin, then output the result in WKT format."}
{"id": 574, "function": "ST_Scale", "question": "将LINESTRING(1 1, 2 2)这条线段以POINT(1 1)为基准点，按照POINT(2 2)给定的X和Y方向缩放比例进行缩放，最终输出缩放后的几何对象的WKT表示。", "sql": "SELECT ST_AsText(ST_Scale('LINESTRING(1 1, 2 2)', 'POINT(2 2)', 'POINT(1 1)'::geometry));", "execution_result": [["LINESTRING(1 1,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3013, "question_en": "Scale the LINESTRING(1 1, 2 2) using POINT(1 1) as the reference point and the X and Y scaling ratios provided by POINT(2 2), then output the WKT representation of the scaled geometry."}
{"id": 574, "function": "ST_Scale", "question": "使用ST_Scale函数，以POINT(2 2)的X=2和Y=2作为缩放比例，POINT(1 1)作为缩放中心点，对LINESTRING(1 1, 2 2)进行几何缩放，并返回缩放结果的WKT文本。", "sql": "SELECT ST_AsText(ST_Scale('LINESTRING(1 1, 2 2)', 'POINT(2 2)', 'POINT(1 1)'::geometry));", "execution_result": [["LINESTRING(1 1,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3014, "question_en": "Using the ST_Scale function, with POINT(2 2)'s X=2 and Y=2 as the scaling factors and POINT(1 1) as the scaling center, perform geometric scaling on LINESTRING(1 1, 2 2) and return the WKT text of the scaled result."}
{"id": 574, "function": "ST_Scale", "question": "输出LINESTRING(1 1, 2 2)以POINT(2 2)为缩放原点、POINT(1 1)为缩放因子进行缩放后的WKT字符串结果。", "sql": "SELECT ST_AsText(ST_Scale('LINESTRING(1 1, 2 2)', 'POINT(2 2)', 'POINT(1 1)'::geometry));", "execution_result": [["LINESTRING(1 1,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3015, "question_en": "Output the WKT string result of scaling LINESTRING(1 1, 2 2) with POINT(2 2) as the scaling origin and POINT(1 1) as the scaling factor."}
{"id": 574, "function": "ST_Scale", "question": "将LINESTRING(1 1, 2 2)基于参考点POINT(2 2)按POINT(1 1)的XY分量比例缩放后，返回的几何对象WKT文本是什么？", "sql": "SELECT ST_AsText(ST_Scale('LINESTRING(1 1, 2 2)', 'POINT(2 2)', 'POINT(1 1)'::geometry));", "execution_result": [["LINESTRING(1 1,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3016, "question_en": "After scaling the LINESTRING(1 1, 2 2) based on the reference point POINT(2 2) using the XY component ratios of POINT(1 1), what is the WKT text of the resulting geometry object?"}
{"id": 574, "function": "ST_Scale", "question": "以POINT(2 2)为固定点，用POINT(1 1)的X=1、Y=1值对LINESTRING(1 1, 2 2)执行等比例缩放，输出结果的WKT格式字符串。", "sql": "SELECT ST_AsText(ST_Scale('LINESTRING(1 1, 2 2)', 'POINT(2 2)', 'POINT(1 1)'::geometry));", "execution_result": [["LINESTRING(1 1,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3017, "question_en": "Using POINT(2 2) as the fixed point, perform uniform scaling on LINESTRING(1 1, 2 2) with the X=1 and Y=1 values from POINT(1 1), and output the resulting WKT format string."}
{"id": 575, "function": "ST_Translate", "question": "将SRID为4326的WGS84坐标点POINT(-71.01 42.37)在X轴方向平移1个单位（Y轴方向平移0个单位），并以WKT文本格式输出结果几何体。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('POINT(-71.01 42.37)',4326),1,0)) AS wgs_transgeomtxt;", "execution_result": [["POINT(-70.01 42.37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3018, "question_en": "Translate the WGS84 coordinate point POINT(-71.01 42.37) with SRID 4326 by 1 unit along the X-axis (0 units along the Y-axis) and output the resulting geometry in WKT text format."}
{"id": 575, "function": "ST_Translate", "question": "基于EPSG:4326坐标系，对二维点POINT(-71.01 42.37)执行空间平移操作（X偏移量1，Y偏移量0），返回平移后几何体的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('POINT(-71.01 42.37)',4326),1,0)) AS wgs_transgeomtxt;", "execution_result": [["POINT(-70.01 42.37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3019, "question_en": "Perform a spatial translation operation (X offset 1, Y offset 0) on the 2D point POINT(-71.01 42.37) based on the EPSG:4326 coordinate system, and return the WKT string representation of the translated geometry."}
{"id": 575, "function": "ST_Translate", "question": "使用ST_Translate函数将经纬度点POINT(-71.01 42.37)（SRID=4326）向右移动1个经度单位（垂直方向不移动），最终输出变换后的几何对象的文本表达式。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('POINT(-71.01 42.37)',4326),1,0)) AS wgs_transgeomtxt;", "execution_result": [["POINT(-70.01 42.37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3020, "question_en": "Use the ST_Translate function to shift the longitude-latitude point POINT(-71.01 42.37) (SRID=4326) right by 1 longitude unit (no vertical movement), and output the final transformed geometry's text representation."}
{"id": 575, "function": "ST_Translate", "question": "输出将SRID为4326的WGS84坐标点POINT(-71.01 42.37)沿X轴平移1个单位后，转换得到的WKT格式字符串。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('POINT(-71.01 42.37)',4326),1,0)) AS wgs_transgeomtxt;", "execution_result": [["POINT(-70.01 42.37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3021, "question_en": "Output the WKT format string after translating the WGS84 coordinate point POINT(-71.01 42.37) with SRID 4326 by 1 unit along the X-axis."}
{"id": 575, "function": "ST_Translate", "question": "以WKT文本格式返回结果，该结果是原始点POINT(-71.01 42.37)（坐标系EPSG:4326）经过X方向偏移量1和Y方向偏移量0的空间平移后的几何体。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('POINT(-71.01 42.37)',4326),1,0)) AS wgs_transgeomtxt;", "execution_result": [["POINT(-70.01 42.37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3022, "question_en": "Return the result in WKT format, which is the geometry obtained by spatially translating the original point POINT(-71.01 42.37) (coordinate system EPSG:4326) with an X offset of 1 and a Y offset of 0."}
{"id": 575, "function": "ST_Translate", "question": "将经纬度点POINT(-71.01 42.37)（定义在4326坐标系中）进行空间位移，其中X轴移动1个单位且Y轴保持不变，最终输出位移后几何对象的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('POINT(-71.01 42.37)',4326),1,0)) AS wgs_transgeomtxt;", "execution_result": [["POINT(-70.01 42.37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3023, "question_en": "Translate the latitude and longitude point POINT(-71.01 42.37) (defined in the 4326 coordinate system) by shifting 1 unit along the X-axis while keeping the Y-axis unchanged, and output the WKT string representation of the resulting geometry."}
{"id": 576, "function": "ST_Translate", "question": "将SRID为4326的LINESTRING(-71.01 42.37,-71.11 42.38)线段在X轴方向平移1个单位、Y轴方向平移0.5个单位后，输出其WKT文本表示。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('LINESTRING(-71.01 42.37,-71.11 42.38)',4326),1,0.5)) AS wgs_transgeomtxt;", "execution_result": [["LINESTRING(-70.01 42.87,-70.11 42.88)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3024, "question_en": "Translate the LINESTRING(-71.01 42.37,-71.11 42.38) with SRID 4326 by shifting 1 unit along the X-axis and 0.5 units along the Y-axis, then output its WKT representation."}
{"id": 576, "function": "ST_Translate", "question": "如何将WGS84坐标系（SRID 4326）下的线段LINESTRING(-71.01 42.37,-71.11 42.38)沿X轴正方向移动1、Y轴正方向移动0.5，并返回平移后的几何文本？", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('LINESTRING(-71.01 42.37,-71.11 42.38)',4326),1,0.5)) AS wgs_transgeomtxt;", "execution_result": [["LINESTRING(-70.01 42.87,-70.11 42.88)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3025, "question_en": "How to shift the LINESTRING(-71.01 42.37,-71.11 42.38) in WGS84 coordinate system (SRID 4326) by 1 unit in the positive X direction and 0.5 units in the positive Y direction, and return the translated geometry text?"}
{"id": 576, "function": "ST_Translate", "question": "使用ST_Translate函数对LINESTRING(-71.01 42.37,-71.11 42.38)进行空间平移（X轴偏移量1，Y轴偏移量0.5），并以WKT格式输出结果几何体。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('LINESTRING(-71.01 42.37,-71.11 42.38)',4326),1,0.5)) AS wgs_transgeomtxt;", "execution_result": [["LINESTRING(-70.01 42.87,-70.11 42.88)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3026, "question_en": "Use the ST_Translate function to spatially shift the LINESTRING(-71.01 42.37,-71.11 42.38) (X-axis offset 1, Y-axis offset 0.5) and output the resulting geometry in WKT format."}
{"id": 576, "function": "ST_Translate", "question": "输出将WGS84坐标系下的LINESTRING(-71.01 42.37,-71.11 42.38)在X方向平移1个单位、Y方向平移0.5个单位后得到的WKT字符串。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('LINESTRING(-71.01 42.37,-71.11 42.38)',4326),1,0.5)) AS wgs_transgeomtxt;", "execution_result": [["LINESTRING(-70.01 42.87,-70.11 42.88)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3027, "question_en": "Output the WKT string of the LINESTRING(-71.01 42.37,-71.11 42.38) in WGS84 coordinate system after translating it by 1 unit in the X direction and 0.5 units in the Y direction."}
{"id": 576, "function": "ST_Translate", "question": "输出SRID为4326的LINESTRING(-71.01 42.37,-71.11 42.38)几何对象经过X轴偏移量1、Y轴偏移量0.5的空间变换后的WKT文本表示。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('LINESTRING(-71.01 42.37,-71.11 42.38)',4326),1,0.5)) AS wgs_transgeomtxt;", "execution_result": [["LINESTRING(-70.01 42.87,-70.11 42.88)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3028, "question_en": "Output the WKT representation of the LINESTRING(-71.01 42.37,-71.11 42.38) geometry with SRID 4326 after a spatial transformation with an X-axis offset of 1 and a Y-axis offset of 0.5."}
{"id": 576, "function": "ST_Translate", "question": "将地理坐标系(4326)中的折线LINESTRING(-71.01 42.37,-71.11 42.38)进行空间平移（X+1，Y+0.5）后，输出其标准WKT格式字符串。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('LINESTRING(-71.01 42.37,-71.11 42.38)',4326),1,0.5)) AS wgs_transgeomtxt;", "execution_result": [["LINESTRING(-70.01 42.87,-70.11 42.88)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3029, "question_en": "Translate the linestring LINESTRING(-71.01 42.37,-71.11 42.38) in geographic coordinate system (4326) by shifting it (X+1, Y+0.5), then output its standard WKT format string."}
{"id": 577, "function": "ST_Translate", "question": "将三维点POINT(0 0 0)在X轴方向平移5个单位，Y轴方向平移12个单位，Z轴方向平移3个单位，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Translate(CAST('POINT(0 0 0)' AS geometry), 5, 12, 3));", "execution_result": [["POINT(5 12 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3030, "question_en": "Translate the 3D point POINT(0 0 0) by 5 units along the X-axis, 12 units along the Y-axis, and 3 units along the Z-axis, then output the result in EWKT format."}
{"id": 577, "function": "ST_Translate", "question": "对字符串‘POINT(0 0 0)’显式转换成空间对象，然后执行空间平移操作，其中X坐标增加5，Y坐标增加12，Z坐标增加3，最终返回EWKT格式的三维点坐标。", "sql": "SELECT ST_AsEWKT(ST_Translate(CAST('POINT(0 0 0)' AS geometry), 5, 12, 3));", "execution_result": [["POINT(5 12 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3031, "question_en": "Explicitly convert the string 'POINT(0 0 0)' into a spatial object, perform a spatial translation with X increased by 5, Y by 12, and Z by 3, then return the 3D point coordinates in EWKT format."}
{"id": 577, "function": "ST_Translate", "question": "使用ST_Translate函数将三维点POINT(0 0 0)的X值调整为0+5=5，Y值调整为0+12=12，Z值调整为0+3=3，并通过ST_AsEWKT输出带SRID标记的三维点文本。", "sql": "SELECT ST_AsEWKT(ST_Translate(CAST('POINT(0 0 0)' AS geometry), 5, 12, 3));", "execution_result": [["POINT(5 12 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3032, "question_en": "Use the ST_Translate function to adjust the X value of the 3D point POINT(0 0 0) to 0+5=5, the Y value to 0+12=12, the Z value to 0+3=3, and output the 3D point text with SRID using ST_AsEWKT."}
{"id": 577, "function": "ST_Translate", "question": "输出将三维点POINT(0 0 0)在X轴方向平移5个单位、Y轴方向平移12个单位、Z轴方向平移3个单位后，转换为EWKT格式的字符串结果。", "sql": "SELECT ST_AsEWKT(ST_Translate(CAST('POINT(0 0 0)' AS geometry), 5, 12,3));", "execution_result": [["POINT(5 12 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3033, "question_en": "Output the EWKT format string result after translating the 3D point POINT(0 0 0) by 5 units in the X-axis direction, 12 units in the Y-axis direction, and 3 units in the Z-axis direction."}
{"id": 577, "function": "ST_Translate", "question": "将原始三维几何对象POINT(0 0 0)经过空间平移变换（X+5, Y+12, Z+3）后，返回其扩展WKT(EWKT)表示形式的字符串是什么？", "sql": "SELECT ST_AsEWKT(ST_Translate(CAST('POINT(0 0 0)' AS geometry), 5, 12,3));", "execution_result": [["POINT(5 12 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3034, "question_en": "What is the EWKT string representation of the original 3D geometry object POINT(0 0 0) after applying a spatial translation (X+5, Y+12, Z+3)?"}
{"id": 577, "function": "ST_Translate", "question": "以EWKT格式输出三维点POINT(0 0 0)经过ST_Translate函数处理后的结果，其中平移参数分别为X方向5、Y方向12、Z方向3。", "sql": "SELECT ST_AsEWKT(ST_Translate(CAST('POINT(0 0 0)' AS geometry), 5, 12,3));", "execution_result": [["POINT(5 12 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3035, "question_en": "Output the result of the 3D point POINT(0 0 0) after being processed by the ST_Translate function in EWKT format, with translation parameters of 5 in the X direction, 12 in the Y direction, and 3 in the Z direction."}
{"id": 578, "function": "ST_Translate", "question": "将CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7,8 9,4 3))和POINT(1 3)合并为一个几何集合后，在X方向平移1个单位、Y方向平移2个单位，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_Translate(ST_Collect('CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7, 8 9,4 3))','POINT(1 3)'),1,2));", "execution_result": [["GEOMETRYCOLLECTION(CURVEPOLYGON(CIRCULARSTRING(5 5,4.12 2.878,2 2,-0.121 7.1213,7 9,9 11,5 5)),POINT(2 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3036, "question_en": "Combine CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7,8 9,4 3)) and POINT(1 3) into a geometry collection, then shift it by 1 unit in the X direction and 2 units in the Y direction, and output the result in WKT format."}
{"id": 578, "function": "ST_Translate", "question": "如何将曲线多边形CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7,8 9,4 3))与点POINT(1 3)组合后，沿X轴移动1个单位、Y轴移动2个单位，并返回WKT文本？", "sql": "SELECT ST_AsText(ST_Translate(ST_Collect('CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7, 8 9,4 3))','POINT(1 3)'),1,2));", "execution_result": [["GEOMETRYCOLLECTION(CURVEPOLYGON(CIRCULARSTRING(5 5,4.12 2.878,2 2,-0.121 7.1213,7 9,9 11,5 5)),POINT(2 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3037, "question_en": "How to combine the curve polygon CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7,8 9,4 3)) with the point POINT(1 3), then shift it by 1 unit along the X-axis and 2 units along the Y-axis, and return the WKT text?"}
{"id": 578, "function": "ST_Translate", "question": "对CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7,8 9,4 3)和POINT(1 3)执行集合操作后，应用X偏移量1和Y偏移量2的空间平移，最终输出WKT格式的几何结果。", "sql": "SELECT ST_AsText(ST_Translate(ST_Collect('CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7, 8 9,4 3))','POINT(1 3)'),1,2));", "execution_result": [["GEOMETRYCOLLECTION(CURVEPOLYGON(CIRCULARSTRING(5 5,4.12 2.878,2 2,-0.121 7.1213,7 9,9 11,5 5)),POINT(2 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3038, "question_en": "Perform a set operation on CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7,8 9,4 3)) and POINT(1 3), then apply a spatial translation with X offset 1 and Y offset 2, and finally output the geometric result in WKT format."}
{"id": 578, "function": "ST_Translate", "question": "输出将CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7,8 9,4 3))和POINT(1 3)合并后，再沿X轴平移1个单位、Y轴平移2个单位得到的WKT字符串。", "sql": "SELECT ST_AsText(ST_Translate(ST_Collect('CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7, 8 9,4 3))','POINT(1 3)'),1,2));", "execution_result": [["GEOMETRYCOLLECTION(CURVEPOLYGON(CIRCULARSTRING(5 5,4.12 2.878,2 2,-0.121 7.1213,7 9,9 11,5 5)),POINT(2 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3039, "question_en": "Output the WKT string obtained by merging CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7,8 9,4 3)) and POINT(1 3), then translating it by 1 unit along the X-axis and 2 units along the Y-axis."}
{"id": 578, "function": "ST_Translate", "question": "输出由曲线多边形CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7,8 9,4 3))与点POINT(1 3)组成的几何集合，经X方向偏移量1、Y方向偏移量2平移后的WKT文本表示。", "sql": "SELECT ST_AsText(ST_Translate(ST_Collect('CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7, 8 9,4 3))','POINT(1 3)'),1,2));", "execution_result": [["GEOMETRYCOLLECTION(CURVEPOLYGON(CIRCULARSTRING(5 5,4.12 2.878,2 2,-0.121 7.1213,7 9,9 11,5 5)),POINT(2 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3040, "question_en": "Output the WKT representation of the geometric collection formed by the curved polygon CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7,8 9,4 3)) and the point POINT(1 3) after being translated with an X offset of 1 and a Y offset of 2."}
{"id": 578, "function": "ST_Translate", "question": "输出ST_Collect函数合并曲线多边形CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7,8 9,4 3))与点POINT(1 3)后，再通过ST_Translate函数进行X轴+1、Y轴+2位移的WKT格式结果。", "sql": "SELECT ST_AsText(ST_Translate(ST_Collect('CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7, 8 9,4 3))','POINT(1 3)'),1,2));", "execution_result": [["GEOMETRYCOLLECTION(CURVEPOLYGON(CIRCULARSTRING(5 5,4.12 2.878,2 2,-0.121 7.1213,7 9,9 11,5 5)),POINT(2 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3041, "question_en": "Output the WKT format result of applying ST_Translate with an X-axis shift of +1 and Y-axis shift of +2 to the combination of the curved polygon CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7,8 9,4 3)) and the point POINT(1 3) using ST_Collect."}
{"id": 579, "function": "ST_TransScale", "question": "对三维线对象LINESTRING(1 2 3, 1 1 1)依次执行平移和缩放变换：X轴平移0.5个单位，Y轴平移1个单位后，X方向缩放为原来的1倍，Y方向缩放为原来的2倍，Z方向保持不变，最终以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_TransScale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 1, 1, 2));", "execution_result": [["LINESTRING(1.5 6 3,1.5 4 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3042, "question_en": "Perform translation and scaling transformations on the 3D line object LINESTRING(1 2 3, 1 1 1) in sequence: translate 0.5 units along the X-axis and 1 unit along the Y-axis, then scale the X-direction by 1x, the Y-direction by 2x, and keep the Z-direction unchanged, finally output the result in EWKT format."}
{"id": 579, "function": "ST_TransScale", "question": "将三维线LINESTRING(1 2 3, 1 1 1)进行几何变换：X方向平移0.5，Y方向平移1个单位，再整体在X轴缩放为原来的1倍，Y方向缩放为原来的2倍，Z方向保持不变，输出带SRID的WKT字符串。", "sql": "SELECT ST_AsEWKT(ST_TransScale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 1, 1, 2));", "execution_result": [["LINESTRING(1.5 6 3,1.5 4 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3043, "question_en": "Perform a geometric transformation on the 3D linestring LINESTRING(1 2 3, 1 1 1): translate 0.5 units in the X direction and 1 unit in the Y direction, then scale uniformly by 1x in the X direction and 2x in the Y direction while keeping the Z direction unchanged, and output the WKT string with SRID."}
{"id": 579, "function": "ST_TransScale", "question": "使用ST_TransScale函数处理三维线LINESTRING(1 2 3, 1 1 1)，X方向平移0.5，Y方向平移1个单位，再整体在X轴缩放为原来的1倍，Y方向缩放为原来的2倍，Z方向保持不变，返回EWKT格式的变换后几何体。", "sql": "SELECT ST_AsEWKT(ST_TransScale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 1, 1, 2));", "execution_result": [["LINESTRING(1.5 6 3,1.5 4 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3044, "question_en": "Process the 3D line LINESTRING(1 2 3, 1 1 1) using the ST_TransScale function, translating 0.5 units in the X direction and 1 unit in the Y direction, then scaling the X axis by 1x, the Y axis by 2x, and keeping the Z axis unchanged, returning the transformed geometry in EWKT format."}
{"id": 579, "function": "ST_TransScale", "question": "输出对三维线对象LINESTRING(1 2 3, 1 1 1)进行沿X轴右移0.5单位，Y轴上移1单位，同时保持X尺寸不变，Y尺寸拉长为两倍，高度Z不变变换后的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_TransScale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 1, 1, 2));", "execution_result": [["LINESTRING(1.5 6 3,1.5 4 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3045, "question_en": "Output the EWKT format string after transforming the 3D line object LINESTRING(1 2 3, 1 1 1) by shifting 0.5 units right along the X-axis, 1 unit up along the Y-axis, keeping the X dimension unchanged, stretching the Y dimension to double its size, and maintaining the original Z height."}
{"id": 579, "function": "ST_TransScale", "question": "将三维线对象LINESTRING(1 2 3, 1 1 1)的坐标实施变换：X' = X × 1 + 0.5，Y' = Y × 2 + 1，Z' = Z后，返回包含SRID信息的EWKT文本结果。", "sql": "SELECT ST_AsEWKT(ST_TransScale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 1, 1, 2));", "execution_result": [["LINESTRING(1.5 6 3,1.5 4 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3046, "question_en": "Transform the coordinates of the 3D line object LINESTRING(1 2 3, 1 1 1) with: X' = X × 1 + 0.5, Y' = Y × 2 + 1, Z' = Z, then return the EWKT text result including SRID information."}
{"id": 579, "function": "ST_TransScale", "question": "以EWKT格式输出三维线LINESTRING(1 2 3, 1 1 1)的变换结果，其中先执行Y轴2倍拉伸，再整体平移（X方向0.5，Y方向1），Z坐标始终保留原值。。", "sql": "SELECT ST_AsEWKT(ST_TransScale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 1, 1, 2));", "execution_result": [["LINESTRING(1.5 6 3,1.5 4 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3047, "question_en": "Output the transformed result of the 3D line LINESTRING(1 2 3, 1 1 1) in EWKT format, first applying a 2× scaling along the Y-axis, then translating the entire line (0.5 in X-direction, 1 in Y-direction), while preserving the original Z-coordinate values."}
{"id": 580, "function": "ST_TransScale", "question": "以POINT(234 567)为中心创建半径为3的缓冲区，将缓冲区的边界转换为曲线，然后对该曲线进行X方向平移1个单位、Y方向平移2个单位、然后在X方向缩放因子为3、Y方向缩放因子为4的仿射变换，最终以WKT格式输出结果几何体。", "sql": "SELECT ST_AsText(ST_Transscale(ST_LineToCurve(ST_Buffer('POINT(234 567)', 3)),1,2,3,4));", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(714 2276,696 2276,714 2276))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3048, "question_en": "Create a buffer with a radius of 3 centered at POINT(234 567), convert the buffer's boundary to a curve, then apply an affine transformation to the curve with a translation of 1 unit in the X direction and 2 units in the Y direction, followed by a scaling factor of 3 in the X direction and 4 in the Y direction, and finally output the resulting geometry in WKT format."}
{"id": 580, "function": "ST_TransScale", "question": "对二维点POINT(234 567)生成3单位距离的缓冲区，将缓冲区多边形边界线性化转换为曲线，X方向偏移1单位、Y方向偏移2单位，并分别按3倍和4倍进行坐标轴缩放，最终返回变换后几何体的WKT文本表示。", "sql": "SELECT ST_AsText(ST_Transscale(ST_LineToCurve(ST_Buffer('POINT(234 567)', 3)),1,2,3,4));", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(714 2276,696 2276,714 2276))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3049, "question_en": "Generate a 3-unit buffer for the 2D point POINT(234 567), linearize the buffer polygon boundary into a curve, offset it by 1 unit in the X direction and 2 units in the Y direction, then scale the axes by 3 times and 4 times respectively, and finally return the WKT representation of the transformed geometry."}
{"id": 580, "function": "ST_TransScale", "question": "基于坐标(234,567)的二维点构建3单位半径的缓冲多边形，将其边界折线转化为曲线几何后，执行参数为（dx=1, dy=2, xscale=3, yscale=4）的平移缩放复合变换，输出结果几何的WKT字符串。", "sql": "SELECT ST_AsText(ST_Transscale(ST_LineToCurve(ST_Buffer('POINT(234 567)', 3)),1,2,3,4));", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(714 2276,696 2276,714 2276))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3050, "question_en": "Construct a 3-unit radius buffer polygon from the 2D point at coordinates (234,567), convert its boundary polyline into a curved geometry, then perform a composite transformation of translation and scaling with parameters (dx=1, dy=2, xscale=3, yscale=4), and output the WKT string of the resulting geometry."}
{"id": 580, "function": "ST_TransScale", "question": "输出将POINT(234 567)缓冲3单位距离后转换为曲线几何，再应用X方向平移量1、Y方向平移量2、X方向缩放因子为3、Y方向缩放因子为4的仿射变换，最终得到的WKT字符串。", "sql": "SELECT ST_AsText(ST_Transscale(ST_LineToCurve(ST_Buffer('POINT(234 567)', 3)),1,2,3,4));", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(714 2276,696 2276,714 2276))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3051, "question_en": "Output the WKT string of the result after buffering POINT(234 567) by 3 units, converting it to a curved geometry, and applying an affine transformation with X translation 1, Y translation 2, X scale factor 3, and Y scale factor 4."}
{"id": 580, "function": "ST_TransScale", "question": "输出ST_Buffer对POINT(234 567)生成3单位半径的缓冲区多边形，经ST_LineToCurve转换为曲线后，再通过ST_Transscale向右平移1单位，上移2单位；然后X轴放大3倍，Y轴放大4倍处理结果的WKT文本表示。", "sql": "SELECT ST_AsText(ST_Transscale(ST_LineToCurve(ST_Buffer('POINT(234 567)', 3)),1,2,3,4));", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(714 2276,696 2276,714 2276))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3052, "question_en": "Output the WKT representation of the result after applying ST_Buffer to create a 3-unit radius buffer polygon around POINT(234 567), converting it to a curve with ST_LineToCurve, then translating it right by 1 unit and up by 2 units with ST_TransScale, followed by scaling the X-axis by 3 times and the Y-axis by 4 times."}
{"id": 580, "function": "ST_TransScale", "question": "输出POINT(234 567)经ST_Buffer(半径3)、ST_LineToCurve(折线转曲线)、ST_Transscale(平移参数X=1/Y=2，缩放参数X=3/Y=4)三层几何处理后的WKT格式字符串。", "sql": "SELECT ST_AsText(ST_Transscale(ST_LineToCurve(ST_Buffer('POINT(234 567)', 3)),1,2,3,4));", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(714 2276,696 2276,714 2276))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3053, "question_en": "Output the WKT format string of POINT(234 567) after three geometric processing steps: ST_Buffer (radius=3), ST_LineToCurve (convert polyline to curve), and ST_Transscale (translation parameters X=1/Y=2, scaling parameters X=3/Y=4)."}
{"id": 583, "function": "ST_ClusterIntersecting", "question": "给定包含LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)四条线段和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))一个多边形的几何数组，如何将这些几何对象按相交关系聚类，并以WKT格式输出每个聚类结果？", "sql": "WITH testdata AS ( SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, \n         'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterIntersecting(geom))) \nFROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3054, "question_en": "Given an array of geometries containing four linestrings (LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1)) and one polygon (POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))), how to cluster these geometric objects by their intersection relationships and output each cluster result in WKT format?"}
{"id": 583, "function": "ST_ClusterIntersecting", "question": "使用ST_ClusterIntersecting函数对LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))这五个几何对象进行空间聚类，要求输出每个聚类结果的WKT表示形式。", "sql": "WITH testdata AS ( SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, \n         'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterIntersecting(geom))) \nFROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3055, "question_en": "Use the ST_ClusterIntersecting function to spatially cluster the following five geometric objects: LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)), and output the WKT representation of each cluster result."}
{"id": 583, "function": "ST_ClusterIntersecting", "question": "如何将坐标分别为LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)的线段和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))的多边形进行相交聚类，并展开聚类结果以WKT格式输出？", "sql": "WITH testdata AS ( SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, \n         'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterIntersecting(geom))) \nFROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3056, "question_en": "How to perform intersection clustering on the linestrings LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1) and the polygon POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)), then expand the clustering results and output them in WKT format?"}
{"id": 583, "function": "ST_ClusterIntersecting", "question": "输出将LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))按相交关系聚类后，每个聚类结果的WKT字符串表示。", "sql": "WITH testdata AS ( SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, \n         'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterIntersecting(geom))) \nFROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3057, "question_en": "Output the WKT string representation of each clustered result after grouping the LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)) by their intersection relationships."}
{"id": 583, "function": "ST_ClusterIntersecting", "question": "输出由LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))组成的几何集合中，所有相交几何对象聚类后的WKT字符串结果。", "sql": "WITH testdata AS ( SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, \n         'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterIntersecting(geom))) \nFROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3058, "question_en": "Output the WKT string results of all intersecting geometric objects clustered from the geometry collection consisting of LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))."}
{"id": 583, "function": "ST_ClusterIntersecting", "question": "输出将LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))作为输入几何，通过ST_ClusterIntersecting函数聚类后，解组并转换为WKT格式的结果。", "sql": "WITH testdata AS ( SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, \n         'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterIntersecting(geom))) \nFROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3059, "question_en": "Output the result of clustering the input geometries LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)) using ST_ClusterIntersecting, then unnesting and converting them to WKT format."}
{"id": 584, "function": "ST_ClusterIntersectingWin", "question": "对包含LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))这五个几何对象的测试数据，使用ST_ClusterIntersectingWin窗口函数计算相交聚类，并返回每个对象的ID、WKT格式的几何表示和所属聚类编号。", "sql": "WITH testdata AS (\n  SELECT id, geom::geometry \n  FROM (\n    VALUES \n      (1, 'LINESTRING (0 0, 1 1)'), \n      (2, 'LINESTRING (5 5, 4 4)'), \n      (3, 'LINESTRING (6 6, 7 7)'), \n      (4, 'LINESTRING (0 0, -1 -1)'), \n      (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')\n  ) AS t(id, geom)\n)\nSELECT id, ST_AsText(geom), ST_ClusterIntersectingWin(geom) OVER () AS cluster\nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3060, "question_en": "For test data containing the five geometry objects LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)), use the ST_ClusterIntersectingWin window function to compute intersecting clusters and return each object's ID, WKT-formatted geometry, and cluster number."}
{"id": 584, "function": "ST_ClusterIntersectingWin", "question": "基于ID为1的LINESTRING (0 0, 1 1)、ID为2的LINESTRING (5 5, 4 4)、ID为3的LINESTRING (6 6, 7 7)、ID为4的LINESTRING (0 0, -1 -1)和ID为5的POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))这五个几何要素，如何通过ST_ClusterIntersectingWin函数划分它们的空间相交聚类？", "sql": "WITH testdata AS (\n  SELECT id, geom::geometry \n  FROM (\n    VALUES \n      (1, 'LINESTRING (0 0, 1 1)'), \n      (2, 'LINESTRING (5 5, 4 4)'), \n      (3, 'LINESTRING (6 6, 7 7)'), \n      (4, 'LINESTRING (0 0, -1 -1)'), \n      (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')\n  ) AS t(id, geom)\n)\nSELECT id, ST_AsText(geom), ST_ClusterIntersectingWin(geom) OVER () AS cluster\nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3061, "question_en": "Given the five geometric features: LINESTRING (0 0, 1 1) with ID 1, LINESTRING (5 5, 4 4) with ID 2, LINESTRING (6 6, 7 7) with ID 3, LINESTRING (0 0, -1 -1) with ID 4, and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)) with ID 5, how can we use the ST_ClusterIntersectingWin function to partition their spatial intersection clusters?"}
{"id": 584, "function": "ST_ClusterIntersectingWin", "question": "在包含LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)四条线段和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))一个多边形的数据集中，如何执行ST_ClusterIntersectingWin窗口函数来标识空间相交的要素聚类？", "sql": "WITH testdata AS (\n  SELECT id, geom::geometry \n  FROM (\n    VALUES \n      (1, 'LINESTRING (0 0, 1 1)'), \n      (2, 'LINESTRING (5 5, 4 4)'), \n      (3, 'LINESTRING (6 6, 7 7)'), \n      (4, 'LINESTRING (0 0, -1 -1)'), \n      (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')\n  ) AS t(id, geom)\n)\nSELECT id, ST_AsText(geom), ST_ClusterIntersectingWin(geom) OVER () AS cluster\nFROM testdata;\n", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3062, "question_en": "In a dataset containing four linestrings (LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1)) and one polygon (POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))), how to apply the ST_ClusterIntersectingWin window function to identify clusters of spatially intersecting features?"}
{"id": 584, "function": "ST_ClusterIntersectingWin", "question": "输出包含id、几何对象WKT字符串和ST_ClusterIntersectingWin窗口函数聚类结果的表格，其中几何对象包括LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))。", "sql": "WITH testdata AS (\n  SELECT id, geom::geometry \n  FROM (\n    VALUES \n      (1, 'LINESTRING (0 0, 1 1)'), \n      (2, 'LINESTRING (5 5, 4 4)'), \n      (3, 'LINESTRING (6 6, 7 7)'), \n      (4, 'LINESTRING (0 0, -1 -1)'), \n      (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')\n  ) AS t(id, geom)\n)\nSELECT id, ST_AsText(geom), ST_ClusterIntersectingWin(geom) OVER () AS cluster\nFROM testdata;\n", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3063, "question_en": "Output a table containing the id, WKT string of the geometry objects, and the clustering results from the ST_ClusterIntersectingWin window function, where the geometry objects include LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))."}
{"id": 584, "function": "ST_ClusterIntersectingWin", "question": "如何将LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))这五个几何对象转换为WKT格式，并计算它们通过ST_ClusterIntersectingWin窗口函数得到的空间聚类编号？", "sql": "WITH testdata AS (\n  SELECT id, geom::geometry \n  FROM (\n    VALUES \n      (1, 'LINESTRING (0 0, 1 1)'), \n      (2, 'LINESTRING (5 5, 4 4)'), \n      (3, 'LINESTRING (6 6, 7 7)'), \n      (4, 'LINESTRING (0 0, -1 -1)'), \n      (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')\n  ) AS t(id, geom)\n)\nSELECT id, ST_AsText(geom), ST_ClusterIntersectingWin(geom) OVER () AS cluster\nFROM testdata;\n", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3064, "question_en": "How to convert the five geometric objects LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)) into WKT format and compute their spatial cluster IDs using the ST_ClusterIntersectingWin window function?"}
{"id": 584, "function": "ST_ClusterIntersectingWin", "question": "查询结果需要显示哪些内容：对于包含LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))的testdata表，输出每行的id、几何对象的WKT表示和基于ST_ClusterIntersectingWin窗口函数的空间聚类编号？", "sql": "WITH testdata AS (\n  SELECT id, geom::geometry \n  FROM (\n    VALUES \n      (1, 'LINESTRING (0 0, 1 1)'), \n      (2, 'LINESTRING (5 5, 4 4)'), \n      (3, 'LINESTRING (6 6, 7 7)'), \n      (4, 'LINESTRING (0 0, -1 -1)'), \n      (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')\n  ) AS t(id, geom)\n)\nSELECT id, ST_AsText(geom), ST_ClusterIntersectingWin(geom) OVER () AS cluster\nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3065, "question_en": "What should the query results display: For the testdata table containing LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)), output each row's id, the WKT representation of the geometry, and the spatial cluster ID based on the ST_ClusterIntersectingWin window function?"}
{"id": 586, "function": "ST_ClusterKMeans", "question": "对表parcels中的geom列进行K均值聚类，聚类数量为3，返回聚类编号cid、地块ID parcel_id和原始几何对象geom。", "sql": "SELECT ST_ClusterKMeans(geom, 3) OVER() AS cid, parcel_id, geom \nFROM parcels;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3066, "question_en": "Perform K-means clustering on the geom column in the parcels table with 3 clusters, returning the cluster ID cid, parcel ID parcel_id, and the original geometry object geom."}
{"id": 586, "function": "ST_ClusterKMeans", "question": "使用K均值算法将表parcels中的几何对象geom划分为3个簇，输出每个对象的簇标识cid、原始ID parcel_id和几何数据geom。", "sql": "SELECT ST_ClusterKMeans(geom, 3) OVER() AS cid, parcel_id, geom \nFROM parcels;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3067, "question_en": "Use the K-means algorithm to cluster the geometric objects `geom` in the `parcels` table into 3 clusters, and output each object's cluster ID `cid`, original ID `parcel_id`, and geometric data `geom`."}
{"id": 586, "function": "ST_ClusterKMeans", "question": "基于表parcels的几何字段geom执行空间聚类，参数k值为3，通过窗口函数OVER()生成聚类结果cid，同时保留parcel_id和geom字段。", "sql": "SELECT ST_ClusterKMeans(geom, 3) OVER() AS cid, parcel_id, geom \nFROM parcels;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3068, "question_en": "Perform spatial clustering on the geometric field `geom` of the `parcels` table with a parameter `k` value of 3, generate the clustering result `cid` using the window function `OVER()`, and retain the `parcel_id` and `geom` fields."}
{"id": 586, "function": "ST_ClusterKMeans", "question": "输出parcels表中每个地块的几何对象geom、地块ID parcel_id以及通过K均值聚类算法将geom划分为3个簇后生成的簇标识cid，结果包含三列。", "sql": "SELECT ST_ClusterKMeans(geom, 3) OVER() AS cid, parcel_id, geom \nFROM parcels;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3069, "question_en": "Output the geometric object geom, parcel ID parcel_id, and cluster identifier cid generated by K-means clustering algorithm dividing geom into 3 clusters for each parcel in the parcels table, with the result containing three columns."}
{"id": 586, "function": "ST_ClusterKMeans", "question": "以parcels表的geom几何对象为输入，执行K均值聚类（参数k=3），返回包含簇编号cid、原始地块ID parcel_id和几何对象geom的完整记录集。", "sql": "SELECT ST_ClusterKMeans(geom, 3) OVER() AS cid, parcel_id, geom \nFROM parcels;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3070, "question_en": "Using the geom geometry objects from the parcels table as input, perform K-means clustering (parameter k=3) and return the complete record set including cluster ID cid, original parcel ID parcel_id, and geometry object geom."}
{"id": 586, "function": "ST_ClusterKMeans", "question": "对parcels表的所有geom几何对象进行空间聚类（聚类数3），输出结果为每行包含聚类ID cid、原始parcel_id和原始geom的三列表格。", "sql": "SELECT ST_ClusterKMeans(geom, 3) OVER() AS cid, parcel_id, geom \nFROM parcels;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3071, "question_en": "Perform spatial clustering (3 clusters) on all geom objects in the parcels table, outputting a three-column table with cluster ID (cid), original parcel_id, and original geom for each row."}
{"id": 587, "function": "ST_ClusterKMeans", "question": "对parcels表中的几何对象geom按照type字段分组，在每个type分组内使用K-Means算法将几何对象划分为3个聚类，并返回每个对象的聚类编号cid、原始parcel_id和type字段。", "sql": "SELECT ST_ClusterKMeans(geom, 3) over (PARTITION BY type) AS cid, parcel_id, type \nFROM parcels;", "execution_result": [[2, "005", "commercial"], [2, "003", "commercial"], [1, "007", "commercial"], [0, "001", "commercial"], [2, "004", "residential"], [0, "002", "residential"], [1, "006", "residential"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3072, "question_en": "Group the geometric objects `geom` in the `parcels` table by the `type` field, apply the K-Means algorithm within each `type` group to partition the objects into 3 clusters, and return the cluster ID `cid`, original `parcel_id`, and `type` field for each object."}
{"id": 587, "function": "ST_ClusterKMeans", "question": "在parcels表中，以type字段为分组依据，对每个分组内的几何列geom执行K-Means聚类分析（聚类数设置为3），输出结果包含聚类ID cid、地块ID parcel_id和原始类型type。", "sql": "SELECT ST_ClusterKMeans(geom, 3) over (PARTITION BY type) AS cid, parcel_id, type \nFROM parcels;", "execution_result": [[2, "005", "commercial"], [2, "003", "commercial"], [1, "007", "commercial"], [0, "001", "commercial"], [2, "004", "residential"], [0, "002", "residential"], [1, "006", "residential"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3073, "question_en": "In the parcels table, perform K-Means clustering (with the number of clusters set to 3) on the geometry column geom for each group defined by the type field, and output the results including cluster ID cid, parcel ID parcel_id, and original type type."}
{"id": 587, "function": "ST_ClusterKMeans", "question": "针对parcels表的geom几何字段，先按type字段分区，然后在每个分区内进行K-Means空间聚类（指定聚类数量为3），最终返回聚类编号cid、地块标识parcel_id及类型type的完整数据。", "sql": "SELECT ST_ClusterKMeans(geom, 3) over (PARTITION BY type) AS cid, parcel_id, type \nFROM parcels;", "execution_result": [[2, "005", "commercial"], [2, "003", "commercial"], [1, "007", "commercial"], [0, "001", "commercial"], [2, "004", "residential"], [0, "002", "residential"], [1, "006", "residential"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3074, "question_en": "For the geom field in the parcels table, first partition by the type field, then perform K-Means spatial clustering within each partition (specifying 3 clusters), and finally return the complete data including cluster ID cid, parcel identifier parcel_id, and type."}
{"id": 587, "function": "ST_ClusterKMeans", "question": "输出parcels表中每个type分区内使用K均值算法将geom几何对象聚为3类后的聚类编号cid，同时返回对应的parcel_id和type字段值。", "sql": "SELECT ST_ClusterKMeans(geom, 3) over (PARTITION BY type) AS cid, parcel_id, type \nFROM parcels;", "execution_result": [[2, "005", "commercial"], [2, "003", "commercial"], [1, "007", "commercial"], [0, "001", "commercial"], [2, "004", "residential"], [0, "002", "residential"], [1, "006", "residential"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3075, "question_en": "Output the cluster ID `cid` after applying the K-means algorithm to group the `geom` geometries into 3 clusters within each `type` partition of the `parcels` table, along with the corresponding `parcel_id` and `type` field values."}
{"id": 587, "function": "ST_ClusterKMeans", "question": "以parcels表的type字段为分区依据，对每个分区内的geom几何对象执行K均值聚类（k=3），返回包含聚类编号cid、原始parcel_id和type字段的结果表。", "sql": "SELECT ST_ClusterKMeans(geom, 3) over (PARTITION BY type) AS cid, parcel_id, type \nFROM parcels;", "execution_result": [[2, "005", "commercial"], [2, "003", "commercial"], [1, "007", "commercial"], [0, "001", "commercial"], [2, "004", "residential"], [0, "002", "residential"], [1, "006", "residential"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3076, "question_en": "Using the `type` field in the `parcels` table as the partition key, perform K-means clustering (k=3) on the `geom` geometry objects within each partition, and return a result table containing the cluster ID `cid`, original `parcel_id`, and `type` fields."}
{"id": 587, "function": "ST_ClusterKMeans", "question": "输出parcels表的查询结果，其中geom字段按type分组后通过ST_ClusterKMeans函数聚成3类，结果包含聚类ID列cid、地块ID列parcel_id和类型列type。", "sql": "SELECT ST_ClusterKMeans(geom, 3) over (PARTITION BY type) AS cid, parcel_id, type \nFROM parcels;", "execution_result": [[2, "005", "commercial"], [2, "003", "commercial"], [1, "007", "commercial"], [0, "001", "commercial"], [2, "004", "residential"], [0, "002", "residential"], [1, "006", "residential"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3077, "question_en": "Output the query result of the parcels table, where the geom field is clustered into 3 groups using the ST_ClusterKMeans function after grouping by type, with the result including the cluster ID column cid, parcel ID column parcel_id, and type column."}
{"id": 589, "function": "ST_ClusterWithin", "question": "给定一个包含LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))的几何数组，使用1.4的距离阈值对这些几何对象进行空间聚类，并以WKT格式输出每个聚类结果。", "sql": "WITH testdata AS (\n    SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, 'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterWithin(geom, 1.4))) FROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3078, "question_en": "Given an array of geometries including LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)), perform spatial clustering on these geometric objects with a distance threshold of 1.4 and output each clustering result in WKT format."}
{"id": 589, "function": "ST_ClusterWithin", "question": "将LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))这五个几何对象按照1.4单位的距离阈值进行空间聚类，并返回每个聚类的WKT表示。", "sql": "WITH testdata AS (\n    SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, 'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterWithin(geom, 1.4))) FROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3079, "question_en": "Cluster the five geometric objects LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)) using a spatial distance threshold of 1.4 units, and return the WKT representation of each cluster."}
{"id": 589, "function": "ST_ClusterWithin", "question": "使用ST_ClusterWithin函数，以1.4为距离阈值，对包含LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))的几何数组进行空间聚类，并以WKT格式输出每个聚类结果。", "sql": "WITH testdata AS (\n    SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, 'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterWithin(geom, 1.4))) FROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3080, "question_en": "Use the ST_ClusterWithin function with a distance threshold of 1.4 to spatially cluster an array of geometries containing LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)), then output each cluster result in WKT format."}
{"id": 589, "function": "ST_ClusterWithin", "question": "输出将LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))这些几何对象按照1.4的距离阈值进行空间聚类后，每个聚类结果的WKT字符串表示。", "sql": "WITH testdata AS (\n    SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, 'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterWithin(geom, 1.4))) FROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3081, "question_en": "Output the WKT string representation of each clustered result after spatially clustering the geometric objects LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)) using a distance threshold of 1.4."}
{"id": 589, "function": "ST_ClusterWithin", "question": "输出使用ST_ClusterWithin函数对LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))进行空间聚类，聚类距离阈值为1.4，并将结果转换为WKT格式的字符串。", "sql": "WITH testdata AS (\n    SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, 'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterWithin(geom, 1.4))) FROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3082, "question_en": "Output the spatial clustering result using ST_ClusterWithin on LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)) with a distance threshold of 1.4, and convert the result to WKT format strings."}
{"id": 589, "function": "ST_ClusterWithin", "question": "输出将LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))这五个几何对象按照1.4的聚类半径进行分组后，每组几何对象的WKT文本表示。", "sql": "WITH testdata AS (\n    SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, 'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterWithin(geom, 1.4))) FROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3083, "question_en": "Output the WKT text representations of the geometric objects in each group after clustering the five geometries—LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))—with a clustering radius of 1.4."}
{"id": 590, "function": "ST_ClusterWithinWin", "question": "在包含LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))这五个几何对象的测试数据中，使用1.4作为距离阈值，通过窗口函数ST_ClusterWithinWin对它们进行空间聚类，并输出每个对象的ID、WKT格式的几何信息和所属聚类编号。", "sql": "WITH testdata AS ( \n   SELECT id, geom::geometry \n   FROM ( VALUES (1, 'LINESTRING (0 0, 1 1)'), (2, 'LINESTRING (5 5, 4 4)'), (3, 'LINESTRING (6 6, 7 7)'), (4, 'LINESTRING (0 0, -1 -1)'), (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')) AS t(id, geom) ) \nSELECT id, ST_AsText(geom), ST_ClusterWithinWin(geom, 1.4) OVER () AS cluster \nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3084, "question_en": "In test data containing five geometric objects: LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)), use a distance threshold of 1.4 to spatially cluster them with the window function ST_ClusterWithinWin, and output each object's ID, WKT-formatted geometry, and cluster number."}
{"id": 590, "function": "ST_ClusterWithinWin", "question": "给定五个几何对象：ID为1的LINESTRING (0 0, 1 1)、ID为2的LINESTRING (5 5, 4 4)、ID为3的LINESTRING (6 6, 7 7)、ID为4的LINESTRING (0 0, -1 -1)和ID为5的POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))，使用1.4作为聚类距离阈值，通过ST_ClusterWithinWin窗口函数计算它们的空间聚类分组，返回每个对象的ID、几何WKT文本和聚类编号。", "sql": "WITH testdata AS ( \n   SELECT id, geom::geometry \n   FROM ( VALUES (1, 'LINESTRING (0 0, 1 1)'), (2, 'LINESTRING (5 5, 4 4)'), (3, 'LINESTRING (6 6, 7 7)'), (4, 'LINESTRING (0 0, -1 -1)'), (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')) AS t(id, geom) ) \nSELECT id, ST_AsText(geom), ST_ClusterWithinWin(geom, 1.4) OVER () AS cluster \nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3085, "question_en": "Given five geometric objects: LINESTRING (0 0, 1 1) with ID 1, LINESTRING (5 5, 4 4) with ID 2, LINESTRING (6 6, 7 7) with ID 3, LINESTRING (0 0, -1 -1) with ID 4, and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)) with ID 5, use 1.4 as the clustering distance threshold to compute their spatial clustering groups via the ST_ClusterWithinWin window function, returning each object's ID, geometry WKT text, and cluster number."}
{"id": 590, "function": "ST_ClusterWithinWin", "question": "对于由LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))组成的测试数据集，其中距离阈值参数设置为1.4，使用PostGIS的ST_ClusterWithinWin窗口函数执行空间聚类分析，查询结果需包含原始ID、几何对象的WKT表示和聚类分配结果。", "sql": "WITH testdata AS ( \n   SELECT id, geom::geometry \n   FROM ( VALUES (1, 'LINESTRING (0 0, 1 1)'), (2, 'LINESTRING (5 5, 4 4)'), (3, 'LINESTRING (6 6, 7 7)'), (4, 'LINESTRING (0 0, -1 -1)'), (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')) AS t(id, geom) ) \nSELECT id, ST_AsText(geom), ST_ClusterWithinWin(geom, 1.4) OVER () AS cluster \nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3086, "question_en": "For the test dataset consisting of LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)), with the distance threshold parameter set to 1.4, perform spatial clustering analysis using PostGIS's ST_ClusterWithinWin window function, where the query results must include the original ID, the WKT representation of the geometry objects, and the clustering assignment results."}
{"id": 590, "function": "ST_ClusterWithinWin", "question": "输出包含id、几何对象WKT字符串以及使用ST_ClusterWithinWin函数以1.4为距离阈值进行窗口聚类后的cluster编号的结果表，其中几何对象包括LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))。", "sql": "WITH testdata AS ( \n   SELECT id, geom::geometry \n   FROM ( VALUES (1, 'LINESTRING (0 0, 1 1)'), (2, 'LINESTRING (5 5, 4 4)'), (3, 'LINESTRING (6 6, 7 7)'), (4, 'LINESTRING (0 0, -1 -1)'), (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')) AS t(id, geom) ) \nSELECT id, ST_AsText(geom), ST_ClusterWithinWin(geom, 1.4) OVER () AS cluster \nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3087, "question_en": "Output a result table containing id, geometry WKT strings, and cluster numbers from window clustering using ST_ClusterWithinWin with a distance threshold of 1.4, where the geometries include LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1), and POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))."}
{"id": 590, "function": "ST_ClusterWithinWin", "question": "输出每条记录的id值、几何对象的WKT文本表示以及基于1.4单位距离阈值通过ST_ClusterWithinWin窗口函数计算得到的聚类编号，其中几何对象包含5个：ID为1的LINESTRING (0 0, 1 1)、ID为2的LINESTRING (5 5, 4 4)、ID为3的LINESTRING (6 6, 7 7)、ID为4的LINESTRING (0 0, -1 -1)和ID为5的POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))。", "sql": "WITH testdata AS ( \n   SELECT id, geom::geometry \n   FROM ( VALUES (1, 'LINESTRING (0 0, 1 1)'), (2, 'LINESTRING (5 5, 4 4)'), (3, 'LINESTRING (6 6, 7 7)'), (4, 'LINESTRING (0 0, -1 -1)'), (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')) AS t(id, geom) ) \nSELECT id, ST_AsText(geom), ST_ClusterWithinWin(geom, 1.4) OVER () AS cluster \nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3088, "question_en": "Output the ID value, WKT representation of the geometry, and the cluster ID computed by the ST_ClusterWithinWin window function with a 1.4-unit distance threshold for each record, where the geometries include five objects: ID 1 LINESTRING (0 0, 1 1), ID 2 LINESTRING (5 5, 4 4), ID 3 LINESTRING (6 6, 7 7), ID 4 LINESTRING (0 0, -1 -1), and ID 5 POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))."}
{"id": 590, "function": "ST_ClusterWithinWin", "question": "输出三列数据：原始id编号、几何对象的WKT格式文本、以及以1.4为聚类距离阈值通过ST_ClusterWithinWin窗口函数生成的聚类编号，处理的几何对象集合包含LINESTRING (0 0, 1 1)、LINESTRING (5 5, 4 4)、LINESTRING (6 6, 7 7)、LINESTRING (0 0, -1 -1)四条线段和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))一个多边形。", "sql": "WITH testdata AS ( \n   SELECT id, geom::geometry \n   FROM ( VALUES (1, 'LINESTRING (0 0, 1 1)'), (2, 'LINESTRING (5 5, 4 4)'), (3, 'LINESTRING (6 6, 7 7)'), (4, 'LINESTRING (0 0, -1 -1)'), (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')) AS t(id, geom) ) \nSELECT id, ST_AsText(geom), ST_ClusterWithinWin(geom, 1.4) OVER () AS cluster \nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3089, "question_en": "Output three columns of data: original ID, WKT format text of the geometry objects, and cluster IDs generated by the ST_ClusterWithinWin window function with a clustering distance threshold of 1.4, processing a collection of geometry objects including four linestrings (LINESTRING (0 0, 1 1), LINESTRING (5 5, 4 4), LINESTRING (6 6, 7 7), LINESTRING (0 0, -1 -1)) and one polygon (POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)))."}
{"id": 593, "function": "ST_Expand", "question": "将SRID为2163的LINESTRING(2312980 110676,2312923 110701,2312892 110714)这条折线的外接矩形在X和Y轴方向上向外扩展10个单位距离，并将结果转换为box2d类型。", "sql": "SELECT CAST(ST_Expand(ST_GeomFromText('LINESTRING(2312980 110676,2312923 110701,2312892 110714)', 2163),10) AS box2d);", "execution_result": [["BOX(2312882 110666,2312990 110724)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3090, "question_en": "Expand the bounding box of the LINESTRING(2312980 110676,2312923 110701,2312892 110714) with SRID 2163 by 10 units in both X and Y directions, then convert the result to box2d type."}
{"id": 593, "function": "ST_Expand", "question": "在SRID 2163坐标系下，对由三个点(2312980 110676)、(2312923 110701)、(2312892 110714)构成的折线的最小外接矩形在X和Y轴方向上进行10个单位距离的扩展，最终输出为box2d类型的边界框。", "sql": "SELECT CAST(ST_Expand(ST_GeomFromText('LINESTRING(2312980 110676,2312923 110701,2312892 110714)', 2163),10) AS box2d);", "execution_result": [["BOX(2312882 110666,2312990 110724)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3091, "question_en": "In SRID 2163, expand the minimum bounding rectangle of the polyline formed by the three points (2312980 110676), (2312923 110701), and (2312892 110714) by 10 units in both X and Y directions, then output the final bounding box as box2d type."}
{"id": 593, "function": "ST_Expand", "question": "使用ST_Expand函数将坐标系为2163的折线LINESTRING(2312980 110676,2312923 110701,2312892 110714)的边界在X和Y轴方向上向外扩展10个单位，并将结果转换为box2d格式输出。", "sql": "SELECT CAST(ST_Expand(ST_GeomFromText('LINESTRING(2312980 110676,2312923 110701,2312892 110714)', 2163),10) AS box2d);", "execution_result": [["BOX(2312882 110666,2312990 110724)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3092, "question_en": "Use the ST_Expand function to extend the boundary of the LINESTRING(2312980 110676,2312923 110701,2312892 110714) with SRID 2163 by 10 units in both X and Y directions, and output the result in box2d format."}
{"id": 593, "function": "ST_Expand", "question": "输出SRID为2163的LINESTRING(2312980 110676,2312923 110701,2312892 110714)几何对象的包围框向外扩展10个单位后，转换为box2d类型的边界框结果。", "sql": "SELECT CAST(ST_Expand(ST_GeomFromText('LINESTRING(2312980 110676,2312923 110701,2312892 110714)', 2163),10) AS box2d);", "execution_result": [["BOX(2312882 110666,2312990 110724)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3093, "question_en": "Output the result of converting the bounding box, expanded by 10 units outward, of the LINESTRING(2312980 110676,2312923 110701,2312892 110714) geometry with SRID 2163 into a box2d type boundary box."}
{"id": 593, "function": "ST_Expand", "question": "将SRID为2163的LINESTRING(2312980 110676,2312923 110701,2312892 110714)线串几何体的最小包络矩形扩展10个单位距离后，输出其box2d类型的矩形边界表示。", "sql": "SELECT CAST(ST_Expand(ST_GeomFromText('LINESTRING(2312980 110676,2312923 110701,2312892 110714)', 2163),10) AS box2d);", "execution_result": [["BOX(2312882 110666,2312990 110724)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3094, "question_en": "Expand the minimum bounding rectangle of the LINESTRING(2312980 110676,2312923 110701,2312892 110714) geometry with SRID 2163 by 10 units, then output its box2d-type rectangular boundary representation."}
{"id": 593, "function": "ST_Expand", "question": "输出LINESTRING(2312980 110676,2312923 110701,2312892 110714)（坐标系SRID=2163）的边界框在X和Y轴两个方向扩展10个单位后生成的box2d格式的矩形范围。", "sql": "SELECT CAST(ST_Expand(ST_GeomFromText('LINESTRING(2312980 110676,2312923 110701,2312892 110714)', 2163),10) AS box2d);", "execution_result": [["BOX(2312882 110666,2312990 110724)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3095, "question_en": "Output the box2d-format rectangular extent of the bounding box for LINESTRING(2312980 110676,2312923 110701,2312892 110714) (coordinate system SRID=2163) after expanding by 10 units in both X and Y directions."}
{"id": 594, "function": "ST_Expand", "question": "将三维边界框BOX3D(778783 2951741 1,794875 2970042.61545891 10)的X、Y、Z三个方向均向外扩展10个单位，生成新的边界框。", "sql": "SELECT ST_Expand(CAST('BOX3D(778783 2951741 1,794875 2970042.61545891 10)' As box3d),10);", "execution_result": [["BOX3D(778773 2951731 -9,794885 2970052.61545891 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3096, "question_en": "Expand the 3D bounding box BOX3D(778783 2951741 1,794875 2970042.61545891 10) by 10 units in all X, Y, and Z directions to generate a new bounding box."}
{"id": 594, "function": "ST_Expand", "question": "以BOX3D(778783 2951741 1,794875 2970042.61545891 10)为基准，计算其所有坐标轴（X/Y/Z）向外扩张10个单位的三维边界框。", "sql": "SELECT ST_Expand(CAST('BOX3D(778783 2951741 1,794875 2970042.61545891 10)' As box3d),10);", "execution_result": [["BOX3D(778773 2951731 -9,794885 2970052.61545891 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3097, "question_en": "Using BOX3D(778783 2951741 1,794875 2970042.61545891 10) as the reference, calculate a 3D bounding box expanded outward by 10 units along all axes (X/Y/Z)."}
{"id": 594, "function": "ST_Expand", "question": "对三维空间范围BOX3D(778783 2951741 1,794875 2970042.61545891 10)执行扩展操作，要求X/Y/Z轴各个方向向外扩展10个单位距离。", "sql": "SELECT ST_Expand(CAST('BOX3D(778783 2951741 1,794875 2970042.61545891 10)' As box3d),10);", "execution_result": [["BOX3D(778773 2951731 -9,794885 2970052.61545891 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3098, "question_en": "Perform an expansion operation on the 3D spatial extent BOX3D(778783 2951741 1,794875 2970042.61545891 10), extending outward by 10 units in each direction along the X/Y/Z axes."}
{"id": 594, "function": "ST_Expand", "question": "输出将三维边界框BOX3D(778783 2951741 1,794875 2970042.61545891 10)在所有方向扩展10个单位后的几何对象。", "sql": "SELECT ST_Expand(CAST('BOX3D(778783 2951741 1,794875 2970042.61545891 10)' As box3d),10);", "execution_result": [["BOX3D(778773 2951731 -9,794885 2970052.61545891 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3099, "question_en": "Output the geometric object obtained by expanding the 3D bounding box BOX3D(778783 2951741 1,794875 2970042.61545891 10) by 10 units in all directions."}
{"id": 594, "function": "ST_Expand", "question": "以WKT格式返回三维边界框BOX3D(778783 2951741 1,794875 2970042.61545891 10)在各个方向向外10个单位扩展后的结果。", "sql": "SELECT ST_Expand(CAST('BOX3D(778783 2951741 1,794875 2970042.61545891 10)' As box3d),10);", "execution_result": [["BOX3D(778773 2951731 -9,794885 2970052.61545891 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3100, "question_en": "Return the 3D bounding box BOX3D(778783 2951741 1,794875 2970042.61545891 10) in WKT format after expanding it by 10 units in all directions."}
{"id": 594, "function": "ST_Expand", "question": "计算并输出三维边界框BOX3D(778783 2951741 1,794875 2970042.61545891 10)在X/Y/Z三个维度上各扩展10个单位后的新边界框。", "sql": "SELECT ST_Expand(CAST('BOX3D(778783 2951741 1,794875 2970042.61545891 10)' As box3d),10);", "execution_result": [["BOX3D(778773 2951731 -9,794885 2970052.61545891 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3101, "question_en": "Calculate and output the new bounding box after expanding the 3D bounding box BOX3D(778783 2951741 1,794875 2970042.61545891 10) by 10 units in each of the X, Y, and Z dimensions."}
{"id": 595, "function": "ST_Expand", "question": "以SRID=2163坐标系中的点POINT(2312980 110676)为中心，创建一个向外扩展10个单位距离的矩形边界框，并以EWKT格式输出结果。", "sql": "SELECT ST_AsEWKT(ST_Expand(ST_GeomFromEWKT('SRID=2163;POINT(2312980 110676)'),10));", "execution_result": [["SRID=2163;POLYGON((2312970 110666,2312970 110686,2312990 110686,2312990 110666,2312970 110666))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3102, "question_en": "Create a rectangular bounding box extending 10 units outward from the point POINT(2312980 110676) in the SRID=2163 coordinate system, and output the result in EWKT format."}
{"id": 595, "function": "ST_Expand", "question": "在坐标系SRID=2163下，对点POINT(2312980 110676)执行空间扩展操作，扩展半径为10个单位，最终返回扩展后几何体的EWKT表示。", "sql": "SELECT ST_AsEWKT(ST_Expand(ST_GeomFromEWKT('SRID=2163;POINT(2312980 110676)'),10));", "execution_result": [["SRID=2163;POLYGON((2312970 110666,2312970 110686,2312990 110686,2312990 110666,2312970 110666))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3103, "question_en": "In the coordinate system SRID=2163, perform a spatial buffer operation on the point POINT(2312980 110676) with a radius of 10 units, and return the EWKT representation of the resulting geometry."}
{"id": 595, "function": "ST_Expand", "question": "将坐标系为SRID=2163的二维点POINT(2312980 110676)的边界向四周各延伸10个单位长度，生成新的几何对象并输出其EWKT格式文本。", "sql": "SELECT ST_AsEWKT(ST_Expand(ST_GeomFromEWKT('SRID=2163;POINT(2312980 110676)'),10));", "execution_result": [["SRID=2163;POLYGON((2312970 110666,2312970 110686,2312990 110686,2312990 110666,2312970 110666))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3104, "question_en": "Extend the boundary of the 2D point POINT(2312980 110676) with SRID=2163 by 10 units in all directions, generate a new geometry object, and output its EWKT format text."}
{"id": 595, "function": "ST_Expand", "question": "输出将SRID为2163的二维点POINT(2312980 110676)向四周扩展10个单位后生成的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Expand(ST_GeomFromEWKT('SRID=2163;POINT(2312980 110676)'),10));", "execution_result": [["SRID=2163;POLYGON((2312970 110666,2312970 110686,2312990 110686,2312990 110666,2312970 110666))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3105, "question_en": "Output the EWKT format string generated by expanding the 2D point POINT(2312980 110676) with SRID 2163 by 10 units in all directions."}
{"id": 595, "function": "ST_Expand", "question": "以EWKT格式返回对SRID=2163的坐标点(2312980,110676)进行10单位边界扩展后的几何对象描述。", "sql": "SELECT ST_AsEWKT(ST_Expand(ST_GeomFromEWKT('SRID=2163;POINT(2312980 110676)'),10));", "execution_result": [["SRID=2163;POLYGON((2312970 110666,2312970 110686,2312990 110686,2312990 110666,2312970 110666))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3106, "question_en": "Return the geometric object description in EWKT format after expanding the boundary of the coordinate point (2312980,110676) with SRID=2163 by 10 units."}
{"id": 595, "function": "ST_Expand", "question": "将空间参考系为2163的二维点(2312980 110676)的边界框在各个方向各扩大10个单位距离，输出扩展后的几何体的EWKT表示。", "sql": "SELECT ST_AsEWKT(ST_Expand(ST_GeomFromEWKT('SRID=2163;POINT(2312980 110676)'),10));", "execution_result": [["SRID=2163;POLYGON((2312970 110666,2312970 110686,2312990 110686,2312990 110666,2312970 110666))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3107, "question_en": "Expand the bounding box of the 2D point (2312980 110676) with spatial reference 2163 by 10 units in all directions and output the EWKT representation of the resulting geometry."}
{"id": 599, "function": "ST_3DExtent", "question": "计算由x值1到3、y值1到2、z值0到2的所有组合生成的三维点（共18个点）的三维空间范围，并以b3extent列名输出结果。", "sql": "SELECT ST_3DExtent(foo.geom) AS b3extent\nFROM (\n  SELECT ST_MakePoint(x, y, z) AS geom\n  FROM generate_series(1,3) AS x\n  CROSS JOIN generate_series(1,2) AS y\n  CROSS JOIN generate_series(0,2) AS z\n) AS foo;", "execution_result": [["BOX3D(1 1 0,3 2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3108, "question_en": "Calculate the 3D spatial extent of all combinations of x values from 1 to 3, y values from 1 to 2, and z values from 0 to 2 (totaling 18 points), and output the result with the column name b3extent."}
{"id": 599, "function": "ST_3DExtent", "question": "对x轴1-3、y轴1-2、z轴0-2的笛卡尔积生成的18个三维点进行三维边界框聚合计算。", "sql": "SELECT ST_3DExtent(foo.geom) AS b3extent\nFROM (\n  SELECT ST_MakePoint(x, y, z) AS geom\n  FROM generate_series(1,3) AS x\n  CROSS JOIN generate_series(1,2) AS y\n  CROSS JOIN generate_series(0,2) AS z\n) AS foo;", "execution_result": [["BOX3D(1 1 0,3 2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3109, "question_en": "Perform a 3D bounding box aggregation calculation on the 18 three-dimensional points generated by the Cartesian product of x-axis 1-3, y-axis 1-2, and z-axis 0-2."}
{"id": 599, "function": "ST_3DExtent", "question": "使用ST_3DExtent函数求取由x∈[1,3]、y∈[1,2]、z∈[0,2]区间组合形成的所有ST_MakePoint三维点对象的最小外包立方体。", "sql": "SELECT ST_3DExtent(foo.geom) AS b3extent\nFROM (\n  SELECT ST_MakePoint(x, y, z) AS geom\n  FROM generate_series(1,3) AS x\n  CROSS JOIN generate_series(1,2) AS y\n  CROSS JOIN generate_series(0,2) AS z\n) AS foo;", "execution_result": [["BOX3D(1 1 0,3 2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3110, "question_en": "Use the ST_3DExtent function to find the minimum bounding cube for all ST_MakePoint 3D point objects formed by the intervals x∈[1,3], y∈[1,2], z∈[0,2]."}
{"id": 599, "function": "ST_3DExtent", "question": "输出由x值1到3、y值1到2、z值0到2的所有组合生成的三维点集合的三维边界框，返回值为BOX3D类型的WKT字符串。", "sql": "SELECT ST_3DExtent(foo.geom) AS b3extent\nFROM (\n  SELECT ST_MakePoint(x, y, z) AS geom\n  FROM generate_series(1,3) AS x\n  CROSS JOIN generate_series(1,2) AS y\n  CROSS JOIN generate_series(0,2) AS z\n) AS foo;", "execution_result": [["BOX3D(1 1 0,3 2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3111, "question_en": "Output the 3D bounding box of all 3D point sets generated by combinations of x values 1 to 3, y values 1 to 2, and z values 0 to 2, returning a BOX3D type WKT string."}
{"id": 599, "function": "ST_3DExtent", "question": "计算并返回由18个三维点（x范围1-3，y范围1-2，z范围0-2）构成的三维几何集合的最小外包立方体，输出格式为PostGIS的BOX3D类型。", "sql": "SELECT ST_3DExtent(foo.geom) AS b3extent\nFROM (\n  SELECT ST_MakePoint(x, y, z) AS geom\n  FROM generate_series(1,3) AS x\n  CROSS JOIN generate_series(1,2) AS y\n  CROSS JOIN generate_series(0,2) AS z\n) AS foo;", "execution_result": [["BOX3D(1 1 0,3 2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3112, "question_en": "Compute and return the minimum bounding cube for a 3D geometry collection consisting of 18 points (x range 1-3, y range 1-2, z range 0-2), output in PostGIS BOX3D format."}
{"id": 599, "function": "ST_3DExtent", "question": "将笛卡尔积生成的三维点集（x=1,2,3；y=1,2；z=0,1,2）作为输入，返回这些点三维空间分布的范围框，结果以BOX3D格式呈现。", "sql": "SELECT ST_3DExtent(foo.geom) AS b3extent\nFROM (\n  SELECT ST_MakePoint(x, y, z) AS geom\n  FROM generate_series(1,3) AS x\n  CROSS JOIN generate_series(1,2) AS y\n  CROSS JOIN generate_series(0,2) AS z\n) AS foo;", "execution_result": [["BOX3D(1 1 0,3 2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3113, "question_en": "Using the 3D point set generated by the Cartesian product (x=1,2,3; y=1,2; z=0,1,2) as input, return the bounding box of their spatial distribution in 3D space, with the result presented in BOX3D format."}
{"id": 602, "function": "ST_3DMakeBox", "question": "使用三维点ST_MakePoint(-989502.1875, 528439.5625, 10)和ST_MakePoint(-987121.375, 529933.1875, 10)作为对角点，创建一个三维盒子，并命名为abb3d。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(-989502.1875, 528439.5625, 10), ST_MakePoint(-987121.375 ,529933.1875, 10)) AS abb3d；", "execution_result": [["BOX3D(-989502.1875 528439.5625 10,-987121.375 529933.1875 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3114, "question_en": "Create a 3D box named abb3d using the diagonal points ST_MakePoint(-989502.1875, 528439.5625, 10) and ST_MakePoint(-987121.375, 529933.1875, 10)."}
{"id": 602, "function": "ST_3DMakeBox", "question": "基于三维坐标点(-989502.1875, 528439.5625, 10)和(-987121.375, 529933.1875, 10)，构造一个三维盒子对象abb3d。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(-989502.1875, 528439.5625, 10), ST_MakePoint(-987121.375 ,529933.1875, 10)) AS abb3d；", "execution_result": [["BOX3D(-989502.1875 528439.5625 10,-987121.375 529933.1875 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3115, "question_en": "Construct a 3D box object abb3d based on the 3D coordinate points (-989502.1875, 528439.5625, 10) and (-987121.375, 529933.1875, 10)."}
{"id": 602, "function": "ST_3DMakeBox", "question": "通过ST_3DMakeBox函数，以Z坐标为10的三维点(-989502.1875, 528439.5625, 10)和(-987121.375, 529933.1875, 10)为对角顶点，生成名为abb3d的三维盒子几何体。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(-989502.1875, 528439.5625, 10), ST_MakePoint(-987121.375 ,529933.1875, 10)) AS abb3d；", "execution_result": [["BOX3D(-989502.1875 528439.5625 10,-987121.375 529933.1875 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3116, "question_en": "Using the ST_3DMakeBox function, create a 3D box geometry named abb3d with diagonal vertices at (-989502.1875, 528439.5625, 10) and (-987121.375, 529933.1875, 10), both having a Z-coordinate of 10."}
{"id": 602, "function": "ST_3DMakeBox", "question": "输出以三维点(-989502.1875, 528439.5625, 10)和三维点(-987121.375, 529933.1875, 10)为对角顶点构建的三维边界框的WKT字符串表示。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(-989502.1875, 528439.5625, 10), ST_MakePoint(-987121.375 ,529933.1875, 10)) AS abb3d；", "execution_result": [["BOX3D(-989502.1875 528439.5625 10,-987121.375 529933.1875 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3117, "question_en": "Output the WKT string representation of the 3D bounding box constructed with the diagonal vertices of 3D point (-989502.1875, 528439.5625, 10) and 3D point (-987121.375, 529933.1875, 10)."}
{"id": 602, "function": "ST_3DMakeBox", "question": "将三维点(-989502.1875, 528439.5625, 10)与三维点(-987121.375, 529933.1875, 10)作为对角坐标，生成的三维边界框的输出结果是什么？", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(-989502.1875, 528439.5625, 10), ST_MakePoint(-987121.375 ,529933.1875, 10)) AS abb3d；", "execution_result": [["BOX3D(-989502.1875 528439.5625 10,-987121.375 529933.1875 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3118, "question_en": "What is the output of the 3D bounding box generated with the diagonal coordinates of point (-989502.1875, 528439.5625, 10) and point (-987121.375, 529933.1875, 10)?"}
{"id": 602, "function": "ST_3DMakeBox", "question": "基于三维点(-989502.1875, 528439.5625, 10)和三维点(-987121.375, 529933.1875, 10)创建三维边界框。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(-989502.1875, 528439.5625, 10), ST_MakePoint(-987121.375 ,529933.1875, 10)) AS abb3d；", "execution_result": [["BOX3D(-989502.1875 528439.5625 10,-987121.375 529933.1875 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3119, "question_en": "Create a 3D bounding box based on the 3D points (-989502.1875, 528439.5625, 10) and (-987121.375, 529933.1875, 10)."}
{"id": 603, "function": "ST_XMax", "question": "计算由三个三维点CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)构成的圆弧几何对象的X坐标最大值。", "sql": "SELECT ST_XMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220288.24878054656]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3120, "question_en": "Calculate the maximum X-coordinate of the circular arc geometry object defined by the three 3D points CIRCULARSTRING(220268 150415 1, 220227 150505 2, 220227 150406 3)."}
{"id": 603, "function": "ST_XMax", "question": "对于由点(220268 150415 1)、(220227 150505 2)和(220227 150406 3)定义的CIRCULARSTRING圆弧几何体，返回其边界框的最大X坐标值。", "sql": "SELECT ST_XMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220288.24878054656]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3121, "question_en": "For the CIRCULARSTRING arc geometry defined by points (220268 150415 1), (220227 150505 2), and (220227 150406 3), return the maximum X-coordinate value of its bounding box."}
{"id": 603, "function": "ST_XMax", "question": "在PostGIS中，如何获取三维圆弧CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)的空间范围最大X坐标？", "sql": "SELECT ST_XMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220288.24878054656]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3122, "question_en": "In PostGIS, how to get the maximum X coordinate of the spatial extent for the 3D circular arc CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)?"}
{"id": 603, "function": "ST_XMax", "question": "输出由CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)构建的三维圆弧几何对象的X坐标最大值，结果以浮点数形式返回。", "sql": "SELECT ST_XMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220288.24878054656]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3123, "question_en": "Output the maximum X-coordinate of the 3D circular arc geometry constructed by CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3), returned as a floating-point number."}
{"id": 603, "function": "ST_XMax", "question": "计算并返回三维圆弧CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)在坐标系中的最大X边界值，输出为双精度数值。", "sql": "SELECT ST_XMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220288.24878054656]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3124, "question_en": "Calculate and return the maximum X boundary value of the 3D circular arc CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3) in the coordinate system, output as a double precision value."}
{"id": 603, "function": "ST_XMax", "question": "对于包含三个三维控制点(220268 150415 1)、(220227 150505 2)、(220227 150406 3)的圆弧几何体，输出其外包矩形在X轴方向的最大坐标值。", "sql": "SELECT ST_XMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220288.24878054656]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3125, "question_en": "For an arc geometry containing three 3D control points (220268 150415 1), (220227 150505 2), (220227 150406 3), output the maximum coordinate value along the X-axis of its bounding rectangle."}
{"id": 604, "function": "ST_XMax", "question": "计算三维边界框BOX3D(1 2 3, 4 5 6)在X轴方向上的最大值，其中左下角坐标为(1,2,3)，右上角坐标为(4,5,6)。", "sql": "SELECT ST_XMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3126, "question_en": "Calculate the maximum value along the X-axis for the 3D bounding box BOX3D(1 2 3, 4 5 6), where the lower-left corner is (1,2,3) and the upper-right corner is (4,5,6)."}
{"id": 604, "function": "ST_XMax", "question": "对于三维边界框BOX3D(1 2 3, 4 5 6)，提取其X坐标的最大值，该边界框由对角点(1,2,3)和(4,5,6)定义。", "sql": "SELECT ST_XMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3127, "question_en": "For the 3D bounding box BOX3D(1 2 3, 4 5 6), extract the maximum X-coordinate, where the box is defined by the diagonal points (1,2,3) and (4,5,6)."}
{"id": 604, "function": "ST_XMax", "question": "查询三维空间范围BOX3D(1 2 3, 4 5 6)的X轴最大坐标值，输入参数为左下角(1,2,3)和右上角(4,5,6)构成的空间范围。", "sql": "SELECT ST_XMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3128, "question_en": "Query the maximum X-coordinate value of the 3D spatial extent BOX3D(1 2 3, 4 5 6), where the input parameters are the spatial extent formed by the lower-left corner (1,2,3) and the upper-right corner (4,5,6)."}
{"id": 604, "function": "ST_XMax", "question": "输出三维边界框BOX3D(1 2 3, 4 5 6)在X轴方向上的最大值，结果以浮点数形式返回。", "sql": "SELECT ST_XMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3129, "question_en": "Output the maximum value of the 3D bounding box BOX3D(1 2 3, 4 5 6) along the X-axis, returning the result as a floating-point number."}
{"id": 604, "function": "ST_XMax", "question": "计算并返回三维边界框BOX3D(1 2 3, 4 5 6)的X坐标最大边界值，输出为双精度数值类型。", "sql": "SELECT ST_XMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3130, "question_en": "Calculate and return the maximum X-coordinate boundary value of the 3D bounding box BOX3D(1 2 3, 4 5 6), output as a double precision numeric type."}
{"id": 604, "function": "ST_XMax", "question": "对三维边界框BOX3D(1 2 3, 4 5 6)执行ST_XMax函数，直接输出其X轴最大坐标值，结果不包含单位或附加格式。", "sql": "SELECT ST_XMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3131, "question_en": "Execute the ST_XMax function on the 3D bounding box BOX3D(1 2 3, 4 5 6) and directly output its maximum X-coordinate value without units or additional formatting."}
{"id": 605, "function": "ST_XMax", "question": "计算由LINESTRING(1 3 4, 5 6 7)这条三维线段构成的几何对象的X坐标最大值，其中线段由两个三维点(1,3,4)和(5,6,7)组成。", "sql": "SELECT ST_XMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3132, "question_en": "Calculate the maximum X-coordinate of the 3D linestring geometry LINESTRING(1 3 4, 5 6 7), which consists of two 3D points (1,3,4) and (5,6,7)."}
{"id": 605, "function": "ST_XMax", "question": "对于由点(1 3 4)和点(5 6 7)构成的三维线段LINESTRING(1 3 4, 5 6 7)，求其边界框在X轴方向上的最大值。", "sql": "SELECT ST_XMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3133, "question_en": "For the 3D line segment LINESTRING(1 3 4, 5 6 7) formed by points (1 3 4) and (5 6 7), find the maximum value of its bounding box along the X-axis."}
{"id": 605, "function": "ST_XMax", "question": "如何获取三维线段LINESTRING(1 3 4, 5 6 7)的X坐标最大边界值？该线段由三维坐标点(1,3,4)和(5,6,7)定义。", "sql": "SELECT ST_XMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3134, "question_en": "How to get the maximum X-coordinate boundary value of the 3D linestring LINESTRING(1 3 4, 5 6 7)? This linestring is defined by the 3D coordinate points (1,3,4) and (5,6,7)."}
{"id": 605, "function": "ST_XMax", "question": "输出三维折线LINESTRING(1 3 4, 5 6 7)在X轴方向上的最大坐标值。", "sql": "SELECT ST_XMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3135, "question_en": "Output the maximum coordinate value along the X-axis for the 3D linestring LINESTRING(1 3 4, 5 6 7)."}
{"id": 605, "function": "ST_XMax", "question": "计算由点(1 3 4)和点(5 6 7)构成的三维线段在X维度的最大边界值，并返回数值结果。", "sql": "SELECT ST_XMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3136, "question_en": "Calculate the maximum boundary value in the X-dimension for the 3D line segment formed by points (1 3 4) and (5 6 7), and return the numerical result."}
{"id": 605, "function": "ST_XMax", "question": "获取三维折线对象LINESTRING(1 3 4, 5 6 7)的X坐标最大边界值，要求返回浮点型数值。", "sql": "SELECT ST_XMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3137, "question_en": "Retrieve the maximum X-coordinate boundary value of the 3D linestring object LINESTRING(1 3 4, 5 6 7), returning a floating-point number."}
{"id": 606, "function": "ST_XMax", "question": "计算BOX(-3 2, 3 4)这个二维边界框的最大X坐标值。", "sql": "SELECT ST_XMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3138, "question_en": "Calculate the maximum X-coordinate value of the 2D bounding box BOX(-3 2, 3 4)."}
{"id": 606, "function": "ST_XMax", "question": "将字符串'BOX(-3 2, 3 4)'转换为box2d类型后，获取该边界框在X轴方向上的最大值。", "sql": "SELECT ST_XMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3139, "question_en": "Convert the string 'BOX(-3 2, 3 4)' to box2d type, then retrieve the maximum value of the bounding box along the X-axis."}
{"id": 606, "function": "ST_XMax", "question": "对于由左下角坐标(-3,2)和右上角坐标(3,4)定义的二维矩形框，查询其X轴的最大坐标值。", "sql": "SELECT ST_XMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3140, "question_en": "For the 2D rectangular box defined by the bottom-left coordinate (-3,2) and top-right coordinate (3,4), query its maximum X-axis coordinate value."}
{"id": 606, "function": "ST_XMax", "question": "输出BOX(-3 2, 3 4)转换为box2d类型后，其X轴方向的最大坐标值。", "sql": "SELECT ST_XMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3141, "question_en": "Output the maximum X-axis coordinate value after converting BOX(-3 2, 3 4) to the box2d type."}
{"id": 606, "function": "ST_XMax", "question": "计算BOX(-3 2, 3 4)的box2d表示中X轴的最大边界值，并以浮点数形式返回结果。", "sql": "SELECT ST_XMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3142, "question_en": "Calculate the maximum X-axis boundary value in the box2d representation of BOX(-3 2, 3 4) and return the result as a floating-point number."}
{"id": 606, "function": "ST_XMax", "question": "将BOX(-3 2, 3 4)显式转换为box2d类型后，输出其X轴的最大范围值。", "sql": "SELECT ST_XMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3143, "question_en": "After explicitly converting BOX(-3 2, 3 4) to the box2d type, output its maximum range value on the X-axis."}
{"id": 607, "function": "ST_XMin", "question": "计算由三个三维点CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)构成的圆弧几何对象的最小X坐标值。", "sql": "SELECT ST_XMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220186.99512189245]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3144, "question_en": "Calculate the minimum X-coordinate value of the circular arc geometry object defined by the three 3D points CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 607, "function": "ST_XMin", "question": "对于通过EWKT格式定义的圆弧CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)，获取其外包矩形在X轴方向的最小边界值。", "sql": "SELECT ST_XMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220186.99512189245]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3145, "question_en": "For the circular arc defined in EWKT format as CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3), obtain the minimum bounding value on the X-axis."}
{"id": 607, "function": "ST_XMin", "question": "使用ST_XMin函数提取三维圆弧CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)的空间范围中X坐标的最小值。", "sql": "SELECT ST_XMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220186.99512189245]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3146, "question_en": "Use the ST_XMin function to extract the minimum X-coordinate from the spatial extent of the 3D circular string CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 607, "function": "ST_XMin", "question": "输出由CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)构建的三维圆弧几何对象的最小X坐标值。", "sql": "SELECT ST_XMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220186.99512189245]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3147, "question_en": "Output the minimum X-coordinate value of the 3D circular arc geometry object constructed by CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 607, "function": "ST_XMin", "question": "计算并返回三维圆弧CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)的边界框在X轴方向上的最小值。", "sql": "SELECT ST_XMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220186.99512189245]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3148, "question_en": "Calculate and return the minimum value of the bounding box on the X-axis for the 3D circular arc CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 607, "function": "ST_XMin", "question": "获取包含三个三维控制点(220268 150415 1)、(220227 150505 2)、(220227 150406 3)的圆弧几何体的最小X坐标数值。", "sql": "SELECT ST_XMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220186.99512189245]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3149, "question_en": "Retrieve the minimum X-coordinate value of the arc geometry containing the three 3D control points (220268 150415 1), (220227 150505 2), (220227 150406 3)."}
{"id": 608, "function": "ST_XMin", "question": "计算三维边界框BOX3D(1 2 3, 4 5 6)的最小X坐标值，其中边界框的两个对角点坐标分别为(1,2,3)和(4,5,6)。", "sql": "SELECT ST_XMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3150, "question_en": "Calculate the minimum X-coordinate value of the 3D bounding box BOX3D(1 2 3, 4 5 6), where the two diagonal points of the bounding box are (1,2,3) and (4,5,6)."}
{"id": 608, "function": "ST_XMin", "question": "提取三维几何体BOX3D(1 2 3, 4 5 6)的X轴最小值，该几何体的左下角坐标为(1,2,3)，右上角坐标为(4,5,6)。", "sql": "SELECT ST_XMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3151, "question_en": "Extract the minimum X-axis value from the 3D geometry BOX3D(1 2 3, 4 5 6), where the lower-left corner is (1,2,3) and the upper-right corner is (4,5,6)."}
{"id": 608, "function": "ST_XMin", "question": "查询BOX3D(1 2 3, 4 5 6)的X方向最小边界值，其中1 2 3表示左下角XYZ坐标，4 5 6表示右上角XYZ坐标。", "sql": "SELECT ST_XMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3152, "question_en": "Query the minimum X boundary value of BOX3D(1 2 3, 4 5 6), where 1 2 3 represents the lower-left XYZ coordinates and 4 5 6 represents the upper-right XYZ coordinates."}
{"id": 608, "function": "ST_XMin", "question": "输出三维边界框BOX3D(1 2 3, 4 5 6)的最小X坐标值。", "sql": "SELECT ST_XMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3153, "question_en": "Output the minimum X coordinate value of the 3D bounding box BOX3D(1 2 3, 4 5 6)."}
{"id": 608, "function": "ST_XMin", "question": "计算并返回三维边界框BOX3D(1 2 3, 4 5 6)在X轴方向上的最小值。", "sql": "SELECT ST_XMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3154, "question_en": "Calculate and return the minimum value of the 3D bounding box BOX3D(1 2 3, 4 5 6) along the X-axis."}
{"id": 608, "function": "ST_XMin", "question": "获取三维边界框BOX3D(1 2 3, 4 5 6)的X轴最小边界值，并以浮点数形式输出。", "sql": "SELECT ST_XMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3155, "question_en": "Retrieve the minimum X-axis boundary value of the 3D bounding box BOX3D(1 2 3, 4 5 6) and output it as a floating-point number."}
{"id": 609, "function": "ST_XMin", "question": "计算由三维坐标点(1 3 4)和(5 6 7)构成的LINESTRING几何对象的最小X坐标值。", "sql": "SELECT ST_XMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3156, "question_en": "Calculate the minimum X-coordinate value of the LINESTRING geometry object formed by the 3D coordinate points (1 3 4) and (5 6 7)."}
{"id": 609, "function": "ST_XMin", "question": "对于包含两个三维点(1 3 4)和(5 6 7)的线状几何体，获取其边界框在X轴方向的最小值。", "sql": "SELECT ST_XMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3157, "question_en": "For a linestring geometry containing the two 3D points (1 3 4) and (5 6 7), get the minimum value of its bounding box along the X-axis."}
{"id": 609, "function": "ST_XMin", "question": "从由点(1 3 4)到点(5 6 7)的三维线段中，提取该几何体在X坐标轴上的最小边界值。", "sql": "SELECT ST_XMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3158, "question_en": "Retrieve the minimum bounding value on the X-axis from the 3D line segment between point (1 3 4) and point (5 6 7)."}
{"id": 609, "function": "ST_XMin", "question": "输出三维折线LINESTRING(1 3 4, 5 6 7)的最小X坐标值，其中1 3 4和5 6 7分别表示两个三维点的XYZ坐标。", "sql": "SELECT ST_XMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3159, "question_en": "Output the minimum X-coordinate value of the 3D linestring LINESTRING(1 3 4, 5 6 7), where 1 3 4 and 5 6 7 represent the XYZ coordinates of two 3D points."}
{"id": 609, "function": "ST_XMin", "question": "计算由三维点(1 3 4)和(5 6 7)构成的折线对象在X轴方向上的最小边界值，并以浮点数形式返回结果。", "sql": "SELECT ST_XMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3160, "question_en": "Calculate the minimum bounding value in the X-axis direction for a polyline object formed by the 3D points (1 3 4) and (5 6 7), and return the result as a floating-point number."}
{"id": 609, "function": "ST_XMin", "question": "对WKT格式的三维折线LINESTRING(1 3 4, 5 6 7)执行空间分析，返回其外包矩形在X轴的最小坐标值。", "sql": "SELECT ST_XMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3161, "question_en": "Perform spatial analysis on the 3D polyline in WKT format LINESTRING(1 3 4, 5 6 7) and return the minimum X-coordinate value of its bounding rectangle."}
{"id": 610, "function": "ST_XMin", "question": "计算BOX(-3 2, 3 4)这个二维边界框的最小X坐标值。", "sql": "SELECT ST_XMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[-3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3162, "question_en": "Calculate the minimum X-coordinate value of the 2D bounding box BOX(-3 2, 3 4)."}
{"id": 610, "function": "ST_XMin", "question": "将字符串'BOX(-3 2, 3 4)'转换为box2d类型后，提取其左下角点坐标的X值。", "sql": "SELECT ST_XMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[-3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3163, "question_en": "After converting the string 'BOX(-3 2, 3 4)' to the box2d type, extract the X value of its bottom-left corner coordinate."}
{"id": 610, "function": "ST_XMin", "question": "对于由对角点(-3,2)和(3,4)定义的二维矩形框，使用ST_XMin函数获取其X轴方向的最小边界值。", "sql": "SELECT ST_XMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[-3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3164, "question_en": "For the 2D rectangular box defined by diagonal points (-3,2) and (3,4), use the ST_XMin function to retrieve its minimum bounding value along the X-axis."}
{"id": 610, "function": "ST_XMin", "question": "输出将字符串'BOX(-3 2, 3 4)'转换为box2d类型后，该边界框的最小X坐标值。", "sql": "SELECT ST_XMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[-3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3165, "question_en": "Output the minimum X-coordinate value of the bounding box after converting the string 'BOX(-3 2, 3 4)' to the box2d type."}
{"id": 610, "function": "ST_XMin", "question": "计算并返回由左下角点(-3,2)和右上角点(3,4)定义的二维边界框的最小X坐标值。", "sql": "SELECT ST_XMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[-3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3166, "question_en": "Calculate and return the minimum X-coordinate value of the 2D bounding box defined by the bottom-left point (-3,2) and the top-right point (3,4)."}
{"id": 610, "function": "ST_XMin", "question": "将几何范围描述'BOX(-3 2, 3 4)'显式转换为box2d空间类型后，输出其X轴方向的最小边界值。", "sql": "SELECT ST_XMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[-3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3167, "question_en": "Convert the geometric extent description 'BOX(-3 2, 3 4)' to the box2d spatial type explicitly, then output its minimum boundary value along the X-axis."}
{"id": 611, "function": "ST_YMax", "question": "计算三维边界框BOX3D(1 2 3, 4 5 6)中Y坐标的最大值，其中左下角坐标为(1,2,3)，右上角坐标为(4,5,6)。", "sql": "SELECT ST_YMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3168, "question_en": "Calculate the maximum Y-coordinate in the 3D bounding box BOX3D(1 2 3, 4 5 6), where the lower-left corner is (1,2,3) and the upper-right corner is (4,5,6)."}
{"id": 611, "function": "ST_YMax", "question": "对于由对角点(1 2 3)和(4 5 6)定义的三维边界框BOX3D，返回其Y轴方向上的最大坐标值。", "sql": "SELECT ST_YMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3169, "question_en": "For the 3D bounding box BOX3D defined by the diagonal points (1 2 3) and (4 5 6), return the maximum coordinate value along the Y-axis."}
{"id": 611, "function": "ST_YMax", "question": "如何获取三维盒子BOX3D(1 2 3, 4 5 6)的Y轴最大值？", "sql": "SELECT ST_YMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3170, "question_en": "How to get the maximum Y-axis value of the 3D box BOX3D(1 2 3, 4 5 6)?"}
{"id": 611, "function": "ST_YMax", "question": "输出三维边界框BOX3D(1 2 3, 4 5 6)中Y坐标的最大值。", "sql": "SELECT ST_YMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3171, "question_en": "Output the maximum Y-coordinate value in the 3D bounding box BOX3D(1 2 3, 4 5 6)."}
{"id": 611, "function": "ST_YMax", "question": "计算并返回三维边界框BOX3D(1 2 3, 4 5 6)在Y轴方向上的最大坐标值。", "sql": "SELECT ST_YMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3172, "question_en": "Calculate and return the maximum coordinate value on the Y-axis for the 3D bounding box BOX3D(1 2 3, 4 5 6)."}
{"id": 611, "function": "ST_YMax", "question": "输出BOX3D(1 2 3, 4 5 6)的Y轴最大值，该边界框由角点(1 2 3)和(4 5 6)定义。", "sql": "SELECT ST_YMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3173, "question_en": "Output the maximum Y-axis value of BOX3D(1 2 3, 4 5 6), which is defined by the corner points (1 2 3) and (4 5 6)."}
{"id": 612, "function": "ST_YMax", "question": "计算由三个三维点CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)构成的圆弧几何对象的Y坐标最大值。", "sql": "SELECT ST_YMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150506.12682932706]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3174, "question_en": "Calculate the maximum Y-coordinate of the circular arc geometry object formed by the three 3D points CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 612, "function": "ST_YMax", "question": "对于通过EWKT格式定义的圆弧CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)，获取其边界框的最大Y坐标值。", "sql": "SELECT ST_YMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150506.12682932706]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3175, "question_en": "For the circular arc defined in EWKT format as CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3), retrieve the maximum Y-coordinate value of its bounding box."}
{"id": 612, "function": "ST_YMax", "question": "确定三维圆弧CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)在空间坐标系中的最高点Y坐标值。", "sql": "SELECT ST_YMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150506.12682932706]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3176, "question_en": "Determine the maximum Y-coordinate value of the 3D circular arc CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3) in the spatial coordinate system."}
{"id": 612, "function": "ST_YMax", "question": "输出由CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)构建的三维圆弧几何对象的Y坐标最大值。", "sql": "SELECT ST_YMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150506.12682932706]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3177, "question_en": "Output the maximum Y-coordinate of the 3D circular arc geometry constructed by CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 612, "function": "ST_YMax", "question": "计算并返回三维圆弧CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)在Y轴方向上的最大坐标值。", "sql": "SELECT ST_YMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150506.12682932706]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3178, "question_en": "Calculate and return the maximum Y-coordinate value of the 3D circular arc CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 612, "function": "ST_YMax", "question": "获取由三个三维点220268 150415 1、220227 150505 2和220227 150406 3定义的圆弧几何体的最大Y坐标值。", "sql": "SELECT ST_YMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150506.12682932706]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3179, "question_en": "Retrieve the maximum Y-coordinate value of the arc geometry defined by the three 3D points 220268 150415 1, 220227 150505 2, and 220227 150406 3."}
{"id": 613, "function": "ST_YMax", "question": "计算由LINESTRING(1 3 4, 5 6 7)定义的三维线段的Y坐标最大值。", "sql": "SELECT ST_YMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3180, "question_en": "Calculate the maximum Y-coordinate of the 3D line segment defined by LINESTRING(1 3 4, 5 6 7)."}
{"id": 613, "function": "ST_YMax", "question": "对于由点(1 3 4)和点(5 6 7)构成的三维线段，获取其Y轴方向上的最大坐标值。", "sql": "SELECT ST_YMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3181, "question_en": "For the 3D line segment formed by point (1 3 4) and point (5 6 7), obtain the maximum Y-coordinate value."}
{"id": 613, "function": "ST_YMax", "question": "在三维空间线段LINESTRING(1 3 4, 5 6 7)中，找出所有顶点Y坐标中的最大值。", "sql": "SELECT ST_YMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3182, "question_en": "Find the maximum Y-coordinate among all vertices in the 3D linestring LINESTRING(1 3 4, 5 6 7)."}
{"id": 613, "function": "ST_YMax", "question": "输出三维折线LINESTRING(1 3 4, 5 6 7)中所有顶点Y坐标的最大值，结果以浮点数形式返回。", "sql": "SELECT ST_YMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3183, "question_en": "Output the maximum Y-coordinate of all vertices in the 3D linestring LINESTRING(1 3 4, 5 6 7), returning the result as a floating-point number."}
{"id": 613, "function": "ST_YMax", "question": "计算由三维点(1 3 4)和(5 6 7)构成的折线对象在Y轴方向上的最大边界值，返回结果为双精度数值。", "sql": "SELECT ST_YMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3184, "question_en": "Calculate the maximum boundary value in the Y-axis direction for the polyline object formed by the 3D points (1 3 4) and (5 6 7), returning the result as a double precision value."}
{"id": 613, "function": "ST_YMax", "question": "对包含Z值的三维线段LINESTRING(1 3 4, 5 6 7)执行空间分析，返回其所有顶点中最大的Y坐标数值。", "sql": "SELECT ST_YMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3185, "question_en": "Perform spatial analysis on the 3D linestring LINESTRING(1 3 4, 5 6 7) containing Z-values and return the maximum Y-coordinate value among all its vertices."}
{"id": 614, "function": "ST_YMax", "question": "计算由左下角坐标(-3,2)和右上角坐标(3,4)构成的二维边界框BOX(-3 2, 3 4)的最大Y坐标值。", "sql": "SELECT ST_YMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3186, "question_en": "Calculate the maximum Y-coordinate of the 2D bounding box BOX(-3 2, 3 4) defined by the bottom-left corner (-3,2) and top-right corner (3,4)."}
{"id": 614, "function": "ST_YMax", "question": "将字符串'BOX(-3 2, 3 4)'转换为box2d类型后，提取该二维边界框在Y轴方向上的最大值。", "sql": "SELECT ST_YMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3187, "question_en": "Convert the string 'BOX(-3 2, 3 4)' to box2d type, then extract the maximum value of this 2D bounding box along the Y-axis."}
{"id": 614, "function": "ST_YMax", "question": "对于由对角点(-3,2)和(3,4)定义的矩形区域BOX(-3 2, 3 4)，查询其空间范围的最大纬度坐标（Y轴最大值）。", "sql": "SELECT ST_YMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3188, "question_en": "For the rectangular area BOX(-3 2, 3 4) defined by diagonal points (-3,2) and (3,4), query the maximum latitude coordinate (Y-axis maximum) of its spatial extent."}
{"id": 614, "function": "ST_YMax", "question": "输出将BOX(-3 2, 3 4)转换为box2d类型后，计算其Y轴最大值的数值结果。", "sql": "SELECT ST_YMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3189, "question_en": "Output the numerical result of the maximum Y-axis value after converting BOX(-3 2, 3 4) to the box2d type."}
{"id": 614, "function": "ST_YMax", "question": "计算BOX(-3 2, 3 4)经CAST转换为box2d类型后的边界框顶部Y坐标值，并直接输出该浮点数值。", "sql": "SELECT ST_YMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3190, "question_en": "Calculate the top Y-coordinate value of the bounding box after converting BOX(-3 2, 3 4) to box2d type with CAST, and directly output the floating-point number."}
{"id": 614, "function": "ST_YMax", "question": "对BOX(-3 2, 3 4)执行box2d类型转换后，返回其空间范围在垂直方向上的最大Y值，输出为单精度浮点数。", "sql": "SELECT ST_YMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3191, "question_en": "After converting BOX(-3 2, 3 4) to box2d type, return the maximum Y value of its spatial extent in the vertical direction, output as a single-precision floating-point number."}
{"id": 615, "function": "ST_YMin", "question": "计算三维边界框BOX3D(1 2 3, 4 5 6)的最小Y坐标值，其中边界框的两个对角点坐标分别为(1,2,3)和(4,5,6)。", "sql": "SELECT ST_YMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3192, "question_en": "Calculate the minimum Y-coordinate value of the 3D bounding box BOX3D(1 2 3, 4 5 6), where the two diagonal points of the bounding box have coordinates (1,2,3) and (4,5,6)."}
{"id": 615, "function": "ST_YMin", "question": "对于三维空间中的边界框BOX3D(1 2 3, 4 5 6)，其左下角坐标为(1,2,3)，右上角坐标为(4,5,6)，请返回该边界框在Y轴方向上的最小值。", "sql": "SELECT ST_YMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3193, "question_en": "For the 3D bounding box BOX3D(1 2 3, 4 5 6), with the lower-left corner at (1,2,3) and the upper-right corner at (4,5,6), return the minimum value of the bounding box along the Y-axis."}
{"id": 615, "function": "ST_YMin", "question": "给定一个三维边界框BOX3D(1 2 3, 4 5 6)，其中第一个点(1,2,3)表示最小坐标，第二个点(4,5,6)表示最大坐标，查询该边界框的最小Y值。", "sql": "SELECT ST_YMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3194, "question_en": "Given a 3D bounding box BOX3D(1 2 3, 4 5 6), where the first point (1,2,3) represents the minimum coordinates and the second point (4,5,6) represents the maximum coordinates, query the minimum Y value of this bounding box."}
{"id": 615, "function": "ST_YMin", "question": "输出三维边界框BOX3D(1 2 3, 4 5 6)的最小Y坐标值，其中(1 2 3)表示左下角坐标，(4 5 6)表示右上角坐标。", "sql": "SELECT ST_YMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3195, "question_en": "Output the minimum Y coordinate of the 3D bounding box BOX3D(1 2 3, 4 5 6), where (1 2 3) represents the lower-left corner and (4 5 6) represents the upper-right corner."}
{"id": 615, "function": "ST_YMin", "question": "计算并返回三维边界框BOX3D(1 2 3, 4 5 6)的Y轴最小值，输入参数中1 2 3代表左下角XYZ坐标，4 5 6代表右上角XYZ坐标。", "sql": "SELECT ST_YMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3196, "question_en": "Calculate and return the minimum Y-axis value of the 3D bounding box BOX3D(1 2 3, 4 5 6), where 1 2 3 represents the XYZ coordinates of the lower-left corner and 4 5 6 represents the XYZ coordinates of the upper-right corner."}
{"id": 615, "function": "ST_YMin", "question": "输出BOX3D(1 2 3, 4 5 6)的Y方向最小边界值，该三维框左下角坐标为(1,2,3)，右上角坐标为(4,5,6)。", "sql": "SELECT ST_YMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3197, "question_en": "Output the minimum Y-bound value of BOX3D(1 2 3, 4 5 6), where the lower-left corner coordinates are (1,2,3) and the upper-right corner coordinates are (4,5,6)."}
{"id": 616, "function": "ST_YMin", "question": "计算由三个三维点CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)定义的圆弧几何对象的最小Y坐标值。", "sql": "SELECT ST_YMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150406.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3198, "question_en": "Calculate the minimum Y-coordinate value of the circular arc geometry defined by the three 3D points CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 616, "function": "ST_YMin", "question": "对于通过EWKT格式定义的圆弧几何对象CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)，获取其边界框的最小Y坐标值。", "sql": "SELECT ST_YMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150406.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3199, "question_en": "For the arc geometry object defined in EWKT format CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3), retrieve the minimum Y-coordinate value of its bounding box."}
{"id": 616, "function": "ST_YMin", "question": "从包含三个三维控制点(220268 150415 1)、(220227 150505 2)和(220227 150406 3)的圆弧几何对象中，提取该对象在Y轴方向上的最小坐标值。", "sql": "SELECT ST_YMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150406.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3200, "question_en": "Extract the minimum Y-coordinate value from the arc geometry object containing the three 3D control points (220268 150415 1), (220227 150505 2), and (220227 150406 3)."}
{"id": 616, "function": "ST_YMin", "question": "输出由三个三维点220268 150415 1、220227 150505 2和220227 150406 3构成的CIRCULARSTRING几何对象的最小Y坐标值。", "sql": "SELECT ST_YMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150406.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3201, "question_en": "Output the minimum Y-coordinate value of the CIRCULARSTRING geometry object composed of the three 3D points 220268 150415 1, 220227 150505 2, and 220227 150406 3."}
{"id": 616, "function": "ST_YMin", "question": "计算并返回三维圆弧CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)在Y轴方向上的最小边界值。", "sql": "SELECT ST_YMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150406.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3202, "question_en": "Calculate and return the minimum bounding value in the Y-axis direction for the 3D circular arc CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 616, "function": "ST_YMin", "question": "获取由EWKT格式定义的三维圆弧CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)的最小Y坐标，输出为浮点数值。", "sql": "SELECT ST_YMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150406.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3203, "question_en": "Retrieve the minimum Y coordinate of the 3D circular arc defined in EWKT format CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3), output as a floating-point value."}
{"id": 617, "function": "ST_YMin", "question": "计算由LINESTRING(1 3 4, 5 6 7)这条三维线段构成的几何对象的最小Y坐标值。", "sql": "SELECT ST_YMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3204, "question_en": "Calculate the minimum Y-coordinate value of the 3D linestring geometry object formed by LINESTRING(1 3 4, 5 6 7)."}
{"id": 617, "function": "ST_YMin", "question": "对于由点(1 3 4)和点(5 6 7)构成的三维线段，求其包围盒在Y轴方向上的最小值。", "sql": "SELECT ST_YMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3205, "question_en": "For the 3D line segment formed by points (1 3 4) and (5 6 7), find the minimum value of its bounding box in the Y-axis direction."}
{"id": 617, "function": "ST_YMin", "question": "从LINESTRING(1 3 4, 5 6 7)这个包含两个三维点的线串几何中，提取其空间范围的最小Y坐标。", "sql": "SELECT ST_YMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3206, "question_en": "From the LINESTRING(1 3 4, 5 6 7) geometry containing two 3D points, extract the minimum Y-coordinate of its spatial extent."}
{"id": 617, "function": "ST_YMin", "question": "输出LINESTRING(1 3 4, 5 6 7)几何对象中所有顶点的最小Y坐标值，其中1 3 4表示第一个点的XYZ坐标，5 6 7表示第二个点的XYZ坐标。", "sql": "SELECT ST_YMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3207, "question_en": "Output the minimum Y-coordinate value of all vertices in the LINESTRING(1 3 4, 5 6 7) geometry object, where 1 3 4 represents the XYZ coordinates of the first point and 5 6 7 represents the XYZ coordinates of the second point."}
{"id": 617, "function": "ST_YMin", "question": "计算由三维点(1 3 4)和(5 6 7)构成的LINESTRING几何体在Y轴方向上的最小边界值，并以浮点数形式返回结果。", "sql": "SELECT ST_YMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3208, "question_en": "Calculate the minimum bounding value in the Y-axis direction for the LINESTRING geometry formed by the 3D points (1 3 4) and (5 6 7), and return the result as a floating-point number."}
{"id": 617, "function": "ST_YMin", "question": "返回三维线段LINESTRING(1 3 4, 5 6 7)的Y坐标最小边界值，其中1 3 4和5 6 7分别代表线段起点和终点的XYZ坐标。", "sql": "SELECT ST_YMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3209, "question_en": "Return the minimum Y-coordinate boundary value of the 3D linestring LINESTRING(1 3 4, 5 6 7), where 1 3 4 and 5 6 7 represent the XYZ coordinates of the start and end points of the linestring."}
{"id": 618, "function": "ST_YMin", "question": "计算BOX(-3 2, 3 4)这个二维边界框的最小Y坐标值。", "sql": "SELECT ST_YMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3210, "question_en": "Calculate the minimum Y-coordinate value of the 2D bounding box BOX(-3 2, 3 4)."}
{"id": 618, "function": "ST_YMin", "question": "将BOX(-3 2, 3 4)转换为box2d类型后，提取其边界的最小Y坐标值。", "sql": "SELECT ST_YMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3211, "question_en": "After converting BOX(-3 2, 3 4) to box2d type, extract the minimum Y coordinate value of its boundary."}
{"id": 618, "function": "ST_YMin", "question": "对于由左下角坐标(-3,2)和右上角坐标(3,4)定义的二维边界框，返回其Y轴方向的最小值。", "sql": "SELECT ST_YMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3212, "question_en": "For the 2D bounding box defined by the bottom-left coordinate (-3,2) and the top-right coordinate (3,4), return the minimum value in the Y-axis direction."}
{"id": 618, "function": "ST_YMin", "question": "输出BOX(-3 2, 3 4)转换为box2d类型后，其边界框的最小Y坐标值。", "sql": "SELECT ST_YMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3213, "question_en": "Output the minimum Y-coordinate value of the bounding box after converting BOX(-3 2, 3 4) to the box2d type."}
{"id": 618, "function": "ST_YMin", "question": "计算BOX(-3 2, 3 4)的box2d表示形式中，Y轴方向的最小值，并将结果以浮点数形式输出。", "sql": "SELECT ST_YMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3214, "question_en": "Calculate the minimum Y-axis value in the box2d representation of BOX(-3 2, 3 4) and output the result as a floating-point number."}
{"id": 618, "function": "ST_YMin", "question": "将BOX(-3 2, 3 4)强制转换为box2d类型后，提取该边界框在Y维度上的下限值，输出为数值类型。", "sql": "SELECT ST_YMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3215, "question_en": "After casting BOX(-3 2, 3 4) to box2d type, extract the lower bound value of this bounding box in the Y dimension and output it as a numeric type."}
{"id": 619, "function": "ST_ZMax", "question": "计算BOX3D(1 2 3, 4 5 6)这个三维边界框的最大Z坐标值。", "sql": "SELECT ST_ZMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3216, "question_en": "Calculate the maximum Z-coordinate value of the 3D bounding box BOX3D(1 2 3, 4 5 6)."}
{"id": 619, "function": "ST_ZMax", "question": "对于由左下角坐标(1 2 3)和右上角坐标(4 5 6)定义的三维边界框，返回其Z轴的最大值。", "sql": "SELECT ST_ZMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3217, "question_en": "For the 3D bounding box defined by the bottom-left corner (1 2 3) and the top-right corner (4 5 6), return its maximum value on the Z-axis."}
{"id": 619, "function": "ST_ZMax", "question": "在三维空间边界框BOX3D(1 2 3, 4 5 6)中，获取Z坐标的最大值。", "sql": "SELECT ST_ZMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3218, "question_en": "Get the maximum Z-coordinate within the 3D bounding box BOX3D(1 2 3, 4 5 6)."}
{"id": 619, "function": "ST_ZMax", "question": "输出BOX3D(1 2 3, 4 5 6)三维边界框的Z坐标最大值，其中(1 2 3)为左下角坐标，(4 5 6)为右上角坐标。", "sql": "SELECT ST_ZMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3219, "question_en": "Output the maximum Z-coordinate of the 3D bounding box BOX3D(1 2 3, 4 5 6), where (1 2 3) is the lower-left corner and (4 5 6) is the upper-right corner."}
{"id": 619, "function": "ST_ZMax", "question": "计算并返回BOX3D(1 2 3, 4 5 6)中Z轴的最大值，输入参数为左下角(1 2 3)和右上角(4 5 6)定义的三维空间范围。", "sql": "SELECT ST_ZMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3220, "question_en": "Calculate and return the maximum Z-axis value in BOX3D(1 2 3, 4 5 6), where the input parameters define a 3D spatial extent with the lower-left corner (1 2 3) and upper-right corner (4 5 6)."}
{"id": 619, "function": "ST_ZMax", "question": "输出BOX3D(1 2 3, 4 5 6)的Z维度最大值，该三维边界框由对角点(1 2 3)和(4 5 6)完全定义。", "sql": "SELECT ST_ZMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3221, "question_en": "Output the maximum Z dimension of BOX3D(1 2 3, 4 5 6), where this 3D bounding box is fully defined by the diagonal points (1 2 3) and (4 5 6)."}
{"id": 620, "function": "ST_ZMax", "question": "计算由三个三维点CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)构成的圆弧几何对象中Z坐标的最大值是多少？", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3222, "question_en": "Calculate the maximum Z-coordinate value in the 3D circular arc geometry object defined by the three points CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 620, "function": "ST_ZMax", "question": "对于通过EWKT格式定义的圆弧CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)，其三个顶点Z值分别为1、2、3，请找出该几何体的最大高程值。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3223, "question_en": "For the circular arc defined in EWKT format as CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3), with Z values of 1, 2, and 3 for its three vertices, find the maximum elevation value of this geometry."}
{"id": 620, "function": "ST_ZMax", "question": "在空间数据库中对圆弧几何体CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)执行ST_ZMax函数，该几何体由三个三维点构成，其Z坐标分别为1、2和3，查询结果应返回哪个Z值？", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3224, "question_en": "In a spatial database, for the circular arc geometry CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3) composed of three 3D points with Z coordinates 1, 2, and 3, what Z value should the ST_ZMax function return?"}
{"id": 620, "function": "ST_ZMax", "question": "输出由CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)构建的三维圆弧几何对象的Z坐标最大值。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3225, "question_en": "Output the maximum Z-coordinate of the 3D circular arc geometry constructed by CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 620, "function": "ST_ZMax", "question": "计算并返回三维圆弧CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)中所有顶点Z坐标的最大数值。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3226, "question_en": "Calculate and return the maximum Z-coordinate value among all vertices in the 3D circular arc CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 620, "function": "ST_ZMax", "question": "获取由三个三维点220268 150415 1、220227 150505 2和220227 150406 3定义的圆弧几何体的最高Z值输出结果。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3227, "question_en": "Retrieve the maximum Z value from the arc geometry defined by the three 3D points 220268 150415 1, 220227 150505 2, and 220227 150406 3."}
{"id": 621, "function": "ST_ZMax", "question": "计算由LINESTRING(1 3 4, 5 6 7)这条三维线段中所有顶点Z坐标的最大值。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[7.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3228, "question_en": "Calculate the maximum Z-coordinate value among all vertices in the 3D linestring LINESTRING(1 3 4, 5 6 7)."}
{"id": 621, "function": "ST_ZMax", "question": "对于由两个三维点(1 3 4)和(5 6 7)构成的线段，求其Z轴坐标的最大值是多少？", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[7.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3229, "question_en": "For the line segment formed by the two 3D points (1 3 4) and (5 6 7), what is the maximum Z-coordinate value?"}
{"id": 621, "function": "ST_ZMax", "question": "如何获取LINESTRING(1 3 4, 5 6 7)这个三维线段的最高点（最大Z值）？", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[7.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3230, "question_en": "How to get the highest point (maximum Z value) of the 3D linestring LINESTRING(1 3 4, 5 6 7)?"}
{"id": 621, "function": "ST_ZMax", "question": "输出LINESTRING(1 3 4, 5 6 7)几何对象中所有顶点的Z坐标最大值，结果以浮点数形式返回。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[7.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3231, "question_en": "Return the maximum Z-coordinate of all vertices in the LINESTRING(1 3 4, 5 6 7) geometry as a floating-point number."}
{"id": 621, "function": "ST_ZMax", "question": "计算由点(1 3 4)和点(5 6 7)构成的三维线段的Z轴坐标极值，返回数据类型为双精度浮点数。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[7.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3232, "question_en": "Calculate the Z-axis extrema of the 3D line segment formed by points (1 3 4) and (5 6 7), returning the result as a double precision floating-point number."}
{"id": 621, "function": "ST_ZMax", "question": "对EWKT格式定义的三维线段LINESTRING(1 3 4, 5 6 7)执行Z坐标最大值提取操作，返回数值结果。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[7.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3233, "question_en": "Extract the maximum Z-coordinate value from the 3D linestring LINESTRING(1 3 4, 5 6 7) in EWKT format and return the numerical result."}
{"id": 622, "function": "ST_ZMax", "question": "计算三维边界框BOX3D(-3 2 1, 3 4 1)中Z坐标的最大值，其中边界框的两个对角点坐标分别为(-3,2,1)和(3,4,1)。", "sql": "SELECT ST_ZMax('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3234, "question_en": "Calculate the maximum Z-coordinate in the 3D bounding box BOX3D(-3 2 1, 3 4 1), where the two diagonal points of the bounding box are (-3,2,1) and (3,4,1)."}
{"id": 622, "function": "ST_ZMax", "question": "对于由左下角坐标(-3,2,1)和右上角坐标(3,4,1)定义的三维边界框BOX3D，返回其Z轴方向的最大值。", "sql": "SELECT ST_ZMax('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3235, "question_en": "For the 3D bounding box BOX3D defined by the lower-left corner (-3,2,1) and upper-right corner (3,4,1), return its maximum value along the Z-axis."}
{"id": 622, "function": "ST_ZMax", "question": "在PostGIS中，如何获取三维空间范围BOX3D(-3 2 1, 3 4 1)的Z坐标最大值？该范围的最小角点为(-3,2,1)，最大角点为(3,4,1)。", "sql": "SELECT ST_ZMax('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3236, "question_en": "In PostGIS, how to get the maximum Z coordinate of the 3D bounding box BOX3D(-3 2 1, 3 4 1), where the minimum corner is (-3,2,1) and the maximum corner is (3,4,1)?"}
{"id": 622, "function": "ST_ZMax", "question": "输出三维边界框BOX3D(-3 2 1, 3 4 1)中Z坐标的最大值。", "sql": "SELECT ST_ZMax('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3237, "question_en": "Output the maximum Z-coordinate within the 3D bounding box BOX3D(-3 2 1, 3 4 1)."}
{"id": 622, "function": "ST_ZMax", "question": "计算并返回由左下角点(-3 2 1)和右上角点(3 4 1)定义的三维边界框的Z轴最大值。", "sql": "SELECT ST_ZMax('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3238, "question_en": "Calculate and return the maximum Z-axis value of the 3D bounding box defined by the bottom-left point (-3 2 1) and the top-right point (3 4 1)."}
{"id": 622, "function": "ST_ZMax", "question": "获取BOX3D类型对象'BOX3D(-3 2 1, 3 4 1)'的Z维度上限值，输出结果为浮点数。", "sql": "SELECT ST_ZMax('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3239, "question_en": "Retrieve the upper Z-dimension value of the BOX3D object 'BOX3D(-3 2 1, 3 4 1)' and output the result as a floating-point number."}
{"id": 623, "function": "ST_ZMin", "question": "计算三维边界框BOX3D(1 2 3, 4 5 6)的最小Z坐标值，其中边界框的两个对角点坐标分别为(1,2,3)和(4,5,6)。", "sql": "SELECT ST_ZMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3240, "question_en": "Calculate the minimum Z-coordinate value of the 3D bounding box BOX3D(1 2 3, 4 5 6), where the two diagonal points of the bounding box are (1,2,3) and (4,5,6)."}
{"id": 623, "function": "ST_ZMin", "question": "对于由点(1,2,3)和点(4,5,6)定义的三维边界框BOX3D(1 2 3, 4 5 6)，查询其Z轴方向的最小坐标值。", "sql": "SELECT ST_ZMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3241, "question_en": "For the 3D bounding box BOX3D(1 2 3, 4 5 6) defined by points (1,2,3) and (4,5,6), query its minimum coordinate value along the Z-axis."}
{"id": 623, "function": "ST_ZMin", "question": "如何获取三维边界框BOX3D(1 2 3, 4 5 6)的最小Z值？该边界框的坐标范围为X轴1到4，Y轴2到5，Z轴3到6。", "sql": "SELECT ST_ZMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3242, "question_en": "How to get the minimum Z value of the 3D bounding box BOX3D(1 2 3, 4 5 6)? The coordinate range of this bounding box is X-axis from 1 to 4, Y-axis from 2 to 5, and Z-axis from 3 to 6."}
{"id": 623, "function": "ST_ZMin", "question": "输出三维边界框BOX3D(1 2 3, 4 5 6)的最小Z坐标值。", "sql": "SELECT ST_ZMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3243, "question_en": "Output the minimum Z-coordinate value of the 3D bounding box BOX3D(1 2 3, 4 5 6)."}
{"id": 623, "function": "ST_ZMin", "question": "计算并返回三维边界框BOX3D(1 2 3, 4 5 6)中Z轴方向的最小值，输出为浮点数值。", "sql": "SELECT ST_ZMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3244, "question_en": "Calculate and return the minimum value along the Z-axis in the 3D bounding box BOX3D(1 2 3, 4 5 6), output as a floating-point number."}
{"id": 623, "function": "ST_ZMin", "question": "对三维边界框BOX3D(1 2 3, 4 5 6)执行ST_ZMin函数，输出其最小Z坐标的数值结果。", "sql": "SELECT ST_ZMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3245, "question_en": "Execute the ST_ZMin function on the 3D bounding box BOX3D(1 2 3, 4 5 6) and output the numerical result of its minimum Z coordinate."}
{"id": 624, "function": "ST_ZMin", "question": "计算由三个三维点220268 150415 1、220227 150505 2和220227 150406 3构成的CIRCULARSTRING圆弧几何对象的最小Z坐标值。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3246, "question_en": "Calculate the minimum Z-coordinate value of the CIRCULARSTRING arc geometry formed by the three 3D points 220268 150415 1, 220227 150505 2, and 220227 150406 3."}
{"id": 624, "function": "ST_ZMin", "question": "对于EWKT格式定义的CIRCULARSTRING圆弧，其三个顶点坐标分别为220268 150415 1、220227 150505 2和220227 150406 3，求该三维几何体的Z轴最小值。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3247, "question_en": "For a CIRCULARSTRING arc defined in EWKT format with three vertex coordinates at 220268 150415 1, 220227 150505 2, and 220227 150406 3, find the minimum Z-axis value of this 3D geometry."}
{"id": 624, "function": "ST_ZMin", "question": "从由点220268 150415 1、点220227 150505 2和点220227 150406 3组成的三维CIRCULARSTRING圆弧几何中，提取最小的Z坐标值是多少？", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3248, "question_en": "From the 3D CIRCULARSTRING arc geometry composed of points 220268 150415 1, 220227 150505 2, and 220227 150406 3, what is the minimum Z-coordinate value?"}
{"id": 624, "function": "ST_ZMin", "question": "输出由CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)构建的三维圆弧几何对象的最小Z坐标值。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3249, "question_en": "Output the minimum Z-coordinate value of the 3D circular arc geometry object constructed by CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 624, "function": "ST_ZMin", "question": "计算并返回三维圆弧CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)中所有顶点Z坐标的最小数值。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3250, "question_en": "Calculate and return the minimum Z-coordinate value among all vertices in the 3D circular arc CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 624, "function": "ST_ZMin", "question": "获取通过EWKT格式定义的圆弧CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)的Z轴最小值，输出为浮点数值。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3251, "question_en": "Retrieve the minimum Z-axis value of the circular arc defined in EWKT format as CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3), output as a floating-point number."}
{"id": 625, "function": "ST_ZMin", "question": "计算由LINESTRING(1 3 4, 5 6 7)这条三维线段中所有顶点Z坐标的最小值。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3252, "question_en": "Calculate the minimum Z-coordinate value of all vertices in the 3D linestring LINESTRING(1 3 4, 5 6 7)."}
{"id": 625, "function": "ST_ZMin", "question": "对于由点(1 3 4)和点(5 6 7)构成的三维线段，查询其Z轴坐标的最小值是多少？", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3253, "question_en": "For the 3D line segment formed by points (1 3 4) and (5 6 7), what is the minimum Z-coordinate value?"}
{"id": 625, "function": "ST_ZMin", "question": "在三维空间线段LINESTRING(1 3 4, 5 6 7)中，找出所有顶点中Z值最小的那个数值。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3254, "question_en": "Find the minimum Z value among all vertices in the 3D linestring LINESTRING(1 3 4, 5 6 7)."}
{"id": 625, "function": "ST_ZMin", "question": "输出LINESTRING(1 3 4, 5 6 7)三维线对象中所有顶点Z坐标的最小值，结果以浮点数形式返回。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3255, "question_en": "Output the minimum Z-coordinate value of all vertices in the 3D linestring object LINESTRING(1 3 4, 5 6 7), returning the result as a floating-point number."}
{"id": 625, "function": "ST_ZMin", "question": "计算由点(1 3 4)和点(5 6 7)构成的三维线对象的Z轴最低坐标值，返回结果为数值类型。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3256, "question_en": "Calculate the minimum Z-coordinate value of the 3D line object formed by points (1 3 4) and (5 6 7), returning the result as a numeric type."}
{"id": 625, "function": "ST_ZMin", "question": "对EWKT格式的三维线LINESTRING(1 3 4, 5 6 7)执行Z最小值提取操作。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3257, "question_en": "Extract the minimum Z value from the 3D line EWKT LINESTRING(1 3 4, 5 6 7)."}
{"id": 626, "function": "ST_ZMin", "question": "计算BOX3D(-3 2 1, 3 4 1)这个三维边界框的最小Z坐标值。", "sql": "SELECT ST_ZMin('BOX3D(-3 2 1, 3 4 1)' );", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3258, "question_en": "Calculate the minimum Z-coordinate value of the 3D bounding box BOX3D(-3 2 1, 3 4 1)."}
{"id": 626, "function": "ST_ZMin", "question": "对于由左下角坐标(-3 2 1)和右上角坐标(3 4 1)定义的三维边界框，返回其Z轴方向的最小值。", "sql": "SELECT ST_ZMin('BOX3D(-3 2 1, 3 4 1)' );", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3259, "question_en": "For the 3D bounding box defined by the lower-left corner (-3 2 1) and upper-right corner (3 4 1), return the minimum value along the Z-axis."}
{"id": 626, "function": "ST_ZMin", "question": "在三维空间边界框BOX3D(-3 2 1, 3 4 1)中，获取Z坐标的最小值是多少？", "sql": "SELECT ST_ZMin('BOX3D(-3 2 1, 3 4 1)' );", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3260, "question_en": "What is the minimum Z-coordinate within the 3D bounding box BOX3D(-3 2 1, 3 4 1)?"}
{"id": 626, "function": "ST_ZMin", "question": "输出BOX3D(-3 2 1, 3 4 1)三维边界框的最小Z坐标值。", "sql": "SELECT ST_ZMin('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3261, "question_en": "Output the minimum Z-coordinate value of the 3D bounding box BOX3D(-3 2 1, 3 4 1)."}
{"id": 626, "function": "ST_ZMin", "question": "计算并返回三维边界框BOX3D(-3 2 1, 3 4 1)中Z轴方向的最小数值。", "sql": "SELECT ST_ZMin('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3262, "question_en": "Calculate and return the minimum value along the Z-axis in the 3D bounding box BOX3D(-3 2 1, 3 4 1)."}
{"id": 626, "function": "ST_ZMin", "question": "输出BOX3D(-3 2 1, 3 4 1)的Z坐标最小值，其中边界框范围由(-3,2,1)和(3,4,1)两点定义。", "sql": "SELECT ST_ZMin('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3263, "question_en": "Output the minimum Z-coordinate of BOX3D(-3 2 1, 3 4 1), where the bounding box is defined by the points (-3,2,1) and (3,4,1)."}
{"id": 627, "function": "ST_LineInterpolatePoint", "question": "在由坐标点(25 50)、(100 125)、(150 190)构成的LINESTRING折线上，计算从起点开始沿路径20%距离处的位置点，并以EWKT格式输出该点的坐标。", "sql": "SELECT ST_AsEWKT( ST_LineInterpolatePoint( 'LINESTRING(25 50, 100 125, 150 190)', 0.2 ));", "execution_result": [["POINT(51.5974135047432 76.5974135047432)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3264, "question_en": "On the LINESTRING formed by the coordinate points (25 50), (100 125), and (150 190), calculate the point at 20% distance from the start along the path and output its coordinates in EWKT format."}
{"id": 627, "function": "ST_LineInterpolatePoint", "question": "对LINESTRING(25 50, 100 125, 150 190)这条由三个顶点组成的折线，使用ST_LineInterpolatePoint函数在总长度的0.2比例处进行线性插值，返回插值点的EWKT表示。", "sql": "SELECT ST_AsEWKT( ST_LineInterpolatePoint( 'LINESTRING(25 50, 100 125, 150 190)', 0.2 ));", "execution_result": [["POINT(51.5974135047432 76.5974135047432)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3265, "question_en": "For the LINESTRING(25 50, 100 125, 150 190) composed of three vertices, use the ST_LineInterpolatePoint function to perform linear interpolation at the 0.2 proportion of the total length and return the EWKT representation of the interpolated point."}
{"id": 627, "function": "ST_LineInterpolatePoint", "question": "给定一条由(25 50)到(100 125)再到(150 190)的折线，请输出该折线20%长度位置处的三维点坐标（EWKT格式），其中插值比例参数0.2表示总长度的20%处。", "sql": "SELECT ST_AsEWKT( ST_LineInterpolatePoint( 'LINESTRING(25 50, 100 125, 150 190)', 0.2 ));", "execution_result": [["POINT(51.5974135047432 76.5974135047432)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3266, "question_en": "Given a polyline from (25 50) to (100 125) to (150 190), output the 3D point coordinates (in EWKT format) at the 20% length position of this polyline, where the interpolation ratio parameter 0.2 represents the 20% point along the total length."}
{"id": 627, "function": "ST_LineInterpolatePoint", "question": "输出LINESTRING(25 50, 100 125, 150 190)在总长度20%位置处插值点的EWKT格式字符串，其中0.2表示插值比例。", "sql": "SELECT ST_AsEWKT( ST_LineInterpolatePoint( 'LINESTRING(25 50, 100 125, 150 190)', 0.2 ));", "execution_result": [["POINT(51.5974135047432 76.5974135047432)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3267, "question_en": "Output the EWKT format string of the interpolated point at the 20% position along the total length of LINESTRING(25 50, 100 125, 150 190), where 0.2 represents the interpolation ratio."}
{"id": 627, "function": "ST_LineInterpolatePoint", "question": "将三维折线LINESTRING(25 50, 100 125, 150 190)按0.2比例插值计算得到的三维点坐标转换为包含SRID的EWKT文本格式输出。", "sql": "SELECT ST_AsEWKT( ST_LineInterpolatePoint( 'LINESTRING(25 50, 100 125, 150 190)', 0.2 ));", "execution_result": [["POINT(51.5974135047432 76.5974135047432)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3268, "question_en": "Interpolate the 3D linestring LINESTRING(25 50, 100 125, 150 190) at a ratio of 0.2 and output the resulting 3D point coordinates in EWKT format with SRID."}
{"id": 627, "function": "ST_LineInterpolatePoint", "question": "以EWKT格式返回在折线LINESTRING(25 50, 100 125, 150 190)上距离起点20%总长度处的插值点坐标，其中插值比例参数0.2精确对应20%位置。", "sql": "SELECT ST_AsEWKT( ST_LineInterpolatePoint( 'LINESTRING(25 50, 100 125, 150 190)', 0.2 ));", "execution_result": [["POINT(51.5974135047432 76.5974135047432)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3269, "question_en": "Return the interpolated point coordinates at 20% of the total length from the start point on the linestring LINESTRING(25 50, 100 125, 150 190) in EWKT format, where the interpolation ratio parameter 0.2 precisely corresponds to the 20% position."}
{"id": 628, "function": "ST_LineInterpolatePoint", "question": "在三维折线LINESTRING(1 2 3, 4 5 6, 6 7 8)上，按比例0.5（即中点）插值计算一个点，并以EWKT格式输出该点的坐标。", "sql": "SELECT ST_AsEWKT(ST_LineInterpolatePoint('LINESTRING(1 2 3, 4 5 6, 6 7 8)', 0.5));", "execution_result": [["POINT(3.5 4.5 5.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3270, "question_en": "Interpolate a point at the ratio 0.5 (midpoint) on the 3D linestring LINESTRING(1 2 3, 4 5 6, 6 7 8) and output the point's coordinates in EWKT format."}
{"id": 628, "function": "ST_LineInterpolatePoint", "question": "对由三个三维点(1 2 3)、(4 5 6)、(6 7 8)构成的折线，使用ST_LineInterpolatePoint函数在0.5比例位置插值，返回带SRID的WKT格式结果。", "sql": "SELECT ST_AsEWKT(ST_LineInterpolatePoint('LINESTRING(1 2 3, 4 5 6, 6 7 8)', 0.5));", "execution_result": [["POINT(3.5 4.5 5.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3271, "question_en": "For the polyline formed by three 3D points (1 2 3), (4 5 6), (6 7 8), use the ST_LineInterpolatePoint function to interpolate at the 0.5 ratio position and return the result in WKT format with SRID."}
{"id": 628, "function": "ST_LineInterpolatePoint", "question": "给定三维折线LINESTRING(1 2 3, 4 5 6, 6 7 8)，计算该线总长度50%位置处的三维点坐标，输出为包含Z值的EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_LineInterpolatePoint('LINESTRING(1 2 3, 4 5 6, 6 7 8)', 0.5));", "execution_result": [["POINT(3.5 4.5 5.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3272, "question_en": "Given the 3D linestring LINESTRING(1 2 3, 4 5 6, 6 7 8), calculate the 3D point coordinates at 50% of its total length and output in EWKT format including the Z value."}
{"id": 628, "function": "ST_LineInterpolatePoint", "question": "输出三维折线LINESTRING(1 2 3, 4 5 6, 6 7 8)在总长度50%位置处插值点的EWKT格式字符串。", "sql": "SELECT ST_AsEWKT(ST_LineInterpolatePoint('LINESTRING(1 2 3, 4 5 6, 6 7 8)', 0.5));", "execution_result": [["POINT(3.5 4.5 5.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3273, "question_en": "Output the EWKT format string of the interpolated point at the 50% position along the total length of the 3D linestring LINESTRING(1 2 3, 4 5 6, 6 7 8)."}
{"id": 628, "function": "ST_LineInterpolatePoint", "question": "将三维折线LINESTRING(1 2 3, 4 5 6, 6 7 8)按比例参数0.5进行线性插值后，返回带SRID信息的WKT文本表示。", "sql": "SELECT ST_AsEWKT(ST_LineInterpolatePoint('LINESTRING(1 2 3, 4 5 6, 6 7 8)', 0.5));", "execution_result": [["POINT(3.5 4.5 5.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3274, "question_en": "Interpolate the 3D linestring LINESTRING(1 2 3, 4 5 6, 6 7 8) with a ratio parameter of 0.5 and return the WKT representation with SRID information."}
{"id": 628, "function": "ST_LineInterpolatePoint", "question": "以EWKT格式输出三维折线LINESTRING(1 2 3, 4 5 6, 6 7 8)上距离起点占总长度50%处的插值点坐标。", "sql": "SELECT ST_AsEWKT(ST_LineInterpolatePoint('LINESTRING(1 2 3, 4 5 6, 6 7 8)', 0.5));", "execution_result": [["POINT(3.5 4.5 5.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3275, "question_en": "Output the coordinates of the interpolated point at 50% of the total length from the start point on the 3D linestring LINESTRING(1 2 3, 4 5 6, 6 7 8) in EWKT format."}
{"id": 629, "function": "ST_LineInterpolatePoint", "question": "在由点(1 2)、(4 5)、(6 7)构成的折线LINESTRING(1 2, 4 5, 6 7)上，找到与点POINT(4 3)最接近的位置对应的比例，然后根据该比例在折线上插值生成新点，并以WKT格式输出该点的坐标。", "sql": "SELECT ST_AsText( ST_LineInterpolatePoint( line.geom, ST_LineLocatePoint( line.geom, 'POINT(4 3)'))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') AS geom) AS line;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3276, "question_en": "On the LINESTRING(1 2, 4 5, 6 7) formed by points (1 2), (4 5), (6 7), find the ratio corresponding to the closest position to point POINT(4 3), then interpolate a new point on the linestring based on this ratio, and output the coordinates of this point in WKT format."}
{"id": 629, "function": "ST_LineInterpolatePoint", "question": "给定折线LINESTRING(1 2, 4 5, 6 7)，计算点POINT(4 3)在该折线上的线性参考位置（比例值），并基于此比例值在折线上插值生成一个新点，最终以WKT文本形式输出该插值点的坐标。", "sql": "SELECT ST_AsText( ST_LineInterpolatePoint( line.geom, ST_LineLocatePoint( line.geom, 'POINT(4 3)'))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') AS geom) AS line;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3277, "question_en": "Given the linestring LINESTRING(1 2, 4 5, 6 7), calculate the linear reference position (ratio value) of the point POINT(4 3) on this linestring, then generate a new interpolated point on the linestring based on this ratio value, and finally output the coordinates of the interpolated point in WKT format."}
{"id": 629, "function": "ST_LineInterpolatePoint", "question": "针对由坐标点(1 2)、(4 5)、(6 7)组成的折线LINESTRING(1 2, 4 5, 6 7)，先确定点POINT(4 3)在折线上的投影位置比例，再按该比例在折线上插值生成一个点，最后以WKT格式返回该插值点的坐标文本。", "sql": "SELECT ST_AsText( ST_LineInterpolatePoint( line.geom, ST_LineLocatePoint( line.geom, 'POINT(4 3)'))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') AS geom) AS line;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3278, "question_en": "For the LINESTRING(1 2, 4 5, 6 7) formed by the points (1 2), (4 5), (6 7), first determine the proportional position of the projection of POINT(4 3) on the linestring, then interpolate a point on the linestring at that proportion, and finally return the coordinate text of the interpolated point in WKT format."}
{"id": 629, "function": "ST_LineInterpolatePoint", "question": "输出LINESTRING(1 2, 4 5, 6 7)上距离POINT(4 3)最近的点坐标，结果以WKT字符串格式表示。", "sql": "SELECT ST_AsText( ST_LineInterpolatePoint( line.geom, ST_LineLocatePoint( line.geom, 'POINT(4 3)'))) FROM ( SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') AS geom) AS line;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3279, "question_en": "Output the coordinates of the closest point on LINESTRING(1 2, 4 5, 6 7) to POINT(4 3), with the result in WKT string format."}
{"id": 629, "function": "ST_LineInterpolatePoint", "question": "计算LINESTRING(1 2, 4 5, 6 7)上最接近POINT(4 3)的位置，并返回该位置点的WKT文本表示。", "sql": "SELECT ST_AsText( ST_LineInterpolatePoint( line.geom, ST_LineLocatePoint( line.geom, 'POINT(4 3)'))) FROM ( SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') AS geom) AS line;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3280, "question_en": "Calculate the closest point on LINESTRING(1 2, 4 5, 6 7) to POINT(4 3) and return the WKT representation of that point."}
{"id": 629, "function": "ST_LineInterpolatePoint", "question": "将LINESTRING(1 2, 4 5, 6 7)与POINT(4 3)进行空间关系计算，输出线上最近点坐标的WKT字符串结果。", "sql": "SELECT ST_AsText( ST_LineInterpolatePoint( line.geom, ST_LineLocatePoint( line.geom, 'POINT(4 3)'))) FROM ( SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') AS geom) AS line;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3281, "question_en": "Perform a spatial relationship calculation between LINESTRING(1 2, 4 5, 6 7) and POINT(4 3), and output the WKT string result of the closest point on the line."}
{"id": 630, "function": "ST_3DLineInterpolatePoint", "question": "在三维折线LINESTRING(25 50 70, 100 125 90, 150 190 200)上，按比例0.20（即总长度的20%处）插值计算一个三维点，并以WKT格式输出该点的坐标。", "sql": "SELECT ST_AsText( ST_3DLineInterpolatePoint('LINESTRING(25 50 70, 100 125 90, 150 190 200)', 0.20));", "execution_result": [["POINT Z (59.06758929108215 84.06758929108216 79.0846904776219)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3282, "question_en": "Interpolate a 3D point at the 20% proportion (0.20) along the 3D linestring LINESTRING(25 50 70, 100 125 90, 150 190 200) and output the point's coordinates in WKT format."}
{"id": 630, "function": "ST_3DLineInterpolatePoint", "question": "给定三维折线LINESTRING(25 50 70, 100 125 90, 150 190 200)，使用ST_3DLineInterpolatePoint函数在路径长度的20%位置（参数0.20）处生成一个插值点，返回该点的WKT文本表示。", "sql": "SELECT ST_AsText( ST_3DLineInterpolatePoint('LINESTRING(25 50 70, 100 125 90, 150 190 200)', 0.20));", "execution_result": [["POINT Z (59.06758929108215 84.06758929108216 79.0846904776219)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3283, "question_en": "Given the 3D linestring LINESTRING(25 50 70, 100 125 90, 150 190 200), use the ST_3DLineInterpolatePoint function to generate an interpolated point at 20% along the path length (parameter 0.20) and return the WKT representation of this point."}
{"id": 630, "function": "ST_3DLineInterpolatePoint", "question": "对三维折线LINESTRING(25 50 70, 100 125 90, 150 190 200)执行线性插值，参数0.20表示从起点开始20%路径长度的位置，输出该位置处三维点的WKT格式坐标文本。", "sql": "SELECT ST_AsText( ST_3DLineInterpolatePoint('LINESTRING(25 50 70, 100 125 90, 150 190 200)', 0.20));", "execution_result": [["POINT Z (59.06758929108215 84.06758929108216 79.0846904776219)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3284, "question_en": "Perform linear interpolation on the 3D linestring LINESTRING(25 50 70, 100 125 90, 150 190 200) with parameter 0.20 representing the position 20% along the path from the start point, and output the WKT-format coordinate of the 3D point at that location."}
{"id": 630, "function": "ST_3DLineInterpolatePoint", "question": "输出三维线段LINESTRING(25 50 70, 100 125 90, 150 190 200)在比例参数0.20处插值得到的三维点的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_3DLineInterpolatePoint('LINESTRING(25 50 70, 100 125 90, 150 190 200)', 0.20));", "execution_result": [["POINT Z (59.06758929108215 84.06758929108216 79.0846904776219)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3285, "question_en": "Output the WKT string representation of the 3D point interpolated at the fraction parameter 0.20 from the 3D linestring LINESTRING(25 50 70, 100 125 90, 150 190 200)."}
{"id": 630, "function": "ST_3DLineInterpolatePoint", "question": "将三维线段LINESTRING(25 50 70, 100 125 90, 150 190 200)按总长度20%的位置进行三维线性插值，返回插值点的WKT格式文本。", "sql": "SELECT ST_AsText( ST_3DLineInterpolatePoint('LINESTRING(25 50 70, 100 125 90, 150 190 200)', 0.20));", "execution_result": [["POINT Z (59.06758929108215 84.06758929108216 79.0846904776219)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3286, "question_en": "Perform a 3D linear interpolation at the 20% position along the total length of the 3D linestring LINESTRING(25 50 70, 100 125 90, 150 190 200) and return the interpolated point in WKT format."}
{"id": 630, "function": "ST_3DLineInterpolatePoint", "question": "以WKT字符串形式返回三维线段LINESTRING(25 50 70, 100 125 90, 150 190 200)在0.20比例参数处（即从起点开始20%线段总长度的位置）插值生成的三维坐标点。", "sql": "SELECT ST_AsText( ST_3DLineInterpolatePoint('LINESTRING(25 50 70, 100 125 90, 150 190 200)', 0.20));", "execution_result": [["POINT Z (59.06758929108215 84.06758929108216 79.0846904776219)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3287, "question_en": "Return the 3D coordinate point interpolated at the 0.20 scale parameter (i.e., 20% of the total length from the start point) along the 3D linestring LINESTRING(25 50 70, 100 125 90, 150 190 200) as a WKT string."}
{"id": 631, "function": "ST_LineInterpolatePoints", "question": "在由坐标点(25 50)、(100 125)、(150 190)构成的折线LINESTRING上，按照0.20的比例参数插值生成点，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoints('LINESTRING(25 50, 100 125, 150 190)', 0.20));", "execution_result": [["MULTIPOINT((51.5974135047432 76.5974135047432),(78.1948270094864 103.1948270094864),(104.13216318644639 130.37181214238032),(127.0660815932232 160.18590607119015),(150 190))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3288, "question_en": "On the LINESTRING formed by coordinate points (25 50), (100 125), (150 190), interpolate points at a ratio parameter of 0.20 and output the result in WKT format."}
{"id": 631, "function": "ST_LineInterpolatePoints", "question": "对LINESTRING(25 50, 100 125, 150 190)这条折线执行线性插值操作，插值比例为0.20，返回插值点的WKT文本表示。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoints('LINESTRING(25 50, 100 125, 150 190)', 0.20));", "execution_result": [["MULTIPOINT((51.5974135047432 76.5974135047432),(78.1948270094864 103.1948270094864),(104.13216318644639 130.37181214238032),(127.0660815932232 160.18590607119015),(150 190))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3289, "question_en": "Perform linear interpolation on the LINESTRING(25 50, 100 125, 150 190) at an interpolation ratio of 0.20 and return the WKT representation of the interpolated point."}
{"id": 631, "function": "ST_LineInterpolatePoints", "question": "使用ST_LineInterpolatePoints函数，在由(25 50)、(100 125)、(150 190)三个顶点定义的折线中，计算并返回距离起点20%总长度的插值点坐标，输出为WKT格式。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoints('LINESTRING(25 50, 100 125, 150 190)', 0.20));", "execution_result": [["MULTIPOINT((51.5974135047432 76.5974135047432),(78.1948270094864 103.1948270094864),(104.13216318644639 130.37181214238032),(127.0660815932232 160.18590607119015),(150 190))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3290, "question_en": "Using the ST_LineInterpolatePoints function, calculate and return the coordinates of the interpolated point at 20% of the total length from the start point along the polyline defined by vertices (25 50), (100 125), and (150 190), output in WKT format."}
{"id": 631, "function": "ST_LineInterpolatePoints", "question": "输出在LINESTRING(25 50, 100 125, 150 190)上按0.20比例插值生成的点集合的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoints('LINESTRING(25 50, 100 125, 150 190)', 0.20));", "execution_result": [["MULTIPOINT((51.5974135047432 76.5974135047432),(78.1948270094864 103.1948270094864),(104.13216318644639 130.37181214238032),(127.0660815932232 160.18590607119015),(150 190))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3291, "question_en": "Output the WKT string representation of the point set generated by interpolating at a 0.20 ratio along LINESTRING(25 50, 100 125, 150 190)."}
{"id": 631, "function": "ST_LineInterpolatePoints", "question": "将LINESTRING(25 50, 100 125, 150 190)按总长度20%的位置进行插值后，输出所得几何点的WKT文本格式。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoints('LINESTRING(25 50, 100 125, 150 190)', 0.20));", "execution_result": [["MULTIPOINT((51.5974135047432 76.5974135047432),(78.1948270094864 103.1948270094864),(104.13216318644639 130.37181214238032),(127.0660815932232 160.18590607119015),(150 190))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3292, "question_en": "Interpolate the LINESTRING(25 50, 100 125, 150 190) at 20% of its total length and output the resulting geometric point in WKT format."}
{"id": 631, "function": "ST_LineInterpolatePoints", "question": "以WKT字符串形式返回在折线LINESTRING(25 50, 100 125, 150 190)上距离起点20%总长度处插值产生的点对象。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoints('LINESTRING(25 50, 100 125, 150 190)', 0.20));", "execution_result": [["MULTIPOINT((51.5974135047432 76.5974135047432),(78.1948270094864 103.1948270094864),(104.13216318644639 130.37181214238032),(127.0660815932232 160.18590607119015),(150 190))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3293, "question_en": "Return the point object interpolated at 20% of the total length from the start point on the linestring LINESTRING(25 50, 100 125, 150 190) as a WKT string."}
{"id": 632, "function": "ST_LineLocatePoint", "question": "基于LINESTRING(1 2, 3 4)这条线段（作为街道），对x轴1到3和y轴2到4的交叉组合点（每个点x坐标乘以1.01，y坐标乘以1.03）生成房屋位置，筛选距离线段0.2单位内的点，输出其WKT格式及通过线性插值计算的门牌号（起始号10，结束号20）。", "sql": "SELECT ST_AsText(house_loc) As as_text_house_loc,\n        startstreet_num +\n                CAST( (endstreet_num - startstreet_num)\n                        * ST_LineLocatePoint(street_line, house_loc) As integer) As street_num\nFROM\n(SELECT ST_GeomFromText('LINESTRING(1 2, 3 4)') As street_line,\n        ST_Point(x*1.01,y*1.03) As house_loc, 10 As startstreet_num,\n                20 As endstreet_num\nFROM generate_series(1,3) x CROSS JOIN generate_series(2,4) As y)\nAs foo\nWHERE ST_DWithin(street_line, house_loc, 0.2);", "execution_result": [["POINT(1.01 2.06)", 10], ["POINT(2.02 3.09)", 15], ["POINT(3.03 4.12)", 20]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3294, "question_en": "Generate house locations based on the LINESTRING(1 2, 3 4) (as a street) for all cross-combination points of x-axis 1 to 3 and y-axis 2 to 4 (each point's x-coordinate multiplied by 1.01, y-coordinate multiplied by 1.03), filter points within 0.2 units of the line segment, and output their WKT format along with house numbers calculated via linear interpolation (starting number 10, ending number 20)."}
{"id": 632, "function": "ST_LineLocatePoint", "question": "用LINESTRING(1 2, 3 4)作为参考街道线，计算由x=1~3和y=2~4生成的缩放点（x*1.01, y*1.03）中距离街道线0.2单位内的点，返回其WKT文本及基于线段位置比例插值的门牌号（从10到20）。", "sql": "SELECT ST_AsText(house_loc) As as_text_house_loc,\n        startstreet_num +\n                CAST( (endstreet_num - startstreet_num)\n                        * ST_LineLocatePoint(street_line, house_loc) As integer) As street_num\nFROM\n(SELECT ST_GeomFromText('LINESTRING(1 2, 3 4)') As street_line,\n        ST_Point(x*1.01,y*1.03) As house_loc, 10 As startstreet_num,\n                20 As endstreet_num\nFROM generate_series(1,3) x CROSS JOIN generate_series(2,4) As y)\nAs foo\nWHERE ST_DWithin(street_line, house_loc, 0.2);", "execution_result": [["POINT(1.01 2.06)", 10], ["POINT(2.02 3.09)", 15], ["POINT(3.03 4.12)", 20]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3295, "question_en": "Using LINESTRING(1 2, 3 4) as the reference street line, calculate the scaled points (x*1.01, y*1.03) generated from x=1~3 and y=2~4 that are within 0.2 units of the street line, and return their WKT text along with interpolated house numbers (from 10 to 20) based on the line segment position ratio."}
{"id": 632, "function": "ST_LineLocatePoint", "question": "在LINESTRING(1 2, 3 4)线段附近0.2单位范围内，查找由x轴1~3和y轴2~4交叉生成的缩放点（x*1.01, y*1.03），输出这些点的WKT表示，并依据在线段上的位置比例计算门牌号（起始10，终止20）。", "sql": "SELECT ST_AsText(house_loc) As as_text_house_loc,\n        startstreet_num +\n                CAST( (endstreet_num - startstreet_num)\n                        * ST_LineLocatePoint(street_line, house_loc) As integer) As street_num\nFROM\n(SELECT ST_GeomFromText('LINESTRING(1 2, 3 4)') As street_line,\n        ST_Point(x*1.01,y*1.03) As house_loc, 10 As startstreet_num,\n                20 As endstreet_num\nFROM generate_series(1,3) x CROSS JOIN generate_series(2,4) As y)\nAs foo\nWHERE ST_DWithin(street_line, house_loc, 0.2);", "execution_result": [["POINT(1.01 2.06)", 10], ["POINT(2.02 3.09)", 15], ["POINT(3.03 4.12)", 20]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3296, "question_en": "Find the scaled points (x*1.01, y*1.03) within 0.2 units of the LINESTRING(1 2, 3 4) line segment, generated by the intersection of x-axis 1~3 and y-axis 2~4. Output the WKT representation of these points and calculate house numbers (starting at 10, ending at 20) based on their proportional position along the line segment."}
{"id": 632, "function": "ST_LineLocatePoint", "question": "输出满足与街道折线LINESTRING(1 2, 3 4)距离在0.2以内的所有点（由x值乘以1.01作为X坐标，y值乘以1.03作为Y坐标生成，x范围为1到3，y的范围为2到4）的WKT字符串表示，以及基于起点门牌号10和终点门牌号20按线性插值计算得到的街道门牌号整数值。", "sql": "SELECT ST_AsText(house_loc) As as_text_house_loc,\n        startstreet_num +\n                CAST( (endstreet_num - startstreet_num)\n                        * ST_LineLocatePoint(street_line, house_loc) As integer) As street_num\nFROM\n(SELECT ST_GeomFromText('LINESTRING(1 2, 3 4)') As street_line,\n        ST_Point(x*1.01,y*1.03) As house_loc, 10 As startstreet_num,\n                20 As endstreet_num\nFROM generate_series(1,3) x CROSS JOIN generate_series(2,4) As y)\nAs foo\nWHERE ST_DWithin(street_line, house_loc, 0.2);", "execution_result": [["POINT(1.01 2.06)", 10], ["POINT(2.02 3.09)", 15], ["POINT(3.03 4.12)", 20]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3297, "question_en": "Output the WKT string representations of all points (generated with x multiplied by 1.01 as X-coordinate and y multiplied by 1.03 as Y-coordinate, where x ranges from 1 to 3 and y ranges from 2 to 4) that are within a distance of 0.2 from the street polyline LINESTRING(1 2, 3 4), along with the integer street number values calculated by linear interpolation based on the starting house number 10 and ending house number 20."}
{"id": 632, "function": "ST_LineLocatePoint", "question": "如何将x取值范围1到3、y取值范围2到4生成的二维点（X=x*1.01，Y=y*1.03）中，筛选出与表示街道的线段LINESTRING(1 2, 3 4)距离不超过0.2的点，并返回这些点的WKT文本格式及线性插值门牌号（插值范围10到20）？", "sql": "SELECT ST_AsText(house_loc) As as_text_house_loc,\n        startstreet_num +\n                CAST( (endstreet_num - startstreet_num)\n                        * ST_LineLocatePoint(street_line, house_loc) As integer) As street_num\nFROM\n(SELECT ST_GeomFromText('LINESTRING(1 2, 3 4)') As street_line,\n        ST_Point(x*1.01,y*1.03) As house_loc, 10 As startstreet_num,\n                20 As endstreet_num\nFROM generate_series(1,3) x CROSS JOIN generate_series(2,4) As y)\nAs foo\nWHERE ST_DWithin(street_line, house_loc, 0.2);", "execution_result": [["POINT(1.01 2.06)", 10], ["POINT(2.02 3.09)", 15], ["POINT(3.03 4.12)", 20]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3298, "question_en": "How to filter points (X=x*1.01, Y=y*1.03) generated from x range 1 to 3 and y range 2 to 4, where the distance to the street line LINESTRING(1 2, 3 4) does not exceed 0.2, and return these points in WKT format along with their linearly interpolated house numbers (interpolation range 10 to 20)?"}
{"id": 632, "function": "ST_LineLocatePoint", "question": "有一条街道线段为 LINESTRING(1 2, 3 4)，起始门牌号为 10，结束门牌号为 20。现在有一批房屋点，其坐标通过 x*1.01, y*1.03 构造生成，x 的取值为 1 到 3，y 的取值为 2 到 4。请找出所有距离这条街道线段在 0.2 米以内的房屋位置，并按照房屋在线段上的投影位置，按比例插值得到其对应的门牌号，结果中需返回每个房屋点的几何坐标（文本形式）以及计算后的门牌号（为整数值）。", "sql": "SELECT ST_AsText(house_loc) AS as_text_house_loc, startstreet_num + CAST( (endstreet_num - startstreet_num) * ST_LineLocatePoint(street_line, house_loc) AS integer) AS street_num \nFROM (\n  SELECT ST_GeomFromText('LINESTRING(1 2, 3 4)') AS street_line, ST_Point(x*1.01,y*1.03) AS house_loc, 10 AS startstreet_num, 20 AS endstreet_num \n  FROM generate_series(1,3) x \n  CROSS JOIN generate_series(2,4) AS y) AS foo \n  WHERE ST_DWithin(street_line, house_loc, 0.2);", "execution_result": [["POINT(1.01 2.06)", 10], ["POINT(2.02 3.09)", 15], ["POINT(3.03 4.12)", 20]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3299, "question_en": "There is a street segment defined as LINESTRING(1 2, 3 4), with a starting house number of 10 and an ending house number of 20. Given a set of house points generated by coordinates x*1.01, y*1.03, where x ranges from 1 to 3 and y ranges from 2 to 4, find all house locations within 0.2 meters of this street segment. For each qualifying house, calculate its corresponding house number by proportionally interpolating its projected position on the segment (rounded to an integer), and return the geometric coordinates (as text) and the computed house number in the results."}
{"id": 633, "function": "ST_LineLocatePoint", "question": "在由LINESTRING(1 2, 4 5, 6 7)构成的折线上，找到与POINT(4 3)最接近的位置对应的比例值，然后根据该比例值在折线上插值出一个点，并以WKT格式输出该插值点。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoint(foo.the_line, ST_LineLocatePoint(foo.the_line, ST_GeomFromText('POINT(4 3)')))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') As the_line) As foo;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3300, "question_en": "On the polyline formed by LINESTRING(1 2, 4 5, 6 7), find the proportional value corresponding to the closest position to POINT(4 3), then interpolate a point on the polyline based on this proportional value, and output the interpolated point in WKT format."}
{"id": 633, "function": "ST_LineLocatePoint", "question": "给定折线LINESTRING(1 2, 4 5, 6 7)，计算POINT(4 3)在该折线上的投影位置比例，并基于该比例在折线上生成一个插值点，最后以WKT文本形式返回该插值点的坐标。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoint(foo.the_line, ST_LineLocatePoint(foo.the_line, ST_GeomFromText('POINT(4 3)')))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') As the_line) As foo;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3301, "question_en": "Given the linestring LINESTRING(1 2, 4 5, 6 7), calculate the proportional position of the projection of POINT(4 3) on the linestring, generate an interpolated point on the linestring based on this proportion, and return the coordinates of the interpolated point in WKT format."}
{"id": 633, "function": "ST_LineLocatePoint", "question": "针对折线LINESTRING(1 2, 4 5, 6 7)，先通过ST_LineLocatePoint函数确定POINT(4 3)在折线上的线性参考位置（比例值），再使用ST_LineInterpolatePoint函数按此比例值在折线上插值生成新点，最终输出该点的WKT表示。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoint(foo.the_line, ST_LineLocatePoint(foo.the_line, ST_GeomFromText('POINT(4 3)')))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') As the_line) As foo;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3302, "question_en": "For the linestring LINESTRING(1 2, 4 5, 6 7), first determine the linear reference position (ratio) of POINT(4 3) on the linestring using the ST_LineLocatePoint function, then generate a new interpolated point on the linestring at this ratio using ST_LineInterpolatePoint, and finally output the WKT representation of this point."}
{"id": 633, "function": "ST_LineLocatePoint", "question": "输出LINESTRING(1 2, 4 5, 6 7)上距离POINT(4 3)最近的点，并将结果转换为WKT字符串格式。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoint(foo.the_line, ST_LineLocatePoint(foo.the_line, ST_GeomFromText('POINT(4 3)')))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') As the_line) As foo;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3303, "question_en": "Output the point on LINESTRING(1 2, 4 5, 6 7) closest to POINT(4 3) and convert the result to WKT string format."}
{"id": 633, "function": "ST_LineLocatePoint", "question": "计算LINESTRING(1 2, 4 5, 6 7)上最接近POINT(4 3)的位置，并返回该位置插值点的WKT文本表示。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoint(foo.the_line, ST_LineLocatePoint(foo.the_line, ST_GeomFromText('POINT(4 3)')))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') As the_line) As foo;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3304, "question_en": "Calculate the closest point on LINESTRING(1 2, 4 5, 6 7) to POINT(4 3) and return the WKT representation of the interpolated point."}
{"id": 633, "function": "ST_LineLocatePoint", "question": "将LINESTRING(1 2, 4 5, 6 7)上距离POINT(4 3)最近的点转换为WKT格式的字符串输出。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoint(foo.the_line, ST_LineLocatePoint(foo.the_line, ST_GeomFromText('POINT(4 3)')))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') As the_line) As foo;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3305, "question_en": "Convert the point on LINESTRING(1 2, 4 5, 6 7) closest to POINT(4 3) into a WKT format string output."}
{"id": 635, "function": "ST_LineSubstring", "question": "在LINESTRING(25 50, 100 125, 150 190)这条折线上，从起点算起0.333比例处到0.333比例处截取子线段，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(25 50, 100 125, 150 190)', 0.333, 0.333));", "execution_result": [["POINT(69.28469348539744 94.28469348539744)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3306, "question_en": "On the LINESTRING(25 50, 100 125, 150 190), extract a sub-line segment from 0.333 to 0.333 proportion from the start point and output the result in WKT format."}
{"id": 635, "function": "ST_LineSubstring", "question": "对LINESTRING(25 50, 100 125, 150 190)这条由三个坐标点组成的折线，执行ST_LineSubstring操作，截取起点比例0.333至终点比例0.333之间的部分，并通过ST_AsText函数输出WKT文本。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(25 50, 100 125, 150 190)', 0.333, 0.333));", "execution_result": [["POINT(69.28469348539744 94.28469348539744)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3307, "question_en": "For the LINESTRING(25 50, 100 125, 150 190) composed of three coordinate points, perform the ST_LineSubstring operation to extract the segment between start fraction 0.333 and end fraction 0.333, and output the WKT text via the ST_AsText function."}
{"id": 635, "function": "ST_LineSubstring", "question": "给定折线LINESTRING(25 50, 100 125, 150 190)，使用ST_LineSubstring函数截取从总长度0.333倍位置到0.333倍位置的子线段（参数均为双精度浮点数），最终以WKT文本格式返回结果。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(25 50, 100 125, 150 190)', 0.333, 0.333));", "execution_result": [["POINT(69.28469348539744 94.28469348539744)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3308, "question_en": "Given the linestring LINESTRING(25 50, 100 125, 150 190), use the ST_LineSubstring function to extract a substring from 0.333 to 0.333 times the total length (parameters are double precision), and return the result in WKT text format."}
{"id": 635, "function": "ST_LineSubstring", "question": "输出LINESTRING(25 50, 100 125, 150 190)在起始比例0.333和结束比例0.333处截取的子线段的WKT字符串。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(25 50, 100 125, 150 190)', 0.333, 0.333));", "execution_result": [["POINT(69.28469348539744 94.28469348539744)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3309, "question_en": "Output the WKT string of the sub-segment of LINESTRING(25 50, 100 125, 150 190) extracted between the start ratio of 0.333 and the end ratio of 0.333."}
{"id": 635, "function": "ST_LineSubstring", "question": "将LINESTRING(25 50, 100 125, 150 190)从0.333比例位置截取到0.333比例位置，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(25 50, 100 125, 150 190)', 0.333, 0.333));", "execution_result": [["POINT(69.28469348539744 94.28469348539744)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3310, "question_en": "Extract the LINESTRING(25 50, 100 125, 150 190) from the 0.333 proportional position to the 0.333 proportional position and output the result in WKT format."}
{"id": 635, "function": "ST_LineSubstring", "question": "以WKT字符串形式返回LINESTRING(25 50, 100 125, 150 190)在起始和结束比例均为0.333时截取的子线段。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(25 50, 100 125, 150 190)', 0.333, 0.333));", "execution_result": [["POINT(69.28469348539744 94.28469348539744)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3311, "question_en": "Return the substring of LINESTRING(25 50, 100 125, 150 190) as a WKT string when both the start and end fractions are 0.333."}
{"id": 636, "function": "ST_LineSubstring", "question": "对地理类型LINESTRING(-118.2436 34.0522, -71.0570 42.3611)和几何类型LINESTRING(-118.2436 34.0522, -71.0570 42.3611)分别执行线段截取操作，截取比例从0.333到0.666，并将结果以WKT格式输出，保留6位小数。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geography, 0.333, 0.666),6) AS geog_sub , ST_AsText(ST_LineSubstring('LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geometry, 0.333, 0.666),6) AS geom_sub;", "execution_result": [["LINESTRING(-103.911641 38.931128,-87.941787 41.831072)", "LINESTRING(-102.530462 36.819064,-86.817324 39.585927)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3312, "question_en": "Perform a line substring operation on the geographic type LINESTRING(-118.2436 34.0522, -71.0570 42.3611) and the geometric type LINESTRING(-118.2436 34.0522, -71.0570 42.3611), extracting segments from proportion 0.333 to 0.666, and output the results in WKT format with 6 decimal places."}
{"id": 636, "function": "ST_LineSubstring", "question": "如何获取LINESTRING(-118.2436 34.0522, -71.0570 42.3611)在地理坐标系和几何坐标系中，从起点算起33.3%到66.6%位置的子线段，并以WKT文本显示6位小数精度？", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geography, 0.333, 0.666),6) AS geog_sub , ST_AsText(ST_LineSubstring('LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geometry, 0.333, 0.666),6) AS geom_sub;", "execution_result": [["LINESTRING(-103.911641 38.931128,-87.941787 41.831072)", "LINESTRING(-102.530462 36.819064,-86.817324 39.585927)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3313, "question_en": "How to extract the sub-line segment from 33.3% to 66.6% of the LINESTRING(-118.2436 34.0522, -71.0570 42.3611) starting from the origin in both geographic and geometric coordinate systems, and display it as WKT text with 6 decimal places precision?"}
{"id": 636, "function": "ST_LineSubstring", "question": "使用PostGIS函数ST_LineSubstring分别处理地理类型和几何类型的LINESTRING(-118.2436 34.0522, -71.0570 42.3611)，截取该线段的中间三分之一部分（0.333至0.666比例区间），并以6位小数精度的WKT格式返回结果。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geography, 0.333, 0.666),6) AS geog_sub , ST_AsText(ST_LineSubstring('LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geometry, 0.333, 0.666),6) AS geom_sub;", "execution_result": [["LINESTRING(-103.911641 38.931128,-87.941787 41.831072)", "LINESTRING(-102.530462 36.819064,-86.817324 39.585927)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3314, "question_en": "Use the PostGIS function ST_LineSubstring to process both geography and geometry types of LINESTRING(-118.2436 34.0522, -71.0570 42.3611), extract the middle third segment (proportional range 0.333 to 0.666), and return the result in WKT format with 6 decimal places precision."}
{"id": 636, "function": "ST_LineSubstring", "question": "输出LINESTRING(-118.2436 34.0522, -71.0570 42.3611)作为geography类型和geometry类型时，分别截取0.333到0.666比例段后的WKT字符串，并保留6位小数。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geography, 0.333, 0.666),6) AS geog_sub , ST_AsText(ST_LineSubstring('LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geometry, 0.333, 0.666),6) AS geom_sub;", "execution_result": [["LINESTRING(-103.911641 38.931128,-87.941787 41.831072)", "LINESTRING(-102.530462 36.819064,-86.817324 39.585927)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3315, "question_en": "Output the WKT strings of the LINESTRING(-118.2436 34.0522, -71.0570 42.3611) as geography and geometry types after extracting the segment from 0.333 to 0.666 proportion, retaining 6 decimal places."}
{"id": 636, "function": "ST_LineSubstring", "question": "将LINESTRING(-118.2436 34.0522, -71.0570 42.3611)分别转换为geography和geometry类型后，截取从起点算起33.3%到66.6%位置的子线段，输出这两个子线段的WKT表示，且坐标值保留6位小数。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geography, 0.333, 0.666),6) AS geog_sub , ST_AsText(ST_LineSubstring('LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geometry, 0.333, 0.666),6) AS geom_sub;", "execution_result": [["LINESTRING(-103.911641 38.931128,-87.941787 41.831072)", "LINESTRING(-102.530462 36.819064,-86.817324 39.585927)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3316, "question_en": "Convert the LINESTRING(-118.2436 34.0522, -71.0570 42.3611) to both geography and geometry types, then extract the sub-line segments from 33.3% to 66.6% of their lengths from the start point, and output the WKT representations of these two sub-segments with coordinates rounded to 6 decimal places."}
{"id": 636, "function": "ST_LineSubstring", "question": "如何以WKT格式输出LINESTRING(-118.2436 34.0522, -71.0570 42.3611)在geography和geometry两种空间类型下，按0.333起始比例和0.666结束比例截取的子线段，并要求坐标精度为6位小数？", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geography, 0.333, 0.666),6) AS geog_sub , ST_AsText(ST_LineSubstring('LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geometry, 0.333, 0.666),6) AS geom_sub;", "execution_result": [["LINESTRING(-103.911641 38.931128,-87.941787 41.831072)", "LINESTRING(-102.530462 36.819064,-86.817324 39.585927)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3317, "question_en": "How to output the substring of LINESTRING(-118.2436 34.0522, -71.0570 42.3611) in WKT format for both geography and geometry spatial types, clipped between start fraction 0.333 and end fraction 0.666, with coordinate precision set to 6 decimal places?"}
{"id": 637, "function": "ST_LineSubstring", "question": "对于折线LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)，提取从总长度比例0.333到0.666之间的子线段，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)', 0.333, 0.666));", "execution_result": [["LINESTRING(45.17311810399485 45.74337011202746,50 20,90 80,112.97593050157862 49.36542599789519)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3318, "question_en": "For the linestring LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150), extract the sub-segment between the relative length ratios 0.333 and 0.666, and output the result in WKT format."}
{"id": 637, "function": "ST_LineSubstring", "question": "如何将折线LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)按照起点比例0.333和终点比例0.666截取子线段，并返回其WKT文本表示？", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)', 0.333, 0.666));", "execution_result": [["LINESTRING(45.17311810399485 45.74337011202746,50 20,90 80,112.97593050157862 49.36542599789519)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3319, "question_en": "How to extract a sub-segment from the linestring LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150) using start fraction 0.333 and end fraction 0.666, and return its WKT representation?"}
{"id": 637, "function": "ST_LineSubstring", "question": "使用ST_LineSubstring函数处理折线LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)，参数0.333表示起始位置比例，0.666表示结束位置比例，最终输出截取后的子线段的WKT格式文本。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)', 0.333, 0.666));", "execution_result": [["LINESTRING(45.17311810399485 45.74337011202746,50 20,90 80,112.97593050157862 49.36542599789519)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3320, "question_en": "Process the linestring LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150) using the ST_LineSubstring function with 0.333 as the start fraction and 0.666 as the end fraction, then output the WKT format text of the extracted substring."}
{"id": 637, "function": "ST_LineSubstring", "question": "输出LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)在比例位置0.333到0.666之间截取的子线段的WKT字符串。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)', 0.333, 0.666));", "execution_result": [["LINESTRING(45.17311810399485 45.74337011202746,50 20,90 80,112.97593050157862 49.36542599789519)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3321, "question_en": "Output the WKT string of the sub-segment extracted from the LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150) between the proportional positions 0.333 and 0.666."}
{"id": 637, "function": "ST_LineSubstring", "question": "将LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)从起点算起33.3%到66.6%位置的部分转换为WKT格式的文本输出。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)', 0.333, 0.666));", "execution_result": [["LINESTRING(45.17311810399485 45.74337011202746,50 20,90 80,112.97593050157862 49.36542599789519)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3322, "question_en": "Convert the portion from 33.3% to 66.6% of the LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150) starting from the beginning into WKT format text output."}
{"id": 637, "function": "ST_LineSubstring", "question": "以WKT字符串形式返回五节点折线LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)在参数0.333(起始比例)和0.666(结束比例)之间截取的几何片段。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)', 0.333, 0.666));", "execution_result": [["LINESTRING(45.17311810399485 45.74337011202746,50 20,90 80,112.97593050157862 49.36542599789519)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3323, "question_en": "Return the geometric segment of the five-node linestring LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150) between the start ratio 0.333 and end ratio 0.666 as a WKT string."}
{"id": 638, "function": "ST_LocateAlong", "question": "在MULTILINESTRINGM对象中，该对象由两条线段组成，第一条线段由点(1 2 3)、(3 4 2)、(9 4 3)构成，第二条线段由点(1 2 3)、(5 4 5)构成，查找所有M值为3的点，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_LocateAlong( 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'::geometry, 3 ));", "execution_result": [["MULTIPOINT M ((1 2 3),(9 4 3),(1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3324, "question_en": "In a MULTILINESTRINGM object composed of two line segments, the first segment consists of points (1 2 3), (3 4 2), (9 4 3), and the second segment consists of points (1 2 3), (5 4 5), find all points with an M value of 3 and output the result in WKT format."}
{"id": 638, "function": "ST_LocateAlong", "question": "给定一个MULTILINESTRINGM几何对象，该对象包含两条线段，第一条线段的坐标序列为(1 2 3)、(3 4 2)、(9 4 3)，第二条线段的坐标序列为(1 2 3)、(5 4 5)，使用ST_LocateAlong函数提取其中M值等于3的所有点，并通过ST_AsText函数以WKT文本格式返回结果。", "sql": "SELECT ST_AsText( ST_LocateAlong( 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'::geometry, 3 ));", "execution_result": [["MULTIPOINT M ((1 2 3),(9 4 3),(1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3325, "question_en": "Given a MULTILINESTRINGM geometry object containing two line segments, the first with coordinate sequence (1 2 3), (3 4 2), (9 4 3), and the second with sequence (1 2 3), (5 4 5), use the ST_LocateAlong function to extract all points where the M value equals 3 and return the result in WKT text format via ST_AsText."}
{"id": 638, "function": "ST_LocateAlong", "question": "针对MULTILINESTRINGM类型的几何对象，该对象由两部分组成：第一部分是三个点(1 2 3)、(3 4 2)、(9 4 3)连成的折线，第二部分是两个点(1 2 3)、(5 4 5)连成的折线，查询该对象中所有M值为3的几何点，并将结果转换为WKT文本格式输出。", "sql": "SELECT ST_AsText( ST_LocateAlong( 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'::geometry, 3 ));", "execution_result": [["MULTIPOINT M ((1 2 3),(9 4 3),(1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3326, "question_en": "For a MULTILINESTRINGM geometry object consisting of two parts: the first part is a polyline connecting three points (1 2 3), (3 4 2), (9 4 3), and the second part is a polyline connecting two points (1 2 3), (5 4 5), query all geometric points with an M-value of 3 and output the result in WKT text format."}
{"id": 638, "function": "ST_LocateAlong", "question": "输出在M值为3的MULTILINESTRINGM对象'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'上定位到的所有点的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_LocateAlong( 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'::geometry, 3 ));", "execution_result": [["MULTIPOINT M ((1 2 3),(9 4 3),(1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3327, "question_en": "Output the WKT string representations of all points located on the MULTILINESTRINGM object 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))' where the M value is 3."}
{"id": 638, "function": "ST_LocateAlong", "question": "将MULTILINESTRINGM类型几何体'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'中所有M值等于3的位置点转换为WKT格式文本输出。", "sql": "SELECT ST_AsText( ST_LocateAlong( 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'::geometry, 3 ));", "execution_result": [["MULTIPOINT M ((1 2 3),(9 4 3),(1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3328, "question_en": "Extract all points with M-value equal to 3 from the MULTILINESTRINGM geometry 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))' and output them as WKT format text."}
{"id": 638, "function": "ST_LocateAlong", "question": "查询带有M值的多线段'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'中M值为3的所有点，并以WKT文本格式返回结果。", "sql": "SELECT ST_AsText( ST_LocateAlong( 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'::geometry, 3 ));", "execution_result": [["MULTIPOINT M ((1 2 3),(9 4 3),(1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3329, "question_en": "Query all points with an M-value of 3 in the multilinestring 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))' and return the result in WKT text format."}
{"id": 639, "function": "ST_LocateBetween", "question": "在M值为1.5到3的范围内，从MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))这个多线几何对象中提取子线段，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_LocateBetween( 'MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))':: geometry, 1.5, 3 ));", "execution_result": [["GEOMETRYCOLLECTION M (LINESTRING M (1 2 3,3 4 2,9 4 3),POINT M (1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3330, "question_en": "Extract sub-lines within the M-value range of 1.5 to 3 from the MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5)) geometry and output the result in WKT format."}
{"id": 639, "function": "ST_LocateBetween", "question": "给定一个由两条线组成的多线几何对象MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))，其中每条线的点都带有M值，提取M值在1.5到3之间的部分，并以WKT文本格式返回。", "sql": "SELECT ST_AsText( ST_LocateBetween( 'MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))':: geometry, 1.5, 3 ));", "execution_result": [["GEOMETRYCOLLECTION M (LINESTRING M (1 2 3,3 4 2,9 4 3),POINT M (1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3331, "question_en": "Given a multilinestring geometry object MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5)) where each point has an M value, extract the segments with M values between 1.5 and 3 and return them in WKT text format."}
{"id": 639, "function": "ST_LocateBetween", "question": "针对MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))这个包含两条三维线段的几何对象，其中每个点都带有M值，查询M值在1.5到3之间的所有子线段，并将结果转换为WKT格式文本。", "sql": "SELECT ST_AsText( ST_LocateBetween( 'MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))':: geometry, 1.5, 3 ));", "execution_result": [["GEOMETRYCOLLECTION M (LINESTRING M (1 2 3,3 4 2,9 4 3),POINT M (1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3332, "question_en": "For the MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5)) geometry object containing two 3D linestrings with M-values at each point, query all sub-linestrings where the M-values are between 1.5 and 3, and convert the result to WKT format text."}
{"id": 639, "function": "ST_LocateBetween", "question": "输出在M值为1.5到3之间的MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))几何对象中定位到的所有子线段的WKT字符串表示。", "sql": "SELECT ST_AsText( ST_LocateBetween( 'MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))':: geometry, 1.5, 3 ));", "execution_result": [["GEOMETRYCOLLECTION M (LINESTRING M (1 2 3,3 4 2,9 4 3),POINT M (1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3333, "question_en": "Output the WKT string representations of all sub-segments located within the M-values range of 1.5 to 3 in the MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5)) geometry object."}
{"id": 639, "function": "ST_LocateBetween", "question": "将MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))几何对象中M值在1.5和3之间的部分提取出来，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_LocateBetween( 'MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))':: geometry, 1.5, 3 ));", "execution_result": [["GEOMETRYCOLLECTION M (LINESTRING M (1 2 3,3 4 2,9 4 3),POINT M (1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3334, "question_en": "Extract the parts of the MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5)) geometry where the M value is between 1.5 and 3, and output the result in WKT format."}
{"id": 639, "function": "ST_LocateBetween", "question": "以WKT文本形式返回MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))中所有M值介于1.5和3之间的线段的几何表示。", "sql": "SELECT ST_AsText( ST_LocateBetween( 'MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))':: geometry, 1.5, 3 ));", "execution_result": [["GEOMETRYCOLLECTION M (LINESTRING M (1 2 3,3 4 2,9 4 3),POINT M (1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3335, "question_en": "Return the geometric representation in WKT format of all line segments in MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5)) where the M values are between 1.5 and 3."}
{"id": 641, "function": "ST_LocateBetweenElevations", "question": "在三维线段LINESTRING(1 2 3, 4 5 6)上，提取Z坐标值介于2和4之间的部分，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 3, 4 5 6)'::geometry, 2, 4 ));", "execution_result": [["MULTILINESTRING Z ((1 2 3,2 3 4))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3336, "question_en": "Extract the portion of the 3D linestring LINESTRING(1 2 3, 4 5 6) where the Z-coordinate is between 2 and 4, and output the result in WKT format."}
{"id": 641, "function": "ST_LocateBetweenElevations", "question": "给定三维线段LINESTRING(1 2 3, 4 5 6)，使用ST_LocateBetweenElevations函数筛选Z值在2到4范围内的子线段，并通过ST_AsText转换为文本表示。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 3, 4 5 6)'::geometry, 2, 4 ));", "execution_result": [["MULTILINESTRING Z ((1 2 3,2 3 4))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3337, "question_en": "Given the 3D linestring LINESTRING(1 2 3, 4 5 6), use the ST_LocateBetweenElevations function to extract substrings where Z values are between 2 and 4, and convert them to text representation using ST_AsText."}
{"id": 641, "function": "ST_LocateBetweenElevations", "question": "对三维几何对象LINESTRING(1 2 3, 4 5 6)执行高程区间查询，返回Z坐标大于等于2且小于等于4的线段部分，最终输出WKT格式的几何文本。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 3, 4 5 6)'::geometry, 2, 4 ));", "execution_result": [["MULTILINESTRING Z ((1 2 3,2 3 4))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3338, "question_en": "Perform an elevation range query on the 3D geometry object LINESTRING(1 2 3, 4 5 6), returning the segment where the Z-coordinate is greater than or equal to 2 and less than or equal to 4, and output the resulting geometry in WKT format."}
{"id": 641, "function": "ST_LocateBetweenElevations", "question": "输出三维线对象LINESTRING(1 2 3, 4 5 6)在Z值范围2到4之间的部分所对应的WKT字符串。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 3, 4 5 6)'::geometry, 2, 4 ));", "execution_result": [["MULTILINESTRING Z ((1 2 3,2 3 4))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3339, "question_en": "Output the WKT string of the portion of the 3D line object LINESTRING(1 2 3, 4 5 6) where the Z values are between 2 and 4."}
{"id": 641, "function": "ST_LocateBetweenElevations", "question": "将三维线对象LINESTRING(1 2 3, 4 5 6)中Z坐标值在2至4之间的线段提取出来，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 3, 4 5 6)'::geometry, 2, 4 ));", "execution_result": [["MULTILINESTRING Z ((1 2 3,2 3 4))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3340, "question_en": "Extract the segments from the 3D line object LINESTRING(1 2 3, 4 5 6) where the Z-coordinate values are between 2 and 4, and output the result in WKT format."}
{"id": 641, "function": "ST_LocateBetweenElevations", "question": "对三维线对象LINESTRING(1 2 3, 4 5 6)执行高程过滤操作，保留Z值在2到4之间的部分，最终输出结果的WKT文本表示。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 3, 4 5 6)'::geometry, 2, 4 ));", "execution_result": [["MULTILINESTRING Z ((1 2 3,2 3 4))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3341, "question_en": "Perform an elevation filter operation on the 3D line object LINESTRING(1 2 3, 4 5 6), retaining the segments with Z values between 2 and 4, and output the final result in WKT format."}
{"id": 642, "function": "ST_LocateBetweenElevations", "question": "在三维折线LINESTRING(1 2 6, 4 5 -1, 7 8 9)中，提取Z坐标值介于6和9之间的部分，并以WKT格式输出结果。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 6, 4 5 -1, 7 8 9)', 6, 9)) AS ewelev;", "execution_result": [["GEOMETRYCOLLECTION Z (POINT Z (1 2 6),LINESTRING Z (6.1 7.1 6,7 8 9))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3342, "question_en": "Extract the segments from the 3D linestring LINESTRING(1 2 6, 4 5 -1, 7 8 9) where Z-coordinate values are between 6 and 9, and output the result in WKT format."}
{"id": 642, "function": "ST_LocateBetweenElevations", "question": "给定三维折线LINESTRING(1 2 6, 4 5 -1, 7 8 9)，使用ST_LocateBetweenElevations函数筛选出高程值在6到9之间的线段，并通过ST_AsText转换为文本格式。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 6, 4 5 -1, 7 8 9)', 6, 9)) AS ewelev;", "execution_result": [["GEOMETRYCOLLECTION Z (POINT Z (1 2 6),LINESTRING Z (6.1 7.1 6,7 8 9))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3343, "question_en": "Given the 3D linestring LINESTRING(1 2 6, 4 5 -1, 7 8 9), use the ST_LocateBetweenElevations function to filter segments with elevation values between 6 and 9, and convert them to text format using ST_AsText."}
{"id": 642, "function": "ST_LocateBetweenElevations", "question": "对三维折线LINESTRING(1 2 6, 4 5 -1, 7 8 9)执行高程过滤操作，保留Z坐标在6（含）至9（含）之间的几何部分，最终以WKT文本形式返回结果。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 6, 4 5 -1, 7 8 9)', 6, 9)) AS ewelev;", "execution_result": [["GEOMETRYCOLLECTION Z (POINT Z (1 2 6),LINESTRING Z (6.1 7.1 6,7 8 9))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3344, "question_en": "Perform an elevation filter operation on the 3D linestring LINESTRING(1 2 6, 4 5 -1, 7 8 9), retaining the geometric parts where the Z-coordinate is between 6 (inclusive) and 9 (inclusive), and return the result in WKT format."}
{"id": 642, "function": "ST_LocateBetweenElevations", "question": "输出三维线LINESTRING(1 2 6, 4 5 -1, 7 8 9)在Z值范围6到9之间的部分所对应的WKT字符串。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 6, 4 5 -1, 7 8 9)', 6, 9)) AS ewelev;", "execution_result": [["GEOMETRYCOLLECTION Z (POINT Z (1 2 6),LINESTRING Z (6.1 7.1 6,7 8 9))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3345, "question_en": "Output the WKT string of the portion of the 3D line LINESTRING(1 2 6, 4 5 -1, 7 8 9) where the Z-values are between 6 and 9."}
{"id": 642, "function": "ST_LocateBetweenElevations", "question": "将三维线LINESTRING(1 2 6, 4 5 -1, 7 8 9)中Z坐标值介于6和9之间的线段提取出来，并以WKT格式返回结果。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 6, 4 5 -1, 7 8 9)', 6, 9)) AS ewelev;", "execution_result": [["GEOMETRYCOLLECTION Z (POINT Z (1 2 6),LINESTRING Z (6.1 7.1 6,7 8 9))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3346, "question_en": "Extract the segments from the 3D linestring LINESTRING(1 2 6, 4 5 -1, 7 8 9) where the Z-coordinate values are between 6 and 9, and return the result in WKT format."}
{"id": 642, "function": "ST_LocateBetweenElevations", "question": "查询三维线LINESTRING(1 2 6, 4 5 -1, 7 8 9)在高度区间[6,9]内的几何部分，返回结果的WKT文本表示。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 6, 4 5 -1, 7 8 9)', 6, 9)) AS ewelev;", "execution_result": [["GEOMETRYCOLLECTION Z (POINT Z (1 2 6),LINESTRING Z (6.1 7.1 6,7 8 9))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3347, "question_en": "Query the portion of the 3D linestring LINESTRING(1 2 6, 4 5 -1, 7 8 9) within the elevation range [6,9], returning the WKT representation of the result."}
{"id": 643, "function": "ST_InterpolatePoint", "question": "在带有M值的二维线段LINESTRING M (0 0 0, 10 0 20)上，对二维点POINT(5 5)进行线性插值，返回该点在线段上的M值。", "sql": "SELECT ST_InterpolatePoint('LINESTRING M (0 0 0, 10 0 20)', 'POINT(5 5)');", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3348, "question_en": "Perform linear interpolation on the 2D point POINT(5 5) along the 2D linestring with M values LINESTRING M (0 0 0, 10 0 20), and return the M value of the point on the linestring."}
{"id": 643, "function": "ST_InterpolatePoint", "question": "给定带有M值的线段LINESTRING M (0 0 0, 10 0 20)，计算二维点POINT(5 5)在该线段上的线性插值结果，返回该点对应的M值。", "sql": "SELECT ST_InterpolatePoint('LINESTRING M (0 0 0, 10 0 20)', 'POINT(5 5)');", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3349, "question_en": "Given the linestring LINESTRING M (0 0 0, 10 0 20), calculate the linear interpolation result of the 2D point POINT(5 5) on this linestring and return the corresponding M value."}
{"id": 643, "function": "ST_InterpolatePoint", "question": "使用ST_InterpolatePoint函数，在线段LINESTRING M (0 0 0, 10 0 20)上对点POINT(5 5)进行插值，获取该点在线段上的M值。", "sql": "SELECT ST_InterpolatePoint('LINESTRING M (0 0 0, 10 0 20)', 'POINT(5 5)');", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3350, "question_en": "Using the ST_InterpolatePoint function, interpolate the point POINT(5 5) on the linestring LINESTRING M (0 0 0, 10 0 20) to obtain its M value on the linestring."}
{"id": 643, "function": "ST_InterpolatePoint", "question": "输出在带有M值的LINESTRING M (0 0 0, 10 0 20)线段上，对POINT(5 5)进行线性插值后得到的M值结果。", "sql": "SELECT ST_InterpolatePoint('LINESTRING M (0 0 0, 10 0 20)', 'POINT(5 5)');", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3351, "question_en": "Output the M-value result obtained by performing linear interpolation on POINT(5 5) along the LINESTRING M (0 0 0, 10 0 20) segment with M-values."}
{"id": 643, "function": "ST_InterpolatePoint", "question": "输出函数ST_InterpolatePoint处理LINESTRING M (0 0 0, 10 0 20)线段和POINT(5 5)点时的返回值数据类型。", "sql": "SELECT ST_InterpolatePoint('LINESTRING M (0 0 0, 10 0 20)', 'POINT(5 5)');", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3352, "question_en": "Output the return data type of the function ST_InterpolatePoint when processing the LINESTRING M (0 0 0, 10 0 20) segment and the POINT(5 5) point."}
{"id": 643, "function": "ST_InterpolatePoint", "question": "输出当输入为LINESTRING M (0 0 0, 10 0 20)线段和POINT(5 5)点时，ST_InterpolatePoint函数返回的精确数值结果。", "sql": "SELECT ST_InterpolatePoint('LINESTRING M (0 0 0, 10 0 20)', 'POINT(5 5)');", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3353, "question_en": "Output the exact numerical result returned by the ST_InterpolatePoint function when the input is the LINESTRING M (0 0 0, 10 0 20) segment and the POINT(5 5)."}
{"id": 644, "function": "ST_AddMeasure", "question": "对LINESTRING(1 0, 2 0, 4 0)这条折线添加M值（度量值），起始M值为1，结束M值为4，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_AddMeasure( ST_GeomFromEWKT('LINESTRING(1 0, 2 0, 4 0)'),1,4)) AS ewelev;", "execution_result": [["LINESTRING M (1 0 1,2 0 2,4 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3354, "question_en": "Add M-values (measure values) to the LINESTRING(1 0, 2 0, 4 0) with a starting M-value of 1 and an ending M-value of 4, and output the result in WKT format."}
{"id": 644, "function": "ST_AddMeasure", "question": "将LINESTRING(1 0, 2 0, 4 0)转换为带有线性插值M值的几何对象，其中第一个点的M值为1，最后一个点的M值为4，并输出WKT文本表示。", "sql": "SELECT ST_AsText(ST_AddMeasure( ST_GeomFromEWKT('LINESTRING(1 0, 2 0, 4 0)'),1,4)) AS ewelev;", "execution_result": [["LINESTRING M (1 0 1,2 0 2,4 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3355, "question_en": "Convert the LINESTRING(1 0, 2 0, 4 0) into a geometry object with linearly interpolated M values, where the first point has an M value of 1 and the last point has an M value of 4, and output the WKT representation."}
{"id": 644, "function": "ST_AddMeasure", "question": "使用ST_AddMeasure函数为LINESTRING(1 0, 2 0, 4 0)的起点分配M值1，终点分配M值4，中间点按线性插值计算M值，最终以WKT格式返回结果几何体。", "sql": "SELECT ST_AsText(ST_AddMeasure( ST_GeomFromEWKT('LINESTRING(1 0, 2 0, 4 0)'),1,4)) AS ewelev;", "execution_result": [["LINESTRING M (1 0 1,2 0 2,4 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3356, "question_en": "Use the ST_AddMeasure function to assign M-value 1 to the start point and M-value 4 to the end point of LINESTRING(1 0, 2 0, 4 0), with intermediate points calculated by linear interpolation, and return the resulting geometry in WKT format."}
{"id": 644, "function": "ST_AddMeasure", "question": "输出为LINESTRING(1 0, 2 0, 4 0)添加M值范围从1到4后生成的WKT字符串。", "sql": "SELECT ST_AsText(ST_AddMeasure( ST_GeomFromEWKT('LINESTRING(1 0, 2 0, 4 0)'),1,4)) AS ewelev;", "execution_result": [["LINESTRING M (1 0 1,2 0 2,4 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3357, "question_en": "Output the WKT string generated by adding M values ranging from 1 to 4 to LINESTRING(1 0, 2 0, 4 0)."}
{"id": 644, "function": "ST_AddMeasure", "question": "将LINESTRING(1 0, 2 0, 4 0)转换为带有线性插值M值（起始值1，结束值4）的几何对象后，输出其WKT格式文本。", "sql": "SELECT ST_AsText(ST_AddMeasure( ST_GeomFromEWKT('LINESTRING(1 0, 2 0, 4 0)'),1,4)) AS ewelev;", "execution_result": [["LINESTRING M (1 0 1,2 0 2,4 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3358, "question_en": "Convert the LINESTRING(1 0, 2 0, 4 0) into a geometry object with linearly interpolated M values (starting value 1, ending value 4), then output its WKT format text."}
{"id": 644, "function": "ST_AddMeasure", "question": "对LINESTRING(1 0, 2 0, 4 0)执行ST_AddMeasure操作（M值起始1，结束4），并以WKT字符串形式返回结果。", "sql": "SELECT ST_AsText(ST_AddMeasure( ST_GeomFromEWKT('LINESTRING(1 0, 2 0, 4 0)'),1,4)) AS ewelev;", "execution_result": [["LINESTRING M (1 0 1,2 0 2,4 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3359, "question_en": "Perform an ST_AddMeasure operation on LINESTRING(1 0, 2 0, 4 0) (M values start at 1 and end at 4), and return the result as a WKT string."}
{"id": 645, "function": "ST_AddMeasure", "question": "将三维线对象LINESTRING(1 0 4, 2 0 4, 4 0 4)添加M值范围从10到40，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRING(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING ZM (1 0 4 10,2 0 4 20,4 0 4 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3360, "question_en": "Add M values ranging from 10 to 40 to the 3D line object LINESTRING(1 0 4, 2 0 4, 4 0 4) and output the result in WKT format."}
{"id": 645, "function": "ST_AddMeasure", "question": "如何为包含三个顶点(1 0 4)、(2 0 4)、(4 0 4)的三维线对象分配从10到40的线性M值，并返回WKT文本？", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRING(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING ZM (1 0 4 10,2 0 4 20,4 0 4 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3361, "question_en": "How to assign linear M values ranging from 10 to 40 to a 3D line object with vertices (1 0 4), (2 0 4), (4 0 4) and return the WKT text?"}
{"id": 645, "function": "ST_AddMeasure", "question": "使用ST_AddMeasure函数对LINESTRING(1 0 4, 2 0 4, 4 0 4)进行M值插值，起始M值为10，结束M值为40，最终输出几何体的WKT表示。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRING(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING ZM (1 0 4 10,2 0 4 20,4 0 4 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3362, "question_en": "Use the ST_AddMeasure function to interpolate M values for LINESTRING(1 0 4, 2 0 4, 4 0 4), with a starting M value of 10 and ending M value of 40, and output the WKT representation of the resulting geometry."}
{"id": 645, "function": "ST_AddMeasure", "question": "输出为LINESTRING(1 0 4, 2 0 4, 4 0 4)三维线段添加M值范围从10到40后生成的WKT字符串。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRING(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING ZM (1 0 4 10,2 0 4 20,4 0 4 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3363, "question_en": "Output the WKT string of the 3D linestring LINESTRING(1 0 4, 2 0 4, 4 0 4) after adding M values ranging from 10 to 40."}
{"id": 645, "function": "ST_AddMeasure", "question": "将LINESTRING(1 0 4, 2 0 4, 4 0 4)转换为带有M值（起始10，结束40）的线性参考几何体后，输出其WKT文本表示。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRING(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING ZM (1 0 4 10,2 0 4 20,4 0 4 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3364, "question_en": "Convert the LINESTRING(1 0 4, 2 0 4, 4 0 4) into a linear referenced geometry with M values (starting at 10, ending at 40), then output its WKT text representation."}
{"id": 645, "function": "ST_AddMeasure", "question": "对包含三个顶点(1 0 4)、(2 0 4)、(4 0 4)的三维线段应用ST_AddMeasure函数（M值区间10至40），返回结果的WKT格式字符串。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRING(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING ZM (1 0 4 10,2 0 4 20,4 0 4 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3365, "question_en": "Apply the ST_AddMeasure function to a 3D line segment with vertices (1 0 4), (2 0 4), (4 0 4) (M-value range 10 to 40) and return the resulting WKT format string."}
{"id": 646, "function": "ST_AddMeasure", "question": "对LINESTRINGM(1 0 4, 2 0 4, 4 0 4)这条带有M值的二维线串，在起点10和终点40之间添加线性插值的M值，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRINGM(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING M (1 0 10,2 0 20,4 0 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3366, "question_en": "For the 2D linestring with M values LINESTRINGM(1 0 4, 2 0 4, 4 0 4), add linearly interpolated M values between the start point 10 and end point 40, and output the result in WKT format."}
{"id": 646, "function": "ST_AddMeasure", "question": "将LINESTRINGM(1 0 4, 2 0 4, 4 0 4)这条由三个XYM坐标点构成的线串，通过ST_AddMeasure函数将其M值从10到40重新线性分配，并输出WKT文本结果。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRINGM(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING M (1 0 10,2 0 20,4 0 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3367, "question_en": "Convert the linestring LINESTRINGM(1 0 4, 2 0 4, 4 0 4), composed of three XYM coordinate points, by using the ST_AddMeasure function to linearly redistribute its M values from 10 to 40, and output the WKT text result."}
{"id": 646, "function": "ST_AddMeasure", "question": "使用ST_AddMeasure函数处理LINESTRINGM(1 0 4, 2 0 4, 4 0 4)这条线串，将原始M值4替换为从起点10到终点40的线性插值序列，最终以WKT格式返回几何对象。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRINGM(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING M (1 0 10,2 0 20,4 0 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3368, "question_en": "Process the LINESTRINGM(1 0 4, 2 0 4, 4 0 4) linestring using the ST_AddMeasure function, replacing the original M value 4 with a linearly interpolated sequence from 10 at the start point to 40 at the end point, and return the resulting geometry object in WKT format."}
{"id": 646, "function": "ST_AddMeasure", "question": "输出为LINESTRINGM(1 0 4, 2 0 4, 4 0 4)几何对象添加M值范围从10到40后生成的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRINGM(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING M (1 0 10,2 0 20,4 0 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3369, "question_en": "Output the WKT string representation of the LINESTRINGM(1 0 4, 2 0 4, 4 0 4) geometry object after adding M values ranging from 10 to 40."}
{"id": 646, "function": "ST_AddMeasure", "question": "将LINESTRINGM(1 0 4, 2 0 4, 4 0 4)的M值重新线性插值为10到40的范围后，输出其WKT格式的几何字符串。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRINGM(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING M (1 0 10,2 0 20,4 0 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3370, "question_en": "Interpolate the M values of LINESTRINGM(1 0 4, 2 0 4, 4 0 4) linearly to the range of 10 to 40, then output its WKT-formatted geometry string."}
{"id": 646, "function": "ST_AddMeasure", "question": "输出通过ST_AddMeasure函数对LINESTRINGM(1 0 4, 2 0 4, 4 0 4)进行M值插值（起始值10，结束值40）后生成的WKT文本结果。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRINGM(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING M (1 0 10,2 0 20,4 0 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3371, "question_en": "Output the WKT text result generated by interpolating M values (start value 10, end value 40) using the ST_AddMeasure function on LINESTRINGM(1 0 4, 2 0 4, 4 0 4)."}
{"id": 647, "function": "ST_AddMeasure", "question": "对MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))这个由两个带有M值的三维线段组成的多线段几何对象，在M值维度上添加从10到70的线性插值度量值，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))'),10,70)) As ewelev;", "execution_result": [["MULTILINESTRING M ((1 0 10,2 0 20,4 0 40),(1 0 40,2 0 50,4 0 70))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3372, "question_en": "For the MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4)) geometry consisting of two 3D linestrings with M-values, add linearly interpolated measures from 10 to 70 along the M-value dimension and output the result in WKT format."}
{"id": 647, "function": "ST_AddMeasure", "question": "将MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))这个多线段几何对象（包含两条完全相同的线段，每条线段由三个点组成，每个点的坐标为X=1/2/4,Y=0,M=4）的M值重新线性插值为从10到70的范围，输出WKT格式的结果。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))'),10,70)) As ewelev;", "execution_result": [["MULTILINESTRING M ((1 0 10,2 0 20,4 0 40),(1 0 40,2 0 50,4 0 70))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3373, "question_en": "Interpolate the M values of the MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4)) geometry (containing two identical linestrings, each composed of three points with coordinates X=1/2/4, Y=0, M=4) to a new range from 10 to 70, and output the result in WKT format."}
{"id": 647, "function": "ST_AddMeasure", "question": "使用ST_AddMeasure函数处理MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))这个几何对象（包含两条三维线段，每条线段有3个顶点，坐标分别为(1,0,4)、(2,0,4)、(4,0,4)），将原始M值4替换为从起始值10到结束值70的线性插值序列，最终输出WKT文本表示。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))'),10,70)) As ewelev;", "execution_result": [["MULTILINESTRING M ((1 0 10,2 0 20,4 0 40),(1 0 40,2 0 50,4 0 70))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3374, "question_en": "Process the MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4)) geometry object (containing two 3D linestrings, each with 3 vertices at coordinates (1,0,4), (2,0,4), (4,0,4)) using the ST_AddMeasure function to replace the original M value 4 with a linearly interpolated sequence from start value 10 to end value 70, and output the final WKT representation."}
{"id": 647, "function": "ST_AddMeasure", "question": "输出为WKT字符串，该字符串是通过对MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))几何对象添加从10到70的M值后得到的。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))'),10,70)) As ewelev;", "execution_result": [["MULTILINESTRING M ((1 0 10,2 0 20,4 0 40),(1 0 40,2 0 50,4 0 70))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3375, "question_en": "Output the WKT string obtained by adding M values ranging from 10 to 70 to the MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4)) geometry object."}
{"id": 647, "function": "ST_AddMeasure", "question": "将MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))几何对象的M值范围设置为10到70后，输出其WKT格式的字符串表示。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))'),10,70)) As ewelev;", "execution_result": [["MULTILINESTRING M ((1 0 10,2 0 20,4 0 40),(1 0 40,2 0 50,4 0 70))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3376, "question_en": "Set the M-value range of the MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4)) geometry object to 10 to 70, then output its WKT format string representation."}
{"id": 647, "function": "ST_AddMeasure", "question": "输出经过ST_AddMeasure函数处理后的WKT字符串，该函数将MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))几何对象的M值从10线性插值到70。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))'),10,70)) As ewelev;", "execution_result": [["MULTILINESTRING M ((1 0 10,2 0 20,4 0 40),(1 0 40,2 0 50,4 0 70))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3377, "question_en": "Output the WKT string after processing with the ST_AddMeasure function, which linearly interpolates the M values of the MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4)) geometry from 10 to 70."}
{"id": 648, "function": "ST_IsValidTrajectory", "question": "判断由XYM点ST_MakePointM(0,0,1)和XYM点ST_MakePointM(0,1,2)构成的线段ST_MakeLine是否符合有效轨迹的条件，其中第一个点的X坐标为0、Y坐标为0、M值为1，第二个点的X坐标为0、Y坐标为1、M值为2。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine( ST_MakePointM(0,0,1), ST_MakePointM(0,1,2)) );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3378, "question_en": "Determine if the line segment ST_MakeLine formed by XYM points ST_MakePointM(0,0,1) and ST_MakePointM(0,1,2) meets the criteria for a valid trajectory, where the first point has X=0, Y=0, M=1 and the second point has X=0, Y=1, M=2."}
{"id": 648, "function": "ST_IsValidTrajectory", "question": "验证由两个XYM点组成的线段是否为有效轨迹，第一个点坐标为(0,0)且M值为1，第二个点坐标为(0,1)且M值为2，要求M值严格递增。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine( ST_MakePointM(0,0,1), ST_MakePointM(0,1,2)) );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3379, "question_en": "Verify if the line segment formed by two XYM points is a valid trajectory, with the first point at (0,0) and M value of 1, and the second point at (0,1) and M value of 2, requiring the M values to be strictly increasing."}
{"id": 648, "function": "ST_IsValidTrajectory", "question": "检查ST_MakeLine函数生成的线段是否满足轨迹有效性规则，该线段由ST_MakePointM(0,0,1)和ST_MakePointM(0,1,2)两个XYM点构成，其中M值分别为1和2。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine( ST_MakePointM(0,0,1), ST_MakePointM(0,1,2)) );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3380, "question_en": "Check if the line segment generated by the ST_MakeLine function satisfies the trajectory validity rules, where the segment is composed of two XYM points, ST_MakePointM(0,0,1) and ST_MakePointM(0,1,2), with M values of 1 and 2 respectively."}
{"id": 648, "function": "ST_IsValidTrajectory", "question": "输出由XYM点ST_MakePointM(0,0,1)和ST_MakePointM(0,1,2)构成的轨迹线ST_MakeLine是否有效的布尔值结果，其中M值1和2分别表示时间戳。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine( ST_MakePointM(0,0,1), ST_MakePointM(0,1,2)) );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3381, "question_en": "Output the boolean result indicating whether the trajectory line ST_MakeLine formed by XYM points ST_MakePointM(0,0,1) and ST_MakePointM(0,1,2) is valid, where M values 1 and 2 represent timestamps."}
{"id": 648, "function": "ST_IsValidTrajectory", "question": "检查由坐标(0,0)时间戳1和坐标(0,1)时间戳2两个XYM点生成的轨迹线是否符合PostGIS轨迹有效性（标准有效轨迹表示为带有度量（M 值）的 LINESTRING。 测量值必须从每个顶点到下一个顶点增加。），输出TRUE或FALSE。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine( ST_MakePointM(0,0,1), ST_MakePointM(0,1,2)) );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3382, "question_en": "Check if the trajectory line generated by the two XYM points with coordinates (0,0) timestamp 1 and (0,1) timestamp 2 complies with PostGIS trajectory validity (a valid standard trajectory is represented as a LINESTRING with measures (M values). The measure values must increase from each vertex to the next.), output TRUE or FALSE."}
{"id": 648, "function": "ST_IsValidTrajectory", "question": "将XYM点(0,0,1)和(0,1,2)连接为轨迹线后，输出该轨迹的时空有效性验证结果，其中第三个参数M值1和2代表严格递增的时间序列。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine( ST_MakePointM(0,0,1), ST_MakePointM(0,1,2)) );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3383, "question_en": "Connect the XYM points (0,0,1) and (0,1,2) into a trajectory line, then output the spatiotemporal validity verification result of this trajectory, where the third parameter M values 1 and 2 represent a strictly increasing time series."}
{"id": 649, "function": "ST_IsValidTrajectory", "question": "判断由XYM点ST_MakePointM(0,0,1)（X=0,Y=0,M=1）和XYM点ST_MakePointM(0,1,0)（X=0,Y=1,M=0）连接形成的轨迹线是否是有效轨迹。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine(ST_MakePointM(0,0,1), ST_MakePointM(0,1,0)));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3384, "question_en": "Determine whether the trajectory line formed by connecting the XYM points ST_MakePointM(0,0,1) (X=0,Y=0,M=1) and ST_MakePointM(0,1,0) (X=0,Y=1,M=0) is a valid trajectory."}
{"id": 649, "function": "ST_IsValidTrajectory", "question": "验证ST_MakeLine函数将XYM点(0,0,1)和XYM点(0,1,0)连接后生成的线段是否符合有效轨迹的标准，其中M值分别代表1和0。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine(ST_MakePointM(0,0,1), ST_MakePointM(0,1,0)));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3385, "question_en": "Verify if the line segment generated by the ST_MakeLine function connecting XYM point (0,0,1) and XYM point (0,1,0) meets the criteria of a valid trajectory, where the M values represent 1 and 0 respectively."}
{"id": 649, "function": "ST_IsValidTrajectory", "question": "检查由两个XYM点构成的线段是否为有效轨迹，第一个点为X坐标0、Y坐标0、M值1，第二个点为X坐标0、Y坐标1、M值0。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine(ST_MakePointM(0,0,1), ST_MakePointM(0,1,0)));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3386, "question_en": "Check if the line segment formed by two XYM points is a valid trajectory, with the first point having X coordinate 0, Y coordinate 0, M value 1, and the second point having X coordinate 0, Y coordinate 1, M value 0."}
{"id": 649, "function": "ST_IsValidTrajectory", "question": "判断由XYM点ST_MakePointM(0,0,1)（X=0,Y=0,M=1）和ST_MakePointM(0,1,0)（X=0,Y=1,M=0）构成的轨迹线是否有效，输出布尔值结果。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine(ST_MakePointM(0,0,1), ST_MakePointM(0,1,0)));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3387, "question_en": "Determine whether the trajectory line formed by the XYM points ST_MakePointM(0,0,1) (X=0,Y=0,M=1) and ST_MakePointM(0,1,0) (X=0,Y=1,M=0) is valid, output a boolean result."}
{"id": 649, "function": "ST_IsValidTrajectory", "question": "验证通过连接XYM点ST_MakePointM(0,0,1)（X坐标0，Y坐标0，M值1）和ST_MakePointM(0,1,0)（X坐标0，Y坐标1，M值0）生成的线性轨迹是否符合时空轨迹规范，返回逻辑真/假值。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine(ST_MakePointM(0,0,1), ST_MakePointM(0,1,0)));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3388, "question_en": "Verify if the linear trajectory generated by connecting the XYM points ST_MakePointM(0,0,1) (X-coordinate 0, Y-coordinate 0, M-value 1) and ST_MakePointM(0,1,0) (X-coordinate 0, Y-coordinate 1, M-value 0) complies with the spatiotemporal trajectory specification, returning a logical true/false value."}
{"id": 649, "function": "ST_IsValidTrajectory", "question": "输出ST_IsValidTrajectory函数对由ST_MakePointM(0,0,1)（XYM值0/0/1）和ST_MakePointM(0,1,0)（XYM值0/1/0）两点构建的线性轨迹的合法性检测结果，返回值为布尔类型。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine(ST_MakePointM(0,0,1), ST_MakePointM(0,1,0)));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3389, "question_en": "Output the boolean result of the ST_IsValidTrajectory function's validity check on the linear trajectory constructed by ST_MakePointM(0,0,1) (XYM values 0/0/1) and ST_MakePointM(0,1,0) (XYM values 0/1/0)."}
{"id": 650, "function": "ST_ClosestPointOfApproach", "question": "给定两条三维线LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)，分别添加从2015-05-26 10:00到2015-05-26 11:00的时间度量值后，计算两条线的最接近点对应的时间戳、三维距离，以及保留2位小数的WKT格式坐标点。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n), cpa AS (\n  SELECT ST_ClosestPointOfApproach(a,b) m FROM inp\n), points AS (\n  SELECT ST_GeometryN(ST_LocateAlong(a,m),1) pa,\n         ST_GeometryN(ST_LocateAlong(b,m),1) pb\n  FROM inp, cpa\n)\nSELECT to_timestamp(m) t,\n       ST_3DDistance(pa,pb) distance,\n       ST_AsText(pa, 2) AS pa, ST_AsText(pb, 2) AS pb\nFROM points, cpa;", "execution_result": [["2015-05-26T10:45:31.034483+08:00", 1.9652147377620688, "POINT ZM (7.59 0 3.79 1432608331.03)", "POINT ZM (9.1 1.24 3.93 1432608331.03)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "datetime_to_iso", "source": "original", "new_id": 3390, "question_en": "Given two 3D linestrings LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2), after adding time measures from 2015-05-26 10:00 to 2015-05-26 11:00, calculate the closest points' corresponding timestamps, 3D distance, and WKT-formatted coordinate points rounded to 2 decimal places."}
{"id": 650, "function": "ST_ClosestPointOfApproach", "question": "如何计算带时间度量的三维线LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)在2015-05-26 10:00到11:00时间段内最接近时刻的三维坐标点及其距。输出对应时间戳、距离和两个点的坐标。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n), cpa AS (\n  SELECT ST_ClosestPointOfApproach(a,b) m FROM inp\n), points AS (\n  SELECT ST_GeometryN(ST_LocateAlong(a,m),1) pa,\n         ST_GeometryN(ST_LocateAlong(b,m),1) pb\n  FROM inp, cpa\n)\nSELECT to_timestamp(m) t,\n       ST_3DDistance(pa,pb) distance,\n       ST_AsText(pa, 2) AS pa, ST_AsText(pb, 2) AS pb\nFROM points, cpa;", "execution_result": [["2015-05-26T10:45:31.034483+08:00", 1.9652147377620688, "POINT ZM (7.59 0 3.79 1432608331.03)", "POINT ZM (9.1 1.24 3.93 1432608331.03)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "datetime_to_iso", "source": "original", "new_id": 3391, "question_en": "How to calculate the closest 3D points and their distance between two 3D linestrings with time measurement, LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2), during the time period from 2015-05-26 10:00 to 11:00. Output the corresponding timestamp, distance, and coordinates of both points."}
{"id": 650, "function": "ST_ClosestPointOfApproach", "question": "对于三维线LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)，在添加2015-05-26 10:00到11:00的时间度量后，如何获取它们最接近时刻的时间戳、三维距离，以及保留2位小数的WKT格式坐标点？", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n), cpa AS (\n  SELECT ST_ClosestPointOfApproach(a,b) m FROM inp\n), points AS (\n  SELECT ST_GeometryN(ST_LocateAlong(a,m),1) pa,\n         ST_GeometryN(ST_LocateAlong(b,m),1) pb\n  FROM inp, cpa\n)\nSELECT to_timestamp(m) t,\n       ST_3DDistance(pa,pb) distance,\n       ST_AsText(pa, 2) AS pa, ST_AsText(pb, 2) AS pb\nFROM points, cpa;", "execution_result": [["2015-05-26T10:45:31.034483+08:00", 1.9652147377620688, "POINT ZM (7.59 0 3.79 1432608331.03)", "POINT ZM (9.1 1.24 3.93 1432608331.03)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "datetime_to_iso", "source": "original", "new_id": 3392, "question_en": "For the 3D linestrings LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2), after adding the temporal dimension from 2015-05-26 10:00 to 11:00, how to retrieve their closest timestamps, 3D distance, and WKT-formatted coordinate points rounded to 2 decimal places?"}
{"id": 650, "function": "ST_ClosestPointOfApproach", "question": "输出两条三维线段的最近接近时间点的时间戳、三维空间距离，以及保留2位小数的最近接近点pa和pb的WKT字符串表示，其中pa来自线段LINESTRING Z (0 0 0, 10 0 5)，pb来自线段LINESTRING Z (0 2 10, 12 1 2)，两条线段的时间测量范围均为2015-05-26 10:00到2015-05-26 11:00的时间戳。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n), cpa AS (\n  SELECT ST_ClosestPointOfApproach(a,b) m FROM inp\n), points AS (\n  SELECT ST_GeometryN(ST_LocateAlong(a,m),1) pa,\n         ST_GeometryN(ST_LocateAlong(b,m),1) pb\n  FROM inp, cpa\n)\nSELECT to_timestamp(m) t,\n       ST_3DDistance(pa,pb) distance,\n       ST_AsText(pa, 2) AS pa, ST_AsText(pb, 2) AS pb\nFROM points, cpa;", "execution_result": [["2015-05-26T10:45:31.034483+08:00", 1.9652147377620688, "POINT ZM (7.59 0 3.79 1432608331.03)", "POINT ZM (9.1 1.24 3.93 1432608331.03)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "datetime_to_iso", "source": "original", "new_id": 3393, "question_en": "Output the timestamp of the closest approach between two 3D line segments, their 3D spatial distance, and the WKT string representations of the closest points pa and pb (rounded to 2 decimal places), where pa is from the line segment LINESTRING Z (0 0 0, 10 0 5) and pb is from LINESTRING Z (0 2 10, 12 1 2), with both segments' time measurements ranging from timestamp 2015-05-26 10:00 to 2015-05-26 11:00."}
{"id": 650, "function": "ST_ClosestPointOfApproach", "question": "输出两条三维线段的最近接近时间点（转换为时间戳格式）、该时刻两条线段上最近点之间的三维距离（精确到小数点后默认位数）、以及这两个最近点的WKT字符串表示（保留2位小数）。第一条线段为LINESTRING Z (0 0 0, 10 0 5)，第二条为LINESTRING Z (0 2 10, 12 1 2)，测量值时间范围为2015-05-26 10:00至11:00的时间戳。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n), cpa AS (\n  SELECT ST_ClosestPointOfApproach(a,b) m FROM inp\n), points AS (\n  SELECT ST_GeometryN(ST_LocateAlong(a,m),1) pa,\n         ST_GeometryN(ST_LocateAlong(b,m),1) pb\n  FROM inp, cpa\n)\nSELECT to_timestamp(m) t,\n       ST_3DDistance(pa,pb) distance,\n       ST_AsText(pa, 2) AS pa, ST_AsText(pb, 2) AS pb\nFROM points, cpa;", "execution_result": [["2015-05-26T10:45:31.034483+08:00", 1.9652147377620688, "POINT ZM (7.59 0 3.79 1432608331.03)", "POINT ZM (9.1 1.24 3.93 1432608331.03)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "datetime_to_iso", "source": "original", "new_id": 3394, "question_en": "Output the closest approach timestamp between two 3D linestrings, the 3D distance between the nearest points at that moment (rounded to default decimal places), and the WKT representations of these two nearest points (rounded to 2 decimal places). The first linestring is LINESTRING Z (0 0 0, 10 0 5), the second is LINESTRING Z (0 2 10, 12 1 2), with measurement timestamps ranging from 2015-05-26 10:00 to 11:00."}
{"id": 650, "function": "ST_ClosestPointOfApproach", "question": "输出三维线LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)在2015-05-26 10:00到11:00时间范围内的最近接近点时间戳、两点间三维距离，以及保留2位小数的两个最近点pa和pb的WKT文本表示。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n), cpa AS (\n  SELECT ST_ClosestPointOfApproach(a,b) m FROM inp\n), points AS (\n  SELECT ST_GeometryN(ST_LocateAlong(a,m),1) pa,\n         ST_GeometryN(ST_LocateAlong(b,m),1) pb\n  FROM inp, cpa\n)\nSELECT to_timestamp(m) t,\n       ST_3DDistance(pa,pb) distance,\n       ST_AsText(pa, 2) AS pa, ST_AsText(pb, 2) AS pb\nFROM points, cpa;", "execution_result": [["2015-05-26T10:45:31.034483+08:00", 1.9652147377620688, "POINT ZM (7.59 0 3.79 1432608331.03)", "POINT ZM (9.1 1.24 3.93 1432608331.03)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "datetime_to_iso", "source": "original", "new_id": 3395, "question_en": "Output the timestamp of the closest approach between the 3D linestrings LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2) within the time range 2015-05-26 10:00 to 11:00, their 3D distance, and the WKT representations of the two closest points pa and pb rounded to 2 decimal places."}
{"id": 651, "function": "ST_DistanceCPA", "question": "计算两条带有时间测量值的三维线LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)在时间范围2015-05-26 10:00到2015-05-26 11:00之间的最近接近点距离。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3396, "question_en": "Calculate the closest point distance between two 3D linestrings with time measurements, LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2), within the time range from 2015-05-26 10:00 to 2015-05-26 11:00."}
{"id": 651, "function": "ST_DistanceCPA", "question": "对于三维线LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)，分别添加从2015-05-26 10:00到2015-05-26 11:00的时间测量值后，求它们的最接近点距离。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3397, "question_en": "For the 3D linestrings LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2), after adding temporal measurements from 2015-05-26 10:00 to 2015-05-26 11:00 respectively, find their closest point distance."}
{"id": 651, "function": "ST_DistanceCPA", "question": "将三维线LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)转换为带有时间测量值的轨迹（时间范围为2015-05-26 10:00到2015-05-26 11:00），然后计算这两条轨迹的最接近点距离。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3398, "question_en": "Convert the 3D linestrings LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2) into trajectories with time measurements (time range from 2015-05-26 10:00 to 2015-05-26 11:00), then calculate the closest point distance between these two trajectories."}
{"id": 651, "function": "ST_DistanceCPA", "question": "输出LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)两条带时间测量值的三维线段的最近接近点距离，时间范围均为2015-05-26 10:00到2015-05-26 11:00。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3399, "question_en": "Output the closest approach distance between two 3D linestrings with time measurements, LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2), both within the time range from 2015-05-26 10:00 to 2015-05-26 11:00."}
{"id": 651, "function": "ST_DistanceCPA", "question": "计算并返回两个带时间测量值的三维线段之间的最近接近距离，第一个线段从空间点(0 0 0)到(10 0 5)，第二个线段从(0 2 10)到(12 1 2)，时间测量值均为2015-05-26 10:00到2015-05-26 11:00的时间戳。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3400, "question_en": "Calculate and return the closest approach distance between two 3D line segments with time measurements, where the first segment spans from point (0 0 0) to (10 0 5) and the second from (0 2 10) to (12 1 2), both with timestamps from 2015-05-26 10:00 to 2015-05-26 11:00."}
{"id": 651, "function": "ST_DistanceCPA", "question": "输出两个带时间属性的三维线段的最近接近距离数值，其中第一条线段坐标为(0 0 0)到(10 0 5)，第二条线段坐标为(0 2 10)到(12 1 2)，时间属性均为将2015-05-26 10:00到2015-05-26 11:00转换为UNIX时间戳作为M值。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3401, "question_en": "Output the closest approach distance between two 3D linestrings with time attributes, where the first linestring has coordinates (0 0 0) to (10 0 5) and the second has (0 2 10) to (12 1 2), with time attributes converted from 2015-05-26 10:00 to 2015-05-26 11:00 as UNIX timestamps for M-values."}
{"id": 652, "function": "ST_CPAWithin", "question": "给定两条三维线LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)，分别添加从2015-05-26 10:00到2015-05-26 11:00的时间戳作为M值后，判断这两条线在时间范围内的最近接近点距离是否在2单位以内，并计算实际最近距离。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_CPAWithin(a,b,2), ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[true, 1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3402, "question_en": "Given two 3D linestrings LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2), after adding timestamps from 2015-05-26 10:00 to 2015-05-26 11:00 as M values, determine whether the closest approach distance between these two lines during the time range is within 2 units, and calculate the actual closest distance."}
{"id": 652, "function": "ST_CPAWithin", "question": "对于三维线LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)，在2015-05-26 10:00到2015-05-26 11:00的时间范围内，使用ST_CPAWithin函数检查它们的最近接近点距离是否小于2单位，并用ST_DistanceCPA返回具体距离值。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_CPAWithin(a,b,2), ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[true, 1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3403, "question_en": "For the 3D linestrings LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2), within the time range from 2015-05-26 10:00 to 2015-05-26 11:00, use the ST_CPAWithin function to check if their closest point of approach distance is less than 2 units, and return the exact distance value with ST_DistanceCPA."}
{"id": 652, "function": "ST_CPAWithin", "question": "将三维线LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)分别添加从2015-05-26 10:00(时间戳)到2015-05-26 11:00(时间戳)的M值后，查询这两条时空线在时间范围内的最近接近点是否在2单位距离内，并返回精确的最近距离值。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_CPAWithin(a,b,2), ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[true, 1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3404, "question_en": "Add M values from timestamp 2015-05-26 10:00 to 2015-05-26 11:00 to the 3D linestrings LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2), then query whether their closest points of approach during the time range are within 2 units distance and return the exact nearest distance value."}
{"id": 652, "function": "ST_CPAWithin", "question": "输出两个带时间度量值的三维线对象LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)在时间范围2015-05-26 10:00到2015-05-26 11:00内是否在2单位距离内最近接近点存在（布尔值），以及它们最近接近点的实际距离（浮点数）。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_CPAWithin(a,b,2), ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[true, 1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3405, "question_en": "Output whether the two 3D linestring objects with time measurements, LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2), have a closest approach point within 2 units of distance during the time range 2015-05-26 10:00 to 2015-05-26 11:00 (boolean), and the actual distance of their closest approach point (float)."}
{"id": 652, "function": "ST_CPAWithin", "question": "对于时间戳2015-05-26 10:00到2015-05-26 11:00期间的三维测量线LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)，输出它们是否在2单位距离内存在最近接近点（真/假），并输出精确的最近接近距离值。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_CPAWithin(a,b,2), ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[true, 1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3406, "question_en": "For the 3D measured lines LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2) during the timestamp 2015-05-26 10:00 to 2015-05-26 11:00, output whether they have closest approach points within 2 units distance (true/false) and the exact closest approach distance value."}
{"id": 652, "function": "ST_CPAWithin", "question": "输出两个三维测量线（LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)）在2015-05-26 10:00至2015-05-26 11:00时间段内，其最近接近点是否在2单位范围内（布尔结果），以及计算得到的最近接近点实际距离（数值结果）。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_CPAWithin(a,b,2), ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[true, 1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3407, "question_en": "Output whether the closest points of approach between two 3D linestrings (LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2)) during the time period from 2015-05-26 10:00 to 2015-05-26 11:00 are within 2 units (boolean result), and the actual calculated distance between the closest points (numeric result)."}
{"id": 675, "function": "ST_IsValidDetail", "question": "在笛卡尔积参数空间（e表：x1∈[-4,6], y1∈[2,5], z1∈[1,8] 满足 x1>0.5y1 且 z1<x1y1，生成中心(10*x1,y1)、半径z1的缓冲区；f表：x1∈[-3,6], y1∈[2,5], z1∈[1,10] 满足 x1>0.75*y1 且 z1<x1*y1，生成平移(y1,2z1)的缓冲区外环线）中，如何查询通过连接（e面积>78且e包含f线）、以e外环为边界聚合f线为孔洞所构造的多边形中，前3个无效多边形的gid、拓扑错误原因及问题点坐标？\"", "sql": "SELECT gid, reason(ST_IsValidDetail(geom)), ST_AsText(location(ST_IsValidDetail(geom))) as location\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection", "POINT(33 4)"], [5340, "Self-intersection", "POINT(43 4)"], [5350, "Self-intersection", "POINT(53 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3408, "question_en": "In the Cartesian product parameter space (table e: x1∈[-4,6], y1∈[2,5], z1∈[1,8] where x1>0.5y1 and z1<x1y1, generating buffers with center (10*x1,y1) and radius z1; table f: x1∈[-3,6], y1∈[2,5], z1∈[1,10] where x1>0.75*y1 and z1<x1*y1, generating buffer outer rings translated by (y1,2z1)), how to query the gid, topological error reason, and issue point coordinates of the first 3 invalid polygons constructed by joining (e area>78 and e contains f's line) and aggregating f's lines as holes bounded by e's outer ring?"}
{"id": 675, "function": "ST_IsValidDetail", "question": "请检索由圆形缓冲区（参数：x1∈[-4,6], y1∈[2,5], z1∈[1,8]；中心点(10x1,y1)，半径z1；条件x1>0.5y1且z1<x1*y1）与平移环线（参数：x1∈[-3,6], y1∈[2,5], z1∈[1,10]；平移量(y1,2*z1)；条件x1>0.75y1且z1<x1y1）连接（要求缓冲区面积>78且包含环线）后，以缓冲区外环为边界、环线聚合为孔洞构建的多边形中，按gid排序的前3条无效记录，返回其gid值、无效原因及问题位置点WKT坐标。", "sql": "SELECT gid, reason(ST_IsValidDetail(geom)), ST_AsText(location(ST_IsValidDetail(geom))) as location\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection", "POINT(33 4)"], [5340, "Self-intersection", "POINT(43 4)"], [5350, "Self-intersection", "POINT(53 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3409, "question_en": "Retrieve the gid values, reasons for invalidity, and WKT coordinates of the problematic points for the top 3 invalid records (sorted by gid) from polygons constructed by using circular buffers (parameters: x1∈[-4,6], y1∈[2,5], z1∈[1,8]; center point (10x1,y1), radius z1; condition x1>0.5y1 and z1<x1*y1) joined with translated rings (parameters: x1∈[-3,6], y1∈[2,5], z1∈[1,10]; translation (y1,2*z1); condition x1>0.75y1 and z1<x1y1) (requiring buffer area >78 and containing the ring), where the buffer's outer ring serves as the boundary and the aggregated rings form the holes."}
{"id": 675, "function": "ST_IsValidDetail", "question": "基于以下规则生成几何对象并诊断无效项：e表（gid=10*x1+100*y1+1000*z1）用参数x1∈[-4,6], y1∈[2,5], z1∈[1,8]（约束x1>0.5*y1, z1<x1y1）创建点(10x1,y1)的z1半径缓冲区；f表用参数x1∈[-3,6], y1∈[2,5], z1∈[1,10]（约束x1>0.75y1, z1<x1y1）创建平移(y1,2*z1)的缓冲区外环线。通过连接（ST_Area(e.buff)>78 AND ST_Contains(e.buff,f.line)）后，用ST_MakePolygon(e外环, f线聚合数组)构造多边形，输出无效多边形的gid、ST_IsValidDetail原因及位置坐标，按gid排序取前3。", "sql": "SELECT gid, reason(ST_IsValidDetail(geom)), ST_AsText(location(ST_IsValidDetail(geom))) as location\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection", "POINT(33 4)"], [5340, "Self-intersection", "POINT(43 4)"], [5350, "Self-intersection", "POINT(53 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3410, "question_en": "Generate geometric objects based on the following rules and diagnose invalid items: Table e (gid=10*x1+100*y1+1000*z1) uses parameters x1∈[-4,6], y1∈[2,5], z1∈[1,8] (constraints: x1>0.5*y1, z1<x1*y1) to create a buffer of radius z1 around the point (10*x1, y1); Table f uses parameters x1∈[-3,6], y1∈[2,5], z1∈[1,10] (constraints: x1>0.75*y1, z1<x1*y1) to create the outer ring of a buffer translated by (y1, 2*z1). After joining (ST_Area(e.buff)>78 AND ST_Contains(e.buff, f.line)), construct polygons using ST_MakePolygon(e outer ring, f line array aggregate), then output the gid, ST_IsValidDetail reason, and location coordinates of invalid polygons, sorted by gid and limited to the top 3."}
{"id": 675, "function": "ST_IsValidDetail", "question": "输出gid字段、几何有效性检查失败原因（通过ST_IsValidDetail的reason函数获取）以及无效位置坐标的WKT字符串（通过ST_IsValidDetail的location函数获取并转换为文本），这些数据来自对缓冲多边形（由ST_Buffer以z1为半径对点ST_Point(x1*10,y1)生成）和偏移线（通过ST_Translate将缓冲多边形外环在y方向平移y1*1、z方向平移z1*2得到）组合构建的多边形（ST_MakePolygon）的检查结果，其中x1取值范围为-4到6，y1为2到5，z1为1到8（主查询）或1到10（子查询），且满足x1>y1*0.5、z1<x1*y1（主查询）或x1>y1*0.75、z1<x1*y1（子查询），同时筛选缓冲区域面积大于78且包含偏移线的组合，最终返回前3条无效几何记录并按gid排序。", "sql": "SELECT gid, reason(ST_IsValidDetail(geom)), ST_AsText(location(ST_IsValidDetail(geom))) as location\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection", "POINT(33 4)"], [5340, "Self-intersection", "POINT(43 4)"], [5350, "Self-intersection", "POINT(53 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3411, "question_en": "Output the gid field, the reason for geometry validity check failure (obtained via the reason function of ST_IsValidDetail), and the WKT string of invalid location coordinates (obtained via the location function of ST_IsValidDetail and converted to text). These are derived from checking the combined polygon (ST_MakePolygon) formed by a buffered polygon (generated by ST_Buffer with radius z1 from point ST_Point(x1*10,y1)) and an offset line (obtained by translating the outer ring of the buffered polygon by y1*1 in the y-direction and z1*2 in the z-direction via ST_Translate). Here, x1 ranges from -4 to 6, y1 from 2 to 5, z1 from 1 to 8 (main query) or 1 to 10 (subquery), with conditions x1>y1*0.5 and z1<x1*y1 (main query) or x1>y1*0.75 and z1<x1*y1 (subquery). Filter combinations where the buffered area exceeds 78 and contains the offset line, then return the top 3 invalid geometry records sorted by gid."}
{"id": 675, "function": "ST_IsValidDetail", "question": "输出表格包含三列：gid（由x1*10 + y1*100 + z1*1000计算得出）、reason（几何体无效的原因）和location（无效位置点的WKT字符串），该结果来自对缓冲多边形（由ST_Buffer以z1为半径对点ST_Point(x1*10,y1)生成）和偏移线（将缓冲多边形外环在y方向平移y1*1、z方向平移z1*2得到）组合形成的多边形进行有效性验证，筛选条件为x1 > y1*0.5且z1 < x1*y1的缓冲区域面积大于78且包含偏移线，最终返回前3条无效几何记录并按gid排序。", "sql": "SELECT gid, reason(ST_IsValidDetail(geom)), ST_AsText(location(ST_IsValidDetail(geom))) as location\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection", "POINT(33 4)"], [5340, "Self-intersection", "POINT(43 4)"], [5350, "Self-intersection", "POINT(53 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3412, "question_en": "Output a table with three columns: gid (calculated as x1*10 + y1*100 + z1*1000), reason (the cause of geometry invalidity), and location (WKT string of the invalid point), derived from validating the polygon formed by combining a buffered polygon (generated by ST_Buffer with radius z1 around point ST_Point(x1*10, y1)) and an offset line (obtained by shifting the buffered polygon's outer ring by y1*1 in the y-direction and z1*2 in the z-direction). Filter for buffered areas where x1 > y1*0.5 and z1 < x1*y1, with an area greater than 78 and containing the offset line, then return the top 3 invalid geometry records sorted by gid."}
{"id": 675, "function": "ST_IsValidDetail", "question": "输出3条无效多边形记录的gid编号、无效原因描述以及无效位置点的WKT字符串，这些多边形由以下条件生成：(1)对x1∈[-4,6],y1∈[2,5],z1∈[1,8]且满足x1>y1*0.5和z1<x1*y1的点ST_Point(x1*10,y1)创建半径为z1的缓冲区；(2)对x1∈[-3,6],y1∈[2,5],z1∈[1,10]且满足x1>y1*0.75和z1<x1*y1的点ST_Point(x1*10,y1)创建缓冲区外环后，按y1*1的x偏移和z1*2的y偏移进行平移；(3)仅选择缓冲区面积大于78且包含平移线段的组合；(4)将缓冲区外环与平移线段数组组合成多边形后，筛选出几何无效的记录。", "sql": "SELECT gid, reason(ST_IsValidDetail(geom)), ST_AsText(location(ST_IsValidDetail(geom))) as location\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection", "POINT(33 4)"], [5340, "Self-intersection", "POINT(43 4)"], [5350, "Self-intersection", "POINT(53 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3413, "question_en": "Output the gid numbers, descriptions of invalidity reasons, and WKT strings of invalidity locations for 3 invalid polygon records generated under the following conditions: (1) Create buffers with radius z1 for points ST_Point(x1*10,y1) where x1∈[-4,6], y1∈[2,5], z1∈[1,8] satisfying x1>y1*0.5 and z1<x1*y1; (2) Translate the outer rings of buffers created for points ST_Point(x1*10,y1) where x1∈[-3,6], y1∈[2,5], z1∈[1,10] satisfying x1>y1*0.75 and z1<x1*y1 by x-offset y1*1 and y-offset z1*2; (3) Select only combinations where buffer area >78 and containing translated line segments; (4) After combining buffer outer rings with translated line segment arrays into polygons, filter out geometrically invalid records."}
{"id": 676, "function": "ST_IsValidReason", "question": "在表quintuplet_experiment中，查询gid和几何体有效性原因(validity_info)。数据来源为：1) 子查询e生成缓冲区几何体(buff)和gid，其中缓冲区是通过对点ST_Point(x1*10,y1)进行ST_Buffer操作(缓冲距离为z1)生成的，x1取值范围为-4到6，y1为2到5，z1为1到8，且满足x1>y1*0.5和z1<x1*y1条件；2) 子查询f生成平移后的线几何体(line)，通过将ST_Buffer(ST_Point(x1*10,y1), z1)的外环ST_ExteriorRing进行ST_Translate平移(y1*1沿x方向，z1*2沿y方向)，x1范围为-3到6，y1为2到5，z1为1到10，且满足x1>y1*0.75和z1<x1*y1。最终通过ST_MakePolygon将e.buff的外环与f.line数组合并创建多边形，筛选ST_Area(e.buff)>78且ST_Contains(e.buff, f.line)的记录，并检查多边形有效性(ST_IsValid=false)，按gid排序后取前3条结果。", "sql": "SELECT gid, ST_IsValidReason(geom) as validity_info\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection[33 4]"], [5340, "Self-intersection[43 4]"], [5350, "Self-intersection[53 4]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3414, "question_en": "In the table quintuplet_experiment, query gid and the reason for geometry validity (validity_info). The data sources are: 1) Subquery e generates buffer geometries (buff) and gid, where buffers are created by applying ST_Buffer to point ST_Point(x1*10,y1) with a buffer distance of z1, with x1 ranging from -4 to 6, y1 from 2 to 5, z1 from 1 to 8, and conditions x1>y1*0.5 and z1<x1*y1; 2) Subquery f generates translated line geometries (line) by translating the exterior ring ST_ExteriorRing of ST_Buffer(ST_Point(x1*10,y1), z1) with offsets y1*1 along x-axis and z1*2 along y-axis, where x1 ranges from -3 to 6, y1 from 2 to 5, z1 from 1 to 10, and conditions x1>y1*0.75 and z1<x1*y1. Finally, create polygons by merging the exterior ring of e.buff with f.line array using ST_MakePolygon, filter records where ST_Area(e.buff)>78 and ST_Contains(e.buff, f.line), check polygon validity (ST_IsValid=false), sort by gid, and return the top 3 results."}
{"id": 676, "function": "ST_IsValidReason", "question": "对于由以下条件生成的几何对象：1) 使用generate_series(-4,6)生成x1值，generate_series(2,5)生成y1值，generate_series(1,8)生成z1值，筛选满足x1 > y1*0.5且z1 < x1*y1的记录；2) 对每个记录创建以点(ST_Point(x1*10,y1))为中心、z1为半径的缓冲区e.buff；3) 计算gid值为x1*10 + y1*100 + z1*1000；4) 使用generate_series(-3,6)生成x1值，generate_series(2,5)生成y1值，generate_series(1,10)生成z1值，筛选满足x1 > y1*0.75且z1 < x1*y1的记录；5) 对每个记录创建以点(ST_Point(x1*10,y1))为中心、z1为半径的缓冲区，提取其外环并沿y方向平移y1*1、z方向平移z1*2得到f.line；6) 筛选e.buff面积大于78且包含f.line的记录；7) 用ST_ExteriorRing(e.buff)作为外环，array_agg(f.line)作为内环构建多边形；8) 最终筛选几何无效的记录，按gid排序并限制返回3条记录，返回gid和ST_IsValidReason(geom)作为validity_info。", "sql": "SELECT gid, ST_IsValidReason(geom) as validity_info\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection[33 4]"], [5340, "Self-intersection[43 4]"], [5350, "Self-intersection[53 4]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3415, "question_en": "For geometric objects generated by the following conditions: 1) Use generate_series(-4,6) for x1 values, generate_series(2,5) for y1 values, and generate_series(1,8) for z1 values, filtering records where x1 > y1*0.5 and z1 < x1*y1; 2) Create a buffer e.buff centered at point (ST_Point(x1*10,y1)) with radius z1 for each record; 3) Calculate gid as x1*10 + y1*100 + z1*1000; 4) Use generate_series(-3,6) for x1 values, generate_series(2,5) for y1 values, and generate_series(1,10) for z1 values, filtering records where x1 > y1*0.75 and z1 < x1*y1; 5) For each record, create a buffer centered at point (ST_Point(x1*10,y1)) with radius z1, extract its exterior ring, and translate it by y1*1 along the y-axis and z1*2 along the z-axis to obtain f.line; 6) Filter records where e.buff has an area greater than 78 and contains f.line; 7) Construct a polygon using ST_ExteriorRing(e.buff) as the outer ring and array_agg(f.line) as inner rings; 8) Finally, filter out geometrically invalid records, sort by gid, limit to 3 records, and return gid and ST_IsValidReason(geom) as validity_info."}
{"id": 676, "function": "ST_IsValidReason", "question": "在表quintuplet_experiment中，查询gid和几何体有效性原因(validity_info)，其中几何体geom由以下方式生成：使用ST_MakePolygon函数，以子查询e中ST_Buffer生成的缓冲多边形buff的外环ST_ExteriorRing(e.buff)作为外边界，子查询f中ST_Translate平移后的线段array_agg(f.line)作为内环构成。子查询e的条件是：x1取值范围-4到6，y1取值范围2到5，z1取值范围1到8，且x1>y1*0.5且z1<x1*y1，生成的buff是对点ST_Point(x1*10,y1)进行z1距离的缓冲。子查询f的条件是：x1取值范围-3到6，y1取值范围2到5，z1取值范围1到10，且x1>y1*0.75且z1<x1*y1，生成的line是对点ST_Point(x1*10,y1)进行z1距离缓冲后取外环，再沿y方向平移y1*1、z方向平移z1*2得到的。最终筛选条件是e.buff面积>78且包含f.line，且geom无效的记录，按gid排序并限制返回3条。", "sql": "SELECT gid, ST_IsValidReason(geom) as validity_info\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection[33 4]"], [5340, "Self-intersection[43 4]"], [5350, "Self-intersection[53 4]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3416, "question_en": "In the table quintuplet_experiment, query the gid and geometry validity reason (validity_info), where the geometry geom is generated as follows: use the ST_MakePolygon function with the exterior ring ST_ExteriorRing(e.buff) of the buffered polygon buff (generated by ST_Buffer in subquery e) as the outer boundary, and the translated line segments array_agg(f.line) (from subquery f) as inner rings. Subquery e conditions: x1 ranges -4 to 6, y1 ranges 2 to 5, z1 ranges 1 to 8, with x1 > y1*0.5 and z1 < x1*y1, where buff is a buffer of distance z1 around point ST_Point(x1*10, y1). Subquery f conditions: x1 ranges -3 to 6, y1 ranges 2 to 5, z1 ranges 1 to 10, with x1 > y1*0.75 and z1 < x1*y1, where line is the exterior ring of a z1-distance buffer around ST_Point(x1*10, y1), then translated by y1*1 in the y-direction and z1*2 in the z-direction. Final filter conditions: e.buff area > 78, contains f.line, and geom is invalid, ordered by gid and limited to 3 results."}
{"id": 676, "function": "ST_IsValidReason", "question": "输出表quintuplet_experiment中前3条无效多边形记录的gid字段和有效性验证信息，这些多边形由以下方式生成：首先对x1取值-4到6、y1取值2到5、z1取值1到8的笛卡尔积进行筛选（条件x1>y1*0.5且z1<x1*y1），用ST_Point(x1*10,y1)创建点后以z1为半径生成缓冲区e.buff；然后对x1取值-3到6、y1取值2到5、z1取值1到10的笛卡尔积进行筛选（条件x1>y1*0.75且z1<x1*y1），用相同方法创建缓冲区后提取外环并平移（y1方向平移y1*1，z1方向平移z1*2）得到f.line；最后将满足ST_Area(e.buff)>78且ST_Contains(e.buff,f.line)的e.buff外环与对应f.line数组聚合成多边形geom，筛选其中无效记录并按gid排序。", "sql": "SELECT gid, ST_IsValidReason(geom) as validity_info\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection[33 4]"], [5340, "Self-intersection[43 4]"], [5350, "Self-intersection[53 4]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3417, "question_en": "Output the `gid` field and validity check information for the first 3 invalid polygon records in the table `quintuplet_experiment`. These polygons are generated as follows: First, filter the Cartesian product of `x1` ranging from -4 to 6, `y1` from 2 to 5, and `z1` from 1 to 8 (with conditions `x1 > y1*0.5` and `z1 < x1*y1`), create points using `ST_Point(x1*10, y1)`, then generate buffers `e.buff` with `z1` as the radius. Next, filter the Cartesian product of `x1` ranging from -3 to 6, `y1` from 2 to 5, and `z1` from 1 to 10 (with conditions `x1 > y1*0.75` and `z1 < x1*y1`), create buffers using the same method, extract their outer rings, and shift them (translating `y1` direction by `y1*1` and `z1` direction by `z1*2`) to obtain `f.line`. Finally, aggregate the outer rings of `e.buff` (where `ST_Area(e.buff) > 78`) with their corresponding `f.line` arrays (where `ST_Contains(e.buff, f.line)`) into polygons `geom`, filter the invalid records, and sort them by `gid`."}
{"id": 676, "function": "ST_IsValidReason", "question": "输出表格包含gid字段和validity_info字段，其中validity_info字段是几何对象geom的无效原因说明。这些几何对象是通过以下方式构建的：首先对由x1*10和y1坐标生成的二维点ST_Point(x1*10,y1)进行缓冲，缓冲距离为z1，生成多边形e.buff；然后将由x1*10和y1坐标生成的二维点ST_Point(x1*10,y1)进行缓冲，缓冲距离为z1，提取其外环ST_ExteriorRing，并在y方向平移y1*1、z方向平移z1*2，生成线对象f.line；最后将e.buff的外环与所有满足ST_Area(e.buff)>78且ST_Contains(e.buff, f.line)的f.line对象组合成多边形geom。查询结果仅返回前3条无效几何对象的记录，并按gid排序。", "sql": "SELECT gid, ST_IsValidReason(geom) as validity_info\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection[33 4]"], [5340, "Self-intersection[43 4]"], [5350, "Self-intersection[53 4]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3418, "question_en": "The output table includes the fields gid and validity_info, where validity_info describes the reason for the invalidity of the geometric object geom. These geometric objects are constructed as follows: first, buffer the 2D point ST_Point(x1*10,y1) generated from coordinates x1*10 and y1 with a buffer distance of z1 to create polygon e.buff; then, buffer the same 2D point ST_Point(x1*10,y1), extract its exterior ring ST_ExteriorRing, and translate it by y1*1 in the y-direction and z1*2 in the z-direction to generate line object f.line; finally, combine the exterior ring of e.buff with all f.line objects that satisfy ST_Area(e.buff)>78 and ST_Contains(e.buff, f.line) to form polygon geom. The query returns only the first 3 records of invalid geometric objects, sorted by gid."}
{"id": 676, "function": "ST_IsValidReason", "question": "输出gid字段和几何有效性验证结果validity_info字段，其中validity_info是通过ST_IsValidReason函数对geom字段进行验证得到的结果。这些结果来自quintuplet_experiment子查询，该子查询通过以下步骤生成几何对象：首先从x1范围-4到6、y1范围2到5、z1范围1到8的笛卡尔积中筛选出满足x1 > y1*0.5且z1 < x1*y1的记录，为每条记录创建以点(ST_Point(x1*10,y1))为中心、z1为半径的缓冲区e.buff，并计算gid值为x1*10 + y1*100 + z1*1000；然后从x1范围-3到6、y1范围2到5、z1范围1到10的笛卡尔积中筛选出满足x1 > y1*0.75且z1 < x1*y1的记录，为每条记录创建以点(ST_Point(x1*10,y1))为中心、z1为半径的缓冲区，提取其外环并沿y方向平移y1*1、沿z方向平移z1*2得到f.line；最后将满足ST_Area(e.buff) > 78且ST_Contains(e.buff, f.line)条件的e.buff和f.line记录进行连接，用ST_ExteriorRing(e.buff)作为外环、array_agg(f.line)作为内环数组构建多边形geom。最终输出geom有效性验证失败的记录，按gid排序且仅返回前3条。", "sql": "SELECT gid, ST_IsValidReason(geom) as validity_info\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection[33 4]"], [5340, "Self-intersection[43 4]"], [5350, "Self-intersection[53 4]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3419, "question_en": "Output the gid field and the geometric validity check result validity_info field, where validity_info is obtained by validating the geom field using the ST_IsValidReason function. These results come from the quintuplet_experiment subquery, which generates geometric objects through the following steps: first, filter records from the Cartesian product of x1 range -4 to 6, y1 range 2 to 5, and z1 range 1 to 8 that satisfy x1 > y1*0.5 and z1 < x1*y1, create a buffer e.buff centered at point (ST_Point(x1*10,y1)) with radius z1, and calculate gid as x1*10 + y1*100 + z1*1000; then, filter records from the Cartesian product of x1 range -3 to 6, y1 range 2 to 5, and z1 range 1 to 10 that satisfy x1 > y1*0.75 and z1 < x1*y1, create a buffer centered at point (ST_Point(x1*10,y1)) with radius z1, extract its outer ring, and translate it by y1*1 in the y direction and z1*2 in the z direction to obtain f.line; finally, join e.buff and f.line records that meet the conditions ST_Area(e.buff) > 78 and ST_Contains(e.buff, f.line), and construct a polygon geom using ST_ExteriorRing(e.buff) as the outer ring and array_agg(f.line) as the inner ring array. The final output shows records with failed geom validity checks, sorted by gid and limited to the top 3."}
{"id": 681, "function": "DropGeometryTable", "question": "删除名为my_schema的数据库模式中名为my_spatial_table的空间表，并返回操作结果。", "sql": "SELECT DropGeometryTable ('my_schema','my_spatial_table');", "execution_result": [["my_schema.my_spatial_table dropped."]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3420, "question_en": "Drop the spatial table named `my_spatial_table` in the database schema `my_schema` and return the operation result."}
{"id": 681, "function": "DropGeometryTable", "question": "执行删除操作，移除my_schema模式下的my_spatial_table空间表，输出操作是否成功的状态信息。", "sql": "SELECT DropGeometryTable ('my_schema','my_spatial_table');", "execution_result": [["my_schema.my_spatial_table dropped."]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3421, "question_en": "Perform a delete operation to remove the spatial table `my_spatial_table` in the `my_schema` schema, and output the status message indicating whether the operation was successful."}
{"id": 681, "function": "DropGeometryTable", "question": "从my_schema模式中彻底删除my_spatial_table空间表及其几何字段，返回执行结果的确认信息。", "sql": "SELECT DropGeometryTable ('my_schema','my_spatial_table');", "execution_result": [["my_schema.my_spatial_table dropped."]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3422, "question_en": "Completely remove the spatial table `my_spatial_table` and its geometry fields from the `my_schema` schema, returning a confirmation message of the execution result."}
{"id": 681, "function": "DropGeometryTable", "question": "在名为my_schema的数据库模式中，删除名为my_spatial_table的空间表及其关联的几何列和空间索引。", "sql": "SELECT DropGeometryTable ('my_schema','my_spatial_table');", "execution_result": [["my_schema.my_spatial_table dropped."]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3423, "question_en": "In the database schema named my_schema, delete the spatial table named my_spatial_table along with its associated geometry columns and spatial indexes."}
{"id": 681, "function": "DropGeometryTable", "question": "执行删除操作，移除my_schema模式下注册为空间表的my_spatial_table表，包括该表的几何元数据记录。", "sql": "SELECT DropGeometryTable ('my_schema','my_spatial_table');", "execution_result": [["my_schema.my_spatial_table dropped."]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3424, "question_en": "Perform a delete operation to remove the spatial table `my_spatial_table` registered under the `my_schema` schema, including its geometry metadata records."}
{"id": 681, "function": "DropGeometryTable", "question": "从PostGIS的geometry_columns系统表中注销my_schema.my_spatial_table表，并删除该表的所有几何字段定义。", "sql": "SELECT DropGeometryTable ('my_schema','my_spatial_table');", "execution_result": [["my_schema.my_spatial_table dropped."]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3425, "question_en": "Unregister the table `my_schema.my_spatial_table` from PostGIS's `geometry_columns` system table and remove all its geometry field definitions."}
{"id": 686, "function": "postgis_srs_codes", "question": "输出 EPSG 编码空间参考系统的前 10 条记录，字段内容包括 SRID、坐标系名称和定义文本。", "sql": "SELECT * FROM postgis_srs_codes('EPSG') LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3426, "question_en": "Output the first 10 records of EPSG-coded spatial reference systems, including fields SRID, coordinate system name, and definition text."}
{"id": 686, "function": "postgis_srs_codes", "question": "使用 postgis_srs_codes('EPSG') 函数查询 EPSG 开头的空间参考系统，结果中显示全部字段，仅返回前 10 条记录。", "sql": "SELECT * FROM postgis_srs_codes('EPSG') LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3427, "question_en": "Query spatial reference systems starting with 'EPSG' using the postgis_srs_codes('EPSG') function, display all fields in the result, and return only the first 10 records."}
{"id": 686, "function": "postgis_srs_codes", "question": "获取postgis_srs_codes表中所有字段值，其中srs_code字段以'EPSG'开头，且仅返回前10条记录的完整信息。", "sql": "SELECT * FROM postgis_srs_codes('EPSG') LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3428, "question_en": "Retrieve all field values from the postgis_srs_codes table where the srs_code field starts with 'EPSG', and return only the complete information of the first 10 records."}
{"id": 686, "function": "postgis_srs_codes", "question": "从 postgis_srs_codes('EPSG') 函数返回结果中提取所有字段，限定为 EPSG 编码前 10 条记录。", "sql": "SELECT * FROM postgis_srs_codes('EPSG') LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3429, "question_en": "Extract all fields from the result of the postgis_srs_codes('EPSG') function, limited to the first 10 EPSG codes."}
{"id": 686, "function": "postgis_srs_codes", "question": "使用 postgis_srs_codes('EPSG') 函数获取 SRID 编码以 EPSG 开头的空间参考系统数据，限制为前 10 条结果。", "sql": "SELECT * FROM postgis_srs_codes('EPSG') LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3430, "question_en": "Retrieve spatial reference system data with SRID codes starting with 'EPSG' using the postgis_srs_codes('EPSG') function, limiting to the first 10 results."}
{"id": 686, "function": "postgis_srs_codes", "question": "在 PostGIS 中执行查询，获取 postgis_srs_codes('EPSG') 函数返回的 EPSG 空间参考系统列表，仅显示前 10 条记录。", "sql": "SELECT * FROM postgis_srs_codes('EPSG') LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3431, "question_en": "Execute a query in PostGIS to retrieve the list of EPSG spatial reference systems returned by the postgis_srs_codes('EPSG') function, displaying only the first 10 records."}
{"id": 687, "function": "postgis_srs", "question": "输出EPSG代码为3005的空间参考系统的所有字段信息。", "sql": "SELECT * FROM postgis_srs('EPSG', '3005');", "execution_result": [[null, null, null, null, null, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3432, "question_en": "Output all field information for the spatial reference system with EPSG code 3005."}
{"id": 687, "function": "postgis_srs", "question": "查询并返回EPSG编号3005对应的完整空间参考系统参数表内容。", "sql": "SELECT * FROM postgis_srs('EPSG', '3005');", "execution_result": [[null, null, null, null, null, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3433, "question_en": "Query and return the complete spatial reference system parameter table content corresponding to EPSG code 3005."}
{"id": 687, "function": "postgis_srs", "question": "从postgis_srs表中提取SRID为EPSG:3005的空间参考系统全部属性列。", "sql": "SELECT * FROM postgis_srs('EPSG', '3005');", "execution_result": [[null, null, null, null, null, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3434, "question_en": "Extract all attribute columns of the spatial reference system with SRID EPSG:3005 from the postgis_srs table."}
{"id": 687, "function": "postgis_srs", "question": "从postgis_srs表中查询SRID为'EPSG:3005'的空间参考系统参数，要求返回该坐标系的所有元数据字段。", "sql": "SELECT * FROM postgis_srs('EPSG', '3005');", "execution_result": [[null, null, null, null, null, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3435, "question_en": "Retrieve all metadata fields of the spatial reference system with SRID 'EPSG:3005' from the postgis_srs table."}
{"id": 687, "function": "postgis_srs", "question": "获取EPSG编号3005对应的空间参考系统定义，包括坐标系名称、基准面、椭球体参数、投影方法等完整信息。", "sql": "SELECT * FROM postgis_srs('EPSG', '3005');", "execution_result": [[null, null, null, null, null, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3436, "question_en": "Retrieve the complete spatial reference system definition for EPSG code 3005, including coordinate system name, datum, ellipsoid parameters, projection method, and other full details."}
{"id": 687, "function": "postgis_srs", "question": "在PostGIS的postgis_srs系统表中检索权威机构为EPSG、编码为3005的空间参考系记录，返回所有可用字段数据。", "sql": "SELECT * FROM postgis_srs('EPSG', '3005');", "execution_result": [[null, null, null, null, null, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3437, "question_en": "Retrieve all available field data from the PostGIS `postgis_srs` system table for spatial reference system records with the authority as EPSG and code as 3005."}
{"id": 688, "function": "postgis_srs_all", "question": "输出postgis_srs_all()函数返回的前10条记录中的auth_name（所属的权威标准体系名称）、auth_srid（对应的编号SRID）和srname（空间参考系统名称）字段值。", "sql": "SELECT auth_name, auth_srid, srname FROM postgis_srs_all() LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3438, "question_en": "Output the values of the auth_name (authority standard system name), auth_srid (corresponding SRID number), and srname (spatial reference system name) fields from the first 10 records returned by the postgis_srs_all() function."}
{"id": 688, "function": "postgis_srs_all", "question": "以表格形式返回postgis_srs_all()表的前10行数据，包含auth_name、auth_srid和srname三列。", "sql": "SELECT auth_name, auth_srid, srname FROM postgis_srs_all() LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3439, "question_en": "Return the first 10 rows of the postgis_srs_all() table in tabular format, including the auth_name, auth_srid, and srname columns."}
{"id": 688, "function": "postgis_srs_all", "question": "查询并显示空间参考系统元数据表postgis_srs_all()的前10条记录，要求输出格式为每行包含所属的权威标准体系、对应的编号SRID和参考系名称。", "sql": "SELECT auth_name, auth_srid, srname FROM postgis_srs_all() LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3440, "question_en": "Query and display the first 10 records from the spatial reference system metadata table postgis_srs_all(), with each row containing the authority, corresponding SRID, and reference system name."}
{"id": 688, "function": "postgis_srs_all", "question": "从postgis_srs_all()函数返回的空间参考系统表中，查询前10条记录中的所属的权威标准体系auth_name、授权SRID字段auth_srid以及空间参考名称字段srname的具体数值。", "sql": "SELECT auth_name, auth_srid, srname FROM postgis_srs_all() LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3441, "question_en": "From the spatial reference system table returned by the postgis_srs_all() function, query the specific values of the authority name (auth_name), authorized SRID field (auth_srid), and spatial reference name field (srname) in the first 10 records."}
{"id": 688, "function": "postgis_srs_all", "question": "使用postgis_srs_all()函数获取所有空间参考系统数据，提取其中前10条记录的三个字段：所属的权威标准体系名称auth_name、空间参考标识符auth_srid和正式名称srname的完整信息。", "sql": "SELECT auth_name, auth_srid, srname FROM postgis_srs_all() LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3442, "question_en": "Retrieve all spatial reference system data using the postgis_srs_all() function, extracting the first 10 records with three fields: the authoritative standard system name (auth_name), spatial reference identifier (auth_srid), and full formal name (srname)."}
{"id": 688, "function": "postgis_srs_all", "question": "在PostGIS的空间参考系统元数据表postgis_srs_all()中，精确检索最前面的10行数据，显示每行的所属的权威标准体系名称auth_name、对应的编号SRID编号auth_srid和空间参考系统名称srname这三个字段的完整内容。", "sql": "SELECT auth_name, auth_srid, srname FROM postgis_srs_all() LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3443, "question_en": "In the PostGIS spatial reference system metadata table postgis_srs_all(), precisely retrieve the first 10 rows of data, displaying the complete contents of the authority name (auth_name), corresponding SRID (auth_srid), and spatial reference system name (srname) fields for each row."}
{"id": 689, "function": "postgis_srs_search", "question": "输出前3条空间参考系统记录的权威标准体系名称、授权SRID、参考系统名称，以及西南角点POINT和东北角点POINT的WKT字符串表示，这些记录是通过搜索包含LINESTRING(-90 30, -91 31)且SRID为4326的空间参考系统得到的。", "sql": "SELECT auth_name, auth_srid, srname,\n  ST_AsText(point_sw) AS point_sw,\n  ST_AsText(point_ne) AS point_ne\nFROM postgis_srs_search('SRID=4326;LINESTRING(-90 30, -91 31)')\nLIMIT 3;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3444, "question_en": "Output the top 3 spatial reference system records' authority name, authorized SRID, reference system name, and the WKT string representations of the southwest corner POINT and northeast corner POINT, obtained by searching for spatial reference systems that contain LINESTRING(-90 30, -91 31) with SRID 4326."}
{"id": 689, "function": "postgis_srs_search", "question": "以WKT字符串格式返回3条空间参考系统记录的西南角点和东北角点坐标，同时显示每条记录的权威标准体系名称auth_name、授权SRID编号auth_srid和参考系统名称srname，查询条件是匹配SRID为4326且包含线段LINESTRING(-90 30, -91 31)的空间参考系统。", "sql": "SELECT auth_name, auth_srid, srname,\n  ST_AsText(point_sw) AS point_sw,\n  ST_AsText(point_ne) AS point_ne\nFROM postgis_srs_search('SRID=4326;LINESTRING(-90 30, -91 31)')\nLIMIT 3;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3445, "question_en": "Return the southwest and northeast corner coordinates in WKT string format for 3 spatial reference system records, along with the authority name (auth_name), authorized SRID (auth_srid), and reference system name (srname) for each record. The query condition is to match SRID 4326 and spatial reference systems containing the linestring LINESTRING(-90 30, -91 31)."}
{"id": 689, "function": "postgis_srs_search", "question": "获取并格式化输出3条空间参考系统信息，要求返回字段包括auth_name、auth_srid、srname，以及将point_sw和point_ne字段转换为WKT字符串，查询基于SRID=4326且包含几何对象LINESTRING(-90 30, -91 31)的空间参考系统搜索。", "sql": "SELECT auth_name, auth_srid, srname,\n  ST_AsText(point_sw) AS point_sw,\n  ST_AsText(point_ne) AS point_ne\nFROM postgis_srs_search('SRID=4326;LINESTRING(-90 30, -91 31)')\nLIMIT 3;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3446, "question_en": "Retrieve and format 3 spatial reference system records, returning fields auth_name, auth_srid, srname, with point_sw and point_ne converted to WKT strings, querying systems based on SRID=4326 that contain the geometry object LINESTRING(-90 30, -91 31)."}
{"id": 689, "function": "postgis_srs_search", "question": "在postgis_srs_search函数中，使用SRID=4326坐标系和由点POINT(-90 30)与POINT(-91 31)构成的LINESTRING几何对象作为输入参数，查询并返回前3条记录中的auth_name授权名称、auth_srid授权SRID、srname空间参考名称，以及point_sw西南角点和point_ne东北角点的WKT文本表示。", "sql": "SELECT auth_name, auth_srid, srname,\n  ST_AsText(point_sw) AS point_sw,\n  ST_AsText(point_ne) AS point_ne\nFROM postgis_srs_search('SRID=4326;LINESTRING(-90 30, -91 31)')\nLIMIT 3;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3447, "question_en": "In the postgis_srs_search function, using the SRID=4326 coordinate system and a LINESTRING geometry object formed by points POINT(-90 30) and POINT(-91 31) as input parameters, query and return the auth_name authorization name, auth_srid authorization SRID, srname spatial reference name, and the WKT text representations of point_sw southwest corner and point_ne northeast corner from the first 3 records."}
{"id": 689, "function": "postgis_srs_search", "question": "如何通过包含SRID=4326坐标系标识和两点坐标POINT(-90 30)、POINT(-91 31)组成的LINESTRING线段的WKT字符串，在postgis_srs_search函数中检索空间参考系统信息，并限定返回结果的前3行，同时显示每个结果的西南角点point_sw和东北角点point_ne的几何文本表示？", "sql": "SELECT auth_name, auth_srid, srname,\n  ST_AsText(point_sw) AS point_sw,\n  ST_AsText(point_ne) AS point_ne\nFROM postgis_srs_search('SRID=4326;LINESTRING(-90 30, -91 31)')\nLIMIT 3;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3448, "question_en": "How to retrieve spatial reference system information in the postgis_srs_search function using a WKT string of a LINESTRING segment composed of SRID=4326 coordinate system identifier and two points POINT(-90 30), POINT(-91 31), limit the returned results to the first 3 rows, and display the geometric text representation of each result's southwest corner point_sw and northeast corner point_ne?"}
{"id": 689, "function": "postgis_srs_search", "question": "给定一个由POINT(-90 30)到POINT(-91 31)的LINESTRING线段，且该线段使用SRID=4326坐标系，请构造SQL查询从postgis_srs_search函数获取不超过3条记录，要求输出每条记录的权威标准体系名称auth_name、授权SRID号auth_srid、参考系名称srname，以及用WKT格式显示的西南角点point_sw和东北角点point_ne坐标。", "sql": "SELECT auth_name, auth_srid, srname,\n  ST_AsText(point_sw) AS point_sw,\n  ST_AsText(point_ne) AS point_ne\nFROM postgis_srs_search('SRID=4326;LINESTRING(-90 30, -91 31)')\nLIMIT 3;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3449, "question_en": "Given a LINESTRING segment from POINT(-90 30) to POINT(-91 31) using SRID=4326, construct an SQL query to retrieve no more than 3 records from the postgis_srs_search function, displaying the authority name auth_name, authorized SRID auth_srid, reference system name srname, and the southwest corner point_sw and northeast corner point_ne coordinates in WKT format."}
{"id": 691, "function": "&&", "question": "输出表tbl1的column1字段值、表tbl2的column1字段值，以及判断tbl1的column2几何字段（包含LINESTRING(0 0, 3 3)和LINESTRING(0 1, 0 5)）与tbl2的column2几何字段（LINESTRING(1 2, 4 6)）是否相交的布尔结果，列名标记为overlaps。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 && tbl2.column2 AS overlaps\nFROM ( VALUES\n        (1, 'LINESTRING(0 0, 3 3)'::geometry),\n        (2, 'LINESTRING(0 1, 0 5)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true], [2, 3, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3450, "question_en": "Output the values of column1 from table tbl1, column1 from table tbl2, and a boolean result indicating whether the geometric field column2 in tbl1 (containing LINESTRING(0 0, 3 3) and LINESTRING(0 1, 0 5)) intersects with the geometric field column2 in tbl2 (LINESTRING(1 2, 4 6)), labeled as overlaps."}
{"id": 691, "function": "&&", "question": "以表格形式返回三列数据：第一列为临时表tbl1中column1的数值（1和2），第二列为临时表tbl2中column1的数值（3），第三列为tbl1的LINESTRING(0 0, 3 3)和LINESTRING(0 1, 0 5)几何对象与tbl2的LINESTRING(1 2, 4 6)的空间相交检测结果，列名显示为overlaps。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 && tbl2.column2 AS overlaps\nFROM ( VALUES\n        (1, 'LINESTRING(0 0, 3 3)'::geometry),\n        (2, 'LINESTRING(0 1, 0 5)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true], [2, 3, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3451, "question_en": "Return a table with three columns: the first column shows values (1 and 2) from column1 in temp table tbl1, the second column shows values (3) from column1 in temp table tbl2, and the third column displays the spatial intersection test result between tbl1's LINESTRING(0 0, 3 3) and LINESTRING(0 1, 0 5) geometries and tbl2's LINESTRING(1 2, 4 6), labeled as overlaps."}
{"id": 691, "function": "&&", "question": "查询结果需包含三个字段：tbl1的column1（对应几何对象为LINESTRING(0 0, 3 3)和LINESTRING(0 1, 0 5)的记录ID）、tbl2的column1（对应LINESTRING(1 2, 4 6)的记录ID3），以及用布尔值表示的两表几何字段的空间重叠关系，输出列命名为overlaps。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 && tbl2.column2 AS overlaps\nFROM ( VALUES\n        (1, 'LINESTRING(0 0, 3 3)'::geometry),\n        (2, 'LINESTRING(0 1, 0 5)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true], [2, 3, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3452, "question_en": "The query result should include three fields: tbl1's column1 (record IDs corresponding to the geometric objects LINESTRING(0 0, 3 3) and LINESTRING(0 1, 0 5)), tbl2's column1 (record ID3 corresponding to LINESTRING(1 2, 4 6)), and a boolean value indicating the spatial overlap relationship between the geometric fields of the two tables, with the output column named overlaps."}
{"id": 691, "function": "&&", "question": "在临时表tbl1中包含两条记录：第一条记录ID为1，几何对象是起点在(0 0)终点在(3 3)的二维线段；第二条记录ID为2，几何对象是起点在(0 1)终点在(0 5)的二维线段。临时表tbl2包含一条记录：ID为3，几何对象是起点在(1 2)终点在(4 6)的二维线段。查询这三条线段之间的空间重叠情况。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 && tbl2.column2 AS overlaps\nFROM ( VALUES\n        (1, 'LINESTRING(0 0, 3 3)'::geometry),\n        (2, 'LINESTRING(0 1, 0 5)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true], [2, 3, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3453, "question_en": "The temporary table tbl1 contains two records: the first record has ID 1 with a 2D line segment from (0 0) to (3 3), and the second record has ID 2 with a 2D line segment from (0 1) to (0 5). The temporary table tbl2 contains one record: ID 3 with a 2D line segment from (1 2) to (4 6). Query the spatial overlap among these three line segments."}
{"id": 691, "function": "&&", "question": "构建三个二维线段对象：第一条线段从坐标(0 0)延伸到(3 3)，第二条从(0 1)延伸到(0 5)，第三条从(1 2)延伸到(4 6)。将这些线段分别存储在临时表tbl1和tbl2中，检查tbl1中每条线段与tbl2中线段的空间重叠关系。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 && tbl2.column2 AS overlaps\nFROM ( VALUES\n        (1, 'LINESTRING(0 0, 3 3)'::geometry),\n        (2, 'LINESTRING(0 1, 0 5)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true], [2, 3, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3454, "question_en": "Construct three 2D line segment objects: the first segment extends from coordinates (0 0) to (3 3), the second from (0 1) to (0 5), and the third from (1 2) to (4 6). Store these segments in temporary tables tbl1 and tbl2 respectively, then check the spatial overlap relationships between each segment in tbl1 and those in tbl2."}
{"id": 691, "function": "&&", "question": "创建两个临时表：tbl1包含两个线段几何体，分别是连接点(0 0)到(3 3)的线段和连接点(0 1)到(0 5)的线段；tbl2包含单个线段几何体，连接点(1 2)到(4 6)。执行空间查询判断tbl1中每个线段与tbl2中线段是否存在边界框重叠。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 && tbl2.column2 AS overlaps\nFROM ( VALUES\n        (1, 'LINESTRING(0 0, 3 3)'::geometry),\n        (2, 'LINESTRING(0 1, 0 5)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true], [2, 3, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3455, "question_en": "Create two temporary tables: tbl1 contains two line geometries, one connecting points (0 0) to (3 3) and the other connecting points (0 1) to (0 5); tbl2 contains a single line geometry connecting points (1 2) to (4 6). Perform a spatial query to check if each line in tbl1 has bounding box overlap with the line in tbl2."}
{"id": 692, "function": "&&&", "question": "输出tbl1表中column1字段值、tbl2表中column1字段值，以及tbl1.column2与tbl2.column2的三维空间重叠检测结果overlaps_3d和二维空间重叠检测结果overlaps_2d，其中tbl1包含两条三维线段LINESTRING Z(0 0 1, 3 3 2)和LINESTRING Z(1 2 0, 0 5 -1)，tbl2包含一条三维线段LINESTRING Z(1 2 1, 4 6 1)。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3d,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING Z(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING Z(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING Z(1 2 1, 4 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3456, "question_en": "Output the values of column1 from tbl1, column1 from tbl2, the 3D spatial overlap check result overlaps_3d, and the 2D spatial overlap check result overlaps_2d between tbl1.column2 and tbl2.column2, where tbl1 contains two 3D linestrings LINESTRING Z(0 0 1, 3 3 2) and LINESTRING Z(1 2 0, 0 5 -1), and tbl2 contains one 3D linestring LINESTRING Z(1 2 1, 4 6 1)."}
{"id": 692, "function": "&&&", "question": "查询并返回tbl1的column1编号、tbl2的column1编号，以及两个表中三维线段的空间重叠状态，其中tbl1包含LINESTRING Z(0 0 1, 3 3 2)和LINESTRING Z(1 2 0, 0 5 -1)，tbl2包含LINESTRING Z(1 2 1, 4 6 1)，要求同时输出三维重叠判断结果overlaps_3d和二维重叠判断结果overlaps_2d。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3d,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING Z(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING Z(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING Z(1 2 1, 4 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3457, "question_en": "Query and return the column1 IDs from tbl1 and tbl2, along with the spatial overlap status of the 3D linestrings in both tables, where tbl1 contains LINESTRING Z(0 0 1, 3 3 2) and LINESTRING Z(1 2 0, 0 5 -1), and tbl2 contains LINESTRING Z(1 2 1, 4 6 1), requiring both the 3D overlap result overlaps_3d and the 2D overlap result overlaps_2d to be output."}
{"id": 692, "function": "&&&", "question": "以表格形式输出以下内容：tbl1第一条记录的column1值1、tbl2的column1值3，以及LINESTRING Z(0 0 1, 3 3 2)与LINESTRING Z(1 2 1, 4 6 1)的三维/二维空间重叠布尔值；tbl1第二条记录的column1值2、tbl2的column1值3，以及LINESTRING Z(1 2 0, 0 5 -1)与LINESTRING Z(1 2 1, 4 6 1)的三维/二维空间重叠布尔值。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3d,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING Z(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING Z(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING Z(1 2 1, 4 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3458, "question_en": "Output the following in table format: tbl1's first record column1 value 1, tbl2's column1 value 3, and the 3D/2D spatial overlap boolean of LINESTRING Z(0 0 1, 3 3 2) and LINESTRING Z(1 2 1, 4 6 1); tbl1's second record column1 value 2, tbl2's column1 value 3, and the 3D/2D spatial overlap boolean of LINESTRING Z(1 2 0, 0 5 -1) and LINESTRING Z(1 2 1, 4 6 1)."}
{"id": 692, "function": "&&&", "question": "在临时表tbl1中包含两条三维线段：第一条线段LINESTRING Z(0 0 1, 3 3 2)从点(0,0,1)延伸到(3,3,2)，第二条线段LINESTRING Z(1 2 0, 0 5 -1)从点(1,2,0)延伸到(0,5,-1)；临时表tbl2包含一条三维线段LINESTRING Z(1 2 1, 4 6 1)从点(1,2,1)延伸到(4,6,1)，查询这三条线段在三维空间(&&&)和二维平面(&&)的重叠情况。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3d,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING Z(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING Z(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING Z(1 2 1, 4 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3459, "question_en": "The temporary table tbl1 contains two 3D linestrings: the first LINESTRING Z(0 0 1, 3 3 2) extends from point (0,0,1) to (3,3,2), and the second LINESTRING Z(1 2 0, 0 5 -1) extends from (1,2,0) to (0,5,-1); the temporary table tbl2 contains one 3D linestring LINESTRING Z(1 2 1, 4 6 1) extending from (1,2,1) to (4,6,1). Query the overlap of these three linestrings in 3D space (&&&) and 2D plane (&&)."}
{"id": 692, "function": "&&&", "question": "构建两个临时表tbl1和tbl2，其中tbl1的第一条记录包含三维线段LINESTRING Z(0 0 1, 3 3 2)（起点坐标(0,0,1)，终点坐标(3,3,2)），第二条记录包含三维线段LINESTRING Z(1 2 0, 0 5 -1)（起点坐标(1,2,0)，终点坐标(0,5,-1)）；tbl2包含一条三维线段LINESTRING Z(1 2 1, 4 6 1)（起点坐标(1,2,1)，终点坐标(4,6,1)），查询这些线段的三维和二维空间关系。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3d,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING Z(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING Z(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING Z(1 2 1, 4 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3460, "question_en": "Construct two temporary tables tbl1 and tbl2, where the first record in tbl1 contains the 3D linestring LINESTRING Z(0 0 1, 3 3 2) (start point (0,0,1), end point (3,3,2)), and the second record contains the 3D linestring LINESTRING Z(1 2 0, 0 5 -1) (start point (1,2,0), end point (0,5,-1)); tbl2 contains a 3D linestring LINESTRING Z(1 2 1, 4 6 1) (start point (1,2,1), end point (4,6,1)), query the 3D and 2D spatial relationships of these linestrings."}
{"id": 692, "function": "&&&", "question": "创建包含三维线段的临时表tbl1和tbl2：tbl1有ID为1的线段LINESTRING Z(0 0 1, 3 3 2)（从(0,0,1)到(3,3,2)）和ID为2的线段LINESTRING Z(1 2 0, 0 5 -1)（从(1,2,0)到(0,5,-1)）；tbl2有ID为3的线段LINESTRING Z(1 2 1, 4 6 1)（从(1,2,1)到(4,6,1)），检查它们的三维空间重叠(&&&)和二维投影重叠(&&)情况。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3d,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING Z(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING Z(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING Z(1 2 1, 4 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3461, "question_en": "Create temporary tables tbl1 and tbl2 containing 3D linestrings: tbl1 has linestring LINESTRING Z(0 0 1, 3 3 2) (from (0,0,1) to (3,3,2)) with ID 1 and linestring LINESTRING Z(1 2 0, 0 5 -1) (from (1,2,0) to (0,5,-1)) with ID 2; tbl2 has linestring LINESTRING Z(1 2 1, 4 6 1) (from (1,2,1) to (4,6,1)) with ID 3, check their 3D spatial overlap (&&&) and 2D projection overlap (&&)."}
{"id": 693, "function": "&&&", "question": "输出表tbl1的column1值、表tbl2的column1值，以及tbl1.column2与tbl2.column2的三维带M值重叠检测结果overlaps_3zm和二维重叠检测结果overlaps_2d，其中tbl1包含两条带M值的线：LINESTRING M(0 0 1, 3 3 2)和LINESTRING M(1 2 0, 0 5 -1)，tbl2包含一条带M值的线：LINESTRING M(1 2 1, 4 6 1)。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3zm,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING M(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING M(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING M(1 2 1, 4 6 1)'::geometry)) AS tbl2;\n", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3462, "question_en": "Output the column1 values from table tbl1, the column1 values from table tbl2, along with the 3D with M-value overlap detection result overlaps_3zm and the 2D overlap detection result overlaps_2d between tbl1.column2 and tbl2.column2, where tbl1 contains two M-value lines: LINESTRING M(0 0 1, 3 3 2) and LINESTRING M(1 2 0, 0 5 -1), and tbl2 contains one M-value line: LINESTRING M(1 2 1, 4 6 1)."}
{"id": 693, "function": "&&&", "question": "以表格形式输出三列数据：第一列为tbl1中column1的数值1或2，第二列为tbl2中column1的数值3，第三列和第四列分别显示LINESTRING M(0 0 1, 3 3 2)/LINESTRING M(1 2 0, 0 5 -1)与LINESTRING M(1 2 1, 4 6 1)的三维带M值重叠状态和二维重叠状态。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3zm,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING M(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING M(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING M(1 2 1, 4 6 1)'::geometry)) AS tbl2;\n", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3463, "question_en": "Output a table with four columns: the first column shows values 1 or 2 from column1 in tbl1, the second column shows value 3 from column1 in tbl2, and the third and fourth columns display the 3D (with M-value) and 2D overlapping status between LINESTRING M(0 0 1, 3 3 2)/LINESTRING M(1 2 0, 0 5 -1) and LINESTRING M(1 2 1, 4 6 1)."}
{"id": 693, "function": "&&&", "question": "返回一个结果表，包含tbl1每条记录的column1值、tbl2的column1固定值3，以及两个几何字段的三维带M值重叠判断overlaps_3zm和二维重叠判断overlaps_2d，几何对象分别为LINESTRING M(0 0 1, 3 3 2)、LINESTRING M(1 2 0, 0 5 -1)和LINESTRING M(1 2 1, 4 6 1)。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3zm,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING M(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING M(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING M(1 2 1, 4 6 1)'::geometry)) AS tbl2;\n", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3464, "question_en": "Return a result table containing the column1 value from each record in tbl1, the fixed value 3 from tbl2's column1, and the 3D with M value overlap check overlaps_3zm and 2D overlap check overlaps_2d between the geometric objects LINESTRING M(0 0 1, 3 3 2), LINESTRING M(1 2 0, 0 5 -1), and LINESTRING M(1 2 1, 4 6 1)."}
{"id": 693, "function": "&&&", "question": "在临时表tbl1中包含两条带M值的线几何：第一条LINESTRING M(0 0 1, 3 3 2)从坐标(0,0)M值1延伸到(3,3)M值2，第二条LINESTRING M(1 2 0, 0 5 -1)从(1,2)M值0延伸到(0,5)M值-1；临时表tbl2包含一条LINESTRING M(1 2 1, 4 6 1)从(1,2)M值1延伸到(4,6)M值1。查询需要比较tbl1和tbl2中几何列的3DZM重叠(&&&)和2D重叠(&&)情况。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3zm,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING M(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING M(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING M(1 2 1, 4 6 1)'::geometry)) AS tbl2;\n", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3465, "question_en": "The temporary table tbl1 contains two linestrings with M-values: the first LINESTRING M(0 0 1, 3 3 2) extends from coordinate (0,0) with M-value 1 to (3,3) with M-value 2, and the second LINESTRING M(1 2 0, 0 5 -1) extends from (1,2) with M-value 0 to (0,5) with M-value -1. The temporary table tbl2 contains a LINESTRING M(1 2 1, 4 6 1) extending from (1,2) with M-value 1 to (4,6) with M-value 1. The query needs to compare the 3DZM overlap (&&&) and 2D overlap (&&) of the geometry columns in tbl1 and tbl2."}
{"id": 693, "function": "&&&", "question": "构建三个带测量值(M)的线几何对象：第一个对象LINESTRING M(0 0 1, 3 3 2)由起点(0,0)M=1和终点(3,3)M=2构成；第二个对象LINESTRING M(1 2 0, 0 5 -1)由起点(1,2)M=0和终点(0,5)M=-1构成；第三个对象LINESTRING M(1 2 1, 4 6 1)由起点(1,2)M=1和终点(4,6)M=1构成。查询需要检测前两个对象与第三个对象在三维空间(含M值)和二维平面的重叠关系。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3zm,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING M(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING M(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING M(1 2 1, 4 6 1)'::geometry)) AS tbl2;\n", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3466, "question_en": "Construct three line geometries with measure values (M): the first object LINESTRING M(0 0 1, 3 3 2) consists of start point (0,0) M=1 and end point (3,3) M=2; the second object LINESTRING M(1 2 0, 0 5 -1) consists of start point (1,2) M=0 and end point (0,5) M=-1; the third object LINESTRING M(1 2 1, 4 6 1) consists of start point (1,2) M=1 and end point (4,6) M=1. The query needs to detect the overlapping relationships between the first two objects and the third object in 3D space (including M values) and 2D plane."}
{"id": 693, "function": "&&&", "question": "具体描述三个线几何对象的构造：tbl1表的第一行数据是LINESTRING M类型，由点序列[(X=0,Y=0,M=1)→(X=3,Y=3,M=2)]组成；第二行是LINESTRING M[(X=1,Y=2,M=0)→(X=0,Y=5,M=-1)]；tbl2表包含LINESTRING M[(X=1,Y=2,M=1)→(X=4,Y=6,M=1)]。查询需要输出每对几何对象在包含M值的3D空间和纯2D空间的重叠检测结果。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3zm,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING M(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING M(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING M(1 2 1, 4 6 1)'::geometry)) AS tbl2;\n", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3467, "question_en": "Describe the construction of three line geometry objects: the first row in tbl1 is a LINESTRING M type, composed of point sequence [(X=0,Y=0,M=1)→(X=3,Y=3,M=2)]; the second row is LINESTRING M[(X=1,Y=2,M=0)→(X=0,Y=5,M=-1)]; tbl2 contains LINESTRING M[(X=1,Y=2,M=1)→(X=4,Y=6,M=1)]. The query needs to output the overlap detection results for each pair of geometric objects in both M-included 3D space and pure 2D space."}
{"id": 694, "function": "&<", "question": "输出表tbl1的column1字段值、表tbl2的column1字段值，以及判断tbl1的LINESTRING(1 2, 4 6)几何对象是否位于tbl2中每个LINESTRING几何对象左侧的结果，结果列命名为overleft。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &< tbl2.column2 AS overleft\nFROM\n  ( VALUES\n        (1, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(6 0, 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3468, "question_en": "Output the values of column1 from table tbl1, column1 from table tbl2, and the result of checking whether the LINESTRING(1 2, 4 6) geometry in tbl1 is to the left of each LINESTRING geometry in tbl2, with the result column named overleft."}
{"id": 694, "function": "&<", "question": "返回tbl1表中ID为1的LINESTRING(1 2, 4 6)与tbl2表中三个LINESTRING几何对象（LINESTRING(0 0, 3 3)、LINESTRING(0 1, 0 5)和LINESTRING(6 0, 6 1)）的空间左右关系比较结果，输出格式为三列：tbl1.column1、tbl2.column1和布尔值overleft。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &< tbl2.column2 AS overleft\nFROM\n  ( VALUES\n        (1, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(6 0, 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3469, "question_en": "Return the spatial left-right relationship comparison results between the LINESTRING(1 2, 4 6) with ID 1 in tbl1 and the three LINESTRING geometries in tbl2 (LINESTRING(0 0, 3 3), LINESTRING(0 1, 0 5), and LINESTRING(6 0, 6 1)), output in three columns: tbl1.column1, tbl2.column1, and the boolean value overleft."}
{"id": 694, "function": "&<", "question": "以表格形式输出查询结果，包含三列：第一列为tbl1表column1字段的值1，第二列为tbl2表column1字段的值（2/3/4），第三列为判断LINESTRING(1 2, 4 6)是否完全位于tbl2各线段左侧的布尔值，列名为overleft。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &< tbl2.column2 AS overleft\nFROM\n  ( VALUES\n        (1, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(6 0, 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3470, "question_en": "Output the query results in table format with three columns: the first column is value1 from column1 of tbl1, the second column is value (2/3/4) from column1 of tbl2, and the third column is a boolean value indicating whether LINESTRING(1 2, 4 6) is entirely to the left of each line segment in tbl2, with the column named overleft."}
{"id": 694, "function": "&<", "question": "在表tbl1中创建一条记录，其column1值为1，column2为LINESTRING(1 2, 4 6)几何对象；在表tbl2中创建三条记录，分别包含LINESTRING(0 0, 3 3)、LINESTRING(0 1, 0 5)和LINESTRING(6 0, 6 1)几何对象，并检查tbl1.column2是否位于tbl2.column2的左侧。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &< tbl2.column2 AS overleft\nFROM\n  ( VALUES\n        (1, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(6 0, 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3471, "question_en": "Create a record in table tbl1 with column1 value as 1 and column2 as the LINESTRING(1 2, 4 6) geometry object; create three records in table tbl2 containing LINESTRING(0 0, 3 3), LINESTRING(0 1, 0 5), and LINESTRING(6 0, 6 1) geometry objects respectively, and check if tbl1.column2 is to the left of tbl2.column2."}
{"id": 694, "function": "&<", "question": "构建一个查询，其中tbl1表包含一条记录，其几何对象为从点(1,2)到点(4,6)的线段；tbl2表包含三条记录，几何对象分别为从点(0,0)到点(3,3)、点(0,1)到点(0,5)和点(6,0)到点(6,1)的线段，并返回tbl1.column2是否位于tbl2.column2左侧的结果。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &< tbl2.column2 AS overleft\nFROM\n  ( VALUES\n        (1, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(6 0, 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3472, "question_en": "Construct a query where table tbl1 contains a record with a line segment geometry from point (1,2) to point (4,6); table tbl2 contains three records with line segment geometries from point (0,0) to point (3,3), point (0,1) to point (0,5), and point (6,0) to point (6,1), respectively, and returns whether tbl1.column2 is to the left of tbl2.column2."}
{"id": 694, "function": "&<", "question": "创建两个临时表tbl1和tbl2，tbl1包含一条记录，其几何对象是起点(1,2)终点(4,6)的线段；tbl2包含三条记录，几何对象分别是起点(0,0)终点(3,3)、起点(0,1)终点(0,5)和起点(6,0)终点(6,1)的线段，然后检查tbl1的线段是否位于tbl2各条线段的左侧。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &< tbl2.column2 AS overleft\nFROM\n  ( VALUES\n        (1, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(6 0, 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3473, "question_en": "Create two temporary tables tbl1 and tbl2, where tbl1 contains a single record with a line segment from point (1,2) to (4,6), and tbl2 contains three records with line segments from (0,0) to (3,3), (0,1) to (0,5), and (6,0) to (6,1), then check if the line segment in tbl1 is to the left of each line segment in tbl2."}
{"id": 695, "function": "&<|", "question": "输出表tbl1中LINESTRING(6 0, 6 4)与表tbl2中三条线段LINESTRING(0 0, 3 3)、LINESTRING(0 1, 0 5)、LINESTRING(1 2, 4 6)的空间下方位关系检测结果，返回格式为tbl1.column1、tbl2.column1和overbelow三列。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &<| tbl2.column2 AS overbelow\nFROM\n  ( VALUES\n        (1, 'LINESTRING(6 0, 6 4)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3474, "question_en": "Output the spatial below relationship detection results between LINESTRING(6 0, 6 4) in table tbl1 and the three linestrings LINESTRING(0 0, 3 3), LINESTRING(0 1, 0 5), LINESTRING(1 2, 4 6) in table tbl2, returning columns tbl1.column1, tbl2.column1, and overbelow."}
{"id": 695, "function": "&<|", "question": "以三列格式输出结果：第一列为tbl1的column1值1，第二列为tbl2的column1值(2/3/4)，第三列为LINESTRING(6 0, 6 4)是否位于各对比线段下方的布尔值。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &<| tbl2.column2 AS overbelow\nFROM\n  ( VALUES\n        (1, 'LINESTRING(6 0, 6 4)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3475, "question_en": "Output the result in three columns: the first column is tbl1's column1 value 1, the second column is tbl2's column1 value (2/3/4), and the third column is a boolean indicating whether LINESTRING(6 0, 6 4) is below each compared line segment."}
{"id": 695, "function": "&<|", "question": "返回包含三列的表格：tbl1的ID值1，tbl2的ID值(2/3/4)，以及垂直线段LINESTRING(6 0, 6 4)是否处于三条斜向线段LINESTRING(0 0, 3 3)、LINESTRING(0 1, 0 5)、LINESTRING(1 2, 4 6)下方的判断结果。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &<| tbl2.column2 AS overbelow\nFROM\n  ( VALUES\n        (1, 'LINESTRING(6 0, 6 4)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3476, "question_en": "Return a table with three columns: ID value 1 from tbl1, ID values (2/3/4) from tbl2, and a boolean indicating whether the vertical line segment LINESTRING(6 0, 6 4) is below the three diagonal line segments LINESTRING(0 0, 3 3), LINESTRING(0 1, 0 5), LINESTRING(1 2, 4 6)."}
{"id": 695, "function": "&<|", "question": "在表tbl1中有一条记录，其column1值为1，column2是LINESTRING(6 0, 6 4)的线几何；表tbl2中有三条记录，分别是column1为2对应LINESTRING(0 0, 3 3)、column1为3对应LINESTRING(0 1, 0 5)、column1为4对应LINESTRING(1 2, 4 6)的线几何。查询这些几何对象是否满足tbl1的线在tbl2的线下方或左侧的空间关系。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &<| tbl2.column2 AS overbelow\nFROM\n  ( VALUES\n        (1, 'LINESTRING(6 0, 6 4)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3477, "question_en": "In table tbl1, there is a record with column1 value 1 and column2 as a line geometry LINESTRING(6 0, 6 4); table tbl2 has three records with column1 values 2, 3, 4 corresponding to line geometries LINESTRING(0 0, 3 3), LINESTRING(0 1, 0 5), and LINESTRING(1 2, 4 6) respectively. Query whether these geometric objects satisfy the spatial relationship where the line in tbl1 is below or to the left of the lines in tbl2."}
{"id": 695, "function": "&<|", "question": "表tbl1包含一条记录，其column2字段是起点(6,0)到终点(6,4)的垂直线段；表tbl2包含三条线段：第一条从(0,0)到(3,3)，第二条从(0,1)到(0,5)，第三条从(1,2)到(4,6)。查询tbl1的垂直线段是否位于tbl2中任意线段的左侧或下方。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &<| tbl2.column2 AS overbelow\nFROM\n  ( VALUES\n        (1, 'LINESTRING(6 0, 6 4)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3478, "question_en": "Table tbl1 contains a record with column2 being a vertical line segment from start point (6,0) to end point (6,4); table tbl2 contains three line segments: the first from (0,0) to (3,3), the second from (0,1) to (0,5), and the third from (1,2) to (4,6). The query checks if the vertical line segment in tbl1 is to the left or below any of the line segments in tbl2."}
{"id": 695, "function": "&<|", "question": "给定表tbl1中的LINESTRING(6 0, 6 4)几何线（x坐标恒为6，y从0到4），与表tbl2中的三条线：LINESTRING(0 0, 3 3)（对角线）、LINESTRING(0 1, 0 5)（垂直线）和LINESTRING(1 2, 4 6)（斜线），检查tbl1的线是否在tbl2每条线的左侧或下方。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &<| tbl2.column2 AS overbelow\nFROM\n  ( VALUES\n        (1, 'LINESTRING(6 0, 6 4)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3479, "question_en": "Given the LINESTRING(6 0, 6 4) geometry in table tbl1 (x-coordinate fixed at 6, y ranging from 0 to 4) and three lines in table tbl2: LINESTRING(0 0, 3 3) (diagonal), LINESTRING(0 1, 0 5) (vertical), and LINESTRING(1 2, 4 6) (slanted), check if tbl1's line is to the left or below each line in tbl2."}
{"id": 696, "function": "<<", "question": "输出表tbl1的column1字段值、表tbl2的column1字段值，以及判断表tbl1的LINESTRING(1 2,1 5)几何对象是否严格位于表tbl2中LINESTRING(0 0,4 3)、LINESTRING(6 0,6 5)和LINESTRING(2 2,5 6)几何对象左侧的布尔结果。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 << tbl2.column2 AS left\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 2, 1 5)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 3)'::geometry),\n        (3, 'LINESTRING (6 0, 6 5)'::geometry),\n        (4, 'LINESTRING (2 2, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3480, "question_en": "Output the values of column1 from table tbl1, column1 from table tbl2, and a boolean result indicating whether the LINESTRING(1 2,1 5) geometry from tbl1 is strictly to the left of the LINESTRING(0 0,4 3), LINESTRING(6 0,6 5), and LINESTRING(2 2,5 6) geometries in tbl2."}
{"id": 696, "function": "<<", "question": "以三列格式返回结果：第一列为临时表tbl1的column1值1，第二列为临时表tbl2中每条记录column1的值(2,3,4)，第三列显示LINESTRING(1 2,1 5)是否严格位于tbl2各LINESTRING对象左侧的布尔值。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 << tbl2.column2 AS left\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 2, 1 5)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 3)'::geometry),\n        (3, 'LINESTRING (6 0, 6 5)'::geometry),\n        (4, 'LINESTRING (2 2, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3481, "question_en": "Return the result in three columns: the first column with value 1 from column1 of temp table tbl1, the second column with each value (2,3,4) from column1 of temp table tbl2, and the third column showing a boolean indicating whether LINESTRING(1 2,1 5) is strictly to the left of each LINESTRING object in tbl2."}
{"id": 696, "function": "<<", "question": "返回包含三个字段的结果集：第一个字段是固定值1，第二个字段遍历取值2/3/4，第三个字段精确判断垂直线段LINESTRING(1 2,1 5)是否完全位于斜向线段LINESTRING(0 0,4 3)、垂直线段LINESTRING(6 0,6 5)和斜向线段LINESTRING(2 2,5 6)的左侧。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 << tbl2.column2 AS left\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 2, 1 5)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 3)'::geometry),\n        (3, 'LINESTRING (6 0, 6 5)'::geometry),\n        (4, 'LINESTRING (2 2, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3482, "question_en": "Return a result set with three fields: the first field is a fixed value of 1, the second field iterates through values 2/3/4, and the third field precisely determines whether the vertical line segment LINESTRING(1 2,1 5) is entirely to the left of the diagonal line segment LINESTRING(0 0,4 3), the vertical line segment LINESTRING(6 0,6 5), and the diagonal line segment LINESTRING(2 2,5 6)."}
{"id": 696, "function": "<<", "question": "在表tbl1中有一条LINESTRING类型的线段，其坐标点为(1 2)和(1 5)；在表tbl2中有三条LINESTRING类型的线段，第一条坐标点为(0 0)和(4 3)，第二条坐标点为(6 0)和(6 5)，第三条坐标点为(2 2)和(5 6)。查询tbl1和tbl2中每条记录的column1，并判断tbl1中的线段是否在tbl2中对应线段的左侧。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 << tbl2.column2 AS left\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 2, 1 5)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 3)'::geometry),\n        (3, 'LINESTRING (6 0, 6 5)'::geometry),\n        (4, 'LINESTRING (2 2, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3483, "question_en": "In table tbl1, there is a LINESTRING with coordinates (1 2) and (1 5); in table tbl2, there are three LINESTRINGs with coordinates (0 0) and (4 3), (6 0) and (6 5), and (2 2) and (5 6) respectively. Query column1 from each record in tbl1 and tbl2, and determine whether the linestring in tbl1 is to the left of the corresponding linestring in tbl2."}
{"id": 696, "function": "<<", "question": "表tbl1包含一条LINESTRING几何对象，起点坐标为(1 2)，终点坐标为(1 5)；表tbl2包含三条LINESTRING几何对象，第一条起点(0 0)终点(4 3)，第二条起点(6 0)终点(6 5)，第三条起点(2 2)终点(5 6)。查询需要返回tbl1和tbl2的column1字段，并计算tbl1的线段是否位于tbl2每条线段的左侧。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 << tbl2.column2 AS left\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 2, 1 5)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 3)'::geometry),\n        (3, 'LINESTRING (6 0, 6 5)'::geometry),\n        (4, 'LINESTRING (2 2, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3484, "question_en": "Table tbl1 contains a LINESTRING geometry object with start point (1 2) and end point (1 5); table tbl2 contains three LINESTRING geometry objects, the first with start point (0 0) and end point (4 3), the second with start point (6 0) and end point (6 5), and the third with start point (2 2) and end point (5 6). The query needs to return the column1 fields from tbl1 and tbl2, and determine whether the line segment in tbl1 is to the left of each line segment in tbl2."}
{"id": 696, "function": "<<", "question": "给定tbl1表中的一条LINESTRING几何对象，其顶点序列为(1 2)到(1 5)；以及tbl2表中的三条LINESTRING几何对象，分别是(0 0)到(4 3)、(6 0)到(6 5)和(2 2)到(5 6)。请查询这些表的column1字段，并判断tbl1的线段是否在tbl2每条线段的左侧。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 << tbl2.column2 AS left\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 2, 1 5)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 3)'::geometry),\n        (3, 'LINESTRING (6 0, 6 5)'::geometry),\n        (4, 'LINESTRING (2 2, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3485, "question_en": "Given a LINESTRING geometry object in table tbl1 with vertex sequence from (1 2) to (1 5), and three LINESTRING geometry objects in table tbl2: (0 0) to (4 3), (6 0) to (6 5), and (2 2) to (5 6). Query the column1 fields of these tables and determine whether the line in tbl1 is to the left of each line in tbl2."}
{"id": 697, "function": "<<|", "question": "输出tbl1表中column1字段值、tbl2表中column1字段值，以及判断tbl1表中LINESTRING(0 0,4 3)几何对象是否严格位于tbl2表中各LINESTRING对象（LINESTRING (1 4, 1 7)、LINESTRING (6 1, 6 5)和LINESTRING (2 3, 5 6)）下方的布尔结果。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 <<| tbl2.column2 AS below\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 4 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (1 4, 1 7)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3486, "question_en": "Output the values of column1 from tbl1, the values of column1 from tbl2, and a boolean result indicating whether the LINESTRING(0 0,4 3) geometry in tbl1 is strictly below each LINESTRING object (LINESTRING (1 4, 1 7), LINESTRING (6 1, 6 5), and LINESTRING (2 3, 5 6)) in tbl2."}
{"id": 697, "function": "<<|", "question": "以表格形式返回tbl1的column1编号1、tbl2的column1编号2/3/4，并显示LINESTRING(0 0,4 3)是否严格低于tbl2中每个LINESTRING对象（LINESTRING (1 4, 1 7)、LINESTRING (6 1, 6 5)和LINESTRING (2 3, 5 6)）的空间关系判断结果。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 <<| tbl2.column2 AS below\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 4 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (1 4, 1 7)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3487, "question_en": "Return in table format the column1 ID 1 from tbl1, column1 IDs 2/3/4 from tbl2, and show the spatial relationship evaluation results of whether LINESTRING(0 0,4 3) is strictly below each LINESTRING object in tbl2 (LINESTRING (1 4, 1 7), LINESTRING (6 1, 6 5), and LINESTRING (2 3, 5 6))."}
{"id": 697, "function": "<<|", "question": "查询结果需包含三列：第一列为数值1，第二列为数值2/3/4，第三列为布尔值，表示LINESTRING(0 0,4 3)是否完全位于tbl2中对应LINESTRING对象（LINESTRING (1 4, 1 7)、LINESTRING (6 1, 6 5)和LINESTRING (2 3, 5 6)）的y轴负方向。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 <<| tbl2.column2 AS below\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 4 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (1 4, 1 7)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3488, "question_en": "The query result should include three columns: the first column is the value 1, the second column is the value 2/3/4, and the third column is a boolean indicating whether LINESTRING(0 0,4 3) is entirely located in the negative y-axis direction of the corresponding LINESTRING objects in tbl2 (LINESTRING (1 4, 1 7), LINESTRING (6 1, 6 5), and LINESTRING (2 3, 5 6))."}
{"id": 697, "function": "<<|", "question": "在表tbl1中有一条LINESTRING (0 0, 4 3)的线段，表tbl2中有三条线段分别是LINESTRING (1 4, 1 7)、LINESTRING (6 1, 6 5)和LINESTRING (2 3, 5 6)，查询tbl1和tbl2中每条记录的column1，并判断tbl1中的线段是否在tbl2中每条线段的下方。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 <<| tbl2.column2 AS below\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 4 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (1 4, 1 7)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3489, "question_en": "In table tbl1, there is a LINESTRING (0 0, 4 3), and table tbl2 contains three LINESTRINGs: (1 4, 1 7), (6 1, 6 5), and (2 3, 5 6). Query column1 from each record in tbl1 and tbl2, and determine if the linestring in tbl1 is below each linestring in tbl2."}
{"id": 697, "function": "<<|", "question": "表tbl1包含一条起点在(0 0)终点在(4 3)的线段，表tbl2包含三条线段：起点(1 4)终点(1 7)、起点(6 1)终点(6 5)和起点(2 3)终点(5 6)，查询tbl1和tbl2的column1字段，并检查tbl1的线段是否位于tbl2每条线段的下方。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 <<| tbl2.column2 AS below\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 4 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (1 4, 1 7)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3490, "question_en": "Table tbl1 contains a line segment from (0 0) to (4 3), and table tbl2 contains three line segments: from (1 4) to (1 7), from (6 1) to (6 5), and from (2 3) to (5 6). Query the column1 fields of tbl1 and tbl2, and check if the line segment in tbl1 lies below each line segment in tbl2."}
{"id": 697, "function": "<<|", "question": "从表tbl1中的LINESTRING (0 0, 4 3)线段和表tbl2中的三条线段LINESTRING (1 4, 1 7)、LINESTRING (6 1, 6 5)和LINESTRING (2 3, 5 6)出发，查询两个表的column1字段，并判断tbl1的线段是否在tbl2每条线段的下方。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 <<| tbl2.column2 AS below\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 4 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (1 4, 1 7)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3491, "question_en": "From the LINESTRING (0 0, 4 3) in table tbl1 and the three LINESTRINGs (1 4, 1 7), (6 1, 6 5), and (2 3, 5 6) in table tbl2, query the column1 fields of both tables and determine whether the linestring in tbl1 is below each linestring in tbl2."}
{"id": 698, "function": "=", "question": "输出LINESTRING(0 0, 0 1, 1 0)和LINESTRING(1 1, 0 0)这两个几何对象是否相等的布尔判断结果。", "sql": "SELECT 'LINESTRING(0 0, 0 1, 1 0)'::geometry = 'LINESTRING(1 1, 0 0)'::geometry;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3492, "question_en": "Output the boolean result indicating whether the two geometric objects LINESTRING(0 0, 0 1, 1 0) and LINESTRING(1 1, 0 0) are equal."}
{"id": 698, "function": "=", "question": "以布尔值形式返回，判断由点(0,0)、(0,1)、(1,0)组成的折线与由点(1,1)、(0,0)组成的折线是否空间相等。", "sql": "SELECT 'LINESTRING(0 0, 0 1, 1 0)'::geometry = 'LINESTRING(1 1, 0 0)'::geometry;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3493, "question_en": "Return a boolean indicating whether the polyline formed by points (0,0), (0,1), (1,0) is spatially equal to the polyline formed by points (1,1), (0,0)."}
{"id": 698, "function": "=", "question": "将LINESTRING(0 0, 0 1, 1 0)与LINESTRING(1 1, 0 0)进行空间相等性比较，输出结果为true或false。", "sql": "SELECT 'LINESTRING(0 0, 0 1, 1 0)'::geometry = 'LINESTRING(1 1, 0 0)'::geometry;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3494, "question_en": "Compare the spatial equality between LINESTRING(0 0, 0 1, 1 0) and LINESTRING(1 1, 0 0), and output the result as true or false."}
{"id": 698, "function": "=", "question": "比较由三个顶点组成的折线LINESTRING(0 0, 0 1, 1 0)和由两个顶点组成的折线LINESTRING(1 1, 0 0)在空间上是否完全相等。", "sql": "SELECT 'LINESTRING(0 0, 0 1, 1 0)'::geometry = 'LINESTRING(1 1, 0 0)'::geometry;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3495, "question_en": "Compare whether the polyline LINESTRING(0 0, 0 1, 1 0) with three vertices is spatially identical to the polyline LINESTRING(1 1, 0 0) with two vertices."}
{"id": 698, "function": "=", "question": "判断折线LINESTRING(0 0, 0 1, 1 0)（起点坐标0 0，经过0 1，终点1 0）与折线LINESTRING(1 1, 0 0)（起点1 1，终点0 0）的几何形状是否相同。", "sql": "SELECT 'LINESTRING(0 0, 0 1, 1 0)'::geometry = 'LINESTRING(1 1, 0 0)'::geometry;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3496, "question_en": "Determine whether the geometric shapes of the linestrings LINESTRING(0 0, 0 1, 1 0) (starting at 0 0, passing through 0 1, ending at 1 0) and LINESTRING(1 1, 0 0) (starting at 1 1, ending at 0 0) are identical."}
{"id": 698, "function": "=", "question": "验证包含三个坐标点（0 0, 0 1, 1 0）的折线几何对象与包含两个坐标点（1 1, 0 0）的折线几何对象在空间上是否完全重合。", "sql": "SELECT 'LINESTRING(0 0, 0 1, 1 0)'::geometry = 'LINESTRING(1 1, 0 0)'::geometry;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3497, "question_en": "Verify if the polyline geometry object containing three coordinate points (0 0, 0 1, 1 0) spatially coincides exactly with the polyline geometry object containing two coordinate points (1 1, 0 0)."}
{"id": 699, "function": "=", "question": "将临时表foo中column1字段存储的两条线段LINESTRING(0 0, 1 1)和LINESTRING(1 1, 0 0)转换为WKT格式字符串输出。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3498, "question_en": "Convert the two linestrings LINESTRING(0 0, 1 1) and LINESTRING(1 1, 0 0) stored in column1 of the temporary table foo into WKT format strings."}
{"id": 699, "function": "=", "question": "以WKT文本形式输出临时表foo中column1列包含的两个几何对象：从(0,0)到(1,1)的线段和从(1,1)到(0,0)的线段。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3499, "question_en": "Output the two geometric objects in the column1 of the temporary table foo as WKT text: a line segment from (0,0) to (1,1) and a line segment from (1,1) to (0,0)."}
{"id": 699, "function": "=", "question": "查询临时表foo中column1字段的几何数据，要求返回LINESTRING(0 0, 1 1)和LINESTRING(1 1, 0 0)这两个线段的WKT字符串表示。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3500, "question_en": "Query the geometric data in column1 of the temporary table foo, returning the WKT string representations of the two linestrings: LINESTRING(0 0, 1 1) and LINESTRING(1 1, 0 0)."}
{"id": 699, "function": "=", "question": "将临时表foo中column1列的两个LINESTRING几何对象转换为WKT文本格式输出，第一个线段连接坐标(0 0)到(1 1)，第二个线段连接坐标(1 1)到(0 0)。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3501, "question_en": "Convert the two LINESTRING geometries in column1 of the temporary table foo to WKT format, where the first line connects coordinates (0 0) to (1 1) and the second line connects (1 1) to (0 0)."}
{"id": 699, "function": "=", "question": "查询临时表foo中column1列的两个线段的WKT表示，其中第一条线段由点(0 0)和点(1 1)构成，第二条线段由点(1 1)和点(0 0)构成。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3502, "question_en": "Query the WKT representations of two line segments in column1 of the temporary table foo, where the first segment is formed by points (0 0) and (1 1), and the second segment by points (1 1) and (0 0)."}
{"id": 699, "function": "=", "question": "以WKT格式输出临时表foo中column1列的两个LINESTRING几何对象，第一个对象包含顶点序列(0 0)和(1 1)，第二个对象包含顶点序列(1 1)和(0 0)。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3503, "question_en": "Output the two LINESTRING geometries from column1 in the temporary table foo in WKT format: the first object contains the vertex sequence (0 0) and (1 1), and the second object contains the vertex sequence (1 1) and (0 0)."}
{"id": 700, "function": "=", "question": "输出临时表foo中经过分组去重后的LINESTRING几何对象的WKT字符串表示，包含LINESTRING(0 0, 1 1)和LINESTRING(1 1, 0 0)两种可能结果。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo\nGROUP BY column1;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3504, "question_en": "Output the WKT string representations of distinct LINESTRING geometries from the temporary table foo after grouping, including both possible results: LINESTRING(0 0, 1 1) and LINESTRING(1 1, 0 0)."}
{"id": 700, "function": "=", "question": "将临时表foo中的LINESTRING(0 0, 1 1)和LINESTRING(1 1, 0 0)两条线段按几何值分组后，返回每组的标准WKT文本格式。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo\nGROUP BY column1;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3505, "question_en": "Group the LINESTRING(0 0, 1 1) and LINESTRING(1 1, 0 0) line segments from the temporary table foo by their geometric values, then return the standard WKT text format for each group."}
{"id": 700, "function": "=", "question": "查询临时表foo中所有不重复的LINESTRING几何对象（包括起点到终点和终点到起点两种方向），并以WKT字符串形式输出结果。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo\nGROUP BY column1;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3506, "question_en": "Query all distinct LINESTRING geometries (including both start-to-end and end-to-start directions) from the temporary table foo and output the results as WKT strings."}
{"id": 700, "function": "=", "question": "将包含LINESTRING(0 0, 1 1)和LINESTRING(1 1, 0 0)两条折线的临时表foo按column1分组，输出每条折线的WKT表示。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo\nGROUP BY column1;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3507, "question_en": "Group the temporary table foo containing the linestrings LINESTRING(0 0, 1 1) and LINESTRING(1 1, 0 0) by column1, and output the WKT representation of each linestring."}
{"id": 700, "function": "=", "question": "在临时表foo中，如何将起点为(0 0)终点为(1 1)的折线，与起点为(1 1)终点为(0 0)的折线分别转换为WKT格式输出？", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo\nGROUP BY column1;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3508, "question_en": "How to convert the linestring from (0 0) to (1 1) and the linestring from (1 1) to (0 0) into WKT format respectively in the temporary table foo?"}
{"id": 700, "function": "=", "question": "给定两个折线对象：第一条连接点(0 0)到(1 1)，第二条连接点(1 1)到(0 0)，如何通过VALUES子句创建临时表foo并按几何列分组输出WKT？", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo\nGROUP BY column1;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3509, "question_en": "Given two linestring objects: the first connects points (0 0) to (1 1), and the second connects points (1 1) to (0 0), how to create a temporary table foo using the VALUES clause and output WKT grouped by the geometry column?"}
{"id": 701, "function": "=", "question": "输出比较POINT(1707296.37 4820536.77)和POINT(1707296.27 4820536.87)是否相等的布尔结果，列名为pt_intersect。", "sql": "SELECT ST_GeomFromText('POINT(1707296.37 4820536.77)') =\n        ST_GeomFromText('POINT(1707296.27 4820536.87)') As pt_intersect;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3510, "question_en": "Output a boolean result comparing whether POINT(1707296.37 4820536.77) and POINT(1707296.27 4820536.87) are equal, with the column name pt_intersect."}
{"id": 701, "function": "=", "question": "将POINT(1707296.37 4820536.77)与POINT(1707296.27 4820536.87)进行空间相等性判断，返回结果列命名为pt_intersect。", "sql": "SELECT ST_GeomFromText('POINT(1707296.37 4820536.77)') =\n        ST_GeomFromText('POINT(1707296.27 4820536.87)') As pt_intersect;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3511, "question_en": "Perform a spatial equality check between POINT(1707296.37 4820536.77) and POINT(1707296.27 4820536.87), naming the result column pt_intersect."}
{"id": 701, "function": "=", "question": "以pt_intersect作为列名，输出POINT(1707296.37 4820536.77)和POINT(1707296.27 4820536.87)是否完全相同的布尔值。", "sql": "SELECT ST_GeomFromText('POINT(1707296.37 4820536.77)') =\n        ST_GeomFromText('POINT(1707296.27 4820536.87)') As pt_intersect;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3512, "question_en": "Output a boolean value in the column named 'pt_intersect' indicating whether POINT(1707296.37 4820536.77) and POINT(1707296.27 4820536.87) are exactly the same."}
{"id": 701, "function": "=", "question": "比较两个二维点POINT(1707296.37 4820536.77)和POINT(1707296.27 4820536.87)是否空间重合，并将结果命名为pt_intersect。", "sql": "SELECT ST_GeomFromText('POINT(1707296.37 4820536.77)') =\n        ST_GeomFromText('POINT(1707296.27 4820536.87)') As pt_intersect;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3513, "question_en": "Compare whether the two 2D points POINT(1707296.37 4820536.77) and POINT(1707296.27 4820536.87) spatially coincide, and name the result pt_intersect."}
{"id": 701, "function": "=", "question": "使用ST_GeomFromText函数分别从WKT格式创建坐标为(1707296.37,4820536.77)和(1707296.27,4820536.87)的两个点对象，检测其空间相等性。", "sql": "SELECT ST_GeomFromText('POINT(1707296.37 4820536.77)') =\n        ST_GeomFromText('POINT(1707296.27 4820536.87)') As pt_intersect;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3514, "question_en": "Use the ST_GeomFromText function to create two point objects with coordinates (1707296.37,4820536.77) and (1707296.27,4820536.87) from WKT format, and check their spatial equality."}
{"id": 701, "function": "=", "question": "将文本'POINT(1707296.37 4820536.77)'转换为几何对象，与另一个由'POINT(1707296.27 4820536.87)'转换的几何对象进行空间位置比对，输出布尔结果列pt_intersect。", "sql": "SELECT ST_GeomFromText('POINT(1707296.37 4820536.77)') =\n        ST_GeomFromText('POINT(1707296.27 4820536.87)') As pt_intersect;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3515, "question_en": "Convert the text 'POINT(1707296.37 4820536.77)' into a geometry object, compare its spatial position with another geometry object converted from 'POINT(1707296.27 4820536.87)', and output a boolean result column pt_intersect."}
{"id": 702, "function": "@", "question": "输出表tbl1的column1字段值、表tbl2的column1字段值，以及判断tbl1中LINESTRING(1 1, 3 3)是否被tbl2中各LINESTRING包含的结果，结果列命名为contained。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 @ tbl2.column2 AS contained\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (2 2, 4 4)'::geometry),\n        (4, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3516, "question_en": "Output the values of column1 from table tbl1, the values of column1 from table tbl2, and a result indicating whether LINESTRING(1 1, 3 3) in tbl1 is contained by each LINESTRING in tbl2, with the result column named 'contained'."}
{"id": 702, "function": "@", "question": "以表格形式返回三列数据：第一列为临时表tbl1的ID值1，第二列为临时表tbl2的ID值(2/3/4)，第三列为LINESTRING(1 1, 3 3)是否被LINESTRING(0 0,4 4)、LINESTRING(2 2,4 4)或LINESTRING(1 1,3 3)完全包含的布尔结果。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 @ tbl2.column2 AS contained\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (2 2, 4 4)'::geometry),\n        (4, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3517, "question_en": "Return a table with three columns: the first column is the ID value 1 from temporary table tbl1, the second column is the ID value (2/3/4) from temporary table tbl2, and the third column is a boolean result indicating whether LINESTRING(1 1, 3 3) is fully contained by LINESTRING(0 0,4 4), LINESTRING(2 2,4 4), or LINESTRING(1 1,3 3)."}
{"id": 702, "function": "@", "question": "查询结果需包含三个字段：源线段LINESTRING(1 1,3 3)的编号1，目标线段集合中各线段编号(2对应LINESTRING(0 0,4 4)、3对应LINESTRING(2 2,4 4)、4对应LINESTRING(1 1,3 3))，以及用\"@\"运算符计算的包含关系真值。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 @ tbl2.column2 AS contained\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (2 2, 4 4)'::geometry),\n        (4, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3518, "question_en": "The query result should include three fields: the ID 1 of the source linestring LINESTRING(1 1,3 3), the IDs of the target linestrings (2 for LINESTRING(0 0,4 4), 3 for LINESTRING(2 2,4 4), 4 for LINESTRING(1 1,3 3)), and the containment truth value calculated using the \"@\" operator."}
{"id": 702, "function": "@", "question": "在表tbl1中创建一条记录，其column1值为1，column2为LINESTRING类型几何对象，坐标点依次为(1 1)和(3 3)；同时在表tbl2中创建三条记录，第一条column1为2，column2为LINESTRING(0 0, 4 4)，第二条column1为3，column2为LINESTRING(2 2, 4 4)，第三条column1为4，column2为LINESTRING(1 1, 3 3)。查询tbl1和tbl2中每条记录的column1值，并检查tbl1.column2是否被tbl2.column2包含。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 @ tbl2.column2 AS contained\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (2 2, 4 4)'::geometry),\n        (4, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3519, "question_en": "Create a record in table tbl1 with column1 value as 1 and column2 as a LINESTRING geometry object with coordinates (1 1) and (3 3); simultaneously create three records in table tbl2: the first with column1 as 2 and column2 as LINESTRING(0 0, 4 4), the second with column1 as 3 and column2 as LINESTRING(2 2, 4 4), and the third with column1 as 4 and column2 as LINESTRING(1 1, 3 3). Query the column1 values of each record in tbl1 and tbl2, and check if tbl1.column2 is contained by tbl2.column2."}
{"id": 702, "function": "@", "question": "构造临时表tbl1包含单条记录：column1=1，column2是由点(1 1)到(3 3)的线段；构造临时表tbl2包含三条记录：第一条column1=2，column2是从(0 0)到(4 4)的线段；第二条column1=3，column2是从(2 2)到(4 4)的线段；第三条column1=4，column2是与tbl1相同的(1 1)到(3 3)线段。查询两表中所有记录的column1值，并用运算符判断tbl1的线段是否被tbl2的各线段包含。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 @ tbl2.column2 AS contained\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (2 2, 4 4)'::geometry),\n        (4, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3520, "question_en": "Create a temporary table tbl1 with a single record: column1=1, column2 is the line segment from point (1 1) to (3 3); create a temporary table tbl2 with three records: the first has column1=2, column2 is the line segment from (0 0) to (4 4); the second has column1=3, column2 is the line segment from (2 2) to (4 4); the third has column1=4, column2 is the same line segment as tbl1 from (1 1) to (3 3). Query the column1 values of all records in both tables and use an operator to determine if the line segment in tbl1 is contained by each line segment in tbl2."}
{"id": 702, "function": "@", "question": "定义表tbl1有1行数据：column1值为1，column2是起点(1 1)终点(3 3)的线几何；定义表tbl2有3行数据：第1行column1=2，column2是(0 0)到(4 4)的线；第2行column1=3，column2是(2 2)到(4 4)的线；第3行column1=4，column2是(1 1)到(3 3)的线。返回两表的column1字段，并用运算符检测tbl1的线是否被tbl2的各线包含。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 @ tbl2.column2 AS contained\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (2 2, 4 4)'::geometry),\n        (4, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3521, "question_en": "Define table tbl1 with 1 row: column1 value is 1, column2 is a line geometry from point (1 1) to (3 3); define table tbl2 with 3 rows: row 1 has column1=2, column2 is a line from (0 0) to (4 4); row 2 has column1=3, column2 is a line from (2 2) to (4 4); row 3 has column1=4, column2 is a line from (1 1) to (3 3). Return the column1 fields from both tables and use an operator to check if tbl1's line is contained by each line in tbl2."}
{"id": 703, "function": "|>>", "question": "输出表tbl1中LINESTRING(1 4,1 7)与表tbl2中所有LINESTRING几何对象的空间上下关系检测结果，要求返回tbl1.column1、tbl2.column1以及|>>运算符的布尔结果列（列别名为above）。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 |>> tbl2.column2 AS above\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 4, 1 7)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 2)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3522, "question_en": "Output the spatial above-below relationship detection results between LINESTRING(1 4,1 7) in table tbl1 and all LINESTRING geometry objects in table tbl2, returning tbl1.column1, tbl2.column1, and a boolean result column (aliased as above) for the |>> operator."}
{"id": 703, "function": "|>>", "question": "以三列格式输出结果：第一列为tbl1的column1值1，第二列为tbl2的column1值（2/3/4），第三列为LINESTRING(1 4,1 7)是否严格位于tbl2中各LINESTRING上方的布尔值（列别名above）。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 |>> tbl2.column2 AS above\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 4, 1 7)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 2)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3523, "question_en": "Output the result in three columns: the first column is the value1 of column1 in tbl1, the second column is the value (2/3/4) of column1 in tbl2, and the third column is a boolean value (column alias 'above') indicating whether LINESTRING(1 4,1 7) is strictly above each LINESTRING in tbl2."}
{"id": 703, "function": "|>>", "question": "返回结构化查询结果：包含tbl1的ID值1、tbl2的ID值（2/3/4）以及LINESTRING(1 4,1 7)相对于LINESTRING(0 0,4 2)、LINESTRING(6 1,6 5)、LINESTRING(2 3,5 6)的空间上下位置关系布尔值（列名为above）。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 |>> tbl2.column2 AS above\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 4, 1 7)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 2)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3524, "question_en": "Return structured query results: include ID value 1 from tbl1, ID values (2/3/4) from tbl2, and the boolean spatial above/below relationship (column named 'above') of LINESTRING(1 4,1 7) relative to LINESTRING(0 0,4 2), LINESTRING(6 1,6 5), and LINESTRING(2 3,5 6)."}
{"id": 703, "function": "|>>", "question": "在表tbl1中有一条LINESTRING几何对象，其路径点坐标为(1 4)和(1 7)；表tbl2中有三条LINESTRING几何对象，第一条路径点坐标为(0 0)和(4 2)，第二条路径点坐标为(6 1)和(6 5)，第三条路径点坐标为(2 3)和(5 6)。请查询tbl1和tbl2中每条记录，并判断tbl1中的LINESTRING是否完全位于tbl2中每条LINESTRING的上方。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 |>> tbl2.column2 AS above\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 4, 1 7)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 2)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3525, "question_en": "In table tbl1 there is a LINESTRING geometry with vertices at (1 4) and (1 7); table tbl2 contains three LINESTRING geometries—the first with vertices at (0 0) and (4 2), the second at (6 1) and (6 5), and the third at (2 3) and (5 6). Query each record in tbl1 and tbl2 to determine whether the LINESTRING in tbl1 is entirely above each LINESTRING in tbl2."}
{"id": 703, "function": "|>>", "question": "表tbl1包含一条垂直线段LINESTRING，起点坐标(1 4)，终点坐标(1 7)；表tbl2包含三条线段：第一条LINESTRING从(0 0)到(4 2)，第二条LINESTRING从(6 1)到(6 5)，第三条LINESTRING从(2 3)到(5 6)。请查询这些几何对象，并返回tbl1中线段是否完全位于tbl2中每条线段的上方。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 |>> tbl2.column2 AS above\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 4, 1 7)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 2)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3526, "question_en": "Table tbl1 contains a vertical line segment LINESTRING with start point (1 4) and end point (1 7); table tbl2 contains three line segments: the first LINESTRING from (0 0) to (4 2), the second LINESTRING from (6 1) to (6 5), and the third LINESTRING from (2 3) to (5 6). Query these geometric objects and return whether the line in tbl1 is entirely above each line segment in tbl2."}
{"id": 703, "function": "|>>", "question": "给定一个垂直线段LINESTRING(1 4, 1 7)存储在tbl1中，以及三个不同的线段存储在tbl2中：LINESTRING(0 0, 4 2)、LINESTRING(6 1, 6 5)和LINESTRING(2 3, 5 6)。请执行空间查询，判断tbl1中的垂直线段是否完全位于tbl2中每条线段的上方。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 |>> tbl2.column2 AS above\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 4, 1 7)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 2)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3527, "question_en": "Given a vertical line segment LINESTRING(1 4, 1 7) stored in tbl1, and three different line segments stored in tbl2: LINESTRING(0 0, 4 2), LINESTRING(6 1, 6 5), and LINESTRING(2 3, 5 6). Perform a spatial query to determine if the vertical segment in tbl1 is entirely above each line segment in tbl2."}
{"id": 704, "function": "~", "question": "输出表tbl1的column1字段值、表tbl2的column1字段值，以及判断tbl1中LINESTRING(0 0,3 3)是否包含tbl2中各LINESTRING几何对象的布尔结果。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 ~ tbl2.column2 AS contains\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (1 1, 2 2)'::geometry),\n        (4, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3528, "question_en": "Output the values of column1 from table tbl1, the values of column1 from table tbl2, and a boolean result indicating whether the LINESTRING(0 0,3 3) in tbl1 contains each LINESTRING geometry object in tbl2."}
{"id": 704, "function": "~", "question": "以表格形式返回tbl1的column1编号、tbl2的column1编号，以及LINESTRING(0 0,3 3)是否包含LINESTRING(0 0,4 4)、LINESTRING(1 1,2 2)和LINESTRING(0 0,3 3)的验证结果。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 ~ tbl2.column2 AS contains\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (1 1, 2 2)'::geometry),\n        (4, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3529, "question_en": "Return in table format the column1 IDs from tbl1 and tbl2, along with the verification results of whether LINESTRING(0 0,3 3) contains LINESTRING(0 0,4 4), LINESTRING(1 1,2 2), and LINESTRING(0 0,3 3)."}
{"id": 704, "function": "~", "question": "生成包含三列的输出：第一列为固定值1，第二列为数值2/3/4，第三列显示LINESTRING(0 0,3 3)是否完全包含LINESTRING(0 0,4 4)、LINESTRING(1 1,2 2)或自身几何对象。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 ~ tbl2.column2 AS contains\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (1 1, 2 2)'::geometry),\n        (4, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3530, "question_en": "Generate an output with three columns: the first column is a fixed value of 1, the second column contains the values 2/3/4, and the third column indicates whether LINESTRING(0 0,3 3) fully contains LINESTRING(0 0,4 4), LINESTRING(1 1,2 2), or itself."}
{"id": 704, "function": "~", "question": "在表tbl1中创建一条记录，其column1值为1，column2为LINESTRING类型几何对象，坐标依次为(0 0)和(3 3)；同时在表tbl2中创建三条记录，分别包含LINESTRING(0 0, 4 4)、LINESTRING(1 1, 2 2)和LINESTRING(0 0, 3 3)几何对象，比较tbl1.column2是否包含tbl2.column2。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 ~ tbl2.column2 AS contains\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (1 1, 2 2)'::geometry),\n        (4, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3531, "question_en": "Create a record in table tbl1 with column1 value as 1 and column2 as a LINESTRING geometry object with coordinates (0 0) and (3 3); simultaneously create three records in table tbl2, each containing LINESTRING(0 0, 4 4), LINESTRING(1 1, 2 2), and LINESTRING(0 0, 3 3) geometry objects, then compare whether tbl1.column2 contains tbl2.column2."}
{"id": 704, "function": "~", "question": "构造临时表tbl1包含单条记录：column1=1，column2是由点(0 0)到点(3 3)的线段；临时表tbl2包含三条记录：第一条column1=2且线段连接(0 0)和(4 4)，第二条column1=3且线段连接(1 1)和(2 2)，第三条column1=4且线段与tbl1相同，最终检查tbl1的线段是否包含tbl2各线段。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 ~ tbl2.column2 AS contains\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (1 1, 2 2)'::geometry),\n        (4, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3532, "question_en": "Create a temporary table tbl1 with a single record: column1=1, column2 is a line segment from point (0 0) to point (3 3); temporary table tbl2 contains three records: the first with column1=2 and a line segment connecting (0 0) and (4 4), the second with column1=3 and a line segment connecting (1 1) and (2 2), the third with column1=4 and the same line segment as tbl1, then check if the line segment in tbl1 contains each line segment in tbl2."}
{"id": 704, "function": "~", "question": "精确构建两个临时表：tbl1的column2是起点(0 0)终点(3 3)的线段；tbl2包含三条线段：第一条从(0 0)到(4 4)，第二条从(1 1)到(2 2)，第三条与tbl1完全相同。查询需要返回tbl1和tbl2的ID列，并判断tbl1的线段是否完全包含tbl2每条线段。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 ~ tbl2.column2 AS contains\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (1 1, 2 2)'::geometry),\n        (4, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3533, "question_en": "Precisely construct two temporary tables: tbl1's column2 is a line segment from start point (0 0) to end point (3 3); tbl2 contains three line segments: the first from (0 0) to (4 4), the second from (1 1) to (2 2), and the third identical to tbl1. The query should return the ID columns of tbl1 and tbl2, and determine whether tbl1's line segment fully contains each line segment in tbl2."}
{"id": 705, "function": "~=", "question": "输出LINESTRING(0 0, 1 1)和LINESTRING(0 1, 1 0)两个几何对象是否在空间上相等的布尔判断结果。", "sql": "select 'LINESTRING(0 0, 1 1)'::geometry ~= 'LINESTRING(0 1, 1 0)'::geometry as equality;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3534, "question_en": "Output the boolean result indicating whether the two geometric objects LINESTRING(0 0, 1 1) and LINESTRING(0 1, 1 0) are spatially equal."}
{"id": 705, "function": "~=", "question": "以布尔值形式返回LINESTRING(0 0, 1 1)与LINESTRING(0 1, 1 0)是否满足空间相等(~=)关系的结果。", "sql": "select 'LINESTRING(0 0, 1 1)'::geometry ~= 'LINESTRING(0 1, 1 0)'::geometry as equality;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3535, "question_en": "Return the result as a boolean value indicating whether LINESTRING(0 0, 1 1) and LINESTRING(0 1, 1 0) satisfy the spatial equality (~=) relationship."}
{"id": 705, "function": "~=", "question": "将LINESTRING(0 0, 1 1)和LINESTRING(0 1, 1 0)进行空间相等性比较(~=)，输出结果为true或false。", "sql": "select 'LINESTRING(0 0, 1 1)'::geometry ~= 'LINESTRING(0 1, 1 0)'::geometry as equality;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3536, "question_en": "Compare the spatial equality (~=) of LINESTRING(0 0, 1 1) and LINESTRING(0 1, 1 0), output the result as true or false."}
{"id": 705, "function": "~=", "question": "给定LINESTRING(0 0, 1 1)和LINESTRING(0 1, 1 0)两条折线，其中第一条折线由点(0 0)到点(1 1)构成，第二条折线由点(0 1)到点(1 0)构成，使用~=运算符比较它们的几何相等性。", "sql": "select 'LINESTRING(0 0, 1 1)'::geometry ~= 'LINESTRING(0 1, 1 0)'::geometry as equality;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3537, "question_en": "Given the two linestrings LINESTRING(0 0, 1 1) and LINESTRING(0 1, 1 0), where the first linestring is formed by points (0 0) to (1 1) and the second by points (0 1) to (1 0), use the ~= operator to compare their geometric equality."}
{"id": 705, "function": "~=", "question": "如何判断LINESTRING(0 0, 1 1)这条由坐标点(0 0)和(1 1)组成的折线，与LINESTRING(0 1, 1 0)这条由坐标点(0 1)和(1 0)组成的折线是否在几何上相等？", "sql": "select 'LINESTRING(0 0, 1 1)'::geometry ~= 'LINESTRING(0 1, 1 0)'::geometry as equality;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3538, "question_en": "How to determine if the linestring LINESTRING(0 0, 1 1) composed of points (0 0) and (1 1) is geometrically equal to the linestring LINESTRING(0 1, 1 0) composed of points (0 1) and (1 0)?"}
{"id": 705, "function": "~=", "question": "在PostGIS中，使用~=运算符比较两个折线几何对象是否相等：第一个对象是LINESTRING(0 0, 1 1)，由点(0 0)和(1 1)连接而成；第二个对象是LINESTRING(0 1, 1 0)，由点(0 1)和(1 0)连接而成。", "sql": "select 'LINESTRING(0 0, 1 1)'::geometry ~= 'LINESTRING(0 1, 1 0)'::geometry as equality;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3539, "question_en": "In PostGIS, use the ~= operator to compare if two polyline geometry objects are equal: the first object is LINESTRING(0 0, 1 1), formed by connecting points (0 0) and (1 1); the second object is LINESTRING(0 1, 1 0), formed by connecting points (0 1) and (1 0)."}
{"id": 709, "function": "Box2D", "question": "输出LINESTRING(1 2, 3 4, 5 6)的边界框的WKT表示，格式为BOX2D。", "sql": "SELECT Box2D(ST_GeomFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["BOX(1 2,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3540, "question_en": "Output the WKT representation of the bounding box for LINESTRING(1 2, 3 4, 5 6) in BOX2D format."}
{"id": 709, "function": "Box2D", "question": "将LINESTRING(1 2, 3 4, 5 6)转换为边界框，并返回其二维边界框的坐标范围。", "sql": "SELECT Box2D(ST_GeomFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["BOX(1 2,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3541, "question_en": "Convert LINESTRING(1 2, 3 4, 5 6) into a bounding box and return the coordinate range of its 2D bounding box."}
{"id": 709, "function": "Box2D", "question": "计算LINESTRING(1 2, 3 4, 5 6)的最小外接矩形，并以BOX2D格式输出结果。", "sql": "SELECT Box2D(ST_GeomFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["BOX(1 2,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3542, "question_en": "Calculate the minimum bounding rectangle of LINESTRING(1 2, 3 4, 5 6) and output the result in BOX2D format."}
{"id": 709, "function": "Box2D", "question": "如何通过LINESTRING(1 2, 3 4, 5 6)这条由三个顶点构成的折线（坐标依次为1 2、3 4、5 6），计算其最小边界矩形并使用Box2D函数输出？", "sql": "SELECT Box2D(ST_GeomFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["BOX(1 2,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3543, "question_en": "How to calculate the minimum bounding rectangle for the LINESTRING(1 2, 3 4, 5 6) formed by three vertices (coordinates in order: 1 2, 3 4, 5 6) and output it using the Box2D function?"}
{"id": 709, "function": "Box2D", "question": "给定一个包含三个二维点的折线几何对象LINESTRING(1 2, 3 4, 5 6)，如何用ST_GeomFromText函数将其从文本转换为几何类型，并调用Box2D获取其二维边界框。", "sql": "SELECT Box2D(ST_GeomFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["BOX(1 2,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3544, "question_en": "Given a linestring geometry object LINESTRING(1 2, 3 4, 5 6) containing three 2D points, how to convert it from text to geometry type using ST_GeomFromText function and call Box2D to obtain its 2D bounding box."}
{"id": 709, "function": "Box2D", "question": "使用PostGIS函数处理LINESTRING(1 2, 3 4, 5 6)这条折线：1) 将WKT文本解析为几何对象，2) 用Box2D提取该折线的最小外接矩形坐标范围。", "sql": "SELECT Box2D(ST_GeomFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["BOX(1 2,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3545, "question_en": "Process the LINESTRING(1 2, 3 4, 5 6) polyline using PostGIS functions: 1) Parse the WKT text into a geometry object, 2) Extract the bounding box coordinates of the polyline using Box2D."}
{"id": 710, "function": "Box2D", "question": "输出圆弧线CIRCULARSTRING(220268 150415,220227 150505,220227 150406)的最小边界框的WKT字符串，边界框格式为Box2D。", "sql": "SELECT Box2D(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'));", "execution_result": [["BOX(220186.99512189245 150406,220288.24878054656 150506.12682932706)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3546, "question_en": "Output the WKT string of the minimum bounding box for the circular arc CIRCULARSTRING(220268 150415,220227 150505,220227 150406), with the bounding box formatted as Box2D."}
{"id": 710, "function": "Box2D", "question": "计算并返回由三个点220268 150415、220227 150505和220227 150406构成的圆弧线的最小外接矩形坐标，以Box2D格式输出。", "sql": "SELECT Box2D(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'));", "execution_result": [["BOX(220186.99512189245 150406,220288.24878054656 150506.12682932706)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3547, "question_en": "Calculate and return the minimum bounding rectangle coordinates of the circular arc formed by the three points 220268 150415, 220227 150505, and 220227 150406, output in Box2D format."}
{"id": 710, "function": "Box2D", "question": "将圆弧线CIRCULARSTRING(220268 150415,220227 150505,220227 150406)转换为最小边界矩形，输出该矩形的左下角和右上角坐标的WKT表示。", "sql": "SELECT Box2D(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'));", "execution_result": [["BOX(220186.99512189245 150406,220288.24878054656 150506.12682932706)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3548, "question_en": "Convert the circular arc line CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into its minimum bounding rectangle and output the WKT representation of the rectangle's bottom-left and top-right coordinates."}
{"id": 710, "function": "Box2D", "question": "如何用CIRCULARSTRING定义一条由三个控制点(220268 150415)、(220227 150505)、(220227 150406)构成的圆弧，并计算其二维边界框？", "sql": "SELECT Box2D(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'));", "execution_result": [["BOX(220186.99512189245 150406,220288.24878054656 150506.12682932706)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3549, "question_en": "How to define a circular arc with three control points (220268 150415), (220227 150505), (220227 150406) using CIRCULARSTRING, and calculate its 2D bounding box?"}
{"id": 710, "function": "Box2D", "question": "请详细说明如何通过ST_GeomFromText函数将WKT格式的CIRCULARSTRING(220268 150415,220227 150505,220227 150406)转换为几何对象，并用Box2D获取其最小外接矩形？", "sql": "SELECT Box2D(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'));", "execution_result": [["BOX(220186.99512189245 150406,220288.24878054656 150506.12682932706)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3550, "question_en": "Please explain in detail how to convert the WKT-formatted CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into a geometry object using the ST_GeomFromText function and obtain its minimum bounding rectangle with Box2D?"}
{"id": 710, "function": "Box2D", "question": "给定圆弧的三个控制点坐标分别为X=220268 Y=150415、X=220227 Y=150505、X=220227 Y=150406，如何构造该圆弧几何并提取其二维坐标范围？", "sql": "SELECT Box2D(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'));", "execution_result": [["BOX(220186.99512189245 150406,220288.24878054656 150506.12682932706)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3551, "question_en": "Given the three control points of an arc with coordinates X=220268 Y=150415, X=220227 Y=150505, and X=220227 Y=150406, how to construct the arc geometry and extract its 2D coordinate bounds?"}
{"id": 711, "function": "Box3D", "question": "输出三维线段LINESTRING(1 2 3, 3 4 5, 5 6 5)的最小边界立方体的Box3D格式字符串。", "sql": "SELECT Box3D(ST_GeomFromEWKT('LINESTRING(1 2 3, 3 4 5, 5 6 5)'));", "execution_result": [["BOX3D(1 2 3,5 6 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3552, "question_en": "Output the Box3D format string of the minimum bounding cube for the 3D linestring LINESTRING(1 2 3, 3 4 5, 5 6 5)."}
{"id": 711, "function": "Box3D", "question": "将包含三个三维坐标点(1 2 3)、(3 4 5)、(5 6 5)的线段转换为EWKT格式后，计算其三维边界框并以Box3D标准格式返回结果。", "sql": "SELECT Box3D(ST_GeomFromEWKT('LINESTRING(1 2 3, 3 4 5, 5 6 5)'));", "execution_result": [["BOX3D(1 2 3,5 6 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3553, "question_en": "Convert the line segment containing the three 3D coordinates (1 2 3), (3 4 5), (5 6 5) into EWKT format, then calculate its 3D bounding box and return the result in Box3D standard format."}
{"id": 711, "function": "Box3D", "question": "以Box3D数据类型输出LINESTRING(1 2 3, 3 4 5, 5 6 5)的空间范围，要求结果包含X/Y/Z轴的最小最大值。", "sql": "SELECT Box3D(ST_GeomFromEWKT('LINESTRING(1 2 3, 3 4 5, 5 6 5)'));", "execution_result": [["BOX3D(1 2 3,5 6 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3554, "question_en": "Output the spatial extent of LINESTRING(1 2 3, 3 4 5, 5 6 5) as a Box3D data type, including the min/max values for the X/Y/Z axes."}
{"id": 711, "function": "Box3D", "question": "基于三维坐标点(1,2,3)、(3,4,5)和(5,6,5)构建三维线段LINESTRING(1 2 3, 3 4 5, 5 6 5)，计算其三维边界框并输出Box3D结果。", "sql": "SELECT Box3D(ST_GeomFromEWKT('LINESTRING(1 2 3, 3 4 5, 5 6 5)'));", "execution_result": [["BOX3D(1 2 3,5 6 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3555, "question_en": "Construct a 3D LINESTRING(1 2 3, 3 4 5, 5 6 5) from the 3D coordinate points (1,2,3), (3,4,5), and (5,6,5), calculate its 3D bounding box, and output the Box3D result."}
{"id": 711, "function": "Box3D", "question": "使用EWKT格式输入包含三个顶点(1 2 3)、(3 4 5)、(5 6 5)的三维线段，通过ST_GeomFromEWKT函数转换为几何对象后，求取其三维最小外包矩形Box3D。", "sql": "SELECT Box3D(ST_GeomFromEWKT('LINESTRING(1 2 3, 3 4 5, 5 6 5)'));", "execution_result": [["BOX3D(1 2 3,5 6 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3556, "question_en": "Input a 3D line segment with three vertices (1 2 3), (3 4 5), (5 6 5) in EWKT format, convert it to a geometry object using the ST_GeomFromEWKT function, and then calculate its 3D minimum bounding box Box3D."}
{"id": 711, "function": "Box3D", "question": "将Z坐标分别为3、5、5的三个三维点(1,2,3)、(3,4,5)、(5,6,5)连接成三维线段，调用Box3D函数生成该线段在XYZ空间的最小外接立方体。", "sql": "SELECT Box3D(ST_GeomFromEWKT('LINESTRING(1 2 3, 3 4 5, 5 6 5)'));", "execution_result": [["BOX3D(1 2 3,5 6 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3557, "question_en": "Create a 3D line segment connecting three points (1,2,3), (3,4,5), (5,6,5) with Z-coordinates 3, 5, 5 respectively, then use the Box3D function to generate the minimum bounding cube of this line segment in XYZ space."}
{"id": 712, "function": "Box3D", "question": "输出三维圆弧线CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)的最小边界立方体的WKT格式描述。", "sql": "SELECT Box3D(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)'));", "execution_result": [["BOX3D(220186.99512189245 150406 1,220288.24878054656 150506.12682932706 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3558, "question_en": "Output the WKT format description of the minimum bounding cube for the 3D circular arc string CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)."}
{"id": 712, "function": "Box3D", "question": "将包含三个三维点(220268 150415 1)、(220227 150505 1)、(220227 150406 1)的圆弧线转换为EWKT格式后，返回其三维边界框的WKT字符串。", "sql": "SELECT Box3D(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)'));", "execution_result": [["BOX3D(220186.99512189245 150406 1,220288.24878054656 150506.12682932706 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3559, "question_en": "Convert the arc line containing the three 3D points (220268 150415 1), (220227 150505 1), (220227 150406 1) to EWKT format, then return the WKT string of its 3D bounding box."}
{"id": 712, "function": "Box3D", "question": "计算三维圆弧CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)的轴对齐包围盒，并以Box3D标准格式输出结果。", "sql": "SELECT Box3D(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)'));", "execution_result": [["BOX3D(220186.99512189245 150406 1,220288.24878054656 150506.12682932706 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3560, "question_en": "Calculate the axis-aligned bounding box of the 3D circular arc CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1) and output the result in Box3D standard format."}
{"id": 712, "function": "Box3D", "question": "如何通过EWKT格式的圆弧线CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)构建三维边界框？", "sql": "SELECT Box3D(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)'));", "execution_result": [["BOX3D(220186.99512189245 150406 1,220288.24878054656 150506.12682932706 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3561, "question_en": "How to construct a 3D bounding box from the circular arc line in EWKT format: CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)?"}
{"id": 712, "function": "Box3D", "question": "从三维圆弧线CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)生成三维边界框。", "sql": "SELECT Box3D(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)'));", "execution_result": [["BOX3D(220186.99512189245 150406 1,220288.24878054656 150506.12682932706 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3562, "question_en": "Generate a 3D bounding box from the 3D circular arc CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)."}
{"id": 712, "function": "Box3D", "question": "给定一个三维圆弧线，其EWKT表示为CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)，如何计算该圆弧线的最小外接三维立方体？", "sql": "SELECT Box3D(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)'));", "execution_result": [["BOX3D(220186.99512189245 150406 1,220288.24878054656 150506.12682932706 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3563, "question_en": "Given a 3D circular arc with EWKT representation CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1), how to calculate the minimum bounding 3D cube for this arc?"}
{"id": 717, "function": "&&(geometry,box2df)", "question": "输出判断二维点POINT(1 1)是否与由左下角POINT(0 0)和右上角POINT(2 2)构成的矩形框存在重叠的布尔结果。", "sql": "SELECT ST_Point(1,1) && ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3564, "question_en": "Output a boolean result indicating whether the 2D point POINT(1 1) overlaps with the rectangle defined by the bottom-left corner POINT(0 0) and the top-right corner POINT(2 2)."}
{"id": 717, "function": "&&(geometry,box2df)", "question": "以布尔值形式返回二维点POINT(1 1)与坐标范围在POINT(0 0)到POINT(2 2)之间的矩形框的空间重叠检测结果。", "sql": "SELECT ST_Point(1,1) && ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3565, "question_en": "Return a boolean indicating the spatial overlap detection result between the 2D point POINT(1 1) and the rectangular bounding box with coordinate range from POINT(0 0) to POINT(2 2)."}
{"id": 717, "function": "&&(geometry,box2df)", "question": "将二维点POINT(1 1)与通过ST_MakeBox2D函数创建的左下角POINT(0 0)、右上角POINT(2 2)的矩形框进行边界框重叠测试，输出结果为TRUE或FALSE。", "sql": "SELECT ST_Point(1,1) && ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3566, "question_en": "Perform a bounding box overlap test between the 2D point POINT(1 1) and the rectangle created by ST_MakeBox2D with bottom-left corner POINT(0 0) and top-right corner POINT(2 2), outputting TRUE or FALSE."}
{"id": 717, "function": "&&(geometry,box2df)", "question": "创建一个坐标为(1,1)的二维点POINT(1 1)，并用ST_MakeBox2D函数以POINT(0,0)为左下角、POINT(2,2)为右上角构建矩形框，最后判断该点是否与矩形框存在空间重叠。", "sql": "SELECT ST_Point(1,1) && ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3567, "question_en": "Create a 2D point POINT(1 1) with coordinates (1,1), use the ST_MakeBox2D function to construct a bounding box with POINT(0,0) as the lower-left corner and POINT(2,2) as the upper-right corner, then determine if the point spatially overlaps with the bounding box."}
{"id": 717, "function": "&&(geometry,box2df)", "question": "使用ST_Point函数生成X坐标1、Y坐标1的二维点几何对象，同时通过ST_MakeBox2D函数创建由左下角POINT(0 0)和右上角POINT(2 2)确定的矩形边界框，检测两者是否存在空间相交关系。", "sql": "SELECT ST_Point(1,1) && ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3568, "question_en": "Use the ST_Point function to create a 2D point geometry object with X coordinate 1 and Y coordinate 1, and use the ST_MakeBox2D function to create a rectangular bounding box defined by the bottom-left corner POINT(0 0) and top-right corner POINT(2 2), then check if they have a spatial intersection relationship."}
{"id": 717, "function": "&&(geometry,box2df)", "question": "具体描述如何构造一个位于(1,1)位置的二维点对象，以及由坐标(0,0)到(2,2)对角点定义的矩形空间范围，并执行空间重叠检测操作。", "sql": "SELECT ST_Point(1,1) && ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3569, "question_en": "Describe how to construct a 2D point object at position (1,1) and a rectangular spatial extent defined by diagonal points from (0,0) to (2,2), and perform a spatial overlap detection operation."}
{"id": 718, "function": "&&(box2df,geometry)", "question": "输出判断由左下角POINT(0 0)和右上角POINT(2 2)构成的二维矩形框是否与点POINT(1 1)存在空间重叠的布尔值结果。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_Point(1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3570, "question_en": "Output the boolean result indicating whether the 2D rectangle formed by the bottom-left corner POINT(0 0) and the top-right corner POINT(2 2) spatially overlaps with the point POINT(1 1)."}
{"id": 718, "function": "&&(box2df,geometry)", "question": "以布尔值形式返回，检测点POINT(1 1)是否落在由对角点POINT(0 0)和POINT(2 2)生成的二维边界框范围内。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_Point(1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3571, "question_en": "Return a boolean indicating whether the point POINT(1 1) falls within the 2D bounding box formed by the diagonal points POINT(0 0) and POINT(2 2)."}
{"id": 718, "function": "&&(box2df,geometry)", "question": "将空间判断结果输出为布尔值：检查坐标(1,1)的点是否与以(0,0)为左下角、(2,2)为右上角的矩形区域存在交集。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_Point(1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3572, "question_en": "Output the spatial evaluation result as a boolean: check if the point (1,1) intersects with the rectangular area defined by the bottom-left corner (0,0) and top-right corner (2,2)."}
{"id": 718, "function": "&&(box2df,geometry)", "question": "使用左下角坐标为(0,0)、右上角坐标为(2,2)的矩形边界框，与坐标为(1,1)的点进行空间重叠判断，结果别名为overlaps。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_Point(1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3573, "question_en": "Check if the point at coordinates (1,1) spatially overlaps with the rectangular bounding box defined by the bottom-left corner (0,0) and top-right corner (2,2), with the result aliased as 'overlaps'."}
{"id": 718, "function": "&&(box2df,geometry)", "question": "构造一个由ST_Point(0,0)和ST_Point(2,2)两点定义的二维矩形边界框，检查该边界框是否包含坐标为(1,1)的点，返回布尔值并命名为overlaps。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_Point(1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3574, "question_en": "Construct a 2D rectangular bounding box defined by points ST_Point(0,0) and ST_Point(2,2), check if this bounding box contains the point with coordinates (1,1), return a boolean value named overlaps."}
{"id": 718, "function": "&&(box2df,geometry)", "question": "首先创建X坐标0、Y坐标0的点，再创建X坐标2、Y坐标2的点，用这两个点生成矩形边界框，最后判断该边界框与X坐标1、Y坐标1的点是否存在空间重叠关系。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_Point(1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3575, "question_en": "First, create a point with X coordinate 0 and Y coordinate 0, then create another point with X coordinate 2 and Y coordinate 2, use these two points to generate a rectangular bounding box, and finally determine if there is a spatial overlap relationship between this bounding box and the point with X coordinate 1 and Y coordinate 1."}
{"id": 719, "function": "&&(box2df,box2df)", "question": "输出由左下角POINT(0 0)和右上角POINT(2 2)定义的二维边界框，与由左下角POINT(1 1)和右上角POINT(3 3)定义的二维边界框是否存在空间重叠的布尔值结果。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_MakeBox2D(ST_Point(1,1), ST_Point(3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3576, "question_en": "Output a boolean result indicating whether there is a spatial overlap between the 2D bounding box defined by the lower-left corner POINT(0 0) and the upper-right corner POINT(2 2), and the 2D bounding box defined by the lower-left corner POINT(1 1) and the upper-right corner POINT(3 3)."}
{"id": 719, "function": "&&(box2df,box2df)", "question": "以布尔值形式返回两个二维边界框的空间重叠检测结果，第一个边界框范围是POINT(0 0)到POINT(2 2)，第二个边界框范围是POINT(1 1)到POINT(3 3)。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_MakeBox2D(ST_Point(1,1), ST_Point(3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3577, "question_en": "Return a boolean indicating the spatial overlap detection result of two 2D bounding boxes, where the first box ranges from POINT(0 0) to POINT(2 2) and the second box ranges from POINT(1 1) to POINT(3 3)."}
{"id": 719, "function": "&&(box2df,box2df)", "question": "将两个二维边界框的空间重叠检测结果输出为布尔值，第一个边界框对角点为POINT(0 0)和POINT(2 2)，第二个边界框对角点为POINT(1 1)和POINT(3 3)。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_MakeBox2D(ST_Point(1,1), ST_Point(3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3578, "question_en": "Output a boolean value indicating the spatial overlap detection result of two 2D bounding boxes, where the first box has diagonal points POINT(0 0) and POINT(2 2), and the second box has diagonal points POINT(1 1) and POINT(3 3)."}
{"id": 719, "function": "&&(box2df,box2df)", "question": "用左下角坐标POINT(0 0)和右上角坐标POINT(2 2)构建第一个二维边界框，再用左下角坐标POINT(1 1)和右上角坐标POINT(3 3)构建第二个二维边界框，判断这两个边界框是否存在空间重叠。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_MakeBox2D(ST_Point(1,1), ST_Point(3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3579, "question_en": "Construct the first 2D bounding box with the bottom-left corner POINT(0 0) and the top-right corner POINT(2 2), then construct the second 2D bounding box with the bottom-left corner POINT(1 1) and the top-right corner POINT(3 3), and determine if these two bounding boxes have spatial overlap."}
{"id": 719, "function": "&&(box2df,box2df)", "question": "基于坐标点POINT(0 0)和POINT(2 2)创建第一个矩形范围对象，基于坐标点POINT(1 1)和POINT(3 3)创建第二个矩形范围对象，检测这两个矩形范围是否发生空间相交。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_MakeBox2D(ST_Point(1,1), ST_Point(3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3580, "question_en": "Create the first rectangle object based on points POINT(0 0) and POINT(2 2), and the second rectangle object based on points POINT(1 1) and POINT(3 3), then check if these two rectangles spatially intersect."}
{"id": 719, "function": "&&(box2df,box2df)", "question": "构造两个二维边界框：第一个由最小坐标POINT(0 0)和最大坐标POINT(2 2)定义，第二个由最小坐标POINT(1 1)和最大坐标POINT(3 3)定义，计算它们的空间重叠关系。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_MakeBox2D(ST_Point(1,1), ST_Point(3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3581, "question_en": "Construct two 2D bounding boxes: the first defined by the minimum coordinate POINT(0 0) and maximum coordinate POINT(2 2), and the second defined by the minimum coordinate POINT(1 1) and maximum coordinate POINT(3 3), then calculate their spatial overlap relationship."}
{"id": 720, "function": "&&&(geometry,gidx)", "question": "输出三维点POINT(1 1 1)是否与由ST_3DMakeBox函数创建的三维边界框（对角点为POINT(0 0 0)和POINT(2 2 2)）存在重叠关系的布尔值结果。", "sql": "SELECT ST_MakePoint(1,1,1) &&& ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3582, "question_en": "Output the boolean result indicating whether the 3D point POINT(1 1 1) overlaps with the 3D bounding box created by ST_3DMakeBox with diagonal points POINT(0 0 0) and POINT(2 2 2)."}
{"id": 720, "function": "&&&(geometry,gidx)", "question": "以布尔值形式返回三维点POINT(1 1 1)是否与三维边界框（最小角POINT(0 0 0)到最大角POINT(2 2 2)定义的空间范围）相交的检测结果。", "sql": "SELECT ST_MakePoint(1,1,1) &&& ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3583, "question_en": "Return a boolean indicating whether the 3D point POINT(1 1 1) intersects with the 3D bounding box defined by the minimum corner POINT(0 0 0) and maximum corner POINT(2 2 2)."}
{"id": 720, "function": "&&&(geometry,gidx)", "question": "将三维点POINT(1 1 1)与三维边界框（由POINT(0 0 0)和POINT(2 2 2)确定的立方体）的空间重叠检测结果输出为布尔类型的列overlaps。", "sql": "SELECT ST_MakePoint(1,1,1) &&& ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3584, "question_en": "Output the spatial overlap detection result between the 3D point POINT(1 1 1) and the 3D bounding box (a cube defined by POINT(0 0 0) and POINT(2 2 2)) as a boolean column named overlaps."}
{"id": 720, "function": "&&&(geometry,gidx)", "question": "创建一个三维点POINT(1 1 1)，并构建一个由三维点POINT(0 0 0)和POINT(2 2 2)定义的三维边界框，检查该点是否与边界框存在三维空间重叠。", "sql": "SELECT ST_MakePoint(1,1,1) &&& ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3585, "question_en": "Create a 3D point POINT(1 1 1), construct a 3D bounding box defined by the 3D points POINT(0 0 0) and POINT(2 2 2), and check if the point has a 3D spatial overlap with the bounding box."}
{"id": 720, "function": "&&&(geometry,gidx)", "question": "用坐标(1,1,1)构造三维点POINT(1 1 1)，同时用对角点POINT(0 0 0)和POINT(2 2 2)生成三维边界框，判断该点是否与边界框在三维空间相交。", "sql": "SELECT ST_MakePoint(1,1,1) &&& ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3586, "question_en": "Construct a 3D point POINT(1 1 1) with coordinates (1,1,1), then generate a 3D bounding box using diagonal points POINT(0 0 0) and POINT(2 2 2), and determine whether the point intersects with the bounding box in 3D space."}
{"id": 720, "function": "&&&(geometry,gidx)", "question": "基于X=1/Y=1/Z=1的坐标值生成三维点POINT(1 1 1)，通过最小点POINT(0 0 0)和最大点POINT(2 2 2)创建三维包围盒，检测该点与包围盒的三维空间关系是否重叠。", "sql": "SELECT ST_MakePoint(1,1,1) &&& ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3587, "question_en": "Generate a 3D point POINT(1 1 1) based on coordinates X=1/Y=1/Z=1, create a 3D bounding box using the minimum point POINT(0 0 0) and maximum point POINT(2 2 2), and check if the point overlaps with the bounding box in 3D space."}
{"id": 721, "function": "&&&(gidx,geometry)", "question": "输出一个布尔值，表示三维点POINT(1 1 1)是否与由三维点POINT(0 0 0)和POINT(2 2 2)构成的三维边界框存在空间重叠。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_MakePoint(1,1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3588, "question_en": "Output a boolean value indicating whether the 3D point POINT(1 1 1) spatially overlaps with the 3D bounding box formed by points POINT(0 0 0) and POINT(2 2 2)."}
{"id": 721, "function": "&&&(gidx,geometry)", "question": "以布尔值形式返回结果，判断三维点POINT(1 1 1)是否落在由对角点POINT(0 0 0)和POINT(2 2 2)生成的三维立方体内。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_MakePoint(1,1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3589, "question_en": "Return a boolean result indicating whether the 3D point POINT(1 1 1) falls within the 3D cube formed by the diagonal points POINT(0 0 0) and POINT(2 2 2)."}
{"id": 721, "function": "&&&(gidx,geometry)", "question": "输出TRUE或FALSE，表明三维坐标点POINT(1 1 1)是否与以POINT(0 0 0)为起点、POINT(2 2 2)为终点的三维边界框有交集。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_MakePoint(1,1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3590, "question_en": "Output TRUE or FALSE indicating whether the 3D coordinate point POINT(1 1 1) intersects with the 3D bounding box starting at POINT(0 0 0) and ending at POINT(2 2 2)."}
{"id": 721, "function": "&&&(gidx,geometry)", "question": "用三维点ST_MakePoint(0,0,0)作为起点坐标，三维点ST_MakePoint(2,2,2)作为终点坐标，构建一个三维立方体，然后检查该立方体是否与三维点ST_MakePoint(1,1,1)在三维空间存在重叠。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_MakePoint(1,1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3591, "question_en": "Using the 3D point ST_MakePoint(0,0,0) as the starting coordinate and the 3D point ST_MakePoint(2,2,2) as the ending coordinate, construct a 3D cube, then check if this cube overlaps with the 3D point ST_MakePoint(1,1,1) in 3D space."}
{"id": 721, "function": "&&&(gidx,geometry)", "question": "以X=0,Y=0,Z=0的三维点作为第一个对角点，X=2,Y=2,Z=2的三维点作为第二个对角点，创建一个三维边界框，并判断这个边界框是否包含X=1,Y=1,Z=1的三维点。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_MakePoint(1,1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3592, "question_en": "Create a 3D bounding box with the first diagonal point at X=0, Y=0, Z=0 and the second diagonal point at X=2, Y=2, Z=2, then determine if this bounding box contains the 3D point at X=1, Y=1, Z=1."}
{"id": 721, "function": "&&&(gidx,geometry)", "question": "使用ST_3DMakeBox函数，输入参数为三维点ST_MakePoint(0,0,0)和ST_MakePoint(2,2,2)作为对角点生成三维立方体，然后使用&&&运算符检查该立方体是否与位于(1,1,1)坐标的三维点存在空间重叠关系。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_MakePoint(1,1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3593, "question_en": "Using the ST_3DMakeBox function with input parameters ST_MakePoint(0,0,0) and ST_MakePoint(2,2,2) as diagonal points to generate a 3D box, then use the &&& operator to check if this box spatially overlaps with a 3D point located at (1,1,1)."}
{"id": 722, "function": "&&&(gidx,gidx)", "question": "输出判断三维盒子ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2))和三维盒子ST_3DMakeBox(ST_MakePoint(1,1,1), ST_MakePoint(3,3,3))是否在三维空间重叠的布尔值结果。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_3DMakeBox(ST_MakePoint(1,1,1), ST_MakePoint(3,3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3594, "question_en": "Output the boolean result indicating whether the 3D boxes ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) and ST_3DMakeBox(ST_MakePoint(1,1,1), ST_MakePoint(3,3,3)) overlap in 3D space."}
{"id": 722, "function": "&&&(gidx,gidx)", "question": "以布尔值形式返回两个三维盒子是否重叠的检测结果，第一个盒子由点POINT(0 0 0)和POINT(2 2 2)构成，第二个盒子由点POINT(1 1 1)和POINT(3 3 3)构成。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_3DMakeBox(ST_MakePoint(1,1,1), ST_MakePoint(3,3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3595, "question_en": "Return a boolean indicating whether the two 3D boxes overlap, where the first box is defined by points POINT(0 0 0) and POINT(2 2 2), and the second box by points POINT(1 1 1) and POINT(3 3 3)."}
{"id": 722, "function": "&&&(gidx,gidx)", "question": "检测两个三维边界框的空间重叠关系并返回布尔值结果，第一个边界框范围为X=0-2/Y=0-2/Z=0-2，第二个边界框范围为X=1-3/Y=1-3/Z=1-3。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_3DMakeBox(ST_MakePoint(1,1,1), ST_MakePoint(3,3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3596, "question_en": "Check the spatial overlap relationship between two 3D bounding boxes and return a boolean result, where the first bounding box has ranges X=0-2/Y=0-2/Z=0-2 and the second has ranges X=1-3/Y=1-3/Z=1-3."}
{"id": 722, "function": "&&&(gidx,gidx)", "question": "使用三维坐标点POINT(0 0 0)作为起点和POINT(2 2 2)作为终点构建第一个三维立方体，再使用三维坐标点POINT(1 1 1)作为起点和POINT(3 3 3)作为终点构建第二个三维立方体，检查这两个立方体在三维空间中是否重叠。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_3DMakeBox(ST_MakePoint(1,1,1), ST_MakePoint(3,3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3597, "question_en": "Construct the first 3D cube using POINT(0 0 0) as the start and POINT(2 2 2) as the end, then construct the second 3D cube using POINT(1 1 1) as the start and POINT(3 3 3) as the end, and check if these two cubes overlap in 3D space."}
{"id": 722, "function": "&&&(gidx,gidx)", "question": "基于原点POINT(0 0 0)到POINT(2 2 2)的三维对角线创建第一个立方体，基于POINT(1 1 1)到POINT(3 3 3)的三维对角线创建第二个立方体，计算这两个立方体的三维空间重叠关系。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_3DMakeBox(ST_MakePoint(1,1,1), ST_MakePoint(3,3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3598, "question_en": "Create the first cube based on the 3D diagonal from POINT(0 0 0) to POINT(2 2 2), and the second cube based on the 3D diagonal from POINT(1 1 1) to POINT(3 3 3), then calculate the 3D spatial overlap relationship between these two cubes."}
{"id": 722, "function": "&&&(gidx,gidx)", "question": "通过ST_3DMakeBox函数分别构造两个三维立方体：第一个立方体由对角点POINT(0 0 0)和POINT(2 2 2)定义，第二个立方体由对角点POINT(1 1 1)和POINT(3 3 3)定义，最后使用&&&运算符判断它们的三维边界框是否相交。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_3DMakeBox(ST_MakePoint(1,1,1), ST_MakePoint(3,3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3599, "question_en": "Use the ST_3DMakeBox function to construct two 3D boxes: the first box is defined by diagonal points POINT(0 0 0) and POINT(2 2 2), and the second box is defined by diagonal points POINT(1 1 1) and POINT(3 3 3), then use the &&& operator to determine if their 3D bounding boxes intersect."}
{"id": 725, "function": "@(geometry,box2df)", "question": "输出POINT(2 2)经过1单位距离缓冲后生成的几何体是否完全包含在由左下角(0,0)和右上角(5,5)构成的矩形框内，返回布尔值结果。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3600, "question_en": "Check if the geometry created by buffering POINT(2 2) with a 1-unit distance is completely contained within the rectangle defined by the bottom-left corner (0,0) and top-right corner (5,5), returning a boolean result."}
{"id": 725, "function": "@(geometry,box2df)", "question": "以WKT格式输出判断结果：POINT(2 2)的1单位缓冲圆是否被完全包含在(0,0)-(5,5)矩形范围内，要求返回true或false。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3601, "question_en": "Output the result in WKT format: Does the 1-unit buffer circle of POINT(2 2) fully lie within the rectangle (0,0)-(5,5)? Return true or false."}
{"id": 725, "function": "@(geometry,box2df)", "question": "将POINT(2 2)进行1单位缓冲后，检查其是否完全位于由对角点(0,0)和(5,5)定义的矩形边界框内，输出包含性检验的布尔结果。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3602, "question_en": "Check if the 1-unit buffer of POINT(2 2) is completely within the bounding box defined by diagonal points (0,0) and (5,5), and output the boolean result of the containment test."}
{"id": 725, "function": "@(geometry,box2df)", "question": "以坐标(2,2)构建二维点POINT(2 2)，生成半径为1的圆形缓冲区，判断该缓冲区是否完全包含在由左下角(0,0)和右上角(5,5)构成的矩形框内。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3603, "question_en": "Construct a 2D point POINT(2 2) with coordinates (2,2), generate a circular buffer with a radius of 1, and determine if this buffer is entirely contained within the rectangular box defined by the bottom-left corner (0,0) and top-right corner (5,5)."}
{"id": 725, "function": "@(geometry,box2df)", "question": "使用ST_GeomFromText函数创建坐标为(2,2)的点POINT(2 2)，用ST_Buffer函数生成1单位距离的缓冲区，检查该缓冲区是否被完全包含在由点(0,0)和点(5,5)定义的二维边界框内。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3604, "question_en": "Use the ST_GeomFromText function to create a point POINT(2 2) with coordinates (2,2), generate a 1-unit distance buffer using the ST_Buffer function, and check if this buffer is completely contained within the 2D bounding box defined by points (0,0) and (5,5)."}
{"id": 725, "function": "@(geometry,box2df)", "question": "首先构造X=2、Y=2的二维点POINT(2 2)，然后创建半径为1的圆形缓冲区，最后测试该缓冲区是否完全位于由左下角坐标(0,0)和右上角坐标(5,5)组成的矩形边界框范围内。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3605, "question_en": "First, construct a 2D point POINT(2 2) with X=2 and Y=2, then create a circular buffer with a radius of 1, and finally test whether this buffer is entirely within the rectangular bounding box defined by the bottom-left corner (0,0) and top-right corner (5,5)."}
{"id": 726, "function": "@(box2df,geometry)", "question": "输出一个布尔值，表示由点POINT(2,2)和POINT(3,3)构成的二维矩形框是否完全包含以POINT(1 1)为中心、半径为10的圆形缓冲区。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3606, "question_en": "Output a boolean value indicating whether the 2D rectangle formed by points POINT(2,2) and POINT(3,3) fully contains the circular buffer centered at POINT(1 1) with a radius of 10."}
{"id": 726, "function": "@(box2df,geometry)", "question": "返回true或false，判断坐标为(2,2)到(3,3)的矩形范围是否完全包含对点POINT(1 1)进行10单位距离缓冲后生成的几何体。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3607, "question_en": "Return true or false to determine if the rectangular range from coordinates (2,2) to (3,3) completely contains the geometry generated by buffering the point POINT(1 1) with a 10-unit distance."}
{"id": 726, "function": "@(box2df,geometry)", "question": "以WKT格式输出检测结果，确认由左下角POINT(2 2)和右上角POINT(3 3)定义的矩形是否包含POINT(1 1)点缓冲10单位形成的多边形。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3608, "question_en": "Output the detection result in WKT format to verify if the rectangle defined by the bottom-left POINT(2 2) and top-right POINT(3 3) contains the polygon formed by buffering POINT(1 1) with a 10-unit radius."}
{"id": 726, "function": "@(box2df,geometry)", "question": "使用坐标点POINT(2 2)和POINT(3 3)构建一个二维矩形框，并检查该矩形框是否被包含在以POINT(1 1)为中心点、缓冲距离为10个单位长度的圆形缓冲区内。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3609, "question_en": "Construct a 2D bounding box using points POINT(2 2) and POINT(3 3), and check if this bounding box is contained within a circular buffer centered at POINT(1 1) with a buffer distance of 10 units."}
{"id": 726, "function": "@(box2df,geometry)", "question": "首先用ST_Point函数创建两个二维点POINT(2 2)和POINT(3 3)，然后用ST_MakeBox2D函数生成由这两个点确定的矩形框，最后判断该矩形框是否完全位于以文本格式POINT(1 1)为圆心、半径10个单位的缓冲区内。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3610, "question_en": "First, create two 2D points POINT(2 2) and POINT(3 3) using the ST_Point function, then generate a bounding box defined by these two points with the ST_MakeBox2D function, and finally determine if this bounding box is entirely within the buffer zone centered at POINT(1 1) in text format with a radius of 10 units."}
{"id": 726, "function": "@(box2df,geometry)", "question": "具体描述如何通过ST_Point(2 2)和ST_Point(3 3)两个点坐标构造一个二维矩形框，并验证该矩形框是否被包含在以WKT格式POINT(1 1)为几何中心、缓冲半径为10个单位的圆形缓冲区内。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3611, "question_en": "Describe how to construct a 2D bounding box from the coordinates ST_Point(2 2) and ST_Point(3 3), and verify whether this bounding box is contained within a circular buffer with a radius of 10 units centered at the WKT geometry POINT(1 1)."}
{"id": 727, "function": "@(box2df,box2df)", "question": "输出判断由点POINT(2 2)和POINT(3 3)构成的二维边界框是否被包含在由点POINT(0 0)和POINT(5 5)构成的二维边界框内的布尔值结果。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3612, "question_en": "Output the boolean result indicating whether the 2D bounding box formed by points POINT(2 2) and POINT(3 3) is contained within the 2D bounding box formed by points POINT(0 0) and POINT(5 5)."}
{"id": 727, "function": "@(box2df,box2df)", "question": "以布尔值形式返回，检查左下角为POINT(2 2)、右上角为POINT(3 3)的矩形是否完全位于左下角为POINT(0 0)、右上角为POINT(5 5)的矩形范围内。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3613, "question_en": "Return a boolean value indicating whether the rectangle with the bottom-left corner at POINT(2 2) and top-right corner at POINT(3 3) is completely within the rectangle with the bottom-left corner at POINT(0 0) and top-right corner at POINT(5 5)."}
{"id": 727, "function": "@(box2df,box2df)", "question": "将两个二维边界框的包含关系检测结果输出为布尔值，第一个边界框由POINT(2 2)和POINT(3 3)定义，第二个边界框由POINT(0 0)和POINT(5 5)定义。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3614, "question_en": "Output a boolean value indicating the containment relationship between two 2D bounding boxes, where the first box is defined by POINT(2 2) and POINT(3 3), and the second box is defined by POINT(0 0) and POINT(5 5)."}
{"id": 727, "function": "@(box2df,box2df)", "question": "用坐标点POINT(2 2)作为左下角、POINT(3 3)作为右上角构建二维边界框，判断该边界框是否被另一个以POINT(0 0)为左下角、POINT(5 5)为右上角的二维边界框完全包含，结果命名为is_contained。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3615, "question_en": "Construct a 2D bounding box with POINT(2 2) as the lower-left corner and POINT(3 3) as the upper-right corner, then determine if this bounding box is entirely contained within another 2D bounding box with POINT(0 0) as the lower-left corner and POINT(5 5) as the upper-right corner, naming the result as is_contained."}
{"id": 727, "function": "@(box2df,box2df)", "question": "构造两个二维边界框：第一个由左下角POINT(2 2)和右上角POINT(3 3)定义，第二个由左下角POINT(0 0)和右上角POINT(5 5)定义，使用@运算符检测第一个边界框是否被第二个边界框包含。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3616, "question_en": "Construct two 2D bounding boxes: the first defined by the bottom-left point POINT(2 2) and top-right point POINT(3 3), and the second by the bottom-left point POINT(0 0) and top-right point POINT(5 5). Use the @ operator to check if the first bounding box is contained within the second."}
{"id": 727, "function": "@(box2df,box2df)", "question": "以POINT(2 2)为左下顶点、POINT(3 3)为右上顶点创建边界框A，以POINT(0 0)为左下顶点、POINT(5 5)为右上顶点创建边界框B，计算边界框A是否被边界框B完全包含，返回布尔值并别名为is_contained。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3617, "question_en": "Create bounding box A with POINT(2 2) as the bottom-left vertex and POINT(3 3) as the top-right vertex, and bounding box B with POINT(0 0) as the bottom-left vertex and POINT(5 5) as the top-right vertex. Determine if bounding box A is entirely contained within bounding box B, returning a boolean value aliased as is_contained."}
{"id": 729, "function": "~(geometry,box2df)", "question": "输出POINT(1 1)的10单位缓冲区的几何对象是否包含由ST_Point(0,0)和ST_Point(2,2)定义的二维边界框的判断结果，返回布尔值。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) ~ ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3618, "question_en": "Check if the 10-unit buffer geometry of POINT(1 1) contains the 2D bounding box defined by ST_Point(0,0) and ST_Point(2,2), returning a boolean value."}
{"id": 729, "function": "~(geometry,box2df)", "question": "以布尔值形式返回POINT(1 1)的半径为10的圆形缓冲区是否完全包含左下角为(0,0)、右上角为(2,2)的矩形框的空间关系检测结果。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) ~ ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3619, "question_en": "Return a boolean indicating whether the circular buffer with a radius of 10 around POINT(1 1) fully contains the spatial relationship detection result of the rectangular box with the bottom-left corner at (0,0) and the top-right corner at (2,2)."}
{"id": 729, "function": "~(geometry,box2df)", "question": "将POINT(1 1)进行10单位距离缓冲后，输出该缓冲区几何是否包含从(0,0)到(2,2)的矩形范围的空间包含关系判断结果，要求返回true/false值。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) ~ ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3620, "question_en": "Determine if the 10-unit buffer around POINT(1 1) spatially contains the rectangular extent from (0,0) to (2,2), returning a true/false value."}
{"id": 729, "function": "~(geometry,box2df)", "question": "以坐标(1,1)为中心点POINT(1 1)创建半径为10单位的圆形缓冲区，并判断该缓冲区是否包含由左下角坐标(0,0)和右上角坐标(2,2)构成的矩形框ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2))。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) ~ ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3621, "question_en": "Create a circular buffer with a radius of 10 units centered at POINT(1 1) and determine if this buffer contains the rectangle ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) defined by the bottom-left corner (0,0) and top-right corner (2,2)."}
{"id": 729, "function": "~(geometry,box2df)", "question": "使用ST_GeomFromText函数从WKT格式创建二维点POINT(1 1)，对其执行10单位距离的缓冲操作生成多边形，再检测该多边形是否包含由ST_Point(0,0)到ST_Point(2,2)两点确定的二维边界框。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) ~ ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3622, "question_en": "Use the ST_GeomFromText function to create a 2D point POINT(1 1) from WKT format, perform a 10-unit distance buffer operation on it to generate a polygon, then check whether this polygon contains the 2D bounding box defined by ST_Point(0,0) to ST_Point(2,2)."}
{"id": 729, "function": "~(geometry,box2df)", "question": "首先构造坐标值为(1,1)的二维点几何对象POINT(1 1)，然后生成该点周围10单位半径的缓冲区几何体，最后通过空间运算符~判断该缓冲区是否包含由坐标(0,0)和(2,2)定义的二维矩形框ST_MakeBox2D。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) ~ ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3623, "question_en": "First, construct a 2D point geometry object POINT(1 1) with coordinates (1,1), then generate a buffer geometry with a 10-unit radius around this point, and finally use the spatial operator ~ to determine if this buffer contains the 2D rectangle ST_MakeBox2D defined by coordinates (0,0) and (2,2)."}
{"id": 730, "function": "~(box2df,geometry)", "question": "输出判断由点POINT(0,0)和POINT(5,5)构成的二维矩形框是否包含POINT(2 2)的1单位缓冲区的布尔结果。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3624, "question_en": "Output the boolean result indicating whether the 2D rectangular box formed by POINT(0,0) and POINT(5,5) contains the 1-unit buffer of POINT(2 2)."}
{"id": 730, "function": "~(box2df,geometry)", "question": "以布尔值形式返回，检查坐标范围(0,0)到(5,5)的矩形是否完全包裹住POINT(2 2)的半径为1的圆形缓冲区。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3625, "question_en": "Return a boolean indicating whether the rectangle with coordinate range (0,0) to (5,5) completely encloses the circular buffer of radius 1 around POINT(2 2)."}
{"id": 730, "function": "~(box2df,geometry)", "question": "输出TRUE或FALSE表示左下角POINT(0,0)右上角POINT(5,5)的矩形是否包含中心点POINT(2 2)的1单位距离缓冲区域。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3626, "question_en": "Output TRUE or FALSE to indicate whether the rectangle with the bottom-left corner POINT(0,0) and top-right corner POINT(5,5) contains the 1-unit distance buffer zone around the center point POINT(2,2)."}
{"id": 730, "function": "~(box2df,geometry)", "question": "用左下角坐标POINT(0 0)和右上角坐标POINT(5 5)构建一个二维矩形框，并检查该矩形是否包含以POINT(2 2)为中心、1单位距离为半径的圆形缓冲区。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3627, "question_en": "Construct a 2D rectangular box with the bottom-left corner at POINT(0 0) and the top-right corner at POINT(5 5), and check if this rectangle contains a circular buffer centered at POINT(2 2) with a radius of 1 unit."}
{"id": 730, "function": "~(box2df,geometry)", "question": "首先创建由ST_Point(0,0)和ST_Point(5,5)两点确定的矩形范围，然后判断该范围是否完全包含对文本格式的POINT(2 2)点进行1单位缓冲后生成的圆形区域。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3628, "question_en": "First, create a rectangular extent defined by the points ST_Point(0,0) and ST_Point(5,5), then determine whether this extent fully contains the circular area generated by buffering the text-formatted POINT(2 2) with a 1-unit radius."}
{"id": 730, "function": "~(box2df,geometry)", "question": "基于坐标点POINT(0 0)和POINT(5 5)构造二维边界框，同时从文本解析POINT(2 2)点并生成1单位半径的缓冲区，最后测试边界框是否包含该缓冲区几何体。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3629, "question_en": "Construct a 2D bounding box from points POINT(0 0) and POINT(5 5), parse point POINT(2 2) from text and generate a 1-unit radius buffer, then test whether the bounding box contains this buffer geometry."}
{"id": 731, "function": "~(box2df,box2df)", "question": "输出判断由左下角POINT(0 0)和右上角POINT(5 5)构成的矩形是否完全包含由左下角POINT(2 2)和右上角POINT(3 3)构成的矩形，返回布尔值结果。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3630, "question_en": "Output a boolean result indicating whether the rectangle formed by the bottom-left POINT(0 0) and top-right POINT(5 5) completely contains the rectangle formed by the bottom-left POINT(2 2) and top-right POINT(3 3)."}
{"id": 731, "function": "~(box2df,box2df)", "question": "以布尔值形式输出第一个矩形框ST_MakeBox2D(POINT(0 0), POINT(5 5))是否空间包含第二个矩形框ST_MakeBox2D(POINT(2 2), POINT(3 3))的检测结果。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3631, "question_en": "Output a boolean value indicating whether the first rectangle ST_MakeBox2D(POINT(0 0), POINT(5 5)) spatially contains the second rectangle ST_MakeBox2D(POINT(2 2), POINT(3 3))."}
{"id": 731, "function": "~(box2df,box2df)", "question": "返回True或False表示矩形框[POINT(0 0), POINT(5 5)]是否完全包含矩形框[POINT(2 2), POINT(3 3)]的空间关系判断结果。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3632, "question_en": "Return True or False indicating whether the bounding box [POINT(0 0), POINT(5 5)] fully contains the bounding box [POINT(2 2), POINT(3 3)] in terms of spatial relationship."}
{"id": 731, "function": "~(box2df,box2df)", "question": "用左下角坐标为POINT(0 0)、右上角坐标为POINT(5 5)的矩形框，与左下角坐标为POINT(2 2)、右上角坐标为POINT(3 3)的矩形框进行空间包含关系判断，结果字段命名为contains。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3633, "question_en": "Use a rectangle with the lower-left corner at POINT(0 0) and the upper-right corner at POINT(5 5) to perform a spatial containment check with another rectangle having the lower-left corner at POINT(2 2) and the upper-right corner at POINT(3 3), naming the result field as contains."}
{"id": 731, "function": "~(box2df,box2df)", "question": "构建两个二维边界框：第一个框由POINT(0 0)和POINT(5 5)定义，第二个框由POINT(2 2)和POINT(3 3)定义，检查第一个框是否包含第二个框，返回布尔值并命名为contains。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3634, "question_en": "Construct two 2D bounding boxes: the first box is defined by POINT(0 0) and POINT(5 5), the second box by POINT(2 2) and POINT(3 3). Check if the first box contains the second box, return a boolean value named 'contains'."}
{"id": 731, "function": "~(box2df,box2df)", "question": "创建两个明确坐标的矩形区域：区域A范围从POINT(0 0)到POINT(5 5)，区域B范围从POINT(2 2)到POINT(3 3)，使用~操作符验证区域A是否完全包含区域B，输出结果列名为contains。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3635, "question_en": "Create two rectangular regions with explicit coordinates: region A spanning from POINT(0 0) to POINT(5 5), and region B spanning from POINT(2 2) to POINT(3 3). Use the ~ operator to verify if region A completely contains region B, outputting the result column as 'contains'."}
{"id": 733, "function": " ST_IsPolygonCCW", "question": "输出判断POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))是否为外环逆时针，内环顺时针方向的布尔值结果。", "sql": "SELECT ST_IsPolygonCCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3636, "question_en": "Output a boolean value indicating whether the POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2)) has an outer ring in counter-clockwise direction and inner rings in clockwise direction."}
{"id": 733, "function": " ST_IsPolygonCCW", "question": "以布尔值形式返回，判断由外环(0 0,0 10,10 10,10 0,0 0)和内环(2 2,4 2,4 4,2 4,2 2)组成的多边形是否为外环逆时针内环顺时针方向。", "sql": "SELECT ST_IsPolygonCCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3637, "question_en": "Return a boolean value indicating whether the polygon formed by the outer ring (0 0,0 10,10 10,10 0,0 0) and inner ring (2 2,4 2,4 4,2 4,2 2) follows the orientation of outer ring counterclockwise and inner ring clockwise."}
{"id": 733, "function": " ST_IsPolygonCCW", "question": "输出POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))的顶点顺序是否为外环逆时针内环顺时针方向的检测结果，要求返回true或false。", "sql": "SELECT ST_IsPolygonCCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3638, "question_en": "Output whether the vertex order of POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2)) follows the outer ring counterclockwise and inner ring clockwise direction, returning true or false."}
{"id": 733, "function": " ST_IsPolygonCCW", "question": "给定一个由外环坐标(0 0,0 10,10 10,10 0,0 0)和内环坐标(2 2,4 2,4 4,2 4,2 2)组成的多边形，使用ST_IsPolygonCCW函数判断该多边形顶点是否按外环逆时针内环顺时针顺序排列。", "sql": "SELECT ST_IsPolygonCCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3639, "question_en": "Given a polygon with an outer ring coordinates (0 0,0 10,10 10,10 0,0 0) and an inner ring coordinates (2 2,4 2,4 4,2 4,2 2), use the ST_IsPolygonCCW function to determine if the polygon vertices are arranged with the outer ring counterclockwise and the inner ring clockwise."}
{"id": 733, "function": " ST_IsPolygonCCW", "question": "如何验证由外环边界点[0 0→0 10→10 10→10 0→0 0]和内环孔洞边界点[2 2→4 2→4 4→2 4→2 2]构成的多边形是否符合外环逆时针内环顺时针方向环绕规则？", "sql": "SELECT ST_IsPolygonCCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3640, "question_en": "How to verify if the polygon formed by the outer ring boundary points [0 0→0 10→10 10→10 0→0 0] and the inner hole boundary points [2 2→4 2→4 4→2 4→2 2] follows the rule of outer ring counter-clockwise and inner ring clockwise orientation?"}
{"id": 733, "function": " ST_IsPolygonCCW", "question": "使用ST_GeomFromText函数创建包含外环顶点(0 0,0 10,10 10,10 0,0 0)和内环顶点(2 2,4 2,4 4,2 4,2 2)的多边形，并通过ST_IsPolygonCCW检测其顶点顺序是否为外环逆时针内环顺时针。", "sql": "SELECT ST_IsPolygonCCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3641, "question_en": "Use the ST_GeomFromText function to create a polygon with an outer ring vertices (0 0,0 10,10 10,10 0,0 0) and an inner ring vertices (2 2,4 2,4 4,2 4,2 2), and check if its vertex order is outer ring counter-clockwise and inner ring clockwise using ST_IsPolygonCCW."}
{"id": 734, "function": "ST_IsPolygonCW", "question": "输出判断外环顶点顺序为(0 0,0 10,10 10,10 0,0 0)且内环顶点顺序为(2 2,4 2,4 4,2 4,2 2)的多边形是否为外环顺时针，内环逆时针顺序方向的布尔值。", "sql": "SELECT ST_IsPolygonCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3642, "question_en": "Output a boolean value indicating whether the polygon with the outer ring vertex order (0 0,0 10,10 10,10 0,0 0) and inner ring vertex order (2 2,4 2,4 4,2 4,2 2) has a clockwise outer ring and counterclockwise inner ring orientation."}
{"id": 734, "function": "ST_IsPolygonCW", "question": "以布尔值形式返回，检测由外环坐标(0 0,0 10,10 10,10 0,0 0)和内环坐标(2 2,4 2,4 4,2 4,2 2)构成的多边形是否满足外环顺时针，内环逆时针顺序缠绕规则。", "sql": "SELECT ST_IsPolygonCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3643, "question_en": "Return a boolean value indicating whether the polygon formed by the outer ring coordinates (0 0,0 10,10 10,10 0,0 0) and inner ring coordinates (2 2,4 2,4 4,2 4,2 2) follows the winding rule of outer ring clockwise and inner ring counterclockwise."}
{"id": 734, "function": "ST_IsPolygonCW", "question": "输出结果为true或false，表示包含外边界点(0 0,0 10,10 10,10 0,0 0)和内部孔洞边界点(2 2,4 2,4 4,2 4,2 2)的多边形是否按外环顺时针，内环逆时针顺序方向定义。", "sql": "SELECT ST_IsPolygonCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3644, "question_en": "Output true or false indicating whether the polygon with the outer boundary points (0 0,0 10,10 10,10 0,0 0) and inner hole boundary points (2 2,4 2,4 4,2 4,2 2) is defined with the outer ring clockwise and inner ring counter-clockwise."}
{"id": 734, "function": "ST_IsPolygonCW", "question": "给定一个由外环坐标序列(0 0,0 10,10 10,10 0,0 0)和内环坐标序列(2 2,4 2,4 4,2 4,2 2)组成的多边形，判断其顶点是否按外环顺时针，内环逆时针顺序顺序排列。", "sql": "SELECT ST_IsPolygonCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3645, "question_en": "Given a polygon defined by an outer ring coordinate sequence (0 0,0 10,10 10,10 0,0 0) and an inner ring coordinate sequence (2 2,4 2,4 4,2 4,2 2), determine if its vertices are ordered with the outer ring clockwise and the inner ring counterclockwise."}
{"id": 734, "function": "ST_IsPolygonCW", "question": "如何验证由外边界点(0 0)→(0 10)→(10 10)→(10 0)→(0 0)和内孔边界点(2 2)→(4 2)→(4 4)→(2 4)→(2 2)构成的多边形是否为外环顺时针，内环逆时针顺序方向？", "sql": "SELECT ST_IsPolygonCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3646, "question_en": "How to verify if the polygon formed by the outer boundary points (0 0)→(0 10)→(10 10)→(10 0)→(0 0) and the inner hole boundary points (2 2)→(4 2)→(4 4)→(2 4)→(2 2) follows the orientation rule of outer ring clockwise and inner ring counterclockwise?"}
{"id": 734, "function": "ST_IsPolygonCW", "question": "使用ST_IsPolygonCCW函数检测包含外环顶点(0 0,0 10,10 10,10 0,0 0)和内环顶点(2 2,4 2,4 4,2 4,2 2)的POLYGON几何对象的顶点方向是否为外环顺时针，内环逆时针顺序。", "sql": "SELECT ST_IsPolygonCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3647, "question_en": "Use the ST_IsPolygonCCW function to check if the vertex order of a POLYGON geometry with an outer ring (0 0,0 10,10 10,10 0,0 0) and an inner ring (2 2,4 2,4 4,2 4,2 2) is outer ring clockwise and inner ring counter-clockwise."}
{"id": 735, "function": "ST_NumInteriorRing", "question": "输出POLYGON((0 0, 0 10, 10 10, 10 0, 0 0),(2 2, 4 2, 4 4, 2 4, 2 2),(6 6, 8 6, 8 8, 6 8, 6 6))这个多边形中内环的数量。", "sql": "SELECT ST_NumInteriorRing(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2),\n    (6 6, 8 6, 8 8, 6 8, 6 6)\n  )')\n);", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3648, "question_en": "Output the number of interior rings in the polygon POLYGON((0 0, 0 10, 10 10, 10 0, 0 0),(2 2, 4 2, 4 4, 2 4, 2 2),(6 6, 8 6, 8 8, 6 8, 6 6))."}
{"id": 735, "function": "ST_NumInteriorRing", "question": "计算由外环(0 0, 0 10, 10 10, 10 0, 0 0)和内环(2 2, 4 2, 4 4, 2 4, 2 2)及(6 6, 8 6, 8 8, 6 8, 6 6)组成的多边形中包含多少个内环，并输出结果。", "sql": "SELECT ST_NumInteriorRing(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2),\n    (6 6, 8 6, 8 8, 6 8, 6 6)\n  )')\n);", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3649, "question_en": "Count the number of inner rings in the polygon formed by the outer ring (0 0, 0 10, 10 10, 10 0, 0 0) and inner rings (2 2, 4 2, 4 4, 2 4, 2 2) and (6 6, 8 6, 8 8, 6 8, 6 6), then output the result."}
{"id": 735, "function": "ST_NumInteriorRing", "question": "输出一个包含外环顶点为(0 0, 0 10, 10 10, 10 0, 0 0)，以及两个内环分别为(2 2, 4 2, 4 4, 2 4, 2 2)和(6 6, 8 6, 8 8, 6 8, 6 6)的多边形的内环数量。", "sql": "SELECT ST_NumInteriorRing(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2),\n    (6 6, 8 6, 8 8, 6 8, 6 6)\n  )')\n);", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3650, "question_en": "Output the number of interior rings in a polygon with an outer ring of vertices (0 0, 0 10, 10 10, 10 0, 0 0) and two interior rings (2 2, 4 2, 4 4, 2 4, 2 2) and (6 6, 8 6, 8 8, 6 8, 6 6)."}
{"id": 735, "function": "ST_NumInteriorRing", "question": "给定一个由外环(0 0, 0 10, 10 10, 10 0, 0 0)和两个内环(2 2, 4 2, 4 4, 2 4, 2 2)与(6 6, 8 6, 8 8, 6 8, 6 6)组成的多边形，计算其内环数量。", "sql": "SELECT ST_NumInteriorRing(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2),\n    (6 6, 8 6, 8 8, 6 8, 6 6)\n  )')\n);", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3651, "question_en": "Given a polygon consisting of an outer ring (0 0, 0 10, 10 10, 10 0, 0 0) and two inner rings (2 2, 4 2, 4 4, 2 4, 2 2) and (6 6, 8 6, 8 8, 6 8, 6 6), calculate the number of its inner rings."}
{"id": 735, "function": "ST_NumInteriorRing", "question": "如何计算由外环顶点序列[0 0→0 10→10 10→10 0→0 0]和两个内环[2 2→4 2→4 4→2 4→2 2]、[6 6→8 6→8 8→6 8→6 6]构成的多边形的内环数量？", "sql": "SELECT ST_NumInteriorRing(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2),\n    (6 6, 8 6, 8 8, 6 8, 6 6)\n  )')\n);", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3652, "question_en": "How to count the number of inner rings in a polygon defined by an outer ring vertex sequence [0 0→0 10→10 10→10 0→0 0] and two inner rings [2 2→4 2→4 4→2 4→2 2], [6 6→8 6→8 8→6 8→6 6]?"}
{"id": 735, "function": "ST_NumInteriorRing", "question": "对于由外边界(0 0,0 10,10 10,10 0,0 0)和两个内部空洞(2 2,4 2,4 4,2 4,2 2)与(6 6,8 6,8 8,6 8,6 6)组成的POLYGON几何体，使用ST_NumInteriorRing函数求其内环总数。", "sql": "SELECT ST_NumInteriorRing(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2),\n    (6 6, 8 6, 8 8, 6 8, 6 6)\n  )')\n);", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3653, "question_en": "For a POLYGON geometry consisting of an outer boundary (0 0,0 10,10 10,10 0,0 0) and two interior holes (2 2,4 2,4 4,2 4,2 2) and (6 6,8 6,8 8,6 8,6 6), use the ST_NumInteriorRing function to find its total number of interior rings."}
{"id": 736, "function": "ST_ForcePolygonCCW", "question": "输出将外环顶点为(0 0, 10 0, 10 10, 0 10, 0 0)、内环顶点为(2 2, 2 4, 4 4, 4 2, 2 2)的多边形强制转换为外环逆时针，内环顺时针方向后的WKT字符串。", "sql": "SELECT ST_AsText(ST_ForcePolygonCCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 10 0, 10 10, 0 10, 0 0),\n    (2 2, 2 4, 4 4, 4 2, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 4,4 4,4 2,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3654, "question_en": "Output the WKT string of the polygon with outer ring vertices (0 0, 10 0, 10 10, 0 10, 0 0) and inner ring vertices (2 2, 2 4, 4 4, 4 2, 2 2) after enforcing counter-clockwise orientation for the outer ring and clockwise for the inner ring."}
{"id": 736, "function": "ST_ForcePolygonCCW", "question": "以WKT格式返回一个带孔多边形对象，该多边形外边界坐标序列为(0 0, 10 0, 10 10, 0 10, 0 0)，内孔边界坐标序列为(2 2, 2 4, 4 4, 4 2, 2 2)，并确保其顶点方向为外环逆时针，内环顺时针。", "sql": "SELECT ST_AsText(ST_ForcePolygonCCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 10 0, 10 10, 0 10, 0 0),\n    (2 2, 2 4, 4 4, 4 2, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 4,4 4,4 2,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3655, "question_en": "Return a polygon with a hole in WKT format, where the outer boundary coordinate sequence is (0 0, 10 0, 10 10, 0 10, 0 0), the inner hole boundary coordinate sequence is (2 2, 2 4, 4 4, 4 2, 2 2), ensuring the vertex order is counter-clockwise for the outer ring and clockwise for the inner ring."}
{"id": 736, "function": "ST_ForcePolygonCCW", "question": "将包含外环(0 0, 10 0, 10 10, 0 10, 0 0)和内环(2 2, 2 4, 4 4, 4 2, 2 2)的POLYGON几何体转换为外环逆时针，内环顺时针方向后，输出其标准WKT文本表示。", "sql": "SELECT ST_AsText(ST_ForcePolygonCCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 10 0, 10 10, 0 10, 0 0),\n    (2 2, 2 4, 4 4, 4 2, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 4,4 4,4 2,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3656, "question_en": "Convert the POLYGON geometry with an outer ring (0 0, 10 0, 10 10, 0 10, 0 0) and an inner ring (2 2, 2 4, 4 4, 4 2, 2 2) to have the outer ring counter-clockwise and inner ring clockwise, then output its standard WKT representation."}
{"id": 736, "function": "ST_ForcePolygonCCW", "question": "将文本格式的POLYGON几何对象（外环坐标序列为0 0, 10 0, 10 10, 0 10, 0 0，内环坐标序列为2 2, 2 4, 4 4, 4 2, 2 2）强制转换为外环逆时针，内环顺时针方向后，以WKT格式输出其几何描述。", "sql": "SELECT ST_AsText(ST_ForcePolygonCCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 10 0, 10 10, 0 10, 0 0),\n    (2 2, 2 4, 4 4, 4 2, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 4,4 4,4 2,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3657, "question_en": "Convert the text-format POLYGON geometry object (outer ring coordinate sequence: 0 0, 10 0, 10 10, 0 10, 0 0; inner ring coordinate sequence: 2 2, 2 4, 4 4, 4 2, 2 2) to enforce outer ring counter-clockwise and inner ring clockwise orientation, then output its geometric description in WKT format."}
{"id": 736, "function": "ST_ForcePolygonCCW", "question": "基于外环顶点0 0→10 0→10 10→0 10→0 0和内环顶点2 2→2 4→4 4→4 2→2 2构建的多边形，执行外环逆时针，内环顺时针方向强制转换后返回WKT文本表示。", "sql": "SELECT ST_AsText(ST_ForcePolygonCCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 10 0, 10 10, 0 10, 0 0),\n    (2 2, 2 4, 4 4, 4 2, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 4,4 4,4 2,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3658, "question_en": "For the polygon constructed with the outer ring vertices 0 0→10 0→10 10→0 10→0 0 and inner ring vertices 2 2→2 4→4 4→4 2→2 2, return the WKT representation after enforcing counter-clockwise orientation for the outer ring and clockwise for the inner ring."}
{"id": 736, "function": "ST_ForcePolygonCCW", "question": "处理包含外环边界点[0,0][10,0][10,10][0,10]和内环边界点[2,2][2,4][4,4][4,2]的带孔多边形，确保其环方向符合外环逆时针，内环顺时针标准后输出几何文本。", "sql": "SELECT ST_AsText(ST_ForcePolygonCCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 10 0, 10 10, 0 10, 0 0),\n    (2 2, 2 4, 4 4, 4 2, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 4,4 4,4 2,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3659, "question_en": "Process a polygon with an outer ring boundary [0,0][10,0][10,10][0,10] and an inner ring boundary [2,2][2,4][4,4][4,2], ensuring the ring orientations follow the standard of outer ring counterclockwise and inner ring clockwise, then output the geometry text."}
{"id": 737, "function": "ST_ForcePolygonCW", "question": "输出将外环顶点为(0 0, 0 10, 10 10, 10 0, 0 0)、内环顶点为(2 2, 4 2, 4 4, 2 4, 2 2)的多边形强制转换为顺时针方向后的WKT字符串。", "sql": "SELECT ST_AsText(ST_ForcePolygonCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3660, "question_en": "Output the WKT string of the polygon with the outer ring vertices (0 0, 0 10, 10 10, 10 0, 0 0) and inner ring vertices (2 2, 4 2, 4 4, 2 4, 2 2) after forcing it to clockwise orientation."}
{"id": 737, "function": "ST_ForcePolygonCW", "question": "以WKT格式返回一个带孔洞的多边形，该多边形外边界坐标序列为(0 0, 0 10, 10 10, 10 0, 0 0)，内孔边界坐标序列为(2 2, 4 2, 4 4, 2 4, 2 2)，并确保其顶点顺序为顺时针方向。", "sql": "SELECT ST_AsText(ST_ForcePolygonCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3661, "question_en": "Return a polygon with a hole in WKT format, where the outer boundary coordinate sequence is (0 0, 0 10, 10 10, 10 0, 0 0) and the inner hole boundary sequence is (2 2, 4 2, 4 4, 2 4, 2 2), ensuring the vertices are ordered clockwise."}
{"id": 737, "function": "ST_ForcePolygonCW", "question": "将包含外环(0 0, 0 10, 10 10, 10 0, 0 0)和内环(2 2, 4 2, 4 4, 2 4, 2 2)的POLYGON几何对象转换为顺时针方向后，输出其标准WKT文本表示。", "sql": "SELECT ST_AsText(ST_ForcePolygonCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3662, "question_en": "Convert the POLYGON geometry with an outer ring (0 0, 0 10, 10 10, 10 0, 0 0) and an inner ring (2 2, 4 2, 4 4, 2 4, 2 2) to clockwise orientation and output its standard WKT representation."}
{"id": 737, "function": "ST_ForcePolygonCW", "question": "将文本描述的POLYGON几何对象（外环坐标序列为0 0, 0 10, 10 10, 10 0, 0 0，内环坐标序列为2 2, 4 2, 4 4, 2 4, 2 2）强制转换为顺时针方向后，以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_ForcePolygonCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3663, "question_en": "Convert the described POLYGON geometry object (outer ring coordinate sequence: 0 0, 0 10, 10 10, 10 0, 0 0; inner ring coordinate sequence: 2 2, 4 2, 4 4, 2 4, 2 2) to clockwise orientation and output the result in WKT format."}
{"id": 737, "function": "ST_ForcePolygonCW", "question": "如何将包含外环顶点(0,0)(0,10)(10,10)(10,0)和内环顶点(2,2)(4,2)(4,4)(2,4)的多边形几何强制调整为顺时针方向并输出WKT表示？", "sql": "SELECT ST_AsText(ST_ForcePolygonCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3664, "question_en": "How to force a polygon geometry with outer ring vertices (0,0)(0,10)(10,10)(10,0) and inner ring vertices (2,2)(4,2)(4,4)(2,4) to clockwise orientation and output its WKT representation?"}
{"id": 737, "function": "ST_ForcePolygonCW", "question": "给定一个带孔洞的多边形（外边界：0 0→0 10→10 10→10 0→0 0，内边界：2 2→4 2→4 4→2 4→2 2），请说明如何用PostGIS函数将其顶点顺序强制改为顺时针并返回WKT字符串。", "sql": "SELECT ST_AsText(ST_ForcePolygonCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3665, "question_en": "Given a polygon with a hole (exterior boundary: 0 0→0 10→10 10→10 0→0 0, interior boundary: 2 2→4 2→4 4→2 4→2 2), explain how to use PostGIS functions to enforce clockwise vertex order and return the WKT string."}
{"id": 738, "function": "ST_ForceSFS", "question": "将圆弧线CIRCULARSTRING(0 0, 1 1, 1 0)转换为符合简单要素规范的WKT字符串输出。", "sql": "SELECT ST_AsText(ST_ForceSFS(\n  ST_GeomFromText('CIRCULARSTRING(0 0, 1 1, 1 0)')\n));", "execution_result": [["LINESTRING(0 0,-0.023931565266295 0.025136109061123,-0.046600933500879 0.051416206828682,-0.067953492210071 0.07877698224529,-0.087937801209679 0.107152520806449,-0.106505716548904 0.13647446335436,-0.123612506493336 0.166672170761127,-0.13921695928762 0.1976728941046,-0.153281482438188 0.229401949926901,-0.165772193276863 0.261782900153419,-0.176659000587176 0.294737736238821,-0.185915677096747 0.328187067096475,-0.193519922661074 0.362050310358528,-0.199453417986539 0.396245886505894,-0.203701868763191 0.430691415400454,-0.206255040100989 0.46530391474603,-0.207106781186548 0.5,-0.206255040100989 0.53469608525397,-0.203701868763191 0.569308584599546,-0.199453417986539 0.603754113494106,-0.193519922661074 0.637949689641472,-0.185915677096747 0.671812932903525,-0.176659000587176 0.705262263761178,-0.165772193276863 0.73821709984658,-0.153281482438188 0.770598050073098,-0.13921695928762 0.8023271058954,-0.123612506493336 0.833327829238873,-0.106505716548904 0.86352553664564,-0.08793780120968 0.892847479193551,-0.067953492210071 0.92122301775471,-0.046600933500879 0.948583793171318,-0.023931565266295 0.974863890938877,-1.110223024625156e-16 1,0.025136109061123 1.023931565266295,0.051416206828682 1.046600933500879,0.07877698224529 1.067953492210072,0.107152520806449 1.087937801209679,0.13647446335436 1.106505716548904,0.166672170761127 1.123612506493336,0.197672894104599 1.13921695928762,0.229401949926901 1.153281482438188,0.261782900153419 1.165772193276862,0.294737736238821 1.176659000587176,0.328187067096475 1.185915677096747,0.362050310358528 1.193519922661074,0.396245886505894 1.199453417986539,0.430691415400454 1.203701868763191,0.46530391474603 1.206255040100989,0.5 1.207106781186548,0.53469608525397 1.206255040100989,0.569308584599545 1.203701868763191,0.603754113494105 1.199453417986539,0.637949689641472 1.193519922661074,0.671812932903525 1.185915677096747,0.705262263761178 1.176659000587176,0.738217099846581 1.165772193276862,0.770598050073099 1.153281482438188,0.8023271058954 1.13921695928762,0.833327829238873 1.123612506493336,0.86352553664564 1.106505716548904,0.892847479193551 1.08793780120968,0.921223017754709 1.067953492210072,0.948583793171318 1.046600933500879,0.974863890938877 1.023931565266295,1 1,1.023931565266295 0.974863890938877,1.046600933500879 0.948583793171318,1.067953492210072 0.92122301775471,1.087937801209679 0.892847479193551,1.106505716548904 0.86352553664564,1.123612506493336 0.833327829238874,1.13921695928762 0.802327105895401,1.153281482438188 0.770598050073099,1.165772193276862 0.738217099846581,1.176659000587176 0.705262263761179,1.185915677096747 0.671812932903525,1.193519922661074 0.637949689641472,1.199453417986539 0.603754113494106,1.203701868763191 0.569308584599546,1.206255040100989 0.53469608525397,1.207106781186548 0.5,1.206255040100989 0.46530391474603,1.203701868763191 0.430691415400455,1.199453417986539 0.396245886505894,1.193519922661074 0.362050310358528,1.185915677096747 0.328187067096475,1.176659000587176 0.294737736238822,1.165772193276863 0.26178290015342,1.153281482438188 0.229401949926902,1.13921695928762 0.1976728941046,1.123612506493336 0.166672170761127,1.106505716548904 0.13647446335436,1.08793780120968 0.107152520806449,1.067953492210072 0.078776982245291,1.046600933500879 0.051416206828682,1.023931565266295 0.025136109061123,1 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3666, "question_en": "Convert the circular arc string CIRCULARSTRING(0 0, 1 1, 1 0) into a WKT string compliant with the Simple Features specification."}
{"id": 738, "function": "ST_ForceSFS", "question": "输出经过ST_ForceSFS强制转换后的圆弧线CIRCULARSTRING(0 0, 1 1, 1 0)的文本表示形式。", "sql": "SELECT ST_AsText(ST_ForceSFS(\n  ST_GeomFromText('CIRCULARSTRING(0 0, 1 1, 1 0)')\n));", "execution_result": [["LINESTRING(0 0,-0.023931565266295 0.025136109061123,-0.046600933500879 0.051416206828682,-0.067953492210071 0.07877698224529,-0.087937801209679 0.107152520806449,-0.106505716548904 0.13647446335436,-0.123612506493336 0.166672170761127,-0.13921695928762 0.1976728941046,-0.153281482438188 0.229401949926901,-0.165772193276863 0.261782900153419,-0.176659000587176 0.294737736238821,-0.185915677096747 0.328187067096475,-0.193519922661074 0.362050310358528,-0.199453417986539 0.396245886505894,-0.203701868763191 0.430691415400454,-0.206255040100989 0.46530391474603,-0.207106781186548 0.5,-0.206255040100989 0.53469608525397,-0.203701868763191 0.569308584599546,-0.199453417986539 0.603754113494106,-0.193519922661074 0.637949689641472,-0.185915677096747 0.671812932903525,-0.176659000587176 0.705262263761178,-0.165772193276863 0.73821709984658,-0.153281482438188 0.770598050073098,-0.13921695928762 0.8023271058954,-0.123612506493336 0.833327829238873,-0.106505716548904 0.86352553664564,-0.08793780120968 0.892847479193551,-0.067953492210071 0.92122301775471,-0.046600933500879 0.948583793171318,-0.023931565266295 0.974863890938877,-1.110223024625156e-16 1,0.025136109061123 1.023931565266295,0.051416206828682 1.046600933500879,0.07877698224529 1.067953492210072,0.107152520806449 1.087937801209679,0.13647446335436 1.106505716548904,0.166672170761127 1.123612506493336,0.197672894104599 1.13921695928762,0.229401949926901 1.153281482438188,0.261782900153419 1.165772193276862,0.294737736238821 1.176659000587176,0.328187067096475 1.185915677096747,0.362050310358528 1.193519922661074,0.396245886505894 1.199453417986539,0.430691415400454 1.203701868763191,0.46530391474603 1.206255040100989,0.5 1.207106781186548,0.53469608525397 1.206255040100989,0.569308584599545 1.203701868763191,0.603754113494105 1.199453417986539,0.637949689641472 1.193519922661074,0.671812932903525 1.185915677096747,0.705262263761178 1.176659000587176,0.738217099846581 1.165772193276862,0.770598050073099 1.153281482438188,0.8023271058954 1.13921695928762,0.833327829238873 1.123612506493336,0.86352553664564 1.106505716548904,0.892847479193551 1.08793780120968,0.921223017754709 1.067953492210072,0.948583793171318 1.046600933500879,0.974863890938877 1.023931565266295,1 1,1.023931565266295 0.974863890938877,1.046600933500879 0.948583793171318,1.067953492210072 0.92122301775471,1.087937801209679 0.892847479193551,1.106505716548904 0.86352553664564,1.123612506493336 0.833327829238874,1.13921695928762 0.802327105895401,1.153281482438188 0.770598050073099,1.165772193276862 0.738217099846581,1.176659000587176 0.705262263761179,1.185915677096747 0.671812932903525,1.193519922661074 0.637949689641472,1.199453417986539 0.603754113494106,1.203701868763191 0.569308584599546,1.206255040100989 0.53469608525397,1.207106781186548 0.5,1.206255040100989 0.46530391474603,1.203701868763191 0.430691415400455,1.199453417986539 0.396245886505894,1.193519922661074 0.362050310358528,1.185915677096747 0.328187067096475,1.176659000587176 0.294737736238822,1.165772193276863 0.26178290015342,1.153281482438188 0.229401949926902,1.13921695928762 0.1976728941046,1.123612506493336 0.166672170761127,1.106505716548904 0.13647446335436,1.08793780120968 0.107152520806449,1.067953492210072 0.078776982245291,1.046600933500879 0.051416206828682,1.023931565266295 0.025136109061123,1 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3667, "question_en": "Output the text representation of the circular arc line CIRCULARSTRING(0 0, 1 1, 1 0) after being converted by ST_ForceSFS."}
{"id": 738, "function": "ST_ForceSFS", "question": "以WKT格式返回圆弧线CIRCULARSTRING(0 0, 1 1, 1 0)经过简单要素规范强制转换后的几何对象。", "sql": "SELECT ST_AsText(ST_ForceSFS(\n  ST_GeomFromText('CIRCULARSTRING(0 0, 1 1, 1 0)')\n));", "execution_result": [["LINESTRING(0 0,-0.023931565266295 0.025136109061123,-0.046600933500879 0.051416206828682,-0.067953492210071 0.07877698224529,-0.087937801209679 0.107152520806449,-0.106505716548904 0.13647446335436,-0.123612506493336 0.166672170761127,-0.13921695928762 0.1976728941046,-0.153281482438188 0.229401949926901,-0.165772193276863 0.261782900153419,-0.176659000587176 0.294737736238821,-0.185915677096747 0.328187067096475,-0.193519922661074 0.362050310358528,-0.199453417986539 0.396245886505894,-0.203701868763191 0.430691415400454,-0.206255040100989 0.46530391474603,-0.207106781186548 0.5,-0.206255040100989 0.53469608525397,-0.203701868763191 0.569308584599546,-0.199453417986539 0.603754113494106,-0.193519922661074 0.637949689641472,-0.185915677096747 0.671812932903525,-0.176659000587176 0.705262263761178,-0.165772193276863 0.73821709984658,-0.153281482438188 0.770598050073098,-0.13921695928762 0.8023271058954,-0.123612506493336 0.833327829238873,-0.106505716548904 0.86352553664564,-0.08793780120968 0.892847479193551,-0.067953492210071 0.92122301775471,-0.046600933500879 0.948583793171318,-0.023931565266295 0.974863890938877,-1.110223024625156e-16 1,0.025136109061123 1.023931565266295,0.051416206828682 1.046600933500879,0.07877698224529 1.067953492210072,0.107152520806449 1.087937801209679,0.13647446335436 1.106505716548904,0.166672170761127 1.123612506493336,0.197672894104599 1.13921695928762,0.229401949926901 1.153281482438188,0.261782900153419 1.165772193276862,0.294737736238821 1.176659000587176,0.328187067096475 1.185915677096747,0.362050310358528 1.193519922661074,0.396245886505894 1.199453417986539,0.430691415400454 1.203701868763191,0.46530391474603 1.206255040100989,0.5 1.207106781186548,0.53469608525397 1.206255040100989,0.569308584599545 1.203701868763191,0.603754113494105 1.199453417986539,0.637949689641472 1.193519922661074,0.671812932903525 1.185915677096747,0.705262263761178 1.176659000587176,0.738217099846581 1.165772193276862,0.770598050073099 1.153281482438188,0.8023271058954 1.13921695928762,0.833327829238873 1.123612506493336,0.86352553664564 1.106505716548904,0.892847479193551 1.08793780120968,0.921223017754709 1.067953492210072,0.948583793171318 1.046600933500879,0.974863890938877 1.023931565266295,1 1,1.023931565266295 0.974863890938877,1.046600933500879 0.948583793171318,1.067953492210072 0.92122301775471,1.087937801209679 0.892847479193551,1.106505716548904 0.86352553664564,1.123612506493336 0.833327829238874,1.13921695928762 0.802327105895401,1.153281482438188 0.770598050073099,1.165772193276862 0.738217099846581,1.176659000587176 0.705262263761179,1.185915677096747 0.671812932903525,1.193519922661074 0.637949689641472,1.199453417986539 0.603754113494106,1.203701868763191 0.569308584599546,1.206255040100989 0.53469608525397,1.207106781186548 0.5,1.206255040100989 0.46530391474603,1.203701868763191 0.430691415400455,1.199453417986539 0.396245886505894,1.193519922661074 0.362050310358528,1.185915677096747 0.328187067096475,1.176659000587176 0.294737736238822,1.165772193276863 0.26178290015342,1.153281482438188 0.229401949926902,1.13921695928762 0.1976728941046,1.123612506493336 0.166672170761127,1.106505716548904 0.13647446335436,1.08793780120968 0.107152520806449,1.067953492210072 0.078776982245291,1.046600933500879 0.051416206828682,1.023931565266295 0.025136109061123,1 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3668, "question_en": "Return the geometry object converted from the CIRCULARSTRING(0 0, 1 1, 1 0) in WKT format after applying the Simple Features specification coercion."}
{"id": 738, "function": "ST_ForceSFS", "question": "将文本格式的圆弧线CIRCULARSTRING(0 0, 1 1, 1 0)转换为几何对象，强制符合简单要素规范后以WKT格式输出，其中圆弧线由起点(0 0)、中间点(1 1)和终点(1 0)三点定义。", "sql": "SELECT ST_AsText(ST_ForceSFS(\n  ST_GeomFromText('CIRCULARSTRING(0 0, 1 1, 1 0)')\n));", "execution_result": [["LINESTRING(0 0,-0.023931565266295 0.025136109061123,-0.046600933500879 0.051416206828682,-0.067953492210071 0.07877698224529,-0.087937801209679 0.107152520806449,-0.106505716548904 0.13647446335436,-0.123612506493336 0.166672170761127,-0.13921695928762 0.1976728941046,-0.153281482438188 0.229401949926901,-0.165772193276863 0.261782900153419,-0.176659000587176 0.294737736238821,-0.185915677096747 0.328187067096475,-0.193519922661074 0.362050310358528,-0.199453417986539 0.396245886505894,-0.203701868763191 0.430691415400454,-0.206255040100989 0.46530391474603,-0.207106781186548 0.5,-0.206255040100989 0.53469608525397,-0.203701868763191 0.569308584599546,-0.199453417986539 0.603754113494106,-0.193519922661074 0.637949689641472,-0.185915677096747 0.671812932903525,-0.176659000587176 0.705262263761178,-0.165772193276863 0.73821709984658,-0.153281482438188 0.770598050073098,-0.13921695928762 0.8023271058954,-0.123612506493336 0.833327829238873,-0.106505716548904 0.86352553664564,-0.08793780120968 0.892847479193551,-0.067953492210071 0.92122301775471,-0.046600933500879 0.948583793171318,-0.023931565266295 0.974863890938877,-1.110223024625156e-16 1,0.025136109061123 1.023931565266295,0.051416206828682 1.046600933500879,0.07877698224529 1.067953492210072,0.107152520806449 1.087937801209679,0.13647446335436 1.106505716548904,0.166672170761127 1.123612506493336,0.197672894104599 1.13921695928762,0.229401949926901 1.153281482438188,0.261782900153419 1.165772193276862,0.294737736238821 1.176659000587176,0.328187067096475 1.185915677096747,0.362050310358528 1.193519922661074,0.396245886505894 1.199453417986539,0.430691415400454 1.203701868763191,0.46530391474603 1.206255040100989,0.5 1.207106781186548,0.53469608525397 1.206255040100989,0.569308584599545 1.203701868763191,0.603754113494105 1.199453417986539,0.637949689641472 1.193519922661074,0.671812932903525 1.185915677096747,0.705262263761178 1.176659000587176,0.738217099846581 1.165772193276862,0.770598050073099 1.153281482438188,0.8023271058954 1.13921695928762,0.833327829238873 1.123612506493336,0.86352553664564 1.106505716548904,0.892847479193551 1.08793780120968,0.921223017754709 1.067953492210072,0.948583793171318 1.046600933500879,0.974863890938877 1.023931565266295,1 1,1.023931565266295 0.974863890938877,1.046600933500879 0.948583793171318,1.067953492210072 0.92122301775471,1.087937801209679 0.892847479193551,1.106505716548904 0.86352553664564,1.123612506493336 0.833327829238874,1.13921695928762 0.802327105895401,1.153281482438188 0.770598050073099,1.165772193276862 0.738217099846581,1.176659000587176 0.705262263761179,1.185915677096747 0.671812932903525,1.193519922661074 0.637949689641472,1.199453417986539 0.603754113494106,1.203701868763191 0.569308584599546,1.206255040100989 0.53469608525397,1.207106781186548 0.5,1.206255040100989 0.46530391474603,1.203701868763191 0.430691415400455,1.199453417986539 0.396245886505894,1.193519922661074 0.362050310358528,1.185915677096747 0.328187067096475,1.176659000587176 0.294737736238822,1.165772193276863 0.26178290015342,1.153281482438188 0.229401949926902,1.13921695928762 0.1976728941046,1.123612506493336 0.166672170761127,1.106505716548904 0.13647446335436,1.08793780120968 0.107152520806449,1.067953492210072 0.078776982245291,1.046600933500879 0.051416206828682,1.023931565266295 0.025136109061123,1 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3669, "question_en": "Convert the text-formatted circular arc string CIRCULARSTRING(0 0, 1 1, 1 0) into a geometry object, enforce Simple Feature compliance, and output it in WKT format, where the arc is defined by the start point (0 0), midpoint (1 1), and end point (1 0)."}
{"id": 738, "function": "ST_ForceSFS", "question": "如何通过ST_GeomFromText函数将圆弧线定义文本CIRCULARSTRING(0 0, 1 1, 1 0)转换为几何对象，并确保其符合简单要素规范？该圆弧线依次经过坐标(0 0)、(1 1)和(1 0)三个控制点。", "sql": "SELECT ST_AsText(ST_ForceSFS(\n  ST_GeomFromText('CIRCULARSTRING(0 0, 1 1, 1 0)')\n));", "execution_result": [["LINESTRING(0 0,-0.023931565266295 0.025136109061123,-0.046600933500879 0.051416206828682,-0.067953492210071 0.07877698224529,-0.087937801209679 0.107152520806449,-0.106505716548904 0.13647446335436,-0.123612506493336 0.166672170761127,-0.13921695928762 0.1976728941046,-0.153281482438188 0.229401949926901,-0.165772193276863 0.261782900153419,-0.176659000587176 0.294737736238821,-0.185915677096747 0.328187067096475,-0.193519922661074 0.362050310358528,-0.199453417986539 0.396245886505894,-0.203701868763191 0.430691415400454,-0.206255040100989 0.46530391474603,-0.207106781186548 0.5,-0.206255040100989 0.53469608525397,-0.203701868763191 0.569308584599546,-0.199453417986539 0.603754113494106,-0.193519922661074 0.637949689641472,-0.185915677096747 0.671812932903525,-0.176659000587176 0.705262263761178,-0.165772193276863 0.73821709984658,-0.153281482438188 0.770598050073098,-0.13921695928762 0.8023271058954,-0.123612506493336 0.833327829238873,-0.106505716548904 0.86352553664564,-0.08793780120968 0.892847479193551,-0.067953492210071 0.92122301775471,-0.046600933500879 0.948583793171318,-0.023931565266295 0.974863890938877,-1.110223024625156e-16 1,0.025136109061123 1.023931565266295,0.051416206828682 1.046600933500879,0.07877698224529 1.067953492210072,0.107152520806449 1.087937801209679,0.13647446335436 1.106505716548904,0.166672170761127 1.123612506493336,0.197672894104599 1.13921695928762,0.229401949926901 1.153281482438188,0.261782900153419 1.165772193276862,0.294737736238821 1.176659000587176,0.328187067096475 1.185915677096747,0.362050310358528 1.193519922661074,0.396245886505894 1.199453417986539,0.430691415400454 1.203701868763191,0.46530391474603 1.206255040100989,0.5 1.207106781186548,0.53469608525397 1.206255040100989,0.569308584599545 1.203701868763191,0.603754113494105 1.199453417986539,0.637949689641472 1.193519922661074,0.671812932903525 1.185915677096747,0.705262263761178 1.176659000587176,0.738217099846581 1.165772193276862,0.770598050073099 1.153281482438188,0.8023271058954 1.13921695928762,0.833327829238873 1.123612506493336,0.86352553664564 1.106505716548904,0.892847479193551 1.08793780120968,0.921223017754709 1.067953492210072,0.948583793171318 1.046600933500879,0.974863890938877 1.023931565266295,1 1,1.023931565266295 0.974863890938877,1.046600933500879 0.948583793171318,1.067953492210072 0.92122301775471,1.087937801209679 0.892847479193551,1.106505716548904 0.86352553664564,1.123612506493336 0.833327829238874,1.13921695928762 0.802327105895401,1.153281482438188 0.770598050073099,1.165772193276862 0.738217099846581,1.176659000587176 0.705262263761179,1.185915677096747 0.671812932903525,1.193519922661074 0.637949689641472,1.199453417986539 0.603754113494106,1.203701868763191 0.569308584599546,1.206255040100989 0.53469608525397,1.207106781186548 0.5,1.206255040100989 0.46530391474603,1.203701868763191 0.430691415400455,1.199453417986539 0.396245886505894,1.193519922661074 0.362050310358528,1.185915677096747 0.328187067096475,1.176659000587176 0.294737736238822,1.165772193276863 0.26178290015342,1.153281482438188 0.229401949926902,1.13921695928762 0.1976728941046,1.123612506493336 0.166672170761127,1.106505716548904 0.13647446335436,1.08793780120968 0.107152520806449,1.067953492210072 0.078776982245291,1.046600933500879 0.051416206828682,1.023931565266295 0.025136109061123,1 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3670, "question_en": "How to convert the arc line definition text CIRCULARSTRING(0 0, 1 1, 1 0) into a geometry object using the ST_GeomFromText function while ensuring it complies with the Simple Features specification? The arc passes through the three control points (0 0), (1 1), and (1 0) in sequence."}
{"id": 738, "function": "ST_ForceSFS", "question": "从文本CIRCULARSTRING(0 0, 1 1, 1 0)创建几何对象：首先解析三个控制点坐标(0 0)、(1 1)、(1 0)，生成圆弧线几何体，再通过ST_ForceSFS强制符合SFS标准，最后用ST_AsText输出WKT字符串。", "sql": "SELECT ST_AsText(ST_ForceSFS(\n  ST_GeomFromText('CIRCULARSTRING(0 0, 1 1, 1 0)')\n));", "execution_result": [["LINESTRING(0 0,-0.023931565266295 0.025136109061123,-0.046600933500879 0.051416206828682,-0.067953492210071 0.07877698224529,-0.087937801209679 0.107152520806449,-0.106505716548904 0.13647446335436,-0.123612506493336 0.166672170761127,-0.13921695928762 0.1976728941046,-0.153281482438188 0.229401949926901,-0.165772193276863 0.261782900153419,-0.176659000587176 0.294737736238821,-0.185915677096747 0.328187067096475,-0.193519922661074 0.362050310358528,-0.199453417986539 0.396245886505894,-0.203701868763191 0.430691415400454,-0.206255040100989 0.46530391474603,-0.207106781186548 0.5,-0.206255040100989 0.53469608525397,-0.203701868763191 0.569308584599546,-0.199453417986539 0.603754113494106,-0.193519922661074 0.637949689641472,-0.185915677096747 0.671812932903525,-0.176659000587176 0.705262263761178,-0.165772193276863 0.73821709984658,-0.153281482438188 0.770598050073098,-0.13921695928762 0.8023271058954,-0.123612506493336 0.833327829238873,-0.106505716548904 0.86352553664564,-0.08793780120968 0.892847479193551,-0.067953492210071 0.92122301775471,-0.046600933500879 0.948583793171318,-0.023931565266295 0.974863890938877,-1.110223024625156e-16 1,0.025136109061123 1.023931565266295,0.051416206828682 1.046600933500879,0.07877698224529 1.067953492210072,0.107152520806449 1.087937801209679,0.13647446335436 1.106505716548904,0.166672170761127 1.123612506493336,0.197672894104599 1.13921695928762,0.229401949926901 1.153281482438188,0.261782900153419 1.165772193276862,0.294737736238821 1.176659000587176,0.328187067096475 1.185915677096747,0.362050310358528 1.193519922661074,0.396245886505894 1.199453417986539,0.430691415400454 1.203701868763191,0.46530391474603 1.206255040100989,0.5 1.207106781186548,0.53469608525397 1.206255040100989,0.569308584599545 1.203701868763191,0.603754113494105 1.199453417986539,0.637949689641472 1.193519922661074,0.671812932903525 1.185915677096747,0.705262263761178 1.176659000587176,0.738217099846581 1.165772193276862,0.770598050073099 1.153281482438188,0.8023271058954 1.13921695928762,0.833327829238873 1.123612506493336,0.86352553664564 1.106505716548904,0.892847479193551 1.08793780120968,0.921223017754709 1.067953492210072,0.948583793171318 1.046600933500879,0.974863890938877 1.023931565266295,1 1,1.023931565266295 0.974863890938877,1.046600933500879 0.948583793171318,1.067953492210072 0.92122301775471,1.087937801209679 0.892847479193551,1.106505716548904 0.86352553664564,1.123612506493336 0.833327829238874,1.13921695928762 0.802327105895401,1.153281482438188 0.770598050073099,1.165772193276862 0.738217099846581,1.176659000587176 0.705262263761179,1.185915677096747 0.671812932903525,1.193519922661074 0.637949689641472,1.199453417986539 0.603754113494106,1.203701868763191 0.569308584599546,1.206255040100989 0.53469608525397,1.207106781186548 0.5,1.206255040100989 0.46530391474603,1.203701868763191 0.430691415400455,1.199453417986539 0.396245886505894,1.193519922661074 0.362050310358528,1.185915677096747 0.328187067096475,1.176659000587176 0.294737736238822,1.165772193276863 0.26178290015342,1.153281482438188 0.229401949926902,1.13921695928762 0.1976728941046,1.123612506493336 0.166672170761127,1.106505716548904 0.13647446335436,1.08793780120968 0.107152520806449,1.067953492210072 0.078776982245291,1.046600933500879 0.051416206828682,1.023931565266295 0.025136109061123,1 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3671, "question_en": "Create a geometry object from the text CIRCULARSTRING(0 0, 1 1, 1 0): first parse the three control point coordinates (0 0), (1 1), (1 0) to generate a circular arc geometry, then enforce SFS compliance with ST_ForceSFS, and finally output the WKT string using ST_AsText."}
{"id": 739, "function": "ST_BdPolyFromText", "question": "将MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))在SRID 4326坐标系下构建多边形边界，并输出结果的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_BdPolyFromText(\n  'MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))',\n  4326\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3672, "question_en": "Construct a polygon boundary from MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0)) in SRID 4326 coordinate system and output the WKT string representation of the result."}
{"id": 739, "function": "ST_BdPolyFromText", "question": "以WKT格式返回由闭合折线MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))在EPSG:4326空间参考下生成的边界多边形。", "sql": "SELECT ST_AsText(ST_BdPolyFromText(\n  'MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))',\n  4326\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3673, "question_en": "Return the boundary polygon generated from the closed polyline MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0)) in EPSG:4326 spatial reference, in WKT format."}
{"id": 739, "function": "ST_BdPolyFromText", "question": "输出通过MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))几何对象在WGS84坐标系（SRID 4326）中创建的边界多边形的文本表达。", "sql": "SELECT ST_AsText(ST_BdPolyFromText(\n  'MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))',\n  4326\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3674, "question_en": "Output the text representation of the boundary polygon created from the MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0)) geometry object in the WGS84 coordinate system (SRID 4326)."}
{"id": 739, "function": "ST_BdPolyFromText", "question": "如何从多线MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))构建边界多边形，并使用SRID 4326进行空间参考，最后以WKT格式输出结果？", "sql": "SELECT ST_AsText(ST_BdPolyFromText(\n  'MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))',\n  4326\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3675, "question_en": "How to construct a boundary polygon from the multilinestring MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0)) with SRID 4326 as the spatial reference and output the result in WKT format?"}
{"id": 739, "function": "ST_BdPolyFromText", "question": "给定一个由四个顶点(0 0)、(0 10)、(10 10)、(10 0)组成的闭合多线MULTILINESTRING，如何将其转换为边界多边形并输出WKT表示，同时指定该几何的空间参考系为EPSG:4326？", "sql": "SELECT ST_AsText(ST_BdPolyFromText(\n  'MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))',\n  4326\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3676, "question_en": "Given a closed MULTILINESTRING composed of four vertices (0 0), (0 10), (10 10), (10 0), how to convert it into a boundary polygon and output its WKT representation, while specifying the spatial reference system as EPSG:4326?"}
{"id": 739, "function": "ST_BdPolyFromText", "question": "使用ST_BdPolyFromText函数处理多线MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))，其中包含从(0,0)到(0,10)到(10,10)到(10,0)再回到(0,0)的线段，将其转换为多边形边界并以WKT格式输出，空间参考使用WGS84坐标系（SRID=4326）。", "sql": "SELECT ST_AsText(ST_BdPolyFromText(\n  'MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))',\n  4326\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3677, "question_en": "Process the multiline MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0)) containing segments from (0,0) to (0,10) to (10,10) to (10,0) back to (0,0) using the ST_BdPolyFromText function, convert it to a polygon boundary, and output in WKT format with WGS84 coordinate system (SRID=4326)."}
{"id": 740, "function": "ST_BdMPolyFromText", "question": "输出由MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0),(20 20, 20 30, 30 30, 30 20, 20 20))构建的带边界多边形在SRID 4326下的WKT字符串表示。", "sql": "SELECT ST_AsText(ST_BdMPolyFromText(\n  'MULTILINESTRING(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (20 20, 20 30, 30 30, 30 20, 20 20)\n  )',\n  4326\n));", "execution_result": [["MULTIPOLYGON(((0 10,10 10,10 0,0 0,0 10)),((20 30,30 30,30 20,20 20,20 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3678, "question_en": "Output the WKT string representation of the polygon with boundaries constructed from MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0),(20 20, 20 30, 30 30, 30 20, 20 20)) under SRID 4326."}
{"id": 740, "function": "ST_BdMPolyFromText", "question": "将包含两条闭合折线((0 0, 0 10, 10 10, 10 0, 0 0)和(20 20, 20 30, 30 30, 30 20, 20 20))的MULTILINESTRING转换为多边形边界，并以WKT格式输出结果，坐标系为EPSG:4326。", "sql": "SELECT ST_AsText(ST_BdMPolyFromText(\n  'MULTILINESTRING(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (20 20, 20 30, 30 30, 30 20, 20 20)\n  )',\n  4326\n));", "execution_result": [["MULTIPOLYGON(((0 10,10 10,10 0,0 0,0 10)),((20 30,30 30,30 20,20 20,20 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3679, "question_en": "Convert a MULTILINESTRING containing two closed linestrings ((0 0, 0 10, 10 10, 10 0, 0 0) and (20 20, 20 30, 30 30, 30 20, 20 20)) into polygon boundaries and output the result in WKT format with coordinate system EPSG:4326."}
{"id": 740, "function": "ST_BdMPolyFromText", "question": "使用ST_BdMPolyFromText函数处理包含两个矩形环((0 0, 0 10, 10 10, 10 0, 0 0)和(20 20, 20 30, 30 30, 30 20, 20 20))的多线要素，输出生成的多边形WKT文本，空间参考系编号为4326。", "sql": "SELECT ST_AsText(ST_BdMPolyFromText(\n  'MULTILINESTRING(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (20 20, 20 30, 30 30, 30 20, 20 20)\n  )',\n  4326\n));", "execution_result": [["MULTIPOLYGON(((0 10,10 10,10 0,0 0,0 10)),((20 30,30 30,30 20,20 20,20 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3680, "question_en": "Use the ST_BdMPolyFromText function to process a multiline feature containing two rectangular rings ((0 0, 0 10, 10 10, 10 0, 0 0) and (20 20, 20 30, 30 30, 30 20, 20 20)), and output the generated polygon WKT text with spatial reference system ID 4326."}
{"id": 740, "function": "ST_BdMPolyFromText", "question": "如何从包含两条闭合折线的MULTILINESTRING构建多边形？第一条折线由坐标(0 0)开始，经(0 10)、(10 10)、(10 0)回到(0 0)；第二条折线由(20 20)开始，经(20 30)、(30 30)、(30 20)回到(20 20)，SRID为4326。", "sql": "SELECT ST_AsText(ST_BdMPolyFromText(\n  'MULTILINESTRING(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (20 20, 20 30, 30 30, 30 20, 20 20)\n  )',\n  4326\n));", "execution_result": [["MULTIPOLYGON(((0 10,10 10,10 0,0 0,0 10)),((20 30,30 30,30 20,20 20,20 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3681, "question_en": "How to construct polygons from a MULTILINESTRING containing two closed linestrings? The first linestring starts at (0 0), passes through (0 10), (10 10), (10 0), and returns to (0 0); the second linestring starts at (20 20), passes through (20 30), (30 30), (30 20), and returns to (20 20), with SRID 4326."}
{"id": 740, "function": "ST_BdMPolyFromText", "question": "请将MULTILINESTRING中的两个四边形转换为多边形：第一个四边形顶点依次是(0 0)、(0 10)、(10 10)、(10 0)，第二个四边形顶点是(20 20)、(20 30)、(30 30)、(30 20)，坐标系为WGS84（SRID=4326）。", "sql": "SELECT ST_AsText(ST_BdMPolyFromText(\n  'MULTILINESTRING(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (20 20, 20 30, 30 30, 30 20, 20 20)\n  )',\n  4326\n));", "execution_result": [["MULTIPOLYGON(((0 10,10 10,10 0,0 0,0 10)),((20 30,30 30,30 20,20 20,20 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3682, "question_en": "Convert the two quadrilaterals in the MULTILINESTRING into polygons: the first quadrilateral has vertices (0 0), (0 10), (10 10), (10 0), and the second has vertices (20 20), (20 30), (30 30), (30 20), with WGS84 coordinate system (SRID=4326)."}
{"id": 740, "function": "ST_BdMPolyFromText", "question": "使用ST_BdMPolyFromText函数处理包含两条闭合环的MULTILINESTRING：第一条环连接点(0 0)→(0 10)→(10 10)→(10 0)→(0 0)，第二条环连接(20 20)→(20 30)→(30 30)→(30 20)→(20 20)，输出WKT格式结果，空间参考系编号为4326。", "sql": "SELECT ST_AsText(ST_BdMPolyFromText(\n  'MULTILINESTRING(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (20 20, 20 30, 30 30, 30 20, 20 20)\n  )',\n  4326\n));", "execution_result": [["MULTIPOLYGON(((0 10,10 10,10 0,0 0,0 10)),((20 30,30 30,30 20,20 20,20 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3683, "question_en": "Use the ST_BdMPolyFromText function to process a MULTILINESTRING containing two closed rings: the first ring connects points (0 0)→(0 10)→(10 10)→(10 0)→(0 0), and the second ring connects (20 20)→(20 30)→(30 30)→(30 20)→(20 20), output the result in WKT format with spatial reference system ID 4326."}
{"id": 741, "function": "ST_GeographyFromText", "question": "将SRID为4326的地理坐标POINT(-71.064544 42.28787)转换为WKT格式字符串输出。", "sql": "SELECT ST_AsText(\n  ST_GeographyFromText('SRID=4326;POINT(-71.064544 42.28787)')\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3684, "question_en": "Convert the geographic coordinate POINT(-71.064544 42.28787) with SRID 4326 into a WKT format string output."}
{"id": 741, "function": "ST_GeographyFromText", "question": "以WKT文本形式输出经度-71.064544纬度42.28787的地理点坐标，要求包含SRID=4326的空间参考信息。", "sql": "SELECT ST_AsText(\n  ST_GeographyFromText('SRID=4326;POINT(-71.064544 42.28787)')\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3685, "question_en": "Output the geographic point coordinates of longitude -71.064544 and latitude 42.28787 in WKT format, including the spatial reference information SRID=4326."}
{"id": 741, "function": "ST_GeographyFromText", "question": "将WGS84坐标系（SRID=4326）下的二维地理点POINT(-71.064544 42.28787)转换为标准WKT字符串表示。", "sql": "SELECT ST_AsText(\n  ST_GeographyFromText('SRID=4326;POINT(-71.064544 42.28787)')\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3686, "question_en": "Convert the 2D geographic point POINT(-71.064544 42.28787) in WGS84 coordinate system (SRID=4326) to its standard WKT string representation."}
{"id": 741, "function": "ST_GeographyFromText", "question": "将WGS84坐标系（SRID=4326）下的二维地理点POINT(-71.064544 42.28787)转换为文本表示，要求完整输出该点的经度-71.064544和纬度42.28787坐标值。", "sql": "SELECT ST_AsText(\n  ST_GeographyFromText('SRID=4326;POINT(-71.064544 42.28787)')\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3687, "question_en": "Convert the 2D geographic point POINT(-71.064544 42.28787) in WGS84 coordinate system (SRID=4326) to text representation, ensuring the full output of its longitude -71.064544 and latitude 42.28787 coordinate values."}
{"id": 741, "function": "ST_GeographyFromText", "question": "如何通过ST_GeographyFromText函数处理带SRID=4326坐标系的POINT(-71.064544 42.28787)地理对象，并用ST_AsText将其转为WKT格式？", "sql": "SELECT ST_AsText(\n  ST_GeographyFromText('SRID=4326;POINT(-71.064544 42.28787)')\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3688, "question_en": "How to process the geographic object POINT(-71.064544 42.28787) with SRID=4326 using the ST_GeographyFromText function and convert it to WKT format with ST_AsText?"}
{"id": 741, "function": "ST_GeographyFromText", "question": "从文本 'SRID=4326;POINT(-71.064544 42.28787)' 创建地理对象，其中包含一个二维点几何类型，具体坐标为 (-71.064544, 42.28787)，并使用 ST_AsText 函数将该对象转换为 WKT 格式输出。", "sql": "SELECT ST_AsText(\n  ST_GeographyFromText('SRID=4326;POINT(-71.064544 42.28787)')\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3689, "question_en": "Create a geographic object from the text 'SRID=4326;POINT(-71.064544 42.28787)' containing a 2D point geometry with coordinates (-71.064544, 42.28787), and use the ST_AsText function to convert this object to WKT format output."}
{"id": 742, "function": "ST_GeometryFromText", "question": "将LINESTRING(1 2, 3 4, 5 6)转换为WKT格式的字符串输出。", "sql": "SELECT ST_AsText(ST_GeometryFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["LINESTRING(1 2,3 4,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3690, "question_en": "Convert the LINESTRING(1 2, 3 4, 5 6) into a WKT format string output."}
{"id": 742, "function": "ST_GeometryFromText", "question": "输出由坐标点(1 2)、(3 4)和(5 6)构成的折线几何对象的WKT文本表示。", "sql": "SELECT ST_AsText(ST_GeometryFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["LINESTRING(1 2,3 4,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3691, "question_en": "Output the WKT representation of the linestring geometry formed by the coordinate points (1 2), (3 4), and (5 6)."}
{"id": 742, "function": "ST_GeometryFromText", "question": "以WKT字符串形式返回包含三个顶点(1 2)、(3 4)、(5 6)的LINESTRING几何对象。", "sql": "SELECT ST_AsText(ST_GeometryFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["LINESTRING(1 2,3 4,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3692, "question_en": "Return a LINESTRING geometry object containing three vertices (1 2), (3 4), (5 6) in WKT string format."}
{"id": 742, "function": "ST_GeometryFromText", "question": "如何将文本格式的LINESTRING对象转换为WKT格式输出？该折线由三个二维坐标点组成，分别是POINT(1 2)、POINT(3 4)和POINT(5 6)。", "sql": "SELECT ST_AsText(ST_GeometryFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["LINESTRING(1 2,3 4,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3693, "question_en": "How to convert a text-formatted LINESTRING object to WKT format output? The polyline consists of three 2D coordinate points: POINT(1 2), POINT(3 4), and POINT(5 6)."}
{"id": 742, "function": "ST_GeometryFromText", "question": "使用ST_GeometryFromText函数处理LINESTRING(1 2, 3 4, 5 6)，并输出WKT格式的结果。", "sql": "SELECT ST_AsText(ST_GeometryFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["LINESTRING(1 2,3 4,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3694, "question_en": "Use the ST_GeometryFromText function to process LINESTRING(1 2, 3 4, 5 6) and output the result in WKT format."}
{"id": 742, "function": "ST_GeometryFromText", "question": "使用ST_GeometryFromText解析包含三个顶点（1 2）、（3 4）、（5 6）的折线字符串，并通过ST_AsText输出WKT格式的结果。", "sql": "SELECT ST_AsText(ST_GeometryFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["LINESTRING(1 2,3 4,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3695, "question_en": "Parse a linestring with three vertices (1 2), (3 4), (5 6) using ST_GeometryFromText and output the result in WKT format via ST_AsText."}
{"id": 743, "function": "ST_GeometryFromText", "question": "将坐标为POINT(-71.064544 42.28787)的二维点转换为WKT格式字符串输出，空间参考系为EPSG:4326。", "sql": "SELECT ST_AsText(ST_GeometryFromText('POINT(-71.064544 42.28787)', 4326));", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3696, "question_en": "Convert the 2D point with coordinates POINT(-71.064544 42.28787) into a WKT format string output, with the spatial reference system EPSG:4326."}
{"id": 743, "function": "ST_GeometryFromText", "question": "以WKT文本格式输出经度-71.064544、纬度42.28787的二维地理坐标点，坐标系使用WGS84(EPSG:4326)。", "sql": "SELECT ST_AsText(ST_GeometryFromText('POINT(-71.064544 42.28787)', 4326));", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3697, "question_en": "Output the 2D geographic coordinate point at longitude -71.064544 and latitude 42.28787 in WKT format, using the WGS84 coordinate system (EPSG:4326)."}
{"id": 743, "function": "ST_GeometryFromText", "question": "将SRID为4326的几何对象POINT(-71.064544 42.28787)转换为标准WKT表示形式并输出。", "sql": "SELECT ST_AsText(ST_GeometryFromText('POINT(-71.064544 42.28787)', 4326));", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3698, "question_en": "Convert the geometric object POINT(-71.064544 42.28787) with SRID 4326 to standard WKT format and output it."}
{"id": 743, "function": "ST_GeometryFromText", "question": "将WKT格式的二维点POINT(-71.064544 42.28787)通过SRID 4326坐标系转换为几何对象，并以WKT格式输出结果。", "sql": "SELECT ST_AsText(ST_GeometryFromText('POINT(-71.064544 42.28787)', 4326));", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3699, "question_en": "Convert the 2D point in WKT format POINT(-71.064544 42.28787) into a geometry object using SRID 4326 and output the result in WKT format."}
{"id": 743, "function": "ST_GeometryFromText", "question": "使用ST_GeometryFromText函数将字符串'POINT(-71.064544 42.28787)'转换为空间参考系为EPSG:4326的几何点对象，再用ST_AsText函数输出其WKT表示。", "sql": "SELECT ST_AsText(ST_GeometryFromText('POINT(-71.064544 42.28787)', 4326));", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3700, "question_en": "Use the ST_GeometryFromText function to convert the string 'POINT(-71.064544 42.28787)' into a geometry point object with the spatial reference system EPSG:4326, then output its WKT representation using the ST_AsText function."}
{"id": 743, "function": "ST_GeometryFromText", "question": "基于经度-71.064544和纬度42.28787的坐标值，创建一个EPSG:4326坐标系下的二维点几何对象，并返回其标准WKT文本表示形式。", "sql": "SELECT ST_AsText(ST_GeometryFromText('POINT(-71.064544 42.28787)', 4326));", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3701, "question_en": "Create a 2D point geometry object in the EPSG:4326 coordinate system based on the longitude -71.064544 and latitude 42.28787, and return its standard WKT text representation."}
{"id": 744, "function": "ST_WKTToSQL", "question": "将WKT格式的POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))转换为几何对象后，输出其标准WKT字符串表示。", "sql": "SELECT ST_AsText(ST_WKTToSQL('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))'));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3702, "question_en": "Convert the WKT-formatted POLYGON((0 0, 0 10, 10 10, 10 0, 0 0)) to a geometry object and output its standard WKT string representation."}
{"id": 744, "function": "ST_WKTToSQL", "question": "以WKT字符串格式输出由顶点坐标(0 0)、(0 10)、(10 10)、(10 0)构成的多边形几何对象。", "sql": "SELECT ST_AsText(ST_WKTToSQL('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))'));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3703, "question_en": "Output the polygon geometry object formed by the vertex coordinates (0 0), (0 10), (10 10), (10 0) in WKT string format."}
{"id": 744, "function": "ST_WKTToSQL", "question": "将POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))这个闭合多边形从WKT格式转换为几何对象，并返回其完整的WKT文本表示。", "sql": "SELECT ST_AsText(ST_WKTToSQL('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))'));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3704, "question_en": "Convert the closed polygon POLYGON((0 0, 0 10, 10 10, 10 0, 0 0)) from WKT format to a geometry object and return its complete WKT text representation."}
{"id": 744, "function": "ST_WKTToSQL", "question": "将WKT格式的POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))转换为PostGIS几何对象，并以WKT文本格式输出。", "sql": "SELECT ST_AsText(ST_WKTToSQL('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))'));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3705, "question_en": "Convert the WKT format POLYGON((0 0, 0 10, 10 10, 10 0, 0 0)) into a PostGIS geometry object and output it as WKT text."}
{"id": 744, "function": "ST_WKTToSQL", "question": "使用ST_WKTToSQL函数将POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))这个多边形从WKT格式转换为几何对象，然后用ST_AsText函数将其转换回WKT格式输出。", "sql": "SELECT ST_AsText(ST_WKTToSQL('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))'));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3706, "question_en": "Use the ST_WKTToSQL function to convert the polygon POLYGON((0 0, 0 10, 10 10, 10 0, 0 0)) from WKT format to a geometry object, then use the ST_AsText function to convert it back to WKT format for output."}
{"id": 744, "function": "ST_WKTToSQL", "question": "将POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))这个闭合多边形从WKT格式转换为PostGIS几何对象并输出为WKT文本，该多边形由五个顶点构成，起始点为(0 0)，然后依次经过(0 10)、(10 10)、(10 0)，最后回到起点(0 0)闭合。", "sql": "SELECT ST_AsText(ST_WKTToSQL('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))'));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3707, "question_en": "Convert the closed polygon POLYGON((0 0, 0 10, 10 10, 10 0, 0 0)) from WKT format to a PostGIS geometry object and output it as WKT text. This polygon consists of five vertices, starting at (0 0), then sequentially passing through (0 10), (10 10), (10 0), and finally returning to the starting point (0 0) to close."}
{"id": 745, "function": "ST_WKBToSQL", "question": "将WKB格式的二进制数据'\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'转换为WKT字符串格式输出。", "sql": "SELECT ST_AsText(\n  ST_WKBToSQL(\n    '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'::bytea\n  )\n);", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3708, "question_en": "Convert the WKB binary data '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@' to WKT string format output."}
{"id": 745, "function": "ST_WKBToSQL", "question": "输出十六进制WKB值'\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'对应的几何对象的WKT文本表示。", "sql": "SELECT ST_AsText(\n  ST_WKBToSQL(\n    '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'::bytea\n  )\n);", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3709, "question_en": "Output the WKT text representation of the geometric object corresponding to the hexadecimal WKB value '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'."}
{"id": 745, "function": "ST_WKBToSQL", "question": "以WKT字符串形式显示从二进制WKB数据'\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'转换得到的几何对象。", "sql": "SELECT ST_AsText(\n  ST_WKBToSQL(\n    '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'::bytea\n  )\n);", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3710, "question_en": "Display the geometric object converted from the binary WKB data '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@' as a WKT string."}
{"id": 745, "function": "ST_WKBToSQL", "question": "将WKB格式的二进制数据'\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'转换为几何对象，并以WKT文本格式输出该对象的坐标信息。", "sql": "SELECT ST_AsText(\n  ST_WKBToSQL(\n    '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'::bytea\n  )\n);", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3711, "question_en": "Convert the WKB binary data '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@' into a geometry object and output the coordinate information of the object in WKT text format."}
{"id": 745, "function": "ST_WKBToSQL", "question": "解析十六进制WKB值'\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'，将其转换为包含X坐标1.0和Y坐标2.0的POINT类型几何对象，最终输出WKT表示形式。", "sql": "SELECT ST_AsText(\n  ST_WKBToSQL(\n    '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'::bytea\n  )\n);", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3712, "question_en": "Parse the hexadecimal WKB value '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@', convert it into a POINT type geometry object with X coordinate 1.0 and Y coordinate 2.0, and finally output the WKT representation."}
{"id": 745, "function": "ST_WKBToSQL", "question": "使用ST_WKBToSQL函数处理字节序列'\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'，该序列表示一个二维点POINT(1 2)，通过ST_AsText函数输出其标准文本表示。", "sql": "SELECT ST_AsText(\n  ST_WKBToSQL(\n    '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'::bytea\n  )\n);", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3713, "question_en": "Process the byte sequence '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@' representing a 2D point POINT(1 2) using the ST_WKBToSQL function, and output its standard text representation via the ST_AsText function."}
{"id": 746, "function": "ST_GMLToSQL", "question": "将GML格式的二维点'<gml:Point srsName=\"EPSG:4326\"><gml:coordinates>-71.064544,42.28787</gml:coordinates></gml:Point>'转换为WKT字符串格式输出。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point srsName=\"EPSG:4326\" xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>'\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3714, "question_en": "Convert the GML-formatted 2D point '<gml:Point srsName=\"EPSG:4326\"><gml:coordinates>-71.064544,42.28787</gml:coordinates></gml:Point>' to WKT string format output."}
{"id": 746, "function": "ST_GMLToSQL", "question": "输出经度-71.064544纬度42.28787的GML点要素转换后的标准WKT文本表示。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point srsName=\"EPSG:4326\" xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>'\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3715, "question_en": "Output the standard WKT text representation of the GML point feature with longitude -71.064544 and latitude 42.28787 after conversion."}
{"id": 746, "function": "ST_GMLToSQL", "question": "将包含坐标(-71.064544,42.28787)且采用EPSG:4326坐标系的GML点要素，以WKT文本格式输出结果。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point srsName=\"EPSG:4326\" xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>'\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3716, "question_en": "Convert the GML point feature containing coordinates (-71.064544,42.28787) in EPSG:4326 coordinate system to WKT text format output."}
{"id": 746, "function": "ST_GMLToSQL", "question": "将GML格式的二维点数据'<gml:Point srsName=\"EPSG:4326\"><gml:coordinates>-71.064544,42.28787</gml:coordinates></gml:Point>'转换为PostGIS几何对象，并以WKT文本格式输出该点的坐标值。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point srsName=\"EPSG:4326\" xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>'\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3717, "question_en": "Convert the GML-formatted 2D point data '<gml:Point srsName=\"EPSG:4326\"><gml:coordinates>-71.064544,42.28787</gml:coordinates></gml:Point>' into a PostGIS geometry object and output the point's coordinate values in WKT text format."}
{"id": 746, "function": "ST_GMLToSQL", "question": "解析GML字符串中定义的EPSG:4326坐标系下的二维点，其经度为-71.064544，纬度为42.28787，通过ST_GMLToSQL函数转换为几何对象后，用ST_AsText函数输出WKT格式的POINT(-71.064544 42.28787)。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point srsName=\"EPSG:4326\" xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>'\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3718, "question_en": "Parse the 2D point defined in the GML string under the EPSG:4326 coordinate system with longitude -71.064544 and latitude 42.28787, convert it to a geometry object using the ST_GMLToSQL function, and output the WKT-formatted POINT(-71.064544 42.28787) with the ST_AsText function."}
{"id": 746, "function": "ST_GMLToSQL", "question": "使用ST_GMLToSQL处理包含srsName=\"EPSG:4326\"属性和gml:coordinates=\"-71.064544,42.28787\"子元素的GML点要素，将转换结果通过ST_AsText显示为WKT格式的二维点坐标。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point srsName=\"EPSG:4326\" xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>'\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3719, "question_en": "Process a GML point feature containing the srsName=\"EPSG:4326\" attribute and gml:coordinates=\"-71.064544,42.28787\" subelement using ST_GMLToSQL, then display the converted result as a 2D point coordinate in WKT format via ST_AsText."}
{"id": 747, "function": "ST_GMLToSQL", "question": "将GML格式的二维点'<gml:Point xmlns:gml=\"http://www.opengis.net/gml\"><gml:coordinates>-71.064544,42.28787</gml:coordinates></gml:Point>'转换为WKT字符串输出，空间参考系为EPSG:4326。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>',\n    4326\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3720, "question_en": "Convert the GML-formatted 2D point '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\"><gml:coordinates>-71.064544,42.28787</gml:coordinates></gml:Point>' to a WKT string output with spatial reference system EPSG:4326."}
{"id": 747, "function": "ST_GMLToSQL", "question": "以WKT格式输出原来是GML格式的经度-71.064544纬度42.28787的二维点几何对象，要求使用SRID 4326坐标系。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>',\n    4326\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3721, "question_en": "Output the 2D point geometry object with longitude -71.064544 and latitude 42.28787 in WKT format, originally in GML format, using SRID 4326 coordinate system."}
{"id": 747, "function": "ST_GMLToSQL", "question": "将包含坐标(-71.064544,42.28787)的GML点要素转换为Well-Known Text格式输出，坐标系需指定为WGS84(EPSG:4326)。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>',\n    4326\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3722, "question_en": "Convert the GML point feature containing coordinates (-71.064544,42.28787) to Well-Known Text format output, with the coordinate system specified as WGS84 (EPSG:4326)."}
{"id": 747, "function": "ST_GMLToSQL", "question": "将GML格式的二维点数据'<gml:Point xmlns:gml=\"http://www.opengis.net/gml\"><gml:coordinates>-71.064544,42.28787</gml:coordinates></gml:Point>'转换为PostGIS几何对象，其中点坐标为经度-71.064544、纬度42.28787，SRID为4326，并以WKT文本格式输出结果。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>',\n    4326\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3723, "question_en": "Convert the GML-formatted 2D point data '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\"><gml:coordinates>-71.064544,42.28787</gml:coordinates></gml:Point>' into a PostGIS geometry object with longitude -71.064544, latitude 42.28787, SRID 4326, and output the result in WKT text format."}
{"id": 747, "function": "ST_GMLToSQL", "question": "解析GML字符串'<gml:Point xmlns:gml=\"http://www.opengis.net/gml\"><gml:coordinates>-71.064544,42.28787</gml:coordinates></gml:Point>'，构造一个包含具体坐标(-71.064544,42.28787)的二维点几何对象，使用WGS84坐标系(SRID=4326)，最终输出该点的WKT表示形式。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>',\n    4326\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3724, "question_en": "Parse the GML string '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\"><gml:coordinates>-71.064544,42.28787</gml:coordinates></gml:Point>', construct a 2D point geometry object with the specific coordinates (-71.064544,42.28787) using the WGS84 coordinate system (SRID=4326), and finally output the WKT representation of the point."}
{"id": 747, "function": "ST_GMLToSQL", "question": "使用ST_GMLToSQL函数处理GML格式的点数据，该数据定义在http://www.opengis.net/gml命名空间下，包含精确坐标值(-71.064544,42.28787)，指定空间参考系为EPSG:4326，并通过ST_AsText函数将结果几何对象转换为可读的WKT文本格式。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>',\n    4326\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3725, "question_en": "Process the GML-formatted point data with the ST_GMLToSQL function, where the data is defined under the http://www.opengis.net/gml namespace, contains precise coordinates (-71.064544,42.28787), specifies the spatial reference system as EPSG:4326, and converts the resulting geometry object to a readable WKT text format using the ST_AsText function."}
{"id": 754, "function": "ST_Length2D", "question": "输出LINESTRING(0 0, 3 4)这条二维线段的平面长度值。", "sql": "SELECT ST_Length2D(ST_GeomFromText('LINESTRING(0 0, 3 4)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3726, "question_en": "Output the planar length value of the 2D line segment LINESTRING(0 0, 3 4)."}
{"id": 754, "function": "ST_Length2D", "question": "计算并返回由坐标点(0,0)到(3,4)构成的二维直线段的几何长度数值。", "sql": "SELECT ST_Length2D(ST_GeomFromText('LINESTRING(0 0, 3 4)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3727, "question_en": "Calculate and return the geometric length of the 2D line segment formed by the coordinate points (0,0) to (3,4)."}
{"id": 754, "function": "ST_Length2D", "question": "以浮点数形式输出LINESTRING几何对象(起点0 0，终点3 4)在二维平面上的空间长度测量结果。", "sql": "SELECT ST_Length2D(ST_GeomFromText('LINESTRING(0 0, 3 4)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3728, "question_en": "Output the spatial length measurement result of the LINESTRING geometry object (start point 0 0, end point 3 4) in a 2D plane as a floating-point number."}
{"id": 754, "function": "ST_Length2D", "question": "计算由坐标点(0 0)和(3 4)构成的二维线段LINESTRING(0 0, 3 4)的平面长度。", "sql": "SELECT ST_Length2D(ST_GeomFromText('LINESTRING(0 0, 3 4)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3729, "question_en": "Calculate the planar length of the 2D line segment LINESTRING(0 0, 3 4) formed by the coordinate points (0 0) and (3 4)."}
{"id": 754, "function": "ST_Length2D", "question": "如何获取从起点(0 0)到终点(3 4)的直线段LINESTRING(0 0, 3 4)在二维平面上的几何长度？", "sql": "SELECT ST_Length2D(ST_GeomFromText('LINESTRING(0 0, 3 4)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3730, "question_en": "How to calculate the geometric length of the straight-line segment LINESTRING(0 0, 3 4) from the start point (0 0) to the end point (3 4) in a 2D plane?"}
{"id": 754, "function": "ST_Length2D", "question": "使用ST_Length2D函数测量由两个顶点(0 0)和(3 4)组成的LINESTRING几何对象的二维平面距离。", "sql": "SELECT ST_Length2D(ST_GeomFromText('LINESTRING(0 0, 3 4)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3731, "question_en": "Use the ST_Length2D function to measure the 2D planar distance of a LINESTRING geometry object composed of two vertices (0 0) and (3 4)."}
{"id": 755, "function": "ST_Perimeter2D", "question": "输出POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))的二维周长数值。", "sql": "SELECT ST_Perimeter2D(\n  ST_GeomFromText('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))')\n);", "execution_result": [[40.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3732, "question_en": "Output the 2D perimeter value of POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))."}
{"id": 755, "function": "ST_Perimeter2D", "question": "计算并返回由坐标点(0 0)、(0 10)、(10 10)、(10 0)、(0 0)组成的闭合多边形的平面周长。", "sql": "SELECT ST_Perimeter2D(\n  ST_GeomFromText('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))')\n);", "execution_result": [[40.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3733, "question_en": "Calculate and return the planar perimeter of the closed polygon formed by the coordinate points (0 0), (0 10), (10 10), (10 0), (0 0)."}
{"id": 755, "function": "ST_Perimeter2D", "question": "以数值形式输出WKT格式为POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))的几何图形的二维周长。", "sql": "SELECT ST_Perimeter2D(\n  ST_GeomFromText('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))')\n);", "execution_result": [[40.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3734, "question_en": "Output the 2D perimeter of the geometry in WKT format POLYGON((0 0, 0 10, 10 10, 10 0, 0 0)) as a numerical value."}
{"id": 755, "function": "ST_Perimeter2D", "question": "计算由顶点坐标依次为(0 0)、(0 10)、(10 10)、(10 0)、(0 0)构成的二维多边形POLYGON的平面周长。", "sql": "SELECT ST_Perimeter2D(\n  ST_GeomFromText('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))')\n);", "execution_result": [[40.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3735, "question_en": "Calculate the planar perimeter of a 2D polygon POLYGON with vertex coordinates sequentially as (0 0), (0 10), (10 10), (10 0), (0 0)."}
{"id": 755, "function": "ST_Perimeter2D", "question": "如何通过ST_GeomFromText函数将WKT格式的POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))转换为几何对象，并计算其二维周长？", "sql": "SELECT ST_Perimeter2D(\n  ST_GeomFromText('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))')\n);", "execution_result": [[40.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3736, "question_en": "How to convert the WKT format POLYGON((0 0, 0 10, 10 10, 10 0, 0 0)) into a geometry object using the ST_GeomFromText function and calculate its 2D perimeter?"}
{"id": 755, "function": "ST_Perimeter2D", "question": "给定一个由五个顶点(0 0)、(0 10)、(10 10)、(10 0)和(0 0)按顺序连接形成的闭合多边形，使用ST_Perimeter2D函数求其二维平面周长。", "sql": "SELECT ST_Perimeter2D(\n  ST_GeomFromText('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))')\n);", "execution_result": [[40.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3737, "question_en": "Given a closed polygon formed by sequentially connecting five vertices (0 0), (0 10), (10 10), (10 0), and (0 0), use the ST_Perimeter2D function to calculate its 2D plane perimeter."}
{"id": 756, "function": "ST_UnaryUnion", "question": "输出将POINT(0 0)和POINT(1 1)合并后执行拓扑联合操作得到的几何对象。", "sql": "SELECT ST_UnaryUnion(ST_Collect(ARRAY[\n  ST_GeomFromText('POINT(0 0)'),\n  ST_GeomFromText('POINT(1 1)')\n]));", "execution_result": [["0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3738, "question_en": "Output the geometric object obtained by performing a topological union operation on the merged POINT(0 0) and POINT(1 1)."}
{"id": 756, "function": "ST_UnaryUnion", "question": "返回对二维点POINT(0 0)和POINT(1 1)进行几何收集后执行单元素联合操作的结果。", "sql": "SELECT ST_UnaryUnion(ST_Collect(ARRAY[\n  ST_GeomFromText('POINT(0 0)'),\n  ST_GeomFromText('POINT(1 1)')\n]));", "execution_result": [["0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3739, "question_en": "Return the result of performing a single-element union operation on the geometric collection of 2D points POINT(0 0) and POINT(1 1)."}
{"id": 756, "function": "ST_UnaryUnion", "question": "输出将坐标为(0,0)的点和坐标为(1,1)的点合并为一个几何集合，并执行拓扑联合运算后的几何表示。", "sql": "SELECT ST_UnaryUnion(ST_Collect(ARRAY[\n  ST_GeomFromText('POINT(0 0)'),\n  ST_GeomFromText('POINT(1 1)')\n]));", "execution_result": [["0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3740, "question_en": "Output the geometric representation after merging the point at coordinates (0,0) and the point at (1,1) into a geometry collection and performing a topological union operation."}
{"id": 756, "function": "ST_UnaryUnion", "question": "如何将坐标为(0,0)的二维点POINT(0 0)和坐标为(1,1)的二维点POINT(1 1)通过数组收集后执行一元联合操作？", "sql": "SELECT ST_UnaryUnion(ST_Collect(ARRAY[\n  ST_GeomFromText('POINT(0 0)'),\n  ST_GeomFromText('POINT(1 1)')\n]));", "execution_result": [["0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3741, "question_en": "How to collect the 2D points POINT(0 0) with coordinates (0,0) and POINT(1 1) with coordinates (1,1) into an array and perform a unary union operation?"}
{"id": 756, "function": "ST_UnaryUnion", "question": "使用ST_GeomFromText函数创建POINT(0 0)和POINT(1 1)两个点对象，通过ARRAY数组收集后，应用ST_UnaryUnion处理。", "sql": "SELECT ST_UnaryUnion(ST_Collect(ARRAY[\n  ST_GeomFromText('POINT(0 0)'),\n  ST_GeomFromText('POINT(1 1)')\n]));", "execution_result": [["0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3742, "question_en": "Use the ST_GeomFromText function to create two point objects, POINT(0 0) and POINT(1 1), collect them in an ARRAY, and then apply ST_UnaryUnion."}
{"id": 756, "function": "ST_UnaryUnion", "question": "在PostGIS中，如何用精确坐标构建两个二维点几何体（POINT(0 0)和POINT(1 1)），将它们放入数组后执行收集操作，最后进行一元空间联合？", "sql": "SELECT ST_UnaryUnion(ST_Collect(ARRAY[\n  ST_GeomFromText('POINT(0 0)'),\n  ST_GeomFromText('POINT(1 1)')\n]));", "execution_result": [["0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3743, "question_en": "In PostGIS, how to construct two 2D point geometries (POINT(0 0) and POINT(1 1)) with exact coordinates, place them into an array, perform a collection operation, and finally conduct a unary spatial union?"}
