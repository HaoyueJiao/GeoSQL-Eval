{"id": 2, "function": "ST_Collect", "question": "把那两个充满数字的圆弧串在一起，然后告诉我它们合起来的样子。", "sql": "SELECT ST_AsText(\n    ST_Collect( 'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)',\n        'CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)' )\n);", "execution_result": [["MULTICURVE(CIRCULARSTRING(220268 150415,220227 150505,220227 150406),CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Join those two arcs full of numbers together, then tell me how they look combined.", "source": "original", "new_id": 11}
{"id": 1, "function": "ST_Collect", "question": "把那些点，像1 2和-2 3这样的，放一起，看看它们的文字样子是什么。", "sql": "SELECT ST_AsText( ST_Collect( ST_GeomFromText('POINT(1 2)'), ST_GeomFromText('POINT(-2 3)') ));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Put those dots, like 1 2 and -2 3, together and see what their text form looks like.", "source": "original", "new_id": 4}
{"id": 2, "function": "ST_Collect", "question": "把这两条弯曲的线串在一起，变成一个大的几何图形，看看它们的文本形状是什么。", "sql": "SELECT ST_AsText(\n    ST_Collect( 'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)',\n        'CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)' )\n);", "execution_result": [["MULTICURVE(CIRCULARSTRING(220268 150415,220227 150505,220227 150406),CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Join these two curved lines into one big geometric shape and see what their text form looks like.", "source": "original", "new_id": 9}
{"id": 1, "function": "ST_Collect", "question": "把坐标为1 2和-2 3的两个小点放在一起，看看它们整体的样子，用一种很常见的文本方式来表达。", "sql": "SELECT ST_AsText( ST_Collect( ST_GeomFromText('POINT(1 2)'), ST_GeomFromText('POINT(-2 3)') ));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the two little dots located at 1 2 and -2 3, put them together to see how they look as a whole, and express it in a common text format.", "source": "original", "new_id": 0}
{"id": 4, "function": "ST_Collect", "question": "把这两条线，像1 2到3 4，还有3 4到4 5，放在一起，然后看看它们的文本样子。", "sql": "SELECT ST_AsText(\n    ST_Collect(ARRAY[ ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)') ])\n) AS wktcollect;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Put these two lines, like from 1 2 to 3 4, and from 3 4 to 4 5, together, and then see their text form.", "source": "original", "new_id": 12}
{"id": 2, "function": "ST_Collect", "question": "把那些圆弧线上的点，比如(220268 150415)和(220227 150406)，混在一起，看看它们在WKT里怎么显示。", "sql": "SELECT ST_AsText(\n    ST_Collect( 'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)',\n        'CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)' )\n);", "execution_result": [["MULTICURVE(CIRCULARSTRING(220268 150415,220227 150505,220227 150406),CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Mix together the points on those arc lines, like (220268 150415) and (220227 150406), and see how they appear in WKT.", "source": "original", "new_id": 8}
{"id": 1, "function": "ST_Collect", "question": "有两个小点，一个在(1,2)那里，另一个在(-2,3)那儿，把它们放在一起，看看用某种文本格式会是什么样子。", "sql": "SELECT ST_AsText( ST_Collect( ST_GeomFromText('POINT(1 2)'), ST_GeomFromText('POINT(-2 3)') ));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are two little dots, one is at (1,2), and the other is at (-2,3). Put them together and see what they look like in some kind of text format.", "source": "original", "new_id": 2}
{"id": 1, "function": "ST_Collect", "question": "把这些小坐标点(1 2)和(-2 3)放在一起，看看它们的合并结果是什么，按照大家都能懂的文字格式来说。", "sql": "SELECT ST_AsText( ST_Collect( ST_GeomFromText('POINT(1 2)'), ST_GeomFromText('POINT(-2 3)') ));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Put these little coordinate points (1 2) and (-2 3) together and see what their merged result is, in a format everyone can understand.", "source": "original", "new_id": 5}
{"id": 1, "function": "ST_Collect", "question": "把那些1 2和-2 3的小点点合在一起，然后告诉我它们的标准文本样子。", "sql": "SELECT ST_AsText( ST_Collect( ST_GeomFromText('POINT(1 2)'), ST_GeomFromText('POINT(-2 3)') ));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine those little dots at 1 2 and -2 3, and then tell me their standard text form.", "source": "original", "new_id": 3}
{"id": 2, "function": "ST_Collect", "question": "把那些弯弯曲曲的线串起来，看看220268 150415,220227 150505,220227 150406和220227 150406,2220227 150407,220227 150406这些点会变成什么样的文字描述。", "sql": "SELECT ST_AsText(\n    ST_Collect( 'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)',\n        'CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)' )\n);", "execution_result": [["MULTICURVE(CIRCULARSTRING(220268 150415,220227 150505,220227 150406),CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Join those wavy lines and see what kind of text description comes from the points 220268 150415,220227 150505,220227 150406 and 220227 150406,2220227 150407,220227 150406.", "source": "original", "new_id": 7}
{"id": 4, "function": "ST_Collect", "question": "把那些点连接起来，像把1 2到3 4的线和3 4到4 5的线连成一体，然后看看它的文本形式是什么。", "sql": "SELECT ST_AsText(\n    ST_Collect(ARRAY[ ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)') ])\n) AS wktcollect;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those points, like joining the line from 1 2 to 3 4 with the line from 3 4 to 4 5, and then see what its text form looks like.", "source": "original", "new_id": 14}
{"id": 4, "function": "ST_Collect", "question": "把那些连接的线段，就像从(1, 2)到(3, 4)再到(4, 5)的，变成一个集合，然后告诉我它的字符串样子。", "sql": "SELECT ST_AsText(\n    ST_Collect(ARRAY[ ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)') ])\n) AS wktcollect;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those connecting lines, like from (1, 2) to (3, 4) and then to (4, 5), make them a collection, and then tell me its string appearance.", "source": "original", "new_id": 15}
{"id": 1, "function": "ST_Collect", "question": "把那些坐标是(1,2)和(-2,3)的小点凑在一起，然后说出它们合体后的样子。", "sql": "SELECT ST_AsText( ST_Collect( ST_GeomFromText('POINT(1 2)'), ST_GeomFromText('POINT(-2 3)') ));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Gather those little dots at coordinates (1,2) and (-2,3) together, and then describe how they look when combined.", "source": "original", "new_id": 1}
{"id": 2, "function": "ST_Collect", "question": "把这些弯弯的线段，像220268 150415和220227 150505这些点，跟另外一组220227 150406和2220227 150407之类的，放在一起，然后看看它们的整体形状是什么。", "sql": "SELECT ST_AsText(\n    ST_Collect( 'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)',\n        'CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)' )\n);", "execution_result": [["MULTICURVE(CIRCULARSTRING(220268 150415,220227 150505,220227 150406),CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take these curvy lines, like the points 220268 150415 and 220227 150505, and mix them with another set like 220227 150406 and 2220227 150407, then see what their overall shape looks like.", "source": "original", "new_id": 6}
{"id": 2, "function": "ST_Collect", "question": "把那两条曲线，第一条是220268 150415到220227 150505再到220227 150406，第二条是220227 150406到2220227 150407再回到220227 150406，放在一起，结果是啥样的文字描述？", "sql": "SELECT ST_AsText(\n    ST_Collect( 'CIRCULARSTRING(220268 150415,220227 150505,220227 150406)',\n        'CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)' )\n);", "execution_result": [["MULTICURVE(CIRCULARSTRING(220268 150415,220227 150505,220227 150406),CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What does the text look like if you put together those two curves, the first one going from 220268 150415 to 220227 150505 and then to 220227 150406, and the second one starting at 220227 150406, going to 2220227 150407, and back to 220227 150406?", "source": "original", "new_id": 10}
{"id": 5, "function": "ST_Collect", "question": "把那些在1 2 3和1 2 4位置的小点组合在一起，然后看看结果是什么样子。", "sql": "SELECT ST_AsEWKT( ST_Collect( ST_GeomFromEWKT('POINT(1 2 3)'), ST_GeomFromEWKT('POINT(1 2 4)') ) );", "execution_result": [["MULTIPOINT(1 2 3,1 2 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine those little dots at positions 1 2 3 and 1 2 4, and see what the result looks like.", "source": "original", "new_id": 18}
{"id": 5, "function": "ST_Collect", "question": "把那些在(1,2,3)和(1,2,4)位置的小点结合起来，然后给个特别的格式。", "sql": "SELECT ST_AsEWKT( ST_Collect( ST_GeomFromEWKT('POINT(1 2 3)'), ST_GeomFromEWKT('POINT(1 2 4)') ) );", "execution_result": [["MULTIPOINT(1 2 3,1 2 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine those little dots at positions (1,2,3) and (1,2,4), then provide a special format.", "source": "original", "new_id": 19}
{"id": 4, "function": "ST_Collect", "question": "把那些从(1 2)到(3 4)，还有从(3 4)到(4 5)的小线条合在一起，变成一个完整的形状，给我它的文本样子。", "sql": "SELECT ST_AsText(\n    ST_Collect(ARRAY[ ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)') ])\n) AS wktcollect;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine the little lines from (1 2) to (3 4), and from (3 4) to (4 5), into one whole shape, and give me its text form.", "source": "original", "new_id": 13}
{"id": 5, "function": "ST_Collect", "question": "如果你把那些地方，比如(1 2 3)和(1 2 4)，放在一起，结果会是什么样子的描述？", "sql": "SELECT ST_AsEWKT( ST_Collect( ST_GeomFromEWKT('POINT(1 2 3)'), ST_GeomFromEWKT('POINT(1 2 4)') ) );", "execution_result": [["MULTIPOINT(1 2 3,1 2 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What would the description look like if you put those places like (1 2 3) and (1 2 4) together?", "source": "original", "new_id": 22}
{"id": 6, "function": "ST_LineFromMultiPoint", "question": "把那些点群像连成一条3D线，然后用一种特殊格式来表达它。", "sql": "SELECT ST_AsEWKT( ST_LineFromMultiPoint('MULTIPOINT(1 2 3, 4 5 6, 7 8 9)') );", "execution_result": [["LINESTRING(1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those groups of points into a 3D line and express it in a special format.", "source": "original", "new_id": 28}
{"id": 5, "function": "ST_Collect", "question": "把坐标是(1 2 3)和(1 2 4)的小点结合起来，然后看看它们合在一起的样子是什么格式。", "sql": "SELECT ST_AsEWKT( ST_Collect( ST_GeomFromEWKT('POINT(1 2 3)'), ST_GeomFromEWKT('POINT(1 2 4)') ) );", "execution_result": [["MULTIPOINT(1 2 3,1 2 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine the little dots with coordinates (1 2 3) and (1 2 4), then see what their combined form looks like in that format.", "source": "original", "new_id": 20}
{"id": 4, "function": "ST_Collect", "question": "把那两条从(1 2)到(3 4)和(3 4)到(4 5)的线搞在一块，看看它们合在一起后是什么样子，用那些字母数字的形式。", "sql": "SELECT ST_AsText(\n    ST_Collect(ARRAY[ ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)') ])\n) AS wktcollect;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine those two lines from (1 2) to (3 4) and (3 4) to (4 5) together and see what they look like as letters and numbers.", "source": "original", "new_id": 17}
{"id": 6, "function": "ST_LineFromMultiPoint", "question": "把那些点，像1 2 3、4 5 6、7 8 9，变成一条线，然后用一种特别格式说出来。", "sql": "SELECT ST_AsEWKT( ST_LineFromMultiPoint('MULTIPOINT(1 2 3, 4 5 6, 7 8 9)') );", "execution_result": [["LINESTRING(1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those dots, like 1 2 3, 4 5 6, 7 8 9, turn them into a line, and then express it in a special format.", "source": "original", "new_id": 24}
{"id": 4, "function": "ST_Collect", "question": "把那两条线段，像是从(1, 2)到(3, 4)和从(3, 4)到(4, 5)，放在一起，然后给我它们合在一起后的样子是什么？", "sql": "SELECT ST_AsText(\n    ST_Collect(ARRAY[ ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)') ])\n) AS wktcollect;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What does it look like when you put together those two line segments, like from (1, 2) to (3, 4) and from (3, 4) to (4, 5)?", "source": "original", "new_id": 16}
{"id": 6, "function": "ST_LineFromMultiPoint", "question": "把那些三维的小点集合，比如像1 2 3这样的，变成一个三维的长线，然后用某种特别的格式显示出来。", "sql": "SELECT ST_AsEWKT( ST_LineFromMultiPoint('MULTIPOINT(1 2 3, 4 5 6, 7 8 9)') );", "execution_result": [["LINESTRING(1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those 3D little dots, like ones such as 1 2 3, into a 3D long line, and then display it in some special format.", "source": "original", "new_id": 29}
{"id": 6, "function": "ST_LineFromMultiPoint", "question": "把那些小点串起来，像连成一条线，看看它在EWKT格式里的样子，记得它有三维坐标，像1 2 3这些。", "sql": "SELECT ST_AsEWKT( ST_LineFromMultiPoint('MULTIPOINT(1 2 3, 4 5 6, 7 8 9)') );", "execution_result": [["LINESTRING(1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those dots and string them together like a line, and see what it looks like in EWKT format, remembering it has 3D coordinates like 1 2 3.", "source": "original", "new_id": 27}
{"id": 7, "function": "ST_MakeEnvelope", "question": "把从(10,10)到(11,11)的那个四边形，用一种常见的文字格式表达出来。", "sql": "SELECT ST_AsText( ST_MakeEnvelope(10, 10, 11, 11, 4326) );", "execution_result": [["POLYGON((10 10,10 11,11 11,11 10,10 10))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Express that box stretching from (10,10) to (11,11) in a common text format.", "source": "original", "new_id": 30}
{"id": 5, "function": "ST_Collect", "question": "给出那些点1 2 3和1 2 4合在一起后的长字符串样子。", "sql": "SELECT ST_AsEWKT( ST_Collect( ST_GeomFromEWKT('POINT(1 2 3)'), ST_GeomFromEWKT('POINT(1 2 4)') ) );", "execution_result": [["MULTIPOINT(1 2 3,1 2 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide the long string appearance of those points 1 2 3 and 1 2 4 after putting them together.", "source": "original", "new_id": 21}
{"id": 6, "function": "ST_LineFromMultiPoint", "question": "把那些三维的小点(1 2 3), (4 5 6), (7 8 9)连成一条线，然后用某种特殊的格式显示出来。", "sql": "SELECT ST_AsEWKT( ST_LineFromMultiPoint('MULTIPOINT(1 2 3, 4 5 6, 7 8 9)') );", "execution_result": [["LINESTRING(1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those 3D little dots (1 2 3), (4 5 6), (7 8 9) into a line and then show it in some special format.", "source": "original", "new_id": 26}
{"id": 6, "function": "ST_LineFromMultiPoint", "question": "把那几个点，像(1,2,3)、(4,5,6)、(7,8,9)这样的，连起来变成一条线，然后用某种特别的格式表示出来。", "sql": "SELECT ST_AsEWKT( ST_LineFromMultiPoint('MULTIPOINT(1 2 3, 4 5 6, 7 8 9)') );", "execution_result": [["LINESTRING(1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those points like (1,2,3), (4,5,6), (7,8,9) into a line, and then express it in some special format.", "source": "original", "new_id": 25}
{"id": 5, "function": "ST_Collect", "question": "怎么能把那两个三维点的坐标像1 2 3和1 2 4这样，变成一个字符串形式呢？", "sql": "SELECT ST_AsEWKT( ST_Collect( ST_GeomFromEWKT('POINT(1 2 3)'), ST_GeomFromEWKT('POINT(1 2 4)') ) );", "execution_result": [["MULTIPOINT(1 2 3,1 2 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How can those two 3D points with coordinates like 1 2 3 and 1 2 4 be turned into a string format?", "source": "original", "new_id": 23}
{"id": 7, "function": "ST_MakeEnvelope", "question": "给我看看那个从(10,10)到(11,11)的四边形的文字描述是什么样子的。", "sql": "SELECT ST_AsText( ST_MakeEnvelope(10, 10, 11, 11, 4326) );", "execution_result": [["POLYGON((10 10,10 11,11 11,11 10,10 10))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what the text description looks like for that four-sided shape going from (10,10) to (11,11).", "source": "original", "new_id": 33}
{"id": 7, "function": "ST_MakeEnvelope", "question": "请给我一个从左下角(10,10)到右上角(11,11)的框框，它用那些标准数字描述的样子。", "sql": "SELECT ST_AsText( ST_MakeEnvelope(10, 10, 11, 11, 4326) );", "execution_result": [["POLYGON((10 10,10 11,11 11,11 10,10 10))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please give me a box from the bottom-left (10,10) to the top-right (11,11) and how it looks using those standard numbers.", "source": "original", "new_id": 31}
{"id": 7, "function": "ST_MakeEnvelope", "question": "给我一个用(10,10)和(11,11)这两个点画出来的矩形框，用文字形式表达出来，坐标系统是4326。", "sql": "SELECT ST_AsText( ST_MakeEnvelope(10, 10, 11, 11, 4326) );", "execution_result": [["POLYGON((10 10,10 11,11 11,11 10,10 10))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a rectangle drawn using the points (10,10) and (11,11), expressed in text form, with coordinate system 4326.", "source": "original", "new_id": 32}
{"id": 7, "function": "ST_MakeEnvelope", "question": "能不能给我看看那些坐标在(10, 10)到(11, 11)之间形成的区域是什么样子？", "sql": "SELECT ST_AsText( ST_MakeEnvelope(10, 10, 11, 11, 4326) );", "execution_result": [["POLYGON((10 10,10 11,11 11,11 10,10 10))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show me what the area looks like formed by those coordinates between (10, 10) and (11, 11)?", "source": "original", "new_id": 34}
{"id": 8, "function": "ST_MakeLine", "question": "用小点1 2和小点3 4连起来画一条线，然后告诉我它的样子。", "sql": "SELECT ST_AsText( ST_MakeLine(ST_Point(1,2), ST_Point(3,4)) );", "execution_result": [["LINESTRING(1 2,3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect the little dots 1 2 and 3 4 to draw a line, then tell me what it looks like.", "source": "original", "new_id": 37}
{"id": 8, "function": "ST_MakeLine", "question": "把两个小点，像(1 2)和(3 4)这样的，连成一条线，然后用一种文本方式看看它。", "sql": "SELECT ST_AsText( ST_MakeLine(ST_Point(1,2), ST_Point(3,4)) );", "execution_result": [["LINESTRING(1 2,3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take two little dots, like (1 2) and (3 4), connect them into a line, and then view it in some text format.", "source": "original", "new_id": 38}
{"id": 8, "function": "ST_MakeLine", "question": "把那些在(1,2)和(3,4)位置的小点连起来，看看它们变成什么样的线，结果要是某种文字格式的哦。", "sql": "SELECT ST_AsText( ST_MakeLine(ST_Point(1,2), ST_Point(3,4)) );", "execution_result": [["LINESTRING(1 2,3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those little dots located at (1,2) and (3,4), and see what kind of line they form, but the result should be in some kind of text format.", "source": "original", "new_id": 36}
{"id": 8, "function": "ST_MakeLine", "question": "给我看看从1 2到3 4这两个小点之间的那根线的样子，用一种特别的文字格式。", "sql": "SELECT ST_AsText( ST_MakeLine(ST_Point(1,2), ST_Point(3,4)) );", "execution_result": [["LINESTRING(1 2,3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the appearance of the line between the little dots 1 2 and 3 4, using a special text format.", "source": "original", "new_id": 41}
{"id": 8, "function": "ST_MakeLine", "question": "把那两点(1,2)和(3,4)连起来的那条线，用一种可以看懂的方式说出来。", "sql": "SELECT ST_AsText( ST_MakeLine(ST_Point(1,2), ST_Point(3,4)) );", "execution_result": [["LINESTRING(1 2,3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Describe in an understandable way the line that links those two spots, (1,2) and (3,4).", "source": "original", "new_id": 39}
{"id": 8, "function": "ST_MakeLine", "question": "把那些1和2的点跟3和4的点连起来，看看它们变成了什么样子，像是线的样子，用一种特别的方式写出来。", "sql": "SELECT ST_AsText( ST_MakeLine(ST_Point(1,2), ST_Point(3,4)) );", "execution_result": [["LINESTRING(1 2,3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those points, 1, 2, and 3, 4, and see what they become, like a line, and write it out in a special way.", "source": "original", "new_id": 40}
{"id": 9, "function": "ST_MakeLine", "question": "如果你把这些三维的小点(1,2,3)和(3,4,5)连起来，你会得到什么样的字符串呢？", "sql": "SELECT ST_AsEWKT( ST_MakeLine(ST_MakePoint(1,2,3), ST_MakePoint(3,4,5) ));", "execution_result": [["LINESTRING(1 2 3,3 4 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What kind of string would you get if you connect these 3D little dots (1,2,3) and (3,4,5)?", "source": "original", "new_id": 42}
{"id": 9, "function": "ST_MakeLine", "question": "先把那些数字1,2,3和3,4,5变成小点，然后想办法连成一条线，最后看看它们长什么样子。", "sql": "SELECT ST_AsEWKT( ST_MakeLine(ST_MakePoint(1,2,3), ST_MakePoint(3,4,5) ));", "execution_result": [["LINESTRING(1 2 3,3 4 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "First, turn those numbers 1, 2, 3 and 3, 4, 5 into little dots, then figure out how to connect them into a line, and finally see what they look like.", "source": "original", "new_id": 43}
{"id": 9, "function": "ST_MakeLine", "question": "给我看看从(1,2,3)到(3,4,5)画的那条线的特别格式是什么？", "sql": "SELECT ST_AsEWKT( ST_MakeLine(ST_MakePoint(1,2,3), ST_MakePoint(3,4,5) ));", "execution_result": [["LINESTRING(1 2 3,3 4 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what the special format looks like for the line drawn from (1,2,3) to (3,4,5)?", "source": "original", "new_id": 45}
{"id": 7, "function": "ST_MakeEnvelope", "question": "给我一个用左下角是(10 10)和右上角是(11 11)的那些点构成的矩形的文字描述吧，咱们用那个常见的4326编号就行。", "sql": "SELECT ST_AsText( ST_MakeEnvelope(10, 10, 11, 11, 4326) );", "execution_result": [["POLYGON((10 10,10 11,11 11,11 10,10 10))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a text description of a rectangle made from those points with the bottom-left at (10 10) and top-right at (11 11), using that common 4326 number.", "source": "original", "new_id": 35}
{"id": 9, "function": "ST_MakeLine", "question": "把1 2 3这组数字和3 4 5这组凑成两个三维的小点，然后想象一条线连接它们，最后看看这条线的具体描述是什么。", "sql": "SELECT ST_AsEWKT( ST_MakeLine(ST_MakePoint(1,2,3), ST_MakePoint(3,4,5) ));", "execution_result": [["LINESTRING(1 2 3,3 4 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the numbers 1 2 3 and 3 4 5 to form two small 3D dots, then imagine a line connecting them, and finally see what the specific description of this line is.", "source": "original", "new_id": 44}
{"id": 9, "function": "ST_MakeLine", "question": "给我那些三维坐标(1,2,3)和(3,4,5)连接起来的线的特别文本，记得要有那个坐标系统的编号哦。", "sql": "SELECT ST_AsEWKT( ST_MakeLine(ST_MakePoint(1,2,3), ST_MakePoint(3,4,5) ));", "execution_result": [["LINESTRING(1 2 3,3 4 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me the special text for the line formed by connecting those 3D coordinates (1,2,3) and (3,4,5), and remember to include that coordinate system number.", "source": "original", "new_id": 46}
{"id": 10, "function": "ST_MakeLine", "question": "把这条从零到一的线和另一条从二到三的线连接起来，看看它们组合后变成了什么样子，用一种特殊的格式表示出来。", "sql": "SELECT ST_AsText( ST_MakeLine( 'LINESTRING(0 0, 1 1)', 'LINESTRING(2 2, 3 3)' ) );", "execution_result": [["LINESTRING(0 0,1 1,2 2,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect the line from zero to one with another from two to three, and see what they become together, shown in a special format.", "source": "original", "new_id": 48}
{"id": 9, "function": "ST_MakeLine", "question": "能不能告诉我那个从小点(1 2 3)到另一个小点(3 4 5)之间的线段，用某种格式来表示呢？", "sql": "SELECT ST_AsEWKT( ST_MakeLine(ST_MakePoint(1,2,3), ST_MakePoint(3,4,5) ));", "execution_result": [["LINESTRING(1 2 3,3 4 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you tell me how to represent the line segment from the little dot (1 2 3) to another little dot (3 4 5) in some kind of format?", "source": "original", "new_id": 47}
{"id": 10, "function": "ST_MakeLine", "question": "连接两条小线段(0,0)-(1,1)和(2,2)-(3,3)形成的新形状，用那种文本格式说出来。", "sql": "SELECT ST_AsText( ST_MakeLine( 'LINESTRING(0 0, 1 1)', 'LINESTRING(2 2, 3 3)' ) );", "execution_result": [["LINESTRING(0 0,1 1,2 2,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect the two little lines (0,0)-(1,1) and (2,2)-(3,3) to make a new shape, and say it in that text format.", "source": "original", "new_id": 49}
{"id": 10, "function": "ST_MakeLine", "question": "给我看看由这些坐标串起来的线的样子，坐标是(0 0, 1 1)和(2 2, 3 3)。", "sql": "SELECT ST_AsText( ST_MakeLine( 'LINESTRING(0 0, 1 1)', 'LINESTRING(2 2, 3 3)' ) );", "execution_result": [["LINESTRING(0 0,1 1,2 2,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what the line looks like when these coordinates are strung together, coordinates are (0 0, 1 1) and (2 2, 3 3).", "source": "original", "new_id": 51}
{"id": 11, "function": "ST_MakeLine", "question": "能不能给我看看由这些三维小点组成的线的特殊字符串？点在这儿：1,2,3，3,4,5，还有6,6,6。", "sql": "SELECT ST_AsEWKT( ST_MakeLine( ARRAY[ ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), ST_MakePoint(6,6,6) ] ));", "execution_result": [["LINESTRING(1 2 3,3 4 5,6 6 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show me the special string for the line made from these 3D little dots? The dots are here: 1,2,3, 3,4,5, and 6,6,6.", "source": "original", "new_id": 59}
{"id": 10, "function": "ST_MakeLine", "question": "给出把两条小线段，像从(0 0)到(1 1)和从(2 2)到(3 3)这样，连起来以后变成的形状的WKT样子。", "sql": "SELECT ST_AsText( ST_MakeLine( 'LINESTRING(0 0, 1 1)', 'LINESTRING(2 2, 3 3)' ) );", "execution_result": [["LINESTRING(0 0,1 1,2 2,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide the WKT appearance of the shape you get after linking together two little lines, like from (0 0) to (1 1) and from (2 2) to (3 3).", "source": "original", "new_id": 53}
{"id": 10, "function": "ST_MakeLine", "question": "把这些点连起来，像从(0 0)到(1 1)再到(2 2)然后到(3 3)，然后用一种特定的格式展示它。", "sql": "SELECT ST_AsText( ST_MakeLine( 'LINESTRING(0 0, 1 1)', 'LINESTRING(2 2, 3 3)' ) );", "execution_result": [["LINESTRING(0 0,1 1,2 2,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect these points, like from (0 0) to (1 1) then to (2 2) and finally to (3 3), and show it in a specific format.", "source": "original", "new_id": 50}
{"id": 11, "function": "ST_MakeLine", "question": "能不能告诉我一个像连接小点(1,2,3)、(3,4,5)、(6,6,6)的线的特别文本格式是什么样的？", "sql": "SELECT ST_AsEWKT( ST_MakeLine( ARRAY[ ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), ST_MakePoint(6,6,6) ] ));", "execution_result": [["LINESTRING(1 2 3,3 4 5,6 6 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me what the special text format looks like for a line connecting little dots like (1,2,3), (3,4,5), and (6,6,6)?", "source": "original", "new_id": 58}
{"id": 11, "function": "ST_MakeLine", "question": "把一些有趣的空间点，比如(1 2 3)、(3 4 5)和(6 6 6)，想象成一条线段，然后看看它的特别格式是什么。", "sql": "SELECT ST_AsEWKT( ST_MakeLine( ARRAY[ ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), ST_MakePoint(6,6,6) ] ));", "execution_result": [["LINESTRING(1 2 3,3 4 5,6 6 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine some interesting spatial dots like (1 2 3), (3 4 5), and (6 6 6) as a line segment, and see what its special format is.", "source": "original", "new_id": 56}
{"id": 11, "function": "ST_MakeLine", "question": "想象一下用三个位置：一个在(1,2,3)，另一个在(3,4,5)，还有一个在(6,6,6)，把它们连成一条线。然后，看看这条线的特别描述。", "sql": "SELECT ST_AsEWKT( ST_MakeLine( ARRAY[ ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), ST_MakePoint(6,6,6) ] ));", "execution_result": [["LINESTRING(1 2 3,3 4 5,6 6 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine using three positions: one at (1,2,3), another at (3,4,5), and one more at (6,6,6), connect them into a line. Then, check out the special description of this line.", "source": "original", "new_id": 55}
{"id": 12, "function": "ST_MakePoint", "question": "把那些数字-71.1043443253471和42.3150676015829变成一个在地图上的小圆点。", "sql": "SELECT ST_MakePoint(-71.1043443253471, 42.3150676015829);", "execution_result": [["0101000000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those numbers -71.1043443253471 and 42.3150676015829 into a little dot on the map.", "source": "original", "new_id": 60}
{"id": 12, "function": "ST_MakePoint", "question": "在这些数字-71.1043443253471和42.3150676015829那里弄一个小点，像是标记一样。", "sql": "SELECT ST_MakePoint(-71.1043443253471, 42.3150676015829);", "execution_result": [["0101000000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make a little dot at these numbers -71.1043443253471 and 42.3150676015829, like a marker.", "source": "original", "new_id": 61}
{"id": 10, "function": "ST_MakeLine", "question": "想象把两条小线段LINESTRING(0 0, 1 1)和LINESTRING(2 2, 3 3)接在一起，结果是什么样子的？", "sql": "SELECT ST_AsText( ST_MakeLine( 'LINESTRING(0 0, 1 1)', 'LINESTRING(2 2, 3 3)' ) );", "execution_result": [["LINESTRING(0 0,1 1,2 2,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine connecting two little lines, LINESTRING(0 0, 1 1) and LINESTRING(2 2, 3 3), what does the result look like?", "source": "original", "new_id": 52}
{"id": 12, "function": "ST_MakePoint", "question": "给我一个小点，横着是-71.1043443253471，竖着是42.3150676015829。", "sql": "SELECT ST_MakePoint(-71.1043443253471, 42.3150676015829);", "execution_result": [["0101000000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a little dot, going sideways at -71.1043443253471 and upwards at 42.3150676015829.", "source": "original", "new_id": 62}
{"id": 12, "function": "ST_MakePoint", "question": "给我一个用这些数字做成的点，像是在(-71.1043443253471, 42.3150676015829)那里。", "sql": "SELECT ST_MakePoint(-71.1043443253471, 42.3150676015829);", "execution_result": [["0101000000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a point made with these numbers, like over at (-71.1043443253471, 42.3150676015829).", "source": "original", "new_id": 63}
{"id": 11, "function": "ST_MakeLine", "question": "把那些点(1,2,3)、(3,4,5)、(6,6,6)连起来，看看它们组成的线长什么样子。", "sql": "SELECT ST_AsEWKT( ST_MakeLine( ARRAY[ ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), ST_MakePoint(6,6,6) ] ));", "execution_result": [["LINESTRING(1 2 3,3 4 5,6 6 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those dots (1,2,3), (3,4,5), and (6,6,6) and see what the line they form looks like.", "source": "original", "new_id": 57}
{"id": 13, "function": "ST_MakePoint", "question": "给我一个由这些数字-71.1043443253471和42.3150676015829组成的小点，放在那个全球通用的坐标系统里。", "sql": "SELECT ST_SetSRID(ST_MakePoint(-71.1043443253471, 42.3150676015829),4326);", "execution_result": [["0101000020E6100000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a little dot made from these numbers -71.1043443253471 and 42.3150676015829, placed in that globally common coordinate system.", "source": "original", "new_id": 66}
{"id": 11, "function": "ST_MakeLine", "question": "把那些三维的小点(1,2,3)、(3,4,5)和(6,6,6)连成一条线，然后看看它的特别字符串是啥样的。", "sql": "SELECT ST_AsEWKT( ST_MakeLine( ARRAY[ ST_MakePoint(1,2,3), ST_MakePoint(3,4,5), ST_MakePoint(6,6,6) ] ));", "execution_result": [["LINESTRING(1 2 3,3 4 5,6 6 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those 3D little dots (1,2,3), (3,4,5), and (6,6,6) into a line, then see what its special string looks like.", "source": "original", "new_id": 54}
{"id": 12, "function": "ST_MakePoint", "question": "给出那个点在二维空间里的文字形式，它的坐标是-71.1043443253471和42.3150676015829。", "sql": "SELECT ST_MakePoint(-71.1043443253471, 42.3150676015829);", "execution_result": [["0101000000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide the text form of that point in 2D space, with coordinates -71.1043443253471 and 42.3150676015829.", "source": "original", "new_id": 65}
{"id": 12, "function": "ST_MakePoint", "question": "请给我显示一个在(-71.1043443253471, 42.3150676015829)位置的小点的样子。", "sql": "SELECT ST_MakePoint(-71.1043443253471, 42.3150676015829);", "execution_result": [["0101000000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show me what a little dot looks like at the position (-71.1043443253471, 42.3150676015829)?", "source": "original", "new_id": 64}
{"id": 14, "function": "ST_MakePoint", "question": "有一个地方，坐标是1、2，还有1.5，能帮我描述一下这个点是什么样子吗？", "sql": "SELECT ST_MakePoint(1, 2, 1.5);", "execution_result": [["0101000080000000000000F03F0000000000000040000000000000F83F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a spot with coordinates 1, 2, and also 1.5, can you help describe what this point looks like?", "source": "original", "new_id": 72}
{"id": 14, "function": "ST_MakePoint", "question": "创建一个有点像坐标在(1, 2, 1.5)的小三维点的东西。", "sql": "SELECT ST_MakePoint(1, 2, 1.5);", "execution_result": [["0101000080000000000000F03F0000000000000040000000000000F83F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create something like a little 3D dot with coordinates at (1, 2, 1.5).", "source": "original", "new_id": 73}
{"id": 13, "function": "ST_MakePoint", "question": "找出一个小点，它在某个全球常用系统里，有这些数字：-71.1043443253471 和 42.3150676015829。", "sql": "SELECT ST_SetSRID(ST_MakePoint(-71.1043443253471, 42.3150676015829),4326);", "execution_result": [["0101000020E6100000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Identify a little dot in a commonly used global system, with these numbers: -71.1043443253471 and 42.3150676015829.", "source": "original", "new_id": 70}
{"id": 13, "function": "ST_MakePoint", "question": "给我一个坐标是(-71.1043443253471, 42.3150676015829)的点，使用那个全球通用的定位系统。", "sql": "SELECT ST_SetSRID(ST_MakePoint(-71.1043443253471, 42.3150676015829),4326);", "execution_result": [["0101000020E6100000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a point with coordinates (-71.1043443253471, 42.3150676015829) using that globally recognized location system.", "source": "original", "new_id": 69}
{"id": 13, "function": "ST_MakePoint", "question": "能帮我画一个在地球上，坐标是(-71.1043443253471, 42.3150676015829)的特别小的点吗？", "sql": "SELECT ST_SetSRID(ST_MakePoint(-71.1043443253471, 42.3150676015829),4326);", "execution_result": [["0101000020E6100000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you help me draw a very special little dot on the Earth at the coordinates (-71.1043443253471, 42.3150676015829)?", "source": "original", "new_id": 67}
{"id": 13, "function": "ST_MakePoint", "question": "能不能弄个小小的点儿，坐标是(-71.1043443253471, 42.3150676015829)，用那个全球通用的坐标方式来表示？", "sql": "SELECT ST_SetSRID(ST_MakePoint(-71.1043443253471, 42.3150676015829),4326);", "execution_result": [["0101000020E6100000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you create a tiny dot with coordinates (-71.1043443253471, 42.3150676015829) using that worldwide standard way of locating things?", "source": "original", "new_id": 68}
{"id": 13, "function": "ST_MakePoint", "question": "给我一个用地球上的某种坐标系来描述的小点，具体是(-71.1043443253471 42.3150676015829)这个位置的完整样子。", "sql": "SELECT ST_SetSRID(ST_MakePoint(-71.1043443253471, 42.3150676015829),4326);", "execution_result": [["0101000020E6100000E538D293ADC651C0F3699A2254284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me the complete form of a small dot described using some coordinate system on Earth, specifically at the position (-71.1043443253471 42.3150676015829).", "source": "original", "new_id": 71}
{"id": 14, "function": "ST_MakePoint", "question": "能给我一个小点的描述吗？这个点在三维空间里，像是某个地方在1, 2, 1.5的位置。", "sql": "SELECT ST_MakePoint(1, 2, 1.5);", "execution_result": [["0101000080000000000000F03F0000000000000040000000000000F83F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you give me a description of a tiny dot? This dot is in 3D space, like somewhere at the position 1, 2, 1.5.", "source": "original", "new_id": 74}
{"id": 14, "function": "ST_MakePoint", "question": "给我一个三维的小点吧，它的位置是1、2，还有1.5高。", "sql": "SELECT ST_MakePoint(1, 2, 1.5);", "execution_result": [["0101000080000000000000F03F0000000000000040000000000000F83F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a small 3D dot, its position is 1, 2, and 1.5 high.", "source": "original", "new_id": 75}
{"id": 14, "function": "ST_MakePoint", "question": "能不能告诉我一个样子像点的东西在三维空间中的描述，它的位置是1, 2, 1.5？", "sql": "SELECT ST_MakePoint(1, 2, 1.5);", "execution_result": [["0101000080000000000000F03F0000000000000040000000000000F83F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me a description of something that looks like a point in 3D space, with its position at 1, 2, 1.5?", "source": "original", "new_id": 77}
{"id": 15, "function": "ST_MakePoint", "question": "想知道那个在(1,2)位置上飘着的点，它的高度是多少呢？", "sql": "SELECT ST_Z(ST_MakePoint(1, 2,1.5));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What's the height of that point floating at (1,2)?", "source": "original", "new_id": 81}
{"id": 15, "function": "ST_MakePoint", "question": "看看那个有1、2、1.5数字的三维小点在垂直方向的高度是多少。", "sql": "SELECT ST_Z(ST_MakePoint(1, 2,1.5));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check what the height is in the vertical direction for that 3D little dot with numbers 1, 2, 1.5.", "source": "original", "new_id": 79}
{"id": 14, "function": "ST_MakePoint", "question": "给我那个有1，2和1.5这样数字的小点描述。", "sql": "SELECT ST_MakePoint(1, 2, 1.5);", "execution_result": [["0101000080000000000000F03F0000000000000040000000000000F83F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me the description of that little dot with numbers 1, 2, and 1.5.", "source": "original", "new_id": 76}
{"id": 15, "function": "ST_MakePoint", "question": "请给出在第三个维度上，坐标(1, 2, 1.5)的那个数字。", "sql": "SELECT ST_Z(ST_MakePoint(1, 2,1.5));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please provide that number for the coordinate (1, 2, 1.5) in the third dimension.", "source": "original", "new_id": 82}
{"id": 15, "function": "ST_MakePoint", "question": "构造一个包含1、2、1.5这些数字的小点，看看它的高度是多少。", "sql": "SELECT ST_Z(ST_MakePoint(1, 2,1.5));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create a small dot using the numbers 1, 2, and 1.5, and find out what its height is.", "source": "original", "new_id": 80}
{"id": 16, "function": "ST_MakePointM", "question": "从包含经度-71.104、纬度42.315和一个数字10的小点中，找到那个数字是什么。", "sql": "SELECT ST_M( ST_MakePointM(-71.104, 42.315, 10) );", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From the tiny dot with longitude -71.104, latitude 42.315, and a number 10, figure out what that number is.", "source": "original", "new_id": 84}
{"id": 15, "function": "ST_MakePoint", "question": "找出在(1,2,1.5)这个地方高高的那个数是啥？", "sql": "SELECT ST_Z(ST_MakePoint(1, 2,1.5));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What is the tall number at the place (1,2,1.5)?", "source": "original", "new_id": 78}
{"id": 15, "function": "ST_MakePoint", "question": "给我看看那个有点高度的点里边的第三个数，记得要是小数哦。", "sql": "SELECT ST_Z(ST_MakePoint(1, 2,1.5));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the third number from that point with a bit of height, and remember it should be a decimal.", "source": "original", "new_id": 83}
{"id": 16, "function": "ST_MakePointM", "question": "从一个有点奇妙的点中找出那个M值，点在X是-71.104，Y是42.315，M是10的地方。", "sql": "SELECT ST_M( ST_MakePointM(-71.104, 42.315, 10) );", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out that M value from a somewhat peculiar point where X is -71.104, Y is 42.315, and M is 10.", "source": "original", "new_id": 86}
{"id": 16, "function": "ST_MakePointM", "question": "找出那个有点像-71.104和42.315的坐标加上数字10的神秘数值。", "sql": "SELECT ST_M( ST_MakePointM(-71.104, 42.315, 10) );", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the mysterious number that comes with coordinates like -71.104 and 42.315, plus the number 10.", "source": "original", "new_id": 87}
{"id": 16, "function": "ST_MakePointM", "question": "从那包含坐标X=-71.104、Y=42.315还有一个神秘数字10的小点中，找出那个神秘数字是什么。", "sql": "SELECT ST_M( ST_MakePointM(-71.104, 42.315, 10) );", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From that little dot containing coordinates X=-71.104, Y=42.315, and a mysterious number 10, find out what the mysterious number is.", "source": "original", "new_id": 89}
{"id": 16, "function": "ST_MakePointM", "question": "那个有点奇怪的点，像是坐标-71.104和42.315，还有一个10的神秘数字，能告诉我那个神秘数字是多少吗？", "sql": "SELECT ST_M( ST_MakePointM(-71.104, 42.315, 10) );", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "That slightly odd point with coordinates like -71.104 and 42.315, and a mysterious number 10, can you tell me what that mysterious number is?", "source": "original", "new_id": 88}
{"id": 17, "function": "ST_MakePointM", "question": "把那个有点像(-71.104, 42.315)和10组合起来的小点，用一种叫4326的方式表达出来。", "sql": "SELECT ST_AsEWKT( ST_SetSRID( ST_MakePointM(-71.104, 42.315, 10), 4326));", "execution_result": [["SRID=4326;POINTM(-71.104 42.315 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Express that little combination of (-71.104, 42.315) and 10 in a way called 4326.", "source": "original", "new_id": 91}
{"id": 17, "function": "ST_MakePointM", "question": "把那个有M值的小点(-71.104 42.315 10)放在一个特定的坐标系里，然后看看它的结果是什么。", "sql": "SELECT ST_AsEWKT( ST_SetSRID( ST_MakePointM(-71.104, 42.315, 10), 4326));", "execution_result": [["SRID=4326;POINTM(-71.104 42.315 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Place that little point with an M value of (-71.104 42.315 10) in a specific coordinate system and see what the result looks like.", "source": "original", "new_id": 92}
{"id": 17, "function": "ST_MakePointM", "question": "想象一下一个在-71.104, 42.315位置的三维小点，带上10的值，看看它在4326这个系统下的样子。", "sql": "SELECT ST_AsEWKT( ST_SetSRID( ST_MakePointM(-71.104, 42.315, 10), 4326));", "execution_result": [["SRID=4326;POINTM(-71.104 42.315 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a little 3D spot at -71.104, 42.315 with a value of 10 and see how it looks in the 4326 system.", "source": "original", "new_id": 90}
{"id": 16, "function": "ST_MakePointM", "question": "找到那个坐标是(-71.104, 42.315)，还有额外标记为10的点，看看它的特别值是什么。", "sql": "SELECT ST_M( ST_MakePointM(-71.104, 42.315, 10) );", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the point with coordinates (-71.104, 42.315) and an extra mark of 10, and see what its special value is.", "source": "original", "new_id": 85}
{"id": 18, "function": "ST_MakePointM", "question": "把这些数字组合成一个包含额外信息的点，看看能得到什么样的字符串。", "sql": "SELECT ST_AsEWKT( ST_MakePointM(-71.1043443253471, 42.3150676015829, 10) );", "execution_result": [["POINTM(-71.1043443253471 42.3150676015829 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine these numbers into a point with extra information and see what kind of string you get.", "source": "original", "new_id": 97}
{"id": 17, "function": "ST_MakePointM", "question": "能不能把那个在4326参考系下的点弄成一个特别的字符串？这个点有个M值，坐标是(-71.104, 42.315, 10)。", "sql": "SELECT ST_AsEWKT( ST_SetSRID( ST_MakePointM(-71.104, 42.315, 10), 4326));", "execution_result": [["SRID=4326;POINTM(-71.104 42.315 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you turn that point in the 4326 reference system into a special string? This point has an M value, and its coordinates are (-71.104, 42.315, 10).", "source": "original", "new_id": 94}
{"id": 17, "function": "ST_MakePointM", "question": "请给出一个带有数字标识4326的点，包含坐标-71.104, 42.315和额外的10值，它的完整字符串是什么样的？", "sql": "SELECT ST_AsEWKT( ST_SetSRID( ST_MakePointM(-71.104, 42.315, 10), 4326));", "execution_result": [["SRID=4326;POINTM(-71.104 42.315 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you provide the complete string for a point with identifier 4326, including coordinates -71.104, 42.315, and an extra value of 10?", "source": "original", "new_id": 93}
{"id": 18, "function": "ST_MakePointM", "question": "把那个有三个数字的点的样子写出来，数字是-71.1043443253471, 42.3150676015829，还有10。", "sql": "SELECT ST_AsEWKT( ST_MakePointM(-71.1043443253471, 42.3150676015829, 10) );", "execution_result": [["POINTM(-71.1043443253471 42.3150676015829 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Write out the appearance of that point with three numbers: -71.1043443253471, 42.3150676015829, and also 10.", "source": "original", "new_id": 99}
{"id": 19, "function": "ST_MakePolygon", "question": "用那条从75 29到77 29绕一圈回到起点的线，看看能形成什么样的封闭形状。", "sql": "SELECT ST_MakePolygon( ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)'));", "execution_result": [["010300000001000000040000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Use the line that goes from 75 29 to 77 29 and back to the start, and see what kind of closed shape it forms.", "source": "original", "new_id": 102}
{"id": 18, "function": "ST_MakePointM", "question": "如果你有一个点，它在水平位置-71.1043443253471，垂直位置42.3150676015829，并且有一个额外的10的标记，怎么用特别的方式描述它呢？", "sql": "SELECT ST_AsEWKT( ST_MakePointM(-71.1043443253471, 42.3150676015829, 10) );", "execution_result": [["POINTM(-71.1043443253471 42.3150676015829 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you have a point located at -71.1043443253471 horizontally and 42.3150676015829 vertically, with an extra mark of 10, how would you describe it in a special way?", "source": "original", "new_id": 96}
{"id": 17, "function": "ST_MakePointM", "question": "能不能给我一个包含M值的三维小点的字符串，那个点在-71.104, 42.315, 10这个地方，并且用4326这种方式来表示。", "sql": "SELECT ST_AsEWKT( ST_SetSRID( ST_MakePointM(-71.104, 42.315, 10), 4326));", "execution_result": [["SRID=4326;POINTM(-71.104 42.315 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you give me a string for a 3D little dot with an M value, located at -71.104, 42.315, 10, and shown in the 4326 way?", "source": "original", "new_id": 95}
{"id": 19, "function": "ST_MakePolygon", "question": "把这些点(75 29, 77 29, 77 29, 75 29)连成一个封闭的形状，会是什么样子？", "sql": "SELECT ST_MakePolygon( ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)'));", "execution_result": [["010300000001000000040000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What would it look like if you connect these points (75 29, 77 29, 77 29, 75 29) into a closed shape?", "source": "original", "new_id": 103}
{"id": 18, "function": "ST_MakePointM", "question": "有一个点，它在水平位置上是-71.1043443253471，垂直位置上是42.3150676015829，还有个神秘数值是10，能不能把这个点变成某种特别格式的文字？", "sql": "SELECT ST_AsEWKT( ST_MakePointM(-71.1043443253471, 42.3150676015829, 10) );", "execution_result": [["POINTM(-71.1043443253471 42.3150676015829 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a point located horizontally at -71.1043443253471 and vertically at 42.3150676015829, with a mysterious value of 10; can you turn this point into some special format text?", "source": "original", "new_id": 98}
{"id": 18, "function": "ST_MakePointM", "question": "能不能用一种包含额外信息的文本方式描述一个三维的小点，这个点在-71.1043443253471和42.3150676015829的位置，还带着一个10的数字？", "sql": "SELECT ST_AsEWKT( ST_MakePointM(-71.1043443253471, 42.3150676015829, 10) );", "execution_result": [["POINTM(-71.1043443253471 42.3150676015829 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you describe a three-dimensional little dot in a text format that includes extra information, located at -71.1043443253471 and 42.3150676015829, with an additional number 10?", "source": "original", "new_id": 100}
{"id": 19, "function": "ST_MakePolygon", "question": "用那些点(75 29,77 29,77 29,75 29)画成一个封闭的形状，然后告诉我它是什么。", "sql": "SELECT ST_MakePolygon( ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)'));", "execution_result": [["010300000001000000040000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a closed shape using those points (75 29, 77 29, 77 29, 75 29), then tell me what it is.", "source": "original", "new_id": 106}
{"id": 18, "function": "ST_MakePointM", "question": "生成一个奇怪的字符串，包含一个带有额外信息的点，其中横坐标是-71.1043443253471，纵坐标是42.3150676015829，还有一个神秘的10。", "sql": "SELECT ST_AsEWKT( ST_MakePointM(-71.1043443253471, 42.3150676015829, 10) );", "execution_result": [["POINTM(-71.1043443253471 42.3150676015829 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create a peculiar string featuring a point with extra info, where the horizontal coordinate is -71.1043443253471, vertical coordinate is 42.3150676015829, and there's a mysterious 10.", "source": "original", "new_id": 101}
{"id": 19, "function": "ST_MakePolygon", "question": "有一条75 29到77 29再回到起点的线，想象它变成一个完整的形状，你能告诉我它的样子吗？", "sql": "SELECT ST_MakePolygon( ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)'));", "execution_result": [["010300000001000000040000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a line from 75 29 to 77 29 and back to the start, imagine it turning into a complete shape, can you tell me what it looks like?", "source": "original", "new_id": 104}
{"id": 19, "function": "ST_MakePolygon", "question": "把那些位于(75 29)到(77 29)之间的连接点变成一个完整的围起来的形状，会是什么？", "sql": "SELECT ST_MakePolygon( ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)'));", "execution_result": [["010300000001000000040000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What would it look like if you turn those connecting points between (75 29) and (77 29) into a complete enclosed shape?", "source": "original", "new_id": 105}
{"id": 19, "function": "ST_MakePolygon", "question": "你能给我一种文字格式的图形吗？它是由这些坐标点组成的闭合形状：75 29, 77 29, 77 29, 75 29。", "sql": "SELECT ST_MakePolygon( ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)'));", "execution_result": [["010300000001000000040000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you give me a text format of a shape? It's a closed form made from these coordinates: 75 29, 77 29, 77 29, 75 29.", "source": "original", "new_id": 107}
{"id": 20, "function": "ST_MakePolygon", "question": "用这些坐标点来画一个能把它们都包围起来的形状，结果要带上那些数字，用一种特别的格式呈现出来。", "sql": "SELECT ST_AsEWKT( ST_MakePolygon( 'LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)'));", "execution_result": [["POLYGON((75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Use these coordinate points to draw a shape that surrounds them all, and present the result with those numbers in a special format.", "source": "original", "new_id": 108}
{"id": 20, "function": "ST_MakePolygon", "question": "用那些坐标点，像75.15 29.53 1, 77 29 1这些，把它们围成一个完整的图形，然后看看它的扩展格式是什么样的。", "sql": "SELECT ST_AsEWKT( ST_MakePolygon( 'LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)'));", "execution_result": [["POLYGON((75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Use those coordinate points, like 75.15 29.53 1, 77 29 1, to surround them into a complete shape, then see what its extended format looks like.", "source": "original", "new_id": 110}
{"id": 20, "function": "ST_MakePolygon", "question": "把那些坐标点(75.15 29.53 1)、(77 29 1)、(77.6 29.5 1)、(75.15 29.53 1)围成一个完整的形状，然后给我它的EWKT格式吧。", "sql": "SELECT ST_AsEWKT( ST_MakePolygon( 'LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)'));", "execution_result": [["POLYGON((75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Form a complete shape using the points (75.15 29.53 1), (77 29 1), (77.6 29.5 1), (75.15 29.53 1), and then provide it in EWKT format.", "source": "original", "new_id": 109}
{"id": 20, "function": "ST_MakePolygon", "question": "给我用那些点(75.15 29.53 1, 77 29 1, 77.6 29.5 1, 75.15 29.53 1)围成的形状的特别字符串，记得包括高高的那个值。", "sql": "SELECT ST_AsEWKT( ST_MakePolygon( 'LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)'));", "execution_result": [["POLYGON((75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me the special string for the shape made by those points (75.15 29.53 1, 77 29 1, 77.6 29.5 1, 75.15 29.53 1), and remember to include the tall value.", "source": "original", "new_id": 111}
{"id": 22, "function": "ST_MakePolygon", "question": "把这些点和它们的数字连起来形成一个完整的形状，并告诉我它的结果是什么样子。", "sql": "SELECT ST_AsEWKT(ST_MakePolygon('LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)'));", "execution_result": [["POLYGONM((75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect these points and their numbers to form a complete shape, and tell me what the result looks like.", "source": "original", "new_id": 120}
{"id": 20, "function": "ST_MakePolygon", "question": "给出一个形状的描述，它由一串坐标构成，像是75.15 29.53 1到77 29 1，又回到75.15 29.53 1，所有点的高度都是1。", "sql": "SELECT ST_AsEWKT( ST_MakePolygon( 'LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)'));", "execution_result": [["POLYGON((75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide a description of a shape formed by a series of coordinates, like from 75.15 29.53 1 to 77 29 1, and back to 75.15 29.53 1, with all points having a height of 1.", "source": "original", "new_id": 112}
{"id": 20, "function": "ST_MakePolygon", "question": "能不能用一种特别格式来描述一下那些在75.15 29.53 1到77.6 29.5 1之间绕了一圈的小点形成的形状呢？要记得加上那个第三个数字哦。", "sql": "SELECT ST_AsEWKT( ST_MakePolygon( 'LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)'));", "execution_result": [["POLYGON((75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you describe in a special format the shape formed by those little dots going around from 75.15 29.53 1 to 77.6 29.5 1? Remember to include that third number.", "source": "original", "new_id": 113}
{"id": 22, "function": "ST_MakePolygon", "question": "用那些带有M值的小点连起来，形成一个闭合的图形，结果是那些坐标点(75.15 29.53 1, 77 29 1, 77.6 29.5 2, 75.15 29.53 2)的特别字符串是什么？", "sql": "SELECT ST_AsEWKT(ST_MakePolygon('LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)'));", "execution_result": [["POLYGONM((75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "By connecting those little points with M-values into a closed shape, what is the special string for those coordinates (75.15 29.53 1, 77 29 1, 77.6 29.5 2, 75.15 29.53 2)?", "source": "original", "new_id": 121}
{"id": 22, "function": "ST_MakePolygon", "question": "把那些点连起来形成一个闭合的形状，围绕这些地点：75.15经度和29.53纬度开始，穿过77经度和29纬度，再到77.6经度和29.5纬度，然后回到起点，但最后有个小变化。把这个形状用一种特别的表达方式展示出来。", "sql": "SELECT ST_AsEWKT(ST_MakePolygon('LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)'));", "execution_result": [["POLYGONM((75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Join those coordinates to form a closed shape around these places: starting at longitude 75.15 and latitude 29.53, passing through longitude 77 and latitude 29, then to longitude 77.6 and latitude 29.5, and finally returning to the start with a slight change. Show this shape in a special format.", "source": "original", "new_id": 122}
{"id": 21, "function": "ST_MakePolygon", "question": "想象一个大圆圈，它是由一个小点 POINT(10 10) 扩大成的，先膨胀成一个大约 10 长的形状，再用相同的长度让它更大。然后有两个小洞，第一个是把刚才那个大圈稍微移到右上方一点，第二个是从另一个小点 POINT(20 20) 变出来的小圈圈。把这些拼成一个完整的带洞洞形状。", "sql": "SELECT ST_MakePolygon( ST_ExteriorRing( ST_Buffer(ring.line,10)), ARRAY[ ST_Translate(ring.line, 1, 1), ST_ExteriorRing(ST_Buffer(ST_Point(20,20),1)) ] ) \nFROM (SELECT ST_ExteriorRing( ST_Buffer(ST_Point(10,10),10,10)) AS line ) AS ring;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a big circle that starts from a small dot at POINT(10 10), first expanding into a shape about 10 in size, and then making it even bigger with the same length. Then there are two little holes: the first is by slightly moving the big circle to the upper right, and the second is a small ring coming from another small dot at POINT(20 20). Put these together into a complete shape with holes.", "source": "original", "new_id": 114}
{"id": 21, "function": "ST_MakePolygon", "question": "想象一下，有个形状是围绕点 (10,10) 稍微膨胀了一些，经过两次膨胀后，它的外边界形成了一个大的轮廓。然后，想象两个内部空间，一个是把最初的边界往右上角偏移一点点，另一个是围绕着点 (20,20) 轻轻画个小圆圈。把这些都放在一起，形成了一个有两个小洞的完整形状。", "sql": "SELECT ST_MakePolygon( ST_ExteriorRing( ST_Buffer(ring.line,10)), ARRAY[ ST_Translate(ring.line, 1, 1), ST_ExteriorRing(ST_Buffer(ST_Point(20,20),1)) ] ) \nFROM (SELECT ST_ExteriorRing( ST_Buffer(ST_Point(10,10),10,10)) AS line ) AS ring;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a shape that puffs up a bit around the point (10,10), and after two rounds of puffing, its outer boundary forms a large outline. Then, picture two inner spaces: one is slightly shifted to the upper right from the initial boundary, and the other is like drawing a small circle around the point (20,20). Put these together to form a complete shape with two small holes.", "source": "original", "new_id": 115}
{"id": 21, "function": "ST_MakePolygon", "question": "想象一个奇妙的形状，有一个外边界和两个小洞。这个外边界是从一个神奇的点开始，它在 (10,10) 的地方，先变胖一点，半径和段数都是 10，然后又变胖 10 单位。至于两个小洞，第一个是从外环稍稍往右上移动 1 单位得到的，而第二个则是从另一个点开始，这个点在 (20,20)，只变胖 1 单位。最后，所有的东西都组合成一个完整的带洞形状。", "sql": "SELECT ST_MakePolygon( ST_ExteriorRing( ST_Buffer(ring.line,10)), ARRAY[ ST_Translate(ring.line, 1, 1), ST_ExteriorRing(ST_Buffer(ST_Point(20,20),1)) ] ) \nFROM (SELECT ST_ExteriorRing( ST_Buffer(ST_Point(10,10),10,10)) AS line ) AS ring;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a curious shape with one outer boundary and two little holes. The outer boundary starts from a magical point at (10,10), first growing a bit fatter with both radius and segments set to 10, then puffing up by another 10 units. As for the two holes, the first is created by slightly shifting the outer ring 1 unit to the upper right, and the second starts from another point at (20,20), only growing by 1 unit. Finally, everything is combined into a complete shape with holes.", "source": "original", "new_id": 117}
{"id": 21, "function": "ST_MakePolygon", "question": "想象一个有点复杂的形状，外面那圈是从点 POINT(10 10)开始，用一个10的范围包起来，之后再扩大10的距离。然后里面有两个小圈，第一个是从初始圈稍微移开一点，沿着 X 和 Y 各移动1单位；第二个是从点 POINT(20 20)开始，用一个小范围包起来得到。最后，把这些圈圈组合成一个多边形，有两个小孔在里面。", "sql": "SELECT ST_MakePolygon( ST_ExteriorRing( ST_Buffer(ring.line,10)), ARRAY[ ST_Translate(ring.line, 1, 1), ST_ExteriorRing(ST_Buffer(ST_Point(20,20),1)) ] ) \nFROM (SELECT ST_ExteriorRing( ST_Buffer(ST_Point(10,10),10,10)) AS line ) AS ring;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a somewhat complicated shape where the outer loop starts from the point POINT(10 10), wrapped with a range of 10, and then expanded by a distance of 10 again. Inside, there are two smaller loops: the first one slightly moved from the initial loop, shifting 1 unit along both X and Y; the second starts from the point POINT(20 20), wrapped with a small range. Finally, these loops are combined into a polygon with two small holes inside.", "source": "original", "new_id": 116}
{"id": 21, "function": "ST_MakePolygon", "question": "你能不能画出一个有一个外面边界和两个小洞的形状呢？外面的边界是从那个点(10 10)开始，先画一个半径10的小圆，再把这个圈再扩大10，得到一个新的边界。两个小洞，一个是把刚才的圈往右下移了一点，另一个是从(20 20)点画一个小小的圈得到的。把这些拼起来就行了。", "sql": "SELECT ST_MakePolygon( ST_ExteriorRing( ST_Buffer(ring.line,10)), ARRAY[ ST_Translate(ring.line, 1, 1), ST_ExteriorRing(ST_Buffer(ST_Point(20,20),1)) ] ) \nFROM (SELECT ST_ExteriorRing( ST_Buffer(ST_Point(10,10),10,10)) AS line ) AS ring;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you draw a shape with one outer boundary and two little holes? The outer boundary starts at the point (10 10), first making a small circle with radius 10, then expanding this circle by another 10 to get a new boundary. The two little holes are: one is a slight move down-right of the previous circle, and the other comes from a tiny circle at point (20 20). Just piece these together.", "source": "original", "new_id": 119}
{"id": 23, "function": "ST_MakePolygon", "question": "把从75到29再到77的那些点连起来，最后用起始点圈成一个封闭的形状。", "sql": "SELECT ST_MakePolygon( ST_AddPoint(foo.open_line, ST_StartPoint(foo.open_line)) ) \nFROM ( SELECT ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)') AS open_line) AS foo;", "execution_result": [["010300000001000000050000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those points starting from 75 to 29 then to 77, and finally loop it back to the starting point to form a closed shape.", "source": "original", "new_id": 126}
{"id": 23, "function": "ST_MakePolygon", "question": "把那些坐标连起来，形成一个闭合的形状，看看它会变成什么样子。", "sql": "SELECT ST_MakePolygon( ST_AddPoint(foo.open_line, ST_StartPoint(foo.open_line)) ) \nFROM ( SELECT ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)') AS open_line) AS foo;", "execution_result": [["010300000001000000050000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those coordinates to form a closed shape and see what it turns into.", "source": "original", "new_id": 129}
{"id": 22, "function": "ST_MakePolygon", "question": "用一种特定的文本格式来描述一个由这些点连接成闭合线的形状，点的位置和数字是75.15 29.53 1, 77 29 1, 77.6 29.5 2, 75.15 29.53 2。", "sql": "SELECT ST_AsEWKT(ST_MakePolygon('LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)'));", "execution_result": [["POLYGONM((75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Use a specific text format to describe a shape formed by connecting these points into a closed line, with point positions and numbers being 75.15 29.53 1, 77 29 1, 77.6 29.5 2, 75.15 29.53 2.", "source": "original", "new_id": 124}
{"id": 23, "function": "ST_MakePolygon", "question": "把那些坐标的线弄成一个封闭的形状，75 29,77 29,77 29,75 29都要连起来，最后变成一个完整的区域。", "sql": "SELECT ST_MakePolygon( ST_AddPoint(foo.open_line, ST_StartPoint(foo.open_line)) ) \nFROM ( SELECT ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)') AS open_line) AS foo;", "execution_result": [["010300000001000000050000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make a closed shape from those coordinates, connecting 75 29, 77 29, 77 29, 75 29, to finally form a complete area.", "source": "original", "new_id": 127}
{"id": 23, "function": "ST_MakePolygon", "question": "把那些坐标点变成一个开放的线段，然后再把开头的那个点加到末尾，最后得到一个完整的形状。", "sql": "SELECT ST_MakePolygon( ST_AddPoint(foo.open_line, ST_StartPoint(foo.open_line)) ) \nFROM ( SELECT ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)') AS open_line) AS foo;", "execution_result": [["010300000001000000050000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinates into an open line, then add the starting point to the end, and finally get a complete shape.", "source": "original", "new_id": 128}
{"id": 21, "function": "ST_MakePolygon", "question": "能不能做一个带两个小洞的面状图形？外边界是从点 (10 10) 开始，先弄一个半径 10 的范围，然后再扩展 10 的距离，最后只要最外层那部分。至于里面的两个洞，一个是把最初的外圈往右下方向移 1 单位形成的，另一个是从点 (20 20) 开始弄一个半径为 1 的小范围中最外圈来的。把这些组合起来就行了。", "sql": "SELECT ST_MakePolygon( ST_ExteriorRing( ST_Buffer(ring.line,10)), ARRAY[ ST_Translate(ring.line, 1, 1), ST_ExteriorRing(ST_Buffer(ST_Point(20,20),1)) ] ) \nFROM (SELECT ST_ExteriorRing( ST_Buffer(ST_Point(10,10),10,10)) AS line ) AS ring;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you make a surface-like shape with two small holes? The outer boundary starts from the point (10 10), first making a range with a radius of 10, then expanding it by 10 more, and finally keeping only the outermost part. As for the two holes inside, one is formed by shifting the initial outer ring 1 unit to the lower right, and the other comes from the outermost ring of a small range with a radius of 1 starting at the point (20 20). Just put these together.", "source": "original", "new_id": 118}
{"id": 22, "function": "ST_MakePolygon", "question": "能不能把那条带有M值的线，像这样闭合起来：75.15 29.53 1, 77 29 1, 77.6 29.5 2, 75.15 29.53 2，然后告诉我生成的那个封闭图形的EWKT格式是什么？", "sql": "SELECT ST_AsEWKT(ST_MakePolygon('LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)'));", "execution_result": [["POLYGONM((75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you take that line with M-values, close it up like this: 75.15 29.53 1, 77 29 1, 77.6 29.5 2, 75.15 29.53 2, and then tell me the EWKT format of the resulting closed shape?", "source": "original", "new_id": 123}
{"id": 23, "function": "ST_MakePolygon", "question": "把那条线从75 29出发，经过77 29再回到起点，变成一个围起来的形状，最后告诉我这个形状。", "sql": "SELECT ST_MakePolygon( ST_AddPoint(foo.open_line, ST_StartPoint(foo.open_line)) ) \nFROM ( SELECT ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)') AS open_line) AS foo;", "execution_result": [["010300000001000000050000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that line starting from 75 29, passing through 77 29 and back to the start, turn it into a closed shape, and finally tell me this shape.", "source": "original", "new_id": 130}
{"id": 23, "function": "ST_MakePolygon", "question": "把那个由75 29到77 29再回到75 29的小线，用一种方法让它成为一个封闭的样子，然后告诉我这个形状是什么。", "sql": "SELECT ST_MakePolygon( ST_AddPoint(foo.open_line, ST_StartPoint(foo.open_line)) ) \nFROM ( SELECT ST_GeomFromText('LINESTRING(75 29,77 29,77 29, 75 29)') AS open_line) AS foo;", "execution_result": [["010300000001000000050000000000000000C052400000000000003D4000000000004053400000000000003D4000000000004053400000000000003D400000000000C052400000000000003D400000000000C052400000000000003D40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little line going from 75 29 to 77 29 and back to 75 29, use a method to make it closed like a shape, then tell me what this shape is.", "source": "original", "new_id": 131}
{"id": 24, "function": "ST_Point", "question": "用这些数字(-71.104, 42.315)画个位置，然后给它标上4326的标签。", "sql": "SELECT ST_SetSRID( ST_Point( -71.104, 42.315), 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a spot using these numbers (-71.104, 42.315) and then tag it with 4326.", "source": "original", "new_id": 133}
{"id": 24, "function": "ST_Point", "question": "画一个小点在这些坐标上：(-71.104, 42.315)，并给它一个特别的数字4326。", "sql": "SELECT ST_SetSRID( ST_Point( -71.104, 42.315), 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a little dot at these coordinates: (-71.104, 42.315), and give it a special number 4326.", "source": "original", "new_id": 134}
{"id": 24, "function": "ST_Point", "question": "给那个点(-71.104,42.315)套上一个全球定位的外壳，让它跟地球的标准坐标系对齐。", "sql": "SELECT ST_SetSRID( ST_Point( -71.104, 42.315), 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Wrap the point (-71.104, 42.315) with a global positioning shell to align it with the Earth's standard coordinate system.", "source": "original", "new_id": 135}
{"id": 24, "function": "ST_Point", "question": "找出那个坐标是(-71.104,42.315)的点，用世界常用的坐标系表示。", "sql": "SELECT ST_SetSRID( ST_Point( -71.104, 42.315), 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the point with coordinates (-71.104,42.315) using a commonly used global coordinate system.", "source": "original", "new_id": 136}
{"id": 25, "function": "ST_Point", "question": "给个地方在经度-71.104和纬度42.315的那种点，反正是用某种标准来表示的。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give a spot at longitude -71.104 and latitude 42.315, using some kind of standard representation.", "source": "original", "new_id": 138}
{"id": 24, "function": "ST_Point", "question": "弄一个在-71.104和42.315那儿的小点，记得用4326来标识它。", "sql": "SELECT ST_SetSRID( ST_Point( -71.104, 42.315), 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create a little dot at -71.104 and 42.315, and remember to use 4326 to identify it.", "source": "original", "new_id": 132}
{"id": 22, "function": "ST_MakePolygon", "question": "把一条带有M值的小线圈，像这样：75.15 29.53 1, 77 29 1, 77.6 29.5 2, 75.15 29.53 2，变成一个表示区域的字符串，要是EWKT格式的。", "sql": "SELECT ST_AsEWKT(ST_MakePolygon('LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2)'));", "execution_result": [["POLYGONM((75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a little loop with M-values, like this: 75.15 29.53 1, 77 29 1, 77.6 29.5 2, 75.15 29.53 2, and turn it into a string that represents an area, in EWKT format.", "source": "original", "new_id": 125}
{"id": 25, "function": "ST_Point", "question": "创建一个小坐标，包含-71.104和42.315这两个数字，用一种常见的地图方式表达出来。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make a little coordinate using the numbers -71.104 and 42.315, expressed in a common map style.", "source": "original", "new_id": 140}
{"id": 24, "function": "ST_Point", "question": "帮我弄一个在某个系统里有编号4326的简单小点，坐标是(-71.104, 42.315)。", "sql": "SELECT ST_SetSRID( ST_Point( -71.104, 42.315), 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Help me create a simple little dot with some system number 4326, coordinates are (-71.104, 42.315).", "source": "original", "new_id": 137}
{"id": 25, "function": "ST_Point", "question": "想象一个小点，它在地图上位于(-71.104, 42.315)这个位置。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a little dot on the map located at (-71.104, 42.315).", "source": "original", "new_id": 142}
{"id": 25, "function": "ST_Point", "question": "用X是-71.104，Y是42.315，还有一个叫4326的坐标系，画一个点出来。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make a point using X as -71.104, Y as 42.315, and some coordinate system called 4326.", "source": "original", "new_id": 139}
{"id": 25, "function": "ST_Point", "question": "给我一个点，它的位置是(-71.104, 42.315)，用某种常见的坐标体系来表示吧。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a point located at (-71.104, 42.315), using some common coordinate system to represent it.", "source": "original", "new_id": 141}
{"id": 25, "function": "ST_Point", "question": "能不能给我一个以某种常用方式表示的小点，横坐标是-71.104，纵坐标是42.315，像是包裹在一个特别格式里的？", "sql": "SELECT ST_Point( -71.104, 42.315, 4326);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you give me a little dot with an X of -71.104 and a Y of 42.315, wrapped in some special kind of format?", "source": "original", "new_id": 143}
{"id": 26, "function": "ST_Point", "question": "把那个三维空间里的点，坐标是(3637510, 3014852, 2273)，从当前的系统转换到地球通用的坐标标准，然后变成地理信息的样子。", "sql": "SELECT ST_Transform(ST_Point(3637510, 3014852, 2273), 4326)::geography;", "execution_result": [["0101000020E61000003493E09718CC52C04364D4540EFD4340"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that point floating in 3D space, coordinates (3637510, 3014852, 2273), shift it to a widely used Earth coordinate standard, and turn it into a geography-like form.", "source": "original", "new_id": 144}
{"id": 26, "function": "ST_Point", "question": "把那个X是3637510，Y是3014852，还有Z是2273的地方坐标，换成另一种用4326表示的方式看看。", "sql": "SELECT ST_Transform(ST_Point(3637510, 3014852, 2273), 4326)::geography;", "execution_result": [["0101000020E61000003493E09718CC52C04364D4540EFD4340"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that spot with X as 3637510, Y as 3014852, and Z as 2273, and change it into another way of showing it with 4326 to see what it looks like.", "source": "original", "new_id": 145}
{"id": 26, "function": "ST_Point", "question": "把那个坐标是3637510、3014852还有2273的三维小点转换成一种叫WGS84的系统，然后看看它变成地理形状是什么样子。", "sql": "SELECT ST_Transform(ST_Point(3637510, 3014852, 2273), 4326)::geography;", "execution_result": [["0101000020E61000003493E09718CC52C04364D4540EFD4340"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the 3D little dot with coordinates 3637510, 3014852, and 2273 and change it into something called the WGS84 system, then see what it looks like as a geography shape.", "source": "original", "new_id": 146}
{"id": 26, "function": "ST_Point", "question": "能不能帮忙看看那个点，坐标是3637510, 3014852, 2273，把它换成大家熟悉的地球坐标系，然后告诉我它变成了什么样的地理形状？", "sql": "SELECT ST_Transform(ST_Point(3637510, 3014852, 2273), 4326)::geography;", "execution_result": [["0101000020E61000003493E09718CC52C04364D4540EFD4340"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you take a look at that point with coordinates 3637510, 3014852, 2273, change it to the familiar Earth coordinate system, and let me know what kind of geographical shape it turns into?", "source": "original", "new_id": 147}
{"id": 27, "function": "ST_Point", "question": "用那些数字(-71.104, 42.315)在某个常见的地理系统里做一个小点，看看它的地理样子。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326)::geography;", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Use those numbers (-71.104, 42.315) to make a little dot in some common geographic system and see its geographic form.", "source": "original", "new_id": 150}
{"id": 26, "function": "ST_Point", "question": "把那个三维点(3637510 3014852 2273)换到地球常用的坐标方式，然后以地理学的样子给出来。", "sql": "SELECT ST_Transform(ST_Point(3637510, 3014852, 2273), 4326)::geography;", "execution_result": [["0101000020E61000003493E09718CC52C04364D4540EFD4340"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 3D point (3637510 3014852 2273) and switch it to the common Earth coordinate way, then give it in a geography-like form.", "source": "original", "new_id": 148}
{"id": 28, "function": "ST_Point", "question": "把这些坐标-71.104和42.315变成一个地理的东西，记得用那个4326的数字来处理哦。", "sql": "SELECT CAST( ST_SetSRID(ST_Point( -71.104, 42.315), 4326) AS geography);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn these coordinates -71.104 and 42.315 into a geography thing, remember to use that 4326 number to handle it.", "source": "original", "new_id": 157}
{"id": 27, "function": "ST_Point", "question": "给我一个带有数字标签4326的坐标点，那里的小点是(-71.104, 42.315)。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326)::geography;", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide me with a coordinate point marked with the number 4326, where the little dot is at (-71.104, 42.315).", "source": "original", "new_id": 153}
{"id": 27, "function": "ST_Point", "question": "请给我那个在地图上某个地方的坐标，像是-71.104和42.315这样的数字。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326)::geography;", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please give me the coordinates somewhere on the map, like the numbers -71.104 and 42.315.", "source": "original", "new_id": 152}
{"id": 27, "function": "ST_Point", "question": "有一个地理上的点，位置在-71.104和42.315，能不能把它变成一种覆盖地球的形式呢？", "sql": "SELECT ST_Point( -71.104, 42.315, 4326)::geography;", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a point somewhere at -71.104 and 42.315; can it be turned into a form that covers the Earth?", "source": "original", "new_id": 151}
{"id": 28, "function": "ST_Point", "question": "想象一下有一个小点，像是-71.104和42.315这两个数字，试着让它符合4326这种常见的坐标系统，然后让它变成一种地理类型。", "sql": "SELECT CAST( ST_SetSRID(ST_Point( -71.104, 42.315), 4326) AS geography);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a small dot, like the numbers -71.104 and 42.315, and try to make it fit into the common coordinate system 4326, then turn it into a geography type.", "source": "original", "new_id": 155}
{"id": 28, "function": "ST_Point", "question": "把那个经度是-71.104，纬度是42.315的小点转换成一个地理形式，用4326来定位。", "sql": "SELECT CAST( ST_SetSRID(ST_Point( -71.104, 42.315), 4326) AS geography);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that little dot with longitude -71.104 and latitude 42.315 into a geography form, using 4326 to locate it.", "source": "original", "new_id": 156}
{"id": 27, "function": "ST_Point", "question": "给我看一下在地球上某个地方，大概经度是-71.104，纬度是42.315的那个小点的文本表示吧。", "sql": "SELECT ST_Point( -71.104, 42.315, 4326)::geography;", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the text version of that little spot on Earth, roughly at longitude -71.104 and latitude 42.315.", "source": "original", "new_id": 154}
{"id": 27, "function": "ST_Point", "question": "在地图上有个点，它的经度是-71.104，纬度是42.315，能告诉我它在地理世界中的样子吗？", "sql": "SELECT ST_Point( -71.104, 42.315, 4326)::geography;", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "On a map, there's a point with longitude -71.104 and latitude 42.315. Can you tell me how it looks in the geographic world?", "source": "original", "new_id": 149}
{"id": 28, "function": "ST_Point", "question": "把那个点(-71.104, 42.315)变成一种地理的东西，记得用4326哦。", "sql": "SELECT CAST( ST_SetSRID(ST_Point( -71.104, 42.315), 4326) AS geography);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that point (-71.104, 42.315) into some kind of geography thing, remember to use 4326.", "source": "original", "new_id": 158}
{"id": 28, "function": "ST_Point", "question": "把那个点(-71.104 42.315)变成一种地理格式，像是用4326这种编号的方式。", "sql": "SELECT CAST( ST_SetSRID(ST_Point( -71.104, 42.315), 4326) AS geography);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that point (-71.104 42.315) into some kind of geographic format, like using the number 4326 method.", "source": "original", "new_id": 160}
{"id": 28, "function": "ST_Point", "question": "把那个点(-71.104, 42.315)变成可以用来算距离的地理样子，别忘了用4326这个编号哦。", "sql": "SELECT CAST( ST_SetSRID(ST_Point( -71.104, 42.315), 4326) AS geography);", "execution_result": [["0101000020E61000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that point (-71.104, 42.315) into a geography form that can be used for distance calculations, and remember to use the number 4326.", "source": "original", "new_id": 159}
{"id": 29, "function": "ST_Point", "question": "能不能帮我找一个在地图上的小点，它的位置是那些数字-71.104和42.315？", "sql": "SELECT ST_Point(-71.104, 42.315);", "execution_result": [["01010000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you help me find a small dot on the map, located at those numbers -71.104 and 42.315?", "source": "original", "new_id": 163}
{"id": 29, "function": "ST_Point", "question": "能不能给我一个关于那些在-71.104和42.315位置的小点的简单描述？", "sql": "SELECT ST_Point(-71.104, 42.315);", "execution_result": [["01010000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you give me a simple description of those tiny dots at -71.104 and 42.315?", "source": "original", "new_id": 162}
{"id": 29, "function": "ST_Point", "question": "给我看看那个X是-71.104，Y是42.315的小点的样子。", "sql": "SELECT ST_Point(-71.104, 42.315);", "execution_result": [["01010000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what that little dot looks like where X is -71.104 and Y is 42.315.", "source": "original", "new_id": 164}
{"id": 29, "function": "ST_Point", "question": "有一个位置，像在地图上的小标记，X是-71.104，Y是42.315，想看看它的样子。", "sql": "SELECT ST_Point(-71.104, 42.315);", "execution_result": [["01010000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a spot, like a little marker on a map, with X as -71.104 and Y as 42.315, and I want to see how it looks.", "source": "original", "new_id": 161}
{"id": 30, "function": "ST_PointZ", "question": "做一个有三个数字的点，分别是-71.104，42.315，还有3.4的那个高度。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4);", "execution_result": [["01010000802DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make a point with three numbers, like -71.104, 42.315, and that height of 3.4.", "source": "original", "new_id": 167}
{"id": 29, "function": "ST_Point", "question": "给我看看那个在-71.104和42.315这两个数字位置的小点的样子，用一种能写出来的方式。", "sql": "SELECT ST_Point(-71.104, 42.315);", "execution_result": [["01010000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me how that tiny dot at the numbers -71.104 and 42.315 looks, using a way that can be written down.", "source": "original", "new_id": 166}
{"id": 30, "function": "ST_PointZ", "question": "能不能弄个三维的点，像是有个地方在-71.104的左边，42.315的上边，还有3.4的高度？", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4);", "execution_result": [["01010000802DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you create a three-dimensional dot, like a spot that's at -71.104 to the left, 42.315 above, with a height of 3.4?", "source": "original", "new_id": 169}
{"id": 30, "function": "ST_PointZ", "question": "能不能描述一个有点像在-71.104和42.315这两个地方上，位置稍微高一点，具体是3.4的点？", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4);", "execution_result": [["01010000802DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you describe something like a spot that's around -71.104 and 42.315, but a bit elevated, specifically 3.4?", "source": "original", "new_id": 168}
{"id": 29, "function": "ST_Point", "question": "能不能弄个小点，坐标是(-71.104, 42.315)？", "sql": "SELECT ST_Point(-71.104, 42.315);", "execution_result": [["01010000002DB29DEFA7C651C0B81E85EB51284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you make a little dot with the coordinates (-71.104, 42.315)?", "source": "original", "new_id": 165}
{"id": 30, "function": "ST_PointZ", "question": "想象一个在平面上有点，位置是-71.104和42.315，还有高度大概是3.4。你能给我它的完整描述吗？", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4);", "execution_result": [["01010000802DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a point on a plane, located at about -71.104 and 42.315, with a height of roughly 3.4. Could you provide its complete description?", "source": "original", "new_id": 171}
{"id": 31, "function": "ST_PointZ", "question": "用这些数字(-71.104, 42.315, 3.4)和某个坐标系统做个立体的小点。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create a 3D little dot using these numbers (-71.104, 42.315, 3.4) and some coordinate system.", "source": "original", "new_id": 174}
{"id": 31, "function": "ST_PointZ", "question": "给我一个包含-71.104、42.315和3.4的三维小点的描述，记得用那个常用的参考系统编号4326。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a description of a 3D little dot that includes -71.104, 42.315, and 3.4, and remember to use that common reference system number 4326.", "source": "original", "new_id": 173}
{"id": 30, "function": "ST_PointZ", "question": "找一个三维的点，它的横坐标是-71.104，竖坐标是42.315，另外还有一个高度是3.4，然后把它的完整描述写出来。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4);", "execution_result": [["01010000802DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find a three-dimensional point where the horizontal position is -71.104, the vertical position is 42.315, and there's also a height of 3.4, then write out its complete description.", "source": "original", "new_id": 170}
{"id": 31, "function": "ST_PointZ", "question": "在某个坐标系统里，描述一下一个三维的小点，坐标是(-71.104, 42.315, 3.4)。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In some coordinate system, describe a tiny 3D point with coordinates (-71.104, 42.315, 3.4).", "source": "original", "new_id": 177}
{"id": 31, "function": "ST_PointZ", "question": "画一个三维的小点，位置在-71.104和42.315，第三个数字是3.4，坐标系有个编号4326。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a three-dimensional little dot, located at -71.104 and 42.315, with the third number as 3.4, and the coordinate system has a number 4326.", "source": "original", "new_id": 175}
{"id": 31, "function": "ST_PointZ", "question": "给我一个有着(-71.104, 42.315, 3.4)这些数字的小点，看看它在一个叫4326的框架里怎么描述。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me how a little point with these numbers (-71.104, 42.315, 3.4) is described in a framework called 4326.", "source": "original", "new_id": 178}
{"id": 32, "function": "ST_PointZ", "question": "想象一个在地图上的小点，它在-71.104和42.315这个地方，高度是3.4，用一个特别的4326数字来标记它。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a little dot on the map at the location of -71.104 and 42.315, with a height of 3.4, marked by a special number 4326.", "source": "original", "new_id": 180}
{"id": 32, "function": "ST_PointZ", "question": "有一个在某个坐标系里的三维点，它的X是-71.104，Y是42.315，Z是3.4，你能把它的样子告诉我吗？", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a 3D point in some coordinate system with X as -71.104, Y as 42.315, Z as 3.4. Can you tell me how it looks?", "source": "original", "new_id": 179}
{"id": 31, "function": "ST_PointZ", "question": "给我一个用来描述那个点的字符串，它有点像(-71.104,42.315,3.4)这种形式，和一个常用的编号4326。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a string to describe that point, kind of like (-71.104,42.315,3.4), along with a commonly used number 4326.", "source": "original", "new_id": 176}
{"id": 32, "function": "ST_PointZ", "question": "请给我一个描述在(-71.104, 42.315, 3.4)那个位置的小点的东西，它和4326有点关系。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you provide something that describes a small dot at the location (-71.104, 42.315, 3.4), which has some connection to 4326?", "source": "original", "new_id": 182}
{"id": 32, "function": "ST_PointZ", "question": "给我一个描述那个地方的文字形式吧，坐标是(-71.104, 42.315, 3.4)，还有那个神秘的4326编号。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a textual form that describes that spot, with coordinates (-71.104, 42.315, 3.4), and that mysterious number 4326.", "source": "original", "new_id": 184}
{"id": 33, "function": "ST_PointM", "question": "能不能给个坐标在-71.104和42.315的小点，顺便有个M值是3.4，用那种编号4326的方式来描述？", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you give a little dot located at -71.104 and 42.315 with an M-value of 3.4, described in that 4326 style?", "source": "original", "new_id": 185}
{"id": 32, "function": "ST_PointZ", "question": "请给出一个三维的小点，它的坐标是(-71.104, 42.315, 3.4)，并且是在地球常用的参考系统里。", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you provide a 3D little dot with coordinates (-71.104, 42.315, 3.4) in the commonly used reference system for the Earth?", "source": "original", "new_id": 183}
{"id": 33, "function": "ST_PointM", "question": "能不能弄个带有某种额外值的点，像是坐标在-71.104和42.315那里，那个额外值是3.4，然后用某种标准来表示这个点？", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you create a point with some extra value, like coordinates at -71.104 and 42.315, with that extra value being 3.4, and use some kind of standard to represent this point?", "source": "original", "new_id": 187}
{"id": 33, "function": "ST_PointM", "question": "能不能给我一个小点，像是地图上的某个地方，X是-71.104，Y是42.315，还有个特别的3.4，和那个常见的4326有关。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you give me a little dot, like a spot on a map, where X is -71.104, Y is 42.315, with a special 3.4, and something to do with the usual 4326.", "source": "original", "new_id": 188}
{"id": 33, "function": "ST_PointM", "question": "给我一个坐标，像是一个有附加值的点，X是-71.104，Y是42.315，还有个3.4的特殊数字，跟那个EPSG:4326的系统有关。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a coordinate, like a point with an extra value, X is -71.104, Y is 42.315, and there's a special number 3.4, related to that EPSG:4326 system.", "source": "original", "new_id": 189}
{"id": 33, "function": "ST_PointM", "question": "想象一个位置在-71.104和42.315之间的小点，还有个神秘的3.4数字和某种4326的背景，能帮我描述它吗？", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a little dot located between -71.104 and 42.315, with a mysterious number 3.4 and some kind of 4326 background, can you describe it for me?", "source": "original", "new_id": 186}
{"id": 32, "function": "ST_PointZ", "question": "能不能描述一下一个三维的点，这个点的横坐标是-71.104，竖坐标是42.315，高度是3.4，用那个4326的参考系来表示？", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["01010000A0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you describe a 3D point where the horizontal coordinate is -71.104, the vertical coordinate is 42.315, and the height is 3.4, using that 4326 reference system?", "source": "original", "new_id": 181}
{"id": 34, "function": "ST_PointM", "question": "找个地方标记一下，X是-71.104，Y是42.315，还有个神秘数字3.4，整个过程依赖某个4326的系统。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Mark a location with X as -71.104, Y as 42.315, and a mysterious number 3.4, relying on some system numbered 4326.", "source": "original", "new_id": 192}
{"id": 34, "function": "ST_PointM", "question": "能不能给我那个X是-71.104、Y是42.315的小点，带个3.4的M值，用那个4326的系统？", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you give me that little point where X is -71.104 and Y is 42.315, with an M-value of 3.4, using that 4326 system?", "source": "original", "new_id": 191}
{"id": 34, "function": "ST_PointM", "question": "生成一个点，它的位置是X在-71.104、Y在42.315，另外带个3.4的值，坐标用地球常用的参考方式。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create a point where X is at -71.104, Y is at 42.315, and it also carries a value of 3.4, using the common Earth reference system.", "source": "original", "new_id": 195}
{"id": 34, "function": "ST_PointM", "question": "给我一个有点像地图上的小点的东西，位置在-71.104和42.315那儿，里面有个3.4的特殊值，用那种国际通用的参考方式4326。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me something like a little dot on a map, located around -71.104 and 42.315, with a special value of 3.4 inside, using that internationally common reference way 4326.", "source": "original", "new_id": 194}
{"id": 34, "function": "ST_PointM", "question": "想象一个点，像在地图上标记的那种，横坐标是-71.104，纵坐标是42.315，还有个3.4这样的数字，跟全球地图的某种编号有关，能用WKT这种神秘方式展示出来。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a point, like those marked on a map, with a horizontal position of -71.104, a vertical position of 42.315, and a number like 3.4, related to some global map numbering, and show it in a mysterious way called WKT.", "source": "original", "new_id": 193}
{"id": 33, "function": "ST_PointM", "question": "找一个有点特别的地方，它的横着的数是-71.104，竖着的数是42.315，还有个特别的3.4值，都是在某个4326的框架里，然后用一种特别的方式来描述它。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find a somewhat special spot where the sideways number is -71.104, the upright number is 42.315, and there’s a special 3.4 value, all within some 4326 framework, then describe it in a special way.", "source": "original", "new_id": 190}
{"id": 30, "function": "ST_PointZ", "question": "想象一个位置在-71.104和42.315的空间点，带有高度3.4，能否描述它的完整形状？", "sql": "SELECT ST_PointZ(-71.104, 42.315, 3.4);", "execution_result": [["01010000802DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a spatial point located at -71.104 and 42.315 with a height of 3.4, can you describe its complete shape?", "source": "original", "new_id": 172}
{"id": 34, "function": "ST_PointM", "question": "给我一个带有3.4的神秘数值的二维小点，坐标是-71.104和42.315，用某种标准参考系来表示，然后以某种格式展示结果。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4, srid => 4326);", "execution_result": [["0101000060E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a 2D little dot with a mysterious value of 3.4, coordinates are -71.104 and 42.315, represented using some standard reference system, and then show the result in some format.", "source": "original", "new_id": 196}
{"id": 35, "function": "ST_PointM", "question": "有个点，它的位置是(-71.104, 42.315)，还有一个神秘的数字3.4，你能帮我把它们组合成一个表达吗？", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4);", "execution_result": [["01010000402DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a point located at (-71.104, 42.315), and there's a mysterious number 3.4. Could you help me combine them into an expression?", "source": "original", "new_id": 198}
{"id": 35, "function": "ST_PointM", "question": "给我一个点，它有个特别的数字在-71.104和42.315这两个数字之外，还带上3.4这个值。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4);", "execution_result": [["01010000402DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a point that has a special number besides the numbers -71.104 and 42.315, also include the value 3.4.", "source": "original", "new_id": 201}
{"id": 35, "function": "ST_PointM", "question": "给我一个有特别数字的点，X是-71.104，Y是42.315，还有个3.4的神秘值，然后用一种标准的文本方法来表示结果。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4);", "execution_result": [["01010000402DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a point with special numbers, where X is -71.104, Y is 42.315, and there's a mysterious value of 3.4, then display the result using a standard text method.", "source": "original", "new_id": 202}
{"id": 36, "function": "ST_PointZM", "question": "想象一个点，它位于-71.104和42.315这个地方，有个高度3.4和一个特别的值4.5，坐标系是4326的那种，能给我看看这个点的样子吗？", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a point located at -71.104 and 42.315, with a height of 3.4 and a special value of 4.5, in that 4326 coordinate system. Can you show me what this point looks like?", "source": "original", "new_id": 204}
{"id": 35, "function": "ST_PointM", "question": "给我一个小点，它在-71.104和42.315的位置，还带着3.4的神秘值。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4);", "execution_result": [["01010000402DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a little dot located at -71.104 and 42.315, carrying a mysterious value of 3.4.", "source": "original", "new_id": 200}
{"id": 36, "function": "ST_PointZM", "question": "有一个位置在X是-71.104，Y是42.315，Z是3.4，M是4.5的点，想知道用一种通用语言描述它，怎么说？", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a spot at X being -71.104, Y being 42.315, with Z as 3.4 and M as 4.5. How would you express it in a common way?", "source": "original", "new_id": 203}
{"id": 35, "function": "ST_PointM", "question": "有个小点，X是-71.104，Y是42.315，还有个额外的3.4，怎么描述这个点呢？", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4);", "execution_result": [["01010000402DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a little dot with X being -71.104, Y being 42.315, and an extra 3.4, how would you describe this point?", "source": "original", "new_id": 197}
{"id": 35, "function": "ST_PointM", "question": "画一个小点，横坐标是-71.104，纵坐标是42.315，还有个神秘数字3.4跟它有关。", "sql": "SELECT ST_PointM(-71.104, 42.315, 3.4);", "execution_result": [["01010000402DB29DEFA7C651C0B81E85EB512845403333333333330B40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a little dot where the horizontal number is -71.104, the vertical number is 42.315, and a mysterious number 3.4 is related to it.", "source": "original", "new_id": 199}
{"id": 37, "function": "ST_PointZM", "question": "能不能把这些数字放在一起，像是一个有四个数字的小点：-71.104、42.315、3.4和4.5？", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5);", "execution_result": [["01010000C02DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you put these numbers together like a little dot with four numbers: -71.104, 42.315, 3.4, and 4.5?", "source": "original", "new_id": 209}
{"id": 37, "function": "ST_PointZM", "question": "创建一个有四个数字的点，分别是-71.104, 42.315, 3.4和4.5，看看它的文字描述是什么。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5);", "execution_result": [["01010000C02DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create a point with four numbers, which are -71.104, 42.315, 3.4, and 4.5, and see what its text description is.", "source": "original", "new_id": 211}
{"id": 36, "function": "ST_PointZM", "question": "有个地方是(-71.104, 42.315)，上面有个3.4高的小点，还带着4.5的标记，都是在4326这个系统里，你能帮我把它变成一种特殊的表达吗？", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a place at (-71.104, 42.315), with a little dot 3.4 high and marked with 4.5, all in the 4326 system. Can you help me turn it into a special kind of representation?", "source": "original", "new_id": 206}
{"id": 37, "function": "ST_PointZM", "question": "想象一个点，它有个位置在-71.104和42.315，还有一些奇怪的附加值：3.4和4.5。这个点是什么样子呢？", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5);", "execution_result": [["01010000C02DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a point with a location at -71.104 and 42.315, and some strange extra values: 3.4 and 4.5. What does this point look like?", "source": "original", "new_id": 213}
{"id": 36, "function": "ST_PointZM", "question": "能不能给一个点，带有像-71.104和42.315这样的坐标，还有3.4和4.5这样的额外数字，参考系统是4326？", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you give a point with coordinates like -71.104 and 42.315, plus extra numbers like 3.4 and 4.5, and the reference system is 4326?", "source": "original", "new_id": 207}
{"id": 37, "function": "ST_PointZM", "question": "能不能给我一个小点，包含这些数字：X是-71.104，Y是42.315，还有3.4和4.5。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5);", "execution_result": [["01010000C02DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you give me a little dot with these numbers: X is -71.104, Y is 42.315, along with 3.4 and 4.5?", "source": "original", "new_id": 210}
{"id": 36, "function": "ST_PointZM", "question": "给我个带着Z值和M值的小点，X是-71.104，Y是42.315，Z是3.4，M是4.5，记得用EPSG:4326那个系统，然后用WKT方式告诉我结果。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a little dot with Z and M values, where X is -71.104, Y is 42.315, Z is 3.4, M is 4.5, remember to use that EPSG:4326 system, and tell me the result in WKT style.", "source": "original", "new_id": 208}
{"id": 36, "function": "ST_PointZM", "question": "有一个点，它有四个数字，像是-71.104，42.315，3.4，还有4.5，放在一个特别的框架里叫4326，你能给我这个点的描述吗？", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a point with four numbers, like -71.104, 42.315, 3.4, and 4.5, sitting in a special framework called 4326. Can you give me the description of this point?", "source": "original", "new_id": 205}
{"id": 37, "function": "ST_PointZM", "question": "给我一个描述特别点的位置，它的X是-71.104，Y是42.315，还有一些其他数字，像3.4和4.5。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5);", "execution_result": [["01010000C02DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a description of a special point's location, where X is -71.104, Y is 42.315, along with some other numbers like 3.4 and 4.5.", "source": "original", "new_id": 214}
{"id": 37, "function": "ST_PointZM", "question": "找出一个有点像四维的坐标，其中包括-71.104和42.315，还有3.4和4.5这几个数字。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5);", "execution_result": [["01010000C02DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find something like a four-dimensional coordinate, including the numbers -71.104 and 42.315, as well as 3.4 and 4.5.", "source": "original", "new_id": 212}
{"id": 38, "function": "ST_PointZM", "question": "给我一个包含这些数字的小点，像是(-71.104, 42.315, 3.4, 4.5)，它用的是全球常用的坐标系统。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, srid => 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a little dot with these numbers, like (-71.104, 42.315, 3.4, 4.5), using the globally common coordinate system.", "source": "original", "new_id": 218}
{"id": 38, "function": "ST_PointZM", "question": "想象一个四维的小点，X在-71.104，Y是42.315，Z有3.4，M是4.5，和那个4326的参考系统有关。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, srid => 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a 4D little dot where X is -71.104, Y is 42.315, Z has 3.4, M is 4.5, and it's related to that 4326 reference system.", "source": "original", "new_id": 215}
{"id": 38, "function": "ST_PointZM", "question": "帮我弄个有四个数字的点，像这样：-71.104、42.315、3.4、4.5，最后用4326的那种地图方式。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, srid => 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Help me make a point with four numbers, like this: -71.104, 42.315, 3.4, 4.5, and finally use that 4326 map style.", "source": "original", "new_id": 216}
{"id": 38, "function": "ST_PointZM", "question": "有个点，像是有四个维度，带着Z和M的神秘数字，X是-71.104，Y是42.315，Z是3.4，M是4.5，想知道它在4326数字下的模样吗？", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, srid => 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a point, kind of with four dimensions, carrying mysterious Z and M numbers, X is -71.104, Y is 42.315, Z is 3.4, M is 4.5, curious to see how it looks under the number 4326?", "source": "original", "new_id": 220}
{"id": 39, "function": "ST_Polygon", "question": "拿着这些三维小线段，比如从75到77，再回来，变成一个包围的形状，然后告诉我那种特别格式的文字表现。", "sql": "SELECT ST_AsEWKT( ST_Polygon( ST_GeomFromEWKT('LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)'), 4326) );", "execution_result": [["SRID=4326;POLYGON((75 29 1,77 29 2,77 29 3,75 29 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take these 3D little line segments, like from 75 to 77 and back, turn them into a covering shape, then tell me that special format's text representation.", "source": "original", "new_id": 226}
{"id": 39, "function": "ST_Polygon", "question": "用这些点(75 29 1)、(77 29 2)、(77 29 3)、(75 29 1)弄成一个三维形状，像是个围起来的图，然后用那个标准的坐标系统，给我这个形状的EWKT版本。", "sql": "SELECT ST_AsEWKT( ST_Polygon( ST_GeomFromEWKT('LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)'), 4326) );", "execution_result": [["SRID=4326;POLYGON((75 29 1,77 29 2,77 29 3,75 29 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take these points (75 29 1), (77 29 2), (77 29 3), (75 29 1), make them into a 3D shape, like something enclosed, and using that standard coordinate system, give me the EWKT version of this shape.", "source": "original", "new_id": 222}
{"id": 39, "function": "ST_Polygon", "question": "把那条三维的小线段变成一个多边形，然后用一种特别的格式显示出来，记得要用4326这个数字。", "sql": "SELECT ST_AsEWKT( ST_Polygon( ST_GeomFromEWKT('LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)'), 4326) );", "execution_result": [["SRID=4326;POLYGON((75 29 1,77 29 2,77 29 3,75 29 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that 3D little line into a polygon, then show it in a special format, and remember to use the number 4326.", "source": "original", "new_id": 224}
{"id": 40, "function": "ST_Polygon", "question": "把那些连接了75 29到77 29并回到起点的线，变成一个包围它们的形状，用一种叫做4326的坐标系统来表示，然后给我看它长什么样子。", "sql": "SELECT ST_AsText( ST_Polygon('LINESTRING(75 29, 77 29, 77 29, 75 29)'::geometry, 4326) );", "execution_result": [["POLYGON((75 29,77 29,77 29,75 29))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those lines that connect from 75 29 to 77 29 and back to the start, turn them into a shape that covers them, use a coordinate system called 4326, and show me how it looks.", "source": "original", "new_id": 227}
{"id": 39, "function": "ST_Polygon", "question": "把LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)这种三维线，弄成一个覆盖它的多边形，设定为4326，最后输出它的完整格式。", "sql": "SELECT ST_AsEWKT( ST_Polygon( ST_GeomFromEWKT('LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)'), 4326) );", "execution_result": [["SRID=4326;POLYGON((75 29 1,77 29 2,77 29 3,75 29 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the 3D line LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1), turn it into a polygon that covers it, set it to 4326, and output its full format.", "source": "original", "new_id": 221}
{"id": 38, "function": "ST_PointZM", "question": "想象一个有四个维度的小点，其中有一些特别的数字：-71.104和42.315，还有3.4和4.5。它们在某种全球定位系统下被放置。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, srid => 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a little dot with four dimensions, featuring some special numbers: -71.104 and 42.315, as well as 3.4 and 4.5. They are placed under some kind of global positioning system.", "source": "original", "new_id": 217}
{"id": 39, "function": "ST_Polygon", "question": "把这些三维小点连成的闭合线(75 29 1, 77 29 2, 77 29 3, 75 29 1)变成一个多边形，用那个特别的4326编号，然后看看它的特别表示方式。", "sql": "SELECT ST_AsEWKT( ST_Polygon( ST_GeomFromEWKT('LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)'), 4326) );", "execution_result": [["SRID=4326;POLYGON((75 29 1,77 29 2,77 29 3,75 29 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the loop made by these 3D little dots (75 29 1, 77 29 2, 77 29 3, 75 29 1) into a shape, give it that special 4326 number, and then check out its special representation.", "source": "original", "new_id": 223}
{"id": 40, "function": "ST_Polygon", "question": "用那些点(75 29)、(77 29)、(77 29)、(75 29)围绕成一个封闭的形状，看看它在4326坐标系下的文本样子。", "sql": "SELECT ST_AsText( ST_Polygon('LINESTRING(75 29, 77 29, 77 29, 75 29)'::geometry, 4326) );", "execution_result": [["POLYGON((75 29,77 29,77 29,75 29))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Use those points (75 29), (77 29), (77 29), (75 29) to form a closed shape and see what its text looks like in the 4326 coordinate system.", "source": "original", "new_id": 228}
{"id": 40, "function": "ST_Polygon", "question": "把这串线段，就像连接起来的几根绳子，变成一个完整的形状，用那些坐标数字75 29, 77 29来表达，给我它的文字格式。", "sql": "SELECT ST_AsText( ST_Polygon('LINESTRING(75 29, 77 29, 77 29, 75 29)'::geometry, 4326) );", "execution_result": [["POLYGON((75 29,77 29,77 29,75 29))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take this series of line segments, like ropes tied together, and turn it into a complete shape using those coordinate numbers 75 29, 77 29, and give me its text format.", "source": "original", "new_id": 230}
{"id": 40, "function": "ST_Polygon", "question": "把那个由75 29, 77 29, 77 29, 75 29这些点构成的线变成一个封闭的形状，然后用4326来标记它的地图位置，最后看看它的样子。", "sql": "SELECT ST_AsText( ST_Polygon('LINESTRING(75 29, 77 29, 77 29, 75 29)'::geometry, 4326) );", "execution_result": [["POLYGON((75 29,77 29,77 29,75 29))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change that line made up of 75 29, 77 29, 77 29, 75 29 into a closed shape, then mark its map spot with 4326, and finally see what it looks like.", "source": "original", "new_id": 229}
{"id": 39, "function": "ST_Polygon", "question": "把那些从75 29 1到77 29 3再回到75 29 1的高低起伏连接，变成一个围起来的形状，记得用4326的方式，然后告诉我结果是什么样子的。", "sql": "SELECT ST_AsEWKT( ST_Polygon( ST_GeomFromEWKT('LINESTRING(75 29 1, 77 29 2, 77 29 3, 75 29 1)'), 4326) );", "execution_result": [["SRID=4326;POLYGON((75 29 1,77 29 2,77 29 3,75 29 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those ups and downs connecting from 75 29 1 to 77 29 3 and back to 75 29 1, turn them into a shape that wraps around, remember to use the 4326 way, and then tell me what the result looks like.", "source": "original", "new_id": 225}
{"id": 38, "function": "ST_PointZM", "question": "给我一个点，它有四个数字，像是-71.104、42.315、3.4和4.5，还有一个叫4326的参考东西。", "sql": "SELECT ST_PointZM(-71.104, 42.315, 3.4, 4.5, srid => 4326);", "execution_result": [["01010000E0E61000002DB29DEFA7C651C0B81E85EB512845403333333333330B400000000000001240"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a point with four numbers, like -71.104, 42.315, 3.4, and 4.5, plus a reference thing called 4326.", "source": "original", "new_id": 219}
{"id": 40, "function": "ST_Polygon", "question": "把那条连接着点(75 29, 77 29, 77 29, 75 29)的线条变成一个封闭的形状，然后用一种常见的文本方式描述出来，坐标系是4326。", "sql": "SELECT ST_AsText( ST_Polygon('LINESTRING(75 29, 77 29, 77 29, 75 29)'::geometry, 4326) );", "execution_result": [["POLYGON((75 29,77 29,77 29,75 29))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the line connecting points (75 29, 77 29, 77 29, 75 29) into a closed shape, then describe it in a common text format, with the coordinate system being 4326.", "source": "original", "new_id": 231}
{"id": 40, "function": "ST_Polygon", "question": "把连接的线段(75 29, 77 29, 77 29, 75 29)变成一个完整的封闭图形，然后用某种标准格式表达出来，记得用那个4326坐标系。", "sql": "SELECT ST_AsText( ST_Polygon('LINESTRING(75 29, 77 29, 77 29, 75 29)'::geometry, 4326) );", "execution_result": [["POLYGON((75 29,77 29,77 29,75 29))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the connected lines (75 29, 77 29, 77 29, 75 29) into a complete closed shape, then express it in some standard format, and remember to use that 4326 coordinate system.", "source": "original", "new_id": 232}
{"id": 41, "function": "ST_TileEnvelope", "question": "在放大镜的第3档，看看瓦片坐标(1,1)在一个从左到右(-180到180)和从下到上(-90到90)的大框里的形状，能变成什么文本？", "sql": "SELECT ST_AsText( ST_TileEnvelope(3, 1, 1, ST_MakeEnvelope(-180, -90, 180, 90, 4326) ) );", "execution_result": [["POLYGON((-135 45,-135 67.5,-90 67.5,-90 45,-135 45))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "At zoom level 3, how does the tile at coordinates (1,1) inside a big box stretching from left to right (-180 to 180) and bottom to top (-90 to 90) turn into a text shape?", "source": "original", "new_id": 234}
{"id": 41, "function": "ST_TileEnvelope", "question": "在全球那种坐标系统下，想象一下有个大框框，框住了从-180到180，再从-90到90的地方，然后找出某种放大级别为3，横向1，纵向1的小块边界，用一种特别的格式描述出来。", "sql": "SELECT ST_AsText( ST_TileEnvelope(3, 1, 1, ST_MakeEnvelope(-180, -90, 180, 90, 4326) ) );", "execution_result": [["POLYGON((-135 45,-135 67.5,-90 67.5,-90 45,-135 45))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In that global kind of coordinate system, imagine a big frame covering from -180 to 180, and -90 to 90, then find the boundary of a small piece with some zoom level 3, horizontal 1, and vertical 1, and describe it in a special format.", "source": "original", "new_id": 233}
{"id": 41, "function": "ST_TileEnvelope", "question": "在那个大范围框里，找出缩放到第3级时，横向第1个和纵向第1个的小方块的边缘，用某种格式呈现出来。", "sql": "SELECT ST_AsText( ST_TileEnvelope(3, 1, 1, ST_MakeEnvelope(-180, -90, 180, 90, 4326) ) );", "execution_result": [["POLYGON((-135 45,-135 67.5,-90 67.5,-90 45,-135 45))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Within that large bounding box, find the edges of the small square when zoomed to level 3, horizontal index 1, and vertical index 1, and present it in some format.", "source": "original", "new_id": 235}
{"id": 42, "function": "ST_TileEnvelope", "question": "给我看一下那个网格的范围，具体是放大两倍，横向一点，纵向一点的那个，用能读的字符表示就行。", "sql": "SELECT ST_AsText( ST_TileEnvelope(2, 1, 1) );", "execution_result": [["POLYGON((-10018754.171394622 0,-10018754.171394622 10018754.171394622,0 10018754.171394622,0 0,-10018754.171394622 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the area of that grid, specifically the one zoomed twice, moved one step horizontally and vertically, using readable characters.", "source": "original", "new_id": 243}
{"id": 42, "function": "ST_TileEnvelope", "question": "对于那种放大两倍的情况，看看在(1,1)这个点附近的那些范围，能不能用某种方式描述出来？", "sql": "SELECT ST_AsText( ST_TileEnvelope(2, 1, 1) );", "execution_result": [["POLYGON((-10018754.171394622 0,-10018754.171394622 10018754.171394622,0 10018754.171394622,0 0,-10018754.171394622 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In a scenario where things are twice as zoomed, can you describe what the area around the point (1,1) might look like?", "source": "original", "new_id": 242}
{"id": 42, "function": "ST_TileEnvelope", "question": "能不能给我看看那个在缩放2级时，坐标1和1的瓦片边界的形状是什么样子？", "sql": "SELECT ST_AsText( ST_TileEnvelope(2, 1, 1) );", "execution_result": [["POLYGON((-10018754.171394622 0,-10018754.171394622 10018754.171394622,0 10018754.171394622,0 0,-10018754.171394622 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show me what the shape looks like for the tile boundary at zoom level 2, coordinates 1 and 1?", "source": "original", "new_id": 244}
{"id": 42, "function": "ST_TileEnvelope", "question": "对于那个放大到2倍的区域，看看X是1，Y也是1的方块边缘的线条，用一种容易读懂的格式来表达吧。", "sql": "SELECT ST_AsText( ST_TileEnvelope(2, 1, 1) );", "execution_result": [["POLYGON((-10018754.171394622 0,-10018754.171394622 10018754.171394622,0 10018754.171394622,0 0,-10018754.171394622 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that area zoomed to level 2, take a look at the edges of the box where X is 1 and Y is also 1, and express it in an easy-to-read format.", "source": "original", "new_id": 241}
{"id": 43, "function": "ST_Hexagon", "question": "做一个六边形，边是1.0，中心在(0,0)，然后把它放在3857这个地方，最后说说它长什么样子。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Hexagon(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((-1 0,-0.5 -0.866025403784439,0.5 -0.866025403784439,1 0,0.5 0.866025403784439,-0.5 0.866025403784439,-1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make a hexagon with a side of 1.0, centered at (0,0), then place it in that 3857 area, and finally describe how it looks.", "source": "original", "new_id": 246}
{"id": 42, "function": "ST_TileEnvelope", "question": "你能找到那个缩放到2倍、横着是1、竖着也是1的小方块的范围吗？然后把它的形状用一种常见的坐标表示方式给我。", "sql": "SELECT ST_AsText( ST_TileEnvelope(2, 1, 1) );", "execution_result": [["POLYGON((-10018754.171394622 0,-10018754.171394622 10018754.171394622,0 10018754.171394622,0 0,-10018754.171394622 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you find that little square that's zoomed to level 2, with horizontal 1 and vertical also 1? Then give me its shape in a common coordinate format.", "source": "original", "new_id": 239}
{"id": 43, "function": "ST_Hexagon", "question": "有一个边长为1.0的小六边形，它的中心在(0,0)，想象一下把它放到一个特别的地图上，用那种神秘的代号3857来描述。然后用一种特殊的文本格式来表达这个小图形。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Hexagon(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((-1 0,-0.5 -0.866025403784439,0.5 -0.866025403784439,1 0,0.5 0.866025403784439,-0.5 0.866025403784439,-1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a small hexagon with a side length of 1.0, centered at (0,0), and think about placing it on a special map with that mysterious code 3857. Then express this little shape in a special text format.", "source": "original", "new_id": 245}
{"id": 41, "function": "ST_TileEnvelope", "question": "能不能告诉我关于缩放为3、X是1、Y也是1的瓦片范围，用某种方式表示成一个矩形的文字形式？", "sql": "SELECT ST_AsText( ST_TileEnvelope(3, 1, 1, ST_MakeEnvelope(-180, -90, 180, 90, 4326) ) );", "execution_result": [["POLYGON((-135 45,-135 67.5,-90 67.5,-90 45,-135 45))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me about the area for zoom level 3, X being 1, and Y also 1, expressed as some kind of rectangle in text form?", "source": "original", "new_id": 236}
{"id": 41, "function": "ST_TileEnvelope", "question": "给我看看第三层级里那个瓦片的四边形外框，位置是(1,1)，在那个大范围(-180,-90,180,90)里面。", "sql": "SELECT ST_AsText( ST_TileEnvelope(3, 1, 1, ST_MakeEnvelope(-180, -90, 180, 90, 4326) ) );", "execution_result": [["POLYGON((-135 45,-135 67.5,-90 67.5,-90 45,-135 45))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the rectangular outline for the tile at level 3, located at (1,1), within the large area (-180,-90,180,90).", "source": "original", "new_id": 237}
{"id": 43, "function": "ST_Hexagon", "question": "能不能用一种方法来描述一个六边形，它的边长是1.0，中心在(0, 0)，然后把这个形状放在一个特别的地图系统里，并告诉我它长什么样子？", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Hexagon(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((-1 0,-0.5 -0.866025403784439,0.5 -0.866025403784439,1 0,0.5 0.866025403784439,-0.5 0.866025403784439,-1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you describe a hexagon with a side of 1.0, centered at (0, 0), then place this shape in a special map system and tell me what it looks like?", "source": "original", "new_id": 247}
{"id": 44, "function": "ST_Square", "question": "请给我一个小方块，它在原点附近晃悠，边长是1，然后用那种常用的网络地图方式来表达它的样子。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Square(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((0 0,0 1,1 1,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please give me a small square that hovers near the origin, with a side length of 1, and express its appearance using that common web map style.", "source": "original", "new_id": 254}
{"id": 43, "function": "ST_Hexagon", "question": "能不能告诉我一个中心在原点(0,0)、边长是1.0的六边形，在3857这种地图方式下的具体形状是啥样？", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Hexagon(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((-1 0,-0.5 -0.866025403784439,0.5 -0.866025403784439,1 0,0.5 0.866025403784439,-0.5 0.866025403784439,-1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me what a hexagon with a side length of 1.0, centered at the origin (0, 0), would look like in this 3857 map style?", "source": "original", "new_id": 249}
{"id": 45, "function": "ST_Letters", "question": "把'Yo'变成一个空间形状，并用一种只留一位小数的方式来表示它。", "sql": "SELECT ST_AsText(ST_Letters('Yo'), 1);", "execution_result": [["MULTIPOLYGON(((34.5 73.8,54 73.8,53.1 72.9,35.1 28.7,35.1 0.9,36 0,18 0,19 0.9,19 28.7,0.9 72.9,0 73.8,19.5 73.8,18.6 72.9,23 61.6,27 47.4,31.1 61.9,35.4 72.9,34.5 73.8)),((68.9 58,70 58,71.1 57.9,72.2 57.8,73.2 57.7,74.3 57.5,75.3 57.3,76.2 57.1,77.2 56.8,78.1 56.5,79 56.1,79.9 55.7,80.7 55.3,81.5 54.8,82.3 54.3,83 53.7,83.7 53.1,84.4 52.5,85 51.8,85.6 51.1,86.1 50.3,86.6 49.5,87.1 48.7,87.6 47.9,88 47,88.4 46.1,88.7 45.1,89 44.1,89.2 43.1,89.4 42.1,89.5 41,89.6 39.9,89.6 38.7,89.6 18.9,89.6 17.7,89.5 16.6,89.4 15.5,89.2 14.5,89 13.5,88.8 12.5,88.5 11.5,88.1 10.6,87.7 9.7,87.3 8.9,86.8 8.1,86.3 7.3,85.7 6.6,85.1 5.9,84.5 5.2,83.8 4.6,83.1 4,82.3 3.5,81.6 2.9,80.8 2.5,79.9 2,79.1 1.6,78.2 1.2,77.3 0.8,76.4 0.5,75.4 0.2,74.4 0,73.4 -0.2,72.3 -0.4,71.2 -0.5,70.1 -0.5,69 -0.5,67.9 -0.5,66.8 -0.4,65.7 -0.3,64.6 -0.2,63.6 0,62.6 0.2,61.6 0.5,60.6 0.8,59.7 1.1,58.8 1.5,57.9 1.9,57.1 2.4,56.3 2.9,55.5 3.4,54.8 3.9,54.1 4.5,53.4 5.1,52.8 5.8,52.2 6.5,51.7 7.2,51.2 8,50.7 8.8,50.2 9.7,49.8 10.6,49.4 11.5,49.1 12.5,48.8 13.5,48.6 14.5,48.4 15.6,48.3 16.7,48.2 17.8,48.2 18.9,48.2 38.7,48.2 39.9,48.3 41,48.4 42.1,48.6 43.1,48.8 44.1,49 45.1,49.3 46.1,49.7 47,50.1 47.9,50.5 48.7,51 49.5,51.5 50.3,52.1 51,52.7 51.7,53.3 52.4,54 53,54.7 53.6,55.5 54.1,56.2 54.6,57.1 55.1,57.9 55.6,58.8 56,59.7 56.4,60.6 56.7,61.6 57,62.5 57.3,63.5 57.5,64.6 57.7,65.6 57.8,66.7 57.9,67.8 58,68.9 58),(73.8 38.9,72.3 41.6,69 42.6,65.6 41.7,64.1 38.9,64.1 18.9,65.5 16.2,68.8 15.2,72.1 16.1,73.8 18.9,73.8 38.9)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn 'Yo' into a spatial shape and represent it in a way that keeps only one decimal place.", "source": "original", "new_id": 257}
{"id": 43, "function": "ST_Hexagon", "question": "画一个边长是1.0的小六边形，它的中心就在(0, 0)那个点，然后用某种地球上的投影方式来描述它的形状。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Hexagon(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((-1 0,-0.5 -0.866025403784439,0.5 -0.866025403784439,1 0,0.5 0.866025403784439,-0.5 0.866025403784439,-1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a little hexagon with a side length of 1.0, its center is right at that point (0, 0), and then describe its shape using some kind of earth projection.", "source": "original", "new_id": 250}
{"id": 41, "function": "ST_TileEnvelope", "question": "在那个全球地图框架里，有个小方块，它的缩放级别是3，然后它的X和Y位置都是1，帮我找出它的外边框变成文字的样子。", "sql": "SELECT ST_AsText( ST_TileEnvelope(3, 1, 1, ST_MakeEnvelope(-180, -90, 180, 90, 4326) ) );", "execution_result": [["POLYGON((-135 45,-135 67.5,-90 67.5,-90 45,-135 45))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In that global map framework, there's a small square with zoom level 3, and its X and Y positions are both 1. Help me find its outer border turned into text form.", "source": "original", "new_id": 238}
{"id": 44, "function": "ST_Square", "question": "把一个边是1.0的小方块，它的中心在(0,0)那个地方，转成3857的那种坐标，然后看看它是什么样子的。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Square(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((0 0,0 1,1 1,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a small square with sides of 1.0, centered at that (0,0) spot, and change it to the 3857 kind of coordinates, then see what it looks like.", "source": "original", "new_id": 251}
{"id": 44, "function": "ST_Square", "question": "请给我一个在原点附近的正方形，它的边好像是1长，然后转换成一些特别的坐标系吧。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Square(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((0 0,0 1,1 1,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you give me a square near the origin, its sides seem to be 1 long, and then transform it into some special coordinate system?", "source": "original", "new_id": 255}
{"id": 44, "function": "ST_Square", "question": "求一个在(0,0)的方形，边长1.0，转换到3857这种坐标下的那些文字描述。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Square(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((0 0,0 1,1 1,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the text describing a square centered at (0,0) with a side of 1.0, in that 3857 coordinate system.", "source": "original", "new_id": 252}
{"id": 43, "function": "ST_Hexagon", "question": "生成一个边长是1.0、中心在(0,0)的六边形，然后用某种方式转换成3857的格式，输出它的形状信息。", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Hexagon(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((-1 0,-0.5 -0.866025403784439,0.5 -0.866025403784439,1 0,0.5 0.866025403784439,-0.5 0.866025403784439,-1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create a hexagon with a side length of 1.0, centered at (0,0), then somehow change it into the 3857 format and output its shape details.", "source": "original", "new_id": 248}
{"id": 42, "function": "ST_TileEnvelope", "question": "给我一个简单的描述，像是一个包含所有这些点的形状，使用那些瓦片的缩放是2，位置是1的那种范围，用某种格式来表达它。", "sql": "SELECT ST_AsText( ST_TileEnvelope(2, 1, 1) );", "execution_result": [["POLYGON((-10018754.171394622 0,-10018754.171394622 10018754.171394622,0 10018754.171394622,0 0,-10018754.171394622 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Describe a simple shape that covers the area defined by those tiles at zoom level 2, position 1, using some format to express it.", "source": "original", "new_id": 240}
{"id": 44, "function": "ST_Square", "question": "做一个边长是1.0的小正方形，它的中心在(0,0)这个地方，用那种常用的3857系统来描述。", "sql": "SELECT ST_SetSRID(ST_Square(1.0, 0, 0), 3857);", "execution_result": [["0103000020110F00000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make a small square with a side of 1.0, centered at the spot (0,0), using that common 3857 system to describe it.", "source": "original", "new_id": 253}
{"id": 45, "function": "ST_Letters", "question": "把‘Yo’变成一个形状，用那些字母的样子，保留1位小数，看看它怎么写出来。", "sql": "SELECT ST_AsText(ST_Letters('Yo'), 1);", "execution_result": [["MULTIPOLYGON(((34.5 73.8,54 73.8,53.1 72.9,35.1 28.7,35.1 0.9,36 0,18 0,19 0.9,19 28.7,0.9 72.9,0 73.8,19.5 73.8,18.6 72.9,23 61.6,27 47.4,31.1 61.9,35.4 72.9,34.5 73.8)),((68.9 58,70 58,71.1 57.9,72.2 57.8,73.2 57.7,74.3 57.5,75.3 57.3,76.2 57.1,77.2 56.8,78.1 56.5,79 56.1,79.9 55.7,80.7 55.3,81.5 54.8,82.3 54.3,83 53.7,83.7 53.1,84.4 52.5,85 51.8,85.6 51.1,86.1 50.3,86.6 49.5,87.1 48.7,87.6 47.9,88 47,88.4 46.1,88.7 45.1,89 44.1,89.2 43.1,89.4 42.1,89.5 41,89.6 39.9,89.6 38.7,89.6 18.9,89.6 17.7,89.5 16.6,89.4 15.5,89.2 14.5,89 13.5,88.8 12.5,88.5 11.5,88.1 10.6,87.7 9.7,87.3 8.9,86.8 8.1,86.3 7.3,85.7 6.6,85.1 5.9,84.5 5.2,83.8 4.6,83.1 4,82.3 3.5,81.6 2.9,80.8 2.5,79.9 2,79.1 1.6,78.2 1.2,77.3 0.8,76.4 0.5,75.4 0.2,74.4 0,73.4 -0.2,72.3 -0.4,71.2 -0.5,70.1 -0.5,69 -0.5,67.9 -0.5,66.8 -0.4,65.7 -0.3,64.6 -0.2,63.6 0,62.6 0.2,61.6 0.5,60.6 0.8,59.7 1.1,58.8 1.5,57.9 1.9,57.1 2.4,56.3 2.9,55.5 3.4,54.8 3.9,54.1 4.5,53.4 5.1,52.8 5.8,52.2 6.5,51.7 7.2,51.2 8,50.7 8.8,50.2 9.7,49.8 10.6,49.4 11.5,49.1 12.5,48.8 13.5,48.6 14.5,48.4 15.6,48.3 16.7,48.2 17.8,48.2 18.9,48.2 38.7,48.2 39.9,48.3 41,48.4 42.1,48.6 43.1,48.8 44.1,49 45.1,49.3 46.1,49.7 47,50.1 47.9,50.5 48.7,51 49.5,51.5 50.3,52.1 51,52.7 51.7,53.3 52.4,54 53,54.7 53.6,55.5 54.1,56.2 54.6,57.1 55.1,57.9 55.6,58.8 56,59.7 56.4,60.6 56.7,61.6 57,62.5 57.3,63.5 57.5,64.6 57.7,65.6 57.8,66.7 57.9,67.8 58,68.9 58),(73.8 38.9,72.3 41.6,69 42.6,65.6 41.7,64.1 38.9,64.1 18.9,65.5 16.2,68.8 15.2,72.1 16.1,73.8 18.9,73.8 38.9)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform 'Yo' into a shape using the form of those letters, keep 1 decimal place, and see how it is written out.", "source": "original", "new_id": 261}
{"id": 45, "function": "ST_Letters", "question": "把'Yo'变成几何图形，然后用一种方式来写出来，只要保留1位小数就行。", "sql": "SELECT ST_AsText(ST_Letters('Yo'), 1);", "execution_result": [["MULTIPOLYGON(((34.5 73.8,54 73.8,53.1 72.9,35.1 28.7,35.1 0.9,36 0,18 0,19 0.9,19 28.7,0.9 72.9,0 73.8,19.5 73.8,18.6 72.9,23 61.6,27 47.4,31.1 61.9,35.4 72.9,34.5 73.8)),((68.9 58,70 58,71.1 57.9,72.2 57.8,73.2 57.7,74.3 57.5,75.3 57.3,76.2 57.1,77.2 56.8,78.1 56.5,79 56.1,79.9 55.7,80.7 55.3,81.5 54.8,82.3 54.3,83 53.7,83.7 53.1,84.4 52.5,85 51.8,85.6 51.1,86.1 50.3,86.6 49.5,87.1 48.7,87.6 47.9,88 47,88.4 46.1,88.7 45.1,89 44.1,89.2 43.1,89.4 42.1,89.5 41,89.6 39.9,89.6 38.7,89.6 18.9,89.6 17.7,89.5 16.6,89.4 15.5,89.2 14.5,89 13.5,88.8 12.5,88.5 11.5,88.1 10.6,87.7 9.7,87.3 8.9,86.8 8.1,86.3 7.3,85.7 6.6,85.1 5.9,84.5 5.2,83.8 4.6,83.1 4,82.3 3.5,81.6 2.9,80.8 2.5,79.9 2,79.1 1.6,78.2 1.2,77.3 0.8,76.4 0.5,75.4 0.2,74.4 0,73.4 -0.2,72.3 -0.4,71.2 -0.5,70.1 -0.5,69 -0.5,67.9 -0.5,66.8 -0.4,65.7 -0.3,64.6 -0.2,63.6 0,62.6 0.2,61.6 0.5,60.6 0.8,59.7 1.1,58.8 1.5,57.9 1.9,57.1 2.4,56.3 2.9,55.5 3.4,54.8 3.9,54.1 4.5,53.4 5.1,52.8 5.8,52.2 6.5,51.7 7.2,51.2 8,50.7 8.8,50.2 9.7,49.8 10.6,49.4 11.5,49.1 12.5,48.8 13.5,48.6 14.5,48.4 15.6,48.3 16.7,48.2 17.8,48.2 18.9,48.2 38.7,48.2 39.9,48.3 41,48.4 42.1,48.6 43.1,48.8 44.1,49 45.1,49.3 46.1,49.7 47,50.1 47.9,50.5 48.7,51 49.5,51.5 50.3,52.1 51,52.7 51.7,53.3 52.4,54 53,54.7 53.6,55.5 54.1,56.2 54.6,57.1 55.1,57.9 55.6,58.8 56,59.7 56.4,60.6 56.7,61.6 57,62.5 57.3,63.5 57.5,64.6 57.7,65.6 57.8,66.7 57.9,67.8 58,68.9 58),(73.8 38.9,72.3 41.6,69 42.6,65.6 41.7,64.1 38.9,64.1 18.9,65.5 16.2,68.8 15.2,72.1 16.1,73.8 18.9,73.8 38.9)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn 'Yo' into a geometric shape and write it out in a way that keeps only 1 decimal place.", "source": "original", "new_id": 258}
{"id": 44, "function": "ST_Square", "question": "想象一个正方形，它的中心就在(0, 0)，每边都是1.0的长度，然后把它换成3857这个数字的坐标系统，你能给我它的形状文本吗？", "sql": "SELECT ST_AsText(ST_SetSRID(ST_Square(1.0, 0, 0), 3857));", "execution_result": [["POLYGON((0 0,0 1,1 1,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a square with its center at (0, 0), each side being 1.0 in length, then swap it into the coordinate system of the number 3857; can you give me its shape text?", "source": "original", "new_id": 256}
{"id": 45, "function": "ST_Letters", "question": "把'Yo'这个词变成一个空间图形，然后用一种简单的方式表示出来，小数点后只要留一位就行。", "sql": "SELECT ST_AsText(ST_Letters('Yo'), 1);", "execution_result": [["MULTIPOLYGON(((34.5 73.8,54 73.8,53.1 72.9,35.1 28.7,35.1 0.9,36 0,18 0,19 0.9,19 28.7,0.9 72.9,0 73.8,19.5 73.8,18.6 72.9,23 61.6,27 47.4,31.1 61.9,35.4 72.9,34.5 73.8)),((68.9 58,70 58,71.1 57.9,72.2 57.8,73.2 57.7,74.3 57.5,75.3 57.3,76.2 57.1,77.2 56.8,78.1 56.5,79 56.1,79.9 55.7,80.7 55.3,81.5 54.8,82.3 54.3,83 53.7,83.7 53.1,84.4 52.5,85 51.8,85.6 51.1,86.1 50.3,86.6 49.5,87.1 48.7,87.6 47.9,88 47,88.4 46.1,88.7 45.1,89 44.1,89.2 43.1,89.4 42.1,89.5 41,89.6 39.9,89.6 38.7,89.6 18.9,89.6 17.7,89.5 16.6,89.4 15.5,89.2 14.5,89 13.5,88.8 12.5,88.5 11.5,88.1 10.6,87.7 9.7,87.3 8.9,86.8 8.1,86.3 7.3,85.7 6.6,85.1 5.9,84.5 5.2,83.8 4.6,83.1 4,82.3 3.5,81.6 2.9,80.8 2.5,79.9 2,79.1 1.6,78.2 1.2,77.3 0.8,76.4 0.5,75.4 0.2,74.4 0,73.4 -0.2,72.3 -0.4,71.2 -0.5,70.1 -0.5,69 -0.5,67.9 -0.5,66.8 -0.4,65.7 -0.3,64.6 -0.2,63.6 0,62.6 0.2,61.6 0.5,60.6 0.8,59.7 1.1,58.8 1.5,57.9 1.9,57.1 2.4,56.3 2.9,55.5 3.4,54.8 3.9,54.1 4.5,53.4 5.1,52.8 5.8,52.2 6.5,51.7 7.2,51.2 8,50.7 8.8,50.2 9.7,49.8 10.6,49.4 11.5,49.1 12.5,48.8 13.5,48.6 14.5,48.4 15.6,48.3 16.7,48.2 17.8,48.2 18.9,48.2 38.7,48.2 39.9,48.3 41,48.4 42.1,48.6 43.1,48.8 44.1,49 45.1,49.3 46.1,49.7 47,50.1 47.9,50.5 48.7,51 49.5,51.5 50.3,52.1 51,52.7 51.7,53.3 52.4,54 53,54.7 53.6,55.5 54.1,56.2 54.6,57.1 55.1,57.9 55.6,58.8 56,59.7 56.4,60.6 56.7,61.6 57,62.5 57.3,63.5 57.5,64.6 57.7,65.6 57.8,66.7 57.9,67.8 58,68.9 58),(73.8 38.9,72.3 41.6,69 42.6,65.6 41.7,64.1 38.9,64.1 18.9,65.5 16.2,68.8 15.2,72.1 16.1,73.8 18.9,73.8 38.9)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the word 'Yo' into a spatial shape and show it in a simple way, keeping just one decimal place.", "source": "original", "new_id": 260}
{"id": 45, "function": "ST_Letters", "question": "把'Yo'变成那些字母的形状，然后用一种格式显示出来，记得保留一位小数。", "sql": "SELECT ST_AsText(ST_Letters('Yo'), 1);", "execution_result": [["MULTIPOLYGON(((34.5 73.8,54 73.8,53.1 72.9,35.1 28.7,35.1 0.9,36 0,18 0,19 0.9,19 28.7,0.9 72.9,0 73.8,19.5 73.8,18.6 72.9,23 61.6,27 47.4,31.1 61.9,35.4 72.9,34.5 73.8)),((68.9 58,70 58,71.1 57.9,72.2 57.8,73.2 57.7,74.3 57.5,75.3 57.3,76.2 57.1,77.2 56.8,78.1 56.5,79 56.1,79.9 55.7,80.7 55.3,81.5 54.8,82.3 54.3,83 53.7,83.7 53.1,84.4 52.5,85 51.8,85.6 51.1,86.1 50.3,86.6 49.5,87.1 48.7,87.6 47.9,88 47,88.4 46.1,88.7 45.1,89 44.1,89.2 43.1,89.4 42.1,89.5 41,89.6 39.9,89.6 38.7,89.6 18.9,89.6 17.7,89.5 16.6,89.4 15.5,89.2 14.5,89 13.5,88.8 12.5,88.5 11.5,88.1 10.6,87.7 9.7,87.3 8.9,86.8 8.1,86.3 7.3,85.7 6.6,85.1 5.9,84.5 5.2,83.8 4.6,83.1 4,82.3 3.5,81.6 2.9,80.8 2.5,79.9 2,79.1 1.6,78.2 1.2,77.3 0.8,76.4 0.5,75.4 0.2,74.4 0,73.4 -0.2,72.3 -0.4,71.2 -0.5,70.1 -0.5,69 -0.5,67.9 -0.5,66.8 -0.4,65.7 -0.3,64.6 -0.2,63.6 0,62.6 0.2,61.6 0.5,60.6 0.8,59.7 1.1,58.8 1.5,57.9 1.9,57.1 2.4,56.3 2.9,55.5 3.4,54.8 3.9,54.1 4.5,53.4 5.1,52.8 5.8,52.2 6.5,51.7 7.2,51.2 8,50.7 8.8,50.2 9.7,49.8 10.6,49.4 11.5,49.1 12.5,48.8 13.5,48.6 14.5,48.4 15.6,48.3 16.7,48.2 17.8,48.2 18.9,48.2 38.7,48.2 39.9,48.3 41,48.4 42.1,48.6 43.1,48.8 44.1,49 45.1,49.3 46.1,49.7 47,50.1 47.9,50.5 48.7,51 49.5,51.5 50.3,52.1 51,52.7 51.7,53.3 52.4,54 53,54.7 53.6,55.5 54.1,56.2 54.6,57.1 55.1,57.9 55.6,58.8 56,59.7 56.4,60.6 56.7,61.6 57,62.5 57.3,63.5 57.5,64.6 57.7,65.6 57.8,66.7 57.9,67.8 58,68.9 58),(73.8 38.9,72.3 41.6,69 42.6,65.6 41.7,64.1 38.9,64.1 18.9,65.5 16.2,68.8 15.2,72.1 16.1,73.8 18.9,73.8 38.9)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn 'Yo' into shapes of those letters, then show it in a certain format, remembering to keep one decimal place.", "source": "original", "new_id": 259}
{"id": 45, "function": "ST_Letters", "question": "把'Yo'变成一个有趣的图形，然后用一种格式来表达它，只需要保留一位小数的精度就好。", "sql": "SELECT ST_AsText(ST_Letters('Yo'), 1);", "execution_result": [["MULTIPOLYGON(((34.5 73.8,54 73.8,53.1 72.9,35.1 28.7,35.1 0.9,36 0,18 0,19 0.9,19 28.7,0.9 72.9,0 73.8,19.5 73.8,18.6 72.9,23 61.6,27 47.4,31.1 61.9,35.4 72.9,34.5 73.8)),((68.9 58,70 58,71.1 57.9,72.2 57.8,73.2 57.7,74.3 57.5,75.3 57.3,76.2 57.1,77.2 56.8,78.1 56.5,79 56.1,79.9 55.7,80.7 55.3,81.5 54.8,82.3 54.3,83 53.7,83.7 53.1,84.4 52.5,85 51.8,85.6 51.1,86.1 50.3,86.6 49.5,87.1 48.7,87.6 47.9,88 47,88.4 46.1,88.7 45.1,89 44.1,89.2 43.1,89.4 42.1,89.5 41,89.6 39.9,89.6 38.7,89.6 18.9,89.6 17.7,89.5 16.6,89.4 15.5,89.2 14.5,89 13.5,88.8 12.5,88.5 11.5,88.1 10.6,87.7 9.7,87.3 8.9,86.8 8.1,86.3 7.3,85.7 6.6,85.1 5.9,84.5 5.2,83.8 4.6,83.1 4,82.3 3.5,81.6 2.9,80.8 2.5,79.9 2,79.1 1.6,78.2 1.2,77.3 0.8,76.4 0.5,75.4 0.2,74.4 0,73.4 -0.2,72.3 -0.4,71.2 -0.5,70.1 -0.5,69 -0.5,67.9 -0.5,66.8 -0.4,65.7 -0.3,64.6 -0.2,63.6 0,62.6 0.2,61.6 0.5,60.6 0.8,59.7 1.1,58.8 1.5,57.9 1.9,57.1 2.4,56.3 2.9,55.5 3.4,54.8 3.9,54.1 4.5,53.4 5.1,52.8 5.8,52.2 6.5,51.7 7.2,51.2 8,50.7 8.8,50.2 9.7,49.8 10.6,49.4 11.5,49.1 12.5,48.8 13.5,48.6 14.5,48.4 15.6,48.3 16.7,48.2 17.8,48.2 18.9,48.2 38.7,48.2 39.9,48.3 41,48.4 42.1,48.6 43.1,48.8 44.1,49 45.1,49.3 46.1,49.7 47,50.1 47.9,50.5 48.7,51 49.5,51.5 50.3,52.1 51,52.7 51.7,53.3 52.4,54 53,54.7 53.6,55.5 54.1,56.2 54.6,57.1 55.1,57.9 55.6,58.8 56,59.7 56.4,60.6 56.7,61.6 57,62.5 57.3,63.5 57.5,64.6 57.7,65.6 57.8,66.7 57.9,67.8 58,68.9 58),(73.8 38.9,72.3 41.6,69 42.6,65.6 41.7,64.1 38.9,64.1 18.9,65.5 16.2,68.8 15.2,72.1 16.1,73.8 18.9,73.8 38.9)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn 'Yo' into an interesting shape, then express it in a format, only keeping one decimal place precision.", "source": "original", "new_id": 262}
{"id": 46, "function": "ST_Letters", "question": "把'Yo'变成几何形状后，想象一下这个形状被放大10倍，然后再往右和往上各移动100个单位，结果会是什么样子？", "sql": "SELECT ST_Translate(ST_Scale(ST_Letters('Yo'), 10, 10), 100,100);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine turning 'Yo' into a geometric shape, then making it 10 times bigger, and moving it 100 units to the right and up. What would it look like?", "source": "original", "new_id": 266}
{"id": 47, "function": "GeometryType", "question": "看看由这些数字组成的折线是什么类型，77.29 29.07到77.42 29.26再到77.27 29.31，然后回到77.29 29.07，这样一条线哦。", "sql": "SELECT GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["LINESTRING"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Figure out what kind of thing we have with a line made of numbers like 77.29 29.07 to 77.42 29.26 then 77.27 29.31, and back to 77.29 29.07. It's a line, you see.", "source": "original", "new_id": 269}
{"id": 47, "function": "GeometryType", "question": "告诉我由那些坐标点组成的形状叫什么，像是77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07这些。", "sql": "SELECT GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["LINESTRING"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Tell me what the shape made by those points is called, like 77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07.", "source": "original", "new_id": 273}
{"id": 47, "function": "GeometryType", "question": "看看这些坐标串起来形成的形状叫什么，坐标是77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07。", "sql": "SELECT GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["LINESTRING"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check what this shape formed by connecting these coordinates is called, the coordinates are 77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07.", "source": "original", "new_id": 272}
{"id": 47, "function": "GeometryType", "question": "看看由这些点(77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07)连成的线，它是什么类型的形状呢？", "sql": "SELECT GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["LINESTRING"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at the line formed by these points (77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07), what kind of shape is it?", "source": "original", "new_id": 271}
{"id": 46, "function": "ST_Letters", "question": "把‘Yo’这个形状先变大到原来的10倍，然后在平面上移开一点点，具体来说是朝右边和上边各移动100个单位，最后告诉我这个变动后的形状长啥样。", "sql": "SELECT ST_Translate(ST_Scale(ST_Letters('Yo'), 10, 10), 100,100);", "execution_result": [["010600000002000000010300000001000000120000000000000000D07B400000000000308A4000000000000084400000000000308A400000000000B883400000000000E889400000000000307C4000000000003078400000000000307C400000000000405B400000000000C07C4000000000000059400000000000807140000000000000594000000000002072400000000000405B40000000000020724000000000003078400000000000405B400000000000E8894000000000000059400000000000308A4000000000007072400000000000308A400000000000E071400000000000E889400000000000A07440000000000060864000000000002077400000000000F081400000000000B0794000000000007886400000000000607C400000000000E889400000000000D07B400000000000308A4001030000000200000083000000483BB60B92A588400000000000408540483BB60B92FD88400000000000408540483BB60B925589400000000000388540493BB60B92AD89400000000000308540493BB60B92FD89400000000000288540483BB60B92558A400000000000188540483BB60B92A58A400000000000088540493BB60B92ED8A400000000000F88440493BB60B923D8B400000000000E08440483BB60B92858B400000000000C88440483BB60B92CD8B400000000000A88440493BB60B92158C400000000000888440493BB60B92558C400000000000688440483BB60B92958C400000000000408440483BB60B92D58C400000000000188440483BB60B920D8D400000000000E88340493BB60B92458D400000000000B88340493BB60B927D8D400000000000888340483BB60B92AD8D400000000000508340483BB60B92DD8D400000000000188340483BB60B92058E400000000000D88240483BB60B922D8E400000000000988240483BB60B92558E400000000000588240483BB60B927D8E400000000000188240483BB60B929D8E400000000000D08140493BB60B92BD8E400000000000888140493BB60B92D58E400000000000388140483BB60B92ED8E400000000000E88040493BB60B92FD8E400000000000988040493BB60B920D8F400000000000488040483BB60B92158F400000000000E07F40483BB60B921D8F400100000000307F40483BB60B921D8F400000000000707E40483BB60B921D8F400000000000107240483BB60B921D8F400000000000507140483BB60B92158F400000000000A07040493BB60B920D8F400000000000E06F40493BB60B92FD8E400000000000A06E40483BB60B92ED8E400000000000606D40483BB60B92DD8E400000000000206C40483BB60B92C58E400000000000E06A40483BB60B92A58E400000000000C06940493BB60B92858E400000000000A06840483BB60B92658E400000000000A06740483BB60B923D8E400000000000A06640483BB60B92158E400000000000A06540493BB60B92E58D400000000000C06440483BB60B92B58D400000000000E06340483BB60B92858D400000000000006340483BB60B924D8D400000000000406240483BB60B92158D400000000000806140483BB60B92D58C400000000000E06040483BB60B929D8C400000000000206040483BB60B925D8C400000000000405F40493BB60B92158C400000000000005E40483BB60B92D58B400000000000005D40493BB60B928D8B400000000000005C40483BB60B92458B400000000000005B40483BB60B92FD8A400000000000405A40483BB60B92AD8A400000000000805940483BB60B925D8A400000000000005940483BB60B920D8A400000000000805840483BB60B92B589400000000000005840493BB60B925D89400000000000C05740483BB60B920589400000000000C05740483BB60B92AD88400000000000C05740483BB60B925588400000000000C05740483BB60B92FD87400000000000005840493BB60B92A587400000000000405840483BB60B924D87400000000000805840483BB60B92FD86400000000000005940483BB60B92AD86400000000000805940483BB60B925D86400000000000405A40483BB60B920D86400000000000005B40483BB60B92C585400000000000C05B40483BB60B927D85400000000000C05C40483BB60B923585400000000000C05D40483BB60B92F584400000000000005F40483BB60B92B584400000000000206040483BB60B927584400000000000C06040483BB60B923D84400000000000606140483BB60B920584400000000000206240483BB60B92CD83400000000000E06240483BB60B929D83400000000000C06340483BB60B926D83400000000000A06440483BB60B924583400000000000806540483BB60B921D83400000000000806640483BB60B92F582400000000000806740483BB60B92CD82400000000000A06840483BB60B92AD82400000000000C06940483BB60B928D82400000000000E06A40483BB60B927582400000000000206C40483BB60B925D82400000000000606D40483BB60B924D82400000000000A06E40483BB60B923D82400000000000007040483BB60B923582400000000000B07040483BB60B922D82400000000000607140483BB60B922D82400000000000107240483BB60B922D82400000000000707E40483BB60B922D82400100000000307F40483BB60B923582400000000000E07F40483BB60B923D82400000000000488040483BB60B924D82400000000000988040483BB60B925D82400000000000E88040483BB60B926D82400000000000388140483BB60B928582400000000000888140483BB60B92A582400000000000D08140483BB60B92C582400000000000188240483BB60B92E582400000000000588240483BB60B920D83400000000000988240483BB60B923583400000000000D88240483BB60B926583400000000000108340483BB60B929583400000000000488340483BB60B92C583400000000000808340483BB60B92FD83400000000000B08340483BB60B923584400000000000E08340483BB60B927584400000000000088440483BB60B92AD84400000000000308440483BB60B92F584400000000000588440483BB60B923585400000000000808440483BB60B927D85400000000000A08440483BB60B92C585400000000000C08440483BB60B920D86400000000000D88440483BB60B925D86400000000000F08440483BB60B92A586400000000000088540483BB60B92F586400000000000188540483BB60B924D87400000000000288540483BB60B929D87400000000000308540493BB60B92F587400000000000388540483BB60B924D88400000000000408540483BB60B92A5884000000000004085400B000000483BB60B922D8A400100000000907E40483BB60B92B589400000000000208040483BB60B92AD88400000000000708040483BB60B929D87400000000000288040483BB60B922587400100000000907E40483BB60B922587400000000000107240483BB60B929587400000000000607040483BB60B929D88400000000000806F40483BB60B92A589400000000000507040483BB60B922D8A400000000000107240483BB60B922D8A400100000000907E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the shape of 'Yo', make it 10 times bigger, then shift it a bit on the plane, specifically 100 units to the right and 100 units up, and finally, tell me what this changed shape looks like.", "source": "original", "new_id": 264}
{"id": 46, "function": "ST_Letters", "question": "先把'Yo'变成一个图形，然后把这个图形在左右和上下各放大10倍，再把放大的图形往右移100个单位，往上移100个单位，看看最后是什么样子。", "sql": "SELECT ST_Translate(ST_Scale(ST_Letters('Yo'), 10, 10), 100,100);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "First, turn 'Yo' into a shape, then make this shape 10 times bigger in both left-right and up-down directions, and finally move the enlarged shape 100 units to the right and 100 units up, and see what it looks like in the end.", "source": "original", "new_id": 265}
{"id": 46, "function": "ST_Letters", "question": "‘Yo’这个词，想象它被放大到原来的10倍，然后好像被推到了右边和上面各100个单位的位置上，你能告诉我它的新坐标吗？", "sql": "SELECT ST_Translate(ST_Scale(ST_Letters('Yo'), 10, 10), 100,100);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine the word 'Yo' being magnified 10 times its size, then as if it was nudged 100 units to the right and up. Can you tell me its new position?", "source": "original", "new_id": 267}
{"id": 46, "function": "ST_Letters", "question": "先把'Yo'这个字变成图形，然后让它在横竖方向每边都变大十倍，再让它往右边和上边各挪动100单位，最后看它的样子是什么。", "sql": "SELECT ST_Translate(ST_Scale(ST_Letters('Yo'), 10, 10), 100,100);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "First turn the letters 'Yo' into a shape, then make it ten times bigger in both horizontal and vertical directions, and then shift it 100 units to the right and up. Finally, see what it looks like.", "source": "original", "new_id": 263}
{"id": 47, "function": "GeometryType", "question": "看看那条由(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)这些点连起来的线是什么类型吧。", "sql": "SELECT GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["LINESTRING"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you check what type that line made by connecting (77.29 29.07), (77.42 29.26), (77.27 29.31), and (77.29 29.07) is?", "source": "original", "new_id": 270}
{"id": 47, "function": "GeometryType", "question": "给我看看这些连接起来的小点的形状叫什么名字，点的位置是77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07。", "sql": "SELECT GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["LINESTRING"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what the shape made by connecting these little dots is called, where the dots are at 77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07.", "source": "original", "new_id": 274}
{"id": 48, "function": "GeometryType", "question": "看看由那些坐标构成的形状，比如(0 0 0)到(1 1 1)，像个盒子一样的，是什么类型的几何物件呢？", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What type of geometric thing is made by those points from (0 0 0) to (1 1 1), kind of like a box shape?", "source": "original", "new_id": 276}
{"id": 48, "function": "GeometryType", "question": "看看那个由六个面组成的立体图形，包含那些坐标，比如(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)等等，想知道它是什么类型的几何形状。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at that 3D shape made of six sides, with coordinates like (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0) and so on, and find out what kind of geometric shape it is.", "source": "original", "new_id": 275}
{"id": 48, "function": "GeometryType", "question": "有一个形状由6个面组成，面上的小点坐标是这样排布的：比如第一个面是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)等等。你能找到这个形状的类型吗？", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a shape made up of 6 sides, with little dots positioned like this: for instance, the first side has (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0) and so on. Can you identify what type of shape this is?", "source": "original", "new_id": 277}
{"id": 50, "function": "ST_Boundary", "question": "给出这条连接(100 150), (50 60), (70 80), (160 170)的小线条的最外圈形状。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'LINESTRING(100 150,50 60, 70 80, 160 170)'::geometry AS geom) AS f;", "execution_result": [["010400000002000000010100000000000000000059400000000000C06240010100000000000000000064400000000000406540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide the outer shape of the little line connecting (100 150), (50 60), (70 80), (160 170).", "source": "original", "new_id": 287}
{"id": 48, "function": "GeometryType", "question": "这个由六个面组成的立体形状，里面有一些坐标，比如((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0))，你能告诉我它的具体类型名称吗？", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "This 3D shape made up of six faces, with some coordinates like ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), can you tell me its specific type name?", "source": "original", "new_id": 278}
{"id": 49, "function": "GeometryType", "question": "看看由两个三角形组成的小三角片网，点是 (0 0 0), (0 0 1), (0 1 0) 和 (0 0 0), (0 1 0), (1 1 0)，这类形状叫什么名字？", "sql": "SELECT GeometryType(geom) as result \nFROM (SELECT ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))') AS geom) AS g;", "execution_result": [["TIN"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check out the name for a shape made of small triangle pieces, with points like (0 0 0), (0 0 1), (0 1 0) and (0 0 0), (0 1 0), (1 1 0). What is this called?", "source": "original", "new_id": 285}
{"id": 50, "function": "ST_Boundary", "question": "看看由这些点组成的线条：从(100 150)到(50 60)，再到(70 80)和(160 170)，它的边缘长什么样子？", "sql": "SELECT ST_Boundary('LINESTRING(100 150,50 60, 70 80, 160 170)'::geometry);", "execution_result": [["010400000002000000010100000000000000000059400000000000C06240010100000000000000000064400000000000406540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at the line made from these points: from (100 150) to (50 60), then to (70 80) and (160 170), and see what its edges look like?", "source": "original", "new_id": 289}
{"id": 49, "function": "GeometryType", "question": "想知道由一些点组成的两个三角形面构成的奇怪形状是什么类型，第一个面有点(0 0 0)、(0 0 1)、(0 1 0)，第二个面有点(0 0 0)、(0 1 0)、(1 1 0)。", "sql": "SELECT GeometryType(geom) as result \nFROM (SELECT ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))') AS geom) AS g;", "execution_result": [["TIN"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Curious about what type a strange shape made of two triangular surfaces formed by some points is, the first surface has points (0 0 0), (0 0 1), (0 1 0), and the second surface has points (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 283}
{"id": 49, "function": "GeometryType", "question": "看看由两个三角形片组成的奇特网络，它们的点是(0 0 0)、(0 0 1)、(0 1 0)和(0 0 0)、(0 1 0)、(1 1 0)，它是什么样的形状呢？", "sql": "SELECT GeometryType(geom) as result \nFROM (SELECT ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))') AS geom) AS g;", "execution_result": [["TIN"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check out the peculiar network made of two triangular pieces, with points at (0 0 0), (0 0 1), (0 1 0) and (0 0 0), (0 1 0), (1 1 0). What kind of shape is it?", "source": "original", "new_id": 282}
{"id": 50, "function": "ST_Boundary", "question": "找出由这些小点(100 150)、(50 60)、(70 80)和(160 170)连成的曲线的外框是什么。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'LINESTRING(100 150,50 60, 70 80, 160 170)'::geometry AS geom) AS f;", "execution_result": [["010400000002000000010100000000000000000059400000000000C06240010100000000000000000064400000000000406540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out what the outer frame is for the curve made by connecting these little dots (100 150), (50 60), (70 80), and (160 170).", "source": "original", "new_id": 288}
{"id": 49, "function": "GeometryType", "question": "有一个由两个小三角形组成的复杂形状，分别有这些点：(0 0 0,0 0 1,0 1 0)和(0 0 0,0 1 0,1 1 0)，想知道这种形状的类型叫什么。", "sql": "SELECT GeometryType(geom) as result \nFROM (SELECT ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))') AS geom) AS g;", "execution_result": [["TIN"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a complex shape made of two little triangles with these points: (0 0 0,0 0 1,0 1 0) and (0 0 0,0 1 0,1 1 0). I'd like to know what this shape type is called.", "source": "original", "new_id": 281}
{"id": 48, "function": "GeometryType", "question": "想知道一个由六个面组成的复杂立体结构叫什么类型，这些面有些坐标，比如(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)等等。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Curious about what type a complex structure with six faces is called, with some coordinates like (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0) and so on.", "source": "original", "new_id": 279}
{"id": 49, "function": "GeometryType", "question": "那种由两块三角形面组成的立体形状，它的名字是什么？第一块有点是(0 0 0), (0 0 1), (0 1 0)，而第二块有点是(0 0 0), (0 1 0), (1 1 0)。", "sql": "SELECT GeometryType(geom) as result \nFROM (SELECT ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))') AS geom) AS g;", "execution_result": [["TIN"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What's the name of that 3D shape made of two triangular patches? The first patch has points (0 0 0), (0 0 1), (0 1 0), and the second patch has points (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 284}
{"id": 50, "function": "ST_Boundary", "question": "给出连接这些点的长条形状的外边框，点在这里：100 150, 50 60, 70 80, 和 160 170。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'LINESTRING(100 150,50 60, 70 80, 160 170)'::geometry AS geom) AS f;", "execution_result": [["010400000002000000010100000000000000000059400000000000C06240010100000000000000000064400000000000406540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide the outer edges of the long shape connecting these points, located at: 100 150, 50 60, 70 80, and 160 170.", "source": "original", "new_id": 290}
{"id": 50, "function": "ST_Boundary", "question": "把包含在那条从(100 150)到(160 170)经过这些点的线的边界，用一种字符串方式展示出来。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'LINESTRING(100 150,50 60, 70 80, 160 170)'::geometry AS geom) AS f;", "execution_result": [["010400000002000000010100000000000000000059400000000000C06240010100000000000000000064400000000000406540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show the boundary of that line going from (100 150) to (160 170) through these points, in a string form.", "source": "original", "new_id": 292}
{"id": 50, "function": "ST_Boundary", "question": "给我看看由这些小点(100 150)、(50 60)、(70 80)、(160 170)连成的线形成的边界会是什么样子。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'LINESTRING(100 150,50 60, 70 80, 160 170)'::geometry AS geom) AS f;", "execution_result": [["010400000002000000010100000000000000000059400000000000C06240010100000000000000000064400000000000406540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what the boundary looks like for the line formed by these little dots: (100 150), (50 60), (70 80), (160 170).", "source": "original", "new_id": 291}
{"id": 49, "function": "GeometryType", "question": "想象一些小三角形在空间中连接起来，具体位置有 (0 0 0), (0 0 1), (0 1 0) 和 (0 0 0), (0 1 0), (1 1 0)，它们组成一个奇特的网，看看这个网的名字是什么吧。", "sql": "SELECT GeometryType(geom) as result \nFROM (SELECT ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))') AS geom) AS g;", "execution_result": [["TIN"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine some small triangles connected in space, with specific positions at (0 0 0), (0 0 1), (0 1 0) and (0 0 0), (0 1 0), (1 1 0). They form a peculiar network. Let's find out what the name of this network is.", "source": "original", "new_id": 286}
{"id": 52, "function": "ST_Boundary", "question": "把那个由(1 1 1)、(0 0 1)、(-1 1 1)组成的立体形状变成它的边缘线，然后给我看它的特别字符串样子。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))')));", "execution_result": [["LINESTRING(1 1 1,0 0 1,-1 1 1,1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that 3D shape with (1 1 1), (0 0 1), (-1 1 1) into its edge line, and show me its special string form.", "source": "original", "new_id": 300}
{"id": 52, "function": "ST_Boundary", "question": "把那个有点立体感的形状，像是围绕着点(1 1 1, 0 0 1, -1 1 1, 1 1 1)的，弄成它的外边框，然后让它以某种格式显示出来。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))')));", "execution_result": [["LINESTRING(1 1 1,0 0 1,-1 1 1,1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that somewhat 3D shape, like it's surrounding the points (1 1 1, 0 0 1, -1 1 1, 1 1 1), and turn it into its outer frame, then have it show up in some format.", "source": "original", "new_id": 301}
{"id": 51, "function": "ST_Boundary", "question": "有一个由外圈和内圈小点串联成的形状，外圈是(10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130)，内圈是(70 40, 100 50, 120 80, 80 110, 50 90, 70 40)，找出把这些点连起来的线条。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'POLYGON (( 10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130 ), ( 70 40, 100 50, 120 80, 80 110, 50 90, 70 40 ))'::geometry AS geom) AS f;", "execution_result": [["0105000000020000000102000000080000000000000000002440000000000040604000000000000049400000000000C067400000000000805B400000000000C0674000000000008061400000000000C062400000000000C06240000000000000544000000000000059400000000000002440000000000000344000000000000044400000000000002440000000000040604001020000000600000000000000008051400000000000004440000000000000594000000000000049400000000000005E40000000000000544000000000000054400000000000805B400000000000004940000000000080564000000000008051400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a shape made by connecting little dots in outer and inner loops. The outer loop is (10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130), and the inner loop is (70 40, 100 50, 120 80, 80 110, 50 90, 70 40). Find the lines that link these dots.", "source": "original", "new_id": 295}
{"id": 46, "function": "ST_Letters", "question": "如果把'Yo'变成某种图形，然后让它在横竖两个方向都变大10倍，再往右和往上各移动100单位，这个图形的样子是怎样的？", "sql": "SELECT ST_Translate(ST_Scale(ST_Letters('Yo'), 10, 10), 100,100);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you turn 'Yo' into some sort of shape, then make it 10 times bigger in both horizontal and vertical directions, and move it 100 units to the right and up, what would that shape look like?", "source": "original", "new_id": 268}
{"id": 52, "function": "ST_Boundary", "question": "给一个有趣的形状，它在三维空间里有这些点：1 1 1, 0 0 1, -1 1 1, 1 1 1。能不能告诉我包围它的线是什么样子，并用一种特别的格式来表达？", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))')));", "execution_result": [["LINESTRING(1 1 1,0 0 1,-1 1 1,1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Here's a curious shape living in 3D space with these points: 1 1 1, 0 0 1, -1 1 1, 1 1 1. Could you tell me what the line that wraps around it looks like, and express it in a special format?", "source": "original", "new_id": 299}
{"id": 51, "function": "ST_Boundary", "question": "有一个多边形，它有一个大圈和一个小圈，边上的点是(10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130)和(70 40, 100 50, 120 80, 80 110, 50 90, 70 40)，你能告诉我包住这些点的线条长什么样吗？", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'POLYGON (( 10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130 ), ( 70 40, 100 50, 120 80, 80 110, 50 90, 70 40 ))'::geometry AS geom) AS f;", "execution_result": [["0105000000020000000102000000080000000000000000002440000000000040604000000000000049400000000000C067400000000000805B400000000000C0674000000000008061400000000000C062400000000000C06240000000000000544000000000000059400000000000002440000000000000344000000000000044400000000000002440000000000040604001020000000600000000000000008051400000000000004440000000000000594000000000000049400000000000005E40000000000000544000000000000054400000000000805B400000000000004940000000000080564000000000008051400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a polygon with a big loop and a small loop, having points at (10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130) and (70 40, 100 50, 120 80, 80 110, 50 90, 70 40). Can you show me what the line enclosing these points looks like?", "source": "original", "new_id": 293}
{"id": 51, "function": "ST_Boundary", "question": "看看这个多边形，它有一个外圈和一个内圈，能不能找出把它们围起来的那条线？外圈是(10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130)，内圈是(70 40, 100 50, 120 80, 80 110, 50 90, 70 40)。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'POLYGON (( 10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130 ), ( 70 40, 100 50, 120 80, 80 110, 50 90, 70 40 ))'::geometry AS geom) AS f;", "execution_result": [["0105000000020000000102000000080000000000000000002440000000000040604000000000000049400000000000C067400000000000805B400000000000C0674000000000008061400000000000C062400000000000C06240000000000000544000000000000059400000000000002440000000000000344000000000000044400000000000002440000000000040604001020000000600000000000000008051400000000000004440000000000000594000000000000049400000000000005E40000000000000544000000000000054400000000000805B400000000000004940000000000080564000000000008051400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at this polygon with an outside loop and an inside loop, can you find the line that goes around them? The outer loop is (10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130), and the inner loop is (70 40, 100 50, 120 80, 80 110, 50 90, 70 40).", "source": "original", "new_id": 294}
{"id": 48, "function": "GeometryType", "question": "看看这些数字，想象一个有六个面的形状，什么名字能代表它呢？比如那些顶点是这样排列的：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0))、((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))、((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0))、((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0))、((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0))、((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Look at these numbers and imagine a shape with six faces; what name could represent it? For instance, the vertices are arranged like this: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 280}
{"id": 51, "function": "ST_Boundary", "question": "给你一些坐标点，比如外面的那些(10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130)，还有里面的(70 40, 100 50, 120 80, 80 110, 50 90, 70 40)，你能说出用线连接这些点的形状边缘吗？", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'POLYGON (( 10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130 ), ( 70 40, 100 50, 120 80, 80 110, 50 90, 70 40 ))'::geometry AS geom) AS f;", "execution_result": [["0105000000020000000102000000080000000000000000002440000000000040604000000000000049400000000000C067400000000000805B400000000000C0674000000000008061400000000000C062400000000000C06240000000000000544000000000000059400000000000002440000000000000344000000000000044400000000000002440000000000040604001020000000600000000000000008051400000000000004440000000000000594000000000000049400000000000005E40000000000000544000000000000054400000000000805B400000000000004940000000000080564000000000008051400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "You've got some points to think about, like those on the outside (10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130) and the ones inside (70 40, 100 50, 120 80, 80 110, 50 90, 70 40). Can you tell the outline of the shape that links these points?", "source": "original", "new_id": 298}
{"id": 52, "function": "ST_Boundary", "question": "能不能给我那个有点像三维形状边缘的结果，带上这些数字：1 1 1, 0 0 1, -1 1 1, 1 1 1，然后用一种特别的格式展示出来？", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))')));", "execution_result": [["LINESTRING(1 1 1,0 0 1,-1 1 1,1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show me the result that looks like the edge of a 3D shape, with these numbers: 1 1 1, 0 0 1, -1 1 1, 1 1 1, and display it in a special format?", "source": "original", "new_id": 302}
{"id": 51, "function": "ST_Boundary", "question": "给出一个形状，它围绕着那些点形成边界线，像是围住的区域，有外面的点是(10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130)，还有里面的点(70 40, 100 50, 120 80, 80 110, 50 90, 70 40)。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'POLYGON (( 10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130 ), ( 70 40, 100 50, 120 80, 80 110, 50 90, 70 40 ))'::geometry AS geom) AS f;", "execution_result": [["0105000000020000000102000000080000000000000000002440000000000040604000000000000049400000000000C067400000000000805B400000000000C0674000000000008061400000000000C062400000000000C06240000000000000544000000000000059400000000000002440000000000000344000000000000044400000000000002440000000000040604001020000000600000000000000008051400000000000004440000000000000594000000000000049400000000000005E40000000000000544000000000000054400000000000805B400000000000004940000000000080564000000000008051400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide a shape that outlines those points forming a boundary line, like an enclosed area, with outside points (10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130) and inside points (70 40, 100 50, 120 80, 80 110, 50 90, 70 40).", "source": "original", "new_id": 297}
{"id": 52, "function": "ST_Boundary", "question": "给我看看那些1 1 1, 0 0 1, -1 1 1, 1 1 1小点连起来的形状的外边线，用一种带有额外信息的文本格式表示出来。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))')));", "execution_result": [["LINESTRING(1 1 1,0 0 1,-1 1 1,1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the outer line of the shape formed by connecting those little points 1 1 1, 0 0 1, -1 1 1, 1 1 1, in a text format with extra details.", "source": "original", "new_id": 303}
{"id": 53, "function": "ST_Boundary", "question": "你能找出那个形状的边缘吗？它是由(1 1, 0 0, -1 1, 1 1)这些点组成的，然后告诉我它们的模样。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((1 1,0 0, -1 1, 1 1))')));", "execution_result": [["LINESTRING(1 1,0 0,-1 1,1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you find the edges of that shape? It's made from the points (1 1, 0 0, -1 1, 1 1). Then, let me know how they look.", "source": "original", "new_id": 305}
{"id": 52, "function": "ST_Boundary", "question": "对于那个由(1 1 1, 0 0 1, -1 1 1, 1 1 1)这些点构成的立体形状，找出它的外边线，并把结果用一种能显示高度的字符串形式表达出来。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))')));", "execution_result": [["LINESTRING(1 1 1,0 0 1,-1 1 1,1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that 3D shape made by the points (1 1 1, 0 0 1, -1 1 1, 1 1 1), find its outer line and express the result in a string format that can show height.", "source": "original", "new_id": 304}
{"id": 53, "function": "ST_Boundary", "question": "把那些点像(1 1), (0 0), (-1 1), (1 1)围成的图形，用一种描述线条的方式表达出来。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((1 1,0 0, -1 1, 1 1))')));", "execution_result": [["LINESTRING(1 1,0 0,-1 1,1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Describe the shape made by the points like (1 1), (0 0), (-1 1), (1 1) in a way that talks about the lines.", "source": "original", "new_id": 306}
{"id": 53, "function": "ST_Boundary", "question": "从那些点 (1 1), (0 0), (-1 1) 画出一个封闭的形状，然后告诉我它的外面线长什么样，用那种文本格式。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((1 1,0 0, -1 1, 1 1))')));", "execution_result": [["LINESTRING(1 1,0 0,-1 1,1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a closed shape from those points (1 1), (0 0), (-1 1), and then tell me what its outer line looks like, using that text format.", "source": "original", "new_id": 307}
{"id": 53, "function": "ST_Boundary", "question": "给一个形状是POLYGON((1 1,0 0, -1 1, 1 1))的东西，能不能说出它边框的具体样子，用一种特别的文本格式来表示？", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((1 1,0 0, -1 1, 1 1))')));", "execution_result": [["LINESTRING(1 1,0 0,-1 1,1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For a shape like POLYGON((1 1,0 0, -1 1, 1 1)), can you describe its edges in detail, using a special text format?", "source": "original", "new_id": 308}
{"id": 53, "function": "ST_Boundary", "question": "给出一个形状的外圈，用那些点(1 1, 0 0, -1 1, 1 1)围成的，看看它的线条是怎么写出来的。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((1 1,0 0, -1 1, 1 1))')));", "execution_result": [["LINESTRING(1 1,0 0,-1 1,1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide the outer loop of a shape made by those points (1 1, 0 0, -1 1, 1 1), and see how its lines are described.", "source": "original", "new_id": 310}
{"id": 53, "function": "ST_Boundary", "question": "能不能把那些点连起来，形成一个边界的文本描述？比如用1 1, 0 0, -1 1, 1 1这些坐标。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((1 1,0 0, -1 1, 1 1))')));", "execution_result": [["LINESTRING(1 1,0 0,-1 1,1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you connect those points to form a boundary text description? Like using the coordinates 1 1, 0 0, -1 1, 1 1.", "source": "original", "new_id": 309}
{"id": 54, "function": "ST_Boundary", "question": "对于那些在空中画的线段集合，给我它们边缘的奇妙表达，记得用那种常见的文本格式，保持坐标不变。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )')));", "execution_result": [["MULTIPOINT(1 1 1,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those lines drawn in the air, give me their edge's magical expression, remember to use that common text format, keeping the coordinates unchanged.", "source": "original", "new_id": 314}
{"id": 54, "function": "ST_Boundary", "question": "给我看看那些坐标连起来形成的复杂线条的边缘是什么样子，记得要把1 1 1和0 0 0.5这些数字都带上哦。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )')));", "execution_result": [["MULTIPOINT(1 1 1,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what the edges look like for those coordinates that connect into complex lines, and remember to include numbers like 1 1 1 and 0 0 0.5.", "source": "original", "new_id": 315}
{"id": 55, "function": "ST_Boundary", "question": "把那条线，像是经过点(1 1)、(0 0)、(-1 1)的路线，弄成一个边界，然后看看它变成了什么文本内容。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(1 1,0 0, -1 1)')));", "execution_result": [["MULTIPOINT((1 1),(-1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that line, like the route passing through points (1 1), (0 0), (-1 1), turn it into a boundary, and see what it becomes as text.", "source": "original", "new_id": 318}
{"id": 54, "function": "ST_Boundary", "question": "看看由一些点连成的两条3D线组成的形状边缘是什么样的，坐标是((1 1 1,0 0 0.5,-1 1 1)和(1 1 0.5,0 0 0.5,-1 1 0.5,1 1 0.5))，用EWKT的方式来描述。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )')));", "execution_result": [["MULTIPOINT(1 1 1,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at what the edges of a form made of two 3D lines connected by some points look like, with coordinates ((1 1 1,0 0 0.5,-1 1 1) and (1 1 0.5,0 0 0.5,-1 1 0.5,1 1 0.5)), and describe it using the EWKT way.", "source": "original", "new_id": 311}
{"id": 55, "function": "ST_Boundary", "question": "看看那条线从(1 1)到(0 0)再到(-1 1)的边缘是什么样子的，用一种特别的文字格式来表达它。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(1 1,0 0, -1 1)')));", "execution_result": [["MULTIPOINT((1 1),(-1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check out what the edge of that line looks like, going from (1 1) to (0 0) and then to (-1 1), and express it in a special text format.", "source": "original", "new_id": 317}
{"id": 54, "function": "ST_Boundary", "question": "对于由几组点组成的三维线段集合，像是从(1 1 1)到(0 0 0.5)再到(-1 1 1)那样，和另外一组从(1 1 0.5)经过(0 0 0.5)到(-1 1 0.5)又回到(1 1 0.5)的，尝试找出它们的边界，并以一种特别的文本格式展示结果。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )')));", "execution_result": [["MULTIPOINT(1 1 1,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For a set of 3D line pieces made up of points, like from (1 1 1) to (0 0 0.5) and then to (-1 1 1), along with another set from (1 1 0.5) through (0 0 0.5) to (-1 1 0.5) and back to (1 1 0.5), try to find the boundary and show the result in a special text format.", "source": "original", "new_id": 313}
{"id": 54, "function": "ST_Boundary", "question": "能不能给我看看那些连接着的小线段的边缘是什么样的，特别是那段从(1 1 1)到(0 0 0.5)再到(-1 1 1)，还有从(1 1 0.5)到(0 0 0.5)再到(-1 1 0.5)又回到(1 1 0.5)的整体样子，用那种EWKT格式来描述。", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )')));", "execution_result": [["MULTIPOINT(1 1 1,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show me what the edges of those connected little lines look like, especially the part from (1 1 1) to (0 0 0.5) and then to (-1 1 1), and also from (1 1 0.5) to (0 0 0.5) to (-1 1 0.5) and back to (1 1 0.5), described in that EWKT format?", "source": "original", "new_id": 316}
{"id": 55, "function": "ST_Boundary", "question": "给我看看由这些点组成的线的边缘是什么样子的，用那些WKT格式的字母表达出来。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(1 1,0 0, -1 1)')));", "execution_result": [["MULTIPOINT((1 1),(-1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what the edge looks like for a line made of these points, expressed in those WKT format letters.", "source": "original", "new_id": 320}
{"id": 54, "function": "ST_Boundary", "question": "想象一下有两个三维的线条，它们分别经过(1 1 1,0 0 0.5,-1 1 1)和(1 1 0.5,0 0 0.5,-1 1 0.5,1 1 0.5)这些点，能不能给出这些线条的外边界，用EWKT格式？", "sql": "SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )')));", "execution_result": [["MULTIPOINT(1 1 1,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine there are two 3D lines passing through points like (1 1 1,0 0 0.5,-1 1 1) and (1 1 0.5,0 0 0.5,-1 1 0.5,1 1 0.5). Could you provide the outer boundary of these lines in EWKT format?", "source": "original", "new_id": 312}
{"id": 55, "function": "ST_Boundary", "question": "把那些点连起来形成的形状的边界，用文字的方式表现出来，看看是什么样子，像是从(1 1)到(0 0)再到(-1 1)。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(1 1,0 0, -1 1)')));", "execution_result": [["MULTIPOINT((1 1),(-1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Express in words the boundary of the shape formed by connecting those points, starting at (1 1), then (0 0), and finally (-1 1), and see what it looks like.", "source": "original", "new_id": 321}
{"id": 55, "function": "ST_Boundary", "question": "给出那些点(1 1, 0 0, -1 1)连成的形状外沿的文字描述。", "sql": "SELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(1 1,0 0, -1 1)')));", "execution_result": [["MULTIPOINT((1 1),(-1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide the textual description of the outer edge formed by those points (1 1, 0 0, -1 1).", "source": "original", "new_id": 322}
{"id": 56, "function": "ST_BoundingDiagonal", "question": "想象一个圆心在(0,0)，半径是10的圆，找出它的边缘形成的那个盒子的对角线开始的地方，看看那里的X值是多少。", "sql": "SELECT ST_X(ST_StartPoint(ST_BoundingDiagonal( ST_Buffer(ST_Point(0,0),10) )));", "execution_result": [[-10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a circle centered at (0,0) with a radius of 10, find the starting place of the diagonal of the box formed by its edge, and see what the X value is there.", "source": "original", "new_id": 323}
{"id": 56, "function": "ST_BoundingDiagonal", "question": "如果你在0,0这个地方画一个圆，圆的半径是10单位，想知道那个包围盒对角线起始点的横坐标是多少呢？", "sql": "SELECT ST_X(ST_StartPoint(ST_BoundingDiagonal( ST_Buffer(ST_Point(0,0),10) )));", "execution_result": [[-10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine drawing a circle centered at 0,0 with a radius of 10 units. What's the X-coordinate of the starting point of the diagonal of the box that wraps around it?", "source": "original", "new_id": 324}
{"id": 56, "function": "ST_BoundingDiagonal", "question": "从那个圆心在(0,0)的扩展形状中，找出包围它的框架对角线起点的横坐标是什么。", "sql": "SELECT ST_X(ST_StartPoint(ST_BoundingDiagonal( ST_Buffer(ST_Point(0,0),10) )));", "execution_result": [[-10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From that expanded shape centered at (0,0), find out what the horizontal coordinate is for the starting point of the diagonal of the frame surrounding it.", "source": "original", "new_id": 326}
{"id": 55, "function": "ST_Boundary", "question": "找出那条连接点(1 1)、(0 0)和(-1 1)的线的终端点集合。", "sql": "SELECT ST_Boundary(ST_GeomFromText('LINESTRING(1 1,0 0, -1 1)'));", "execution_result": [["0104000000020000000101000000000000000000F03F000000000000F03F0101000000000000000000F0BF000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Identify the set of end points of the line connecting the points (1 1), (0 0), and (-1 1).", "source": "original", "new_id": 319}
{"id": 56, "function": "ST_BoundingDiagonal", "question": "想象一个圆圈，以(0, 0)为中心，半径是10。看看这个圆圈的外框，那条对角线的起点，那个起点的横坐标是多少呢？", "sql": "SELECT ST_X(ST_StartPoint(ST_BoundingDiagonal( ST_Buffer(ST_Point(0,0),10) )));", "execution_result": [[-10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a circle centered at (0, 0) with a radius of 10. Check out the outer frame of this circle, the starting point of that diagonal line, what's the horizontal coordinate of that starting point?", "source": "original", "new_id": 325}
{"id": 56, "function": "ST_BoundingDiagonal", "question": "找出围绕那个中心点(0,0)扩展10个单位后，那个框对角线的起始点的横坐标是多少呢？", "sql": "SELECT ST_X(ST_StartPoint(ST_BoundingDiagonal( ST_Buffer(ST_Point(0,0),10) )));", "execution_result": [[-10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What's the horizontal coordinate of the starting point of the diagonal of the box after expanding around that center point (0,0) by 10 units?", "source": "original", "new_id": 327}
{"id": 56, "function": "ST_BoundingDiagonal", "question": "假设有一个圆心在(0,0)的圆，半径是10，想知道那个大边框对角线起点的X坐标是多少。", "sql": "SELECT ST_X(ST_StartPoint(ST_BoundingDiagonal( ST_Buffer(ST_Point(0,0),10) )));", "execution_result": [[-10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine there's a circle centered at (0,0) with a radius of 10; what's the X-coordinate of the starting point of the big boundary's diagonal?", "source": "original", "new_id": 328}
{"id": 57, "function": "ST_CoordDim", "question": "找出这些数字串成的圆弧线的坐标有多少个维度：1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13。", "sql": "SELECT ST_CoordDim('CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out how many dimensions the coordinates formed by these numbers in a circular arc line have: 1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13.", "source": "original", "new_id": 329}
{"id": 57, "function": "ST_CoordDim", "question": "这些数字串联起来，看看它们有几个层次：1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13。", "sql": "SELECT ST_CoordDim('CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "These numbers linked together, check how many levels they have: 1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13.", "source": "original", "new_id": 333}
{"id": 57, "function": "ST_CoordDim", "question": "看看那些点(1 2 3)、(1 3 4)、(5 6 7)、(8 9 10)、(11 12 13)能组成的那条弯曲线条，有多少个数值描述它的坐标？", "sql": "SELECT ST_CoordDim('CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those points (1 2 3), (1 3 4), (5 6 7), (8 9 10), (11 12 13) that make up the curvy line, how many numbers describe its coordinates?", "source": "original", "new_id": 330}
{"id": 57, "function": "ST_CoordDim", "question": "找出那些奇妙弧线的坐标有多少层次，像是1 2 3这样的数字在一串圆形故事里。", "sql": "SELECT ST_CoordDim('CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Discover how many layers of coordinates those magical arcs have, like numbers 1 2 3 in a circular story.", "source": "original", "new_id": 332}
{"id": 58, "function": "ST_CoordDim", "question": "帮我看看那个坐标点1和2的维度是什么样的？", "sql": "SELECT ST_CoordDim(ST_Point(1,2));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me what the dimensions look like for that coordinate point 1 and 2?", "source": "original", "new_id": 337}
{"id": 58, "function": "ST_CoordDim", "question": "告诉我那个用(1,2)坐标画的小点有几个维度？", "sql": "SELECT ST_CoordDim(ST_Point(1,2));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me how many dimensions that little dot drawn with (1,2) has?", "source": "original", "new_id": 335}
{"id": 57, "function": "ST_CoordDim", "question": "告诉我这些小圆弧线CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)有多少层面的数字。", "sql": "SELECT ST_CoordDim('CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Tell me how many layers of numbers these little circular arcs CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13) have.", "source": "original", "new_id": 334}
{"id": 51, "function": "ST_Boundary", "question": "有一个形状，它外面是一圈点连成的线，点的位置是(10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130)，里面还有另一圈点连成的线，点的位置是(70 40, 100 50, 120 80, 80 110, 50 90, 70 40)。请告诉我这个形状的边界线是什么样子的。", "sql": "SELECT ST_Boundary(geom) \nFROM (SELECT 'POLYGON (( 10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130 ), ( 70 40, 100 50, 120 80, 80 110, 50 90, 70 40 ))'::geometry AS geom) AS f;", "execution_result": [["0105000000020000000102000000080000000000000000002440000000000040604000000000000049400000000000C067400000000000805B400000000000C0674000000000008061400000000000C062400000000000C06240000000000000544000000000000059400000000000002440000000000000344000000000000044400000000000002440000000000040604001020000000600000000000000008051400000000000004440000000000000594000000000000049400000000000005E40000000000000544000000000000054400000000000805B400000000000004940000000000080564000000000008051400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a shape where the outside is a loop of connected points at (10 130, 50 190, 110 190, 140 150, 150 80, 100 10, 20 40, 10 130), and inside there's another loop of connected points at (70 40, 100 50, 120 80, 80 110, 50 90, 70 40). Can you tell me what the boundary line of this shape looks like?", "source": "original", "new_id": 296}
{"id": 58, "function": "ST_CoordDim", "question": "找一下那个点(1,2)的坐标有几层意思吧。", "sql": "SELECT ST_CoordDim(ST_Point(1,2));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Figure out how many layers of meaning the coordinates of that point (1,2) have.", "source": "original", "new_id": 336}
{"id": 58, "function": "ST_CoordDim", "question": "请告诉我点(1, 2)的那些数字表示的维度是多少。", "sql": "SELECT ST_CoordDim(ST_Point(1,2));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me what dimension those numbers for the point (1, 2) represent?", "source": "original", "new_id": 338}
{"id": 57, "function": "ST_CoordDim", "question": "看看那些由1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13组成的弯曲线条，它们的坐标有多少个维度呢？", "sql": "SELECT ST_CoordDim('CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check out those curvy lines made of 1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13, and see how many dimensions their coordinates have?", "source": "original", "new_id": 331}
{"id": 58, "function": "ST_CoordDim", "question": "你知道1和2这两个数字一起形成的小点，它有多少个方向可以走呢？", "sql": "SELECT ST_CoordDim(ST_Point(1,2));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Do you know how many directions the little point formed by the numbers 1 and 2 can go?", "source": "original", "new_id": 339}
{"id": 58, "function": "ST_CoordDim", "question": "告诉我关于一个位置在1和2那里的点，它的坐标有多少个数字。", "sql": "SELECT ST_CoordDim(ST_Point(1,2));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Tell me about a spot at 1 and 2, how many numbers does its coordinate have.", "source": "original", "new_id": 340}
{"id": 59, "function": "ST_Dimension", "question": "看看有一个从(1 1)到(0 0)的线段，还有(0 0)这个点组成的几何集合，它的维度是多少？", "sql": "SELECT ST_Dimension('GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))');", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check the dimension of a geometry collection made up of a line segment from (1 1) to (0 0) and the point (0 0).", "source": "original", "new_id": 342}
{"id": 59, "function": "ST_Dimension", "question": "看看包含从(1 1)到(0 0)的那条线和在(0 0)的那个小点的组合形状，它的尺寸是多少？", "sql": "SELECT ST_Dimension('GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))');", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check out the size of that combo shape, which includes the line from (1 1) to (0 0) and the little dot at (0 0).", "source": "original", "new_id": 341}
{"id": 59, "function": "ST_Dimension", "question": "算一下有一条从(1 1)到(0 0)的小线段和一个在(0 0)的小点的组合图形的维度是多少。", "sql": "SELECT ST_Dimension('GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))');", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Figure out what's the dimension of a shape made up of a little line from (1 1) to (0 0) and a tiny dot at (0 0).", "source": "original", "new_id": 345}
{"id": 59, "function": "ST_Dimension", "question": "看看一个包含从(1 1)到(0 0)的小线条和一个(0 0)小点的几何组合的复杂程度是多少。", "sql": "SELECT ST_Dimension('GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))');", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out the complexity level of a geometry mix that has a little line from (1 1) to (0 0) and a tiny dot at (0 0).", "source": "original", "new_id": 343}
{"id": 60, "function": "ST_Dump", "question": "把包含点(0 0 0), (0 0 1), (0 1 0)的那个立体形状，分解成更小的部分。", "sql": "SELECT ST_Dump(ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))'));", "execution_result": [["({1},0111000080010000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000F03F0000000000000000000000000000F03F0000000000000000000000000000000000000000000000000000000000000000)"], ["({2},011100008001000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000F03F0000000000000000000000000000F03F000000000000F03F0000000000000000000000000000000000000000000000000000000000000000)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Break down the 3D shape that includes the points (0 0 0), (0 0 1), (0 1 0) into smaller pieces.", "source": "original", "new_id": 349}
{"id": 59, "function": "ST_Dimension", "question": "这个集合里有一条从(1 1)到(0 0)的线，还有一个点(0 0)，它的维度是多少呢？", "sql": "SELECT ST_Dimension('GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))');", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In this collection, there's a line from (1 1) to (0 0) and a point at (0 0). What's its dimension?", "source": "original", "new_id": 344}
{"id": 60, "function": "ST_Dump", "question": "看看这些由小平面组成的复杂形状，每个小三角形都有自己的路径和特别的描述格式。特别关注那些点，比如(0 0 0), (0 0 1), (0 1 0)，还有(1 1 0)。", "sql": "SELECT (g.gdump).path, ST_AsEWKT((g.gdump).geom) AS wkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))')) AS gdump) AS g;", "execution_result": [[[1], "TRIANGLE((0 0 0,0 0 1,0 1 0,0 0 0))"], [[2], "TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at this complex shape made of small planes, where each tiny triangle has its own path and special description format. Pay special attention to those points, like (0 0 0), (0 0 1), (0 1 0), and (1 1 0).", "source": "original", "new_id": 347}
{"id": 61, "function": "ST_Dump", "question": "把那个由弯曲的线和直线组成的形状拆开，看看每一部分的样子，特别注意有没有圆弧，数字像0 0, 1 1, 1 0这样的。", "sql": "SELECT ST_AsEWKT(a.geom), ST_HasArc(a.geom)\n  FROM ( SELECT (ST_Dump(p_geom)).geom AS geom\n         FROM (SELECT ST_GeomFromEWKT('COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0),(1 0, 0 1))') AS p_geom) AS b\n        ) AS a;", "execution_result": [["CIRCULARSTRING(0 0,1 1,1 0)", true], ["LINESTRING(1 0,0 1)", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take apart that shape made of curvy and straight lines, and see what each part looks like, especially checking if there's a circular arc, with numbers like 0 0, 1 1, 1 0.", "source": "original", "new_id": 353}
{"id": 60, "function": "ST_Dump", "question": "请把由两个小三角形组成的立体形状分解后的每个小部件的路径和它们的EWKT格式说一下。第一个三角形有点在(0 0 0), (0 0 1), (0 1 0)，第二个三角形有点在(0 0 0), (0 1 0), (1 1 0)。", "sql": "SELECT (g.gdump).path, ST_AsEWKT((g.gdump).geom) AS wkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))')) AS gdump) AS g;", "execution_result": [[[1], "TRIANGLE((0 0 0,0 0 1,0 1 0,0 0 0))"], [[2], "TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you talk about the path and EWKT format of each decomposed part of a 3D shape made of two little triangles? The first triangle has dots at (0 0 0), (0 0 1), (0 1 0), and the second triangle has dots at (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 350}
{"id": 60, "function": "ST_Dump", "question": "把由两个小三角形拼成的大形状拆开。第一个小三角形有三个点：一是(0 0 0)，二是(0 0 1)，三是(0 1 0)。第二个小三角形有点(0 0 0)、(0 1 0)和(1 1 0)。想知道它们各自的路径和图形长什么样。", "sql": "SELECT (g.gdump).path, ST_AsEWKT((g.gdump).geom) AS wkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))')) AS gdump) AS g;", "execution_result": [[[1], "TRIANGLE((0 0 0,0 0 1,0 1 0,0 0 0))"], [[2], "TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take apart the big shape made of two small triangles. The first small triangle has three points: one at (0 0 0), another at (0 0 1), and the third at (0 1 0). The second small triangle has points at (0 0 0), (0 1 0), and (1 1 0). I'm curious about what their individual paths and shapes look like.", "source": "original", "new_id": 348}
{"id": 60, "function": "ST_Dump", "question": "找出由两个小三角形组成的奇妙形状的路径和某种格式的字符串，这两个三角形的顶点分别是(0 0 0)、(0 0 1)、(0 1 0)，以及(0 0 0)、(0 1 0)、(1 1 0)。", "sql": "SELECT (g.gdump).path, ST_AsEWKT((g.gdump).geom) AS wkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))')) AS gdump) AS g;", "execution_result": [[[1], "TRIANGLE((0 0 0,0 0 1,0 1 0,0 0 0))"], [[2], "TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Discover the path and some kind of formatted string for a peculiar shape made of two small triangles, with vertices at (0 0 0), (0 0 1), (0 1 0), and (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 352}
{"id": 61, "function": "ST_Dump", "question": "把那条由圆弧和直线组成的弯弯曲曲的路径拆开，然后用某种格式显示每一小段，还看看每段里有没有圆弧的影子。", "sql": "SELECT ST_AsEWKT(a.geom), ST_HasArc(a.geom)\n  FROM ( SELECT (ST_Dump(p_geom)).geom AS geom\n         FROM (SELECT ST_GeomFromEWKT('COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0),(1 0, 0 1))') AS p_geom) AS b\n        ) AS a;", "execution_result": [["CIRCULARSTRING(0 0,1 1,1 0)", true], ["LINESTRING(1 0,0 1)", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Break apart that winding path made of curves and straight lines, then show each little piece in some format, and check if there's a trace of a circular arc in each part.", "source": "original", "new_id": 355}
{"id": 60, "function": "ST_Dump", "question": "请给出那些两片三角形面片的路径和格式化的几何数据，第一片包括点(0 0 0), (0 0 1), (0 1 0)，第二片是(0 0 0), (0 1 0), (1 1 0)。", "sql": "SELECT (g.gdump).path, ST_AsEWKT((g.gdump).geom) AS wkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('TIN (((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,0 0 0)))')) AS gdump) AS g;", "execution_result": [[[1], "TRIANGLE((0 0 0,0 0 1,0 1 0,0 0 0))"], [[2], "TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please provide the path and formatted geometry data for those two triangular faces, the first includes points (0 0 0), (0 0 1), (0 1 0), and the second has (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 351}
{"id": 61, "function": "ST_Dump", "question": "把那个由圆弧和直线组成的复杂形状分解后，看看每个小形状的文字描述是什么，还有它们有没有弯曲的部分。", "sql": "SELECT ST_AsEWKT(a.geom), ST_HasArc(a.geom)\n  FROM ( SELECT (ST_Dump(p_geom)).geom AS geom\n         FROM (SELECT ST_GeomFromEWKT('COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0),(1 0, 0 1))') AS p_geom) AS b\n        ) AS a;", "execution_result": [["CIRCULARSTRING(0 0,1 1,1 0)", true], ["LINESTRING(1 0,0 1)", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After breaking down that complex shape made of a circular arc and a straight line, see what the text description of each small shape is, and whether they have curved parts.", "source": "original", "new_id": 356}
{"id": 61, "function": "ST_Dump", "question": "看看由那段圆弧(0 0, 1 1, 1 0)和那条直线(1 0, 0 1)拼成的奇妙曲线，能不能告诉我每个小部分的神秘代码和它们有没有圆弧的痕迹？", "sql": "SELECT ST_AsEWKT(a.geom), ST_HasArc(a.geom)\n  FROM ( SELECT (ST_Dump(p_geom)).geom AS geom\n         FROM (SELECT ST_GeomFromEWKT('COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0),(1 0, 0 1))') AS p_geom) AS b\n        ) AS a;", "execution_result": [["CIRCULARSTRING(0 0,1 1,1 0)", true], ["LINESTRING(1 0,0 1)", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you check the quirky curve made from that arc (0 0, 1 1, 1 0) and that line (1 0, 0 1), and tell me the secret code for each piece and whether they have traces of arcs?", "source": "original", "new_id": 354}
{"id": 59, "function": "ST_Dimension", "question": "这个集合包括了一条从(1 1)到(0 0)的线，还有一个在(0 0)的小点，能不能告诉我它的整体维度是什么？", "sql": "SELECT ST_Dimension('GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))');", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "This collection includes a line from (1 1) to (0 0), and a little dot at (0 0). Can you tell me what its overall dimension is?", "source": "original", "new_id": 346}
{"id": 61, "function": "ST_Dump", "question": "对于那个包含圆弧段（0 0, 1 1, 1 0）和直线段（1 0, 0 1）的复合曲线，你能帮忙看看每一部分的具体描述是什么吗？顺便也看看哪些部分有圆弧吧。", "sql": "SELECT ST_AsEWKT(a.geom), ST_HasArc(a.geom)\n  FROM ( SELECT (ST_Dump(p_geom)).geom AS geom\n         FROM (SELECT ST_GeomFromEWKT('COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0),(1 0, 0 1))') AS p_geom) AS b\n        ) AS a;", "execution_result": [["CIRCULARSTRING(0 0,1 1,1 0)", true], ["LINESTRING(1 0,0 1)", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that compound curve including the arc segment (0 0, 1 1, 1 0) and the straight segment (1 0, 0 1), can you help check the specific description of each part? Also, see which parts have arcs.", "source": "original", "new_id": 357}
{"id": 62, "function": "ST_Dump", "question": "看看那个由很多小平面组成的立体模型，能否帮我找出每个面的顺序编号和它们的具体坐标信息？", "sql": "SELECT (a.p_geom).path[1] AS path, ST_AsEWKT((a.p_geom).geom) AS geom_ewkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))')) AS p_geom) AS a;", "execution_result": [[1, "POLYGON((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0))"], [2, "POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"], [3, "POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"], [4, "POLYGON((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0))"], [5, "POLYGON((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0))"], [6, "POLYGON((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at that 3D model made of many small faces, can you help me find the order number of each face and their specific coordinate information?", "source": "original", "new_id": 362}
{"id": 61, "function": "ST_Dump", "question": "对于那个带有弯曲的形状，有两个部分，一个是像弧线一样从(0 0)到(1 1)再到(1 0)，另一个是笔直从(1 0)到(0 1)。找出每个部分的特殊字符串，并看看它们有没有弯曲的地方。", "sql": "SELECT ST_AsEWKT(a.geom), ST_HasArc(a.geom)\n  FROM ( SELECT (ST_Dump(p_geom)).geom AS geom\n         FROM (SELECT ST_GeomFromEWKT('COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0),(1 0, 0 1))') AS p_geom) AS b\n        ) AS a;", "execution_result": [["CIRCULARSTRING(0 0,1 1,1 0)", true], ["LINESTRING(1 0,0 1)", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that shape with curves, there are two parts, one like an arc from (0 0) to (1 1) to (1 0), and the other straight from (1 0) to (0 1). Identify each part's special string and see if they have any curves.", "source": "original", "new_id": 358}
{"id": 62, "function": "ST_Dump", "question": "想象一个由小块组成的三维形状，比如一个立方体，给我每个小块的编号和它们的详细坐标信息，坐标是像(0 0 0, 0 0 1, 0 1 1, 0 1 0)这样的。", "sql": "SELECT (a.p_geom).path[1] AS path, ST_AsEWKT((a.p_geom).geom) AS geom_ewkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))')) AS p_geom) AS a;", "execution_result": [[1, "POLYGON((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0))"], [2, "POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"], [3, "POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"], [4, "POLYGON((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0))"], [5, "POLYGON((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0))"], [6, "POLYGON((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a 3D shape made of little pieces, like a cube. Please give me the number for each piece and their detailed coordinate info, with coordinates like (0 0 0, 0 0 1, 0 1 1, 0 1 0).", "source": "original", "new_id": 361}
{"id": 62, "function": "ST_Dump", "question": "试着分解那个三维多面形，看看每个小面片的路径编号，还有用EWKT写出来的坐标信息。", "sql": "SELECT (a.p_geom).path[1] AS path, ST_AsEWKT((a.p_geom).geom) AS geom_ewkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))')) AS p_geom) AS a;", "execution_result": [[1, "POLYGON((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0))"], [2, "POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"], [3, "POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"], [4, "POLYGON((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0))"], [5, "POLYGON((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0))"], [6, "POLYGON((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Try to break down that 3D shape and find out the path numbers for each little face, along with the coordinate info written in EWKT.", "source": "original", "new_id": 364}
{"id": 62, "function": "ST_Dump", "question": "有一个多面体，由六个面组成，每个面都有具体的三个数字组合，你能帮我找到每个面的位置和它的特殊格式吗？", "sql": "SELECT (a.p_geom).path[1] AS path, ST_AsEWKT((a.p_geom).geom) AS geom_ewkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))')) AS p_geom) AS a;", "execution_result": [[1, "POLYGON((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0))"], [2, "POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"], [3, "POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"], [4, "POLYGON((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0))"], [5, "POLYGON((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0))"], [6, "POLYGON((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a polyhedron with six faces, each face has specific three-number combinations. Can you help me find the location of each face and its special format?", "source": "original", "new_id": 359}
{"id": 62, "function": "ST_Dump", "question": "请找出那个复杂立体中每个小面的编号和它们的特别格式坐标信息，像是那些0 0 0, 0 0 1之类的。", "sql": "SELECT (a.p_geom).path[1] AS path, ST_AsEWKT((a.p_geom).geom) AS geom_ewkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))')) AS p_geom) AS a;", "execution_result": [[1, "POLYGON((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0))"], [2, "POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"], [3, "POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"], [4, "POLYGON((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0))"], [5, "POLYGON((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0))"], [6, "POLYGON((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please identify the number for each little face in that complex 3D shape and their special format coordinate information, like those 0 0 0, 0 0 1 and so on.", "source": "original", "new_id": 363}
{"id": 67, "function": "ST_DumpPoints", "question": "有两条线，第一条从(1 2)到(10 10)，第二条从(3 5)到(9 10)，分别给它们一个编号是1和2。你能找出这些线上的每个小点的位置编号和它们的具体坐标吗？", "sql": "SELECT edge_id, (dp).path[1] AS index, ST_AsText((dp).geom) AS wktnode \nFROM (SELECT 1 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(1 2, 3 4, 10 10)')) AS dp \nUNION ALL SELECT 2 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(3 5, 5 6, 9 10)')) AS dp) AS foo;", "execution_result": [[1, 1, "POINT(1 2)"], [1, 2, "POINT(3 4)"], [1, 3, "POINT(10 10)"], [2, 1, "POINT(3 5)"], [2, 2, "POINT(5 6)"], [2, 3, "POINT(9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are two lines, the first goes from (1 2) to (10 10) and the second from (3 5) to (9 10), each given a number, 1 and 2. Can you find the location number and exact coordinates of each small dot on these lines?", "source": "original", "new_id": 372}
{"id": 67, "function": "ST_DumpPoints", "question": "找出两条由这些点构成的线段，分别是(1 2, 3 4, 10 10)和(3 5, 5 6, 9 10)，然后列出这些点的信息。要包括线的编号、点的位置序号和点的具体样子。", "sql": "SELECT edge_id, (dp).path[1] AS index, ST_AsText((dp).geom) AS wktnode \nFROM (SELECT 1 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(1 2, 3 4, 10 10)')) AS dp \nUNION ALL SELECT 2 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(3 5, 5 6, 9 10)')) AS dp) AS foo;", "execution_result": [[1, 1, "POINT(1 2)"], [1, 2, "POINT(3 4)"], [1, 3, "POINT(10 10)"], [2, 1, "POINT(3 5)"], [2, 2, "POINT(5 6)"], [2, 3, "POINT(9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Identify two lines made up of these points, which are (1 2, 3 4, 10 10) and (3 5, 5 6, 9 10), then list information about these points. Include the line's number, the point's position index, and the point's specific appearance.", "source": "original", "new_id": 374}
{"id": 65, "function": "ST_DumpPoints", "question": "想象一个装着各种形状的盒子。这个盒子里有些小圈圈和线条。圈圈有外面一圈(0 5, 0 8, 4 8, 4 5, 0 5)和里面一圈(1 6, 3 6, 2 7, 1 6)。线条有两条，第一条是(5 4, 5 8, 6 7, 5 4)，第二条是(5 1, 4 2, 5 2, 5 1)。想要知道这些点在盒子里的位置和它们长得什么样。", "sql": "SELECT path, ST_AsText(geom) \nFROM (SELECT (ST_DumpPoints(g.geom)).* \n      FROM (SELECT ST_GeomFromText('GEOMETRYCOLLECTION(POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6)), LINESTRING(5 4, 5 8, 6 7, 5 4), LINESTRING(5 1, 4 2, 5 2, 5 1))') AS geom) AS g) AS j;", "execution_result": [[[1, 1, 1], "POINT(0 5)"], [[1, 1, 2], "POINT(0 8)"], [[1, 1, 3], "POINT(4 8)"], [[1, 1, 4], "POINT(4 5)"], [[1, 1, 5], "POINT(0 5)"], [[1, 2, 1], "POINT(1 6)"], [[1, 2, 2], "POINT(3 6)"], [[1, 2, 3], "POINT(2 7)"], [[1, 2, 4], "POINT(1 6)"], [[2, 1], "POINT(5 4)"], [[2, 2], "POINT(5 8)"], [[2, 3], "POINT(6 7)"], [[2, 4], "POINT(5 4)"], [[3, 1], "POINT(5 1)"], [[3, 2], "POINT(4 2)"], [[3, 3], "POINT(5 2)"], [[3, 4], "POINT(5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a box holding various shapes. Inside, there are some small loops and lines. The loop has an outer loop (0 5, 0 8, 4 8, 4 5, 0 5) and an inner loop (1 6, 3 6, 2 7, 1 6). There are two lines, the first one is (5 4, 5 8, 6 7, 5 4), and the second one is (5 1, 4 2, 5 2, 5 1). We want to know where these points are in the box and what they look like.", "source": "original", "new_id": 367}
{"id": 65, "function": "ST_DumpPoints", "question": "从一个包含各种形状的集合中，把那些多边形和线段的坐标点找出来，看看它们的路径是什么，并用一种格式展示出来。特别注意这些数字：多边形的外圈有0 5, 0 8, 4 8, 4 5, 0 5，内圈有1 6, 3 6, 2 7, 1 6，还有两条线段，第一条是5 4, 5 8, 6 7, 5 4，第二条是5 1, 4 2, 5 2, 5 1。", "sql": "SELECT path, ST_AsText(geom) \nFROM (SELECT (ST_DumpPoints(g.geom)).* \n      FROM (SELECT ST_GeomFromText('GEOMETRYCOLLECTION(POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6)), LINESTRING(5 4, 5 8, 6 7, 5 4), LINESTRING(5 1, 4 2, 5 2, 5 1))') AS geom) AS g) AS j;", "execution_result": [[[1, 1, 1], "POINT(0 5)"], [[1, 1, 2], "POINT(0 8)"], [[1, 1, 3], "POINT(4 8)"], [[1, 1, 4], "POINT(4 5)"], [[1, 1, 5], "POINT(0 5)"], [[1, 2, 1], "POINT(1 6)"], [[1, 2, 2], "POINT(3 6)"], [[1, 2, 3], "POINT(2 7)"], [[1, 2, 4], "POINT(1 6)"], [[2, 1], "POINT(5 4)"], [[2, 2], "POINT(5 8)"], [[2, 3], "POINT(6 7)"], [[2, 4], "POINT(5 4)"], [[3, 1], "POINT(5 1)"], [[3, 2], "POINT(4 2)"], [[3, 3], "POINT(5 2)"], [[3, 4], "POINT(5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a collection containing various shapes, extract the coordinates of those polygons and lines, find out their paths, and display them in a certain format. Pay special attention to these numbers: the polygon's outer ring has 0 5, 0 8, 4 8, 4 5, 0 5, inner ring has 1 6, 3 6, 2 7, 1 6, and there are two lines, the first one is 5 4, 5 8, 6 7, 5 4, the second one is 5 1, 4 2, 5 2, 5 1.", "source": "original", "new_id": 366}
{"id": 65, "function": "ST_DumpPoints", "question": "从一个包含多种形状的集合中找出每个小点的路径和它们的坐标文字。这个集合里有一个边界是0 5到0 8到4 8到4 5再回到0 5的多边形，里面还有一个圈是1 6到3 6到2 7再回到1 6，还有两条从5 4到5 8到6 7再回到5 4和从5 1到4 2到5 2再回到5 1的线。", "sql": "SELECT path, ST_AsText(geom) \nFROM (SELECT (ST_DumpPoints(g.geom)).* \n      FROM (SELECT ST_GeomFromText('GEOMETRYCOLLECTION(POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6)), LINESTRING(5 4, 5 8, 6 7, 5 4), LINESTRING(5 1, 4 2, 5 2, 5 1))') AS geom) AS g) AS j;", "execution_result": [[[1, 1, 1], "POINT(0 5)"], [[1, 1, 2], "POINT(0 8)"], [[1, 1, 3], "POINT(4 8)"], [[1, 1, 4], "POINT(4 5)"], [[1, 1, 5], "POINT(0 5)"], [[1, 2, 1], "POINT(1 6)"], [[1, 2, 2], "POINT(3 6)"], [[1, 2, 3], "POINT(2 7)"], [[1, 2, 4], "POINT(1 6)"], [[2, 1], "POINT(5 4)"], [[2, 2], "POINT(5 8)"], [[2, 3], "POINT(6 7)"], [[2, 4], "POINT(5 4)"], [[3, 1], "POINT(5 1)"], [[3, 2], "POINT(4 2)"], [[3, 3], "POINT(5 2)"], [[3, 4], "POINT(5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a collection with various shapes, identify the path of each little dot and their coordinate text. This collection includes a polygon with a boundary from 0 5 to 0 8 to 4 8 to 4 5 back to 0 5, with an inner loop from 1 6 to 3 6 to 2 7 back to 1 6, and two lines from 5 4 to 5 8 to 6 7 back to 5 4 and from 5 1 to 4 2 to 5 2 back to 5 1.", "source": "original", "new_id": 365}
{"id": 65, "function": "ST_DumpPoints", "question": "找出那些小点的路径和坐标，看看它们在一个集合里怎么排，集合里有一个多边形和两条线。多边形有两个圈，外圈是0 5到0 8再到4 8然后到4 5回到0 5，内圈是1 6到3 6再到2 7回到1 6。线呢，第一条从5 4到5 8再到6 7回到5 4，第二条从5 1到4 2再到5 2回到5 1。", "sql": "SELECT path, ST_AsText(geom) \nFROM (SELECT (ST_DumpPoints(g.geom)).* \n      FROM (SELECT ST_GeomFromText('GEOMETRYCOLLECTION(POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6)), LINESTRING(5 4, 5 8, 6 7, 5 4), LINESTRING(5 1, 4 2, 5 2, 5 1))') AS geom) AS g) AS j;", "execution_result": [[[1, 1, 1], "POINT(0 5)"], [[1, 1, 2], "POINT(0 8)"], [[1, 1, 3], "POINT(4 8)"], [[1, 1, 4], "POINT(4 5)"], [[1, 1, 5], "POINT(0 5)"], [[1, 2, 1], "POINT(1 6)"], [[1, 2, 2], "POINT(3 6)"], [[1, 2, 3], "POINT(2 7)"], [[1, 2, 4], "POINT(1 6)"], [[2, 1], "POINT(5 4)"], [[2, 2], "POINT(5 8)"], [[2, 3], "POINT(6 7)"], [[2, 4], "POINT(5 4)"], [[3, 1], "POINT(5 1)"], [[3, 2], "POINT(4 2)"], [[3, 3], "POINT(5 2)"], [[3, 4], "POINT(5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the paths and coordinates of those little dots and see how they are arranged in a collection, which includes one polygon and two lines. The polygon has two loops, the outer loop goes from 0 5 to 0 8 to 4 8 to 4 5 back to 0 5, the inner loop goes from 1 6 to 3 6 to 2 7 back to 1 6. As for the lines, the first one goes from 5 4 to 5 8 to 6 7 back to 5 4, and the second one goes from 5 1 to 4 2 to 5 2 back to 5 1.", "source": "original", "new_id": 368}
{"id": 68, "function": "ST_DumpSegments", "question": "在两个由小三角形组成的立体形状中，把这些面分解成线段，然后说出每条线段的路径和那些奇怪的坐标格式。", "sql": "SELECT path, ST_AsEWKT(geom) \nFROM (SELECT (ST_DumpSegments(g.geom)).* \n    FROM (SELECT 'TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )'::geometry AS geom) AS g) j;", "execution_result": [[[1, 1, 1], "LINESTRING(0 0 0,0 0 1)"], [[1, 1, 2], "LINESTRING(0 0 1,0 1 0)"], [[1, 1, 3], "LINESTRING(0 1 0,0 0 0)"], [[2, 1, 1], "LINESTRING(0 0 0,0 1 0)"], [[2, 1, 2], "LINESTRING(0 1 0,1 1 0)"], [[2, 1, 3], "LINESTRING(1 1 0,0 0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In a 3D shape made of two small triangles, break these surfaces into line segments and tell the path of each segment along with those strange coordinate formats.", "source": "original", "new_id": 377}
{"id": 67, "function": "ST_DumpPoints", "question": "从两条线段的那些小坐标中弄出一个列表，给每个小点编个号，还有把它们的样子用文字写出来。第一条线是从(1 2)到(10 10)，第二条是从(3 5)到(9 10)。", "sql": "SELECT edge_id, (dp).path[1] AS index, ST_AsText((dp).geom) AS wktnode \nFROM (SELECT 1 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(1 2, 3 4, 10 10)')) AS dp \nUNION ALL SELECT 2 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(3 5, 5 6, 9 10)')) AS dp) AS foo;", "execution_result": [[1, 1, "POINT(1 2)"], [1, 2, "POINT(3 4)"], [1, 3, "POINT(10 10)"], [2, 1, "POINT(3 5)"], [2, 2, "POINT(5 6)"], [2, 3, "POINT(9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create a list from those little coordinates of two lines, give each little point a number, and describe their appearance with words. The first line goes from (1 2) to (10 10), and the second goes from (3 5) to (9 10).", "source": "original", "new_id": 375}
{"id": 65, "function": "ST_DumpPoints", "question": "看看那一堆形状里，每个小点的旅程和它的样子是什么。形状包括一个带环的多边形，和两条线，坐标分别是：多边形的外圈是0 5, 0 8, 4 8, 4 5, 0 5，内圈是1 6, 3 6, 2 7, 1 6；第一条线是5 4, 5 8, 6 7, 5 4，第二条线是5 1, 4 2, 5 2, 5 1。告诉我每个点的路径和样子。", "sql": "SELECT path, ST_AsText(geom) \nFROM (SELECT (ST_DumpPoints(g.geom)).* \n      FROM (SELECT ST_GeomFromText('GEOMETRYCOLLECTION(POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6)), LINESTRING(5 4, 5 8, 6 7, 5 4), LINESTRING(5 1, 4 2, 5 2, 5 1))') AS geom) AS g) AS j;", "execution_result": [[[1, 1, 1], "POINT(0 5)"], [[1, 1, 2], "POINT(0 8)"], [[1, 1, 3], "POINT(4 8)"], [[1, 1, 4], "POINT(4 5)"], [[1, 1, 5], "POINT(0 5)"], [[1, 2, 1], "POINT(1 6)"], [[1, 2, 2], "POINT(3 6)"], [[1, 2, 3], "POINT(2 7)"], [[1, 2, 4], "POINT(1 6)"], [[2, 1], "POINT(5 4)"], [[2, 2], "POINT(5 8)"], [[2, 3], "POINT(6 7)"], [[2, 4], "POINT(5 4)"], [[3, 1], "POINT(5 1)"], [[3, 2], "POINT(4 2)"], [[3, 3], "POINT(5 2)"], [[3, 4], "POINT(5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check out what the journey and appearance of each little dot in that bunch of shapes are. The shapes include one polygon with a loop and two lines, with coordinates: the polygon's outer loop is 0 5, 0 8, 4 8, 4 5, 0 5, inner loop is 1 6, 3 6, 2 7, 1 6; the first line is 5 4, 5 8, 6 7, 5 4, the second line is 5 1, 4 2, 5 2, 5 1. Tell me the path and appearance of each dot.", "source": "original", "new_id": 369}
{"id": 67, "function": "ST_DumpPoints", "question": "有两条细长的图形，第一条从(1 2)到(3 4)再到(10 10)，第二条从(3 5)到(5 6)再到(9 10)。给第一个图形一个编号1，另一个编号2。你能搞清楚每个小点在它们各自路径中的位置，并用一种大家都能看懂的方式说出这些点吗？", "sql": "SELECT edge_id, (dp).path[1] AS index, ST_AsText((dp).geom) AS wktnode \nFROM (SELECT 1 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(1 2, 3 4, 10 10)')) AS dp \nUNION ALL SELECT 2 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(3 5, 5 6, 9 10)')) AS dp) AS foo;", "execution_result": [[1, 1, "POINT(1 2)"], [1, 2, "POINT(3 4)"], [1, 3, "POINT(10 10)"], [2, 1, "POINT(3 5)"], [2, 2, "POINT(5 6)"], [2, 3, "POINT(9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are two slender shapes, the first goes from (1 2) to (3 4) and then to (10 10), the second from (3 5) to (5 6) and then to (9 10). Assign the first shape a number 1 and the other number 2. Can you figure out where each little dot is along their paths and describe these dots in a way everyone can understand?", "source": "original", "new_id": 371}
{"id": 62, "function": "ST_Dump", "question": "帮我看看这个由六个三维小面组成的复杂形状，分拆后每个小片的编号和那些坐标长啥样？坐标是((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT (a.p_geom).path[1] AS path, ST_AsEWKT((a.p_geom).geom) AS geom_ewkt \nFROM (SELECT ST_Dump(ST_GeomFromEWKT('POLYHEDRALSURFACE(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)))')) AS p_geom) AS a;", "execution_result": [[1, "POLYGON((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0))"], [2, "POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"], [3, "POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"], [4, "POLYGON((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0))"], [5, "POLYGON((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0))"], [6, "POLYGON((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you show me what the numbers and those coordinates look like for each piece after breaking down this complex shape made of six 3D little faces? The coordinates are ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 360}
{"id": 67, "function": "ST_DumpPoints", "question": "给出两个线段的详细小点信息，像是它们的编号和位置顺序，还有用那些数字坐标表示的小点。第一个线段是由(1 2, 3 4, 10 10)组成的，第二个线段是由(3 5, 5 6, 9 10)构成的。结果需要三栏：编号、顺序和坐标描述。", "sql": "SELECT edge_id, (dp).path[1] AS index, ST_AsText((dp).geom) AS wktnode \nFROM (SELECT 1 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(1 2, 3 4, 10 10)')) AS dp \nUNION ALL SELECT 2 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(3 5, 5 6, 9 10)')) AS dp) AS foo;", "execution_result": [[1, 1, "POINT(1 2)"], [1, 2, "POINT(3 4)"], [1, 3, "POINT(10 10)"], [2, 1, "POINT(3 5)"], [2, 2, "POINT(5 6)"], [2, 3, "POINT(9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide detailed little dot information for two line segments, like their number and order in line, and those dots represented by number coordinates. The first line segment is made up of (1 2, 3 4, 10 10), and the second is composed of (3 5, 5 6, 9 10). The result needs three columns: number, order, and coordinate description.", "source": "original", "new_id": 376}
{"id": 68, "function": "ST_DumpSegments", "question": "有两个小三角形，都是由一些点连接而成的。第一个是由0 0 0, 0 0 1, 0 1 0这些点组成的，第二个是由0 0 0, 0 1 0, 1 1 0形成的。能不能把它们的边拆开来，告诉我这些边的路径和形状呢？", "sql": "SELECT path, ST_AsEWKT(geom) \nFROM (SELECT (ST_DumpSegments(g.geom)).* \n    FROM (SELECT 'TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )'::geometry AS geom) AS g) j;", "execution_result": [[[1, 1, 1], "LINESTRING(0 0 0,0 0 1)"], [[1, 1, 2], "LINESTRING(0 0 1,0 1 0)"], [[1, 1, 3], "LINESTRING(0 1 0,0 0 0)"], [[2, 1, 1], "LINESTRING(0 0 0,0 1 0)"], [[2, 1, 2], "LINESTRING(0 1 0,1 1 0)"], [[2, 1, 3], "LINESTRING(1 1 0,0 0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are two little triangles, each formed by connecting some points. The first one is made up of 0 0 0, 0 0 1, 0 1 0, and the second one is formed by 0 0 0, 0 1 0, 1 1 0. Can you break apart their edges and tell me the paths and shapes of these edges?", "source": "original", "new_id": 378}
{"id": 68, "function": "ST_DumpSegments", "question": "有一个由两个三角形组成的网络，第一块有点在(0 0 0)、(0 0 1)、(0 1 0)，第二块有点在(0 0 0)、(0 1 0)、(1 1 0)。你能帮我找出所有边的路径和它们的奇怪格式吗？", "sql": "SELECT path, ST_AsEWKT(geom) \nFROM (SELECT (ST_DumpSegments(g.geom)).* \n    FROM (SELECT 'TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )'::geometry AS geom) AS g) j;", "execution_result": [[[1, 1, 1], "LINESTRING(0 0 0,0 0 1)"], [[1, 1, 2], "LINESTRING(0 0 1,0 1 0)"], [[1, 1, 3], "LINESTRING(0 1 0,0 0 0)"], [[2, 1, 1], "LINESTRING(0 0 0,0 1 0)"], [[2, 1, 2], "LINESTRING(0 1 0,1 1 0)"], [[2, 1, 3], "LINESTRING(1 1 0,0 0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a network made of two triangles, the first one with points at (0 0 0), (0 0 1), (0 1 0), and the second one with points at (0 0 0), (0 1 0), (1 1 0). Can you help me find the paths of all the edges and their weird format?", "source": "original", "new_id": 379}
{"id": 65, "function": "ST_DumpPoints", "question": "从一个集合里，包含一个有内圈的多边形和两条线，找出它们点的位置层级和具体坐标，坐标要像那种标准格式的字符串形式输出。多边形的外圈是0 5, 0 8, 4 8, 4 5, 0 5，内圈是1 6, 3 6, 2 7, 1 6；第一条线是5 4, 5 8, 6 7, 5 4，第二条线是5 1, 4 2, 5 2, 5 1。", "sql": "SELECT path, ST_AsText(geom) \nFROM (SELECT (ST_DumpPoints(g.geom)).* \n      FROM (SELECT ST_GeomFromText('GEOMETRYCOLLECTION(POLYGON((0 5, 0 8, 4 8, 4 5, 0 5), (1 6, 3 6, 2 7, 1 6)), LINESTRING(5 4, 5 8, 6 7, 5 4), LINESTRING(5 1, 4 2, 5 2, 5 1))') AS geom) AS g) AS j;", "execution_result": [[[1, 1, 1], "POINT(0 5)"], [[1, 1, 2], "POINT(0 8)"], [[1, 1, 3], "POINT(4 8)"], [[1, 1, 4], "POINT(4 5)"], [[1, 1, 5], "POINT(0 5)"], [[1, 2, 1], "POINT(1 6)"], [[1, 2, 2], "POINT(3 6)"], [[1, 2, 3], "POINT(2 7)"], [[1, 2, 4], "POINT(1 6)"], [[2, 1], "POINT(5 4)"], [[2, 2], "POINT(5 8)"], [[2, 3], "POINT(6 7)"], [[2, 4], "POINT(5 4)"], [[3, 1], "POINT(5 1)"], [[3, 2], "POINT(4 2)"], [[3, 3], "POINT(5 2)"], [[3, 4], "POINT(5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a collection that includes one polygon with an inner ring and two lines, find the position hierarchy of their points and the exact coordinates, with the coordinates output as a standardized string format. The polygon's outer ring is 0 5, 0 8, 4 8, 4 5, 0 5, and its inner ring is 1 6, 3 6, 2 7, 1 6; the first line is 5 4, 5 8, 6 7, 5 4, and the second line is 5 1, 4 2, 5 2, 5 1.", "source": "original", "new_id": 370}
{"id": 68, "function": "ST_DumpSegments", "question": "从包含两个小三角形的几何体中提取所有边线的信息，这些三角形有一些具体的点，比如0 0 0和0 1 0，看看它们的路径编号和一些特别的格式。", "sql": "SELECT path, ST_AsEWKT(geom) \nFROM (SELECT (ST_DumpSegments(g.geom)).* \n    FROM (SELECT 'TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )'::geometry AS geom) AS g) j;", "execution_result": [[[1, 1, 1], "LINESTRING(0 0 0,0 0 1)"], [[1, 1, 2], "LINESTRING(0 0 1,0 1 0)"], [[1, 1, 3], "LINESTRING(0 1 0,0 0 0)"], [[2, 1, 1], "LINESTRING(0 0 0,0 1 0)"], [[2, 1, 2], "LINESTRING(0 1 0,1 1 0)"], [[2, 1, 3], "LINESTRING(1 1 0,0 0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Extract all edge information from a geometric shape with two small triangles, these triangles have some specific points like 0 0 0 and 0 1 0, and find their path indices and a special format.", "source": "original", "new_id": 380}
{"id": 69, "function": "ST_DumpSegments", "question": "对于那些顶点是(0,0)、(0,9)、(9,0)的三角形，看看能不能找到它的边边，并且说说它们的形状是什么。", "sql": "SELECT path, ST_AsText(geom) \n      FROM ( SELECT (ST_DumpSegments(g.geom)).* \n              FROM (SELECT 'TRIANGLE(( 0 0, 0 9, 9 0, 0 0 ))'::geometry AS geom ) AS g ) j;", "execution_result": [[[1, 1], "LINESTRING(0 0,0 9)"], [[1, 2], "LINESTRING(0 9,9 0)"], [[1, 3], "LINESTRING(9 0,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that triangle with corners at (0,0), (0,9), and (9,0), try to find its edges and describe what their shapes are.", "source": "original", "new_id": 384}
{"id": 68, "function": "ST_DumpSegments", "question": "找出由一堆小三角形构成的网络里，所有边的路径和它们的特别格式。这些小三角形是从一些小点构成的，比如说有一个由点(0 0 0)、(0 0 1)、(0 1 0)构成的，还有另一个是由点(0 0 0)、(0 1 0)、(1 1 0)构成的。", "sql": "SELECT path, ST_AsEWKT(geom) \nFROM (SELECT (ST_DumpSegments(g.geom)).* \n    FROM (SELECT 'TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )'::geometry AS geom) AS g) j;", "execution_result": [[[1, 1, 1], "LINESTRING(0 0 0,0 0 1)"], [[1, 1, 2], "LINESTRING(0 0 1,0 1 0)"], [[1, 1, 3], "LINESTRING(0 1 0,0 0 0)"], [[2, 1, 1], "LINESTRING(0 0 0,0 1 0)"], [[2, 1, 2], "LINESTRING(0 1 0,1 1 0)"], [[2, 1, 3], "LINESTRING(1 1 0,0 0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the paths of all edges and their special format in a network made of a bunch of little triangles. These little triangles are made from some small dots, like one made of points (0 0 0), (0 0 1), (0 1 0) and another made of points (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 382}
{"id": 69, "function": "ST_DumpSegments", "question": "找出那些连着的线段，它们是从一个三角形中分出来的，三角形的顶点在(0 0), (0 9), (9 0)，看看它们的编号和它们的样子是什么样的。", "sql": "SELECT path, ST_AsText(geom) \n      FROM ( SELECT (ST_DumpSegments(g.geom)).* \n              FROM (SELECT 'TRIANGLE(( 0 0, 0 9, 9 0, 0 0 ))'::geometry AS geom ) AS g ) j;", "execution_result": [[[1, 1], "LINESTRING(0 0,0 9)"], [[1, 2], "LINESTRING(0 9,9 0)"], [[1, 3], "LINESTRING(9 0,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find those connected line segments split from a triangle with corners at (0 0), (0 9), (9 0), and see what their numbers and appearances are like.", "source": "original", "new_id": 386}
{"id": 69, "function": "ST_DumpSegments", "question": "把形状是三角形的图形，顶点是(0 0), (0 9), (9 0)，拆成几条线段，告诉我每条线段的编号和它是什么样子。", "sql": "SELECT path, ST_AsText(geom) \n      FROM ( SELECT (ST_DumpSegments(g.geom)).* \n              FROM (SELECT 'TRIANGLE(( 0 0, 0 9, 9 0, 0 0 ))'::geometry AS geom ) AS g ) j;", "execution_result": [[[1, 1], "LINESTRING(0 0,0 9)"], [[1, 2], "LINESTRING(0 9,9 0)"], [[1, 3], "LINESTRING(9 0,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the triangle shape with corners at (0 0), (0 9), (9 0), break it into several line segments, and tell me the number of each segment and what it looks like.", "source": "original", "new_id": 383}
{"id": 69, "function": "ST_DumpSegments", "question": "找出那个三角形，看看它的边是怎么分开的，给我每条边的编号和它的样子，像这样：TRIANGLE((0 0, 0 9, 9 0, 0 0))。", "sql": "SELECT path, ST_AsText(geom) \n      FROM ( SELECT (ST_DumpSegments(g.geom)).* \n              FROM (SELECT 'TRIANGLE(( 0 0, 0 9, 9 0, 0 0 ))'::geometry AS geom ) AS g ) j;", "execution_result": [[[1, 1], "LINESTRING(0 0,0 9)"], [[1, 2], "LINESTRING(0 9,9 0)"], [[1, 3], "LINESTRING(9 0,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find that triangle and see how its sides are split, give me each side's identifier and what it looks like, like this: TRIANGLE((0 0, 0 9, 9 0, 0 0)).", "source": "original", "new_id": 387}
{"id": 67, "function": "ST_DumpPoints", "question": "有两条线段，第一条是(1 2, 3 4, 10 10)，第二条是(3 5, 5 6, 9 10)。可以帮忙列出每个点的编号、它在线段中的位置序号，以及它的坐标表示吗？", "sql": "SELECT edge_id, (dp).path[1] AS index, ST_AsText((dp).geom) AS wktnode \nFROM (SELECT 1 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(1 2, 3 4, 10 10)')) AS dp \nUNION ALL SELECT 2 AS edge_id, ST_DumpPoints(ST_GeomFromText('LINESTRING(3 5, 5 6, 9 10)')) AS dp) AS foo;", "execution_result": [[1, 1, "POINT(1 2)"], [1, 2, "POINT(3 4)"], [1, 3, "POINT(10 10)"], [2, 1, "POINT(3 5)"], [2, 2, "POINT(5 6)"], [2, 3, "POINT(9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are two line segments, the first being (1 2, 3 4, 10 10), and the second being (3 5, 5 6, 9 10). Could you list each point's ID, its position in the line, and its coordinate representation?", "source": "original", "new_id": 373}
{"id": 70, "function": "ST_DumpRings", "question": "有一个由两个圈组成的形状，第一个圈有16个小点，第二个圈有5个小点。请把这些圈拆开，然后告诉我每个圈的编号和它们的具体样子。", "sql": "SELECT path, ST_AsEWKT(geom) AS geom \nFROM ST_DumpRings( ST_GeomFromEWKT('POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))') ) AS foo;", "execution_result": [[[0], "POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1,-8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1,-8150305 5132788 1,-8149064 5133092 1))"], [[1], "POLYGON((-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a shape made of two loops, the first with 16 little dots and the second with 5. Please take these loops apart and tell me the number of each and what they specifically look like.", "source": "original", "new_id": 391}
{"id": 69, "function": "ST_DumpSegments", "question": "从一个有趣的三角形里，找出那些边边角角，然后说说每条边的编号和它长啥样。三角形是由(0 0)、(0 9)、(9 0)这些点围成的哦。", "sql": "SELECT path, ST_AsText(geom) \n      FROM ( SELECT (ST_DumpSegments(g.geom)).* \n              FROM (SELECT 'TRIANGLE(( 0 0, 0 9, 9 0, 0 0 ))'::geometry AS geom ) AS g ) j;", "execution_result": [[[1, 1], "LINESTRING(0 0,0 9)"], [[1, 2], "LINESTRING(0 9,9 0)"], [[1, 3], "LINESTRING(9 0,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From an interesting triangle, find those edges and corners, then mention each edge's number and how it looks. The triangle is formed by these points: (0 0), (0 9), (9 0).", "source": "original", "new_id": 385}
{"id": 69, "function": "ST_DumpSegments", "question": "找到那个形状的每一条小边，告诉我它们的路径编号和那些奇怪的文本描述，形状是由这些点构成的：0 0, 0 9, 9 0, 0 0。", "sql": "SELECT path, ST_AsText(geom) \n      FROM ( SELECT (ST_DumpSegments(g.geom)).* \n              FROM (SELECT 'TRIANGLE(( 0 0, 0 9, 9 0, 0 0 ))'::geometry AS geom ) AS g ) j;", "execution_result": [[[1, 1], "LINESTRING(0 0,0 9)"], [[1, 2], "LINESTRING(0 9,9 0)"], [[1, 3], "LINESTRING(9 0,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find each little edge from that shape, tell me their path IDs and those strange text descriptions, the shape is made of these points: 0 0, 0 9, 9 0, 0 0.", "source": "original", "new_id": 388}
{"id": 71, "function": "ST_EndPoint", "question": "看看那些坐标1和1结尾是不是空的，然后叫它是空的。", "sql": "SELECT ST_EndPoint('POINT(1 1)'::geometry) IS NULL AS is_null;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the ending of coordinates 1 and 1 is empty, and call it is_null.", "source": "original", "new_id": 395}
{"id": 70, "function": "ST_DumpRings", "question": "能不能帮我找出一个复杂图形里，每个小圈圈的编号和它们的详细形状描述？这些圈圈在某个大形状里，坐标分别是(-8149064 5133092 1)到(-8150305 5132788 1)，还有(-8149362 5132394 1)到(-8149695 5132675 1)。", "sql": "SELECT path, ST_AsEWKT(geom) AS geom \nFROM ST_DumpRings( ST_GeomFromEWKT('POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))') ) AS foo;", "execution_result": [[[0], "POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1,-8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1,-8150305 5132788 1,-8149064 5133092 1))"], [[1], "POLYGON((-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you help me find the number and detailed shape description for each tiny loop inside a complex figure? These loops are within a big shape, with coordinates from (-8149064 5133092 1) to (-8150305 5132788 1), and also from (-8149362 5132394 1) to (-8149695 5132675 1).", "source": "original", "new_id": 392}
{"id": 70, "function": "ST_DumpRings", "question": "给我一些关于那些环形的路径和形状信息，它们从一个包含这些坐标的多边形里出来：(-8149064 5133092 1,-8149064 5132986 1,...,-8150305 5132788 1,-8149064 5133092 1)以及(-8149362 5132394 1,...,-8149362 5132394 1)。", "sql": "SELECT path, ST_AsEWKT(geom) AS geom \nFROM ST_DumpRings( ST_GeomFromEWKT('POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))') ) AS foo;", "execution_result": [[[0], "POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1,-8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1,-8150305 5132788 1,-8149064 5133092 1))"], [[1], "POLYGON((-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me some information about the paths and shapes of those rings that come from a polygon containing these coordinates: (-8149064 5133092 1,-8149064 5132986 1,...,-8150305 5132788 1,-8149064 5133092 1) and (-8149362 5132394 1,...,-8149362 5132394 1).", "source": "original", "new_id": 394}
{"id": 70, "function": "ST_DumpRings", "question": "从一个有内圈的三维形状里，把所有圈圈分开，输出它们的编号和一些特别格式的几何信息。", "sql": "SELECT path, ST_AsEWKT(geom) AS geom \nFROM ST_DumpRings( ST_GeomFromEWKT('POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))') ) AS foo;", "execution_result": [[[0], "POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1,-8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1,-8150305 5132788 1,-8149064 5133092 1))"], [[1], "POLYGON((-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a 3D shape with inner loops, separate all the loops and output their indices along with some specially formatted geometry data.", "source": "original", "new_id": 389}
{"id": 71, "function": "ST_EndPoint", "question": "看看那些坐标1和1的终点是不是空的，结果叫做is_null。", "sql": "SELECT ST_EndPoint('POINT(1 1)'::geometry) IS NULL AS is_null;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the endpoint of those coordinates 1 and 1 is empty, and call the result is_null.", "source": "original", "new_id": 397}
{"id": 71, "function": "ST_EndPoint", "question": "看看1 1这个坐标的终点是不是啥都没有显示出来。", "sql": "SELECT ST_EndPoint('POINT(1 1)'::geometry) IS NULL AS is_null;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the endpoint of the coordinates 1 1 shows up as nothing.", "source": "original", "new_id": 396}
{"id": 71, "function": "ST_EndPoint", "question": "检查一下那些坐标1和1的最后一点是不是空的，用一个叫is_null的标签来标记结果。", "sql": "SELECT ST_EndPoint('POINT(1 1)'::geometry) IS NULL AS is_null;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the last dot of the coordinates 1 and 1 is empty, using a label called is_null to mark the result.", "source": "original", "new_id": 398}
{"id": 71, "function": "ST_EndPoint", "question": "看看那个坐标点(1 1)的终点有没有什么特别的空白情况。", "sql": "SELECT ST_EndPoint('POINT(1 1)'::geometry) IS NULL AS is_null;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there's anything particularly empty about the endpoint of that coordinate (1 1).", "source": "original", "new_id": 399}
{"id": 70, "function": "ST_DumpRings", "question": "看看这个三维多边形，有些小圈圈在里面，能不能给我它们的顺序和那种特别的字符串样子？", "sql": "SELECT path, ST_AsEWKT(geom) AS geom \nFROM ST_DumpRings( ST_GeomFromEWKT('POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))') ) AS foo;", "execution_result": [[[0], "POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1,-8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1,-8150305 5132788 1,-8149064 5133092 1))"], [[1], "POLYGON((-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Look at this 3D polygon, it has some little loops inside, can you give me their order and that special string representation?", "source": "original", "new_id": 393}
{"id": 71, "function": "ST_EndPoint", "question": "检查一下那个二维点POINT(1 1)的终点是不是空的，结果要是个布尔值，叫它is_null吧。", "sql": "SELECT ST_EndPoint('POINT(1 1)'::geometry) IS NULL AS is_null;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the endpoint of that 2D point POINT(1 1) is empty, and make the result a boolean value called is_null.", "source": "original", "new_id": 400}
{"id": 72, "function": "ST_EndPoint", "question": "在那个由点串组成的3D路线里，看看最后一个点的位置是什么，记得用特别的格式写出来哦。", "sql": "SELECT ST_AsEWKT(ST_EndPoint('LINESTRING(1 1 2, 1 2 3, 0 0 5)'));", "execution_result": [["POINT(0 0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In that 3D path made of a series of points, find out what the location of the last point is, and remember to write it in a special format.", "source": "original", "new_id": 401}
{"id": 72, "function": "ST_EndPoint", "question": "从那个包含点的线段里，找出最后一个点的详细坐标，记得带上高度值哦。", "sql": "SELECT ST_AsEWKT(ST_EndPoint('LINESTRING(1 1 2, 1 2 3, 0 0 5)'));", "execution_result": [["POINT(0 0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From the line with those points, find the detailed coordinates of the last point, remember to include the height value.", "source": "original", "new_id": 405}
{"id": 72, "function": "ST_EndPoint", "question": "把那条三维线段的最后一个地方，也就是(0 0 5)，用一种特别的格式表示出来。", "sql": "SELECT ST_AsEWKT(ST_EndPoint('LINESTRING(1 1 2, 1 2 3, 0 0 5)'));", "execution_result": [["POINT(0 0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Express the last spot of that 3D line, which is (0 0 5), in a special format.", "source": "original", "new_id": 402}
{"id": 72, "function": "ST_EndPoint", "question": "给我那个三维的线条最后一个点的坐标，像EWKT这种格式，别忘了那些数字。", "sql": "SELECT ST_AsEWKT(ST_EndPoint('LINESTRING(1 1 2, 1 2 3, 0 0 5)'));", "execution_result": [["POINT(0 0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me the coordinates of the last point of that 3D line in a format like EWKT, don't forget those numbers.", "source": "original", "new_id": 404}
{"id": 72, "function": "ST_EndPoint", "question": "找找那些三维坐标的最后一个点，然后用一种特殊的格式来呈现它，记得它是从(1,1,2)到(0,0,5)经过中间的(1,2,3)哦。", "sql": "SELECT ST_AsEWKT(ST_EndPoint('LINESTRING(1 1 2, 1 2 3, 0 0 5)'));", "execution_result": [["POINT(0 0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the last point of those 3D coordinates, and show it in a special format, remembering it goes from (1,1,2) to (0,0,5) passing through (1,2,3) in the middle.", "source": "original", "new_id": 403}
{"id": 72, "function": "ST_EndPoint", "question": "给我那个3D线条的最后一个小点的位置，像这种：LINESTRING(1 1 2, 1 2 3, 0 0 5)，要用EWKT的方式，别忘了Z的数值哦。", "sql": "SELECT ST_AsEWKT(ST_EndPoint('LINESTRING(1 1 2, 1 2 3, 0 0 5)'));", "execution_result": [["POINT(0 0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Tell me the position of the last little dot of that 3D line, like this: LINESTRING(1 1 2, 1 2 3, 0 0 5). Make sure to use EWKT style and don't forget the Z values.", "source": "original", "new_id": 406}
{"id": 73, "function": "ST_EndPoint", "question": "把那个弯曲线路的最后一个点，像文字一样写出来，坐标是这些：5 2,-3 1.999999, -2 1, -4 2, 6 3。", "sql": "SELECT ST_AsText(ST_EndPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(6 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Write out the last point of that curvy line like text, with these coordinates: 5 2,-3 1.999999, -2 1, -4 2, 6 3.", "source": "original", "new_id": 408}
{"id": 73, "function": "ST_EndPoint", "question": "找出那圆弧线最后一个点的位置，然后用一种特别的文本方式表达出来，记住那些数字：5 2, -3 1.999999, -2 1, -4 2, 6 3。", "sql": "SELECT ST_AsText(ST_EndPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(6 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Identify the location of the last point on that circular arc, then express it in a special text form, remembering those numbers: 5 2, -3 1.999999, -2 1, -4 2, 6 3.", "source": "original", "new_id": 407}
{"id": 73, "function": "ST_EndPoint", "question": "把(5 2,-3 1.999999, -2 1, -4 2, 6 3)这个弯曲的线路最后一个点的样子说出来。", "sql": "SELECT ST_AsText(ST_EndPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(6 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Describe how the last point looks for this bendy path (5 2,-3 1.999999, -2 1, -4 2, 6 3).", "source": "original", "new_id": 410}
{"id": 74, "function": "ST_Envelope", "question": "把在(1,3)位置的小点的外面框框用文字表达出来。", "sql": "SELECT ST_AsText(ST_Envelope('POINT(1 3)'::geometry));", "execution_result": [["POINT(1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Express the outer frame of the little dot at location (1,3) in words.", "source": "original", "new_id": 414}
{"id": 73, "function": "ST_EndPoint", "question": "找出那个弯弯曲曲的线条的最后一个点，用文字形式表达出来，坐标是从5 2到6 3。", "sql": "SELECT ST_AsText(ST_EndPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(6 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Identify the last point of that curvy line, and express it in text form, with coordinates ranging from 5 2 to 6 3.", "source": "original", "new_id": 411}
{"id": 74, "function": "ST_Envelope", "question": "找出包含点(1 3)的那个矩形，并把它写成一种特别的文本格式。", "sql": "SELECT ST_AsText(ST_Envelope('POINT(1 3)'::geometry));", "execution_result": [["POINT(1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the rectangle that includes the point (1 3) and write it in a special text format.", "source": "original", "new_id": 413}
{"id": 73, "function": "ST_EndPoint", "question": "告诉我那个从5 2到6 3的圆弧最后一个点的样子，用那种描述坐标的方式。", "sql": "SELECT ST_AsText(ST_EndPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(6 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Tell me what the last point looks like from the arc going from 5 2 to 6 3, using that way of describing coordinates.", "source": "original", "new_id": 412}
{"id": 68, "function": "ST_DumpSegments", "question": "请把由小三角形拼成的一个结构中每条边的几何信息和路径编号找出来，这个结构里有两个小三角：一个由点(0 0 0), (0 0 1), (0 1 0)组成，另一个由点(0 0 0), (0 1 0), (1 1 0)组成。", "sql": "SELECT path, ST_AsEWKT(geom) \nFROM (SELECT (ST_DumpSegments(g.geom)).* \n    FROM (SELECT 'TIN((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )'::geometry AS geom) AS g) j;", "execution_result": [[[1, 1, 1], "LINESTRING(0 0 0,0 0 1)"], [[1, 1, 2], "LINESTRING(0 0 1,0 1 0)"], [[1, 1, 3], "LINESTRING(0 1 0,0 0 0)"], [[2, 1, 1], "LINESTRING(0 0 0,0 1 0)"], [[2, 1, 2], "LINESTRING(0 1 0,1 1 0)"], [[2, 1, 3], "LINESTRING(1 1 0,0 0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you find the geometric details and path numbers of each edge in a structure made up of small triangles? The structure contains two small triangles: one formed by points (0 0 0), (0 0 1), (0 1 0), and the other formed by points (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 381}
{"id": 74, "function": "ST_Envelope", "question": "对于那个在1和3之间的小点，能用文字描述一下它的最小外框吗？", "sql": "SELECT ST_AsText(ST_Envelope('POINT(1 3)'::geometry));", "execution_result": [["POINT(1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that little dot at 1 and 3, can you describe its smallest outer box in words?", "source": "original", "new_id": 417}
{"id": 74, "function": "ST_Envelope", "question": "给一个点在1和3的位置，能不能用文字描述它周围最小的矩形范围？", "sql": "SELECT ST_AsText(ST_Envelope('POINT(1 3)'::geometry));", "execution_result": [["POINT(1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Given a point at 1 and 3, can you use words to describe the smallest rectangular area around it?", "source": "original", "new_id": 418}
{"id": 74, "function": "ST_Envelope", "question": "给我看看那个点1 3的外面轮廓线是什么样的，用那个常见的格式表达出来。", "sql": "SELECT ST_AsText(ST_Envelope('POINT(1 3)'::geometry));", "execution_result": [["POINT(1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what the outer contour line looks like for that point 1 3, using that common format.", "source": "original", "new_id": 416}
{"id": 75, "function": "ST_Envelope", "question": "找到一个能完全包住从(0, 0)到(1, 3)这条线的小形状。", "sql": "SELECT ST_Envelope('LINESTRING(0 0, 1 3)'::geometry);", "execution_result": [["010300000001000000050000000000000000000000000000000000000000000000000000000000000000000840000000000000F03F0000000000000840000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find a small shape that can completely cover the line from (0, 0) to (1, 3).", "source": "original", "new_id": 421}
{"id": 73, "function": "ST_EndPoint", "question": "找出那条由点(5 2)到(6 3)的弯曲线最后一个小点的位置，并用一种常见的文字格式告诉我。", "sql": "SELECT ST_AsText(ST_EndPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(6 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the last tiny spot of that curvy line from point (5 2) to (6 3) and tell me in a common text format.", "source": "original", "new_id": 409}
{"id": 75, "function": "ST_Envelope", "question": "把从(0,0)到(1,3)的那条线的外面包起来的最小长方形用文字形式表达出来。", "sql": "SELECT ST_AsText(ST_Envelope('LINESTRING(0 0, 1 3)'::geometry));", "execution_result": [["POLYGON((0 0,0 3,1 3,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Express in words the smallest rectangle that wraps around the line from (0,0) to (1,3).", "source": "original", "new_id": 420}
{"id": 75, "function": "ST_Envelope", "question": "给出那些点(0 0, 1 3)的最小包围盒的WKT样子。", "sql": "SELECT ST_AsText(ST_Envelope('LINESTRING(0 0, 1 3)'::geometry));", "execution_result": [["POLYGON((0 0,0 3,1 3,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide the WKT appearance of the smallest box that can cover those points (0 0, 1 3).", "source": "original", "new_id": 422}
{"id": 74, "function": "ST_Envelope", "question": "给一个位于1和3的地方的小点，看看能不能找到一个简单的四边形来盖住它，然后用某种格式写出来。", "sql": "SELECT ST_AsText(ST_Envelope('POINT(1 3)'::geometry));", "execution_result": [["POINT(1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For a little dot located at 1 and 3, see if you can find a simple rectangle to cover it, then write it out in some format.", "source": "original", "new_id": 415}
{"id": 75, "function": "ST_Envelope", "question": "找出LINESTRING(0 0, 1 3)这些小点的外面那个包围的四边形，用文字形式说出来。", "sql": "SELECT ST_AsText(ST_Envelope('LINESTRING(0 0, 1 3)'::geometry));", "execution_result": [["POLYGON((0 0,0 3,1 3,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the outer rectangle that surrounds those little points LINESTRING(0 0, 1 3) and describe it in words.", "source": "original", "new_id": 423}
{"id": 75, "function": "ST_Envelope", "question": "对于连接(0 0)和(1 3)这两个点的线，找一个能完全包住它的矩形，然后用某种文本格式来表达这个矩形。", "sql": "SELECT ST_AsText(ST_Envelope('LINESTRING(0 0, 1 3)'::geometry));", "execution_result": [["POLYGON((0 0,0 3,1 3,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the line connecting the points (0 0) and (1 3), find a rectangle that can completely cover it, then express this rectangle in a certain text format.", "source": "original", "new_id": 419}
{"id": 75, "function": "ST_Envelope", "question": "给出一根从(0 0)到(1 3)的线的那个能把它包住的最小框框的样子，用那种描述形状的方式。", "sql": "SELECT ST_AsText(ST_Envelope('LINESTRING(0 0, 1 3)'::geometry));", "execution_result": [["POLYGON((0 0,0 3,1 3,1 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide the shape of the smallest box that can enclose a line stretching from (0 0) to (1 3), using that way of describing shapes.", "source": "original", "new_id": 424}
{"id": 76, "function": "ST_Envelope", "question": "对于那些坐标在(0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0)之间的小形状，找出一个能够完全包住它的简单框，并用特别的格式表达出来。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000001 1,1.0000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those little dots located at (0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0), find a simple frame that can entirely cover it and express it in a special format.", "source": "original", "new_id": 425}
{"id": 76, "function": "ST_Envelope", "question": "给出由这些点组成的图形的最小外框的文字形式，点是(0 0)、(0 1)、(1.0000001 1)、(1.0000001 0)。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000001 1,1.0000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide the text form of the smallest outer box for the shape made by these points: (0 0), (0 1), (1.0000001 1), (1.0000001 0).", "source": "original", "new_id": 426}
{"id": 76, "function": "ST_Envelope", "question": "能不能用文字描述一下那个由小圈圈组成的形状的最小外框，记得保持几位小数哦。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000001 1,1.0000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you describe in words the smallest outer frame of that shape made of little loops, keeping a few decimal places?", "source": "original", "new_id": 429}
{"id": 76, "function": "ST_Envelope", "question": "给出一个形状，像是四个点连成的封闭区域，点在(0, 0), (0, 1), (1.0000001, 1), (1.0000001, 0)和(0, 0)处，找出能够完全包住它的最简单长方形，并以某种文本格式展现出来。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000001 1,1.0000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a shape formed by connecting four points, located at (0, 0), (0, 1), (1.0000001, 1), (1.0000001, 0), and (0, 0). Find the simplest rectangle that can completely cover it and display it in some kind of text format.", "source": "original", "new_id": 427}
{"id": 76, "function": "ST_Envelope", "question": "给那个POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))画个能刚好把它包住的长方形，然后用一种能看懂的文字形式表达出来。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000001 1,1.0000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a rectangle that just fits around that POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0)), then express it in a readable text form.", "source": "original", "new_id": 428}
{"id": 77, "function": "ST_Envelope", "question": "给出闭合形状的外边框，形状是由(0 0)、(0 1)、(1.0000000001 1)、(1.0000000001 0)这些点围成的，用一种能看到每个小数点的方式展示。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000000001 1,1.0000000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show the outer frame of a closed shape formed by points (0 0), (0 1), (1.0000000001 1), (1.0000000001 0), in a way that shows every decimal point precisely.", "source": "original", "new_id": 433}
{"id": 77, "function": "ST_Envelope", "question": "给定一个形状，它由(0 0), (0 1), (1.0000000001 1), (1.0000000001 0), (0 0)这些点构成，找一个包含它的最小框，并用一种格式展示出来。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000000001 1,1.0000000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Given a shape with the points (0 0), (0 1), (1.0000000001 1), (1.0000000001 0), (0 0), find the smallest box that can cover it and display it in a certain format.", "source": "original", "new_id": 431}
{"id": 77, "function": "ST_Envelope", "question": "给定那些坐标点(0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0)，找出一个刚好能把它们包住的长方形，并用文字形式表达出来。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000000001 1,1.0000000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Given those points (0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0), find a rectangle that just manages to cover them, and express it in words.", "source": "original", "new_id": 432}
{"id": 77, "function": "ST_Envelope", "question": "找出一个能够完全包住那些点的形状，像是从POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))开始的四边形，并精确展示里面的坐标。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000000001 1,1.0000000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find a shape that can completely cover those points, like a quadrilateral starting from POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0)), and accurately show the coordinates inside.", "source": "original", "new_id": 436}
{"id": 77, "function": "ST_Envelope", "question": "给出包含形状POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))的最小长方形的WKT形式是什么呢？", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000000001 1,1.0000000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What is the WKT format for the smallest rectangle that can contain the shape POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))?", "source": "original", "new_id": 434}
{"id": 78, "function": "ST_Envelope", "question": "把那些从(55,75)到(125,150)的线和一个在(20,80)的小点结合起来，看看能用什么四边形把它们都包住，然后给我它的文本样子。", "sql": "SELECT ST_AsText(ST_Envelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 75,20 150,125 150,125 75,20 75))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine that line from (55,75) to (125,150) with a little dot at (20,80), and see what kind of rectangle can cover them all, then give me its text form.", "source": "original", "new_id": 438}
{"id": 78, "function": "ST_Envelope", "question": "想象一下一个长条形的线段(55 75,125 150)和一个孤零零的点(20,80)，找出把它们一起装进去的最小盒子，然后用一种特别的格式描述这个盒子的形状。", "sql": "SELECT ST_AsText(ST_Envelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 75,20 150,125 150,125 75,20 75))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a long line from (55 75) to (125 150) and a lonely point at (20,80). Find the smallest box that can fit them both together, and describe the shape of this box in a special format.", "source": "original", "new_id": 437}
{"id": 78, "function": "ST_Envelope", "question": "把一条线从(55 75)到(125 150)和一个小点(20,80)放在一起，看看它们的最大外套是什么样子，用WKT方式描述。", "sql": "SELECT ST_AsText(ST_Envelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 75,20 150,125 150,125 75,20 75))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Put a line from (55 75) to (125 150) together with a little dot at (20,80) and see what their biggest coat looks like, described in WKT form.", "source": "original", "new_id": 440}
{"id": 76, "function": "ST_Envelope", "question": "给那个形状POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))找个刚好能装下它的大长方形，然后告诉我它的具体样子，记得数字要精确到小数点后7位哦。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000001 1,1.0000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that shape POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0)), find a big rectangle that just fits around it, and let me know its exact details, with numbers precise to 7 decimal places.", "source": "original", "new_id": 430}
{"id": 79, "function": "ST_ExteriorRing", "question": "从那个有点像立体形状的东西里拿出它的最外面一圈线，确保保留那些坐标，比如0 0 1之类的，然后用一种特别格式来表示。", "sql": "SELECT ST_AsEWKT( ST_ExteriorRing( ST_GeomFromEWKT('POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))') ) );", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 1,1 1 1,0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the outermost loop from that shape that seems 3D, making sure to keep those coordinates like 0 0 1, and express it in a special format.", "source": "original", "new_id": 443}
{"id": 78, "function": "ST_Envelope", "question": "找出由线段(55 75到125 150)和一个点(20,80)结合后形成的最小覆盖框，结果用一种文本形式表示出来。", "sql": "SELECT ST_AsText(ST_Envelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 75,20 150,125 150,125 75,20 75))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the smallest covering box formed by combining a line from (55 75 to 125 150) and a point (20,80), and express the result in a text format.", "source": "original", "new_id": 441}
{"id": 78, "function": "ST_Envelope", "question": "把那些小点和线连在一起，然后找个能把它们全包住的最小长方形，用一种特别的字符串方式表达出来。", "sql": "SELECT ST_AsText(ST_Envelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 75,20 150,125 150,125 75,20 75))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those little dots and the line, then find the smallest rectangle that can cover them all, expressing it in a special string format.", "source": "original", "new_id": 442}
{"id": 77, "function": "ST_Envelope", "question": "你能用一种常见的文字形式给出那个形状的最小外包长方形吗？形状的点是(0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0)。", "sql": "SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))'::geometry));", "execution_result": [["POLYGON((0 0,0 1,1.0000000001 1,1.0000000001 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you provide the smallest rectangle that wraps around that shape in a common text form? The shape's points are (0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0).", "source": "original", "new_id": 435}
{"id": 78, "function": "ST_Envelope", "question": "把那些连接起来的点(55 75到125 150)和孤零零的点(20 80)放在一起，找出一个能围住它们的最简单的四边形，然后用WKT的方式告诉我结果，叫它wktenv。", "sql": "SELECT ST_AsText(ST_Envelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 75,20 150,125 150,125 75,20 75))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those connected points from (55 75 to 125 150) and the lonely point at (20 80), put them together, find the simplest rectangle that can surround them, and tell me the result in WKT format, call it wktenv.", "source": "original", "new_id": 439}
{"id": 79, "function": "ST_ExteriorRing", "question": "给我看看由五个点组成的立体图形的外圈，所有点的高度都是1，用某种特殊格式表示。", "sql": "SELECT ST_AsEWKT( ST_ExteriorRing( ST_GeomFromEWKT('POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))') ) );", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 1,1 1 1,0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the outer loop of a 3D shape made of five points, where all points have a height of 1, in some special format.", "source": "original", "new_id": 445}
{"id": 79, "function": "ST_ExteriorRing", "question": "给我看看那些点围成的三维形状的外边框线，用奇怪的文本格式来表达，记得要带上高度哦。", "sql": "SELECT ST_AsEWKT( ST_ExteriorRing( ST_GeomFromEWKT('POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))') ) );", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 1,1 1 1,0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the outer boundary line of those points forming a 3D shape, using a strange text format, and don't forget to include the height.", "source": "original", "new_id": 446}
{"id": 80, "function": "ST_GeometryN", "question": "从一个包含两块三角形片的3D形状中，找出第二块的具体样子，并用某种格式表达出来。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(geom,2)) AS wkt \n   FROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a 3D shape made up of two triangular pieces, find the second piece and express it in a certain format.", "source": "original", "new_id": 449}
{"id": 79, "function": "ST_ExteriorRing", "question": "对于那些在空中连成一圈的点，能不能给我它们的字符串表示，特别是把高度也算进去？", "sql": "SELECT ST_AsEWKT( ST_ExteriorRing( ST_GeomFromEWKT('POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))') ) );", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 1,1 1 1,0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those points connected in a circle in the air, can you give me their string representation, especially including the height?", "source": "original", "new_id": 448}
{"id": 80, "function": "ST_GeometryN", "question": "看看那些集合的第二部分是什么，里面有点点和线线，比如0 0 0, 0 0 1, 0 1 0这样的。", "sql": "SELECT ST_GeometryN(geom,2) \nFROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["011100008001000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000F03F0000000000000000000000000000F03F000000000000F03F0000000000000000000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check what the second part of those sets is, with dots and lines like 0 0 0, 0 0 1, 0 1 0.", "source": "original", "new_id": 451}
{"id": 80, "function": "ST_GeometryN", "question": "把那些坐标(0 0 0, 0 1 0, 1 1 0)构成的第二个小三角片，变成某种特别的文字格式。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(geom,2)) AS wkt \n   FROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert those coordinates (0 0 0, 0 1 0, 1 1 0) forming the second little triangle piece into some special text format.", "source": "original", "new_id": 450}
{"id": 79, "function": "ST_ExteriorRing", "question": "把那些位于(0,0,1)、(1,1,1)、(1,2,1)、(1,1,1)、(0,0,1)的小点连成一个三维形状，然后看看它外面的线长什么样，用一种特别的格式展示出来。", "sql": "SELECT ST_AsEWKT( ST_ExteriorRing( ST_GeomFromEWKT('POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))') ) );", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 1,1 1 1,0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those little dots at (0,0,1), (1,1,1), (1,2,1), (1,1,1), (0,0,1) into a 3D shape, then see what the line around it looks like, and show it in a special format.", "source": "original", "new_id": 444}
{"id": 80, "function": "ST_GeometryN", "question": "从由小三角面组成的空间网络中，找出第二个面片，给我它的空间格式描述，包含这些点：0 0 0, 0 1 0, 1 1 0。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(geom,2)) AS wkt \n   FROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a space network made of small triangular faces, find the second patch and give me its spatial format description, including these points: 0 0 0, 0 1 0, 1 1 0.", "source": "original", "new_id": 452}
{"id": 79, "function": "ST_ExteriorRing", "question": "能不能拿到那个三维形状的外圈信息，用一种带Z坐标的特殊字符串形式表示？形状是这样的：POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))。", "sql": "SELECT ST_AsEWKT( ST_ExteriorRing( ST_GeomFromEWKT('POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))') ) );", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 1,1 1 1,0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you get the outer ring information of that 3D shape, represented in a special string format with Z-coordinates? The shape looks like this: POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1)).", "source": "original", "new_id": 447}
{"id": 80, "function": "ST_GeometryN", "question": "从那种用坐标点连接起来的三维形状中，找出第二组小三角形的描述，记得用一种包含坐标的特别格式哦。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(geom,2)) AS wkt \n   FROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From that 3D shape made by connecting coordinate points, find the description of the second small triangle, and remember to use a special format that includes coordinates.", "source": "original", "new_id": 453}
{"id": 81, "function": "ST_GeometryN", "question": "把那个有6个小平面的小立体中，数到第三个的那些点儿，用一种带字母的格式说出来。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(p_geom,3)) AS geom_ewkt \n    FROM (SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )') AS p_geom ) AS a;", "execution_result": [["POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From that little 3D shape with 6 tiny surfaces, tell me about the third set of those points in a lettered format.", "source": "original", "new_id": 456}
{"id": 81, "function": "ST_GeometryN", "question": "从由许多小面组成的复杂形状中，找出第三个用坐标描述的面，告诉我它长什么样子，用那些专业的字母和数字描述。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(p_geom,3)) AS geom_ewkt \n    FROM (SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )') AS p_geom ) AS a;", "execution_result": [["POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a complex shape made of many little faces, find the third face described by coordinates and tell me what it looks like using those professional letters and numbers.", "source": "original", "new_id": 455}
{"id": 81, "function": "ST_GeometryN", "question": "从那个多面体的形状里，给我说说第三个面是怎样的，用那种特殊格式来描述。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(p_geom,3)) AS geom_ewkt \n    FROM (SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )') AS p_geom ) AS a;", "execution_result": [["POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From that shape of the polyhedral, tell me how the third face is, using that special format to describe it.", "source": "original", "new_id": 458}
{"id": 81, "function": "ST_GeometryN", "question": "能不能找出那个复杂形状里的第三个部分，用那些坐标写出来？就像0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0那种格式。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(p_geom,3)) AS geom_ewkt \n    FROM (SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )') AS p_geom ) AS a;", "execution_result": [["POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you find the third piece in that complex shape and write it out using those coordinates? Like in the format 0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0.", "source": "original", "new_id": 460}
{"id": 81, "function": "ST_GeometryN", "question": "能否给我那种格式的文字，关于那些点构成的第三个面，像0 0 0到1 0 0再到1 0 1然后回到0 0 1，最后回到起点的那个面？", "sql": "SELECT ST_AsEWKT(ST_GeometryN(p_geom,3)) AS geom_ewkt \n    FROM (SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )') AS p_geom ) AS a;", "execution_result": [["POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you provide me with that format text about the third face made of those points, like from 0 0 0 to 1 0 0 then to 1 0 1 and back to 0 0 1, ending back at the start?", "source": "original", "new_id": 459}
{"id": 80, "function": "ST_GeometryN", "question": "能不能给我第二个小三角的那些坐标的EWKT格式？它们在一个奇特的三维网中，第一个小三角是0 0 0, 0 0 1, 0 1 0，第二个是0 0 0, 0 1 0, 1 1 0。", "sql": "SELECT ST_AsEWKT(ST_GeometryN(geom,2)) AS wkt \n   FROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["TRIANGLE((0 0 0,0 1 0,1 1 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you provide the EWKT format of the second small triangle's coordinates? They are in a peculiar 3D network, with the first small triangle being 0 0 0, 0 0 1, 0 1 0, and the second one being 0 0 0, 0 1 0, 1 1 0.", "source": "original", "new_id": 454}
{"id": 83, "function": "ST_GeometryType", "question": "如果你有一串由坐标(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)连成的线，你觉得它会被叫做什么类型的几何形状呢？", "sql": "SELECT ST_GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["ST_LineString"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you have a string of points connected by coordinates (77.29 29.07), (77.42 29.26), (77.27 29.31), (77.29 29.07), what kind of geometric shape do you think it would be called?", "source": "original", "new_id": 467}
{"id": 83, "function": "ST_GeometryType", "question": "如果把这些坐标连成一条线：从77.29 29.07开始，经过77.42 29.26和77.27 29.31，再回到77.29 29.07，想知道这个连线是什么类型的形状吗？", "sql": "SELECT ST_GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["ST_LineString"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you connect these points to form a line: starting at 77.29 29.07, passing through 77.42 29.26 and 77.27 29.31, then back to 77.29 29.07, what kind of shape is this line?", "source": "original", "new_id": 468}
{"id": 83, "function": "ST_GeometryType", "question": "如果你有一串点，像是(77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07)，它们连起来成了一条线，这样的东西叫什么？", "sql": "SELECT ST_GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["ST_LineString"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you have a series of dots like (77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07) and they form a line when connected, what is this thing called?", "source": "original", "new_id": 470}
{"id": 82, "function": "ST_GeometryN", "question": "看看那些点和曲线，把每个小部分拿出来排个号，用EWKT的方式表示，数量最多到100个。点有(1 2 7), (3 4 7), (5 6 7), (8 9 10)，曲线由弯弯的(2.5 2.5, 4.5 2.5, 3.5 3.5)和直线(10 11, 12 11)组成。", "sql": "SELECT n, ST_AsEWKT(ST_GeometryN(geom, n)) AS geomewkt \nFROM ( VALUES (ST_GeomFromEWKT('MULTIPOINT((1 2 7), (3 4 7), (5 6 7), (8 9 10))') ), \n       ( ST_GeomFromEWKT('MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5, 3.5 3.5), (10 11, 12 11))') ) )AS foo(geom)  \nCROSS JOIN generate_series(1,100) n\nWHERE n <= ST_NumGeometries(geom);", "execution_result": [[1, "POINT(1 2 7)"], [1, "CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5)"], [2, "POINT(3 4 7)"], [2, "LINESTRING(10 11,12 11)"], [3, "POINT(5 6 7)"], [4, "POINT(8 9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at those dots and curves, pull out each little piece and give it a number, represented in EWKT format, with a maximum of 100 items. The dots are (1 2 7), (3 4 7), (5 6 7), (8 9 10), and the curves are made of a bendy part (2.5 2.5, 4.5 2.5, 3.5 3.5) and a straight line (10 11, 12 11).", "source": "original", "new_id": 461}
{"id": 82, "function": "ST_GeometryN", "question": "有一个由四个点组成的小集合，像(1 2 7)、(3 4 7)、(5 6 7)、(8 9 10)，还有另一个包含弧线和直线段的复合形状，比如弧线是从(2.5 2.5)到(4.5 2.5)再到(3.5 3.5)，直线段是从(10 11)到(12 11)。需要列出它们每个部分的编号和一些具体的描述。", "sql": "SELECT n, ST_AsEWKT(ST_GeometryN(geom, n)) AS geomewkt \nFROM ( VALUES (ST_GeomFromEWKT('MULTIPOINT((1 2 7), (3 4 7), (5 6 7), (8 9 10))') ), \n       ( ST_GeomFromEWKT('MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5, 3.5 3.5), (10 11, 12 11))') ) )AS foo(geom)  \nCROSS JOIN generate_series(1,100) n\nWHERE n <= ST_NumGeometries(geom);", "execution_result": [[1, "POINT(1 2 7)"], [1, "CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5)"], [2, "POINT(3 4 7)"], [2, "LINESTRING(10 11,12 11)"], [3, "POINT(5 6 7)"], [4, "POINT(8 9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a small set of four points, like (1 2 7), (3 4 7), (5 6 7), (8 9 10), and another composite shape that includes an arc and a straight segment. For example, the arc goes from (2.5 2.5) to (4.5 2.5) to (3.5 3.5), and the straight line goes from (10 11) to (12 11). You need to list the number and some specific description for each part.", "source": "original", "new_id": 462}
{"id": 83, "function": "ST_GeometryType", "question": "如果用这些点(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)连成一条闭合的线段，你能说出它具体属于哪种几何形状吗？", "sql": "SELECT ST_GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["ST_LineString"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If these points (77.29 29.07), (77.42 29.26), (77.27 29.31), (77.29 29.07) are connected into a closed line, can you tell what specific geometric shape it belongs to?", "source": "original", "new_id": 469}
{"id": 83, "function": "ST_GeometryType", "question": "对于那些从77.29 29.07出发，经过77.42 29.26和77.27 29.31，最后又回到起点77.29 29.07的线条，官方是怎么称呼这种形状的？", "sql": "SELECT ST_GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["ST_LineString"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those lines starting at 77.29 29.07, passing through 77.42 29.26 and 77.27 29.31, and finally returning to the starting point 77.29 29.07, what does the official name this shape?", "source": "original", "new_id": 471}
{"id": 83, "function": "ST_GeometryType", "question": "如果有一条线段从77.29 29.07开始，经过77.42 29.26和77.27 29.31，然后又回到77.29 29.07，这样的形状会被系统认为是什么类型呢？", "sql": "SELECT ST_GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [["ST_LineString"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If there’s a line starting at 77.29 29.07, passing through 77.42 29.26 and 77.27 29.31, and then returning to 77.29 29.07, what type would the system consider this shape to be?", "source": "original", "new_id": 472}
{"id": 84, "function": "ST_GeometryType", "question": "看看一个包含两片小三角形的东西，它们的坐标是0 0 0、0 0 1、0 1 0，还有0 0 0、0 1 0、1 1 0，是什么样的类型？", "sql": "SELECT ST_GeometryType(geom) AS result \nFROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["ST_Tin"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check out something that includes two little triangles, with coordinates 0 0 0, 0 0 1, 0 1 0, and 0 0 0, 0 1 0, 1 1 0, to see what type it is.", "source": "original", "new_id": 474}
{"id": 82, "function": "ST_GeometryN", "question": "给出那些点和弯曲线的详细描述，包括点的位置，比如(1 2 7)、(3 4 7)、(5 6 7)、(8 9 10)这样的坐标，还有像弧线那样的形状，坐标是(2.5 2.5, 4.5 2.5, 3.5 3.5)和直线段上的(10 11, 12 11)。确保每个小片段都有一个序号，序号不能超过总数量。", "sql": "SELECT n, ST_AsEWKT(ST_GeometryN(geom, n)) AS geomewkt \nFROM ( VALUES (ST_GeomFromEWKT('MULTIPOINT((1 2 7), (3 4 7), (5 6 7), (8 9 10))') ), \n       ( ST_GeomFromEWKT('MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5, 3.5 3.5), (10 11, 12 11))') ) )AS foo(geom)  \nCROSS JOIN generate_series(1,100) n\nWHERE n <= ST_NumGeometries(geom);", "execution_result": [[1, "POINT(1 2 7)"], [1, "CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5)"], [2, "POINT(3 4 7)"], [2, "LINESTRING(10 11,12 11)"], [3, "POINT(5 6 7)"], [4, "POINT(8 9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide detailed descriptions of those points and curved lines, including the positions of the points like (1 2 7), (3 4 7), (5 6 7), (8 9 10) coordinates, and shapes like arcs with coordinates (2.5 2.5, 4.5 2.5, 3.5 3.5) and on the straight line segment (10 11, 12 11). Ensure each little segment has a sequence number that does not exceed the total count.", "source": "original", "new_id": 465}
{"id": 84, "function": "ST_GeometryType", "question": "看看由这些小三角形拼起来的东西，像是0 0 0、0 0 1、0 1 0，还有0 0 0、0 1 0、1 1 0这样的点，是什么类型的几何形状呢？", "sql": "SELECT ST_GeometryType(geom) AS result \nFROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["ST_Tin"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you figure out what type of geometric shape is formed by these small triangles, with points like 0 0 0, 0 0 1, 0 1 0, and also 0 0 0, 0 1 0, 1 1 0?", "source": "original", "new_id": 473}
{"id": 82, "function": "ST_GeometryN", "question": "对于那些由四个小点组成的复杂形状，比如(1 2 7)、(3 4 7)、(5 6 7)、(8 9 10)，还有一些曲线，比如由点组成的弯曲部分(2.5 2.5, 4.5 2.5, 3.5 3.5)和直线部分(10 11, 12 11)，请列出每个小元素的序号和它们的扩展格式，记得包含Z值哦。", "sql": "SELECT n, ST_AsEWKT(ST_GeometryN(geom, n)) AS geomewkt \nFROM ( VALUES (ST_GeomFromEWKT('MULTIPOINT((1 2 7), (3 4 7), (5 6 7), (8 9 10))') ), \n       ( ST_GeomFromEWKT('MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5, 3.5 3.5), (10 11, 12 11))') ) )AS foo(geom)  \nCROSS JOIN generate_series(1,100) n\nWHERE n <= ST_NumGeometries(geom);", "execution_result": [[1, "POINT(1 2 7)"], [1, "CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5)"], [2, "POINT(3 4 7)"], [2, "LINESTRING(10 11,12 11)"], [3, "POINT(5 6 7)"], [4, "POINT(8 9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those complex shapes made up of four little dots like (1 2 7), (3 4 7), (5 6 7), (8 9 10), and some curves like the bendy part with points (2.5 2.5, 4.5 2.5, 3.5 3.5) and the straight part (10 11, 12 11), list each small element's number and their expanded format, remember to include the Z values.", "source": "original", "new_id": 464}
{"id": 82, "function": "ST_GeometryN", "question": "列出一些编号和几何数据，每个编号对应一些点或线，比如有几个点(1 2 7)、(3 4 7)、(5 6 7)、(8 9 10)，还有一段弯曲的线(点是2.5 2.5、4.5 2.5、3.5 3.5)和一段直线(点是10 11、12 11)。确保编号不会超过这些点和线的总数。", "sql": "SELECT n, ST_AsEWKT(ST_GeometryN(geom, n)) AS geomewkt \nFROM ( VALUES (ST_GeomFromEWKT('MULTIPOINT((1 2 7), (3 4 7), (5 6 7), (8 9 10))') ), \n       ( ST_GeomFromEWKT('MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5, 3.5 3.5), (10 11, 12 11))') ) )AS foo(geom)  \nCROSS JOIN generate_series(1,100) n\nWHERE n <= ST_NumGeometries(geom);", "execution_result": [[1, "POINT(1 2 7)"], [1, "CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5)"], [2, "POINT(3 4 7)"], [2, "LINESTRING(10 11,12 11)"], [3, "POINT(5 6 7)"], [4, "POINT(8 9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "List some numbers and geometry data, where each number corresponds to certain points or lines, like a few points (1 2 7), (3 4 7), (5 6 7), (8 9 10), and a curved line (points are 2.5 2.5, 4.5 2.5, 3.5 3.5) and a straight line (points are 10 11, 12 11). Make sure the numbers don't exceed the total count of these points and lines.", "source": "original", "new_id": 466}
{"id": 82, "function": "ST_GeometryN", "question": "有两个包含多个小部分的几何对象，一个是由四个三维点组成的集合，点分别是(1 2 7)、(3 4 7)、(5 6 7)、(8 9 10)，另一个是由两种线组成的集合，一种是经过点(2.5 2.5)、(4.5 2.5)、(3.5 3.5)的弧线，另一种是从(10 11)到(12 11)的直线。试着逐个拿出这些小部分，并输出它们的详细表示，最多尝试100次，直到全部拿完为止。", "sql": "SELECT n, ST_AsEWKT(ST_GeometryN(geom, n)) AS geomewkt \nFROM ( VALUES (ST_GeomFromEWKT('MULTIPOINT((1 2 7), (3 4 7), (5 6 7), (8 9 10))') ), \n       ( ST_GeomFromEWKT('MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5, 3.5 3.5), (10 11, 12 11))') ) )AS foo(geom)  \nCROSS JOIN generate_series(1,100) n\nWHERE n <= ST_NumGeometries(geom);", "execution_result": [[1, "POINT(1 2 7)"], [1, "CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5)"], [2, "POINT(3 4 7)"], [2, "LINESTRING(10 11,12 11)"], [3, "POINT(5 6 7)"], [4, "POINT(8 9 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are two geometry objects made up of multiple parts: one is a collection of four 3D points, located at (1 2 7), (3 4 7), (5 6 7), (8 9 10), and the other is a collection of two types of lines—one is an arc passing through points (2.5 2.5), (4.5 2.5), (3.5 3.5), and the other is a straight line from (10 11) to (12 11). Try to extract these parts one by one and output their detailed representations, attempting up to 100 times until all are extracted.", "source": "original", "new_id": 463}
{"id": 70, "function": "ST_DumpRings", "question": "有一个三维的图形，它有一个外边和一个内边，包含像(-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1)这样的点，还有内边上的(-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1)。能不能拆分开这些边，给出它们的编号和具体的点描述？", "sql": "SELECT path, ST_AsEWKT(geom) AS geom \nFROM ST_DumpRings( ST_GeomFromEWKT('POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1), (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))') ) AS foo;", "execution_result": [[[0], "POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1,-8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1,-8150305 5132788 1,-8149064 5133092 1))"], [[1], "POLYGON((-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There’s a 3D shape with an outer edge and an inner edge, including points like (-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1, -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1, -8150305 5132788 1,-8149064 5133092 1) and inner edge points like (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1). Can you split these edges and give their indices and detailed point descriptions?", "source": "original", "new_id": 390}
{"id": 84, "function": "ST_GeometryType", "question": "看看那些坐标点组成的形状是什么类型，坐标是((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )'));", "execution_result": [["ST_Tin"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check what type of shape is made by those coordinates, which are ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) ).", "source": "original", "new_id": 475}
{"id": 84, "function": "ST_GeometryType", "question": "如果你有几个小三角形组成的立体，像是 0 0 0, 0 0 1, 0 1 0 这样的点，你会怎么称呼这个形状？", "sql": "SELECT ST_GeometryType(geom) AS result \nFROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["ST_Tin"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you have a solid made up of several little triangles, with points like 0 0 0, 0 0 1, 0 1 0, what would you call this shape?", "source": "original", "new_id": 477}
{"id": 81, "function": "ST_GeometryN", "question": "想象一个由六个小面拼成的立体形状，坐标分别是：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0))、((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))、((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0))、((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0))、((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0))、((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。你能找出第三个小面，并把它变成一种特别的坐标格式吗？", "sql": "SELECT ST_AsEWKT(ST_GeometryN(p_geom,3)) AS geom_ewkt \n    FROM (SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )') AS p_geom ) AS a;", "execution_result": [["POLYGON((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a 3D shape made of six little surfaces with these coordinates: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)). Can you find the third little surface and change it to a special coordinate format?", "source": "original", "new_id": 457}
{"id": 84, "function": "ST_GeometryType", "question": "找出一种包含两个小三角形的几何图形的名字吧，一个三角形的点在 0 0 0, 0 0 1, 0 1 0，另一个在 0 0 0, 0 1 0, 1 1 0。", "sql": "SELECT ST_GeometryType(geom) AS result \nFROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["ST_Tin"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Figure out the name of a shape that includes two little triangles, with one having points at 0 0 0, 0 0 1, 0 1 0, and the other at 0 0 0, 0 1 0, 1 1 0.", "source": "original", "new_id": 476}
{"id": 85, "function": "ST_GeometryType", "question": "有一个由六个小面组成的立体结构，它的顶点坐标是那些(比如0 0 0到0 1 1等等)，你能告诉我它叫什么吗？", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a 3D shape made of six little surfaces, with vertex coordinates like those from 0 0 0 to 0 1 1 and others. Can you tell me what it's called?", "source": "original", "new_id": 484}
{"id": 86, "function": "ST_HasArc", "question": "看看那些连起来的线条和圆形曲线组合在一起，里面有没有圆弧的成分呢？", "sql": "SELECT ST_HasArc(ST_Collect('LINESTRING(1 2, 3 4, 5 6)', 'CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if those connected lines and circular curves together have any circular arc elements?", "source": "original", "new_id": 489}
{"id": 84, "function": "ST_GeometryType", "question": "你能告诉我那个由两块小三角拼成的立体形状的类型吗？第一个小三角的点是0 0 0、0 0 1、0 1 0，第二个小三角的点是0 0 0、0 1 0、1 1 0，结果叫做result。", "sql": "SELECT ST_GeometryType(geom) AS result \nFROM (SELECT ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )') AS geom ) AS g;", "execution_result": [["ST_Tin"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me the type of that 3D shape made from two little triangles? The first little triangle has points at 0 0 0, 0 0 1, 0 1 0, and the second little triangle has points at 0 0 0, 0 1 0, 1 1 0, with the result called 'result'.", "source": "original", "new_id": 478}
{"id": 86, "function": "ST_HasArc", "question": "看看那条由点(1 2, 3 4, 5 6)连成的线和通过点(1 1, 2 3, 4 5, 6 7, 5 6)形成的弯弯的路径一起组成的形状里有没有弧线。", "sql": "SELECT ST_HasArc(ST_Collect('LINESTRING(1 2, 3 4, 5 6)', 'CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made by combining a line through points (1 2, 3 4, 5 6) and a curvy path passing through (1 1, 2 3, 4 5, 6 7, 5 6) has any arcs.", "source": "original", "new_id": 486}
{"id": 86, "function": "ST_HasArc", "question": "看看把那些连接的点和圆形的点组合在一起后，是不是有圆圆的弧线段在里面。", "sql": "SELECT ST_HasArc(ST_Collect('LINESTRING(1 2, 3 4, 5 6)', 'CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if combining those connected dots with circular ones results in any round arc segments inside.", "source": "original", "new_id": 485}
{"id": 87, "function": "ST_InteriorRingN", "question": "从那些围绕着点(1,2)的两个形状中，找到第一个内部小圈圈，然后把它变成一个文本格式。记得那些形状是用20和10单位大小画出来的，像是画圆时分成3段一样。", "sql": "SELECT ST_AsText(ST_InteriorRingN(geom, 1)) AS geom \nFROM (SELECT ST_BuildArea( ST_Collect(ST_Buffer(ST_Point(1,2), 20,3), ST_Buffer(ST_Point(1, 2), 10,3))) AS geom ) AS foo;", "execution_result": [["LINESTRING(11 2,9.660254037844384 7.000000000000004,5.999999999999993 10.66025403784439,1 12,-4.000000000000004 10.660254037844384,-7.660254037844389 6.999999999999997,-9 2,-7.660254037844386 -3.000000000000004,-3.999999999999998 -6.660254037844387,1 -8,6.000000000000001 -6.660254037844386,9.660254037844387 -2.999999999999999,11 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From those shapes around the point (1,2), find the first inner loop and convert it into a text format. Remember, those shapes are drawn with sizes of 20 and 10 units, like dividing a circle into 3 segments.", "source": "original", "new_id": 492}
{"id": 86, "function": "ST_HasArc", "question": "看看由LINESTRING(1 2,3 4,5 6)和CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)拼在一起的形状里有没有弯曲的部分。", "sql": "SELECT ST_HasArc(ST_Collect('LINESTRING(1 2, 3 4, 5 6)', 'CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape formed by combining LINESTRING(1 2, 3 4, 5 6) and CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6) has curved parts.", "source": "original", "new_id": 488}
{"id": 86, "function": "ST_HasArc", "question": "看看把一串小点(1 2, 3 4, 5 6)和另一串绕着转的点(1 1, 2 3, 4 5, 6 7, 5 6)合在一起后，会不会有弯曲的地方。", "sql": "SELECT ST_HasArc(ST_Collect('LINESTRING(1 2, 3 4, 5 6)', 'CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if combining a set of little points (1 2, 3 4, 5 6) with another set of looping points (1 1, 2 3, 4 5, 6 7, 5 6) ends up with any curvy parts.", "source": "original", "new_id": 490}
{"id": 87, "function": "ST_InteriorRingN", "question": "用坐标(1,2)做中心，想象两个圆形区域，一个半径是20单位，另一个是10单位，都是有些弯曲的。合并这些区域，找出里面第一个环，用某种格式输出。", "sql": "SELECT ST_AsText(ST_InteriorRingN(geom, 1)) AS geom \nFROM (SELECT ST_BuildArea( ST_Collect(ST_Buffer(ST_Point(1,2), 20,3), ST_Buffer(ST_Point(1, 2), 10,3))) AS geom ) AS foo;", "execution_result": [["LINESTRING(11 2,9.660254037844384 7.000000000000004,5.999999999999993 10.66025403784439,1 12,-4.000000000000004 10.660254037844384,-7.660254037844389 6.999999999999997,-9 2,-7.660254037844386 -3.000000000000004,-3.999999999999998 -6.660254037844387,1 -8,6.000000000000001 -6.660254037844386,9.660254037844387 -2.999999999999999,11 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine using coordinates (1,2) as the center to create two circular areas, one with a radius of 20 units and the other 10 units, both a bit curved. Merge these areas, find the first ring inside, and output it in some format.", "source": "original", "new_id": 491}
{"id": 85, "function": "ST_GeometryType", "question": "给我看看由六个面和这些小点组成的立体形状的名字是什么？比如说这些点是：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me the name of the shape made of six faces and those little dots? For example, the dots are: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 482}
{"id": 86, "function": "ST_HasArc", "question": "查看两个串在一起的形状，看看有没有圆弧，像是从(1 2)跑到(3 4)再到(5 6)，还有从(1 1)到(2 3)到(4 5)到(6 7)到(5 6)的那些点连起来的样子。", "sql": "SELECT ST_HasArc(ST_Collect('LINESTRING(1 2, 3 4, 5 6)', 'CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Look at the shape formed by stringing together two sets of points, to see if there are circular arcs, like going from (1 2) to (3 4) then to (5 6), and also from (1 1) to (2 3) to (4 5) to (6 7) to (5 6).", "source": "original", "new_id": 487}
{"id": 87, "function": "ST_InteriorRingN", "question": "给我看看用点(1, 2)做中心，半径是10和20，画出来的那种圆形区域里，最里面一圈的那些小点的文字形式是什么？", "sql": "SELECT ST_AsText(ST_InteriorRingN(geom, 1)) AS geom \nFROM (SELECT ST_BuildArea( ST_Collect(ST_Buffer(ST_Point(1,2), 20,3), ST_Buffer(ST_Point(1, 2), 10,3))) AS geom ) AS foo;", "execution_result": [["LINESTRING(11 2,9.660254037844384 7.000000000000004,5.999999999999993 10.66025403784439,1 12,-4.000000000000004 10.660254037844384,-7.660254037844389 6.999999999999997,-9 2,-7.660254037844386 -3.000000000000004,-3.999999999999998 -6.660254037844387,1 -8,6.000000000000001 -6.660254037844386,9.660254037844387 -2.999999999999999,11 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you show me the text form of those little dots in the innermost circle of the round area drawn with point (1, 2) as the center, with radii of 10 and 20?", "source": "original", "new_id": 494}
{"id": 88, "function": "ST_NumCurves", "question": "查看那个空的复合曲线里有没有曲线，看看有多少段。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE EMPTY');", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there are any curves in that empty compound curve and see how many segments there are.", "source": "original", "new_id": 498}
{"id": 88, "function": "ST_NumCurves", "question": "对于那个没有内容的复合形状，看看里面有多少段小弯弯。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE EMPTY');", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that empty composite shape, see how many little curves are inside.", "source": "original", "new_id": 497}
{"id": 88, "function": "ST_NumCurves", "question": "看看那个空的曲线组合里，有多少小段曲线藏在里面？", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE EMPTY');", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check how many little curve segments are hidden in that empty combination of curves?", "source": "original", "new_id": 499}
{"id": 85, "function": "ST_GeometryType", "question": "看看由6个小面组成的立体形状，它的类型是什么？这些面的坐标是这样的：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What kind of shape is this solid made of 6 little faces? The coordinates of these faces are like this: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 479}
{"id": 87, "function": "ST_InteriorRingN", "question": "想象一个中心在(1, 2)的小点，画两个圆形区域，一个大一点，半径20，另一个小一点，半径10，每个圆都像用3条线段画出来的。把这两个圆合在一起形成一个大区域。然后，找出这个区域里的第一个小洞，看看它长什么样子。", "sql": "SELECT ST_AsText(ST_InteriorRingN(geom, 1)) AS geom \nFROM (SELECT ST_BuildArea( ST_Collect(ST_Buffer(ST_Point(1,2), 20,3), ST_Buffer(ST_Point(1, 2), 10,3))) AS geom ) AS foo;", "execution_result": [["LINESTRING(11 2,9.660254037844384 7.000000000000004,5.999999999999993 10.66025403784439,1 12,-4.000000000000004 10.660254037844384,-7.660254037844389 6.999999999999997,-9 2,-7.660254037844386 -3.000000000000004,-3.999999999999998 -6.660254037844387,1 -8,6.000000000000001 -6.660254037844386,9.660254037844387 -2.999999999999999,11 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a small dot at the center (1, 2), draw two round areas, one larger with a radius of 20, and the other smaller with a radius of 10, each drawn as if using 3 segments. Combine these two circles into one big area. Then, find the first little hole in this area and see what it looks like.", "source": "original", "new_id": 493}
{"id": 88, "function": "ST_NumCurves", "question": "对于那个没有任何弯弯曲曲的空形状，你觉得里面有多少段小线条？", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE EMPTY');", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that empty shape with no twists and turns, how many little line segments do you think it contains?", "source": "original", "new_id": 500}
{"id": 87, "function": "ST_InteriorRingN", "question": "在一个由两个圆圈构成的区域中，找出第一个小环的形状描述，它们的中心都是在(1, 2)这个点，一个圆的大小是20，另一个是10，都是用3段线条来画的。", "sql": "SELECT ST_AsText(ST_InteriorRingN(geom, 1)) AS geom \nFROM (SELECT ST_BuildArea( ST_Collect(ST_Buffer(ST_Point(1,2), 20,3), ST_Buffer(ST_Point(1, 2), 10,3))) AS geom ) AS foo;", "execution_result": [["LINESTRING(11 2,9.660254037844384 7.000000000000004,5.999999999999993 10.66025403784439,1 12,-4.000000000000004 10.660254037844384,-7.660254037844389 6.999999999999997,-9 2,-7.660254037844386 -3.000000000000004,-3.999999999999998 -6.660254037844387,1 -8,6.000000000000001 -6.660254037844386,9.660254037844387 -2.999999999999999,11 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In an area made by two circles, find the shape description of the first small loop. Both circles are centered at the point (1, 2), with one having a size of 20 and the other 10, both drawn using 3 segments.", "source": "original", "new_id": 495}
{"id": 88, "function": "ST_NumCurves", "question": "对于那个没有任何线段的组合曲线，你能告诉我它里面有多少个小曲线吗？", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE EMPTY');", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that compound curve with no segments, can you tell me how many little curves are inside it?", "source": "original", "new_id": 502}
{"id": 85, "function": "ST_GeometryType", "question": "想象一个复杂的形状，它有六个面，像拼图一样连接在一起。第一个面的点是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个面的点是(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个面的点是(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个面的点是(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个面的点是(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个面的点是(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。然后找出它的类型是什么。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a complex shape with six faces, connected like a puzzle. The points of the first face are (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second face's points are (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third face's points are (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth face's points are (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth face's points are (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth face's points are (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1). Then find out what type it is.", "source": "original", "new_id": 481}
{"id": 87, "function": "ST_InteriorRingN", "question": "想象一下，从坐标点(1 2)出发，画两个圆圈，一个半径是20米，另一个是10米，圈的边缘有点粗糙像拼图。然后找到这两个圈组合后区域里的第一个内圈，并把它的形状描述出来。", "sql": "SELECT ST_AsText(ST_InteriorRingN(geom, 1)) AS geom \nFROM (SELECT ST_BuildArea( ST_Collect(ST_Buffer(ST_Point(1,2), 20,3), ST_Buffer(ST_Point(1, 2), 10,3))) AS geom ) AS foo;", "execution_result": [["LINESTRING(11 2,9.660254037844384 7.000000000000004,5.999999999999993 10.66025403784439,1 12,-4.000000000000004 10.660254037844384,-7.660254037844389 6.999999999999997,-9 2,-7.660254037844386 -3.000000000000004,-3.999999999999998 -6.660254037844387,1 -8,6.000000000000001 -6.660254037844386,9.660254037844387 -2.999999999999999,11 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine starting from the coordinates (1 2) to draw two circles, one with a radius of 20 meters, the other 10 meters, with edges that are a bit like a puzzle. Then, find the first inner loop within the region formed by these circles and describe its shape.", "source": "original", "new_id": 496}
{"id": 88, "function": "ST_NumCurves", "question": "对于那个没有任何内容的复合曲线，你能告诉我它里面有多少段吗？结果用整数表示就行。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE EMPTY');", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that empty compound curve, can you tell me how many segments it has inside? Just give the result as an integer.", "source": "original", "new_id": 501}
{"id": 85, "function": "ST_GeometryType", "question": "帮我看看这个由六个面组成的复杂形状，它有这些坐标：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))，是什么类型的？", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me what type this complex shape is, made up of six faces, with these coordinates: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))?", "source": "original", "new_id": 483}
{"id": 85, "function": "ST_GeometryType", "question": "找找由几个面拼起来的物体类型，面上的点从(0 0 0)到(1 1 1)之间的这些：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_GeometryType(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["ST_PolyhedralSurface"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Figure out what kind of shape you get when you put together a bunch of faces, with dots ranging from (0 0 0) to (1 1 1) like these: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 480}
{"id": 89, "function": "ST_NumCurves", "question": "看看由这些点和弯弯曲曲的线组成的复杂形状有多少个小段？点有(2 2, 2.5 2.5)，然后是个圆弧从(2.5 2.5, 4.5 2.5, 3.5 3.5)，还有(3.5 3.5, 2.5 4.5, 3 5, 2 2)。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you figure out how many little segments are in this complex shape made of points and wavy lines? The points are (2 2, 2.5 2.5), then there's a curved arc from (2.5 2.5, 4.5 2.5, 3.5 3.5), and also (3.5 3.5, 2.5 4.5, 3 5, 2 2).", "source": "original", "new_id": 503}
{"id": 89, "function": "ST_NumCurves", "question": "看看那个由2 2到2.5 2.5的小线段、从2.5 2.5绕到3.5 3.5的圆弧，还有从3.5 3.5经过几处拐点返回2 2的线条组成的形状，数数里面的曲线段有多少。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at that shape made of a small line from 2 2 to 2.5 2.5, a curve from 2.5 2.5 looping to 3.5 3.5, and a line with a few bends returning from 3.5 3.5 to 2 2, and count how many curve segments are in there.", "source": "original", "new_id": 504}
{"id": 89, "function": "ST_NumCurves", "question": "告诉我那些坐标点和圆圈构成的弯曲路径中有多少个小段。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Let me know how many little segments are in the curvy path made by those coordinates and circular parts.", "source": "original", "new_id": 506}
{"id": 90, "function": "ST_CurveN", "question": "从那些弯弯的线条中，找出第二个部分，看看它的样子，用一种特别的格式展示出来。", "sql": "SELECT ST_AsText(ST_CurveN('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )', 1));", "execution_result": [["LINESTRING(2 2,2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From those curvy lines, find the second part and show what it looks like in a special format.", "source": "original", "new_id": 509}
{"id": 90, "function": "ST_CurveN", "question": "从那个混合线条里，找出第二条隐藏的小弧线，用常见的方式描述它。", "sql": "SELECT ST_AsText(ST_CurveN('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )', 1));", "execution_result": [["LINESTRING(2 2,2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From that mixed line collection, pick out the second hidden little arc and describe it in a common way.", "source": "original", "new_id": 510}
{"id": 90, "function": "ST_CurveN", "question": "在那个包含一些点和圆弧的复杂形状里，找出从头开始数第二段的曲线，用那种文字描述它。", "sql": "SELECT ST_AsText(ST_CurveN('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )', 1));", "execution_result": [["LINESTRING(2 2,2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In that complex shape containing some dots and arcs, find the second segment starting from the beginning, and describe it using that kind of text.", "source": "original", "new_id": 514}
{"id": 91, "function": "ST_IsClosed", "question": "看看用(0 0)到(1 1)画的那条线是不是一个圈。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line drawn from (0 0) to (1 1) forms a loop.", "source": "original", "new_id": 517}
{"id": 91, "function": "ST_IsClosed", "question": "看看由0 0到1 1这些点构成的线是不是一个合上的环，结果是对还是错呢？", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line made by points from 0 0 to 1 1 forms a closed loop, and find out if the answer is true or false.", "source": "original", "new_id": 518}
{"id": 91, "function": "ST_IsClosed", "question": "看看由(0 0到1 1)这些坐标形成的线段是不是一个封闭的环？", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line segment formed by these coordinates from (0 0 to 1 1) is a closed loop?", "source": "original", "new_id": 519}
{"id": 91, "function": "ST_IsClosed", "question": "看看连接点(0,0)和(1,1)的那条线是不是像一个圈一样闭合了。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line connecting the points (0,0) and (1,1) is closed like a loop.", "source": "original", "new_id": 515}
{"id": 91, "function": "ST_IsClosed", "question": "看看那条从(0 0)到(1 1)的线是不是自己回到起点的，给个对还是错的结果。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line going from (0 0) to (1 1) loops back to its start, and give a true or false answer.", "source": "original", "new_id": 520}
{"id": 89, "function": "ST_NumCurves", "question": "这个复合线段组合包含了哪些小段？它有一些直线段，比如(2 2到2.5 2.5)，还有像圆弧那样的部分，比如(2.5 2.5到4.5 2.5再到3.5 3.5)，最后还有一些折线段，比如(3.5 3.5到2.5 4.5再到3 5到2 2)。总共有多少小段呢？", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "This composite line grouping includes several smaller pieces. There are some straight sections like (2 2 to 2.5 2.5), parts that curve like an arc such as (2.5 2.5 to 4.5 2.5 to 3.5 3.5), and finally some zigzag sections like (3.5 3.5 to 2.5 4.5 to 3 5 to 2 2). How many smaller pieces are there in total?", "source": "original", "new_id": 505}
{"id": 90, "function": "ST_CurveN", "question": "从那个包含多个部分的曲线里，看看第二个部分长什么样，尤其是那些在2.5 2.5到4.5 2.5之间的弯曲路径。", "sql": "SELECT ST_AsText(ST_CurveN('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )', 1));", "execution_result": [["LINESTRING(2 2,2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From that curve with many parts, check how the second segment looks, especially the curvy path between 2.5 2.5 and 4.5 2.5.", "source": "original", "new_id": 513}
{"id": 89, "function": "ST_NumCurves", "question": "看看那个由一些线段和圆弧组成的复杂形状里，有多少个小弯曲的部分？坐标是(2 2, 2.5 2.5), (2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2)。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at that complex shape made of some line segments and arcs. How many little curved parts are there? The coordinates are (2 2, 2.5 2.5), (2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2).", "source": "original", "new_id": 507}
{"id": 90, "function": "ST_CurveN", "question": "从一个由多个小线组成的复合形状里，找出第二条形状，它是个圆弧，包含2.5 2.5到4.5 2.5再到3.5 3.5的点，然后把它变成一种特别的格式来看看。", "sql": "SELECT ST_AsText(ST_CurveN('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )', 1));", "execution_result": [["LINESTRING(2 2,2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In a compound shape made of several little lines, find the second shape, which is a curve going through 2.5 2.5 to 4.5 2.5 and then to 3.5 3.5, and change it into a special format to view it.", "source": "original", "new_id": 511}
{"id": 90, "function": "ST_CurveN", "question": "从一个包含许多小线段的复杂图形中，找出第二个小线段的文字描述，坐标是(2 2, 2.5 2.5)和圆形弯曲(2.5 2.5, 4.5 2.5, 3.5 3.5)，还有(3.5 3.5, 2.5 4.5, 3 5, 2 2)。", "sql": "SELECT ST_AsText(ST_CurveN('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )', 1));", "execution_result": [["LINESTRING(2 2,2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a complex shape with many small segments, find the text description of the second small segment, coordinates are (2 2, 2.5 2.5) and circular curve (2.5 2.5, 4.5 2.5, 3.5 3.5), and also (3.5 3.5, 2.5 4.5, 3 5, 2 2).", "source": "original", "new_id": 512}
{"id": 89, "function": "ST_NumCurves", "question": "找出由这些坐标构成的复合图形里有多少段弯曲的部分，比如像(2 2, 2.5 2.5)和那条圆形的线(2.5 2.5, 4.5 2.5, 3.5 3.5)，还有其他那些点(3.5 3.5, 2.5 4.5, 3 5, 2 2)。", "sql": "SELECT ST_NumCurves('COMPOUNDCURVE( (2 2, 2.5 2.5), CIRCULARSTRING(2.5 2.5, 4.5 2.5, 3.5 3.5), (3.5 3.5, 2.5 4.5, 3 5, 2 2) )');", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out how many curvy parts are in the composite shape made from these coordinates, like (2 2, 2.5 2.5) and that circular line (2.5 2.5, 4.5 2.5, 3.5 3.5), along with those other points (3.5 3.5, 2.5 4.5, 3 5, 2 2).", "source": "original", "new_id": 508}
{"id": 91, "function": "ST_IsClosed", "question": "看看那根从(0, 0)到(1, 1)的线有没有自己绕回起点。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that line from (0, 0) to (1, 1) loops back to its starting point.", "source": "original", "new_id": 516}
{"id": 92, "function": "ST_IsClosed", "question": "看看这些坐标组成的折线，0 0, 0 1, 1 1, 0 0，是不是一个圈呢？", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 0 1, 1 1, 0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line made by these coordinates, 0 0, 0 1, 1 1, 0 0, forms a loop?", "source": "original", "new_id": 524}
{"id": 92, "function": "ST_IsClosed", "question": "看看那些点(0 0)、(0 1)、(1 1)、(0 0)连起来的线是不是头尾相接。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 0 1, 1 1, 0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line made by connecting those points (0 0), (0 1), (1 1), (0 0) starts and ends at the same place.", "source": "original", "new_id": 521}
{"id": 92, "function": "ST_IsClosed", "question": "看看那条由(0 0)、(0 1)、(1 1)、(0 0)这些点连起来的线是不是首尾相连的。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 0 1, 1 1, 0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line connecting the dots (0 0), (0 1), (1 1), (0 0) loops back to where it started.", "source": "original", "new_id": 523}
{"id": 92, "function": "ST_IsClosed", "question": "看看那些点(0 0, 0 1, 1 1, 0 0)是不是连成一个封闭的形状，给个对错的答案吧。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 0 1, 1 1, 0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if those points (0 0, 0 1, 1 1, 0 0) form a closed shape, and provide a true or false answer.", "source": "original", "new_id": 525}
{"id": 92, "function": "ST_IsClosed", "question": "看看这些点(0 0, 0 1, 1 1, 0 0)连成的线，最后能不能回到起点。", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 0 1, 1 1, 0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line formed by these points (0 0, 0 1, 1 1, 0 0) ends up back at the start.", "source": "original", "new_id": 526}
{"id": 92, "function": "ST_IsClosed", "question": "看看这些点形成的路径，从(0 0)到(0 1)再到(1 1)然后回到(0 0)，是不是能围成一个完整的圈？", "sql": "SELECT ST_IsClosed('LINESTRING(0 0, 0 1, 1 1, 0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the path formed by these points, starting at (0 0), going to (0 1), then (1 1), and back to (0 0), can make a complete loop.", "source": "original", "new_id": 522}
{"id": 93, "function": "ST_IsClosed", "question": "看看这两条小线段组成的图形，((0 0, 0 1, 1 1, 0 0)和(0 0, 1 1))，是不是围成一个圈。", "sql": "SELECT ST_IsClosed('MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made by these two little lines, ((0 0, 0 1, 1 1, 0 0) and (0 0, 1 1)), forms a loop.", "source": "original", "new_id": 527}
{"id": 93, "function": "ST_IsClosed", "question": "看看这些由(0 0), (0 1), (1 1), (0 0)和(0 0), (1 1)这些点组成的线段是不是能围成一个圈。", "sql": "SELECT ST_IsClosed('MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if these segments formed by the points (0 0), (0 1), (1 1), (0 0) and (0 0), (1 1) can make a loop.", "source": "original", "new_id": 529}
{"id": 94, "function": "ST_IsClosed", "question": "看看那个坐标点(0, 0)是不是一个闭合的形状。", "sql": "SELECT ST_IsClosed('POINT(0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that coordinate point (0, 0) is a closed shape.", "source": "original", "new_id": 534}
{"id": 93, "function": "ST_IsClosed", "question": "看看包含(0 0, 0 1, 1 1, 0 0)和(0 0, 1 1)这些线段的图形是不是连起来封住了。", "sql": "SELECT ST_IsClosed('MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made up of the segments (0 0, 0 1, 1 1, 0 0) and (0 0, 1 1) is all connected and closed.", "source": "original", "new_id": 528}
{"id": 94, "function": "ST_IsClosed", "question": "看看坐标是(0,0)的小点是不是一个完整的形状。", "sql": "SELECT ST_IsClosed('POINT(0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little dot at location (0,0) is a complete shape.", "source": "original", "new_id": 533}
{"id": 94, "function": "ST_IsClosed", "question": "看看坐标是(0, 0)的小点是否能围成一个封闭的形状。", "sql": "SELECT ST_IsClosed('POINT(0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little dot at coordinates (0, 0) can form a closed shape.", "source": "original", "new_id": 535}
{"id": 93, "function": "ST_IsClosed", "question": "看看那些连起来的小线段，像是从(0 0)到(0 1)再到(1 1)然后回到(0 0)，还有从(0 0)到(1 1)的，能围成一个圈吗？", "sql": "SELECT ST_IsClosed('MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if those connected little lines, like from (0 0) to (0 1) to (1 1) and back to (0 0), and from (0 0) to (1 1), can form a loop?", "source": "original", "new_id": 530}
{"id": 93, "function": "ST_IsClosed", "question": "看看那些连起来的点，像是(0 0, 0 1, 1 1, 0 0)和(0 0, 1 1)，能不能围成一个完整的圈，然后告诉我对不对。", "sql": "SELECT ST_IsClosed('MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if those connected points, like (0 0, 0 1, 1 1, 0 0) and (0 0, 1 1), can form a complete loop, and let me know if it does.", "source": "original", "new_id": 532}
{"id": 94, "function": "ST_IsClosed", "question": "看看那个点在坐标0 0的位置是不是一个闭合的形状。", "sql": "SELECT ST_IsClosed('POINT(0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that dot at coordinates 0 0 is a closed shape.", "source": "original", "new_id": 537}
{"id": 94, "function": "ST_IsClosed", "question": "看看这些坐标(0, 0)是否能形成一个完整的形状，结果是个简单的对或错。", "sql": "SELECT ST_IsClosed('POINT(0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if these coordinates (0, 0) can form a complete shape, the result is a simple yes or no.", "source": "original", "new_id": 536}
{"id": 95, "function": "ST_IsClosed", "question": "看一下由(0 0)和(1 1)这两个小点点组成的形状是不是封住的？", "sql": "SELECT ST_IsClosed('MULTIPOINT((0 0), (1 1))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made by these little dots at (0 0) and (1 1) is closed up?", "source": "original", "new_id": 539}
{"id": 94, "function": "ST_IsClosed", "question": "看看那个在(0, 0)的小点是不是能围成一个圈，给个是或不是的答案。", "sql": "SELECT ST_IsClosed('POINT(0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that little dot at (0, 0) can form a circle, and give a yes or no answer.", "source": "original", "new_id": 538}
{"id": 95, "function": "ST_IsClosed", "question": "看看那个由点(0 0)和点(1 1)组成的小点集合，是不是一个闭合的形状呢？", "sql": "SELECT ST_IsClosed('MULTIPOINT((0 0), (1 1))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little collection of dots at (0 0) and (1 1) forms a closed shape?", "source": "original", "new_id": 540}
{"id": 95, "function": "ST_IsClosed", "question": "看看由这两个小点(0 0)和(1 1)构成的图形是不是一个合拢的形状？", "sql": "SELECT ST_IsClosed('MULTIPOINT((0 0), (1 1))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made by these two little dots (0 0) and (1 1) is a closed figure?", "source": "original", "new_id": 541}
{"id": 93, "function": "ST_IsClosed", "question": "看看由这些点(0 0, 0 1, 1 1, 0 0)和(0 0, 1 1)组成的线是不是一个完整的圈圈，给个对或者错的答案。", "sql": "SELECT ST_IsClosed('MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made by these points (0 0, 0 1, 1 1, 0 0) and (0 0, 1 1) forms a complete loop, and give a yes or no answer.", "source": "original", "new_id": 531}
{"id": 95, "function": "ST_IsClosed", "question": "看看由这些点组成的东西，像(0 0)和(1 1)，是不是一个封闭的小形状，结果是对还是错？", "sql": "SELECT ST_IsClosed('MULTIPOINT((0 0), (1 1))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the thing made by these points, like (0 0) and (1 1), is a closed little shape, is the result true or false?", "source": "original", "new_id": 542}
{"id": 95, "function": "ST_IsClosed", "question": "看看这些坐标(0 0)和(1 1)是不是形成了一个闭合的形状？给我一个是或不是的答案。", "sql": "SELECT ST_IsClosed('MULTIPOINT((0 0), (1 1))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if these coordinates (0 0) and (1 1) make a closed shape? Give me a yes or no answer.", "source": "original", "new_id": 543}
{"id": 95, "function": "ST_IsClosed", "question": "看看这些点(0 0)和(1 1)，它们组成的那个玩意儿是不是封闭的，能给出对或错吗？", "sql": "SELECT ST_IsClosed('MULTIPOINT((0 0), (1 1))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if those spots at (0 0) and (1 1) make a closed thing, can you tell true or false?", "source": "original", "new_id": 544}
{"id": 96, "function": "ST_IsClosed", "question": "想知道一个由5个小面片拼起来的立体形状是不是封闭的？每个面都有一串数字，比如第一个面是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，你能看出这个形状是不是完全封住的吗？", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Curious if a 3D shape made of 5 little patches is all closed up? Each patch has a series of numbers, like the first one being (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0). Can you tell if this shape is fully sealed?", "source": "original", "new_id": 550}
{"id": 96, "function": "ST_IsClosed", "question": "看看由这些坐标组成的多面形状是不是封闭的：有几个面，其中一个面有点在(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，另一个面有点在(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，还有其他面也有类似的点。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the multi-faced shape with these coordinates is closed: there are several faces, one face has points at (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), another face has points at (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), and other faces have similar points.", "source": "original", "new_id": 545}
{"id": 98, "function": "ST_IsCollection", "question": "看看由这些点(0,0)和(1,1)连起来的线，是不是属于那些复杂的几何组合？", "sql": "SELECT ST_IsCollection('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line made from these points (0,0) and (1,1) fits into those complex geometry combinations?", "source": "original", "new_id": 558}
{"id": 98, "function": "ST_IsCollection", "question": "看看从(0, 0)到(1, 1)这条线是不是属于那些多个小点的集合类型。", "sql": "SELECT ST_IsCollection('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line from (0, 0) to (1, 1) is one of those types that include multiple little dots.", "source": "original", "new_id": 559}
{"id": 97, "function": "ST_IsClosed", "question": "想知道由六张面组成的那个立体表面是不是完全闭合的，面上有些点像是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)这样排列的。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Trying to find out if that 3D surface made up of six faces is completely closed, with some points arranged like (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0).", "source": "original", "new_id": 555}
{"id": 98, "function": "ST_IsCollection", "question": "看看那条从(0 0)到(1 1)的小线是不是一堆东西的那种。", "sql": "SELECT ST_IsCollection('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little line from (0 0) to (1 1) is like a bunch of things.", "source": "original", "new_id": 557}
{"id": 98, "function": "ST_IsCollection", "question": "看看由(0 0)到(1 1)的这条线是不是那种集合的东西，会是对还是错呢？", "sql": "SELECT ST_IsCollection('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if this line from (0 0) to (1 1) is one of those collection things, would it be true or false?", "source": "original", "new_id": 560}
{"id": 96, "function": "ST_IsClosed", "question": "看看由这些小平面组成的几何形状：第一面是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二面是(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三面是(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四面是(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五面是(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，看看它们能不能围成一个完整的东西。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if these little surfaces create a complete shape: the first side is (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second side is (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third side is (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth side is (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth side is (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0).", "source": "original", "new_id": 546}
{"id": 97, "function": "ST_IsClosed", "question": "看看那些由这六个面构成的三维形状是不是完全合上了，第一个面和第二个面分别有(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)和(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)这些点，其他面也有它们自己的点。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the 3D shape made of these six faces is completely closed. The first and second faces have points like (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0) and (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), and the other faces have their own points too.", "source": "original", "new_id": 552}
{"id": 96, "function": "ST_IsClosed", "question": "看看由这些点组成的多面形状是不是完全封闭的：第一组点是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二组是(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三组是(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四组是(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五组是(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made from these points is completely closed: first set of points is (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second set is (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third set is (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth set is (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth set is (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0).", "source": "original", "new_id": 548}
{"id": 96, "function": "ST_IsClosed", "question": "看看这五个由小点构成的面能不能围成一个完整的立体形状：第一个面是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个面是(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个面是(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个面是(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个面是(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if these five surfaces made of little points can form a complete 3D shape: first surface (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second surface (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third surface (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth surface (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth surface (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0).", "source": "original", "new_id": 547}
{"id": 98, "function": "ST_IsCollection", "question": "看看这条线LINESTRING(0 0, 1 1)是不是那些组合型的几何图形之一呢？给出是或不是的答案。", "sql": "SELECT ST_IsCollection('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if this line LINESTRING(0 0, 1 1) is one of those combined geometric shapes? Provide a yes or no answer.", "source": "original", "new_id": 561}
{"id": 96, "function": "ST_IsClosed", "question": "看看由这些小面构成的立体形状，面1是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，面2是(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，面3是(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，面4是(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，面5是(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，这个形状是不是完全合拢的？", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)) )'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Look at this solid shape made of these little faces: face 1 is (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), face 2 is (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), face 3 is (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), face 4 is (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), face 5 is (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0). Is this shape completely closed up?", "source": "original", "new_id": 549}
{"id": 97, "function": "ST_IsClosed", "question": "看看那些坐标点组成的六个面是不是能把一个空间围起来，点的位置是这样的：(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)、(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)、(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)、(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)、(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)、(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if those coordinate points forming six faces can enclose a space, with points positioned like this: (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 551}
{"id": 98, "function": "ST_IsCollection", "question": "看看那条线从(0, 0)到(1, 1)，是不是属于几何集合类型，会得到真或假的结果。", "sql": "SELECT ST_IsCollection('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line from (0, 0) to (1, 1) belongs to a geometry collection type, and you'll get a true or false result.", "source": "original", "new_id": 562}
{"id": 97, "function": "ST_IsClosed", "question": "看看这个由6个平面组成的立体形状是不是完全封闭的，像第一个平面有这些点(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个平面有(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个平面有(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个平面有(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个平面有(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个平面有(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if this 3D shape made of 6 flat sides is completely closed, like the first flat side with points (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second side has (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third side has (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth side has (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth side has (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth side has (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 556}
{"id": 99, "function": "ST_IsCollection", "question": "看看'MULTIPOINT EMPTY'这个东西是不是那种装了好几个小点的集合。", "sql": "SELECT ST_IsCollection('MULTIPOINT EMPTY'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if 'MULTIPOINT EMPTY' is one of those things that holds multiple little dots as a collection.", "source": "original", "new_id": 565}
{"id": 100, "function": "ST_IsCollection", "question": "看看'MULTIPOINT((0 0))'这些小点是不是属于那种多样的几何集合。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if 'MULTIPOINT((0 0))' with those little points belongs to a kind of diverse geometry collection.", "source": "original", "new_id": 569}
{"id": 100, "function": "ST_IsCollection", "question": "看看那些坐标(0 0)组成的小点是不是一种集合类型呢？", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if those coordinates (0 0) forming little dots are some kind of collection type?", "source": "original", "new_id": 570}
{"id": 100, "function": "ST_IsCollection", "question": "看看'MULTIPOINT((0 0))'这个有一个点(0 0)的小东西，是不是属于那种里面有多个形状的类别？", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if this 'MULTIPOINT((0 0))' little thing with one point (0 0) belongs to the kind that has multiple shapes inside?", "source": "original", "new_id": 571}
{"id": 99, "function": "ST_IsCollection", "question": "看看'MULTIPOINT EMPTY'这个空的点群是不是属于那种能装多个东西的类型。", "sql": "SELECT ST_IsCollection('MULTIPOINT EMPTY'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if 'MULTIPOINT EMPTY', this empty group of points, is the kind that can hold multiple things.", "source": "original", "new_id": 563}
{"id": 99, "function": "ST_IsCollection", "question": "看看'MULTIPOINT EMPTY'这种几何玩意儿是不是属于那些集合类型的东西。", "sql": "SELECT ST_IsCollection('MULTIPOINT EMPTY'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the 'MULTIPOINT EMPTY' kind of geometry thing is one of those collection types.", "source": "original", "new_id": 564}
{"id": 99, "function": "ST_IsCollection", "question": "你能告诉我'MULTIPOINT EMPTY'这种空空的多点东西算不算一组几何图形吗？", "sql": "SELECT ST_IsCollection('MULTIPOINT EMPTY'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me if this empty 'MULTIPOINT EMPTY' thing counts as a group of geometric shapes?", "source": "original", "new_id": 567}
{"id": 99, "function": "ST_IsCollection", "question": "告诉我'MULTIPOINT EMPTY'这种几何形状是不是那种可以装很多小点或者线条的集合类型，是的话就说是。", "sql": "SELECT ST_IsCollection('MULTIPOINT EMPTY'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Tell me if 'MULTIPOINT EMPTY' is the kind of shape that can hold many little dots or lines, say yes if it is.", "source": "original", "new_id": 568}
{"id": 101, "function": "ST_IsCollection", "question": "看看由(0,0)和(42,42)这些小点构成的东西是不是一个集合呢？", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0), (42 42))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the thing made up of these little dots at (0,0) and (42,42) is a collection?", "source": "original", "new_id": 575}
{"id": 99, "function": "ST_IsCollection", "question": "想知道那些空空的点点是不是属于那种集合的类型，能给个对错的回答吗？", "sql": "SELECT ST_IsCollection('MULTIPOINT EMPTY'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you tell if those empty dots belong to a type that's like a collection, and give a true or false answer?", "source": "original", "new_id": 566}
{"id": 100, "function": "ST_IsCollection", "question": "看看那些坐标点组成的东西MULTIPOINT((0 0))是否像是一个集合，结果是对还是错呢？", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if those coordinate points forming MULTIPOINT((0 0)) seem like a collection, is the result true or false?", "source": "original", "new_id": 573}
{"id": 100, "function": "ST_IsCollection", "question": "看看那些坐标在某种集合类型，比如说有很多点那样，是否是真的或者假的。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if those coordinates are in some kind of collection type, like having many points, whether it's true or false.", "source": "original", "new_id": 574}
{"id": 97, "function": "ST_IsClosed", "question": "想知道那些由六个面组成的点点和线线是不是全封闭的，像是一个完整的盒子。第一组点是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二组是(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三组是(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四组是(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五组是(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六组是(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Wonder if those dots and lines forming six sides are completely closed, like a full box. The first set of points is (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second set is (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third set is (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth set is (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth set is (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), the sixth set is (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 554}
{"id": 100, "function": "ST_IsCollection", "question": "看看'MULTIPOINT((0 0))'这个由小点组成的东西是不是那种可以装很多东西的大集合，答案是对还是错呢？", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if 'MULTIPOINT((0 0))', made up of tiny dots, is one of those big collections that can hold many things, with the answer being true or false?", "source": "original", "new_id": 572}
{"id": 101, "function": "ST_IsCollection", "question": "看看那些点在一起的时候，是不是一种特别的组合，结果是对还是错？", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0), (42 42))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if those points together form a special kind of combination, is the result true or false?", "source": "original", "new_id": 580}
{"id": 101, "function": "ST_IsCollection", "question": "看看那个有两个小点坐标在(0 0)和(42 42)的形状，是不是一种包含多个元素的组合呢？", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0), (42 42))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape with two little dots at coordinates (0, 0) and (42, 42) is a kind of combination including multiple elements?", "source": "original", "new_id": 577}
{"id": 101, "function": "ST_IsCollection", "question": "看看那些点的位置是一起的吗？在(0 0)和(42 42)那里。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0), (42 42))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if those points at (0 0) and (42 42) are grouped together.", "source": "original", "new_id": 578}
{"id": 102, "function": "ST_IsCollection", "question": "看看这个包含点(0, 0)的小集合是不是属于那种可以装很多东西的类别，给个是或不是的答案。", "sql": "SELECT ST_IsCollection('GEOMETRYCOLLECTION(POINT(0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if this little group containing the point (0, 0) is one of those types that can hold many things, and give a yes or no answer.", "source": "original", "new_id": 581}
{"id": 102, "function": "ST_IsCollection", "question": "看看那个有点像集合的东西，里面有个特别的点在(0, 0)，然后告诉我是不是一个集合的结果。", "sql": "SELECT ST_IsCollection('GEOMETRYCOLLECTION(POINT(0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that thing resembling a collection, which has a special point at (0, 0), is actually a collection and tell me the result.", "source": "original", "new_id": 583}
{"id": 102, "function": "ST_IsCollection", "question": "看看那些包括在一起的小点里，是不是有个像(0 0)这样的组合，给我们一个对或者错的答案。", "sql": "SELECT ST_IsCollection('GEOMETRYCOLLECTION(POINT(0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there are little dots grouped together, like a (0 0) combination, and give us a true or false answer.", "source": "original", "new_id": 582}
{"id": 101, "function": "ST_IsCollection", "question": "检查包含坐标(0 0)和(42 42)的多个点组成的东西是不是一种类型。", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0), (42 42))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the thing made up of multiple points with coordinates (0 0) and (42 42) is a type.", "source": "original", "new_id": 576}
{"id": 102, "function": "ST_IsCollection", "question": "给你一个包含小点的几何图形，看看它是不是那种能装多个形状的类型，结果是对还是错？", "sql": "SELECT ST_IsCollection('GEOMETRYCOLLECTION(POINT(0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "You have a geometric shape with a little dot inside, check if it's the kind that can hold multiple shapes, is the result true or false?", "source": "original", "new_id": 584}
{"id": 97, "function": "ST_IsClosed", "question": "看看由这些小点组成的六个平面能不能围成一个完整的三维形状，点的位置分别是：第一个是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个是(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个是(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个是(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个是(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个是(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。", "sql": "SELECT ST_IsClosed(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if these little dots can form a complete 3D shape with six faces, where the dots are placed at: first one is (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), second one is (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), third one is (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), fourth one is (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), fifth one is (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), sixth one is (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 553}
{"id": 101, "function": "ST_IsCollection", "question": "看看那个包含小点(0 0)和(42 42)的形状是不是一个集合类型，结果是对还是错？", "sql": "SELECT ST_IsCollection('MULTIPOINT((0 0), (42 42))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made up of little dots at (0 0) and (42 42) is a collection type, and tell me if it's true or false?", "source": "original", "new_id": 579}
{"id": 103, "function": "ST_IsEmpty", "question": "看看用'CIRCULARSTRING EMPTY'写出来的那个圆形弧线是不是啥都没有。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('CIRCULARSTRING EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the thing written as 'CIRCULARSTRING EMPTY' is just nothing at all.", "source": "original", "new_id": 586}
{"id": 102, "function": "ST_IsCollection", "question": "看看那个包含小点的东西是不是一堆形状中的一种，结果会是对或错。", "sql": "SELECT ST_IsCollection('GEOMETRYCOLLECTION(POINT(0 0))'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that thing with a little dot is one of those grouped shapes, and the result will be true or false.", "source": "original", "new_id": 585}
{"id": 103, "function": "ST_IsEmpty", "question": "看看那个空空的圆弧线是不是啥也没有？", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('CIRCULARSTRING EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that empty circular arc has nothing at all?", "source": "original", "new_id": 589}
{"id": 103, "function": "ST_IsEmpty", "question": "看看那个叫CIRCULARSTRING EMPTY的东西是不是空的。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('CIRCULARSTRING EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that thing called CIRCULARSTRING EMPTY is empty.", "source": "original", "new_id": 587}
{"id": 103, "function": "ST_IsEmpty", "question": "检查一下那个空的圆弧线是不是啥都没有，然后告诉我是还是不是。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('CIRCULARSTRING EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that empty circular arc string really has nothing, and tell me yes or no.", "source": "original", "new_id": 590}
{"id": 103, "function": "ST_IsEmpty", "question": "看看那个没有内容的圆弧线是不是空的，结果是对还是错呢？", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('CIRCULARSTRING EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that circular arc line with nothing in it is empty, is the result true or false?", "source": "original", "new_id": 591}
{"id": 103, "function": "ST_IsEmpty", "question": "看看那个叫'CIRCULARSTRING EMPTY'的曲线是不是啥都没有。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('CIRCULARSTRING EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that thing called 'CIRCULARSTRING EMPTY' is just nothing at all.", "source": "original", "new_id": 588}
{"id": 105, "function": "ST_IsEmpty", "question": "看看那些点连起来形成的形状，像是(1 2)、(3 4)、(5 6)，然后又回到(1 2)，是不是啥都没有的样子？", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape formed by connecting those points, like (1 2), (3 4), (5 6), and back to (1 2), looks like nothing at all?", "source": "original", "new_id": 594}
{"id": 105, "function": "ST_IsEmpty", "question": "看看由这些点组成的闭合形状，比如(1 2)、(3 4)、(5 6)和回到(1 2)，是不是没有东西在里面。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the closed shape made by points like (1 2), (3 4), (5 6), and back to (1 2) has nothing inside.", "source": "original", "new_id": 592}
{"id": 105, "function": "ST_IsEmpty", "question": "看看这个包含点(1 2, 3 4, 5 6, 1 2)的形状是不是啥都没有。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if this shape with points (1 2, 3 4, 5 6, 1 2) has nothing in it.", "source": "original", "new_id": 593}
{"id": 105, "function": "ST_IsEmpty", "question": "看看这个多边形，里面有没有东西？坐标是(1 2, 3 4, 5 6, 1 2)。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at this shape, is there anything inside? The coordinates are (1 2, 3 4, 5 6, 1 2).", "source": "original", "new_id": 595}
{"id": 106, "function": "ST_IsEmpty", "question": "看看由这些点(1 2)、(3 4)、(5 6)围成的图形是不是有东西。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))')) = false;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape formed by these points (1 2), (3 4), (5 6) has something in it.", "source": "original", "new_id": 598}
{"id": 107, "function": "ST_IsEmpty", "question": "确认一下那个叫GEOMETRYCOLLECTION EMPTY的东西是不是啥都没有。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('GEOMETRYCOLLECTION EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that thing called GEOMETRYCOLLECTION EMPTY is completely empty.", "source": "original", "new_id": 604}
{"id": 105, "function": "ST_IsEmpty", "question": "看看那个由(1 2), (3 4), (5 6), (1 2)这些点围成的图形是不是啥都没有，给个是或不是的回答。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made by connecting the dots (1 2), (3 4), (5 6), and back to (1 2) has nothing inside, and say yes or no.", "source": "original", "new_id": 596}
{"id": 105, "function": "ST_IsEmpty", "question": "看看这些点组成的形状，像(1 2), (3 4), (5 6), 还有回到(1 2)，是不是没有东西在里面？", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made by these points, like (1 2), (3 4), (5 6), and back to (1 2), has nothing inside it?", "source": "original", "new_id": 597}
{"id": 107, "function": "ST_IsEmpty", "question": "看看那个由'GEOMETRYCOLLECTION EMPTY'描述出来的东西是不是啥都没有。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('GEOMETRYCOLLECTION EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the thing described by 'GEOMETRYCOLLECTION EMPTY' has absolutely nothing in it.", "source": "original", "new_id": 605}
{"id": 107, "function": "ST_IsEmpty", "question": "看看那个用文本创造的几何集合是不是啥都没有的空壳子呢？", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('GEOMETRYCOLLECTION EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that geometry collection created from text is just an empty shell?", "source": "original", "new_id": 606}
{"id": 106, "function": "ST_IsEmpty", "question": "看看由(1 2), (3 4), (5 6), (1 2)围成的那个形状是不是空的？给我一个对与错的答案吧。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))')) = false;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape formed by (1 2), (3 4), (5 6), (1 2) is empty or not? Give me a true or false answer.", "source": "original", "new_id": 602}
{"id": 106, "function": "ST_IsEmpty", "question": "看看由这些坐标(1 2)、(3 4)、(5 6)围成的图形是不是有东西，然后对比结果是假的情况。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))')) = false;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made by these points (1 2), (3 4), (5 6) has something in it, and compare the result with a false scenario.", "source": "original", "new_id": 600}
{"id": 106, "function": "ST_IsEmpty", "question": "看看那些点组成的形状，比如(1 2, 3 4, 5 6, 1 2)，是不是一个实心的东西。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))')) = false;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made from those points like (1 2, 3 4, 5 6, 1 2) is a solid thing.", "source": "original", "new_id": 599}
{"id": 106, "function": "ST_IsEmpty", "question": "看看那些点围成的形状，像(1 2), (3 4), (5 6), (1 2)这样，是否不空，然后和假作比较。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))')) = false;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made by those points, like (1 2), (3 4), (5 6), (1 2), is not empty, and compare it with false.", "source": "original", "new_id": 603}
{"id": 106, "function": "ST_IsEmpty", "question": "看看由这些点组成的形状(1 2, 3 4, 5 6, 1 2)是否是空的，结果会是对还是错？", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))')) = false;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made by these points (1 2, 3 4, 5 6, 1 2) is empty or not, will the result be true or false?", "source": "original", "new_id": 601}
{"id": 107, "function": "ST_IsEmpty", "question": "看看那些坐标集合是不是啥都没有，给个是或不是的答案。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('GEOMETRYCOLLECTION EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if those coordinate collections have nothing in them, and provide a yes or no answer.", "source": "original", "new_id": 607}
{"id": 108, "function": "ST_IsRing", "question": "看看那些连接的点(0 0, 0 1, 1 0, 1 1, 0 0)能不能形成一个完整的圈，是不是闭合，还有是不是一个简单的形状。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if those connected points (0 0, 0 1, 1 0, 1 1, 0 0) can form a complete circle, whether it's closed, and if it's a simple shape.", "source": "original", "new_id": 610}
{"id": 107, "function": "ST_IsEmpty", "question": "看看那个叫GEOMETRYCOLLECTION EMPTY的东西是不是没有任何内容？", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('GEOMETRYCOLLECTION EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that thing called GEOMETRYCOLLECTION EMPTY has nothing in it?", "source": "original", "new_id": 608}
{"id": 108, "function": "ST_IsRing", "question": "看看由这些点(0 0)、(0 1)、(1 0)、(1 1)、(0 0)连成的线，能不能像个圈，闭合，或者是不是简单的形状？", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line formed by these points (0 0), (0 1), (1 0), (1 1), (0 0) can be like a loop, closed, or if it's a simple shape?", "source": "original", "new_id": 611}
{"id": 108, "function": "ST_IsRing", "question": "看看这条连接着点(0 0, 0 1, 1 0, 1 1, 0 0)的线，想知道它是不是一个完整的圈，是不是合上了，还有是不是没有多余的交叉。结果要分成三个部分来看看。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at the line connecting points (0 0, 0 1, 1 0, 1 1, 0 0), and find out if it's a complete circle, if it's closed, and if it has no unnecessary crossings. The results should be in three separate parts.", "source": "original", "new_id": 612}
{"id": 108, "function": "ST_IsRing", "question": "给那些坐标点连起来的线弄三个结果，看看它是不是像个圈，能不能闭合，还有是不是简单，结果要分成三列哦。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those coordinates connected by lines, get three results: check if it’s like a loop, if it can close, and if it’s simple, with results split into three columns.", "source": "original", "new_id": 614}
{"id": 109, "function": "ST_IsRing", "question": "看看由这些点组成的线条，像是(0 0, 0 1, 1 1, 1 0, 0 0)，它是不是一个闭合的圈？", "sql": "SELECT ST_IsRing('LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line made from these points, like (0 0, 0 1, 1 1, 1 0, 0 0), is a closed loop?", "source": "original", "new_id": 618}
{"id": 109, "function": "ST_IsRing", "question": "看看这些点连成的线(0 0, 0 1, 1 1, 1 0, 0 0)是不是一个圈，是不是封闭的，还有是不是简单的，给出三个答案。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if this line made of dots (0 0, 0 1, 1 1, 1 0, 0 0) forms a loop, if it's closed, and if it's straightforward, providing three answers.", "source": "original", "new_id": 616}
{"id": 110, "function": "ST_IsSimple", "question": "看看那些点(1 1)、(2 2)、(2 3.5)、(1 3)、(1 2)、(2 1)连起来的线是不是一种不绕来绕去的形状。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if connecting those points (1 1), (2 2), (2 3.5), (1 3), (1 2), (2 1) makes a shape that doesn't loop around.", "source": "original", "new_id": 622}
{"id": 109, "function": "ST_IsRing", "question": "看看这个由点组成的图形：LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)，想知道它是不是像环一样闭合，线是不是封住的，还有它是不是简单的样子。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check out this shape made of points: LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0). I want to know if it's closed like a ring, if the line is sealed, and if it's a simple form.", "source": "original", "new_id": 619}
{"id": 109, "function": "ST_IsRing", "question": "看看那些点组成的形状：0 0, 0 1, 1 1, 1 0, 0 0，问它是不是一个闭合的圈，是不是闭合的线，还有是不是简单的形状，给出三个是非答案。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at the shape made by these points: 0 0, 0 1, 1 1, 1 0, 0 0, and tell if it's a closed loop, a closed line, and if it's a simple shape, providing three yes-or-no answers.", "source": "original", "new_id": 620}
{"id": 109, "function": "ST_IsRing", "question": "看看用这些小点画出的形状：LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)，它是不是一个封闭的圆圈，是不是合上了的线，还有它是不是一个简单的形状，结果要分成三列给我。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check the shape drawn with these little dots: LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0), whether it's a closed circle, whether it's a closed line, and whether it's a simple shape, and give me the results in three columns.", "source": "original", "new_id": 621}
{"id": 108, "function": "ST_IsRing", "question": "看看那条连接着0 0到0 1，再到1 0，再到1 1，然后回到0 0的小线，它是不是个环呢？它有没有首尾相连？还有，它是不是简单的，没有自相交呢？", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at that little line connecting 0 0 to 0 1, then to 1 0, then to 1 1, and back to 0 0. Is it a ring? Does it connect back to itself at the ends? Also, is it simple, without crossing itself?", "source": "original", "new_id": 613}
{"id": 109, "function": "ST_IsRing", "question": "看看由(0,0)到(0,1)再到(1,1)然后到(1,0)最后回到(0,0)的线条，想知道它是不是绕了一圈，是否合上了，还有它是不是不绕来绕去的。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check out the line going from (0,0) to (0,1), then to (1,1), onward to (1,0), and finally back to (0,0). I'm curious if it loops around, closes up, and if it's not all tangled.", "source": "original", "new_id": 617}
{"id": 107, "function": "ST_IsEmpty", "question": "看看这个集合是不是啥都没有，给个是或不是的答案。", "sql": "SELECT ST_IsEmpty(ST_GeomFromText('GEOMETRYCOLLECTION EMPTY'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if this collection has nothing in it and give a yes or no answer.", "source": "original", "new_id": 609}
{"id": 108, "function": "ST_IsRing", "question": "对于那些从(0 0)出发，经过(0 1)、(1 0)、(1 1)又回到(0 0)的小线条，想知道它是不是个圈圈，是不是封闭的，还有它是不是简单的，结果要有三列哦。", "sql": "SELECT ST_IsRing(geom), ST_IsClosed(geom), ST_IsSimple(geom) \nFROM (SELECT 'LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)'::geometry AS geom) AS foo;", "execution_result": [[false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those little lines starting at (0 0), passing through (0 1), (1 0), (1 1), and then returning to (0 0), want to know if it's a loop, if it's closed, and if it's simple, with the results in three columns.", "source": "original", "new_id": 615}
{"id": 110, "function": "ST_IsSimple", "question": "看看这个由点连成的线段集合，比如(1 1,2 2,2 3.5,1 3,1 2,2 1)，有没有自己绕到一起的情况。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if this set of connected points, like (1 1,2 2,2 3.5,1 3,1 2,2 1), loops back onto itself.", "source": "original", "new_id": 623}
{"id": 110, "function": "ST_IsSimple", "question": "看看由那些点(1 1)、(2 2)、(2 3.5)、(1 3)、(1 2)、(2 1)连起来的线是不是完全没有自己绕自己。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line made by connecting those dots (1 1), (2 2), (2 3.5), (1 3), (1 2), (2 1) doesn't loop back on itself at all.", "source": "original", "new_id": 624}
{"id": 110, "function": "ST_IsSimple", "question": "看看那个由(1 1,2 2,2 3.5,1 3,1 2,2 1)这些小点连成的线是不是没有交叉的。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line made from those little dots (1 1,2 2,2 3.5,1 3,1 2,2 1) doesn't cross over itself.", "source": "original", "new_id": 625}
{"id": 110, "function": "ST_IsSimple", "question": "看看那些坐标点(1 1,2 2,2 3.5,1 3,1 2,2 1)连起来的线是不是没有交叉，给个对或错。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line connecting those points (1 1,2 2,2 3.5,1 3,1 2,2 1) doesn't cross itself, and give a true or false.", "source": "original", "new_id": 626}
{"id": 111, "function": "ST_IsSimple", "question": "看看由这些点组成的形状1 2, 3 4, 5 6, 1 2是不是没有交叉的那种。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made from these points 1 2, 3 4, 5 6, 1 2 doesn't cross itself.", "source": "original", "new_id": 629}
{"id": 111, "function": "ST_IsSimple", "question": "看看用这些坐标(1 2)、(3 4)、(5 6)围成的一块地是不是没有重叠的形状。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the area formed by these coordinates (1 2), (3 4), (5 6) is a shape without overlaps.", "source": "original", "new_id": 628}
{"id": 111, "function": "ST_IsSimple", "question": "看看这些点组成的形状是否简单，结果是个对或错的答案。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made of these points is simple, with the result being a yes or no answer.", "source": "original", "new_id": 631}
{"id": 111, "function": "ST_IsSimple", "question": "看看由这些点1 2、3 4、5 6、1 2围成的形状是不是那种不绕来绕去的简单图形。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made by these points 1 2, 3 4, 5 6, 1 2 is the kind that doesn't twist around, a simple shape.", "source": "original", "new_id": 630}
{"id": 112, "function": "ST_M", "question": "从给定的坐标点1 2 3 4中找出那个特别的M值。", "sql": "SELECT ST_M(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find that special M value from the given coordinates 1 2 3 4.", "source": "original", "new_id": 637}
{"id": 112, "function": "ST_M", "question": "从表示为POINT(1 2 3 4)的小点中找出那个特别的M值。", "sql": "SELECT ST_M(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find that special M value from the little dot represented as POINT(1 2 3 4).", "source": "original", "new_id": 638}
{"id": 110, "function": "ST_IsSimple", "question": "看看这条由坐标(1 1, 2 2, 2 3.5, 1 3, 1 2, 2 1)连接起来的线，告诉我它是不是一个没有交叉的简单线条，结果是对还是错呢？", "sql": "SELECT ST_IsSimple(ST_GeomFromText('LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check out this line made by connecting the coordinates (1 1, 2 2, 2 3.5, 1 3, 1 2, 2 1), and tell me if it's a simple line without crossings; is the result true or false?", "source": "original", "new_id": 627}
{"id": 112, "function": "ST_M", "question": "从那些数字里找出M值，它们是1、2、3、4组成的一个点。", "sql": "SELECT ST_M(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Identify the M value from those numbers, which form a point with 1, 2, 3, and 4.", "source": "original", "new_id": 634}
{"id": 112, "function": "ST_M", "question": "从那些数字是1、2、3、4的点里，找出最后一个数字是什么。", "sql": "SELECT ST_M(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From the numbers 1, 2, 3, and 4 in the point, find out what the last number is.", "source": "original", "new_id": 635}
{"id": 112, "function": "ST_M", "question": "从描述为POINT(1 2 3 4)的小点中，找出那个M的具体数值是什么。", "sql": "SELECT ST_M(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From the little dot described as POINT(1 2 3 4), find out what the specific M value is.", "source": "original", "new_id": 639}
{"id": 111, "function": "ST_IsSimple", "question": "看看这个由点组成的形状，像1 2, 3 4, 5 6, 然后又回到1 2，是不是一种很简单的图形呢？结果是对还是错呢？", "sql": "SELECT ST_IsSimple(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at this shape made of points like 1 2, 3 4, 5 6, and then back to 1 2. Is it a very simple figure? Is the result true or false?", "source": "original", "new_id": 633}
{"id": 112, "function": "ST_M", "question": "从那些数字1、2、3、4组成的小点中，找到最后一个数字代表的东西。", "sql": "SELECT ST_M(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From the little point made up of numbers 1, 2, 3, and 4, find out what the last number represents.", "source": "original", "new_id": 636}
{"id": 111, "function": "ST_IsSimple", "question": "看看这个多边形POLYGON((1 2, 3 4, 5 6, 1 2))是不是一种比较规整的形状，给个是或否的答案。", "sql": "SELECT ST_IsSimple(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if this polygon POLYGON((1 2, 3 4, 5 6, 1 2)) is a relatively regular shape, and give a yes or no answer.", "source": "original", "new_id": 632}
{"id": 113, "function": "ST_NDims", "question": "看看这些小点的维度值，像是1 1的那个，还有1 1 2的，最后是1 1 0.5的，分别叫做d2point、d3point和d2pointm吧。", "sql": "SELECT ST_NDims(ST_GeomFromText('POINT(1 1)')) AS d2point, ST_NDims(ST_GeomFromEWKT('POINT(1 1 2)')) AS d3point, ST_NDims(ST_GeomFromEWKT('POINTM(1 1 0.5)')) AS d2pointm;", "execution_result": [[2, 3, 3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check out the dimension values of these little dots, like the one at 1 1, then 1 1 2, and finally 1 1 0.5, call them d2point, d3point, and d2pointm, respectively.", "source": "original", "new_id": 641}
{"id": 113, "function": "ST_NDims", "question": "把那些小点的维度数弄出来吧，比如像 1 1、1 1 2 还有 1 1 0.5 这些，分别放到 d2point、d3point 和 d2pointm 这些地方。", "sql": "SELECT ST_NDims(ST_GeomFromText('POINT(1 1)')) AS d2point, ST_NDims(ST_GeomFromEWKT('POINT(1 1 2)')) AS d3point, ST_NDims(ST_GeomFromEWKT('POINTM(1 1 0.5)')) AS d2pointm;", "execution_result": [[2, 3, 3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Get the dimension count from those little dots, like 1 1, 1 1 2, and 1 1 0.5, and put them into d2point, d3point, and d2pointm places respectively.", "source": "original", "new_id": 645}
{"id": 113, "function": "ST_NDims", "question": "找出这些小坐标点的维度值：像POINT(1 1)、POINT(1 1 2)和POINTM(1 1 0.5)这样的，结果用d2point、d3point和d2pointm表示。", "sql": "SELECT ST_NDims(ST_GeomFromText('POINT(1 1)')) AS d2point, ST_NDims(ST_GeomFromEWKT('POINT(1 1 2)')) AS d3point, ST_NDims(ST_GeomFromEWKT('POINTM(1 1 0.5)')) AS d2pointm;", "execution_result": [[2, 3, 3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the dimension values of these little coordinate points: like POINT(1 1), POINT(1 1 2), and POINTM(1 1 0.5). The results are shown as d2point, d3point, and d2pointm.", "source": "original", "new_id": 643}
{"id": 114, "function": "ST_NPoints", "question": "看看这些坐标(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)围成的线有多少个小点？", "sql": "SELECT ST_NPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check how many little dots are in the line formed by these coordinates (77.29 29.07), (77.42 29.26), (77.27 29.31), (77.29 29.07)?", "source": "original", "new_id": 646}
{"id": 114, "function": "ST_NPoints", "question": "看看这个闭合的线路，它经过了77.29和29.07，然后到了77.42和29.26，接着是77.27和29.31，最后回到起点77.29和29.07，数一数这些角落的数目，用整数表示。", "sql": "SELECT ST_NPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at this closed line that goes through 77.29 and 29.07, then 77.42 and 29.26, followed by 77.27 and 29.31, and finally back to the start at 77.29 and 29.07. Count the number of corners, using an integer.", "source": "original", "new_id": 649}
{"id": 114, "function": "ST_NPoints", "question": "把那个像线段一样的东西，带着1 1和2 2这些点，变成一个可以用来算的形状，然后看看它有几个小点吧。", "sql": "SELECT ST_NPoints('LINESTRING(1 1,2 2)'::geometry);", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that thing that looks like a line with 1 1 and 2 2 as points, turn it into a shape you can calculate with, and then see how many little points it has.", "source": "original", "new_id": 648}
{"id": 113, "function": "ST_NDims", "question": "想知道这些小点的维度吗？告诉我二维的(1, 1)，三维的(1, 1, 2)，还有带点神秘值的(1, 1, 0.5)的维数。", "sql": "SELECT ST_NDims(ST_GeomFromText('POINT(1 1)')) AS d2point, ST_NDims(ST_GeomFromEWKT('POINT(1 1 2)')) AS d3point, ST_NDims(ST_GeomFromEWKT('POINTM(1 1 0.5)')) AS d2pointm;", "execution_result": [[2, 3, 3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Curious about the dimensions of these little dots? Tell me the dimensions of the two-dimensional (1, 1), the three-dimensional (1, 1, 2), and the one with a bit of a mysterious value (1, 1, 0.5).", "source": "original", "new_id": 644}
{"id": 113, "function": "ST_NDims", "question": "看看这些点，像POINT(1 1)、POINT(1 1 2)、POINTM(1 1 0.5)，它们每个有几层或者几维呢？", "sql": "SELECT ST_NDims(ST_GeomFromText('POINT(1 1)')) AS d2point, ST_NDims(ST_GeomFromEWKT('POINT(1 1 2)')) AS d3point, ST_NDims(ST_GeomFromEWKT('POINTM(1 1 0.5)')) AS d2pointm;", "execution_result": [[2, 3, 3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at these points, like POINT(1 1), POINT(1 1 2), and POINTM(1 1 0.5). How many levels or dimensions does each have?", "source": "original", "new_id": 640}
{"id": 113, "function": "ST_NDims", "question": "看看这些坐标：一个是1 1，另一个是1 1 2，还有一个是1 1 0.5。你能找到它们各自的空间大小吗？把结果叫做d2point、d3point和d2pointm。", "sql": "SELECT ST_NDims(ST_GeomFromText('POINT(1 1)')) AS d2point, ST_NDims(ST_GeomFromEWKT('POINT(1 1 2)')) AS d3point, ST_NDims(ST_GeomFromEWKT('POINTM(1 1 0.5)')) AS d2pointm;", "execution_result": [[2, 3, 3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Look at these coordinates: one is 1 1, another is 1 1 2, and there's also 1 1 0.5. Can you find their spatial size? Call the results d2point, d3point, and d2pointm.", "source": "original", "new_id": 642}
{"id": 115, "function": "ST_NPoints", "question": "给我看看有多少个小点连在一起形成了这条三维线，数字可以是大概的。", "sql": "SELECT ST_NPoints(ST_GeomFromEWKT('LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you show me how many little dots are connected to form this 3D line, the number can be approximate.", "source": "original", "new_id": 652}
{"id": 114, "function": "ST_NPoints", "question": "看看那些坐标排列成的线状，数数它有多少个转折点？坐标是77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07。", "sql": "SELECT ST_NPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check out those coordinates lined up as a path, and count how many turns it has. The coordinates are 77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07.", "source": "original", "new_id": 650}
{"id": 114, "function": "ST_NPoints", "question": "在那条由77.29 29.07到77.42 29.26，再到77.27 29.31，最后回到77.29 29.07的曲线中，有多少个小点？", "sql": "SELECT ST_NPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How many little dots are there on the curve that goes from 77.29 29.07 to 77.42 29.26, then to 77.27 29.31, and finally back to 77.29 29.07?", "source": "original", "new_id": 651}
{"id": 115, "function": "ST_NPoints", "question": "数一数连接在一起的点，比如这些(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)有几个。", "sql": "SELECT ST_NPoints(ST_GeomFromEWKT('LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Count how many connected dots there are, like these (77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3).", "source": "original", "new_id": 655}
{"id": 114, "function": "ST_NPoints", "question": "数一数由这些点组成的线段：77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07，看看有多少个小转弯的地方。", "sql": "SELECT ST_NPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Count how many little turns there are in the line made by these points: 77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07.", "source": "original", "new_id": 647}
{"id": 115, "function": "ST_NPoints", "question": "数一数这些点(77.29 29.07 1)、(77.42 29.26 0)、(77.27 29.31 -1)、(77.29 29.07 3)连起来的那个空间线条上有多少个小节点。", "sql": "SELECT ST_NPoints(ST_GeomFromEWKT('LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Count how many little nodes are on that spatial line made by connecting these points: (77.29 29.07 1), (77.42 29.26 0), (77.27 29.31 -1), (77.29 29.07 3).", "source": "original", "new_id": 653}
{"id": 115, "function": "ST_NPoints", "question": "你能告诉我由这些坐标构成的线有几个转折点吗？坐标是：第一个是77.29 29.07 1，接着是77.42 29.26 0，然后是77.27 29.31 -1，最后又回到77.29 29.07 3。", "sql": "SELECT ST_NPoints(ST_GeomFromEWKT('LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me how many twisty points are in the path made by these coordinates? The coordinates are: first is 77.29 29.07 1, then 77.42 29.26 0, next 77.27 29.31 -1, and finally back to 77.29 29.07 3.", "source": "original", "new_id": 654}
{"id": 117, "function": "ST_NumGeometries", "question": "看看那些坐标点在一个集合里有多少个呢？", "sql": "SELECT ST_NumGeometries(ST_GeomFromEWKT('GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How many of those coordinate dots are there in a collection?", "source": "original", "new_id": 664}
{"id": 115, "function": "ST_NPoints", "question": "给出那个有77.29 29.07 1和77.42 29.26 0等小点的长线段里有多少个角，取整说出来。", "sql": "SELECT ST_NPoints(ST_GeomFromEWKT('LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Tell me how many corners are in that long line with little points like 77.29 29.07 1 and 77.42 29.26 0, rounded to a whole number.", "source": "original", "new_id": 657}
{"id": 116, "function": "ST_NRings", "question": "想象一下由这些点(1 2)、(3 4)、(5 6)围成的那个形状，看看它有多少圈圈和里面的圈圈。", "sql": "SELECT ST_NRings(geom) AS Nrings, ST_NumInteriorRings(geom) AS ninterrings \nFROM (SELECT ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))') AS geom) AS foo;", "execution_result": [[1, 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine the shape made by these points (1 2), (3 4), (5 6) and check how many loops it has and how many loops are inside.", "source": "original", "new_id": 658}
{"id": 115, "function": "ST_NPoints", "question": "有一串连接的小点，位置分别是(77.29 29.07 1), (77.42 29.26 0), (77.27 29.31 -1), (77.29 29.07 3)，数数看这些点总共有多少个？", "sql": "SELECT ST_NPoints(ST_GeomFromEWKT('LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a string of connected little dots at (77.29 29.07 1), (77.42 29.26 0), (77.27 29.31 -1), (77.29 29.07 3). Can you count how many dots there are in total?", "source": "original", "new_id": 656}
{"id": 117, "function": "ST_NumGeometries", "question": "看看这个集合里有多少个小点，数一数然后告诉我这个数量是多少。", "sql": "SELECT ST_NumGeometries(ST_GeomFromEWKT('GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at how many little dots are in this collection, count them and then tell me what the number is.", "source": "original", "new_id": 667}
{"id": 116, "function": "ST_NRings", "question": "看看用这些点(1 2)、(3 4)、(5 6)画出来的封闭图形，有几个圈圈和里面有几个小圈圈，分别叫Nrings和ninterrings。", "sql": "SELECT ST_NRings(geom) AS Nrings, ST_NumInteriorRings(geom) AS ninterrings \nFROM (SELECT ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))') AS geom) AS foo;", "execution_result": [[1, 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check how many loops and how many little loops inside are drawn with these points (1 2), (3 4), (5 6) in a closed shape, named Nrings and ninterrings.", "source": "original", "new_id": 660}
{"id": 116, "function": "ST_NRings", "question": "看看这个带着点和线的形状，数一数它有多少个圆圈，还有那些藏在里面的圈圈数量。", "sql": "SELECT ST_NRings(geom) AS Nrings, ST_NumInteriorRings(geom) AS ninterrings \nFROM (SELECT ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))') AS geom) AS foo;", "execution_result": [[1, 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at this shape made of dots and lines, count how many circles it has and how many hidden circles are inside.", "source": "original", "new_id": 662}
{"id": 117, "function": "ST_NumGeometries", "question": "数一数包含那些坐标点(-2,3)和(-2,2)的集合里有多少个形状，并看看这个数字是多少。", "sql": "SELECT ST_NumGeometries(ST_GeomFromEWKT('GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Count how many shapes are in the collection that includes those coordinates (-2,3) and (-2,2), and see what that number is.", "source": "original", "new_id": 665}
{"id": 117, "function": "ST_NumGeometries", "question": "有一个奇妙的集合里装着一些小点，比如(-2 3)和(-2 2)，想知道这个集合里一共有多少个几何玩意儿。", "sql": "SELECT ST_NumGeometries(ST_GeomFromEWKT('GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In a curious collection with little dots like (-2 3) and (-2 2), how many geometric things are there in total?", "source": "original", "new_id": 666}
{"id": 117, "function": "ST_NumGeometries", "question": "在那些坐标点里，看看有多少个小形状，然后告诉我这个数字。", "sql": "SELECT ST_NumGeometries(ST_GeomFromEWKT('GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In those coordinate points, see how many little shapes there are and tell me that number.", "source": "original", "new_id": 668}
{"id": 116, "function": "ST_NRings", "question": "这个由点(1 2, 3 4, 5 6, 1 2)围起来的形状，总共有多少圈，里面又有多少小圈呢？", "sql": "SELECT ST_NRings(geom) AS Nrings, ST_NumInteriorRings(geom) AS ninterrings \nFROM (SELECT ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))') AS geom) AS foo;", "execution_result": [[1, 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For this shape surrounded by points (1 2, 3 4, 5 6, 1 2), how many overall loops are there, and how many smaller loops inside?", "source": "original", "new_id": 659}
{"id": 116, "function": "ST_NRings", "question": "给定一个用点(1 2), (3 4), (5 6), (1 2)连起来的形状，想知道它有多少圈和里面有多少小圈。", "sql": "SELECT ST_NRings(geom) AS Nrings, ST_NumInteriorRings(geom) AS ninterrings \nFROM (SELECT ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))') AS geom) AS foo;", "execution_result": [[1, 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Given a shape connected by dots at (1 2), (3 4), (5 6), (1 2), find out how many loops it has and how many smaller loops are inside.", "source": "original", "new_id": 663}
{"id": 117, "function": "ST_NumGeometries", "question": "在包含小点的集合里，看有多少个几何玩意儿，然后用数字告诉我。", "sql": "SELECT ST_NumGeometries(ST_GeomFromEWKT('GEOMETRYCOLLECTION(MULTIPOINT((-2 3),(-2 2)))'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In a collection with little dots, see how many geometric things there are, and tell me using a number.", "source": "original", "new_id": 669}
{"id": 118, "function": "ST_NumGeometries", "question": "看看用那些点连成的闭合线圈里有多少个小形状？点是77.29 29.07, 77.42 29.26, 77.27 29.31,再回到77.29 29.07。", "sql": "SELECT ST_NumGeometries(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out how many little shapes are inside the loop made by connecting those points: 77.29 29.07, 77.42 29.26, 77.27 29.31, and back to 77.29 29.07.", "source": "original", "new_id": 670}
{"id": 116, "function": "ST_NRings", "question": "帮忙算一下那个由点(1 2), (3 4), (5 6), (1 2)围成的多边形有几个环，还有它里面的环有多少。", "sql": "SELECT ST_NRings(geom) AS Nrings, ST_NumInteriorRings(geom) AS ninterrings \nFROM (SELECT ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))') AS geom) AS foo;", "execution_result": [[1, 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you help figure out how many rings there are in the polygon formed by points (1 2), (3 4), (5 6), (1 2), and how many rings are inside it?", "source": "original", "new_id": 661}
{"id": 118, "function": "ST_NumGeometries", "question": "找出由这些坐标点(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)连起来的线条里到底有多少个小几何元素。", "sql": "SELECT ST_NumGeometries(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Figure out how many little geometric elements are within the line made by connecting these coordinates: (77.29 29.07), (77.42 29.26), (77.27 29.31), (77.29 29.07).", "source": "original", "new_id": 671}
{"id": 118, "function": "ST_NumGeometries", "question": "看看由这些点(77.29 29.07)、(77.42 29.26)、(77.27 29.31)和(77.29 29.07)连成的线里有多少个小图形。", "sql": "SELECT ST_NumGeometries(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check how many little shapes are inside the line made by these points (77.29 29.07), (77.42 29.26), (77.27 29.31), and (77.29 29.07).", "source": "original", "new_id": 672}
{"id": 118, "function": "ST_NumGeometries", "question": "数一数这条由坐标77.29 29.07到77.29 29.07的线段里有多少个小点点。", "sql": "SELECT ST_NumGeometries(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Count how many little dots are in this line going from coordinates 77.29 29.07 to 77.29 29.07.", "source": "original", "new_id": 674}
{"id": 120, "function": "ST_NumPoints", "question": "数一数这条从(77.29 29.07)出发，经过(77.42 29.26)、(77.27 29.31)，又回到起点的线条上有多少个小点。", "sql": "SELECT ST_NumPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Count how many little dots are on the line that starts at (77.29 29.07), goes through (77.42 29.26), (77.27 29.31), and returns to the start.", "source": "original", "new_id": 683}
{"id": 118, "function": "ST_NumGeometries", "question": "看看那条折线，77.29 29.07开始，然后到77.42 29.26，再到77.27 29.31，最后回到77.29 29.07。你能数出里面有多少个小几何吗？", "sql": "SELECT ST_NumGeometries(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Look at that polyline starting at 77.29 29.07, then going to 77.42 29.26, then to 77.27 29.31, and finally back to 77.29 29.07. Can you count how many little geometries are inside?", "source": "original", "new_id": 675}
{"id": 120, "function": "ST_NumPoints", "question": "想知道用这些坐标(77.29 29.07)、(77.42 29.26)、(77.27 29.31)、(77.29 29.07)连起来的线有多少个转折点？", "sql": "SELECT ST_NumPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Curious how many turning points are there in the line connecting these coordinates: (77.29 29.07), (77.42 29.26), (77.27 29.31), and back to (77.29 29.07)?", "source": "original", "new_id": 684}
{"id": 118, "function": "ST_NumGeometries", "question": "告诉我由这些坐标点构成的闭合线的内容数量，坐标是：77.29 29.07，77.42 29.26，77.27 29.31，最后又回到77.29 29.07。", "sql": "SELECT ST_NumGeometries(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Tell me the count of what's inside the closed line made from these coordinates: 77.29 29.07, 77.42 29.26, 77.27 29.31, and finally back to 77.29 29.07.", "source": "original", "new_id": 673}
{"id": 120, "function": "ST_NumPoints", "question": "数一数那条连接着77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07的小路径有多少个转弯点吧。", "sql": "SELECT ST_NumPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Count how many turning points are on the little path connecting 77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07.", "source": "original", "new_id": 685}
{"id": 120, "function": "ST_NumPoints", "question": "给出那条线上的点数，线从77.29 29.07到77.42 29.26，再到77.27 29.31，最后回到77.29 29.07。", "sql": "SELECT ST_NumPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Tell me the number of points on that line, starting from 77.29 29.07 to 77.42 29.26, then to 77.27 29.31, and finally back to 77.29 29.07.", "source": "original", "new_id": 687}
{"id": 120, "function": "ST_NumPoints", "question": "有个由这些坐标(77.29 29.07), (77.42 29.26), (77.27 29.31), (77.29 29.07)组成的曲折路线，数数有多少个小点吧。", "sql": "SELECT ST_NumPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a winding path made from these spots (77.29 29.07), (77.42 29.26), (77.27 29.31), (77.29 29.07). Count how many little dots there are.", "source": "original", "new_id": 682}
{"id": 120, "function": "ST_NumPoints", "question": "数一数那些在77.29 29.07, 77.42 29.26, 77.27 29.31, 77.29 29.07之间连接的小点有多少个。", "sql": "SELECT ST_NumPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));", "execution_result": [[4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Count how many little dots are connected between 77.29 29.07, 77.42 29.26, 77.27 29.31, and 77.29 29.07.", "source": "original", "new_id": 686}
{"id": 119, "function": "ST_NumPatches", "question": "这个三维形状由六个面组成，面是通过这些点连接起来的，比如第一个面是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，其他面也类似。能告诉我总共有多少这样的面吗？", "sql": "SELECT ST_NumPatches(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[6]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "This three-dimensional shape is made up of six surfaces, where the surfaces are formed by connecting points like the first one (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), and others are similar. Can you tell me how many such surfaces there are in total?", "source": "original", "new_id": 677}
{"id": 121, "function": "ST_PatchN", "question": "从由六个小面组成的三维形状中，找出第二个小面的神奇格式。坐标包括像(0 0 0)和(1 1 0)这样的点。", "sql": "SELECT ST_AsEWKT(ST_PatchN(geom, 2)) As geomewkt\nFROM (\nVALUES (ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ) As foo(geom);", "execution_result": [["POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a 3D shape made of six little surfaces, find the magical format of the second little surface. Coordinates include points like (0 0 0) and (1 1 0).", "source": "original", "new_id": 688}
{"id": 119, "function": "ST_NumPatches", "question": "想知道由这些奇妙坐标构成的立体形状有多少面？坐标是这样分布的：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_NumPatches(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[6]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How many surfaces are there on this intriguing 3D shape made from these coordinates? They are laid out like this: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 676}
{"id": 119, "function": "ST_NumPatches", "question": "看看由这些坐标组成的立体图形里有多少块小面：第一个面是((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0))，第二个面是((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))，第三个面是((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0))，第四个面是((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0))，第五个面是((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0))，第六个面是((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_NumPatches(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[6]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check how many small surfaces are in this 3D shape made of these coordinates: the first surface is ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), the second surface is ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), the third surface is ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), the fourth surface is ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), the fifth surface is ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), the sixth surface is ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 678}
{"id": 119, "function": "ST_NumPatches", "question": "想知道一个由六个小面片组成的大几何形状的面片总数吗？这些面片的点分别是像这样排的：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_NumPatches(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[6]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Curious about the total count of little patch faces in a big shape made of six patches? The points for these patches are laid out like this: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 680}
{"id": 121, "function": "ST_PatchN", "question": "对于由六个多边形面组成的立体形状，能不能把第二个面片用扩展的方式描述出来？这些面片有些坐标像(0 0 0), (0 1 0), (1 1 0), (1 0 0)这样的。", "sql": "SELECT ST_AsEWKT(ST_PatchN(geom, 2)) As geomewkt\nFROM (\nVALUES (ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ) As foo(geom);", "execution_result": [["POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For a 3D shape made of six polygonal faces, can you describe the second face in an expanded way? Some of these faces have coordinates like (0 0 0), (0 1 0), (1 1 0), (1 0 0).", "source": "original", "new_id": 689}
{"id": 119, "function": "ST_NumPatches", "question": "这个立体图形，用那些点来描述的，想知道它有多少个面呢？点是这样的：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。你能用整数告诉我吗？", "sql": "SELECT ST_NumPatches(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[6]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "This 3D shape, described by those points, how many faces does it have? The points are like this: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)). Can you tell me with a whole number?", "source": "original", "new_id": 679}
{"id": 121, "function": "ST_PatchN", "question": "从一个由六个三维小平面组成的大形状中，找出第二个小平面的那些具体坐标，然后用一种特定格式表示出来。", "sql": "SELECT ST_AsEWKT(ST_PatchN(geom, 2)) As geomewkt\nFROM (\nVALUES (ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ) As foo(geom);", "execution_result": [["POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a big shape made up of six 3D small surfaces, find the specific coordinates of the second small surface and represent them in a certain format.", "source": "original", "new_id": 693}
{"id": 121, "function": "ST_PatchN", "question": "给我看看那个几何体的第二个小面片，用一些特别的格式来表示，带上那些三维数字和某种身份信息。", "sql": "SELECT ST_AsEWKT(ST_PatchN(geom, 2)) As geomewkt\nFROM (\nVALUES (ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ) As foo(geom);", "execution_result": [["POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the second little face of that geometric shape, using some special format, including those 3D numbers and some kind of identity info.", "source": "original", "new_id": 691}
{"id": 122, "function": "ST_PointN", "question": "对于那些坐标组成的线，能否逐个给出它们的文本表示？坐标是(0 0), (1 1), (2 2)。", "sql": "SELECT ST_AsText( ST_PointN( column1, generate_series(1, ST_NPoints(column1)) )) \nFROM ( VALUES ('LINESTRING(0 0, 1 1, 2 2)'::geometry) ) AS foo;", "execution_result": [["POINT(0 0)"], ["POINT(1 1)"], ["POINT(2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the line made by those coordinates, could you give the text representation of each one? The coordinates are (0 0), (1 1), (2 2).", "source": "original", "new_id": 695}
{"id": 122, "function": "ST_PointN", "question": "把那三点连接起来的线段里，每个小点的顺序是怎么样的？能不能用文字表达一下它们的样子？", "sql": "SELECT ST_AsText( ST_PointN( column1, generate_series(1, ST_NPoints(column1)) )) \nFROM ( VALUES ('LINESTRING(0 0, 1 1, 2 2)'::geometry) ) AS foo;", "execution_result": [["POINT(0 0)"], ["POINT(1 1)"], ["POINT(2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How do those three tiny dots form a line, and in what order? Could you describe their appearance using words?", "source": "original", "new_id": 698}
{"id": 124, "function": "ST_StartPoint", "question": "对于那些弯弯曲曲的连线，看看第一个小点儿的坐标是什么，包含数字5和2哦。", "sql": "SELECT ST_AsText(ST_StartPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(5 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those curvy connections, check out what the coordinates of the first little dot are, including the numbers 5 and 2.", "source": "original", "new_id": 701}
{"id": 124, "function": "ST_StartPoint", "question": "能不能找到那些圆弧坐标里最开始的那个小点？就是从5 2开始的那个。", "sql": "SELECT ST_StartPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry);", "execution_result": [["010100000000000000000014400000000000000040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you find the very first little dot among those arc coordinates? The one starting at 5 2.", "source": "original", "new_id": 702}
{"id": 124, "function": "ST_StartPoint", "question": "从那些圆形弯曲的坐标里，找出最开始的那个点，然后用某种文字格式来表达它。", "sql": "SELECT ST_AsText(ST_StartPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(5 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From those circular curved coordinates, find the very first point and express it in some kind of text format.", "source": "original", "new_id": 700}
{"id": 119, "function": "ST_NumPatches", "question": "有个复杂的三维形状由六个面拼成，像一幅立体拼图，分别是这些坐标：第一个面((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0))，第二个面((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))，第三个面((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0))，第四个面((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0))，第五个面((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0))，第六个面((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。你能告诉我这个形状有多少个小面吗？", "sql": "SELECT ST_NumPatches(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [[6]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a complex 3D shape made up of six faces, like a 3D puzzle, with these coordinates: first face ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), second face ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), third face ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), fourth face ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), fifth face ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), sixth face ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)). Can you tell me how many small faces this shape has?", "source": "original", "new_id": 681}
{"id": 122, "function": "ST_PointN", "question": "给出一条连接(0 0), (1 1), (2 2)的小线段，依次说出每个小点的文本样子。", "sql": "SELECT ST_AsText( ST_PointN( column1, generate_series(1, ST_NPoints(column1)) )) \nFROM ( VALUES ('LINESTRING(0 0, 1 1, 2 2)'::geometry) ) AS foo;", "execution_result": [["POINT(0 0)"], ["POINT(1 1)"], ["POINT(2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Given a little line connecting (0 0), (1 1), (2 2), say the text version of each little dot in order.", "source": "original", "new_id": 699}
{"id": 122, "function": "ST_PointN", "question": "把那条线上的小点，一个一个变成点状的东西，按照它们出现的顺序，用某种格式描述出来，像是LINESTRING(0 0, 1 1, 2 2)这样的。", "sql": "SELECT ST_AsText( ST_PointN( column1, generate_series(1, ST_NPoints(column1)) )) \nFROM ( VALUES ('LINESTRING(0 0, 1 1, 2 2)'::geometry) ) AS foo;", "execution_result": [["POINT(0 0)"], ["POINT(1 1)"], ["POINT(2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the little dots on that line into point-like things, one by one, and describe them in some format, like LINESTRING(0 0, 1 1, 2 2), following their order.", "source": "original", "new_id": 694}
{"id": 122, "function": "ST_PointN", "question": "把由那些连接的点(0 0, 1 1, 2 2)组成的长线，逐个变成小点，然后按顺序告诉我它们的样子。", "sql": "SELECT ST_AsText( ST_PointN( column1, generate_series(1, ST_NPoints(column1)) )) \nFROM ( VALUES ('LINESTRING(0 0, 1 1, 2 2)'::geometry) ) AS foo;", "execution_result": [["POINT(0 0)"], ["POINT(1 1)"], ["POINT(2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that long line made of connected dots (0 0, 1 1, 2 2), turn them into individual little points one by one, and tell me what they look like in order.", "source": "original", "new_id": 697}
{"id": 124, "function": "ST_StartPoint", "question": "你能告诉我那个弯曲线的起点在哪里吗？比如说圆弧线从(5 2)开始的地方。", "sql": "SELECT ST_AsText(ST_StartPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(5 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me where the starting point of that curved line is? Like, where the circular arc line begins at (5 2).", "source": "original", "new_id": 703}
{"id": 121, "function": "ST_PatchN", "question": "从一个有六个面片的立体形状中，找出编号为2的那块，由(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)这些点组成的面，然后用一些特别的字母和数字来表示它。", "sql": "SELECT ST_AsEWKT(ST_PatchN(geom, 2)) As geomewkt\nFROM (\nVALUES (ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ) As foo(geom);", "execution_result": [["POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a 3D shape with six faces, find the piece numbered 2, made of the points (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), and represent it using some special letters and numbers.", "source": "original", "new_id": 690}
{"id": 124, "function": "ST_StartPoint", "question": "那个圆弧线，开头的小点在哪里啊？比如圆弧CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)的第一个坐标是什么？", "sql": "SELECT ST_AsText(ST_StartPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(5 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Where's the starting little dot of that circular arc line? Like, what's the first coordinate of the arc CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)?", "source": "original", "new_id": 704}
{"id": 122, "function": "ST_PointN", "question": "从那条经过(0 0), (1 1), (2 2)的小线中找出第二个位置的点。", "sql": "SELECT ST_PointN('LINESTRING(0 0, 1 1, 2 2)'::geometry, 2);", "execution_result": [["0101000000000000000000F03F000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the point at the second spot from that little line passing through (0 0), (1 1), (2 2).", "source": "original", "new_id": 696}
{"id": 121, "function": "ST_PatchN", "question": "从由六个立体小面片组成的形状中，找出第二个面片的奇怪写法，坐标就像这样：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))。", "sql": "SELECT ST_AsEWKT(ST_PatchN(geom, 2)) As geomewkt\nFROM (\nVALUES (ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ) As foo(geom);", "execution_result": [["POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From this shape made of six little 3D faces, find the odd way to write out the second face, with coordinates like: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), and ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)).", "source": "original", "new_id": 692}
{"id": 125, "function": "ST_StartPoint", "question": "给我那个从三维线开始的小点的坐标，格式要带着某个编号的特别字符串。", "sql": "SELECT ST_AsEWKT(ST_StartPoint('LINESTRING(0 1 1, 0 2 2)'::geometry));", "execution_result": [["POINT(0 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me the coordinates of the little starting dot from the 3D line, formatted as a special string with some kind of number.", "source": "original", "new_id": 711}
{"id": 126, "function": "ST_StartPoint", "question": "把从零到一再到二的那条线的起始点变成文字形式是什么样子的呢？", "sql": "SELECT ST_AsText(ST_StartPoint('LINESTRING(0 1, 0 2)'::geometry));", "execution_result": [["POINT(0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What does the start of the line from zero to one to two look like in text form?", "source": "original", "new_id": 713}
{"id": 124, "function": "ST_StartPoint", "question": "找出从CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)那条弯曲线的开头点的坐标，并用WKT格式说出来。", "sql": "SELECT ST_AsText(ST_StartPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3)'::geometry));", "execution_result": [["POINT(5 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the first point in that bendy line CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 6 3) and say it in WKT format.", "source": "original", "new_id": 705}
{"id": 125, "function": "ST_StartPoint", "question": "给我看一下那个从点(0 1 1)开始的线的起始位置，用一种特殊的格式表现出来，记得要包含那些编号哦。", "sql": "SELECT ST_AsEWKT(ST_StartPoint('LINESTRING(0 1 1, 0 2 2)'::geometry));", "execution_result": [["POINT(0 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the starting spot of that line beginning at point (0 1 1) using a special format, and remember to include those numbers.", "source": "original", "new_id": 709}
{"id": 125, "function": "ST_StartPoint", "question": "能不能告诉我那条三维线段LINESTRING(0 1 1, 0 2 2)的起点坐标，用一种包含空间信息的格式表达出来？", "sql": "SELECT ST_AsEWKT(ST_StartPoint('LINESTRING(0 1 1, 0 2 2)'::geometry));", "execution_result": [["POINT(0 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you tell me the starting point coordinates of the 3D linestring LINESTRING(0 1 1, 0 2 2) using a format that includes spatial info?", "source": "original", "new_id": 710}
{"id": 125, "function": "ST_StartPoint", "question": "把从(0 1 1)开始的那条三维小线的起点，用一种特别的字符串方式表示出来。", "sql": "SELECT ST_AsEWKT(ST_StartPoint('LINESTRING(0 1 1, 0 2 2)'::geometry));", "execution_result": [["POINT(0 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Express the starting spot of that 3D little line from (0 1 1) in a special string way.", "source": "original", "new_id": 708}
{"id": 125, "function": "ST_StartPoint", "question": "从连接点(0 1 1)和(0 2 2)的三维线段中找出第一个小点，并以某种格式返回。", "sql": "SELECT ST_AsEWKT(ST_StartPoint('LINESTRING(0 1 1, 0 2 2)'::geometry));", "execution_result": [["POINT(0 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the first tiny dot from the 3D line linking (0 1 1) and (0 2 2), and return it in some format.", "source": "original", "new_id": 707}
{"id": 126, "function": "ST_StartPoint", "question": "给我那个从线段LINESTRING(0 1, 0 2)开始的小点的坐标，用一种什么格式来表示吧。", "sql": "SELECT ST_AsText(ST_StartPoint('LINESTRING(0 1, 0 2)'::geometry));", "execution_result": [["POINT(0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me the coordinates of the little dot that starts the LINESTRING(0 1, 0 2) segment, using some kind of format to show it.", "source": "original", "new_id": 716}
{"id": 125, "function": "ST_StartPoint", "question": "把这条从(0 1 1)到(0 2 2)的小线段的开头位置，用一种包含空间参考的特别格式说出来。", "sql": "SELECT ST_AsEWKT(ST_StartPoint('LINESTRING(0 1 1, 0 2 2)'::geometry));", "execution_result": [["POINT(0 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Describe the starting position of this little line from (0 1 1) to (0 2 2) using a special format that includes spatial reference.", "source": "original", "new_id": 706}
{"id": 126, "function": "ST_StartPoint", "question": "给我那个从线段(0 1, 0 2)开始的小点的坐标，用一种很标准的方式表达出来。", "sql": "SELECT ST_AsText(ST_StartPoint('LINESTRING(0 1, 0 2)'::geometry));", "execution_result": [["POINT(0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me the coordinates of that little starting point from the segment (0 1, 0 2), expressed in a very standard way.", "source": "original", "new_id": 717}
{"id": 127, "function": "ST_StartPoint", "question": "看看那个在0和1位置的小点的开头部分是不是没东西。", "sql": "SELECT ST_StartPoint('POINT(0 1)'::geometry) IS NULL AS is_null;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the beginning of the little dot at position 0 and 1 is empty.", "source": "original", "new_id": 718}
{"id": 126, "function": "ST_StartPoint", "question": "找到从(0 1)到(0 2)这条线的开头那个位置，用某种文本格式表示出来。", "sql": "SELECT ST_AsText(ST_StartPoint('LINESTRING(0 1, 0 2)'::geometry));", "execution_result": [["POINT(0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the starting spot of the line from (0 1) to (0 2), and show it in a certain text format.", "source": "original", "new_id": 712}
{"id": 126, "function": "ST_StartPoint", "question": "能不能说说那条从(0 1)到(0 2)的线段的起始点是怎么表示的？", "sql": "SELECT ST_AsText(ST_StartPoint('LINESTRING(0 1, 0 2)'::geometry));", "execution_result": [["POINT(0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell how the starting point of the segment from (0 1) to (0 2) is represented?", "source": "original", "new_id": 715}
{"id": 127, "function": "ST_StartPoint", "question": "检查那些坐标是(0,1)的小点，看它的起始位置有没有被定义出来。", "sql": "SELECT ST_StartPoint('POINT(0 1)'::geometry) IS NULL AS is_null;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the starting place for the little dot at coordinates (0,1) is defined or not.", "source": "original", "new_id": 719}
{"id": 127, "function": "ST_StartPoint", "question": "看看那个坐标点(0, 1)的起始位置是不是空的，用一种可以说是对错的方式来表达。", "sql": "SELECT ST_StartPoint('POINT(0 1)'::geometry) IS NULL AS is_null;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the starting spot of the coordinate (0, 1) is empty, using a kind of true or false expression.", "source": "original", "new_id": 721}
{"id": 128, "function": "ST_Summary", "question": "从(0 0)到(1 1)的那条线有什么样的详细信息？", "sql": "SELECT ST_Summary(ST_GeomFromText('LINESTRING(0 0, 1 1)')) as geom;", "execution_result": [["LineString[] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What are the detailed characteristics of that line from (0 0) to (1 1)?", "source": "original", "new_id": 725}
{"id": 126, "function": "ST_StartPoint", "question": "给我那个由(0 1)开始的两点连线的起始位置，用那个格式化方式表达出来。", "sql": "SELECT ST_AsText(ST_StartPoint('LINESTRING(0 1, 0 2)'::geometry));", "execution_result": [["POINT(0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me the starting spot of the two-point line beginning at (0 1) in that formatted way.", "source": "original", "new_id": 714}
{"id": 127, "function": "ST_StartPoint", "question": "找一下坐标是0 1的那个小点的开头部分。", "sql": "SELECT ST_StartPoint('POINT(0 1)'::geometry);", "execution_result": [["01010000000000000000000000000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the beginning part of that little dot with coordinates 0 1.", "source": "original", "new_id": 720}
{"id": 127, "function": "ST_StartPoint", "question": "判断一下，坐标是(0, 1)的小点，它的起始地方是不是空的？", "sql": "SELECT ST_StartPoint('POINT(0 1)'::geometry) IS NULL AS is_null;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little dot at coordinates (0, 1) has an empty starting place?", "source": "original", "new_id": 722}
{"id": 128, "function": "ST_Summary", "question": "给我看看那条直线从(0,0)到(1,1)的各种信息吧，像是什么类型啊，范围啊之类的。", "sql": "SELECT ST_Summary(ST_GeomFromText('LINESTRING(0 0, 1 1)')) as geom;", "execution_result": [["LineString[] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me various details about the line from (0,0) to (1,1), like what type it is, its extent, and stuff like that.", "source": "original", "new_id": 724}
{"id": 127, "function": "ST_StartPoint", "question": "看看那个在(0 1)位置的小点的开始部分是不是空的，结果是个对错的问题。", "sql": "SELECT ST_StartPoint('POINT(0 1)'::geometry) IS NULL AS is_null;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the starting bit of the little point at (0 1) is missing, and the result is a true or false question.", "source": "original", "new_id": 723}
{"id": 128, "function": "ST_Summary", "question": "对包含点(0 0)和(1 1)的线形数据做一个简单概述。", "sql": "SELECT ST_Summary('LINESTRING(0 0, 1 1)'::geometry);", "execution_result": [["LineString[] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make a simple overview of the line data that includes points (0 0) and (1 1).", "source": "original", "new_id": 726}
{"id": 128, "function": "ST_Summary", "question": "能不能用表格方式描述一下从(0 0)到(1 1)的那条线的各种信息？", "sql": "SELECT ST_Summary(ST_GeomFromText('LINESTRING(0 0, 1 1)')) as geom;", "execution_result": [["LineString[] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you describe in table form various details about that line from (0 0) to (1 1)?", "source": "original", "new_id": 727}
{"id": 128, "function": "ST_Summary", "question": "把那条从(0 0)到(1 1)的小线的各种信息，比如它是什么类型、多大范围之类的，放到geom这个地方。", "sql": "SELECT ST_Summary(ST_GeomFromText('LINESTRING(0 0, 1 1)')) as geom;", "execution_result": [["LineString[] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Put all sorts of info about that little line from (0 0) to (1 1), like what type it is and how big the area is, into the geom spot.", "source": "original", "new_id": 728}
{"id": 128, "function": "ST_Summary", "question": "你能告诉我关于那些连接点(0 0, 1 1)的线的详细情况吗？比如它是什么类型，有几维，还有它的坐标范围之类的。", "sql": "SELECT ST_Summary(ST_GeomFromText('LINESTRING(0 0, 1 1)')) as geom;", "execution_result": [["LineString[] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me the details about that line connecting the points (0 0, 1 1)? Like what type it is, how many dimensions it has, and its coordinate range, or something like that.", "source": "original", "new_id": 729}
{"id": 129, "function": "ST_Summary", "question": "能不能告诉我那个由(0 0)、(1 1)、(1 2)、(1 1)、(0 0)这些点围起来的形状的一些基本情况？", "sql": "SELECT ST_Summary(ST_GeogFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) geog;", "execution_result": [["Polygon[BGS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me some basic information about the shape formed by connecting the points (0 0), (1 1), (1 2), (1 1), and (0 0)?", "source": "original", "new_id": 730}
{"id": 129, "function": "ST_Summary", "question": "给由这些点构成的闭合形状(0 0, 1 1, 1 2, 1 1, 0 0)做个小结，看看它是什么类型、边界在哪里，还有多少个点，结果叫做geog。", "sql": "SELECT ST_Summary(ST_GeogFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) geog;", "execution_result": [["Polygon[BGS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at the summary of this closed shape made by points (0 0, 1 1, 1 2, 1 1, 0 0), to see what type it is, where its boundaries are, and how many points it has, and call the result geog.", "source": "original", "new_id": 732}
{"id": 129, "function": "ST_Summary", "question": "给我看看那些包含点(0 0, 1 1, 1 2, 1 1, 0 0)的形状的简要信息吧，比如它是什么类型，边界在哪里，还有点的数量。", "sql": "SELECT ST_Summary(ST_GeogFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) geog;", "execution_result": [["Polygon[BGS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me a brief overview of the shape made up of the points (0 0, 1 1, 1 2, 1 1, 0 0), like what type it is, where its edges are, and how many points it has.", "source": "original", "new_id": 733}
{"id": 129, "function": "ST_Summary", "question": "看看那个由(0 0, 1 1, 1 2, 1 1, 0 0)这些点围成的形状的基本情况，比如它是什么类型的，还有它的范围和有多少个角落。", "sql": "SELECT ST_Summary(ST_GeogFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) geog;", "execution_result": [["Polygon[BGS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check out the basic details of the shape formed by the points (0 0, 1 1, 1 2, 1 1, 0 0), like what type it is, its coverage area, and how many corners it has.", "source": "original", "new_id": 731}
{"id": 130, "function": "ST_Summary", "question": "能不能给我看看那个由点(0 0 1)到点(1 1 1)的空间线的详细情况，用一种结构化的方式？", "sql": "SELECT ST_Summary(ST_GeogFromText('LINESTRING(0 0 1, 1 1 1)'));", "execution_result": [["LineString[ZGS] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show me the detailed info about that spatial line from point (0 0 1) to point (1 1 1) in a structured way?", "source": "original", "new_id": 740}
{"id": 130, "function": "ST_Summary", "question": "给我看看关于那条三维线，坐标是(0 0 1)到(1 1 1)，它的地理概要信息，用一种标准的方式。", "sql": "SELECT ST_Summary(ST_GeogFromText('LINESTRING(0 0 1, 1 1 1)'));", "execution_result": [["LineString[ZGS] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the geographic summary for that 3D line, coordinates from (0 0 1) to (1 1 1), in a standard way.", "source": "original", "new_id": 741}
{"id": 130, "function": "ST_Summary", "question": "看看那个包含点(0 0 1)和(1 1 1)的三维线，能不能给我一些关于它的简要信息。", "sql": "SELECT ST_Summary(ST_GeogFromText('LINESTRING(0 0 1, 1 1 1)'));", "execution_result": [["LineString[ZGS] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at the 3D line with points (0 0 1) and (1 1 1), and see if you can give me some brief information about it.", "source": "original", "new_id": 738}
{"id": 130, "function": "ST_Summary", "question": "找出关于那些坐标连起来的三维线的信息，比如它的整体情况和特征是什么。", "sql": "SELECT ST_Summary(ST_GeogFromText('LINESTRING(0 0 1, 1 1 1)'));", "execution_result": [["LineString[ZGS] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out information about the 3D line formed by those coordinates, like what its overall situation and features are.", "source": "original", "new_id": 736}
{"id": 129, "function": "ST_Summary", "question": "给出关于形状像POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))的那些点的整体情况，比如边界和有多少个点之类的内容。", "sql": "SELECT ST_Summary(ST_GeogFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) geog;", "execution_result": [["Polygon[BGS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide an overview of the shape with points like POLYGON((0 0, 1 1, 1 2, 1 1, 0 0)), including things like its boundary and how many points it has.", "source": "original", "new_id": 734}
{"id": 130, "function": "ST_Summary", "question": "给我看看那条从(0 0 1)到(1 1 1)的三维线的空间信息概况，用一种标准方式来描述它吧。", "sql": "SELECT ST_Summary(ST_GeogFromText('LINESTRING(0 0 1, 1 1 1)'));", "execution_result": [["LineString[ZGS] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the spatial details for that 3D line going from (0 0 1) to (1 1 1), using some standard way to describe it.", "source": "original", "new_id": 739}
{"id": 131, "function": "ST_Summary", "question": "给我一个关于这块三维地形的简要说明，形状是由这些点组成的：(0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1)，并且有个数字代号4326。想知道它是什么类型、这些点的范围等。", "sql": "SELECT ST_Summary(ST_GeomFromText('SRID=4326;POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))'));", "execution_result": [["Polygon[ZBS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a brief description of this 3D terrain, shaped by these points: (0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1), with a number code 4326. I want to know what type it is, the range of these points, etc.", "source": "original", "new_id": 745}
{"id": 129, "function": "ST_Summary", "question": "看看那块用这些点(0 0, 1 1, 1 2, 1 1, 0 0)画出来的形状，说说它是什么类型，边界在哪儿，还有用了多少个角点。", "sql": "SELECT ST_Summary(ST_GeogFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) geog;", "execution_result": [["Polygon[BGS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at the shape drawn with these points (0 0, 1 1, 1 2, 1 1, 0 0), and mention what type it is, where its boundaries are, and how many corners it uses.", "source": "original", "new_id": 735}
{"id": 131, "function": "ST_Summary", "question": "看看那个有点像立体形状的东西，里面有坐标0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1，还有一个叫4326的编号，想知道它的类型、维度和有多少个小点之类的信息。", "sql": "SELECT ST_Summary(ST_GeomFromText('SRID=4326;POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))'));", "execution_result": [["Polygon[ZBS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at that shape that seems 3D, with coordinates like 0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1, and a number called 4326. I want to know its type, dimension, and how many little dots it has, and similar info.", "source": "original", "new_id": 744}
{"id": 131, "function": "ST_Summary", "question": "在地球坐标系中，有一些点：像(0 0 1)、(1 1 2)、(1 2 3)、(1 1 1)还有(0 0 1)，你能给出由这些点围起来的3D形状的总结信息吗？", "sql": "SELECT ST_Summary(ST_GeomFromText('SRID=4326;POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))'));", "execution_result": [["Polygon[ZBS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In the Earth's coordinate system, there are some points like (0 0 1), (1 1 2), (1 2 3), (1 1 1), and (0 0 1). Can you provide the summary information of the 3D shape formed by these points?", "source": "original", "new_id": 743}
{"id": 131, "function": "ST_Summary", "question": "帮我看看这个有点复杂的形状，它是由一些点组成的，比如(0 0 1), (1 1 2)等等，想要它的总结信息。记得是三维的哦。", "sql": "SELECT ST_Summary(ST_GeomFromText('SRID=4326;POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))'));", "execution_result": [["Polygon[ZBS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you help me check out this somewhat complex shape, made of some points like (0 0 1), (1 1 2), etc.? I want its summary information. Remember, it's 3D.", "source": "original", "new_id": 746}
{"id": 131, "function": "ST_Summary", "question": "能不能告诉我那些点构成的三维形状的概要，像是0 0 1到1 2 3之间的那种，用4326这个编号的方式？", "sql": "SELECT ST_Summary(ST_GeomFromText('SRID=4326;POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))'));", "execution_result": [["Polygon[ZBS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me the summary of that 3D shape made by those points, like from 0 0 1 to 1 2 3, using that number 4326 method?", "source": "original", "new_id": 742}
{"id": 132, "function": "ST_X", "question": "从那些数字1 2 3 4组成的点里，找出第一个数字代表的东西。", "sql": "SELECT ST_X(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From the numbers 1 2 3 4 making up that point, find out what the first number represents.", "source": "original", "new_id": 749}
{"id": 130, "function": "ST_Summary", "question": "给我看一下从(0,0,1)到(1,1,1)那条空间线的汇总信息吧。", "sql": "SELECT ST_Summary(ST_GeogFromText('LINESTRING(0 0 1, 1 1 1)'));", "execution_result": [["LineString[ZGS] with 2 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the summary info for that space line going from (0,0,1) to (1,1,1).", "source": "original", "new_id": 737}
{"id": 131, "function": "ST_Summary", "question": "你能给我看看这个带有数字4326的形状的概要吗？它是由这些小点构成：0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1。", "sql": "SELECT ST_Summary(ST_GeomFromText('SRID=4326;POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))'));", "execution_result": [["Polygon[ZBS] with 1 ring:\n   ring 0 has 5 points"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you show me the summary of this shape with the number 4326? It's made up of these little dots: 0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1.", "source": "original", "new_id": 747}
{"id": 132, "function": "ST_X", "question": "找出在那些数字1 2 3 4里面，最开始的那个数字代表的是什么。", "sql": "SELECT ST_X(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out what the first number represents in those numbers 1 2 3 4.", "source": "original", "new_id": 748}
{"id": 133, "function": "ST_X", "question": "找出那条经过点(1 2 3 4, 1 1 1 1)的线中间的X位置是多少呢？", "sql": "SELECT ST_X(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What is the X spot in the middle of the line that goes through the points (1 2 3 4, 1 1 1 1)?", "source": "original", "new_id": 758}
{"id": 133, "function": "ST_X", "question": "看看由这些坐标(1 2 3 4)和(1 1 1 1)之间的直线的那个中心点的横向数值是多少。", "sql": "SELECT ST_X(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out what the sideways number is for the central point of the line between these coordinates (1 2 3 4) and (1 1 1 1).", "source": "original", "new_id": 754}
{"id": 132, "function": "ST_X", "question": "给我看看那个四维点中的第一个数字是多少，里面有1、2、3、4这些数字。", "sql": "SELECT ST_X(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what the first number is in that four-dimensional point, which includes the numbers 1, 2, 3, 4.", "source": "original", "new_id": 752}
{"id": 132, "function": "ST_X", "question": "从那个有点像POINT(1 2 3 4)的四维小点中取出横坐标是多少？", "sql": "SELECT ST_X(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From that four-dimensional little dot that looks like POINT(1 2 3 4), what is the horizontal coordinate?", "source": "original", "new_id": 751}
{"id": 132, "function": "ST_X", "question": "从那种带有1 2 3 4数字的四维小点里，找出第一个数字是多少。", "sql": "SELECT ST_X(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From that four-dimensional little dot with numbers 1 2 3 4, find out what the first number is.", "source": "original", "new_id": 753}
{"id": 133, "function": "ST_X", "question": "对于那些从1到4的小点和1到1的坐标，找出它们的中心位置，并告诉我那个中心的X方向上的数值，要用小数哦。", "sql": "SELECT ST_X(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those little dots from 1 to 4 and coordinates from 1 to 1, find their central spot and tell me the number in the X direction for that center, and make sure it's a decimal.", "source": "original", "new_id": 759}
{"id": 133, "function": "ST_X", "question": "找出从那些点组成的线条的中心位置，特别是看看它的X方向在哪里，像是从(1 2 3 4, 1 1 1 1)这些数字来的。", "sql": "SELECT ST_X(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the center spot of a line made from those points, especially checking where its X direction is, like coming from these numbers (1 2 3 4, 1 1 1 1).", "source": "original", "new_id": 757}
{"id": 133, "function": "ST_X", "question": "对于那个从点(1, 2, 3, 4)到点(1, 1, 1, 1)的三维线条，找出它的中心位置的X值。", "sql": "SELECT ST_X(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that 3D line going from point (1, 2, 3, 4) to point (1, 1, 1, 1), find the X value of its center spot.", "source": "original", "new_id": 755}
{"id": 132, "function": "ST_X", "question": "从那个写成POINT(1 2 3 4)的四维坐标里，找出第一个数字，对应的就是那个横向值。", "sql": "SELECT ST_X(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From that POINT(1 2 3 4) written as a four-dimensional coordinate, find the first number, which corresponds to the horizontal value.", "source": "original", "new_id": 750}
{"id": 134, "function": "ST_Y", "question": "找出从两个3D点形成的线段中心位置的Y值，点的坐标是(1, 2, 3, 4)和(1, 1, 1, 1)。", "sql": "SELECT ST_Y(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the Y value from the center of a line formed by two 3D points, with coordinates (1, 2, 3, 4) and (1, 1, 1, 1).", "source": "original", "new_id": 763}
{"id": 133, "function": "ST_X", "question": "找到一条从(1,2,3,4)到(1,1,1,1)的线段中间那个点的X值，这条线段有点特殊，带着四个维度的数据。", "sql": "SELECT ST_X(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the X value of the middle point of a line going from (1,2,3,4) to (1,1,1,1). This line is a bit special as it carries four-dimensional data.", "source": "original", "new_id": 756}
{"id": 135, "function": "ST_Y", "question": "给我看看从那种描述为POINT(1 2 3 4)的小点里，第二个数字代表的值是多少呢？", "sql": "SELECT ST_Y(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show me what the second number represents in that thing described as POINT(1 2 3 4)?", "source": "original", "new_id": 770}
{"id": 135, "function": "ST_Y", "question": "看看那个格式化为EWKT的点里，第二个数字是什么？", "sql": "SELECT ST_Y(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at the point formatted as EWKT, what's the second number?", "source": "original", "new_id": 771}
{"id": 136, "function": "ST_Z", "question": "在形状描述里，找出1 2 3 4这串数字中的第三个数字。", "sql": "SELECT ST_Z(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In the shape description, find the third number from the series 1 2 3 4.", "source": "original", "new_id": 772}
{"id": 134, "function": "ST_Y", "question": "对于那些有点复杂的线条，像1 2 3 4和1 1 1 1这些点，想知道它们整体的中心在竖直方向上的那个值。", "sql": "SELECT ST_Y(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those somewhat complex lines, like the points 1 2 3 4 and 1 1 1 1, I want to know the vertical value of their overall center.", "source": "original", "new_id": 761}
{"id": 134, "function": "ST_Y", "question": "找出那些两点组成的线段的中间位置，然后告诉我那个位置在上下方向上的值吧，坐标是1 2 3 4和1 1 1 1。", "sql": "SELECT ST_Y(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the middle spot of that line made by two points, then tell me the value in the up-down direction, using coordinates 1 2 3 4 and 1 1 1 1.", "source": "original", "new_id": 762}
{"id": 135, "function": "ST_Y", "question": "从那些坐标1, 2, 3, 4中找出第二个数值代表的东西。", "sql": "SELECT ST_Y(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From those coordinates 1, 2, 3, 4, identify what the second number stands for.", "source": "original", "new_id": 767}
{"id": 134, "function": "ST_Y", "question": "找出由(1,2,3,4)和(1,1,1,1)这两个点组成的空间线段的中心位置，特别是那个垂直方向的数值。", "sql": "SELECT ST_Y(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the central spot of a spatial line formed by the points (1,2,3,4) and (1,1,1,1), especially the vertical direction number.", "source": "original", "new_id": 760}
{"id": 135, "function": "ST_Y", "question": "从那个点的描述里，找出它的第二个数字代表什么。", "sql": "SELECT ST_Y(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From the description of that point, figure out what the second number represents.", "source": "original", "new_id": 769}
{"id": 135, "function": "ST_Y", "question": "看看那个点，里面藏着的数字，尤其是看第二个数字是什么。", "sql": "SELECT ST_Y(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at that point, find the hidden numbers, especially the second number.", "source": "original", "new_id": 768}
{"id": 134, "function": "ST_Y", "question": "返回测量值M的三维线段LINESTRING(1 2 3 4, 1 1 1 1)几何中心点的垂直坐标。", "sql": "SELECT ST_Y(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the centroid Y-coordinate value of the LINESTRING(1 2 3 4, 1 1 1 1) geometry, where the LINESTRING contains two 3D points with M values (1 2 3 4) and (1 1 1 1).", "source": "original", "new_id": 764}
{"id": 134, "function": "ST_Y", "question": "输出LINESTRING(1 2 3 4, 1 1 1 1)几何对象的质心Y坐标值，其中LINESTRING包含两个带M值的三维点(1 2 3 4)和(1 1 1 1)。", "sql": "SELECT ST_Y(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));", "execution_result": [[1.5]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the centroid Y-coordinate value of the LINESTRING(1 2 3 4, 1 1 1 1) geometry, where the LINESTRING contains two 3D points with M values (1 2 3 4) and (1 1 1 1).", "source": "original", "new_id": 765}
{"id": 136, "function": "ST_Z", "question": "从那个点里找出数字3的位置，看看它在哪个层次上。", "sql": "SELECT ST_Z('POINT(1 2 3 4)');", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From that point, find out where the number 3 is, and see which level it's on.", "source": "original", "new_id": 774}
{"id": 136, "function": "ST_Z", "question": "给我看看那里的Z值是多少，点是1、2、3、4的那个。", "sql": "SELECT ST_Z(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what the Z value is, for the point with 1, 2, 3, 4.", "source": "original", "new_id": 776}
{"id": 136, "function": "ST_Z", "question": "告诉我在那个有点奇怪的点里，1 2 3 4，第三个数字代表什么？", "sql": "SELECT ST_Z(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Tell me what the third number represents in that slightly odd point, 1 2 3 4?", "source": "original", "new_id": 775}
{"id": 137, "function": "ST_Zmflag", "question": "看看那些点(1 2 3)和(3 4 3)组成的一条线，它的某种标记值是什么？", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRINGM(1 2 3, 3 4 3)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check what some kind of marker value is for a line made from those points (1 2 3) and (3 4 3).", "source": "original", "new_id": 778}
{"id": 135, "function": "ST_Y", "question": "从那些坐标1 2 3 4中，把第二个数值找出来，看看它是什么。", "sql": "SELECT ST_Y(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From those coordinates 1 2 3 4, find the second number and see what it is.", "source": "original", "new_id": 766}
{"id": 137, "function": "ST_Zmflag", "question": "看看这条由两个点(1 2 3)和(3 4 3)组成的线，它们都有个3的特殊标记，想知道这个线的秘密标记是什么？", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRINGM(1 2 3, 3 4 3)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at this line made of two points (1 2 3) and (3 4 3), both with a special mark of 3, and find out what the secret mark of this line is?", "source": "original", "new_id": 783}
{"id": 138, "function": "ST_Zmflag", "question": "看看那个由三个小点组成的圆弧线，点的位置是1 2 3、3 4 3、5 6 3，都是顶上有3这个数，想知道它的神秘维度标志是什么。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)'));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at that arc line made of three little dots, with positions at 1 2 3, 3 4 3, 5 6 3, all having the number 3 on top, and find out its mysterious dimension flag.", "source": "original", "new_id": 786}
{"id": 136, "function": "ST_Z", "question": "找到那个包含数字1、2、3、4的小点中的第三个数字。", "sql": "SELECT ST_Z(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the third number in that little dot containing the numbers 1, 2, 3, and 4.", "source": "original", "new_id": 773}
{"id": 138, "function": "ST_Zmflag", "question": "对于由这些点组成的三维弧线，比如(1 2 3), (3 4 3), (5 6 3)，想知道它们在空间里的那种标记是什么，结果要是个数字哦。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)'));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the 3D arc made from points like (1 2 3), (3 4 3), (5 6 3), what kind of tag do they have in space? The result should be a number.", "source": "original", "new_id": 785}
{"id": 138, "function": "ST_Zmflag", "question": "看看那些点(1,2,3)、(3,4,3)、(5,6,3)组成的神秘弧线，能告诉我们它的空间秘密吗？就像用数字代码来标记它是二维还是三维之类的。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)'));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you take a look at the mysterious arc formed by those points (1,2,3), (3,4,3), (5,6,3) and tell us its spatial secret? Like using a number code to mark whether it's two-dimensional or three-dimensional or something like that.", "source": "original", "new_id": 784}
{"id": 137, "function": "ST_Zmflag", "question": "看看那条连接点(1 2 3)和(3 4 3)的线里面藏着的标记是什么，特别是那些有3的值。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRINGM(1 2 3, 3 4 3)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out what marker is hidden in the line connecting points (1 2 3) and (3 4 3), especially those with a value of 3.", "source": "original", "new_id": 779}
{"id": 137, "function": "ST_Zmflag", "question": "看看一条连接两个点(1,2)和(3,4)，都有3这个数的线段，它的形状里有什么特别的标记吗？", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRINGM(1 2 3, 3 4 3)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there's any special marker in the shape of a line connecting two points (1,2) and (3,4), both having the number 3.", "source": "original", "new_id": 780}
{"id": 136, "function": "ST_Z", "question": "输出EWKT格式的POINT(1 2 3 4)几何对象中Z坐标值的具体数值。", "sql": "SELECT ST_Z(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the specific numerical value of the Z-coordinate in the EWKT-formatted POINT(1 2 3 4) geometry object.", "source": "original", "new_id": 777}
{"id": 138, "function": "ST_Zmflag", "question": "看看那些圆弧线上的点，像是1 2 3，3 4 3，还有5 6 3，能给我们什么数字代码？", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)'));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Look at those points on the circular arc line, like 1 2 3, 3 4 3, and 5 6 3, what number code can they give us?", "source": "original", "new_id": 788}
{"id": 137, "function": "ST_Zmflag", "question": "对于一个用两个点(1 2 3)和(3 4 3)组成的线段，看看它的神秘数字是0、1、2还是3。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRINGM(1 2 3, 3 4 3)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For a line made of two points (1 2 3) and (3 4 3), find out if its mysterious number is 0, 1, 2, or 3.", "source": "original", "new_id": 781}
{"id": 137, "function": "ST_Zmflag", "question": "看看那些带有M值的点(1 2 3)和(3 4 3)构成的线条，它们的第三个维度或标记是不是存在？用整数说说看。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRINGM(1 2 3, 3 4 3)'));", "execution_result": [[1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the third dimension or marker exists for those points with M values (1 2 3) and (3 4 3) making up the line, and tell me in a number.", "source": "original", "new_id": 782}
{"id": 139, "function": "ST_Zmflag", "question": "看看有一个点，它在某个地方对应着1、2、3、4这些数字，能告诉我这个点的特别标记是什么吗？", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine there's a point somewhere associated with the numbers 1, 2, 3, and 4. Can you tell me what special marker this point has?", "source": "original", "new_id": 795}
{"id": 139, "function": "ST_Zmflag", "question": "找出那个坐标是(1,2,3,4)的小点的标记，特别是看它有几种维度。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out the marker for that little dot with coordinates (1,2,3,4), especially noting how many dimensions it has.", "source": "original", "new_id": 791}
{"id": 140, "function": "ST_Zmflag", "question": "对于LINESTRING(1 2, 3 4)，你能找到那种标记它维度的数值吗？", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRING(1 2, 3 4)'));", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For LINESTRING(1 2, 3 4), can you find that number which marks its dimension?", "source": "original", "new_id": 800}
{"id": 139, "function": "ST_Zmflag", "question": "看看那个包含X是1，Y是2，Z是3，M是4的三维坐标点的维度标记是什么。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out what the dimension marker is for that 3D coordinate point with X as 1, Y as 2, Z as 3, and M as 4.", "source": "original", "new_id": 790}
{"id": 138, "function": "ST_Zmflag", "question": "找出那个弯曲线条CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)会给什么数字作为它的空间标志，看看是不是那个表示维度的整数。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)'));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out what number that curved line CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3) will give as its spatial marker, and see if it's that integer representing dimension.", "source": "original", "new_id": 787}
{"id": 139, "function": "ST_Zmflag", "question": "找出那个包含数字1、2、3和4的小点的特殊标记。有点像在说它的秘密身份。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the special marker of that little dot which includes the numbers 1, 2, 3, and 4. It's like revealing its secret identity.", "source": "original", "new_id": 794}
{"id": 140, "function": "ST_Zmflag", "question": "你能找出那个连接1 2到3 4的线条的某个标记值吗？", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRING(1 2, 3 4)'));", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you find some marker value for that line connecting 1 2 to 3 4?", "source": "original", "new_id": 797}
{"id": 139, "function": "ST_Zmflag", "question": "POINT(1 2 3 4)这个点里面有一些数字，能告诉我它的维度标志吗？", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "This POINT(1 2 3 4) has some numbers in it—can you tell me its dimension marker?", "source": "original", "new_id": 793}
{"id": 138, "function": "ST_Zmflag", "question": "看看那个包含点(1 2 3), (3 4 3), (5 6 3)的三维弯弯曲曲的线条，有没有什么隐藏的标记，并把它变成一个简单的数字（像是0或1之类的）来告诉我们它是什么样子的。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)'));", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at that curvy line with points (1 2 3), (3 4 3), (5 6 3) in three dimensions, and see if there's any hidden tag, turning it into a simple number (like 0 or 1) to tell us what it looks like.", "source": "original", "new_id": 789}
{"id": 140, "function": "ST_Zmflag", "question": "对于那些从1到2，再到3到4的小线条，找出它们的那个特殊标记数字是什么呢？", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRING(1 2, 3 4)'));", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those little lines from 1 to 2, then to 3 to 4, what is their special marker number?", "source": "original", "new_id": 799}
{"id": 139, "function": "ST_Zmflag", "question": "如果有个点，坐标是1、2，还有3和4这样的额外数值，你能看出它是带有哪种额外信息的吗？", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('POINT(1 2 3 4)'));", "execution_result": [[3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If there's a point with coordinates 1, 2, and extra numbers like 3 and 4, can you tell what kind of extra information it has?", "source": "original", "new_id": 792}
{"id": 140, "function": "ST_Zmflag", "question": "看看由那些坐标点(1,2)和(3,4)连起来的线，能给我们什么数字标记？", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRING(1 2, 3 4)'));", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check what number marker we get from the line created by connecting those coordinates (1,2) and (3,4).", "source": "original", "new_id": 796}
{"id": 140, "function": "ST_Zmflag", "question": "对于那个由'LINESTRING(1 2, 3 4)'这种格式的小线段，用某种方法变成一个几何形状，然后看看它有没有特别的标记位，像是高低或者其他附加信息的状态。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRING(1 2, 3 4)'));", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that little line segment in the form 'LINESTRING(1 2, 3 4)', turn it into some sort of geometric shape and check if it has any special markers, like height or other extra information states.", "source": "original", "new_id": 798}
{"id": 142, "function": "ST_HasZ", "question": "看看那个从(0 0)到(1 1)的线，是不是有第三个数字在里面呢？", "sql": "SELECT ST_HasZ(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line going from (0 0) to (1 1) has a third number in it?", "source": "original", "new_id": 809}
{"id": 141, "function": "ST_HasZ", "question": "看看那个三维坐标点，1 2 3，是不是有第三个数字在里面？", "sql": "SELECT ST_HasZ(ST_GeomFromText('POINT(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that 3D coordinate point, 1 2 3, has a third number in it?", "source": "original", "new_id": 802}
{"id": 141, "function": "ST_HasZ", "question": "看看那个坐标是(1,2,3)的小点有没有第三个数字。", "sql": "SELECT ST_HasZ(ST_GeomFromText('POINT(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that little point with coordinates (1,2,3) has a third number.", "source": "original", "new_id": 803}
{"id": 142, "function": "ST_HasZ", "question": "看看那个写成LINESTRING(0 0, 1 1)的线有没有藏着个Z方向的秘密。", "sql": "SELECT ST_HasZ('LINESTRING(0 0, 1 1)');", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if the line written as LINESTRING(0 0, 1 1) has a hidden secret in the Z direction.", "source": "original", "new_id": 810}
{"id": 142, "function": "ST_HasZ", "question": "看看由那些点连成的线，(0 0)到(1 1)，有没有第三个维度的秘密。", "sql": "SELECT ST_HasZ(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line drawn from point (0 0) to (1 1) has a hidden third dimension.", "source": "original", "new_id": 808}
{"id": 141, "function": "ST_HasZ", "question": "判断一下那个点(1 2 3)有没有第三个数字的东西，结果要用对或错来表示。", "sql": "SELECT ST_HasZ(ST_GeomFromText('POINT(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that point (1 2 3) has a third number thing, and show the result as true or false.", "source": "original", "new_id": 805}
{"id": 142, "function": "ST_HasZ", "question": "看看从0 0到1 1的线条里有没有藏着个Z，给个是或不是的答案就好。", "sql": "SELECT ST_HasZ(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there's a hidden Z in the line going from 0 0 to 1 1, and just give a yes or no answer.", "source": "original", "new_id": 813}
{"id": 142, "function": "ST_HasZ", "question": "你觉得那条从(0 0)到(1 1)的小线有没有藏着Z轴的秘密呢？", "sql": "SELECT ST_HasZ(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Do you think that little line from (0 0) to (1 1) has a hidden Z-axis secret?", "source": "original", "new_id": 811}
{"id": 143, "function": "ST_HasM", "question": "看看从(0 0)到(1 1)连接起来的线，它是否有特别的东西叫M值？", "sql": "SELECT ST_HasM(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line connecting (0 0) to (1 1) has something special called M values?", "source": "original", "new_id": 814}
{"id": 142, "function": "ST_HasZ", "question": "判断一下那些点组成的线LINESTRING(0 0, 1 1)是不是有第三维度的信息？", "sql": "SELECT ST_HasZ(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line made from those points LINESTRING(0 0, 1 1) has information about a third dimension?", "source": "original", "new_id": 812}
{"id": 143, "function": "ST_HasM", "question": "看看那条从(0 0)到(1 1)的小线，是否有特别的M数值？是或不是？", "sql": "SELECT ST_HasM(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that little line from (0 0) to (1 1) has any special M values, yes or no?", "source": "original", "new_id": 815}
{"id": 141, "function": "ST_HasZ", "question": "看看用'POINT(1 2 3)'这个字符串变出来的那个点，是不是一个有三层的点？", "sql": "SELECT ST_HasZ(ST_GeomFromText('POINT(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the point created from the string 'POINT(1 2 3)' is a point with three layers?", "source": "original", "new_id": 804}
{"id": 141, "function": "ST_HasZ", "question": "看看那个三维小点(1 2 3)有没有第三个数字，结果要像对错题一样简单。", "sql": "SELECT ST_HasZ(ST_GeomFromText('POINT(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that little 3D dot (1 2 3) has a third number, and the result should be as simple as true or false.", "source": "original", "new_id": 807}
{"id": 141, "function": "ST_HasZ", "question": "判断一下这个三维点对象POINT(1 2 3)是不是带有高程信息，结果是true或者false。", "sql": "SELECT ST_HasZ(ST_GeomFromText('POINT(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if this 3D point POINT(1 2 3) has elevation information, with the result being true or false.", "source": "original", "new_id": 806}
{"id": 140, "function": "ST_Zmflag", "question": "对于那些小点连接成的线段，像是1 2到3 4这样的，想知道它的维度中有个叫ZM的小标志，那个数字是多少呢？记得用特别的格式来表示这个线段哦。", "sql": "SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRING(1 2, 3 4)'));", "execution_result": [[0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those little dots connected into a line, like from 1 2 to 3 4, I want to know what the number is for a small marker called ZM in its dimensions. Remember to use a special format to represent this line.", "source": "original", "new_id": 801}
{"id": 143, "function": "ST_HasM", "question": "看看那条从(0 0)到(1 1)的线有没有带着额外的M信息，能给个是或不是的答案吗？", "sql": "SELECT ST_HasM(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line from (0 0) to (1 1) carries extra M information, can you give a yes or no answer?", "source": "original", "new_id": 816}
{"id": 143, "function": "ST_HasM", "question": "看看从(0 0)到(1 1)的那条线有没有藏着M值，给个对或者错的答案。", "sql": "SELECT ST_HasM(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that line from (0 0) to (1 1) has any hidden M values, and give a true or false answer.", "source": "original", "new_id": 817}
{"id": 144, "function": "ST_HasM", "question": "看看那个点1 2 3是否有第三个值藏在里面。", "sql": "SELECT ST_HasM(ST_GeomFromText('POINTM(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the point 1 2 3 has a third value hidden inside.", "source": "original", "new_id": 820}
{"id": 144, "function": "ST_HasM", "question": "看看那个点，像是1 2 3这样的，里面有没有带一个M的东西。", "sql": "SELECT ST_HasM(ST_GeomFromText('POINTM(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that point, like 1 2 3, has something with an M in it.", "source": "original", "new_id": 821}
{"id": 144, "function": "ST_HasM", "question": "看看那个包含1 2 3的点里有没有M的秘密，给我一个是或否的答案。", "sql": "SELECT ST_HasM(ST_GeomFromText('POINTM(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there's an M secret in the point with 1 2 3, and give me a yes or no answer.", "source": "original", "new_id": 823}
{"id": 144, "function": "ST_HasM", "question": "看看这个有三个数字的小点里有没有M的数值存在。", "sql": "SELECT ST_HasM(ST_GeomFromText('POINTM(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there's an M value present in this little dot with three numbers.", "source": "original", "new_id": 824}
{"id": 143, "function": "ST_HasM", "question": "看看那条从(0 0)到(1 1)的线有没有特别的M标记，会是对还是错呢？", "sql": "SELECT ST_HasM(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that line from (0 0) to (1 1) has any special M markers, will it be true or false?", "source": "original", "new_id": 818}
{"id": 144, "function": "ST_HasM", "question": "看看那些坐标1 2 3的小点里有没有那个神秘的M值，结果是对还是错呢？", "sql": "SELECT ST_HasM(ST_GeomFromText('POINTM(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if those coordinates 1 2 3 in the little point have that mysterious M value, is the result true or false?", "source": "original", "new_id": 825}
{"id": 145, "function": "ST_AddPoint", "question": "把那个三维的线条LINESTRING(0 0 1, 1 1 1)最后再接上一个三维的小点POINT(1 2 3)，然后用某种格式写出来。", "sql": "SELECT ST_AsEWKT(ST_AddPoint('LINESTRING(0 0 1, 1 1 1)', ST_MakePoint(1, 2, 3)));", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 3D line LINESTRING(0 0 1, 1 1 1), attach a 3D little point POINT(1 2 3) to its end, and write it out in some format.", "source": "original", "new_id": 828}
{"id": 143, "function": "ST_HasM", "question": "看看从(0 0)到(1 1)的那条线有没有藏着点什么特别的数值，结果是对还是错。", "sql": "SELECT ST_HasM(ST_GeomFromText('LINESTRING(0 0, 1 1)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line from (0 0) to (1 1) has any special hidden numbers, and see if it's true or false.", "source": "original", "new_id": 819}
{"id": 146, "function": "ST_CollectionExtract", "question": "从包含许多形状的集合里，找出那些走直线的路径，比如从(0, 0)到(1, 1)和从(2, 2)到(3, 3)，看看它们的样子是什么。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))', 2 ));", "execution_result": [["MULTILINESTRING((0 0,1 1),(2 2,3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a collection full of various shapes, find the straight line paths, like from (0, 0) to (1, 1) and from (2, 2) to (3, 3), and see what they look like.", "source": "original", "new_id": 832}
{"id": 145, "function": "ST_AddPoint", "question": "在由(0,0,1)和(1,1,1)两个位置标记组成的空间线末尾加上一个新标记(1,2,3)，然后看看它们的整体格式是什么。", "sql": "SELECT ST_AsEWKT(ST_AddPoint('LINESTRING(0 0 1, 1 1 1)', ST_MakePoint(1, 2, 3)));", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Add a new marker at (1,2,3) to the end of the spatial line made by the markers at (0,0,1) and (1,1,1), and then see what the whole format looks like.", "source": "original", "new_id": 827}
{"id": 144, "function": "ST_HasM", "question": "看看那点儿在1、2的位置，顺便瞧瞧是不是有个3的秘密数字藏在它里面。", "sql": "SELECT ST_HasM(ST_GeomFromText('POINTM(1 2 3)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little point at 1, 2 has a hidden secret number 3 inside it.", "source": "original", "new_id": 822}
{"id": 145, "function": "ST_AddPoint", "question": "把那个三维的小线段(0 0 1, 1 1 1)，想象一下末尾再接上一个小三维点(1, 2, 3)，结果是什么样子的呢？", "sql": "SELECT ST_AsEWKT(ST_AddPoint('LINESTRING(0 0 1, 1 1 1)', ST_MakePoint(1, 2, 3)));", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine that little 3D line segment (0 0 1, 1 1 1), and what would it look like if you added a small 3D point (1, 2, 3) to its end?", "source": "original", "new_id": 829}
{"id": 145, "function": "ST_AddPoint", "question": "想象一条从(0, 0, 1)到(1, 1, 1)的线，如果在它的尾巴上加上一个(1, 2, 3)的小点，会变成什么？用一种特别的描述方式来表达，包括一些身份信息。", "sql": "SELECT ST_AsEWKT(ST_AddPoint('LINESTRING(0 0 1, 1 1 1)', ST_MakePoint(1, 2, 3)));", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a line stretching from (0, 0, 1) to (1, 1, 1). What would it look like if you added a little dot at (1, 2, 3) to its end? Describe it in a special way, including some identity info.", "source": "original", "new_id": 830}
{"id": 145, "function": "ST_AddPoint", "question": "把那个三维线串LINESTRING(0 0 1, 1 1 1)的尾巴上加上一个由1, 2, 3构成的小点，然后看看它变成了什么样子，在某种特殊格式下。", "sql": "SELECT ST_AsEWKT(ST_AddPoint('LINESTRING(0 0 1, 1 1 1)', ST_MakePoint(1, 2, 3)));", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Add a little point made from 1, 2, 3 to the tail of the 3D linestring LINESTRING(0 0 1, 1 1 1), and see how it looks in some special format.", "source": "original", "new_id": 826}
{"id": 147, "function": "ST_CollectionExtract", "question": "从一个包含小点的集合里拿出那些点，然后用文字描述它们。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))', 1 ));", "execution_result": [["MULTIPOINT((0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take out the points from a collection that includes small dots, and describe them in words.", "source": "original", "new_id": 842}
{"id": 147, "function": "ST_CollectionExtract", "question": "从那些包含的小集合里找出在位置(0 0)的小点，然后把它变成一种文字描述。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))', 1 ));", "execution_result": [["MULTIPOINT((0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the little dot at location (0 0) within those nested collections and turn it into a kind of text description.", "source": "original", "new_id": 839}
{"id": 145, "function": "ST_AddPoint", "question": "在那些坐标线段的结尾，悄悄加个三维点1 2 3，看看会变成什么样的格式字符串。", "sql": "SELECT ST_AsEWKT(ST_AddPoint('LINESTRING(0 0 1, 1 1 1)', ST_MakePoint(1, 2, 3)));", "execution_result": [["LINESTRING(0 0 1,1 1 1,1 2 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "At the end of those coordinate lines, quietly add a 3D point 1 2 3 and see what kind of format string it turns into.", "source": "original", "new_id": 831}
{"id": 146, "function": "ST_CollectionExtract", "question": "从复杂的几何组合中找出那些像'0 0到1 1'和'2 2到3 3'这样的小线条，给我它们的文字表达方式。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))', 2 ));", "execution_result": [["MULTILINESTRING((0 0,1 1),(2 2,3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From the complex geometry set, find those little lines like '0 0 to 1 1' and '2 2 to 3 3', and give me their text descriptions.", "source": "original", "new_id": 835}
{"id": 147, "function": "ST_CollectionExtract", "question": "从那些包含在GEOMETRYCOLLECTION里的小点中找出特定类型的，然后把它们变成一种特别的字符串格式。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))', 1 ));", "execution_result": [["MULTIPOINT((0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From those little dots inside the GEOMETRYCOLLECTION, find the specific type and turn them into a special string format.", "source": "original", "new_id": 838}
{"id": 147, "function": "ST_CollectionExtract", "question": "从包含在更大集合里的那些小点中，找出那些编号为1的小家伙，然后用一种常见的文字格式表达出来。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))', 1 ));", "execution_result": [["MULTIPOINT((0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find those little guys numbered as 1 from the small dots inside a larger collection, and express them in a common text format.", "source": "original", "new_id": 840}
{"id": 146, "function": "ST_CollectionExtract", "question": "从那些包含线段的小集合里，找出所有像LINESTRING(0 0, 1 1)和LINESTRING(2 2, 3 3)的线条，然后把它们变成一种能看懂的文字形式。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))', 2 ));", "execution_result": [["MULTILINESTRING((0 0,1 1),(2 2,3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From those little collections with line segments, find all lines like LINESTRING(0 0, 1 1) and LINESTRING(2 2, 3 3), then turn them into a readable text form.", "source": "original", "new_id": 834}
{"id": 146, "function": "ST_CollectionExtract", "question": "从那些嵌套的几何物体里找出直线的部分，像是从(0 0到1 1)和(2 2到3 3)之间的那些线，然后用一种文本方式表达出来。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))', 2 ));", "execution_result": [["MULTILINESTRING((0 0,1 1),(2 2,3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From those nested geometric things, find the straight line parts, like the lines between (0 0 to 1 1) and (2 2 to 3 3), then express them in a text format.", "source": "original", "new_id": 836}
{"id": 147, "function": "ST_CollectionExtract", "question": "从一堆包裹着的坐标中找出那些小点，然后把它们变成一种文字描述，能看到0 0这样的数字。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))', 1 ));", "execution_result": [["MULTIPOINT((0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a bundle of wrapped coordinates, pick out those little dots and turn them into a kind of text description where you can see numbers like 0 0.", "source": "original", "new_id": 843}
{"id": 149, "function": "ST_CollectionHomogenize", "question": "把那些由两个形状组成的集合变成最简单的样子，看看它们的文本形式是什么，数字是10 50, 50 50, 50 10, 10 10, 10 50和90 50, 90 10, 50 10, 50 50, 90 50。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))'));", "execution_result": [["MULTIPOLYGON(((10 50,50 50,50 10,10 10,10 50)),((90 50,90 10,50 10,50 50,90 50)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the collection made of two shapes into its simplest form and check out what its text looks like, with numbers like 10 50, 50 50, 50 10, 10 10, 10 50 and 90 50, 90 10, 50 10, 50 50, 90 50.", "source": "original", "new_id": 845}
{"id": 146, "function": "ST_CollectionExtract", "question": "从那个复杂的几何集合里挑出所有像线一样的东西，特别是那些包含点(0 0, 1 1)和(2 2, 3 3)的，然后把它们变成某种文本格式。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))', 2 ));", "execution_result": [["MULTILINESTRING((0 0,1 1),(2 2,3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From that complex geometry collection, pick out all the things that are like lines, especially those containing points (0 0, 1 1) and (2 2, 3 3), and then turn them into some text format.", "source": "original", "new_id": 837}
{"id": 146, "function": "ST_CollectionExtract", "question": "从一堆几何图形里找出那些线条，像0 0到1 1，还有2 2到3 3的那种，然后用文字格式输出。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))', 2 ));", "execution_result": [["MULTILINESTRING((0 0,1 1),(2 2,3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a bunch of geometric shapes, find those lines, like the ones from 0 0 to 1 1, and 2 2 to 3 3, then output them in text format.", "source": "original", "new_id": 833}
{"id": 149, "function": "ST_CollectionHomogenize", "question": "把两个形状像图形集合里的多边形调整得一致，然后用WKT格式看看它们的样子，坐标是(10 50, 50 50, 50 10, 10 10, 10 50)和(90 50, 90 10, 50 10, 50 50, 90 50)。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))'));", "execution_result": [["MULTIPOLYGON(((10 50,50 50,50 10,10 10,10 50)),((90 50,90 10,50 10,50 50,90 50)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make the two shapes in the geometry collection more alike, then check their appearance in WKT format, with coordinates (10 50, 50 50, 50 10, 10 10, 10 50) and (90 50, 90 10, 50 10, 50 50, 90 50).", "source": "original", "new_id": 846}
{"id": 147, "function": "ST_CollectionExtract", "question": "从一个充满小圆点的几何袋子里找出那些点，然后用某种方式把它们表达出来，别忘了0 0这个地方哦。", "sql": "SELECT ST_AsText(ST_CollectionExtract( 'GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))', 1 ));", "execution_result": [["MULTIPOINT((0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a bag full of tiny dots, find those points and express them in some way, don't forget the 0 0 spot.", "source": "original", "new_id": 841}
{"id": 149, "function": "ST_CollectionHomogenize", "question": "请把这两个挨着的形状里的点按照一种简单的方式合并，然后用一种文本格式来展示它们。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))'));", "execution_result": [["MULTIPOLYGON(((10 50,50 50,50 10,10 10,10 50)),((90 50,90 10,50 10,50 50,90 50)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please merge the points in these two adjacent shapes in a simple way and display them in a text format.", "source": "original", "new_id": 848}
{"id": 149, "function": "ST_CollectionHomogenize", "question": "把那个包含两个形状的集合整理成最简单的样子，这两个形状是POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50))和POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50))，然后给出它的WKT文字形式。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))'));", "execution_result": [["MULTIPOLYGON(((10 50,50 50,50 10,10 10,10 50)),((90 50,90 10,50 10,50 50,90 50)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that collection with two shapes and tidy it up into the simplest form. The shapes are POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)) and POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)), then give its WKT text representation.", "source": "original", "new_id": 844}
{"id": 149, "function": "ST_CollectionHomogenize", "question": "输出两个多边形的一种统一格式，类似于把这些坐标变成一种标准的形状，看看它们的文本表现形式是什么。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))'));", "execution_result": [["MULTIPOLYGON(((10 50,50 50,50 10,10 10,10 50)),((90 50,90 10,50 10,50 50,90 50)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a unified format for the two polygons, like turning these coordinates into a standard shape, and see what their text representation looks like.", "source": "original", "new_id": 849}
{"id": 150, "function": "ST_CollectionHomogenize", "question": "把那些在零点位置的小点集合变成统一的样子，然后给我它的文字形式。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those little dots at the zero point into a uniform shape, and then give me its text form.", "source": "original", "new_id": 852}
{"id": 150, "function": "ST_CollectionHomogenize", "question": "把那个包含点(0 0)的集合弄得统一一点，最后给我它的WKT字符串是什么样子？", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make that collection with the point (0 0) more uniform, and tell me what its WKT string looks like in the end?", "source": "original", "new_id": 853}
{"id": 150, "function": "ST_CollectionHomogenize", "question": "把包含小点(0 0)的集合变成一种更简单的形式，用文字表达出来。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform the collection containing the tiny dot at (0 0) into a simpler form and express it in words.", "source": "original", "new_id": 854}
{"id": 150, "function": "ST_CollectionHomogenize", "question": "如果有个包含小点的集合GEOMETRYCOLLECTION(POINT(0 0))，简化一下，然后用一种特别的字符串方式表示出来。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If there's a collection with a little point, GEOMETRYCOLLECTION(POINT(0 0)), simplify it and then show it in a special string format.", "source": "original", "new_id": 850}
{"id": 151, "function": "ST_CollectionHomogenize", "question": "给出那个集合，里面只有一个点(0 0)，然后变得更简单的样子是啥？", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(MULTIPOINT((0 0)))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What's the simpler form of that collection which just has a single point (0 0)?", "source": "original", "new_id": 857}
{"id": 151, "function": "ST_CollectionHomogenize", "question": "把那些坐标集合变成一个简单的形状，然后给我看它的样子。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(MULTIPOINT((0 0)))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinates into a simple shape, and show me what it looks like.", "source": "original", "new_id": 858}
{"id": 150, "function": "ST_CollectionHomogenize", "question": "把那个只有一个小点的几何集合，变成一种单一类型的集合后，用那种文本格式告诉我。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After turning that geometry collection with just one little dot into a single-type collection, let me know in that text format.", "source": "original", "new_id": 855}
{"id": 151, "function": "ST_CollectionHomogenize", "question": "把那种包含多个小点的集合，像是(0 0)这样的，变成最简单的样子，然后给我看看它的形状是什么样子。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(MULTIPOINT((0 0)))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform that collection with many little dots, like (0 0), into its simplest form, and show me what the shape looks like.", "source": "original", "new_id": 856}
{"id": 150, "function": "ST_CollectionHomogenize", "question": "把包含了(0 0)的小点的集合变成一种统一的形态，然后用最简单的方式描述它。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the collection with the little dot at (0 0), turn it into a uniform shape, and describe it in the simplest way.", "source": "original", "new_id": 851}
{"id": 151, "function": "ST_CollectionHomogenize", "question": "把那个包含点(0 0)的小集合变成一种统一的形状，然后告诉我它的样子。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(MULTIPOINT((0 0)))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform that small collection containing the point (0 0) into a unified shape, and then let me know what it looks like.", "source": "original", "new_id": 859}
{"id": 151, "function": "ST_CollectionHomogenize", "question": "给我看看那些坐标点变成统一的形状后是什么样子的文字描述。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(MULTIPOINT((0 0)))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the text description of what those coordinate points look like after being transformed into a uniform shape.", "source": "original", "new_id": 860}
{"id": 151, "function": "ST_CollectionHomogenize", "question": "把那些小点组合在一起，看看能得到什么样的统一形状，用文字形式描述一下。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(MULTIPOINT((0 0)))'));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine those little points together and see what kind of uniform shape you get, and describe it in text form.", "source": "original", "new_id": 861}
{"id": 152, "function": "ST_CollectionHomogenize", "question": "把两个小点的集合，像是0 0和1 1这两个，变成最简单的样子，结果要是那个特殊的文本格式。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))'));", "execution_result": [["MULTIPOINT((0 0),(1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the collection of two little dots, like 0 0 and 1 1, and turn it into the simplest form, with the result in that special text format.", "source": "original", "new_id": 862}
{"id": 152, "function": "ST_CollectionHomogenize", "question": "看看由那些小点组成的集合，变成最简单的样子是什么样的字符串呢？", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))'));", "execution_result": [["MULTIPOINT((0 0),(1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What does the string look like when you take that bunch of little dots and turn it into its simplest form?", "source": "original", "new_id": 863}
{"id": 152, "function": "ST_CollectionHomogenize", "question": "把那些包含着点(0 0)和(1 1)的集合变成一个简单的形状，然后用一种文本格式来展示。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))'));", "execution_result": [["MULTIPOINT((0 0),(1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the collection holding the little dots at (0 0) and (1 1) into a simpler shape, then show it in a text format.", "source": "original", "new_id": 864}
{"id": 152, "function": "ST_CollectionHomogenize", "question": "把那两个点，像(0 0)和(1 1)这样的，简化成最简单的形式，用文字说出来。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))'));", "execution_result": [["MULTIPOINT((0 0),(1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those two points, like (0 0) and (1 1), and simplify them into the simplest form, saying it in words.", "source": "original", "new_id": 866}
{"id": 152, "function": "ST_CollectionHomogenize", "question": "找出包含两个点(0 0)和(1 1)的那些东西，把它变成一个简单的形状，结果要用文字方式写出来。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))'));", "execution_result": [["MULTIPOINT((0 0),(1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find something that includes the two points (0 0) and (1 1), turn it into a simpler shape, and write the result in text form.", "source": "original", "new_id": 865}
{"id": 152, "function": "ST_CollectionHomogenize", "question": "对于那个包含小点(0 0)和(1 1)的几何组合，能告诉我如果变成一个最简形状会是什么样子吗？用那种描述形状的字符串方式。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))'));", "execution_result": [["MULTIPOINT((0 0),(1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that geometry mix with little dots at (0 0) and (1 1), can you tell me what it would look like if it turned into a simplest shape? In that string way that describes shapes.", "source": "original", "new_id": 867}
{"id": 154, "function": "ST_CurveToLine", "question": "把经过那些点(220268,150415)、(220227,150505)、(220227,150406)的弯曲路径弄成一条直线，然后看看它的文字版本是什么样子。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)')));", "execution_result": [["LINESTRING(220268 150415,220269.95064912012 150416.53936422797,220271.82341557532 150418.17258804003,220273.61378770717 150419.89573685703,220275.31745235244 150421.70465946247,220276.93030523375 150423.59499800342,220278.4484608472 150425.5621984887,220279.868261823 150427.60152176008,220281.18628773623 150429.70805490916,220282.39936334698 150431.87672311306,220283.50456624987 150434.10230186017,220284.49923391434 150436.37942953626,220285.38097009883 150438.7026203414,220286.14765062364 150441.06627750542,220286.7974284882 150443.46470677113,220287.3287383208 150445.89213011245,220287.74030014945 150448.34269965385,220288.0311224857 150450.8105117587,220288.20050471305 150453.28962125146,220288.24803877485 150455.77405574024,220288.17361015742 150458.25783000473,220287.9773981658 150460.7349604152,220287.6598754919 150463.19947934747,220287.22180707558 150465.6454495596,220286.6642482621 150468.06697849513,220285.9885422594 150470.45823247873,220285.19631690253 150472.81345077007,220284.28948073168 150475.12695944207,220283.27021839464 150477.39318504962,220282.14098538368 150479.60666805677,220280.90450211999 150481.7620759891,220279.56374740007 150483.85421628007,220278.1219512195 150485.8780487805,220276.58258699154 150487.8286979006,220274.94936317948 150489.7014643558,220273.22621436248 150491.49183648766,220271.41729175704 150493.19550113293,220269.5269532161 150494.80835401424,220267.5597527308 150496.3265096277,220265.52042945943 150497.74631060348,220263.41389631035 150499.06433651672,220261.24522810645 150500.27741212747,220259.01964935934 150501.38261503036,220256.74252168325 150502.37728269483,220254.4193308781 150503.25901887933,220252.0556737141 150504.02569940413,220249.65724444838 150504.6754772687,220247.22982110706 150505.20678710128,220244.77925156566 150505.61834892994,220242.3114394608 150505.9091712662,220239.83232996805 150506.07855349354,220237.34789547927 150506.12608755534,220234.86412121478 150506.0516589379,220232.3869908043 150505.85544694628,220229.92247187204 150505.5379242724,220227.4765016599 150505.09985585607,220225.05497272438 150504.5422970426,220222.66371874078 150503.8665910399,220220.30850044944 150503.07436568302,220217.99499177744 150502.16752951217,220215.7287661699 150501.14826717513,220213.51528316273 150500.01903416417,220211.3598752304 150498.78255090048,220209.26773493944 150497.44179618056,220207.24390243902 150496,220205.2932533189 150494.46063577203,220203.4204868637 150492.82741195997,220201.63011473184 150491.10426314297,220199.92645008658 150489.29534053753,220198.31359720527 150487.40500199658,220196.79544159182 150485.4378015113,220195.37564061602 150483.39847823992,220194.0576147028 150481.29194509084,220192.84453909204 150479.12327688694,220191.73933618914 150476.89769813983,220190.74466852468 150474.62057046374,220189.86293234018 150472.2973796586,220189.09625181538 150469.93372249458,220188.4464739508 150467.53529322887,220187.91516411823 150465.10786988755,220187.50360228957 150462.65730034615,220187.21277995332 150460.1894882413,220187.04339772597 150457.71037874854,220186.99586366417 150455.22594425976,220187.0702922816 150452.74216999527,220187.26650427323 150450.2650395848,220187.58402694712 150447.80052065253,220188.02209536344 150445.3545504404,220188.57965417692 150442.93302150487,220189.2553601796 150440.54176752127,220190.0475855365 150438.18654922993,220190.95442170734 150435.87304055793,220191.97368404438 150433.60681495038,220193.10291705534 150431.39333194323,220194.33940031903 150429.2379240109,220195.68015503895 150427.14578371993,220197.1219512195 150425.1219512195,220198.66131544748 150423.1713020994,220200.29453925954 150421.2985356442,220202.01768807654 150419.50816351234,220203.82661068198 150417.80449886707,220205.71694922293 150416.19164598576,220207.68414970822 150414.6734903723,220209.7234729796 150413.25368939652,220211.83000612867 150411.93566348328,220213.99867433257 150410.72258787253,220216.22425307968 150409.61738496964,220218.50138075577 150408.62271730517,220220.82457156092 150407.74098112067,220223.18822872493 150406.97430059587,220225.58665799064 150406.3245227313,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the curvy path that goes through those points (220268,150415), (220227,150505), (220227,150406) and turn it into a straight line, then see what its text version looks like.", "source": "original", "new_id": 871}
{"id": 153, "function": "ST_CollectionHomogenize", "question": "给我看看那些点和线段的最简单样子，像是把点(0 0)和线段(1 1到2 2)放在一个盒子里，然后告诉我它们的模样。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0), GEOMETRYCOLLECTION(LINESTRING(1 1, 2 2)))'));", "execution_result": [["GEOMETRYCOLLECTION(POINT(0 0),LINESTRING(1 1,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the simplest form of those dots and lines, like putting the point (0 0) and the line from (1 1 to 2 2) in a box, then tell me what they look like.", "source": "original", "new_id": 869}
{"id": 154, "function": "ST_CurveToLine", "question": "把那些像圆弧的点串，比如220268 150415, 220227 150505, 220227 150406，变成直线的样子，然后给我它们的文本形式。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)')));", "execution_result": [["LINESTRING(220268 150415,220269.95064912012 150416.53936422797,220271.82341557532 150418.17258804003,220273.61378770717 150419.89573685703,220275.31745235244 150421.70465946247,220276.93030523375 150423.59499800342,220278.4484608472 150425.5621984887,220279.868261823 150427.60152176008,220281.18628773623 150429.70805490916,220282.39936334698 150431.87672311306,220283.50456624987 150434.10230186017,220284.49923391434 150436.37942953626,220285.38097009883 150438.7026203414,220286.14765062364 150441.06627750542,220286.7974284882 150443.46470677113,220287.3287383208 150445.89213011245,220287.74030014945 150448.34269965385,220288.0311224857 150450.8105117587,220288.20050471305 150453.28962125146,220288.24803877485 150455.77405574024,220288.17361015742 150458.25783000473,220287.9773981658 150460.7349604152,220287.6598754919 150463.19947934747,220287.22180707558 150465.6454495596,220286.6642482621 150468.06697849513,220285.9885422594 150470.45823247873,220285.19631690253 150472.81345077007,220284.28948073168 150475.12695944207,220283.27021839464 150477.39318504962,220282.14098538368 150479.60666805677,220280.90450211999 150481.7620759891,220279.56374740007 150483.85421628007,220278.1219512195 150485.8780487805,220276.58258699154 150487.8286979006,220274.94936317948 150489.7014643558,220273.22621436248 150491.49183648766,220271.41729175704 150493.19550113293,220269.5269532161 150494.80835401424,220267.5597527308 150496.3265096277,220265.52042945943 150497.74631060348,220263.41389631035 150499.06433651672,220261.24522810645 150500.27741212747,220259.01964935934 150501.38261503036,220256.74252168325 150502.37728269483,220254.4193308781 150503.25901887933,220252.0556737141 150504.02569940413,220249.65724444838 150504.6754772687,220247.22982110706 150505.20678710128,220244.77925156566 150505.61834892994,220242.3114394608 150505.9091712662,220239.83232996805 150506.07855349354,220237.34789547927 150506.12608755534,220234.86412121478 150506.0516589379,220232.3869908043 150505.85544694628,220229.92247187204 150505.5379242724,220227.4765016599 150505.09985585607,220225.05497272438 150504.5422970426,220222.66371874078 150503.8665910399,220220.30850044944 150503.07436568302,220217.99499177744 150502.16752951217,220215.7287661699 150501.14826717513,220213.51528316273 150500.01903416417,220211.3598752304 150498.78255090048,220209.26773493944 150497.44179618056,220207.24390243902 150496,220205.2932533189 150494.46063577203,220203.4204868637 150492.82741195997,220201.63011473184 150491.10426314297,220199.92645008658 150489.29534053753,220198.31359720527 150487.40500199658,220196.79544159182 150485.4378015113,220195.37564061602 150483.39847823992,220194.0576147028 150481.29194509084,220192.84453909204 150479.12327688694,220191.73933618914 150476.89769813983,220190.74466852468 150474.62057046374,220189.86293234018 150472.2973796586,220189.09625181538 150469.93372249458,220188.4464739508 150467.53529322887,220187.91516411823 150465.10786988755,220187.50360228957 150462.65730034615,220187.21277995332 150460.1894882413,220187.04339772597 150457.71037874854,220186.99586366417 150455.22594425976,220187.0702922816 150452.74216999527,220187.26650427323 150450.2650395848,220187.58402694712 150447.80052065253,220188.02209536344 150445.3545504404,220188.57965417692 150442.93302150487,220189.2553601796 150440.54176752127,220190.0475855365 150438.18654922993,220190.95442170734 150435.87304055793,220191.97368404438 150433.60681495038,220193.10291705534 150431.39333194323,220194.33940031903 150429.2379240109,220195.68015503895 150427.14578371993,220197.1219512195 150425.1219512195,220198.66131544748 150423.1713020994,220200.29453925954 150421.2985356442,220202.01768807654 150419.50816351234,220203.82661068198 150417.80449886707,220205.71694922293 150416.19164598576,220207.68414970822 150414.6734903723,220209.7234729796 150413.25368939652,220211.83000612867 150411.93566348328,220213.99867433257 150410.72258787253,220216.22425307968 150409.61738496964,220218.50138075577 150408.62271730517,220220.82457156092 150407.74098112067,220223.18822872493 150406.97430059587,220225.58665799064 150406.3245227313,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those arc-like point strings, like 220268 150415, 220227 150505, 220227 150406, and turn them into something straight, then give me their text form.", "source": "original", "new_id": 870}
{"id": 154, "function": "ST_CurveToLine", "question": "把那些点(220268 150415, 220227 150505, 220227 150406)变成一条直线，然后用某种文字形式表达出来。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)')));", "execution_result": [["LINESTRING(220268 150415,220269.95064912012 150416.53936422797,220271.82341557532 150418.17258804003,220273.61378770717 150419.89573685703,220275.31745235244 150421.70465946247,220276.93030523375 150423.59499800342,220278.4484608472 150425.5621984887,220279.868261823 150427.60152176008,220281.18628773623 150429.70805490916,220282.39936334698 150431.87672311306,220283.50456624987 150434.10230186017,220284.49923391434 150436.37942953626,220285.38097009883 150438.7026203414,220286.14765062364 150441.06627750542,220286.7974284882 150443.46470677113,220287.3287383208 150445.89213011245,220287.74030014945 150448.34269965385,220288.0311224857 150450.8105117587,220288.20050471305 150453.28962125146,220288.24803877485 150455.77405574024,220288.17361015742 150458.25783000473,220287.9773981658 150460.7349604152,220287.6598754919 150463.19947934747,220287.22180707558 150465.6454495596,220286.6642482621 150468.06697849513,220285.9885422594 150470.45823247873,220285.19631690253 150472.81345077007,220284.28948073168 150475.12695944207,220283.27021839464 150477.39318504962,220282.14098538368 150479.60666805677,220280.90450211999 150481.7620759891,220279.56374740007 150483.85421628007,220278.1219512195 150485.8780487805,220276.58258699154 150487.8286979006,220274.94936317948 150489.7014643558,220273.22621436248 150491.49183648766,220271.41729175704 150493.19550113293,220269.5269532161 150494.80835401424,220267.5597527308 150496.3265096277,220265.52042945943 150497.74631060348,220263.41389631035 150499.06433651672,220261.24522810645 150500.27741212747,220259.01964935934 150501.38261503036,220256.74252168325 150502.37728269483,220254.4193308781 150503.25901887933,220252.0556737141 150504.02569940413,220249.65724444838 150504.6754772687,220247.22982110706 150505.20678710128,220244.77925156566 150505.61834892994,220242.3114394608 150505.9091712662,220239.83232996805 150506.07855349354,220237.34789547927 150506.12608755534,220234.86412121478 150506.0516589379,220232.3869908043 150505.85544694628,220229.92247187204 150505.5379242724,220227.4765016599 150505.09985585607,220225.05497272438 150504.5422970426,220222.66371874078 150503.8665910399,220220.30850044944 150503.07436568302,220217.99499177744 150502.16752951217,220215.7287661699 150501.14826717513,220213.51528316273 150500.01903416417,220211.3598752304 150498.78255090048,220209.26773493944 150497.44179618056,220207.24390243902 150496,220205.2932533189 150494.46063577203,220203.4204868637 150492.82741195997,220201.63011473184 150491.10426314297,220199.92645008658 150489.29534053753,220198.31359720527 150487.40500199658,220196.79544159182 150485.4378015113,220195.37564061602 150483.39847823992,220194.0576147028 150481.29194509084,220192.84453909204 150479.12327688694,220191.73933618914 150476.89769813983,220190.74466852468 150474.62057046374,220189.86293234018 150472.2973796586,220189.09625181538 150469.93372249458,220188.4464739508 150467.53529322887,220187.91516411823 150465.10786988755,220187.50360228957 150462.65730034615,220187.21277995332 150460.1894882413,220187.04339772597 150457.71037874854,220186.99586366417 150455.22594425976,220187.0702922816 150452.74216999527,220187.26650427323 150450.2650395848,220187.58402694712 150447.80052065253,220188.02209536344 150445.3545504404,220188.57965417692 150442.93302150487,220189.2553601796 150440.54176752127,220190.0475855365 150438.18654922993,220190.95442170734 150435.87304055793,220191.97368404438 150433.60681495038,220193.10291705534 150431.39333194323,220194.33940031903 150429.2379240109,220195.68015503895 150427.14578371993,220197.1219512195 150425.1219512195,220198.66131544748 150423.1713020994,220200.29453925954 150421.2985356442,220202.01768807654 150419.50816351234,220203.82661068198 150417.80449886707,220205.71694922293 150416.19164598576,220207.68414970822 150414.6734903723,220209.7234729796 150413.25368939652,220211.83000612867 150411.93566348328,220213.99867433257 150410.72258787253,220216.22425307968 150409.61738496964,220218.50138075577 150408.62271730517,220220.82457156092 150407.74098112067,220223.18822872493 150406.97430059587,220225.58665799064 150406.3245227313,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those points (220268 150415, 220227 150505, 220227 150406) into a straight line, then express it in some kind of textual form.", "source": "original", "new_id": 873}
{"id": 154, "function": "ST_CurveToLine", "question": "把那个圆弧，像一个弯曲的路径，从220268 150415到220227 150505再到220227 150406，弄成直线的样子，然后用那些特别的格式写出来。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)')));", "execution_result": [["LINESTRING(220268 150415,220269.95064912012 150416.53936422797,220271.82341557532 150418.17258804003,220273.61378770717 150419.89573685703,220275.31745235244 150421.70465946247,220276.93030523375 150423.59499800342,220278.4484608472 150425.5621984887,220279.868261823 150427.60152176008,220281.18628773623 150429.70805490916,220282.39936334698 150431.87672311306,220283.50456624987 150434.10230186017,220284.49923391434 150436.37942953626,220285.38097009883 150438.7026203414,220286.14765062364 150441.06627750542,220286.7974284882 150443.46470677113,220287.3287383208 150445.89213011245,220287.74030014945 150448.34269965385,220288.0311224857 150450.8105117587,220288.20050471305 150453.28962125146,220288.24803877485 150455.77405574024,220288.17361015742 150458.25783000473,220287.9773981658 150460.7349604152,220287.6598754919 150463.19947934747,220287.22180707558 150465.6454495596,220286.6642482621 150468.06697849513,220285.9885422594 150470.45823247873,220285.19631690253 150472.81345077007,220284.28948073168 150475.12695944207,220283.27021839464 150477.39318504962,220282.14098538368 150479.60666805677,220280.90450211999 150481.7620759891,220279.56374740007 150483.85421628007,220278.1219512195 150485.8780487805,220276.58258699154 150487.8286979006,220274.94936317948 150489.7014643558,220273.22621436248 150491.49183648766,220271.41729175704 150493.19550113293,220269.5269532161 150494.80835401424,220267.5597527308 150496.3265096277,220265.52042945943 150497.74631060348,220263.41389631035 150499.06433651672,220261.24522810645 150500.27741212747,220259.01964935934 150501.38261503036,220256.74252168325 150502.37728269483,220254.4193308781 150503.25901887933,220252.0556737141 150504.02569940413,220249.65724444838 150504.6754772687,220247.22982110706 150505.20678710128,220244.77925156566 150505.61834892994,220242.3114394608 150505.9091712662,220239.83232996805 150506.07855349354,220237.34789547927 150506.12608755534,220234.86412121478 150506.0516589379,220232.3869908043 150505.85544694628,220229.92247187204 150505.5379242724,220227.4765016599 150505.09985585607,220225.05497272438 150504.5422970426,220222.66371874078 150503.8665910399,220220.30850044944 150503.07436568302,220217.99499177744 150502.16752951217,220215.7287661699 150501.14826717513,220213.51528316273 150500.01903416417,220211.3598752304 150498.78255090048,220209.26773493944 150497.44179618056,220207.24390243902 150496,220205.2932533189 150494.46063577203,220203.4204868637 150492.82741195997,220201.63011473184 150491.10426314297,220199.92645008658 150489.29534053753,220198.31359720527 150487.40500199658,220196.79544159182 150485.4378015113,220195.37564061602 150483.39847823992,220194.0576147028 150481.29194509084,220192.84453909204 150479.12327688694,220191.73933618914 150476.89769813983,220190.74466852468 150474.62057046374,220189.86293234018 150472.2973796586,220189.09625181538 150469.93372249458,220188.4464739508 150467.53529322887,220187.91516411823 150465.10786988755,220187.50360228957 150462.65730034615,220187.21277995332 150460.1894882413,220187.04339772597 150457.71037874854,220186.99586366417 150455.22594425976,220187.0702922816 150452.74216999527,220187.26650427323 150450.2650395848,220187.58402694712 150447.80052065253,220188.02209536344 150445.3545504404,220188.57965417692 150442.93302150487,220189.2553601796 150440.54176752127,220190.0475855365 150438.18654922993,220190.95442170734 150435.87304055793,220191.97368404438 150433.60681495038,220193.10291705534 150431.39333194323,220194.33940031903 150429.2379240109,220195.68015503895 150427.14578371993,220197.1219512195 150425.1219512195,220198.66131544748 150423.1713020994,220200.29453925954 150421.2985356442,220202.01768807654 150419.50816351234,220203.82661068198 150417.80449886707,220205.71694922293 150416.19164598576,220207.68414970822 150414.6734903723,220209.7234729796 150413.25368939652,220211.83000612867 150411.93566348328,220213.99867433257 150410.72258787253,220216.22425307968 150409.61738496964,220218.50138075577 150408.62271730517,220220.82457156092 150407.74098112067,220223.18822872493 150406.97430059587,220225.58665799064 150406.3245227313,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that circular arc, like a curved path, from 220268 150415 to 220227 150505 and then to 220227 150406, turn it into something straight, and write it out in that special format.", "source": "original", "new_id": 872}
{"id": 153, "function": "ST_CollectionHomogenize", "question": "有一个点在(0, 0)的位置，还有一条线段从(1, 1)到(2, 2)，它们被放在一个集合里。看看能不能用文字形式描述它们最简单的组合。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0), GEOMETRYCOLLECTION(LINESTRING(1 1, 2 2)))'));", "execution_result": [["GEOMETRYCOLLECTION(POINT(0 0),LINESTRING(1 1,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a point at (0, 0) and a line segment from (1, 1) to (2, 2), placed in a collection. Try to describe their simplest combination in text form.", "source": "original", "new_id": 868}
{"id": 155, "function": "ST_CurveToLine", "question": "把那段绕圈的小曲线，像连接点一样用直线表示出来，使用扩展格式写下它，里面有220268 150415 1这些数字。", "sql": "SELECT ST_AsEWKT(ST_CurveToLine(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)')));", "execution_result": [["LINESTRING(220268 150415 1,220269.95064912012 150416.53936422797 1.018117285667296,220271.82341557532 150418.17258804003 1.036234571334591,220273.61378770717 150419.89573685703 1.054351857001887,220275.31745235244 150421.70465946247 1.072469142669182,220276.93030523375 150423.59499800342 1.090586428336478,220278.4484608472 150425.5621984887 1.108703714003773,220279.868261823 150427.60152176008 1.126820999671069,220281.18628773623 150429.70805490916 1.144938285338364,220282.39936334698 150431.87672311306 1.16305557100566,220283.50456624987 150434.10230186017 1.181172856672956,220284.49923391434 150436.37942953626 1.199290142340251,220285.38097009883 150438.7026203414 1.217407428007547,220286.14765062364 150441.06627750542 1.235524713674842,220286.7974284882 150443.46470677113 1.253641999342138,220287.3287383208 150445.89213011245 1.271759285009433,220287.74030014945 150448.34269965385 1.289876570676729,220288.0311224857 150450.8105117587 1.307993856344024,220288.20050471305 150453.28962125146 1.32611114201132,220288.24803877485 150455.77405574024 1.344228427678616,220288.17361015742 150458.25783000473 1.362345713345911,220287.9773981658 150460.7349604152 1.380462999013207,220287.6598754919 150463.19947934747 1.398580284680502,220287.22180707558 150465.6454495596 1.416697570347798,220286.6642482621 150468.06697849513 1.434814856015093,220285.9885422594 150470.45823247873 1.452932141682389,220285.19631690253 150472.81345077007 1.471049427349685,220284.28948073168 150475.12695944207 1.48916671301698,220283.27021839464 150477.39318504962 1.507283998684276,220282.14098538368 150479.60666805677 1.525401284351571,220280.90450211999 150481.7620759891 1.543518570018867,220279.56374740007 150483.85421628007 1.561635855686162,220278.1219512195 150485.8780487805 1.579753141353458,220276.58258699154 150487.8286979006 1.597870427020753,220274.94936317948 150489.7014643558 1.615987712688049,220273.22621436248 150491.49183648766 1.634104998355344,220271.41729175704 150493.19550113293 1.65222228402264,220269.5269532161 150494.80835401424 1.670339569689936,220267.5597527308 150496.3265096277 1.688456855357231,220265.52042945943 150497.74631060348 1.706574141024527,220263.41389631035 150499.06433651672 1.724691426691822,220261.24522810645 150500.27741212747 1.742808712359118,220259.01964935934 150501.38261503036 1.760925998026413,220256.74252168325 150502.37728269483 1.779043283693709,220254.4193308781 150503.25901887933 1.797160569361004,220252.0556737141 150504.02569940413 1.8152778550283,220249.65724444838 150504.6754772687 1.833395140695596,220247.22982110706 150505.20678710128 1.851512426362891,220244.77925156566 150505.61834892994 1.869629712030187,220242.3114394608 150505.9091712662 1.887746997697482,220239.83232996805 150506.07855349354 1.905864283364778,220237.34789547927 150506.12608755534 1.923981569032073,220234.86412121478 150506.0516589379 1.942098854699369,220232.3869908043 150505.85544694628 1.960216140366664,220229.92247187204 150505.5379242724 1.97833342603396,220227.4765016599 150505.09985585607 1.996450711701256,220225.05497272438 150504.5422970426 2.014517570141913,220222.66371874078 150503.8665910399 2.032572142695848,220220.30850044944 150503.07436568302 2.050626715249784,220217.99499177744 150502.16752951217 2.068681287803719,220215.7287661699 150501.14826717513 2.086735860357654,220213.51528316273 150500.01903416417 2.104790432911589,220211.3598752304 150498.78255090048 2.122845005465524,220209.26773493944 150497.44179618056 2.14089957801946,220207.24390243902 150496 2.158954150573395,220205.2932533189 150494.46063577203 2.17700872312733,220203.4204868637 150492.82741195997 2.195063295681265,220201.63011473184 150491.10426314297 2.2131178682352,220199.92645008658 150489.29534053753 2.231172440789135,220198.31359720527 150487.40500199658 2.24922701334307,220196.79544159182 150485.4378015113 2.267281585897006,220195.37564061602 150483.39847823992 2.285336158450941,220194.0576147028 150481.29194509084 2.303390731004876,220192.84453909204 150479.12327688694 2.321445303558811,220191.73933618914 150476.89769813983 2.339499876112746,220190.74466852468 150474.62057046374 2.357554448666682,220189.86293234018 150472.2973796586 2.375609021220617,220189.09625181538 150469.93372249458 2.393663593774552,220188.4464739508 150467.53529322887 2.411718166328487,220187.91516411823 150465.10786988755 2.429772738882422,220187.50360228957 150462.65730034615 2.447827311436357,220187.21277995332 150460.1894882413 2.465881883990292,220187.04339772597 150457.71037874854 2.483936456544227,220186.99586366417 150455.22594425976 2.501991029098163,220187.0702922816 150452.74216999527 2.520045601652098,220187.26650427323 150450.2650395848 2.538100174206033,220187.58402694712 150447.80052065253 2.556154746759968,220188.02209536344 150445.3545504404 2.574209319313903,220188.57965417692 150442.93302150487 2.592263891867838,220189.2553601796 150440.54176752127 2.610318464421774,220190.0475855365 150438.18654922993 2.628373036975709,220190.95442170734 150435.87304055793 2.646427609529644,220191.97368404438 150433.60681495038 2.664482182083579,220193.10291705534 150431.39333194323 2.682536754637514,220194.33940031903 150429.2379240109 2.70059132719145,220195.68015503895 150427.14578371993 2.718645899745385,220197.1219512195 150425.1219512195 2.73670047229932,220198.66131544748 150423.1713020994 2.754755044853255,220200.29453925954 150421.2985356442 2.77280961740719,220202.01768807654 150419.50816351234 2.790864189961126,220203.82661068198 150417.80449886707 2.808918762515061,220205.71694922293 150416.19164598576 2.826973335068996,220207.68414970822 150414.6734903723 2.845027907622931,220209.7234729796 150413.25368939652 2.863082480176866,220211.83000612867 150411.93566348328 2.881137052730801,220213.99867433257 150410.72258787253 2.899191625284736,220216.22425307968 150409.61738496964 2.917246197838671,220218.50138075577 150408.62271730517 2.935300770392606,220220.82457156092 150407.74098112067 2.953355342946542,220223.18822872493 150406.97430059587 2.971409915500477,220225.58665799064 150406.3245227313 2.989464488054412,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that looping little curve and represent it with straight lines like connecting dots, writing it down in an extended format with numbers like 220268 150415 1.", "source": "original", "new_id": 876}
{"id": 155, "function": "ST_CurveToLine", "question": "把那个包含一些点的弧形，像是220268 150415 1这些，变成一串直线，然后用某种格式展示出来吧。", "sql": "SELECT ST_AsEWKT(ST_CurveToLine(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)')));", "execution_result": [["LINESTRING(220268 150415 1,220269.95064912012 150416.53936422797 1.018117285667296,220271.82341557532 150418.17258804003 1.036234571334591,220273.61378770717 150419.89573685703 1.054351857001887,220275.31745235244 150421.70465946247 1.072469142669182,220276.93030523375 150423.59499800342 1.090586428336478,220278.4484608472 150425.5621984887 1.108703714003773,220279.868261823 150427.60152176008 1.126820999671069,220281.18628773623 150429.70805490916 1.144938285338364,220282.39936334698 150431.87672311306 1.16305557100566,220283.50456624987 150434.10230186017 1.181172856672956,220284.49923391434 150436.37942953626 1.199290142340251,220285.38097009883 150438.7026203414 1.217407428007547,220286.14765062364 150441.06627750542 1.235524713674842,220286.7974284882 150443.46470677113 1.253641999342138,220287.3287383208 150445.89213011245 1.271759285009433,220287.74030014945 150448.34269965385 1.289876570676729,220288.0311224857 150450.8105117587 1.307993856344024,220288.20050471305 150453.28962125146 1.32611114201132,220288.24803877485 150455.77405574024 1.344228427678616,220288.17361015742 150458.25783000473 1.362345713345911,220287.9773981658 150460.7349604152 1.380462999013207,220287.6598754919 150463.19947934747 1.398580284680502,220287.22180707558 150465.6454495596 1.416697570347798,220286.6642482621 150468.06697849513 1.434814856015093,220285.9885422594 150470.45823247873 1.452932141682389,220285.19631690253 150472.81345077007 1.471049427349685,220284.28948073168 150475.12695944207 1.48916671301698,220283.27021839464 150477.39318504962 1.507283998684276,220282.14098538368 150479.60666805677 1.525401284351571,220280.90450211999 150481.7620759891 1.543518570018867,220279.56374740007 150483.85421628007 1.561635855686162,220278.1219512195 150485.8780487805 1.579753141353458,220276.58258699154 150487.8286979006 1.597870427020753,220274.94936317948 150489.7014643558 1.615987712688049,220273.22621436248 150491.49183648766 1.634104998355344,220271.41729175704 150493.19550113293 1.65222228402264,220269.5269532161 150494.80835401424 1.670339569689936,220267.5597527308 150496.3265096277 1.688456855357231,220265.52042945943 150497.74631060348 1.706574141024527,220263.41389631035 150499.06433651672 1.724691426691822,220261.24522810645 150500.27741212747 1.742808712359118,220259.01964935934 150501.38261503036 1.760925998026413,220256.74252168325 150502.37728269483 1.779043283693709,220254.4193308781 150503.25901887933 1.797160569361004,220252.0556737141 150504.02569940413 1.8152778550283,220249.65724444838 150504.6754772687 1.833395140695596,220247.22982110706 150505.20678710128 1.851512426362891,220244.77925156566 150505.61834892994 1.869629712030187,220242.3114394608 150505.9091712662 1.887746997697482,220239.83232996805 150506.07855349354 1.905864283364778,220237.34789547927 150506.12608755534 1.923981569032073,220234.86412121478 150506.0516589379 1.942098854699369,220232.3869908043 150505.85544694628 1.960216140366664,220229.92247187204 150505.5379242724 1.97833342603396,220227.4765016599 150505.09985585607 1.996450711701256,220225.05497272438 150504.5422970426 2.014517570141913,220222.66371874078 150503.8665910399 2.032572142695848,220220.30850044944 150503.07436568302 2.050626715249784,220217.99499177744 150502.16752951217 2.068681287803719,220215.7287661699 150501.14826717513 2.086735860357654,220213.51528316273 150500.01903416417 2.104790432911589,220211.3598752304 150498.78255090048 2.122845005465524,220209.26773493944 150497.44179618056 2.14089957801946,220207.24390243902 150496 2.158954150573395,220205.2932533189 150494.46063577203 2.17700872312733,220203.4204868637 150492.82741195997 2.195063295681265,220201.63011473184 150491.10426314297 2.2131178682352,220199.92645008658 150489.29534053753 2.231172440789135,220198.31359720527 150487.40500199658 2.24922701334307,220196.79544159182 150485.4378015113 2.267281585897006,220195.37564061602 150483.39847823992 2.285336158450941,220194.0576147028 150481.29194509084 2.303390731004876,220192.84453909204 150479.12327688694 2.321445303558811,220191.73933618914 150476.89769813983 2.339499876112746,220190.74466852468 150474.62057046374 2.357554448666682,220189.86293234018 150472.2973796586 2.375609021220617,220189.09625181538 150469.93372249458 2.393663593774552,220188.4464739508 150467.53529322887 2.411718166328487,220187.91516411823 150465.10786988755 2.429772738882422,220187.50360228957 150462.65730034615 2.447827311436357,220187.21277995332 150460.1894882413 2.465881883990292,220187.04339772597 150457.71037874854 2.483936456544227,220186.99586366417 150455.22594425976 2.501991029098163,220187.0702922816 150452.74216999527 2.520045601652098,220187.26650427323 150450.2650395848 2.538100174206033,220187.58402694712 150447.80052065253 2.556154746759968,220188.02209536344 150445.3545504404 2.574209319313903,220188.57965417692 150442.93302150487 2.592263891867838,220189.2553601796 150440.54176752127 2.610318464421774,220190.0475855365 150438.18654922993 2.628373036975709,220190.95442170734 150435.87304055793 2.646427609529644,220191.97368404438 150433.60681495038 2.664482182083579,220193.10291705534 150431.39333194323 2.682536754637514,220194.33940031903 150429.2379240109 2.70059132719145,220195.68015503895 150427.14578371993 2.718645899745385,220197.1219512195 150425.1219512195 2.73670047229932,220198.66131544748 150423.1713020994 2.754755044853255,220200.29453925954 150421.2985356442 2.77280961740719,220202.01768807654 150419.50816351234 2.790864189961126,220203.82661068198 150417.80449886707 2.808918762515061,220205.71694922293 150416.19164598576 2.826973335068996,220207.68414970822 150414.6734903723 2.845027907622931,220209.7234729796 150413.25368939652 2.863082480176866,220211.83000612867 150411.93566348328 2.881137052730801,220213.99867433257 150410.72258787253 2.899191625284736,220216.22425307968 150409.61738496964 2.917246197838671,220218.50138075577 150408.62271730517 2.935300770392606,220220.82457156092 150407.74098112067 2.953355342946542,220223.18822872493 150406.97430059587 2.971409915500477,220225.58665799064 150406.3245227313 2.989464488054412,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that arc made of some points, like 220268 150415 1, and turn it into a series of straight lines, then show it in some format.", "source": "original", "new_id": 878}
{"id": 154, "function": "ST_CurveToLine", "question": "把那个由三点组成的弧形，比如220268 150415这些点，弄成一条直线的样子，用文字形式表示出来。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)')));", "execution_result": [["LINESTRING(220268 150415,220269.95064912012 150416.53936422797,220271.82341557532 150418.17258804003,220273.61378770717 150419.89573685703,220275.31745235244 150421.70465946247,220276.93030523375 150423.59499800342,220278.4484608472 150425.5621984887,220279.868261823 150427.60152176008,220281.18628773623 150429.70805490916,220282.39936334698 150431.87672311306,220283.50456624987 150434.10230186017,220284.49923391434 150436.37942953626,220285.38097009883 150438.7026203414,220286.14765062364 150441.06627750542,220286.7974284882 150443.46470677113,220287.3287383208 150445.89213011245,220287.74030014945 150448.34269965385,220288.0311224857 150450.8105117587,220288.20050471305 150453.28962125146,220288.24803877485 150455.77405574024,220288.17361015742 150458.25783000473,220287.9773981658 150460.7349604152,220287.6598754919 150463.19947934747,220287.22180707558 150465.6454495596,220286.6642482621 150468.06697849513,220285.9885422594 150470.45823247873,220285.19631690253 150472.81345077007,220284.28948073168 150475.12695944207,220283.27021839464 150477.39318504962,220282.14098538368 150479.60666805677,220280.90450211999 150481.7620759891,220279.56374740007 150483.85421628007,220278.1219512195 150485.8780487805,220276.58258699154 150487.8286979006,220274.94936317948 150489.7014643558,220273.22621436248 150491.49183648766,220271.41729175704 150493.19550113293,220269.5269532161 150494.80835401424,220267.5597527308 150496.3265096277,220265.52042945943 150497.74631060348,220263.41389631035 150499.06433651672,220261.24522810645 150500.27741212747,220259.01964935934 150501.38261503036,220256.74252168325 150502.37728269483,220254.4193308781 150503.25901887933,220252.0556737141 150504.02569940413,220249.65724444838 150504.6754772687,220247.22982110706 150505.20678710128,220244.77925156566 150505.61834892994,220242.3114394608 150505.9091712662,220239.83232996805 150506.07855349354,220237.34789547927 150506.12608755534,220234.86412121478 150506.0516589379,220232.3869908043 150505.85544694628,220229.92247187204 150505.5379242724,220227.4765016599 150505.09985585607,220225.05497272438 150504.5422970426,220222.66371874078 150503.8665910399,220220.30850044944 150503.07436568302,220217.99499177744 150502.16752951217,220215.7287661699 150501.14826717513,220213.51528316273 150500.01903416417,220211.3598752304 150498.78255090048,220209.26773493944 150497.44179618056,220207.24390243902 150496,220205.2932533189 150494.46063577203,220203.4204868637 150492.82741195997,220201.63011473184 150491.10426314297,220199.92645008658 150489.29534053753,220198.31359720527 150487.40500199658,220196.79544159182 150485.4378015113,220195.37564061602 150483.39847823992,220194.0576147028 150481.29194509084,220192.84453909204 150479.12327688694,220191.73933618914 150476.89769813983,220190.74466852468 150474.62057046374,220189.86293234018 150472.2973796586,220189.09625181538 150469.93372249458,220188.4464739508 150467.53529322887,220187.91516411823 150465.10786988755,220187.50360228957 150462.65730034615,220187.21277995332 150460.1894882413,220187.04339772597 150457.71037874854,220186.99586366417 150455.22594425976,220187.0702922816 150452.74216999527,220187.26650427323 150450.2650395848,220187.58402694712 150447.80052065253,220188.02209536344 150445.3545504404,220188.57965417692 150442.93302150487,220189.2553601796 150440.54176752127,220190.0475855365 150438.18654922993,220190.95442170734 150435.87304055793,220191.97368404438 150433.60681495038,220193.10291705534 150431.39333194323,220194.33940031903 150429.2379240109,220195.68015503895 150427.14578371993,220197.1219512195 150425.1219512195,220198.66131544748 150423.1713020994,220200.29453925954 150421.2985356442,220202.01768807654 150419.50816351234,220203.82661068198 150417.80449886707,220205.71694922293 150416.19164598576,220207.68414970822 150414.6734903723,220209.7234729796 150413.25368939652,220211.83000612867 150411.93566348328,220213.99867433257 150410.72258787253,220216.22425307968 150409.61738496964,220218.50138075577 150408.62271730517,220220.82457156092 150407.74098112067,220223.18822872493 150406.97430059587,220225.58665799064 150406.3245227313,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that arc made up of three points, like 220268 150415 and such, and turn it into something like a straight line, shown in text form.", "source": "original", "new_id": 874}
{"id": 155, "function": "ST_CurveToLine", "question": "有一个曲线像是由三组坐标点(220268 150415 1)、(220227 150505 2)、(220227 150406 3)组成的圆弧，想看看它如果变成直线段会是什么样子，然后用一种特殊的文字格式来表示出来。", "sql": "SELECT ST_AsEWKT(ST_CurveToLine(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)')));", "execution_result": [["LINESTRING(220268 150415 1,220269.95064912012 150416.53936422797 1.018117285667296,220271.82341557532 150418.17258804003 1.036234571334591,220273.61378770717 150419.89573685703 1.054351857001887,220275.31745235244 150421.70465946247 1.072469142669182,220276.93030523375 150423.59499800342 1.090586428336478,220278.4484608472 150425.5621984887 1.108703714003773,220279.868261823 150427.60152176008 1.126820999671069,220281.18628773623 150429.70805490916 1.144938285338364,220282.39936334698 150431.87672311306 1.16305557100566,220283.50456624987 150434.10230186017 1.181172856672956,220284.49923391434 150436.37942953626 1.199290142340251,220285.38097009883 150438.7026203414 1.217407428007547,220286.14765062364 150441.06627750542 1.235524713674842,220286.7974284882 150443.46470677113 1.253641999342138,220287.3287383208 150445.89213011245 1.271759285009433,220287.74030014945 150448.34269965385 1.289876570676729,220288.0311224857 150450.8105117587 1.307993856344024,220288.20050471305 150453.28962125146 1.32611114201132,220288.24803877485 150455.77405574024 1.344228427678616,220288.17361015742 150458.25783000473 1.362345713345911,220287.9773981658 150460.7349604152 1.380462999013207,220287.6598754919 150463.19947934747 1.398580284680502,220287.22180707558 150465.6454495596 1.416697570347798,220286.6642482621 150468.06697849513 1.434814856015093,220285.9885422594 150470.45823247873 1.452932141682389,220285.19631690253 150472.81345077007 1.471049427349685,220284.28948073168 150475.12695944207 1.48916671301698,220283.27021839464 150477.39318504962 1.507283998684276,220282.14098538368 150479.60666805677 1.525401284351571,220280.90450211999 150481.7620759891 1.543518570018867,220279.56374740007 150483.85421628007 1.561635855686162,220278.1219512195 150485.8780487805 1.579753141353458,220276.58258699154 150487.8286979006 1.597870427020753,220274.94936317948 150489.7014643558 1.615987712688049,220273.22621436248 150491.49183648766 1.634104998355344,220271.41729175704 150493.19550113293 1.65222228402264,220269.5269532161 150494.80835401424 1.670339569689936,220267.5597527308 150496.3265096277 1.688456855357231,220265.52042945943 150497.74631060348 1.706574141024527,220263.41389631035 150499.06433651672 1.724691426691822,220261.24522810645 150500.27741212747 1.742808712359118,220259.01964935934 150501.38261503036 1.760925998026413,220256.74252168325 150502.37728269483 1.779043283693709,220254.4193308781 150503.25901887933 1.797160569361004,220252.0556737141 150504.02569940413 1.8152778550283,220249.65724444838 150504.6754772687 1.833395140695596,220247.22982110706 150505.20678710128 1.851512426362891,220244.77925156566 150505.61834892994 1.869629712030187,220242.3114394608 150505.9091712662 1.887746997697482,220239.83232996805 150506.07855349354 1.905864283364778,220237.34789547927 150506.12608755534 1.923981569032073,220234.86412121478 150506.0516589379 1.942098854699369,220232.3869908043 150505.85544694628 1.960216140366664,220229.92247187204 150505.5379242724 1.97833342603396,220227.4765016599 150505.09985585607 1.996450711701256,220225.05497272438 150504.5422970426 2.014517570141913,220222.66371874078 150503.8665910399 2.032572142695848,220220.30850044944 150503.07436568302 2.050626715249784,220217.99499177744 150502.16752951217 2.068681287803719,220215.7287661699 150501.14826717513 2.086735860357654,220213.51528316273 150500.01903416417 2.104790432911589,220211.3598752304 150498.78255090048 2.122845005465524,220209.26773493944 150497.44179618056 2.14089957801946,220207.24390243902 150496 2.158954150573395,220205.2932533189 150494.46063577203 2.17700872312733,220203.4204868637 150492.82741195997 2.195063295681265,220201.63011473184 150491.10426314297 2.2131178682352,220199.92645008658 150489.29534053753 2.231172440789135,220198.31359720527 150487.40500199658 2.24922701334307,220196.79544159182 150485.4378015113 2.267281585897006,220195.37564061602 150483.39847823992 2.285336158450941,220194.0576147028 150481.29194509084 2.303390731004876,220192.84453909204 150479.12327688694 2.321445303558811,220191.73933618914 150476.89769813983 2.339499876112746,220190.74466852468 150474.62057046374 2.357554448666682,220189.86293234018 150472.2973796586 2.375609021220617,220189.09625181538 150469.93372249458 2.393663593774552,220188.4464739508 150467.53529322887 2.411718166328487,220187.91516411823 150465.10786988755 2.429772738882422,220187.50360228957 150462.65730034615 2.447827311436357,220187.21277995332 150460.1894882413 2.465881883990292,220187.04339772597 150457.71037874854 2.483936456544227,220186.99586366417 150455.22594425976 2.501991029098163,220187.0702922816 150452.74216999527 2.520045601652098,220187.26650427323 150450.2650395848 2.538100174206033,220187.58402694712 150447.80052065253 2.556154746759968,220188.02209536344 150445.3545504404 2.574209319313903,220188.57965417692 150442.93302150487 2.592263891867838,220189.2553601796 150440.54176752127 2.610318464421774,220190.0475855365 150438.18654922993 2.628373036975709,220190.95442170734 150435.87304055793 2.646427609529644,220191.97368404438 150433.60681495038 2.664482182083579,220193.10291705534 150431.39333194323 2.682536754637514,220194.33940031903 150429.2379240109 2.70059132719145,220195.68015503895 150427.14578371993 2.718645899745385,220197.1219512195 150425.1219512195 2.73670047229932,220198.66131544748 150423.1713020994 2.754755044853255,220200.29453925954 150421.2985356442 2.77280961740719,220202.01768807654 150419.50816351234 2.790864189961126,220203.82661068198 150417.80449886707 2.808918762515061,220205.71694922293 150416.19164598576 2.826973335068996,220207.68414970822 150414.6734903723 2.845027907622931,220209.7234729796 150413.25368939652 2.863082480176866,220211.83000612867 150411.93566348328 2.881137052730801,220213.99867433257 150410.72258787253 2.899191625284736,220216.22425307968 150409.61738496964 2.917246197838671,220218.50138075577 150408.62271730517 2.935300770392606,220220.82457156092 150407.74098112067 2.953355342946542,220223.18822872493 150406.97430059587 2.971409915500477,220225.58665799064 150406.3245227313 2.989464488054412,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a curve that's kind of like a circular arc made from three sets of coordinates (220268 150415 1), (220227 150505 2), (220227 150406 3). We want to see what it looks like if it becomes line segments, and then represent it in a special text format.", "source": "original", "new_id": 877}
{"id": 155, "function": "ST_CurveToLine", "question": "把那些坐标(220268 150415 1, 220227 150505 2, 220227 150406 3)描绘成一条弯曲的线，并转换成一串长得更复杂的描述。", "sql": "SELECT ST_AsEWKT(ST_CurveToLine(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)')));", "execution_result": [["LINESTRING(220268 150415 1,220269.95064912012 150416.53936422797 1.018117285667296,220271.82341557532 150418.17258804003 1.036234571334591,220273.61378770717 150419.89573685703 1.054351857001887,220275.31745235244 150421.70465946247 1.072469142669182,220276.93030523375 150423.59499800342 1.090586428336478,220278.4484608472 150425.5621984887 1.108703714003773,220279.868261823 150427.60152176008 1.126820999671069,220281.18628773623 150429.70805490916 1.144938285338364,220282.39936334698 150431.87672311306 1.16305557100566,220283.50456624987 150434.10230186017 1.181172856672956,220284.49923391434 150436.37942953626 1.199290142340251,220285.38097009883 150438.7026203414 1.217407428007547,220286.14765062364 150441.06627750542 1.235524713674842,220286.7974284882 150443.46470677113 1.253641999342138,220287.3287383208 150445.89213011245 1.271759285009433,220287.74030014945 150448.34269965385 1.289876570676729,220288.0311224857 150450.8105117587 1.307993856344024,220288.20050471305 150453.28962125146 1.32611114201132,220288.24803877485 150455.77405574024 1.344228427678616,220288.17361015742 150458.25783000473 1.362345713345911,220287.9773981658 150460.7349604152 1.380462999013207,220287.6598754919 150463.19947934747 1.398580284680502,220287.22180707558 150465.6454495596 1.416697570347798,220286.6642482621 150468.06697849513 1.434814856015093,220285.9885422594 150470.45823247873 1.452932141682389,220285.19631690253 150472.81345077007 1.471049427349685,220284.28948073168 150475.12695944207 1.48916671301698,220283.27021839464 150477.39318504962 1.507283998684276,220282.14098538368 150479.60666805677 1.525401284351571,220280.90450211999 150481.7620759891 1.543518570018867,220279.56374740007 150483.85421628007 1.561635855686162,220278.1219512195 150485.8780487805 1.579753141353458,220276.58258699154 150487.8286979006 1.597870427020753,220274.94936317948 150489.7014643558 1.615987712688049,220273.22621436248 150491.49183648766 1.634104998355344,220271.41729175704 150493.19550113293 1.65222228402264,220269.5269532161 150494.80835401424 1.670339569689936,220267.5597527308 150496.3265096277 1.688456855357231,220265.52042945943 150497.74631060348 1.706574141024527,220263.41389631035 150499.06433651672 1.724691426691822,220261.24522810645 150500.27741212747 1.742808712359118,220259.01964935934 150501.38261503036 1.760925998026413,220256.74252168325 150502.37728269483 1.779043283693709,220254.4193308781 150503.25901887933 1.797160569361004,220252.0556737141 150504.02569940413 1.8152778550283,220249.65724444838 150504.6754772687 1.833395140695596,220247.22982110706 150505.20678710128 1.851512426362891,220244.77925156566 150505.61834892994 1.869629712030187,220242.3114394608 150505.9091712662 1.887746997697482,220239.83232996805 150506.07855349354 1.905864283364778,220237.34789547927 150506.12608755534 1.923981569032073,220234.86412121478 150506.0516589379 1.942098854699369,220232.3869908043 150505.85544694628 1.960216140366664,220229.92247187204 150505.5379242724 1.97833342603396,220227.4765016599 150505.09985585607 1.996450711701256,220225.05497272438 150504.5422970426 2.014517570141913,220222.66371874078 150503.8665910399 2.032572142695848,220220.30850044944 150503.07436568302 2.050626715249784,220217.99499177744 150502.16752951217 2.068681287803719,220215.7287661699 150501.14826717513 2.086735860357654,220213.51528316273 150500.01903416417 2.104790432911589,220211.3598752304 150498.78255090048 2.122845005465524,220209.26773493944 150497.44179618056 2.14089957801946,220207.24390243902 150496 2.158954150573395,220205.2932533189 150494.46063577203 2.17700872312733,220203.4204868637 150492.82741195997 2.195063295681265,220201.63011473184 150491.10426314297 2.2131178682352,220199.92645008658 150489.29534053753 2.231172440789135,220198.31359720527 150487.40500199658 2.24922701334307,220196.79544159182 150485.4378015113 2.267281585897006,220195.37564061602 150483.39847823992 2.285336158450941,220194.0576147028 150481.29194509084 2.303390731004876,220192.84453909204 150479.12327688694 2.321445303558811,220191.73933618914 150476.89769813983 2.339499876112746,220190.74466852468 150474.62057046374 2.357554448666682,220189.86293234018 150472.2973796586 2.375609021220617,220189.09625181538 150469.93372249458 2.393663593774552,220188.4464739508 150467.53529322887 2.411718166328487,220187.91516411823 150465.10786988755 2.429772738882422,220187.50360228957 150462.65730034615 2.447827311436357,220187.21277995332 150460.1894882413 2.465881883990292,220187.04339772597 150457.71037874854 2.483936456544227,220186.99586366417 150455.22594425976 2.501991029098163,220187.0702922816 150452.74216999527 2.520045601652098,220187.26650427323 150450.2650395848 2.538100174206033,220187.58402694712 150447.80052065253 2.556154746759968,220188.02209536344 150445.3545504404 2.574209319313903,220188.57965417692 150442.93302150487 2.592263891867838,220189.2553601796 150440.54176752127 2.610318464421774,220190.0475855365 150438.18654922993 2.628373036975709,220190.95442170734 150435.87304055793 2.646427609529644,220191.97368404438 150433.60681495038 2.664482182083579,220193.10291705534 150431.39333194323 2.682536754637514,220194.33940031903 150429.2379240109 2.70059132719145,220195.68015503895 150427.14578371993 2.718645899745385,220197.1219512195 150425.1219512195 2.73670047229932,220198.66131544748 150423.1713020994 2.754755044853255,220200.29453925954 150421.2985356442 2.77280961740719,220202.01768807654 150419.50816351234 2.790864189961126,220203.82661068198 150417.80449886707 2.808918762515061,220205.71694922293 150416.19164598576 2.826973335068996,220207.68414970822 150414.6734903723 2.845027907622931,220209.7234729796 150413.25368939652 2.863082480176866,220211.83000612867 150411.93566348328 2.881137052730801,220213.99867433257 150410.72258787253 2.899191625284736,220216.22425307968 150409.61738496964 2.917246197838671,220218.50138075577 150408.62271730517 2.935300770392606,220220.82457156092 150407.74098112067 2.953355342946542,220223.18822872493 150406.97430059587 2.971409915500477,220225.58665799064 150406.3245227313 2.989464488054412,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those coordinates (220268 150415 1, 220227 150505 2, 220227 150406 3) and draw them as a curvy line, then turn it into a more complex description.", "source": "original", "new_id": 879}
{"id": 155, "function": "ST_CurveToLine", "question": "把那个有点弯曲的三维线段，从220268 150415到220227 150505再到220227 150406，转换成一堆直线，然后给出它的详细文本样子。", "sql": "SELECT ST_AsEWKT(ST_CurveToLine(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)')));", "execution_result": [["LINESTRING(220268 150415 1,220269.95064912012 150416.53936422797 1.018117285667296,220271.82341557532 150418.17258804003 1.036234571334591,220273.61378770717 150419.89573685703 1.054351857001887,220275.31745235244 150421.70465946247 1.072469142669182,220276.93030523375 150423.59499800342 1.090586428336478,220278.4484608472 150425.5621984887 1.108703714003773,220279.868261823 150427.60152176008 1.126820999671069,220281.18628773623 150429.70805490916 1.144938285338364,220282.39936334698 150431.87672311306 1.16305557100566,220283.50456624987 150434.10230186017 1.181172856672956,220284.49923391434 150436.37942953626 1.199290142340251,220285.38097009883 150438.7026203414 1.217407428007547,220286.14765062364 150441.06627750542 1.235524713674842,220286.7974284882 150443.46470677113 1.253641999342138,220287.3287383208 150445.89213011245 1.271759285009433,220287.74030014945 150448.34269965385 1.289876570676729,220288.0311224857 150450.8105117587 1.307993856344024,220288.20050471305 150453.28962125146 1.32611114201132,220288.24803877485 150455.77405574024 1.344228427678616,220288.17361015742 150458.25783000473 1.362345713345911,220287.9773981658 150460.7349604152 1.380462999013207,220287.6598754919 150463.19947934747 1.398580284680502,220287.22180707558 150465.6454495596 1.416697570347798,220286.6642482621 150468.06697849513 1.434814856015093,220285.9885422594 150470.45823247873 1.452932141682389,220285.19631690253 150472.81345077007 1.471049427349685,220284.28948073168 150475.12695944207 1.48916671301698,220283.27021839464 150477.39318504962 1.507283998684276,220282.14098538368 150479.60666805677 1.525401284351571,220280.90450211999 150481.7620759891 1.543518570018867,220279.56374740007 150483.85421628007 1.561635855686162,220278.1219512195 150485.8780487805 1.579753141353458,220276.58258699154 150487.8286979006 1.597870427020753,220274.94936317948 150489.7014643558 1.615987712688049,220273.22621436248 150491.49183648766 1.634104998355344,220271.41729175704 150493.19550113293 1.65222228402264,220269.5269532161 150494.80835401424 1.670339569689936,220267.5597527308 150496.3265096277 1.688456855357231,220265.52042945943 150497.74631060348 1.706574141024527,220263.41389631035 150499.06433651672 1.724691426691822,220261.24522810645 150500.27741212747 1.742808712359118,220259.01964935934 150501.38261503036 1.760925998026413,220256.74252168325 150502.37728269483 1.779043283693709,220254.4193308781 150503.25901887933 1.797160569361004,220252.0556737141 150504.02569940413 1.8152778550283,220249.65724444838 150504.6754772687 1.833395140695596,220247.22982110706 150505.20678710128 1.851512426362891,220244.77925156566 150505.61834892994 1.869629712030187,220242.3114394608 150505.9091712662 1.887746997697482,220239.83232996805 150506.07855349354 1.905864283364778,220237.34789547927 150506.12608755534 1.923981569032073,220234.86412121478 150506.0516589379 1.942098854699369,220232.3869908043 150505.85544694628 1.960216140366664,220229.92247187204 150505.5379242724 1.97833342603396,220227.4765016599 150505.09985585607 1.996450711701256,220225.05497272438 150504.5422970426 2.014517570141913,220222.66371874078 150503.8665910399 2.032572142695848,220220.30850044944 150503.07436568302 2.050626715249784,220217.99499177744 150502.16752951217 2.068681287803719,220215.7287661699 150501.14826717513 2.086735860357654,220213.51528316273 150500.01903416417 2.104790432911589,220211.3598752304 150498.78255090048 2.122845005465524,220209.26773493944 150497.44179618056 2.14089957801946,220207.24390243902 150496 2.158954150573395,220205.2932533189 150494.46063577203 2.17700872312733,220203.4204868637 150492.82741195997 2.195063295681265,220201.63011473184 150491.10426314297 2.2131178682352,220199.92645008658 150489.29534053753 2.231172440789135,220198.31359720527 150487.40500199658 2.24922701334307,220196.79544159182 150485.4378015113 2.267281585897006,220195.37564061602 150483.39847823992 2.285336158450941,220194.0576147028 150481.29194509084 2.303390731004876,220192.84453909204 150479.12327688694 2.321445303558811,220191.73933618914 150476.89769813983 2.339499876112746,220190.74466852468 150474.62057046374 2.357554448666682,220189.86293234018 150472.2973796586 2.375609021220617,220189.09625181538 150469.93372249458 2.393663593774552,220188.4464739508 150467.53529322887 2.411718166328487,220187.91516411823 150465.10786988755 2.429772738882422,220187.50360228957 150462.65730034615 2.447827311436357,220187.21277995332 150460.1894882413 2.465881883990292,220187.04339772597 150457.71037874854 2.483936456544227,220186.99586366417 150455.22594425976 2.501991029098163,220187.0702922816 150452.74216999527 2.520045601652098,220187.26650427323 150450.2650395848 2.538100174206033,220187.58402694712 150447.80052065253 2.556154746759968,220188.02209536344 150445.3545504404 2.574209319313903,220188.57965417692 150442.93302150487 2.592263891867838,220189.2553601796 150440.54176752127 2.610318464421774,220190.0475855365 150438.18654922993 2.628373036975709,220190.95442170734 150435.87304055793 2.646427609529644,220191.97368404438 150433.60681495038 2.664482182083579,220193.10291705534 150431.39333194323 2.682536754637514,220194.33940031903 150429.2379240109 2.70059132719145,220195.68015503895 150427.14578371993 2.718645899745385,220197.1219512195 150425.1219512195 2.73670047229932,220198.66131544748 150423.1713020994 2.754755044853255,220200.29453925954 150421.2985356442 2.77280961740719,220202.01768807654 150419.50816351234 2.790864189961126,220203.82661068198 150417.80449886707 2.808918762515061,220205.71694922293 150416.19164598576 2.826973335068996,220207.68414970822 150414.6734903723 2.845027907622931,220209.7234729796 150413.25368939652 2.863082480176866,220211.83000612867 150411.93566348328 2.881137052730801,220213.99867433257 150410.72258787253 2.899191625284736,220216.22425307968 150409.61738496964 2.917246197838671,220218.50138075577 150408.62271730517 2.935300770392606,220220.82457156092 150407.74098112067 2.953355342946542,220223.18822872493 150406.97430059587 2.971409915500477,220225.58665799064 150406.3245227313 2.989464488054412,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that slightly curved 3D line segment from 220268 150415 to 220227 150505 and then to 220227 150406, turn it into a bunch of straight lines, and provide its detailed text form.", "source": "original", "new_id": 880}
{"id": 156, "function": "ST_CurveToLine", "question": "把那条特别的弯曲线，顶点在(220268,150415)、(220227,150505)、(220227,150406)，用每个四分之一圆用2段来表示，最后给我看看它的文字版本。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'),2));", "execution_result": [["LINESTRING(220268 150415,220287.74030014945 150448.34269965385,220278.1219512195 150485.8780487805,220244.77925156566 150505.61834892994,220207.24390243902 150496,220187.50360228957 150462.65730034615,220197.1219512195 150425.1219512195,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that special curved line with points at (220268,150415), (220227,150505), (220227,150406), and show it using 2 bits for each quarter circle, then let me see its text version.", "source": "original", "new_id": 883}
{"id": 149, "function": "ST_CollectionHomogenize", "question": "把包含两个多边形的集合，里面那些10 50和90 10的点，变得规整后，用一种简单的格式写出来。", "sql": "SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION (POLYGON ((10 50, 50 50, 50 10, 10 10, 10 50)), POLYGON ((90 50, 90 10, 50 10, 50 50, 90 50)))'));", "execution_result": [["MULTIPOLYGON(((10 50,50 50,50 10,10 10,10 50)),((90 50,90 10,50 10,50 50,90 50)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the collection with two polygons, including those points like 10 50 and 90 10, make it neat, and write it out in a simple format.", "source": "original", "new_id": 847}
{"id": 155, "function": "ST_CurveToLine", "question": "把那个悬挂在空间里的圆滑线条，变成一段段的小线，然后看看它的完整文字描述。", "sql": "SELECT ST_AsEWKT(ST_CurveToLine(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)')));", "execution_result": [["LINESTRING(220268 150415 1,220269.95064912012 150416.53936422797 1.018117285667296,220271.82341557532 150418.17258804003 1.036234571334591,220273.61378770717 150419.89573685703 1.054351857001887,220275.31745235244 150421.70465946247 1.072469142669182,220276.93030523375 150423.59499800342 1.090586428336478,220278.4484608472 150425.5621984887 1.108703714003773,220279.868261823 150427.60152176008 1.126820999671069,220281.18628773623 150429.70805490916 1.144938285338364,220282.39936334698 150431.87672311306 1.16305557100566,220283.50456624987 150434.10230186017 1.181172856672956,220284.49923391434 150436.37942953626 1.199290142340251,220285.38097009883 150438.7026203414 1.217407428007547,220286.14765062364 150441.06627750542 1.235524713674842,220286.7974284882 150443.46470677113 1.253641999342138,220287.3287383208 150445.89213011245 1.271759285009433,220287.74030014945 150448.34269965385 1.289876570676729,220288.0311224857 150450.8105117587 1.307993856344024,220288.20050471305 150453.28962125146 1.32611114201132,220288.24803877485 150455.77405574024 1.344228427678616,220288.17361015742 150458.25783000473 1.362345713345911,220287.9773981658 150460.7349604152 1.380462999013207,220287.6598754919 150463.19947934747 1.398580284680502,220287.22180707558 150465.6454495596 1.416697570347798,220286.6642482621 150468.06697849513 1.434814856015093,220285.9885422594 150470.45823247873 1.452932141682389,220285.19631690253 150472.81345077007 1.471049427349685,220284.28948073168 150475.12695944207 1.48916671301698,220283.27021839464 150477.39318504962 1.507283998684276,220282.14098538368 150479.60666805677 1.525401284351571,220280.90450211999 150481.7620759891 1.543518570018867,220279.56374740007 150483.85421628007 1.561635855686162,220278.1219512195 150485.8780487805 1.579753141353458,220276.58258699154 150487.8286979006 1.597870427020753,220274.94936317948 150489.7014643558 1.615987712688049,220273.22621436248 150491.49183648766 1.634104998355344,220271.41729175704 150493.19550113293 1.65222228402264,220269.5269532161 150494.80835401424 1.670339569689936,220267.5597527308 150496.3265096277 1.688456855357231,220265.52042945943 150497.74631060348 1.706574141024527,220263.41389631035 150499.06433651672 1.724691426691822,220261.24522810645 150500.27741212747 1.742808712359118,220259.01964935934 150501.38261503036 1.760925998026413,220256.74252168325 150502.37728269483 1.779043283693709,220254.4193308781 150503.25901887933 1.797160569361004,220252.0556737141 150504.02569940413 1.8152778550283,220249.65724444838 150504.6754772687 1.833395140695596,220247.22982110706 150505.20678710128 1.851512426362891,220244.77925156566 150505.61834892994 1.869629712030187,220242.3114394608 150505.9091712662 1.887746997697482,220239.83232996805 150506.07855349354 1.905864283364778,220237.34789547927 150506.12608755534 1.923981569032073,220234.86412121478 150506.0516589379 1.942098854699369,220232.3869908043 150505.85544694628 1.960216140366664,220229.92247187204 150505.5379242724 1.97833342603396,220227.4765016599 150505.09985585607 1.996450711701256,220225.05497272438 150504.5422970426 2.014517570141913,220222.66371874078 150503.8665910399 2.032572142695848,220220.30850044944 150503.07436568302 2.050626715249784,220217.99499177744 150502.16752951217 2.068681287803719,220215.7287661699 150501.14826717513 2.086735860357654,220213.51528316273 150500.01903416417 2.104790432911589,220211.3598752304 150498.78255090048 2.122845005465524,220209.26773493944 150497.44179618056 2.14089957801946,220207.24390243902 150496 2.158954150573395,220205.2932533189 150494.46063577203 2.17700872312733,220203.4204868637 150492.82741195997 2.195063295681265,220201.63011473184 150491.10426314297 2.2131178682352,220199.92645008658 150489.29534053753 2.231172440789135,220198.31359720527 150487.40500199658 2.24922701334307,220196.79544159182 150485.4378015113 2.267281585897006,220195.37564061602 150483.39847823992 2.285336158450941,220194.0576147028 150481.29194509084 2.303390731004876,220192.84453909204 150479.12327688694 2.321445303558811,220191.73933618914 150476.89769813983 2.339499876112746,220190.74466852468 150474.62057046374 2.357554448666682,220189.86293234018 150472.2973796586 2.375609021220617,220189.09625181538 150469.93372249458 2.393663593774552,220188.4464739508 150467.53529322887 2.411718166328487,220187.91516411823 150465.10786988755 2.429772738882422,220187.50360228957 150462.65730034615 2.447827311436357,220187.21277995332 150460.1894882413 2.465881883990292,220187.04339772597 150457.71037874854 2.483936456544227,220186.99586366417 150455.22594425976 2.501991029098163,220187.0702922816 150452.74216999527 2.520045601652098,220187.26650427323 150450.2650395848 2.538100174206033,220187.58402694712 150447.80052065253 2.556154746759968,220188.02209536344 150445.3545504404 2.574209319313903,220188.57965417692 150442.93302150487 2.592263891867838,220189.2553601796 150440.54176752127 2.610318464421774,220190.0475855365 150438.18654922993 2.628373036975709,220190.95442170734 150435.87304055793 2.646427609529644,220191.97368404438 150433.60681495038 2.664482182083579,220193.10291705534 150431.39333194323 2.682536754637514,220194.33940031903 150429.2379240109 2.70059132719145,220195.68015503895 150427.14578371993 2.718645899745385,220197.1219512195 150425.1219512195 2.73670047229932,220198.66131544748 150423.1713020994 2.754755044853255,220200.29453925954 150421.2985356442 2.77280961740719,220202.01768807654 150419.50816351234 2.790864189961126,220203.82661068198 150417.80449886707 2.808918762515061,220205.71694922293 150416.19164598576 2.826973335068996,220207.68414970822 150414.6734903723 2.845027907622931,220209.7234729796 150413.25368939652 2.863082480176866,220211.83000612867 150411.93566348328 2.881137052730801,220213.99867433257 150410.72258787253 2.899191625284736,220216.22425307968 150409.61738496964 2.917246197838671,220218.50138075577 150408.62271730517 2.935300770392606,220220.82457156092 150407.74098112067 2.953355342946542,220223.18822872493 150406.97430059587 2.971409915500477,220225.58665799064 150406.3245227313 2.989464488054412,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that circular arc hanging in space, turn it into little segments, and then check its complete textual description.", "source": "original", "new_id": 881}
{"id": 156, "function": "ST_CurveToLine", "question": "把那些圆弧上的点，像是220268 150415、220227 150505和220227 150406，弄成直线段，每个弯曲部分用两个小段表示，然后给我那个结果的文本格式。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'),2));", "execution_result": [["LINESTRING(220268 150415,220287.74030014945 150448.34269965385,220278.1219512195 150485.8780487805,220244.77925156566 150505.61834892994,220207.24390243902 150496,220187.50360228957 150462.65730034615,220197.1219512195 150425.1219512195,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those points on the arc, like 220268 150415, 220227 150505, and 220227 150406, into straight segments, using two small segments for each curve part, and then give me the text format of that result.", "source": "original", "new_id": 886}
{"id": 156, "function": "ST_CurveToLine", "question": "把那个圆弧线段，像是CIRCULARSTRING(220268 150415,220227 150505,220227 150406)那样的形状，变成由小直线拼接而成的样子，每一段弧用两个小直线来代替，然后告诉我它的样子是什么。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'),2));", "execution_result": [["LINESTRING(220268 150415,220287.74030014945 150448.34269965385,220278.1219512195 150485.8780487805,220244.77925156566 150505.61834892994,220207.24390243902 150496,220187.50360228957 150462.65730034615,220197.1219512195 150425.1219512195,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that arc line, like the shape CIRCULARSTRING(220268 150415,220227 150505,220227 150406), and turn it into a form made of little straight lines, using two little lines to replace each arc segment, then tell me what it looks like.", "source": "original", "new_id": 887}
{"id": 156, "function": "ST_CurveToLine", "question": "把那些圆弧上的点，像220268 150415和其他的，弄成直线段，每个小段用两段来表示，然后给出结果的样子。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'),2));", "execution_result": [["LINESTRING(220268 150415,220287.74030014945 150448.34269965385,220278.1219512195 150485.8780487805,220244.77925156566 150505.61834892994,220207.24390243902 150496,220187.50360228957 150462.65730034615,220197.1219512195 150425.1219512195,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those points on the circular arc, like 220268 150415 and the others, and turn them into line segments, using two segments for each small part, then give the appearance of the result.", "source": "original", "new_id": 885}
{"id": 156, "function": "ST_CurveToLine", "question": "把那种弯曲的线条CIRCULARSTRING(220268 150415,220227 150505,220227 150406)变成一段一段的直线，用2来决定每个小弯的分段数量，然后给出它们的文字描述。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'),2));", "execution_result": [["LINESTRING(220268 150415,220287.74030014945 150448.34269965385,220278.1219512195 150485.8780487805,220244.77925156566 150505.61834892994,220207.24390243902 150496,220187.50360228957 150462.65730034615,220197.1219512195 150425.1219512195,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that kind of curved line CIRCULARSTRING(220268 150415,220227 150505,220227 150406) into several straight segments, using 2 to decide the number of pieces for each little curve, and then provide their text description.", "source": "original", "new_id": 884}
{"id": 157, "function": "ST_CurveToLine", "question": "把从(0 0)到(200 0)经过(100 -100)的圆弧，用那些小线段来画出一个差不多的形状，每段的偏差不超过20个单位，最后给出那个形状的WKT格式。", "sql": "SELECT ST_AsText(ST_CurveToLine('CIRCULARSTRING(0 0,100 -100,200 0)'::geometry,20,1,1));", "execution_result": [["LINESTRING(0 0,49.99999999999996 -86.60254037844383,149.99999999999994 -86.6025403784439,200 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the arc from (0 0) through (100 -100) to (200 0) and draw a similar shape using small line pieces, making sure each piece doesn't deviate by more than 20 units, and finally give the WKT format of that shape.", "source": "original", "new_id": 888}
{"id": 156, "function": "ST_CurveToLine", "question": "把那些点连成一条线，想象每个小圆弧分成两段，最后告诉我它的形状是什么样子的。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'),2));", "execution_result": [["LINESTRING(220268 150415,220287.74030014945 150448.34269965385,220278.1219512195 150485.8780487805,220244.77925156566 150505.61834892994,220207.24390243902 150496,220187.50360228957 150462.65730034615,220197.1219512195 150425.1219512195,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those points into a line, imagining each small circular arc divided into two parts, and finally tell me what its shape looks like.", "source": "original", "new_id": 882}
{"id": 157, "function": "ST_CurveToLine", "question": "把经过(0,0)、(100,-100)、(200,0)的弯曲路径变成用20段组成的线状表示，注意要保留这些点并考虑一些模糊的调整，最终得到一个奇怪的文本格式。", "sql": "SELECT ST_AsText(ST_CurveToLine('CIRCULARSTRING(0 0,100 -100,200 0)'::geometry,20,1,1));", "execution_result": [["LINESTRING(0 0,49.99999999999996 -86.60254037844383,149.99999999999994 -86.6025403784439,200 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the curvy path passing through (0,0), (100,-100), and (200,0) into a line-like shape using 20 segments, making sure to keep those points and consider some fuzzy adjustments, finally getting a strange text format.", "source": "original", "new_id": 889}
{"id": 157, "function": "ST_CurveToLine", "question": "把那个弯曲的路径从这些点(0 0,100 -100,200 0)开始，变成一条由20段组成的线，确保对称和调整误差，然后用WKT方式来看看结果。", "sql": "SELECT ST_AsText(ST_CurveToLine('CIRCULARSTRING(0 0,100 -100,200 0)'::geometry,20,1,1));", "execution_result": [["LINESTRING(0 0,49.99999999999996 -86.60254037844383,149.99999999999994 -86.6025403784439,200 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that curved path starting from these points (0 0,100 -100,200 0), turn it into a line made up of 20 segments, ensuring symmetry and correcting errors, then see the result in WKT format.", "source": "original", "new_id": 890}
{"id": 154, "function": "ST_CurveToLine", "question": "把那些小点组成的弧形，像是220268 150415, 220227 150505, 220227 150406，变成一条直线的样子，然后告诉我是什么样子。", "sql": "SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)')));", "execution_result": [["LINESTRING(220268 150415,220269.95064912012 150416.53936422797,220271.82341557532 150418.17258804003,220273.61378770717 150419.89573685703,220275.31745235244 150421.70465946247,220276.93030523375 150423.59499800342,220278.4484608472 150425.5621984887,220279.868261823 150427.60152176008,220281.18628773623 150429.70805490916,220282.39936334698 150431.87672311306,220283.50456624987 150434.10230186017,220284.49923391434 150436.37942953626,220285.38097009883 150438.7026203414,220286.14765062364 150441.06627750542,220286.7974284882 150443.46470677113,220287.3287383208 150445.89213011245,220287.74030014945 150448.34269965385,220288.0311224857 150450.8105117587,220288.20050471305 150453.28962125146,220288.24803877485 150455.77405574024,220288.17361015742 150458.25783000473,220287.9773981658 150460.7349604152,220287.6598754919 150463.19947934747,220287.22180707558 150465.6454495596,220286.6642482621 150468.06697849513,220285.9885422594 150470.45823247873,220285.19631690253 150472.81345077007,220284.28948073168 150475.12695944207,220283.27021839464 150477.39318504962,220282.14098538368 150479.60666805677,220280.90450211999 150481.7620759891,220279.56374740007 150483.85421628007,220278.1219512195 150485.8780487805,220276.58258699154 150487.8286979006,220274.94936317948 150489.7014643558,220273.22621436248 150491.49183648766,220271.41729175704 150493.19550113293,220269.5269532161 150494.80835401424,220267.5597527308 150496.3265096277,220265.52042945943 150497.74631060348,220263.41389631035 150499.06433651672,220261.24522810645 150500.27741212747,220259.01964935934 150501.38261503036,220256.74252168325 150502.37728269483,220254.4193308781 150503.25901887933,220252.0556737141 150504.02569940413,220249.65724444838 150504.6754772687,220247.22982110706 150505.20678710128,220244.77925156566 150505.61834892994,220242.3114394608 150505.9091712662,220239.83232996805 150506.07855349354,220237.34789547927 150506.12608755534,220234.86412121478 150506.0516589379,220232.3869908043 150505.85544694628,220229.92247187204 150505.5379242724,220227.4765016599 150505.09985585607,220225.05497272438 150504.5422970426,220222.66371874078 150503.8665910399,220220.30850044944 150503.07436568302,220217.99499177744 150502.16752951217,220215.7287661699 150501.14826717513,220213.51528316273 150500.01903416417,220211.3598752304 150498.78255090048,220209.26773493944 150497.44179618056,220207.24390243902 150496,220205.2932533189 150494.46063577203,220203.4204868637 150492.82741195997,220201.63011473184 150491.10426314297,220199.92645008658 150489.29534053753,220198.31359720527 150487.40500199658,220196.79544159182 150485.4378015113,220195.37564061602 150483.39847823992,220194.0576147028 150481.29194509084,220192.84453909204 150479.12327688694,220191.73933618914 150476.89769813983,220190.74466852468 150474.62057046374,220189.86293234018 150472.2973796586,220189.09625181538 150469.93372249458,220188.4464739508 150467.53529322887,220187.91516411823 150465.10786988755,220187.50360228957 150462.65730034615,220187.21277995332 150460.1894882413,220187.04339772597 150457.71037874854,220186.99586366417 150455.22594425976,220187.0702922816 150452.74216999527,220187.26650427323 150450.2650395848,220187.58402694712 150447.80052065253,220188.02209536344 150445.3545504404,220188.57965417692 150442.93302150487,220189.2553601796 150440.54176752127,220190.0475855365 150438.18654922993,220190.95442170734 150435.87304055793,220191.97368404438 150433.60681495038,220193.10291705534 150431.39333194323,220194.33940031903 150429.2379240109,220195.68015503895 150427.14578371993,220197.1219512195 150425.1219512195,220198.66131544748 150423.1713020994,220200.29453925954 150421.2985356442,220202.01768807654 150419.50816351234,220203.82661068198 150417.80449886707,220205.71694922293 150416.19164598576,220207.68414970822 150414.6734903723,220209.7234729796 150413.25368939652,220211.83000612867 150411.93566348328,220213.99867433257 150410.72258787253,220216.22425307968 150409.61738496964,220218.50138075577 150408.62271730517,220220.82457156092 150407.74098112067,220223.18822872493 150406.97430059587,220225.58665799064 150406.3245227313,220227 150406)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those little dots forming an arc, like 220268 150415, 220227 150505, 220227 150406, and turn it into something like a straight line, then tell me what it looks like.", "source": "original", "new_id": 875}
{"id": 157, "function": "ST_CurveToLine", "question": "把那些弯弯曲曲的点从CIRCULARSTRING(0 0,100 -100,200 0)变成一条由20段小线段组成的折线，每个四分之一圆用20段来近似，保留原始点并且不改变方向，输出转换后的形状的WKT文字。", "sql": "SELECT ST_AsText(ST_CurveToLine('CIRCULARSTRING(0 0,100 -100,200 0)'::geometry,20,1,1));", "execution_result": [["LINESTRING(0 0,49.99999999999996 -86.60254037844383,149.99999999999994 -86.6025403784439,200 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those curvy points from CIRCULARSTRING(0 0,100 -100,200 0) and turn them into a polyline made of 20 little line segments, approximating each quarter-circle with 20 segments, keeping the original points and not changing the direction, and output the WKT text of the converted shape.", "source": "original", "new_id": 891}
{"id": 157, "function": "ST_CurveToLine", "question": "把那些点从圆弧线CIRCULARSTRING(0 0,100 -100,200 0)变成一条由直线段组成的路径，每个四分之一圆用20段线段来画，保持方向不变，最后给我结果的WKT格式。", "sql": "SELECT ST_AsText(ST_CurveToLine('CIRCULARSTRING(0 0,100 -100,200 0)'::geometry,20,1,1));", "execution_result": [["LINESTRING(0 0,49.99999999999996 -86.60254037844383,149.99999999999994 -86.6025403784439,200 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinates from the circular arc line CIRCULARSTRING(0 0,100 -100,200 0) into a path made of straight segments, using 20 segments for each quarter-circle, keeping the direction unchanged, and finally provide the result in WKT format.", "source": "original", "new_id": 892}
{"id": 157, "function": "ST_CurveToLine", "question": "把那个绕来绕去的弧线从(0 0)到(100 -100)再到(200 0)，用20条小线段来画个不太圆的形状，每个四分之一圈都用20条线段，同时确保对称性和误差修正都考虑进去，然后告诉我那个新的形状是什么样的。", "sql": "SELECT ST_AsText(ST_CurveToLine('CIRCULARSTRING(0 0,100 -100,200 0)'::geometry,20,1,1));", "execution_result": [["LINESTRING(0 0,49.99999999999996 -86.60254037844383,149.99999999999994 -86.6025403784439,200 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that winding arc from (0 0) to (100 -100) and then to (200 0), and use 20 little segments to draw a not-so-round shape, with each quarter circle using 20 segments, making sure to consider symmetry and error correction, then tell me what that new shape looks like.", "source": "original", "new_id": 893}
{"id": 159, "function": "ST_FlipCoordinates", "question": "把那个点的横和纵地方调换一下，然后讲出来是啥样子。", "sql": "SELECT ST_AsEWKT(ST_FlipCoordinates(GeomFromEWKT('POINT(1 2)')));", "execution_result": [["POINT(2 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Switch the sideways and up-down parts of that point and tell what it looks like.", "source": "original", "new_id": 900}
{"id": 159, "function": "ST_FlipCoordinates", "question": "把那个二维点(1 2)的顺序调换一下，然后给我一个带编号的文本形式。", "sql": "SELECT ST_AsEWKT(ST_FlipCoordinates(GeomFromEWKT('POINT(1 2)')));", "execution_result": [["POINT(2 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Switch around the order of that 2D point (1 2) and give me a text format with a code.", "source": "original", "new_id": 901}
{"id": 158, "function": "ST_Scroll", "question": "假设有一串小线段从(0 0 0 1)到(10 0 2 0)再到(5 5 4 2)，最后回到(0 0 0 1)，现在想让它从(5 5 4 2)开始，结果是什么样子？", "sql": "SELECT ST_AsEWKT(ST_Scroll('SRID=4326;LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)', 'POINT(5 5 4 2)'));", "execution_result": [["SRID=4326;LINESTRING(5 5 4 2,0 0 0 1,10 0 2 0,5 5 4 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a string of little lines going from (0 0 0 1) to (10 0 2 0) and then to (5 5 4 2), finally back to (0 0 0 1). What does it look like if it starts at (5 5 4 2) now?", "source": "original", "new_id": 894}
{"id": 158, "function": "ST_Scroll", "question": "对于那些三维的小点，像(0 0 0 1)、(10 0 2 0)、(5 5 4 2)，试着用(5 5 4 2)这个点来重新开始，看看会形成什么样的线，把结果用某种特别的字符串格式说出来。", "sql": "SELECT ST_AsEWKT(ST_Scroll('SRID=4326;LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)', 'POINT(5 5 4 2)'));", "execution_result": [["SRID=4326;LINESTRING(5 5 4 2,0 0 0 1,10 0 2 0,5 5 4 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those three-dimensional little dots like (0 0 0 1), (10 0 2 0), (5 5 4 2), try starting again with the point (5 5 4 2) and see what kind of line forms, then describe the result in some special string format.", "source": "original", "new_id": 895}
{"id": 158, "function": "ST_Scroll", "question": "把那条四维线，像是从(0 0 0 1)到(10 0 2 0)再到(5 5 4 2)然后回到原点的样子，拿(5 5 4 2)这个点来做个变动，然后用一种特别的格式说出来。", "sql": "SELECT ST_AsEWKT(ST_Scroll('SRID=4326;LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)', 'POINT(5 5 4 2)'));", "execution_result": [["SRID=4326;LINESTRING(5 5 4 2,0 0 0 1,10 0 2 0,5 5 4 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that four-dimensional line, like going from (0 0 0 1) to (10 0 2 0) then to (5 5 4 2) and back to the starting point, use the point (5 5 4 2) to make some change, and then describe it in a special format.", "source": "original", "new_id": 896}
{"id": 159, "function": "ST_FlipCoordinates", "question": "如果把那些坐标1和2调换一下，你能告诉我它们的特别格式是什么吗？", "sql": "SELECT ST_AsEWKT(ST_FlipCoordinates(GeomFromEWKT('POINT(1 2)')));", "execution_result": [["POINT(2 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you swap those coordinates 1 and 2, can you tell me what their special format is?", "source": "original", "new_id": 903}
{"id": 159, "function": "ST_FlipCoordinates", "question": "把那个二维小点(1 2)的横竖位置换一下，然后用那个特别格式告诉我结果。", "sql": "SELECT ST_AsEWKT(ST_FlipCoordinates(GeomFromEWKT('POINT(1 2)')));", "execution_result": [["POINT(2 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Switch the horizontal and vertical positions of that little 2D dot (1 2), then tell me the result in that special format.", "source": "original", "new_id": 902}
{"id": 158, "function": "ST_Scroll", "question": "假如有一条线 LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2, 0 0 0 1)，还有一个点 POINT(5 5 4 2)，用这个点对线做某种调整后，请问能得到什么样的结果？结果需要是 EWKT 格式，线的坐标系是 4326。", "sql": "SELECT ST_AsEWKT(ST_Scroll('SRID=4326;LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)', 'POINT(5 5 4 2)'));", "execution_result": [["SRID=4326;LINESTRING(5 5 4 2,0 0 0 1,10 0 2 0,5 5 4 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine there's a line LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2, 0 0 0 1) and a point POINT(5 5 4 2). After using this point to make some kind of adjustment to the line, what would the result look like? The result needs to be in EWKT format, and the line uses coordinate system 4326.", "source": "original", "new_id": 899}
{"id": 159, "function": "ST_FlipCoordinates", "question": "给我看看如果你把那个点的1和2交换一下，会变成什么样子呢？用EWKT的方式说出来。", "sql": "SELECT ST_AsEWKT(ST_FlipCoordinates(GeomFromEWKT('POINT(1 2)')));", "execution_result": [["POINT(2 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what it looks like if you swap the 1 and 2 of that point. Say it in EWKT style.", "source": "original", "new_id": 905}
{"id": 158, "function": "ST_Scroll", "question": "用点(5 5 4 2)当作中心，对那些坐标组成的闭合线进行一种旋转，看看结果会是什么样的格式，注意它是有个4326标记的。", "sql": "SELECT ST_AsEWKT(ST_Scroll('SRID=4326;LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)', 'POINT(5 5 4 2)'));", "execution_result": [["SRID=4326;LINESTRING(5 5 4 2,0 0 0 1,10 0 2 0,5 5 4 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Using the point (5 5 4 2) as a center, apply a kind of twist to the closed line made by those coordinates, and see what the format of the result looks like, noting it's marked with 4326.", "source": "original", "new_id": 897}
{"id": 158, "function": "ST_Scroll", "question": "把那条线串几何LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2, 0 0 0 1)用点POINT(5 5 4 2)作为中心点滚动一下，结果是什么样的EWKT字符串呢？", "sql": "SELECT ST_AsEWKT(ST_Scroll('SRID=4326;LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2,0 0 0 1)', 'POINT(5 5 4 2)'));", "execution_result": [["SRID=4326;LINESTRING(5 5 4 2,0 0 0 1,10 0 2 0,5 5 4 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What does the EWKT string look like after rolling that LINESTRING geometry LINESTRING(0 0 0 1, 10 0 2 0, 5 5 4 2, 0 0 0 1) using the point POINT(5 5 4 2) as the center?", "source": "original", "new_id": 898}
{"id": 159, "function": "ST_FlipCoordinates", "question": "把那个坐标里的1和2位置换一下，然后看看它变成什么样子。", "sql": "SELECT ST_AsEWKT(ST_FlipCoordinates(GeomFromEWKT('POINT(1 2)')));", "execution_result": [["POINT(2 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Swap the positions of 1 and 2 in that coordinate, and see what it turns into.", "source": "original", "new_id": 904}
{"id": 160, "function": "ST_Force2D", "question": "把那个有趣的三维曲线串CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)弄成平面的样子，然后看看它的那种特别长的文本样子。", "sql": "SELECT ST_AsEWKT(ST_Force2D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that interesting 3D curve string CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) and make it look flat, then check out its special long text form.", "source": "original", "new_id": 906}
{"id": 160, "function": "ST_Force2D", "question": "把那个包含点(1 1 2), (2 3 2), (4 5 2), (6 7 2), (5 6 2)的三维弯曲线，想象成一个平面上的形状，然后用一种特别的文字格式来描述它。", "sql": "SELECT ST_AsEWKT(ST_Force2D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine the 3D bendy line with points (1 1 2), (2 3 2), (4 5 2), (6 7 2), (5 6 2) as a shape on a plane, then describe it using a special text format.", "source": "original", "new_id": 908}
{"id": 160, "function": "ST_Force2D", "question": "对于那条三维的圆形弯曲线，像是1 1 2, 2 3 2等点的集合，能不能把它变成只用地面上的坐标描述的样子，然后告诉我那个长格式的字符串？", "sql": "SELECT ST_AsEWKT(ST_Force2D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that 3D circular bend line, like the collection of points 1 1 2, 2 3 2, can you turn it into something described only with ground-level coordinates, and then tell me that long-format string?", "source": "original", "new_id": 909}
{"id": 160, "function": "ST_Force2D", "question": "拿一个有五个点组成的弯曲线，其中这些点是(1 1 2)、(2 3 2)、(4 5 2)、(6 7 2)、(5 6 2)，把它变成只有平面上那种样子，然后输出它的完整描述。", "sql": "SELECT ST_AsEWKT(ST_Force2D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a curved line made of five points, where the points are (1 1 2), (2 3 2), (4 5 2), (6 7 2), (5 6 2), turn it into something that only exists on a flat plane, and then output its full description.", "source": "original", "new_id": 907}
{"id": 160, "function": "ST_Force2D", "question": "把那个有点弯曲的线条从三维转换成看起来像二维的，然后给我它的完整形状描述。", "sql": "SELECT ST_AsEWKT(ST_Force2D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that somewhat curved line from 3D into something that looks 2D, then give me its full shape description.", "source": "original", "new_id": 911}
{"id": 160, "function": "ST_Force2D", "question": "你能把这些像弯弯小线一样的点，1 1 2到5 6 2，变成一个平面图形，然后给我它的完整文字说明吗？", "sql": "SELECT ST_AsEWKT(ST_Force2D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you take these points that are like a curvy little line, from 1 1 2 to 5 6 2, turn them into a flat shape, and give me its full written description?", "source": "original", "new_id": 910}
{"id": 161, "function": "ST_Force2D", "question": "把那个三维里有点高的多边形，像是0 0 2这些点，变成平面的样子，然后给我它的全名样子。", "sql": "SELECT ST_AsEWKT(ST_Force2D('POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))'));", "execution_result": [["POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 3D polygon with a bit of height, like the points 0 0 2, and make it flat, then give me its full name form.", "source": "original", "new_id": 912}
{"id": 161, "function": "ST_Force2D", "question": "把那个有两个圈的立体形状变成平面的样子，给我它的EWKT形式。", "sql": "SELECT ST_AsEWKT(ST_Force2D('POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))'));", "execution_result": [["POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that 3D shape with two circles into a flat version and give me its EWKT form.", "source": "original", "new_id": 913}
{"id": 161, "function": "ST_Force2D", "question": "把那个有点高的多边形，像是0 0 2到5 0 2这样的点，想象成平面的，然后看看它的详细描述。", "sql": "SELECT ST_AsEWKT(ST_Force2D('POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))'));", "execution_result": [["POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that slightly elevated polygon, like the points from 0 0 2 to 5 0 2, imagine it on a flat surface, and see its detailed description.", "source": "original", "new_id": 914}
{"id": 162, "function": "ST_Force3D", "question": "把那些包含1 1 2到5 6 2的小圆弧线变成一个三维的形状，然后看看它的EWKT样子。", "sql": "SELECT ST_AsEWKT(ST_Force3D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those little arcs from 1 1 2 to 5 6 2 and make them into a 3D shape, then see what its EWKT looks like.", "source": "original", "new_id": 918}
{"id": 161, "function": "ST_Force2D", "question": "把那个有高度的多边形，像0 0 2这样的，变成没有高度的，然后告诉我它变成后的样子。", "sql": "SELECT ST_AsEWKT(ST_Force2D('POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))'));", "execution_result": [["POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that polygon with heights, like 0 0 2, flatten it out to lose the height, and then let me know how it looks.", "source": "original", "new_id": 916}
{"id": 161, "function": "ST_Force2D", "question": "给那个有点立体感的多边形，去掉它的高度，看看它变成平面的样子，用某种字符串方式表达出来。", "sql": "SELECT ST_AsEWKT(ST_Force2D('POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))'));", "execution_result": [["POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that polygon which has a bit of a 3D feel, remove its height, and see how it looks flat, expressed in some kind of string format.", "source": "original", "new_id": 917}
{"id": 163, "function": "ST_Force3D", "question": "把那些点连接成的平面图形，想办法让它有第三个数字，最后用一种特别的方式展示出来。", "sql": "SELECT ST_AsEWKT(ST_Force3D('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that flat shape formed by connecting the dots, find a way to give it a third number, and finally show it in a special way.", "source": "original", "new_id": 924}
{"id": 163, "function": "ST_Force3D", "question": "给我看看那个多边形的样子，把它变成三维的，数值里加个0，然后告诉我它的高级格式结果。", "sql": "SELECT ST_AsEWKT(ST_Force3D('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what that polygon looks like, turn it into a three-dimensional shape, add a zero to the numbers, and tell me its fancy format result.", "source": "original", "new_id": 927}
{"id": 162, "function": "ST_Force3D", "question": "把那个有五个点的圆弧线，像是(1 1 2)、(2 3 2)、(4 5 2)、(6 7 2)、(5 6 2)，变成一种三维的形状，然后看看它的EWKT是什么样子。", "sql": "SELECT ST_AsEWKT(ST_Force3D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that arc with five dots, like (1 1 2), (2 3 2), (4 5 2), (6 7 2), (5 6 2), turn it into a kind of 3D shape, and see what its EWKT looks like.", "source": "original", "new_id": 919}
{"id": 162, "function": "ST_Force3D", "question": "把那些点连成的圆弧线，像是1 1 2到5 6 2这样的，变成一个有深度的形状，然后看看它的EWKT样子。", "sql": "SELECT ST_AsEWKT(ST_Force3D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the arc made by those points, like from 1 1 2 to 5 6 2, into a shape with depth and check out its EWKT look.", "source": "original", "new_id": 923}
{"id": 164, "function": "ST_Force3DZ", "question": "把那些像圆圈的线条，经过一些处理，变成有高度的形状，然后用一种特别的表达方式展示出来。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those circular-like lines, process them into shapes with height, and then display them using a special representation.", "source": "original", "new_id": 930}
{"id": 163, "function": "ST_Force3D", "question": "有一个图形，它有外面的一圈是(0 0,0 5,5 0,0 0)，里面的一圈是(1 1,3 1,1 3,1 1)。把它弄成有第三个数字的版本，然后用一种特别的格式展示出来。", "sql": "SELECT ST_AsEWKT(ST_Force3D('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a shape with an outer loop of (0 0,0 5,5 0,0 0) and an inner loop of (1 1,3 1,1 3,1 1). Make it into a version with a third number, and show it in a special format.", "source": "original", "new_id": 925}
{"id": 163, "function": "ST_Force3D", "question": "把这个二维的多边形，像是画在纸上的形状，转换成带有第三个维度的样子，然后显示它的特别字符串形式，Z的数值全是0。", "sql": "SELECT ST_AsEWKT(ST_Force3D('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take this 2D polygon, like a shape drawn on paper, turn it into something with a third dimension, and then show its special string format, with Z values all set to 0.", "source": "original", "new_id": 929}
{"id": 162, "function": "ST_Force3D", "question": "把那些坐标像圆弧一样排列的线，变成一个有高度的形状，并用特定格式显示出来。", "sql": "SELECT ST_AsEWKT(ST_Force3D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform the coordinates arranged like an arc into a shape with height, and display it in a specific format.", "source": "original", "new_id": 920}
{"id": 163, "function": "ST_Force3D", "question": "把那个二维的多边形，像是包含边界和一些小区域的形状，弄成三维的，然后给我它的字符串形式，记得加上Z方向的值为0。", "sql": "SELECT ST_AsEWKT(ST_Force3D('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 2D polygon, like a shape with boundaries and some small areas, turn it into 3D, and give me its string format, making sure to include Z values as 0.", "source": "original", "new_id": 928}
{"id": 163, "function": "ST_Force3D", "question": "把那个平面上的多边形，像是(0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1)这些点，变成一种三维的样子，默认加个0在高度上，然后看看它的完整描述是什么。", "sql": "SELECT ST_AsEWKT(ST_Force3D('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that flat shape with points like (0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1) and make it look three-dimensional, adding a 0 for height by default, then see what its full description is.", "source": "original", "new_id": 926}
{"id": 161, "function": "ST_Force2D", "question": "把那个有点立体感的多边形，像POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))，弄成一个平面版本，然后要它的EWKT格式文字。", "sql": "SELECT ST_AsEWKT(ST_Force2D('POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))'));", "execution_result": [["POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that slightly 3D-looking polygon, like POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2)), turn it into a flat version, and get its EWKT format text.", "source": "original", "new_id": 915}
{"id": 162, "function": "ST_Force3D", "question": "把那些像弯曲的线条形状的数据，用三维的方式处理一下，并用一种带数字标记的格式输出，比如CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)。", "sql": "SELECT ST_AsEWKT(ST_Force3D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those curved line-like data and handle them in a 3D way, then output them in a format that includes some numeric markers, like CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2).", "source": "original", "new_id": 922}
{"id": 162, "function": "ST_Force3D", "question": "把那个弯弯的线条，像CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)这样的，弄成三维的，然后看看它的EWKT长什么样子。", "sql": "SELECT ST_AsEWKT(ST_Force3D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that curved line, something like CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2), turn it into a 3D thing, and see what its EWKT looks like.", "source": "original", "new_id": 921}
{"id": 165, "function": "ST_Force3DZ", "question": "把那些点组成的形状，经过处理后加上第三个数值，看看它变成了什么格式的字符串。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After adding a third number to those points forming a shape, see what format the string becomes.", "source": "original", "new_id": 936}
{"id": 164, "function": "ST_Force3DZ", "question": "把那些圆弧上的点，比如(1 1 2)和(2 3 2)等等，变成一种有三层信息的形状，然后看看它的特别字符串是什么。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those points on a circular arc, like (1 1 2) and (2 3 2), and turn them into a shape with three layers of information, then see what its special string looks like.", "source": "original", "new_id": 934}
{"id": 165, "function": "ST_Force3DZ", "question": "把那个包含外边缘和内边缘的平面形状变成带有第三个维度的小点串，默认那个额外的数值为0，然后给我它的特殊长格式结果。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform that flat shape with outer and inner edges into a string of little dots with a third dimension, defaulting that extra number to 0, and then give me its special long format result.", "source": "original", "new_id": 937}
{"id": 164, "function": "ST_Force3DZ", "question": "把那条圆弧线CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)变成三维的样子，然后看看它的特别字符串样式。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that circular arc line CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2) and make it look 3D, then check out its special string style.", "source": "original", "new_id": 935}
{"id": 165, "function": "ST_Force3DZ", "question": "给那个有洞的几何形状加个第三个维度，然后告诉我它的字符串形式，记得把所有Z坐标设成0。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that polygon with a hole, add a third dimension, and then tell me its string form, making sure all Z values are set to 0.", "source": "original", "new_id": 939}
{"id": 164, "function": "ST_Force3DZ", "question": "请把那些有点像圆的线段，包含点(1 1 2), (2 3 2), (4 5 2), (6 7 2), (5 6 2)，转换成三维的样子，然后告诉我它的EWKT是什么。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you take those line segments that are kind of circular, including points (1 1 2), (2 3 2), (4 5 2), (6 7 2), (5 6 2), turn them into a 3D form, and then tell me its EWKT?", "source": "original", "new_id": 933}
{"id": 164, "function": "ST_Force3DZ", "question": "你能把那些像圆弧的点串，坐标是1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2，变成一个带有第三个数字的立体形状，然后用特别的字符串格式展示吗？", "sql": "SELECT ST_AsEWKT(ST_Force3DZ(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you take those arc-like dots, coordinates being 1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2, turn them into a shape with a third number, and show it using a special string format?", "source": "original", "new_id": 932}
{"id": 164, "function": "ST_Force3DZ", "question": "把用这些点(1 1 2)、(2 3 2)、(4 5 2)、(6 7 2)、(5 6 2)画出来的弯弯曲曲的线条，变成一个带高度的形状，然后用一种长长的字符串方式表现出来。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the wavy line drawn with these points (1 1 2), (2 3 2), (4 5 2), (6 7 2), (5 6 2), turn it into a shape with height, and then express it in a long string format.", "source": "original", "new_id": 931}
{"id": 165, "function": "ST_Force3DZ", "question": "把那个由点(0 0)、(0 5)、(5 0)、(0 0)围成的区域，还有里面小圈(1 1)、(3 1)、(1 3)、(1 1)，想象成一个立体的东西（假设高度是0），然后用一种特别的字符串方式来描述它。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine that area made by the points (0 0), (0 5), (5 0), (0 0), and the small circle inside (1 1), (3 1), (1 3), (1 1), as something 3D (assuming height is 0), and then describe it using a special string format.", "source": "original", "new_id": 938}
{"id": 165, "function": "ST_Force3DZ", "question": "把一个由二维坐标构成的区域形状转换成带有第三个维度值的样子（默认Z值是0），然后告诉我它变成了怎样的格式字符串。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a region shape made of 2D coordinates and turn it into something with a third dimension value (default Z value is 0), then let me know what its format string looks like.", "source": "original", "new_id": 941}
{"id": 166, "function": "ST_Force3DM", "question": "把那些圆滑的线段，像1 1 2到5 6 2这样的，转换成一种三维形状，然后看看它的特别字符串格式是什么。", "sql": "SELECT ST_AsEWKT(ST_Force3DM(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRINGM(1 1 0,2 3 0,4 5 0,6 7 0,5 6 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those smooth line segments, like from 1 1 2 to 5 6 2, turn them into a kind of three-dimensional shape, and see what its special string format looks like.", "source": "original", "new_id": 945}
{"id": 166, "function": "ST_Force3DM", "question": "把那个圆弧线，像是1 1 2这样的点串，变成包含M值的3D形状，然后看看它的EWKT样子。", "sql": "SELECT ST_AsEWKT(ST_Force3DM(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRINGM(1 1 0,2 3 0,4 5 0,6 7 0,5 6 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that circular line, with points like 1 1 2, and turn it into a 3D shape with M-values, then check out its EWKT appearance.", "source": "original", "new_id": 944}
{"id": 166, "function": "ST_Force3DM", "question": "把那些坐标像1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2的圆弧变成有额外维度的3D对象，并看看它的格式结果。", "sql": "SELECT ST_AsEWKT(ST_Force3DM(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRINGM(1 1 0,2 3 0,4 5 0,6 7 0,5 6 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinates like 1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2 from an arc into a 3D thing with extra values, and check out its format result.", "source": "original", "new_id": 942}
{"id": 166, "function": "ST_Force3DM", "question": "把那个由五个位置(1 1 2)、(2 3 2)、(4 5 2)、(6 7 2)、(5 6 2)组成的弯曲线，变成一种能显示更多维度的格式，然后看看它的特殊字符串是什么。", "sql": "SELECT ST_AsEWKT(ST_Force3DM(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRINGM(1 1 0,2 3 0,4 5 0,6 7 0,5 6 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that curvy line made up of five spots (1 1 2), (2 3 2), (4 5 2), (6 7 2), (5 6 2), turn it into a format that can show more dimensions, and then see what its special string looks like.", "source": "original", "new_id": 943}
{"id": 165, "function": "ST_Force3DZ", "question": "把那个由点组成的平面形状变成有高度的版本，然后用某种格式输出，保持那些点的坐标不变，比如(0 0, 0 5, 5 0, 0 0)和(1 1, 3 1, 1 3, 1 1)。", "sql": "SELECT ST_AsEWKT(ST_Force3DZ('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));", "execution_result": [["POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform that flat shape made of dots into a version with height, then output it in some format, keeping the coordinates like (0 0, 0 5, 5 0, 0 0) and (1 1, 3 1, 1 3, 1 1) unchanged.", "source": "original", "new_id": 940}
{"id": 166, "function": "ST_Force3DM", "question": "把那个圆形的线串变成一种三维的东西，记得要有M值，然后看看它的EWKT格式是什么。", "sql": "SELECT ST_AsEWKT(ST_Force3DM(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRINGM(1 1 0,2 3 0,4 5 0,6 7 0,5 6 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that circular line into some kind of three-dimensional thing, make sure it has M-values, then check what its EWKT format is.", "source": "original", "new_id": 947}
{"id": 166, "function": "ST_Force3DM", "question": "把这几个点连起来像圆弧的那种，用它们的坐标1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2弄成三维的，然后看看它的扩展格式是什么样子。", "sql": "SELECT ST_AsEWKT(ST_Force3DM(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRINGM(1 1 0,2 3 0,4 5 0,6 7 0,5 6 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take these points connected like an arc with coordinates 1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2, make them into a 3D shape, and see what its extended format looks like.", "source": "original", "new_id": 946}
{"id": 167, "function": "ST_Force3DM", "question": "把有高高的Z的小多边形，像这样：POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))，变成有那个M的立体形状，然后用某种特别的格式表达出来。", "sql": "SELECT ST_AsEWKT(ST_Force3DM('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["POLYGONM((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the little polygon with the tall Zs, like this: POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)), turn it into a 3D shape with that M thing, and then express it in some special format.", "source": "original", "new_id": 950}
{"id": 167, "function": "ST_Force3DM", "question": "把那个有些高低起伏的形状，即有Z坐标的多边形，变成带有额外标记的3D图形，然后用一种特殊的字符串方式表示出来。形状的坐标是(0 0 1,0 5 1,5 0 1,0 0 1)和(1 1 1,3 1 1,1 3 1,1 1 1)。", "sql": "SELECT ST_AsEWKT(ST_Force3DM('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["POLYGONM((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that shape with ups and downs, meaning the polygon with Z coordinates, into a 3D figure with extra markings, and display it using a special string format. The shape's coordinates are (0 0 1,0 5 1,5 0 1,0 0 1) and (1 1 1,3 1 1,1 3 1,1 1 1).", "source": "original", "new_id": 948}
{"id": 167, "function": "ST_Force3DM", "question": "把有些高低起伏的多边形，外面是(0 0 1,0 5 1,5 0 1,0 0 1)和里面是(1 1 1,3 1 1,1 3 1,1 1 1)的结构，变成一种更复杂的三维形状，然后看看它的样子。", "sql": "SELECT ST_AsEWKT(ST_Force3DM('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["POLYGONM((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the polygon with ups and downs, with outside (0 0 1,0 5 1,5 0 1,0 0 1) and inside (1 1 1,3 1 1,1 3 1,1 1 1) parts, turn it into a more complex three-dimensional shape, and see what it looks like.", "source": "original", "new_id": 949}
{"id": 168, "function": "ST_Force4D", "question": "把那些在空间里绕圈的点，像(1 1 2), (2 3 2), (4 5 2), (6 7 2), (5 6 2)，想象成更高维度的形状，然后看看它的特殊格式是什么。", "sql": "SELECT ST_AsEWKT(ST_Force4D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2 0,2 3 2 0,4 5 2 0,6 7 2 0,5 6 2 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine those points looping in space, like (1 1 2), (2 3 2), (4 5 2), (6 7 2), (5 6 2), as a shape in a higher dimension, then see what its special format is.", "source": "original", "new_id": 954}
{"id": 168, "function": "ST_Force4D", "question": "把那些坐标串1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2弄成一个更复杂的四维东西，看看它的EWKT是什么。", "sql": "SELECT ST_AsEWKT(ST_Force4D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2 0,2 3 2 0,4 5 2 0,6 7 2 0,5 6 2 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those coordinate strings 1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2 and turn them into a more complex 4D thing, then see what its EWKT is.", "source": "original", "new_id": 957}
{"id": 168, "function": "ST_Force4D", "question": "把那些点组成的弯曲线条，比如像(1 1 2)、(2 3 2)、(4 5 2)、(6 7 2)、(5 6 2)这样的，变成一个更复杂的形状，看看它的特别字符串是什么。", "sql": "SELECT ST_AsEWKT(ST_Force4D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2 0,2 3 2 0,4 5 2 0,6 7 2 0,5 6 2 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those points that form a curved line, like (1 1 2), (2 3 2), (4 5 2), (6 7 2), (5 6 2), and turn it into a more complex shape to see what its special string is.", "source": "original", "new_id": 955}
{"id": 167, "function": "ST_Force3DM", "question": "把那个有点高度的多边形，带着那些点的M值，弄成一个包含坐标系统的字符串格式，形状就像POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))。", "sql": "SELECT ST_AsEWKT(ST_Force3DM('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["POLYGONM((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that polygon with a hint of height, add M values to those points, and turn it into a string format that includes the coordinate system, like the shape POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)).", "source": "original", "new_id": 952}
{"id": 167, "function": "ST_Force3DM", "question": "把那个有Z值的形状，像是包含点(0 0 1),(0 5 1),(5 0 1),(0 0 1)和(1 1 1),(3 1 1),(1 3 1),(1 1 1)的，变成有M值的三维形状，并弄成EWKT格式的字符串。", "sql": "SELECT ST_AsEWKT(ST_Force3DM('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["POLYGONM((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that shape with Z values, like the one covering points (0 0 1), (0 5 1), (5 0 1), (0 0 1) and (1 1 1), (3 1 1), (1 3 1), (1 1 1), turn it into a 3D shape with M values, and make it into an EWKT format string.", "source": "original", "new_id": 953}
{"id": 168, "function": "ST_Force4D", "question": "把那串圆弧线，像CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)这样的，变成一个有四个维度的形状，然后看看它的字符串表示是什么。", "sql": "SELECT ST_AsEWKT(ST_Force4D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2 0,2 3 2 0,4 5 2 0,6 7 2 0,5 6 2 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that circular line, like CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2), and turn it into a shape with four dimensions, then see what its string representation looks like.", "source": "original", "new_id": 956}
{"id": 169, "function": "ST_Force4D", "question": "把那些有额外数字的线条组合，变成一种有四个方向的东西，然后告诉我它的EWKT样子。", "sql": "SELECT ST_AsEWKT(ST_Force4D('MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["MULTILINESTRING((0 0 0 1,0 5 0 2,5 0 0 3,0 0 0 4),(1 1 0 1,3 1 0 1,1 3 0 1,1 1 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those lines with extra numbers and turn them into something with four dimensions, then tell me what its EWKT looks like.", "source": "original", "new_id": 963}
{"id": 168, "function": "ST_Force4D", "question": "你能帮忙看看这个弯曲线条，一串像是1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2这样的数字，然后变成一种复杂的形状吗？我想知道它的特殊文本表示，它应该有一些额外的信息。", "sql": "SELECT ST_AsEWKT(ST_Force4D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2 0,2 3 2 0,4 5 2 0,6 7 2 0,5 6 2 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you help with this curvy line, a sequence like 1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2, and turn it into some complicated shape? I want to know its special text representation, and it should have some extra information.", "source": "original", "new_id": 958}
{"id": 167, "function": "ST_Force3DM", "question": "把那个包含高度值的多边形改成带额外维度的样子，然后用一种特定的字符串形式输出，包括一些额外的信息，比如坐标系统之类的。", "sql": "SELECT ST_AsEWKT(ST_Force3DM('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["POLYGONM((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change that polygon with height values into one with an extra dimension, then output it in a specific string format, including extra details like the coordinate system.", "source": "original", "new_id": 951}
{"id": 168, "function": "ST_Force4D", "question": "把那个由(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)组成的三维弯曲线变成有四个维度的样子，然后看看它的特殊字符串样子。", "sql": "SELECT ST_AsEWKT(ST_Force4D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));", "execution_result": [["CIRCULARSTRING(1 1 2 0,2 3 2 0,4 5 2 0,6 7 2 0,5 6 2 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 3D wavy line made up of (1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2), turn it into something with four dimensions, and then see its special string look.", "source": "original", "new_id": 959}
{"id": 169, "function": "ST_Force4D", "question": "把那个带着M值的多段线，像是'((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'，想办法变成一个有四个方向的物体，然后用某种复杂格式呈现出来。", "sql": "SELECT ST_AsEWKT(ST_Force4D('MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["MULTILINESTRING((0 0 0 1,0 5 0 2,5 0 0 3,0 0 0 4),(1 1 0 1,3 1 0 1,1 3 0 1,1 1 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that multiline with M-values, like '((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))', and somehow turn it into an object with four directions, then present it in some complex format.", "source": "original", "new_id": 962}
{"id": 169, "function": "ST_Force4D", "question": "把那些带有神秘数字的线条变成四个维度的东西，然后看看它的特别字符串是什么样的。", "sql": "SELECT ST_AsEWKT(ST_Force4D('MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["MULTILINESTRING((0 0 0 1,0 5 0 2,5 0 0 3,0 0 0 4),(1 1 0 1,3 1 0 1,1 3 0 1,1 1 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those lines with mysterious numbers into something with four dimensions, and then see what its special string looks like.", "source": "original", "new_id": 965}
{"id": 169, "function": "ST_Force4D", "question": "把有点像两条线的那个几何数据MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))，弄成四维的，然后看看它的扩展格式是什么。", "sql": "SELECT ST_AsEWKT(ST_Force4D('MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["MULTILINESTRING((0 0 0 1,0 5 0 2,5 0 0 3,0 0 0 4),(1 1 0 1,3 1 0 1,1 3 0 1,1 1 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that geometry data that looks like two lines, MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1)), make it four-dimensional, and see what its extended format is.", "source": "original", "new_id": 964}
{"id": 169, "function": "ST_Force4D", "question": "把一个有两条线的小集合，第一条线走的是(0 0 1)到(0 5 2)到(5 0 3)再回到(0 0 4)，第二条线是(1 1 1)到(3 1 1)到(1 3 1)又回到(1 1 1)，整理成一种四维的描述，最后看看它的完整表示形式。", "sql": "SELECT ST_AsEWKT(ST_Force4D('MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["MULTILINESTRING((0 0 0 1,0 5 0 2,5 0 0 3,0 0 0 4),(1 1 0 1,3 1 0 1,1 3 0 1,1 1 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a small group of two paths, where the first path goes from (0 0 1) to (0 5 2) to (5 0 3) and back to (0 0 4), and the second path goes from (1 1 1) to (3 1 1) to (1 3 1) and back to (1 1 1). Organize it into some kind of four-dimensional description and check its full representation.", "source": "original", "new_id": 961}
{"id": 170, "function": "ST_ForceCollection", "question": "把那个外面的小圈和里面的小圈组成的立体形状变成一个集合，然后告诉我它的EWKT是什么。", "sql": "SELECT ST_AsEWKT(ST_ForceCollection('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that 3D shape made of the outer loop and inner loop into a collection, then tell me what its EWKT is.", "source": "original", "new_id": 967}
{"id": 169, "function": "ST_Force4D", "question": "把那些线段集合，带着它们的附加数字，变成一个四维的形状，看它的特别格式是什么。", "sql": "SELECT ST_AsEWKT(ST_Force4D('MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["MULTILINESTRING((0 0 0 1,0 5 0 2,5 0 0 3,0 0 0 4),(1 1 0 1,3 1 0 1,1 3 0 1,1 1 0 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those line groups with their extra numbers and turn them into a four-dimensional shape, then see what its special format looks like.", "source": "original", "new_id": 960}
{"id": 170, "function": "ST_ForceCollection", "question": "把那个三维的多边形形状，像是0 0 1到5 0 1的那些点，变成一个包含它们的集合，然后说出它的EWKT样子。", "sql": "SELECT ST_AsEWKT(ST_ForceCollection('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 3D polygon shape, like those points from 0 0 1 to 5 0 1, turn it into a collection that includes them, and tell what its EWKT form looks like.", "source": "original", "new_id": 966}
{"id": 171, "function": "ST_ForceCollection", "question": "把那个弧形的线条，像是220227 150406到2220227 150407再回到220227 150406的，弄成一个装东西的集合，然后看看它的文本形式。", "sql": "SELECT ST_AsText(ST_ForceCollection('CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'));", "execution_result": [["GEOMETRYCOLLECTION(CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that curved line, like from 220227 150406 to 2220227 150407 and back to 220227 150406, turn it into some kind of container collection, and check its text form.", "source": "original", "new_id": 972}
{"id": 170, "function": "ST_ForceCollection", "question": "把那个3D形状的东西，里面有些点像(0 0 1)和(5 0 1)，变成一个能装下它的集合，然后用一种特别的文字格式看看。", "sql": "SELECT ST_AsEWKT(ST_ForceCollection('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 3D shape thing, with points like (0 0 1) and (5 0 1), turn it into a collection that can hold it, then view it in a special text format.", "source": "original", "new_id": 968}
{"id": 171, "function": "ST_ForceCollection", "question": "把三个坐标点(220227 150406)、(2220227 150407)、(220227 150406)画出的弧线变成一个集合，然后给我它的文字样子。", "sql": "SELECT ST_AsText(ST_ForceCollection('CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'));", "execution_result": [["GEOMETRYCOLLECTION(CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the arc made by those three points (220227 150406), (2220227 150407), (220227 150406) into a collection, and then give me its text form.", "source": "original", "new_id": 973}
{"id": 170, "function": "ST_ForceCollection", "question": "把那些带有高度的小形状，包括坐标0 0 1到5 0 1，还有1 1 1到1 3 1，转换成一个包含多种东西的大集合，然后给我看它的特殊文本形式。", "sql": "SELECT ST_AsEWKT(ST_ForceCollection('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert those height-including little shapes, covering coordinates from 0 0 1 to 5 0 1, and from 1 1 1 to 1 3 1, into a big collection of various things, then show me its special text form.", "source": "original", "new_id": 971}
{"id": 171, "function": "ST_ForceCollection", "question": "把那个圆形的弯曲线，像是220227 150406、2220227 150407这样的点，弄成一个包含各种形状的集合，然后用某种格式来看看结果。", "sql": "SELECT ST_AsText(ST_ForceCollection('CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'));", "execution_result": [["GEOMETRYCOLLECTION(CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that circular curvy line, like points 220227 150406, 2220227 150407, and turn it into a collection of various shapes, then view the result in some format.", "source": "original", "new_id": 974}
{"id": 170, "function": "ST_ForceCollection", "question": "把那个三维的多边形，像是包含了这些点(0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)，变成一个集合形态，然后用EWKT方式表达出来。", "sql": "SELECT ST_AsEWKT(ST_ForceCollection('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 3D shape with points like (0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1), transform it into a collection form, and express it using the EWKT style.", "source": "original", "new_id": 969}
{"id": 171, "function": "ST_ForceCollection", "question": "把那些弯弯曲曲的线条，像220227 150406这样的，转换成一个包罗万象的几何集合，然后给我它的描述字符串。", "sql": "SELECT ST_AsText(ST_ForceCollection('CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'));", "execution_result": [["GEOMETRYCOLLECTION(CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those curvy lines, like 220227 150406, and turn them into a comprehensive geometry collection, then give me its description string.", "source": "original", "new_id": 975}
{"id": 170, "function": "ST_ForceCollection", "question": "把那个有点复杂的三维形状变成一个集合，然后用一种特殊格式展示，记得带上坐标信息，比如像(0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)这样的。", "sql": "SELECT ST_AsEWKT(ST_ForceCollection('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that somewhat complex 3D shape into a collection, and then display it in a special format, including coordinate details like (0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1).", "source": "original", "new_id": 970}
{"id": 171, "function": "ST_ForceCollection", "question": "把这条圆弧线CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)变成集合的样子，然后用文字形式展示。", "sql": "SELECT ST_AsText(ST_ForceCollection('CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'));", "execution_result": [["GEOMETRYCOLLECTION(CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the circular arc line CIRCULARSTRING(220227 150406,2220227 150407,220227 150406) into something like a collection, then show it in a text format.", "source": "original", "new_id": 976}
{"id": 173, "function": "ST_ForceCurve", "question": "把那些有点像楼梯的3D多边形，里面有几个点，像是(0 0 2), (5 0 2)这样的，弄成有点弯曲的形状，然后看看它的文字样子。", "sql": "SELECT ST_AsText( ST_ForceCurve( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))'::geometry ) );", "execution_result": [["CURVEPOLYGON Z ((0 0 2,5 0 2,0 5 2,0 0 2),(1 1 2,1 3 2,3 1 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those stair-like 3D polygons, with points like (0 0 2), (5 0 2), and turn them into something a bit curved, then see what it looks like in text form.", "source": "original", "new_id": 978}
{"id": 171, "function": "ST_ForceCollection", "question": "把那个弯弯的线，像CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)这样的，变成一种可以装很多几何的形式，然后看看它的WKT长什么样。", "sql": "SELECT ST_AsText(ST_ForceCollection('CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'));", "execution_result": [["GEOMETRYCOLLECTION(CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that curved line, like CIRCULARSTRING(220227 150406,2220227 150407,220227 150406), turn it into a form that can hold multiple geometries, and see what its WKT looks like.", "source": "original", "new_id": 977}
{"id": 173, "function": "ST_ForceCurve", "question": "把那个三维的形状，里面有些点是像这样：0 0 2, 5 0 2, 0 5 2，还有些小圈，变成一种弯曲的样子，然后给我它的字符串形式。", "sql": "SELECT ST_AsText( ST_ForceCurve( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))'::geometry ) );", "execution_result": [["CURVEPOLYGON Z ((0 0 2,5 0 2,0 5 2,0 0 2),(1 1 2,1 3 2,3 1 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 3D shape, with some points like this: 0 0 2, 5 0 2, 0 5 2, and some little loops, transform it to a kind of curved form, and give me its string representation.", "source": "original", "new_id": 981}
{"id": 173, "function": "ST_ForceCurve", "question": "把那个有外圈和内圈的小三维形状，坐标是0 0 2、5 0 2、0 5 2、0 0 2，还有1 1 2、1 3 2、3 1 2、1 1 2，变成一种弯曲的样子，然后告诉我它的WKT是什么。", "sql": "SELECT ST_AsText( ST_ForceCurve( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))'::geometry ) );", "execution_result": [["CURVEPOLYGON Z ((0 0 2,5 0 2,0 5 2,0 0 2),(1 1 2,1 3 2,3 1 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that small 3D shape with an outer and inner loop, coordinates are 0 0 2, 5 0 2, 0 5 2, 0 0 2, and also 1 1 2, 1 3 2, 3 1 2, 1 1 2, turn it into a kind of curved form, then tell me its WKT.", "source": "original", "new_id": 982}
{"id": 173, "function": "ST_ForceCurve", "question": "把一个有点像3D的多边形转成曲线形状，外面的点是(0 0 2, 5 0 2, 0 5 2, 0 0 2)，里面的点是(1 1 2, 1 3 2, 3 1 2, 1 1 2)，然后给我它的文本样子。", "sql": "SELECT ST_AsText( ST_ForceCurve( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))'::geometry ) );", "execution_result": [["CURVEPOLYGON Z ((0 0 2,5 0 2,0 5 2,0 0 2),(1 1 2,1 3 2,3 1 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn a kind of 3D polygon into a curve shape, with outer dots at (0 0 2, 5 0 2, 0 5 2, 0 0 2) and inner dots at (1 1 2, 1 3 2, 3 1 2, 1 1 2), then show me how it looks in text.", "source": "original", "new_id": 979}
{"id": 174, "function": "ST_ForceRHR", "question": "把那个三维多边形，包含外面和里面的圈，调整到一个正确的旋转方向，然后告诉我它的EWKT形式。", "sql": "SELECT ST_AsEWKT( ST_ForceRHR( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))' ) );", "execution_result": [["POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 3D polygon with its outer and inner loops, adjust it to a proper rotation, and let me know its EWKT form.", "source": "original", "new_id": 988}
{"id": 175, "function": "ST_LineExtend", "question": "给那条从(0, 0)到(0, 10)的小线条加一点长度，开始端多5，结束端多6，然后看看它变成什么样子。", "sql": "SELECT ST_AsText(ST_LineExtend('LINESTRING(0 0, 0 10)'::geometry, 5, 6));", "execution_result": [["LINESTRING(0 -6,0 0,0 10,0 15)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little line from (0, 0) to (0, 10) and add some length, 5 more at the start and 6 more at the end, then see what it looks like.", "source": "original", "new_id": 992}
{"id": 174, "function": "ST_ForceRHR", "question": "有一个三维的图形，它像个围栏，外面是(0 0 2, 5 0 2, 0 5 2, 0 0 2)，里面有个小圈(1 1 2, 1 3 2, 3 1 2, 1 1 2)，所有点都有个高度2。把它调整到一种特别的顺序，然后用一种长长的格式来描述它。", "sql": "SELECT ST_AsEWKT( ST_ForceRHR( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))' ) );", "execution_result": [["POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a 3D shape that looks like a fence, with the outer part as (0 0 2, 5 0 2, 0 5 2, 0 0 2) and a small circle inside (1 1 2, 1 3 2, 3 1 2, 1 1 2), all points have a height of 2. Adjust it to a special order and describe it using a long format.", "source": "original", "new_id": 986}
{"id": 174, "function": "ST_ForceRHR", "question": "把那个三维的形状，像是由一些点连接而成的，调整成右手方向，然后给我看它的详细坐标格式。", "sql": "SELECT ST_AsEWKT( ST_ForceRHR( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))' ) );", "execution_result": [["POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 3D shape, like a series of connected dots, adjust it to a right-hand direction, and then show me its detailed coordinate format.", "source": "original", "new_id": 989}
{"id": 173, "function": "ST_ForceCurve", "question": "把那个立体的形状POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))变成一种弯弯的形态，然后告诉我它的WKT样子。", "sql": "SELECT ST_AsText( ST_ForceCurve( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))'::geometry ) );", "execution_result": [["CURVEPOLYGON Z ((0 0 2,5 0 2,0 5 2,0 0 2),(1 1 2,1 3 2,3 1 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that 3D shape POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2)) into a kind of curved form, then let me know its WKT appearance.", "source": "original", "new_id": 983}
{"id": 174, "function": "ST_ForceRHR", "question": "将一个形状的外围从0 0到5 0再到0 5，然后回到起点0 0，里面有个小环从1 1到1 3再到3 1回到1 1，都是在2这个高度，转换成一种特殊的文本格式，确保它们的方向是正确的。", "sql": "SELECT ST_AsEWKT( ST_ForceRHR( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))' ) );", "execution_result": [["POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a shape whose outer path goes from 0 0 to 5 0 then to 0 5, returning to 0 0, with a small loop inside from 1 1 to 1 3 to 3 1 back to 1 1, all at height 2, and convert it into a special text format, making sure their direction is correct.", "source": "original", "new_id": 985}
{"id": 174, "function": "ST_ForceRHR", "question": "把那个三维的多边形，外面和里面的点坐标分别是(0 0 2,5 0 2,0 5 2,0 0 2)和(1 1 2,1 3 2,3 1 2,1 1 2)，调整成某种标准方向，然后用一种特别的格式说出来。", "sql": "SELECT ST_AsEWKT( ST_ForceRHR( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))' ) );", "execution_result": [["POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 3D polygon, with outer and inner dots at (0 0 2, 5 0 2, 0 5 2, 0 0 2) and (1 1 2, 1 3 2, 3 1 2, 1 1 2) respectively, adjust it to some standard direction, and then describe it in a special format.", "source": "original", "new_id": 984}
{"id": 173, "function": "ST_ForceCurve", "question": "把一个有外圈和内圈的小三维平面图形，像(0 0 2)、(5 0 2)、(0 5 2)、(0 0 2)这样的点连起来的，还有(1 1 2)、(1 3 2)、(3 1 2)、(1 1 2)这些点，也包含Z值2，改成一种带曲线的形式，然后看看它的WKT文字表示是什么样的。", "sql": "SELECT ST_AsText( ST_ForceCurve( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))'::geometry ) );", "execution_result": [["CURVEPOLYGON Z ((0 0 2,5 0 2,0 5 2,0 0 2),(1 1 2,1 3 2,3 1 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a small 3D flat shape with an outer loop and an inner loop, made by connecting points like (0 0 2), (5 0 2), (0 5 2), (0 0 2), as well as (1 1 2), (1 3 2), (3 1 2), (1 1 2), all having a Z value of 2, and turn it into some kind of curved form, then check what its WKT text representation looks like.", "source": "original", "new_id": 980}
{"id": 175, "function": "ST_LineExtend", "question": "把从(0 0)到(0 10)的那条线，在起点那里拉长5单位，终点那里再拉长6单位，最后看看它的形状是什么样子。", "sql": "SELECT ST_AsText(ST_LineExtend('LINESTRING(0 0, 0 10)'::geometry, 5, 6));", "execution_result": [["LINESTRING(0 -6,0 0,0 10,0 15)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the line going from (0 0) to (0 10), stretch it 5 units at the start and 6 units at the end, and then see what its shape looks like.", "source": "original", "new_id": 990}
{"id": 175, "function": "ST_LineExtend", "question": "想象一条从(0 0)到(0 10)的小线，起始那头往前走5步，另一头往前走6步后的样子是什么？", "sql": "SELECT ST_AsText(ST_LineExtend('LINESTRING(0 0, 0 10)'::geometry, 5, 6));", "execution_result": [["LINESTRING(0 -6,0 0,0 10,0 15)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a little line from (0 0) to (0 10), what does it look like after moving 5 steps forward from the start and 6 steps forward from the other end?", "source": "original", "new_id": 995}
{"id": 174, "function": "ST_ForceRHR", "question": "把那个三维的多边形形状，像是POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))，调整成某种规范方向，然后输出它的完整坐标格式。", "sql": "SELECT ST_AsEWKT( ST_ForceRHR( 'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))' ) );", "execution_result": [["POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 3D polygon shape, like POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2)), adjust it to some standard direction, and output its full coordinate format.", "source": "original", "new_id": 987}
{"id": 175, "function": "ST_LineExtend", "question": "能不能找出那个从起点多出来5个单位，终点多出来6个单位的线段，给我它的形状文本描述？", "sql": "SELECT ST_AsText(ST_LineExtend('LINESTRING(0 0, 0 10)'::geometry, 5, 6));", "execution_result": [["LINESTRING(0 -6,0 0,0 10,0 15)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you find that line segment that extends 5 units from the start and 6 units from the end, and give me its shape text description?", "source": "original", "new_id": 993}
{"id": 175, "function": "ST_LineExtend", "question": "把那条从(0 0)到(0 10)的小线，往起点那边拉长5，终点那边拉长6，然后用一种特别的文本方式写出来。", "sql": "SELECT ST_AsText(ST_LineExtend('LINESTRING(0 0, 0 10)'::geometry, 5, 6));", "execution_result": [["LINESTRING(0 -6,0 0,0 10,0 15)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little line from (0 0) to (0 10), stretch it 5 towards the start and 6 towards the end, then write it out in a special text way.", "source": "original", "new_id": 994}
{"id": 175, "function": "ST_LineExtend", "question": "有一条线段从(0, 0)到(0, 10)，如果它在两头分别拉长一点，起点多拉5，终点多拉6，结果是什么样的形状？", "sql": "SELECT ST_AsText(ST_LineExtend('LINESTRING(0 0, 0 10)'::geometry, 5, 6));", "execution_result": [["LINESTRING(0 -6,0 0,0 10,0 15)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a line segment from (0, 0) to (0, 10). If it's stretched a bit at both ends—5 units at the start and 6 units at the end—what does the shape look like?", "source": "original", "new_id": 991}
{"id": 178, "function": "ST_Multi", "question": "把一个形状从POLYGON变成一个包裹多个形状的东西，然后告诉我它的文字形式。", "sql": "SELECT ST_AsText(ST_Multi('POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30))'));", "execution_result": [["MULTIPOLYGON(((10 30,30 30,30 10,10 10,10 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn a shape from POLYGON into something that wraps multiple shapes, then tell me its text form.", "source": "original", "new_id": 1008}
{"id": 176, "function": "ST_LineToCurve", "question": "给坐标(1,3)的小点弄出一个距离3的小圈，看看它的原始样子和弯弯的样子，分别用那些奇怪的文本格式表示出来。", "sql": "SELECT ST_AsText(ST_LineToCurve(foo.geom)) AS curvedastext,ST_AsText(foo.geom) AS non_curvedastext \nFROM (SELECT ST_Buffer('POINT(1 3)'::geometry, 3) AS geom) AS foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(4 3,-2 3,4 3))", "POLYGON((4 3,3.942355841209691 2.414729033951615,3.77163859753386 1.851949702904731,3.494408836907636 1.333289300941194,3.121320343559643 0.878679656440358,2.666710699058807 0.505591163092364,2.14805029709527 0.22836140246614,1.585270966048385 0.057644158790309,1 0,0.414729033951615 0.057644158790309,-0.148050297095269 0.22836140246614,-0.666710699058806 0.505591163092364,-1.121320343559642 0.878679656440357,-1.494408836907636 1.333289300941194,-1.77163859753386 1.85194970290473,-1.942355841209691 2.414729033951614,-2 3,-1.942355841209691 3.585270966048385,-1.77163859753386 4.148050297095269,-1.494408836907636 4.666710699058806,-1.121320343559643 5.121320343559642,-0.666710699058806 5.494408836907636,-0.148050297095271 5.77163859753386,0.414729033951614 5.942355841209691,1 6,1.585270966048385 5.942355841209691,2.14805029709527 5.77163859753386,2.666710699058806 5.494408836907636,3.121320343559642 5.121320343559643,3.494408836907636 4.666710699058806,3.77163859753386 4.148050297095271,3.942355841209691 3.585270966048386,4 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the little dot at (1,3), make a small circle with a distance of 3, and see its original form and the curvy form, represented in those strange text formats.", "source": "original", "new_id": 997}
{"id": 176, "function": "ST_LineToCurve", "question": "以点(1 3)为中心画个圈，圈的大小是3。看看这个圈是弯弯的还是直的，然后分别写下来。", "sql": "SELECT ST_AsText(ST_LineToCurve(foo.geom)) AS curvedastext,ST_AsText(foo.geom) AS non_curvedastext \nFROM (SELECT ST_Buffer('POINT(1 3)'::geometry, 3) AS geom) AS foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(4 3,-2 3,4 3))", "POLYGON((4 3,3.942355841209691 2.414729033951615,3.77163859753386 1.851949702904731,3.494408836907636 1.333289300941194,3.121320343559643 0.878679656440358,2.666710699058807 0.505591163092364,2.14805029709527 0.22836140246614,1.585270966048385 0.057644158790309,1 0,0.414729033951615 0.057644158790309,-0.148050297095269 0.22836140246614,-0.666710699058806 0.505591163092364,-1.121320343559642 0.878679656440357,-1.494408836907636 1.333289300941194,-1.77163859753386 1.85194970290473,-1.942355841209691 2.414729033951614,-2 3,-1.942355841209691 3.585270966048385,-1.77163859753386 4.148050297095269,-1.494408836907636 4.666710699058806,-1.121320343559643 5.121320343559642,-0.666710699058806 5.494408836907636,-0.148050297095271 5.77163859753386,0.414729033951614 5.942355841209691,1 6,1.585270966048385 5.942355841209691,2.14805029709527 5.77163859753386,2.666710699058806 5.494408836907636,3.121320343559642 5.121320343559643,3.494408836907636 4.666710699058806,3.77163859753386 4.148050297095271,3.942355841209691 3.585270966048386,4 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a circle centered at point (1 3) with a size of 3. See if the circle is curvy or straight, and then write them down separately.", "source": "original", "new_id": 1000}
{"id": 176, "function": "ST_LineToCurve", "question": "围绕1和3这两个数字创建一个距离为3的区域，把它变成弯曲的样子，同时也保留原来的样子，输出它们的文本格式。", "sql": "SELECT ST_AsText(ST_LineToCurve(foo.geom)) AS curvedastext,ST_AsText(foo.geom) AS non_curvedastext \nFROM (SELECT ST_Buffer('POINT(1 3)'::geometry, 3) AS geom) AS foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(4 3,-2 3,4 3))", "POLYGON((4 3,3.942355841209691 2.414729033951615,3.77163859753386 1.851949702904731,3.494408836907636 1.333289300941194,3.121320343559643 0.878679656440358,2.666710699058807 0.505591163092364,2.14805029709527 0.22836140246614,1.585270966048385 0.057644158790309,1 0,0.414729033951615 0.057644158790309,-0.148050297095269 0.22836140246614,-0.666710699058806 0.505591163092364,-1.121320343559642 0.878679656440357,-1.494408836907636 1.333289300941194,-1.77163859753386 1.85194970290473,-1.942355841209691 2.414729033951614,-2 3,-1.942355841209691 3.585270966048385,-1.77163859753386 4.148050297095269,-1.494408836907636 4.666710699058806,-1.121320343559643 5.121320343559642,-0.666710699058806 5.494408836907636,-0.148050297095271 5.77163859753386,0.414729033951614 5.942355841209691,1 6,1.585270966048385 5.942355841209691,2.14805029709527 5.77163859753386,2.666710699058806 5.494408836907636,3.121320343559642 5.121320343559643,3.494408836907636 4.666710699058806,3.77163859753386 4.148050297095271,3.942355841209691 3.585270966048386,4 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create an area around the numbers 1 and 3 with a distance of 3, transform it into a curved shape while keeping the original form, and output their text format.", "source": "original", "new_id": 996}
{"id": 178, "function": "ST_Multi", "question": "把那个围成一圈的小图形换成一种能包含多个圈的格式，然后以一种文本方式呈现出来。", "sql": "SELECT ST_AsText(ST_Multi('POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30))'));", "execution_result": [["MULTIPOLYGON(((10 30,30 30,30 10,10 10,10 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that looped shape into a format that can handle multiple loops, and then present it as a text string.", "source": "original", "new_id": 1010}
{"id": 178, "function": "ST_Multi", "question": "把那个由(10 30, 30 30, 30 10, 10 10, 10 30)这些点围成的形状，变成更复杂的几何形式后，能用哪种特别的字符串方式描述呢？", "sql": "SELECT ST_AsText(ST_Multi('POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30))'));", "execution_result": [["MULTIPOLYGON(((10 30,30 30,30 10,10 10,10 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How can you describe that shape made by the points (10 30, 30 30, 30 10, 10 10, 10 30) in a special string format after turning it into a more complex geometry form?", "source": "original", "new_id": 1009}
{"id": 176, "function": "ST_LineToCurve", "question": "想象一下在(1, 3)这个位置有个小圆圈，半径是3。把这个圆圈的边缘变成弯弯的线，同时也保留原来的直线样子，然后把它们的描述以WKT格式展示出来。", "sql": "SELECT ST_AsText(ST_LineToCurve(foo.geom)) AS curvedastext,ST_AsText(foo.geom) AS non_curvedastext \nFROM (SELECT ST_Buffer('POINT(1 3)'::geometry, 3) AS geom) AS foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(4 3,-2 3,4 3))", "POLYGON((4 3,3.942355841209691 2.414729033951615,3.77163859753386 1.851949702904731,3.494408836907636 1.333289300941194,3.121320343559643 0.878679656440358,2.666710699058807 0.505591163092364,2.14805029709527 0.22836140246614,1.585270966048385 0.057644158790309,1 0,0.414729033951615 0.057644158790309,-0.148050297095269 0.22836140246614,-0.666710699058806 0.505591163092364,-1.121320343559642 0.878679656440357,-1.494408836907636 1.333289300941194,-1.77163859753386 1.85194970290473,-1.942355841209691 2.414729033951614,-2 3,-1.942355841209691 3.585270966048385,-1.77163859753386 4.148050297095269,-1.494408836907636 4.666710699058806,-1.121320343559643 5.121320343559642,-0.666710699058806 5.494408836907636,-0.148050297095271 5.77163859753386,0.414729033951614 5.942355841209691,1 6,1.585270966048385 5.942355841209691,2.14805029709527 5.77163859753386,2.666710699058806 5.494408836907636,3.121320343559642 5.121320343559643,3.494408836907636 4.666710699058806,3.77163859753386 4.148050297095271,3.942355841209691 3.585270966048386,4 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine there's a small circle centered at (1, 3) with a radius of 3. Turn the edge of this circle into a curvy line, while also keeping the original straight-line version, and show their descriptions in WKT format.", "source": "original", "new_id": 998}
{"id": 177, "function": "ST_LineToCurve", "question": "想象一个在(1, 3)的小点周围扩展的圆圈，半径是2。然后，取那个圆圈的外边缘，把它变成立体的，并在上下移动3个单位。最后，看看它原来的样子和变化后的样子是怎样的曲线文字。", "sql": "SELECT ST_AsText(ST_LineToCurve(geom)) As curved, ST_AsText(geom) AS not_curved \nFROM (SELECT ST_Translate(ST_Force3D(ST_Boundary(ST_Buffer(ST_Point(1,3), 2,2))),0,0,3) AS geom) AS foo;", "execution_result": [["CIRCULARSTRING Z (3 3 3,-1 3 3,3 3 3)", "LINESTRING Z (3 3 3,2.414213562373095 1.585786437626905 3,1 1 3,-0.414213562373095 1.585786437626905 3,-1 3 3,-0.414213562373095 4.414213562373095 3,1 5 3,2.414213562373095 4.414213562373096 3,3 3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a small dot at (1, 3) surrounded by a circle with a radius of 2. Then, take the outer edge of that circle, make it three-dimensional, and shift it up and down by 3 units. Finally, see how it looks originally and how it looks as a curved line in text form.", "source": "original", "new_id": 1004}
{"id": 177, "function": "ST_LineToCurve", "question": "把坐标是(1,3)的小点弄成一个大圆圈，圆有点分成四块，每块有两段线条。然后把圈外面那条线变成立体的，往上挪3个单位。最后看看它的样子和弯弯曲曲的样子。", "sql": "SELECT ST_AsText(ST_LineToCurve(geom)) As curved, ST_AsText(geom) AS not_curved \nFROM (SELECT ST_Translate(ST_Force3D(ST_Boundary(ST_Buffer(ST_Point(1,3), 2,2))),0,0,3) AS geom) AS foo;", "execution_result": [["CIRCULARSTRING Z (3 3 3,-1 3 3,3 3 3)", "LINESTRING Z (3 3 3,2.414213562373095 1.585786437626905 3,1 1 3,-0.414213562373095 1.585786437626905 3,-1 3 3,-0.414213562373095 4.414213562373095 3,1 5 3,2.414213562373095 4.414213562373096 3,3 3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the little dot at coordinates (1,3) and turn it into a big circle, divided into four sections with two line segments each. Then make the outer line 3D and move it up by 3 units. Finally, check its appearance and the bendy version.", "source": "original", "new_id": 1002}
{"id": 177, "function": "ST_LineToCurve", "question": "看看那些坐标点(1,3)周围画个圈圈，半径是2，象限有两段，然后边界提出来，变成三维的，往上挪3个单位，最后比较原来的形状和变成弯弯的线的样子，看看它们的文字表达是什么样的。", "sql": "SELECT ST_AsText(ST_LineToCurve(geom)) As curved, ST_AsText(geom) AS not_curved \nFROM (SELECT ST_Translate(ST_Force3D(ST_Boundary(ST_Buffer(ST_Point(1,3), 2,2))),0,0,3) AS geom) AS foo;", "execution_result": [["CIRCULARSTRING Z (3 3 3,-1 3 3,3 3 3)", "LINESTRING Z (3 3 3,2.414213562373095 1.585786437626905 3,1 1 3,-0.414213562373095 1.585786437626905 3,-1 3 3,-0.414213562373095 4.414213562373095 3,1 5 3,2.414213562373095 4.414213562373096 3,3 3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at those coordinates (1,3) and draw a circle around them, with a radius of 2 and two segments per quadrant, then extract the boundary, make it 3D, move it up by 3 units, and finally compare the original shape with the one that turned into a bendy line, and see what their text expression looks like.", "source": "original", "new_id": 1005}
{"id": 177, "function": "ST_LineToCurve", "question": "把那个点(1,3)扩展成一个大圆，半径是2，每个弯弯曲曲的部分有两个小段，然后把边界拉成三维，往上挪三格，看看它的样子。另外，看看它变成圆弧之后的样子。", "sql": "SELECT ST_AsText(ST_LineToCurve(geom)) As curved, ST_AsText(geom) AS not_curved \nFROM (SELECT ST_Translate(ST_Force3D(ST_Boundary(ST_Buffer(ST_Point(1,3), 2,2))),0,0,3) AS geom) AS foo;", "execution_result": [["CIRCULARSTRING Z (3 3 3,-1 3 3,3 3 3)", "LINESTRING Z (3 3 3,2.414213562373095 1.585786437626905 3,1 1 3,-0.414213562373095 1.585786437626905 3,-1 3 3,-0.414213562373095 4.414213562373095 3,1 5 3,2.414213562373095 4.414213562373096 3,3 3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Expand that point (1,3) into a big circle with a radius of 2, having two small segments for each curvy part, then stretch the boundary into 3D and move it up three notches to see how it looks. Also, see how it looks after turning into a circular arc.", "source": "original", "new_id": 1006}
{"id": 176, "function": "ST_LineToCurve", "question": "找一个中心在(1, 3)的小点，围绕它画一个3单位宽的圈，然后把这个圈变得更圆润些，看看它们的样子，分别用curvedastext和non_curvedastext表示。", "sql": "SELECT ST_AsText(ST_LineToCurve(foo.geom)) AS curvedastext,ST_AsText(foo.geom) AS non_curvedastext \nFROM (SELECT ST_Buffer('POINT(1 3)'::geometry, 3) AS geom) AS foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(4 3,-2 3,4 3))", "POLYGON((4 3,3.942355841209691 2.414729033951615,3.77163859753386 1.851949702904731,3.494408836907636 1.333289300941194,3.121320343559643 0.878679656440358,2.666710699058807 0.505591163092364,2.14805029709527 0.22836140246614,1.585270966048385 0.057644158790309,1 0,0.414729033951615 0.057644158790309,-0.148050297095269 0.22836140246614,-0.666710699058806 0.505591163092364,-1.121320343559642 0.878679656440357,-1.494408836907636 1.333289300941194,-1.77163859753386 1.85194970290473,-1.942355841209691 2.414729033951614,-2 3,-1.942355841209691 3.585270966048385,-1.77163859753386 4.148050297095269,-1.494408836907636 4.666710699058806,-1.121320343559643 5.121320343559642,-0.666710699058806 5.494408836907636,-0.148050297095271 5.77163859753386,0.414729033951614 5.942355841209691,1 6,1.585270966048385 5.942355841209691,2.14805029709527 5.77163859753386,2.666710699058806 5.494408836907636,3.121320343559642 5.121320343559643,3.494408836907636 4.666710699058806,3.77163859753386 4.148050297095271,3.942355841209691 3.585270966048386,4 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find a small dot centered at (1, 3), draw a circle around it with a width of 3 units, then make the circle a bit smoother, and see what they look like, represented by curvedastext and non_curvedastext.", "source": "original", "new_id": 1001}
{"id": 176, "function": "ST_LineToCurve", "question": "给那个点，1 3，中间有个形状，像气球一样膨胀到3单位，看看它原来和变成弯曲的样子，分别叫做弯曲文本和非弯曲文本。", "sql": "SELECT ST_AsText(ST_LineToCurve(foo.geom)) AS curvedastext,ST_AsText(foo.geom) AS non_curvedastext \nFROM (SELECT ST_Buffer('POINT(1 3)'::geometry, 3) AS geom) AS foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(4 3,-2 3,4 3))", "POLYGON((4 3,3.942355841209691 2.414729033951615,3.77163859753386 1.851949702904731,3.494408836907636 1.333289300941194,3.121320343559643 0.878679656440358,2.666710699058807 0.505591163092364,2.14805029709527 0.22836140246614,1.585270966048385 0.057644158790309,1 0,0.414729033951615 0.057644158790309,-0.148050297095269 0.22836140246614,-0.666710699058806 0.505591163092364,-1.121320343559642 0.878679656440357,-1.494408836907636 1.333289300941194,-1.77163859753386 1.85194970290473,-1.942355841209691 2.414729033951614,-2 3,-1.942355841209691 3.585270966048385,-1.77163859753386 4.148050297095269,-1.494408836907636 4.666710699058806,-1.121320343559643 5.121320343559642,-0.666710699058806 5.494408836907636,-0.148050297095271 5.77163859753386,0.414729033951614 5.942355841209691,1 6,1.585270966048385 5.942355841209691,2.14805029709527 5.77163859753386,2.666710699058806 5.494408836907636,3.121320343559642 5.121320343559643,3.494408836907636 4.666710699058806,3.77163859753386 4.148050297095271,3.942355841209691 3.585270966048386,4 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that point, 1 3, imagine a shape expanding like a balloon to 3 units, check out its original and curved versions, named curved text and non-curved text respectively.", "source": "original", "new_id": 999}
{"id": 177, "function": "ST_LineToCurve", "question": "在1,3这个地方画个小圆，半径就是2，想象它有2个小弧线，然后把它的边弄成立体的，往上移3个单位。看看它还是弧线前后的形状是什么样子的WKT文本。", "sql": "SELECT ST_AsText(ST_LineToCurve(geom)) As curved, ST_AsText(geom) AS not_curved \nFROM (SELECT ST_Translate(ST_Force3D(ST_Boundary(ST_Buffer(ST_Point(1,3), 2,2))),0,0,3) AS geom) AS foo;", "execution_result": [["CIRCULARSTRING Z (3 3 3,-1 3 3,3 3 3)", "LINESTRING Z (3 3 3,2.414213562373095 1.585786437626905 3,1 1 3,-0.414213562373095 1.585786437626905 3,-1 3 3,-0.414213562373095 4.414213562373095 3,1 5 3,2.414213562373095 4.414213562373096 3,3 3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a little circle at the spot 1,3 with a radius of 2, imagining it has 2 small arc segments, then make its edges 3D and shift it up by 3 units. Check what its shape looks like in WKT before and after it becomes a circular arc line.", "source": "original", "new_id": 1003}
{"id": 178, "function": "ST_Multi", "question": "怎么把那些点构成的形状，像是10 30, 30 30, 30 10, 10 10, 10 30，变成一个包含多种几何形态的文字描述呢？", "sql": "SELECT ST_AsText(ST_Multi('POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30))'));", "execution_result": [["MULTIPOLYGON(((10 30,30 30,30 10,10 10,10 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How can the shape made by those points, like 10 30, 30 30, 30 10, 10 10, 10 30, be turned into a text description that includes multiple geometric forms?", "source": "original", "new_id": 1011}
{"id": 177, "function": "ST_LineToCurve", "question": "你能告诉我，从点1 3开始，围绕它画个2单位距离的圆，然后把这个外圈变成三维的，并让它在Z方向上移动3单位，这样的形状的样子是什么？另外，假如把它变成一个圆弧线，那又会是什么样子呢？", "sql": "SELECT ST_AsText(ST_LineToCurve(geom)) As curved, ST_AsText(geom) AS not_curved \nFROM (SELECT ST_Translate(ST_Force3D(ST_Boundary(ST_Buffer(ST_Point(1,3), 2,2))),0,0,3) AS geom) AS foo;", "execution_result": [["CIRCULARSTRING Z (3 3 3,-1 3 3,3 3 3)", "LINESTRING Z (3 3 3,2.414213562373095 1.585786437626905 3,1 1 3,-0.414213562373095 1.585786437626905 3,-1 3 3,-0.414213562373095 4.414213562373095 3,1 5 3,2.414213562373095 4.414213562373096 3,3 3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me what it looks like if you start from point 1 3, draw a circle around it with a distance of 2 units, then turn this outer loop into 3D and move it 3 units in the Z direction? Also, what would it look like if you turn it into a circular arc line?", "source": "original", "new_id": 1007}
{"id": 178, "function": "ST_Multi", "question": "把那个形状，像是10 30到30 30再到30 10这样的点，变成一种更复杂的形式，然后说说它长啥样。", "sql": "SELECT ST_AsText(ST_Multi('POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30))'));", "execution_result": [["MULTIPOLYGON(((10 30,30 30,30 10,10 10,10 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that shape, like the points from 10 30 to 30 30 to 30 10, turn it into a more complex form, and then describe how it looks.", "source": "original", "new_id": 1012}
{"id": 180, "function": "ST_Project", "question": "从那个坐标点(0 0)出发，沿着45度的方向走10万米，结果是啥样的文本？", "sql": "SELECT ST_AsText(ST_Project('POINT(0 0)'::geography, 100000, radians(45.0)));", "execution_result": [["POINT(0.635231029125537 0.639472334729198)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Starting from that coordinate (0 0), if you go 100,000 meters in a 45-degree direction, what does the text look like?", "source": "original", "new_id": 1014}
{"id": 178, "function": "ST_Multi", "question": "找出那个围成四边形的点集合，看看怎么把它变成一个更复杂的形状，并且把结果用文字表达出来。", "sql": "SELECT ST_AsText(ST_Multi('POLYGON ((10 30, 30 30, 30 10, 10 10, 10 30))'));", "execution_result": [["MULTIPOLYGON(((10 30,30 30,30 10,10 10,10 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Identify the collection of points forming a four-sided shape, see how to turn it into a more complex form, and express the result in words.", "source": "original", "new_id": 1013}
{"id": 181, "function": "ST_QuantizeCoordinates", "question": "把那个点的坐标弄得简短些，像是四位小数，然后给我一个看得懂的格式。", "sql": "SELECT ST_AsText(ST_QuantizeCoordinates('POINT (100.123456 0)'::geometry, 4));", "execution_result": [["POINT(100.12344360351562 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make the coordinates of that point shorter, like to four decimal places, and give me a readable format.", "source": "original", "new_id": 1022}
{"id": 180, "function": "ST_Project", "question": "从(0, 0)开始，以45度方向走10万米，结果的地方用WKT格式表示出来。", "sql": "SELECT ST_AsText(ST_Project('POINT(0 0)'::geography, 100000, radians(45.0)));", "execution_result": [["POINT(0.635231029125537 0.639472334729198)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Starting from (0, 0), go 100,000 meters in a 45-degree direction, and show the resulting place in WKT format.", "source": "original", "new_id": 1019}
{"id": 180, "function": "ST_Project", "question": "从地球上某个原点开始，朝着一个角度走10万米，然后看看那个地方的形状是什么。", "sql": "SELECT ST_AsText(ST_Project('POINT(0 0)'::geography, 100000, radians(45.0)));", "execution_result": [["POINT(0.635231029125537 0.639472334729198)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Starting from a specific point on Earth, move 100,000 meters in a certain direction and see what the shape of that place is.", "source": "original", "new_id": 1016}
{"id": 180, "function": "ST_Project", "question": "从地理位置点(0 0)出发，朝着一个角度走十万米，看看最后会到哪里，结果要用那种描述位置的字符串形式。", "sql": "SELECT ST_AsText(ST_Project('POINT(0 0)'::geography, 100000, radians(45.0)));", "execution_result": [["POINT(0.635231029125537 0.639472334729198)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Starting from the geographic spot at (0 0), head in a certain angle and walk 100,000 meters to see where you end up, the result should be in that string format that describes locations.", "source": "original", "new_id": 1017}
{"id": 181, "function": "ST_QuantizeCoordinates", "question": "把那位置是100.123456和0的小点坐标处理一下，留个四位数的小数，看看它的形状是什么样子。", "sql": "SELECT ST_AsText(ST_QuantizeCoordinates('POINT (100.123456 0)'::geometry, 4));", "execution_result": [["POINT(100.12344360351562 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the little spot located at 100.123456 and 0, round its coordinates to four decimal places, and see what its shape looks like.", "source": "original", "new_id": 1020}
{"id": 180, "function": "ST_Project", "question": "从坐标点(0 0)开始，沿着45度的方向走10万米，看看最后到达哪里，用文字描述出来。", "sql": "SELECT ST_AsText(ST_Project('POINT(0 0)'::geography, 100000, radians(45.0)));", "execution_result": [["POINT(0.635231029125537 0.639472334729198)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Starting from the point (0 0), move 100,000 meters in the direction of 45 degrees and see where you end up, then describe it in words.", "source": "original", "new_id": 1015}
{"id": 181, "function": "ST_QuantizeCoordinates", "question": "把那个点的两个数字变成小数点后四位，然后用一种文本形式呈现出来。", "sql": "SELECT ST_AsText(ST_QuantizeCoordinates('POINT (100.123456 0)'::geometry, 4));", "execution_result": [["POINT(100.12344360351562 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the two numbers of that point into four decimal places, then present it in a text format.", "source": "original", "new_id": 1024}
{"id": 181, "function": "ST_QuantizeCoordinates", "question": "你能告诉我那个小点在100.123456和0这两个数字附近的样子吗？不过要把它的数字精简到小数点后面四位哦。", "sql": "SELECT ST_AsText(ST_QuantizeCoordinates('POINT (100.123456 0)'::geometry, 4));", "execution_result": [["POINT(100.12344360351562 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me how that little dot looks around the numbers 100.123456 and 0? But make sure to simplify its numbers to four decimal places.", "source": "original", "new_id": 1023}
{"id": 181, "function": "ST_QuantizeCoordinates", "question": "请告诉我那个点坐标是100.123456和0的图形，用一种方式让它们的数字变得简单些，保留四位小数就好，然后用一种常见的描述方式表达出来。", "sql": "SELECT ST_AsText(ST_QuantizeCoordinates('POINT (100.123456 0)'::geometry, 4));", "execution_result": [["POINT(100.12344360351562 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you tell me about that point with coordinates 100.123456 and 0, in a way that simplifies its numbers to four decimals, and then describe it using a common format?", "source": "original", "new_id": 1025}
{"id": 181, "function": "ST_QuantizeCoordinates", "question": "把那个坐标是(100.123456, 0)的小点儿，用4个小数点的方式来整理一下，然后说说它的样子。", "sql": "SELECT ST_AsText(ST_QuantizeCoordinates('POINT (100.123456 0)'::geometry, 4));", "execution_result": [["POINT(100.12344360351562 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little dot with coordinates (100.123456, 0), tidy it up to 4 decimal places, and describe how it looks.", "source": "original", "new_id": 1021}
{"id": 182, "function": "ST_QuantizeCoordinates", "question": "有一个点在坐标上面，坐标是123.456789123456 123.456789123456，想看看从15到-15这些数字之间的变化会如何影响它的表示，用一些奇怪的格式来表示。", "sql": "WITH test AS (SELECT 'POINT (123.456789123456 123.456789123456)'::geometry AS geom)\nSELECT\n  digits,\n  encode(ST_QuantizeCoordinates(geom, digits), 'hex'),\n  ST_AsText(ST_QuantizeCoordinates(geom, digits))\nFROM test, generate_series(15, -15, -1) AS digits;", "execution_result": [[15, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [14, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [13, "01010000005e9a72083cdd5e405e9a72083cdd5e40", "POINT(123.45678912345599 123.45678912345599)"], [12, "0101000000409a72083cdd5e40409a72083cdd5e40", "POINT(123.45678912345556 123.45678912345556)"], [11, "0101000000009a72083cdd5e40009a72083cdd5e40", "POINT(123.45678912345466 123.45678912345466)"], [10, "0101000000009872083cdd5e40009872083cdd5e40", "POINT(123.45678912344738 123.45678912344738)"], [9, "0101000000008072083cdd5e40008072083cdd5e40", "POINT(123.45678912336007 123.45678912336007)"], [8, "0101000000000070083cdd5e40000070083cdd5e40", "POINT(123.45678912103176 123.45678912103176)"], [7, "0101000000000060083cdd5e40000060083cdd5e40", "POINT(123.4567891061306 123.4567891061306)"], [6, "0101000000000000083cdd5e40000000083cdd5e40", "POINT(123.45678901672363 123.45678901672363)"], [5, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [4, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [3, "01010000000000000038dd5e400000000038dd5e40", "POINT(123.45654296875 123.45654296875)"], [2, "01010000000000000000dd5e400000000000dd5e40", "POINT(123.453125 123.453125)"], [1, "01010000000000000000dc5e400000000000dc5e40", "POINT(123.4375 123.4375)"], [0, "01010000000000000000c05e400000000000c05e40", "POINT(123 123)"], [-1, "01010000000000000000005e400000000000005e40", "POINT(120 120)"], [-2, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-3, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-4, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-5, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-6, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-7, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-8, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-9, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-10, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-11, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-12, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-13, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-14, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-15, "010100000000000000000058400000000000005840", "POINT(96 96)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a point with coordinates 123.456789123456 123.456789123456, and we want to see how changing numbers from 15 to -15 affect its representation, using some strange formats.", "source": "original", "new_id": 1027}
{"id": 182, "function": "ST_QuantizeCoordinates", "question": "对于桌子上有个小点(123.456789123456 123.456789123456)，想看看当我们用不同的精细度从15到-15慢慢调整时，会得到什么样的有趣结果，包括一个神秘的编码和一种看起来像文字的描述。", "sql": "WITH test AS (SELECT 'POINT (123.456789123456 123.456789123456)'::geometry AS geom)\nSELECT\n  digits,\n  encode(ST_QuantizeCoordinates(geom, digits), 'hex'),\n  ST_AsText(ST_QuantizeCoordinates(geom, digits))\nFROM test, generate_series(15, -15, -1) AS digits;", "execution_result": [[15, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [14, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [13, "01010000005e9a72083cdd5e405e9a72083cdd5e40", "POINT(123.45678912345599 123.45678912345599)"], [12, "0101000000409a72083cdd5e40409a72083cdd5e40", "POINT(123.45678912345556 123.45678912345556)"], [11, "0101000000009a72083cdd5e40009a72083cdd5e40", "POINT(123.45678912345466 123.45678912345466)"], [10, "0101000000009872083cdd5e40009872083cdd5e40", "POINT(123.45678912344738 123.45678912344738)"], [9, "0101000000008072083cdd5e40008072083cdd5e40", "POINT(123.45678912336007 123.45678912336007)"], [8, "0101000000000070083cdd5e40000070083cdd5e40", "POINT(123.45678912103176 123.45678912103176)"], [7, "0101000000000060083cdd5e40000060083cdd5e40", "POINT(123.4567891061306 123.4567891061306)"], [6, "0101000000000000083cdd5e40000000083cdd5e40", "POINT(123.45678901672363 123.45678901672363)"], [5, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [4, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [3, "01010000000000000038dd5e400000000038dd5e40", "POINT(123.45654296875 123.45654296875)"], [2, "01010000000000000000dd5e400000000000dd5e40", "POINT(123.453125 123.453125)"], [1, "01010000000000000000dc5e400000000000dc5e40", "POINT(123.4375 123.4375)"], [0, "01010000000000000000c05e400000000000c05e40", "POINT(123 123)"], [-1, "01010000000000000000005e400000000000005e40", "POINT(120 120)"], [-2, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-3, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-4, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-5, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-6, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-7, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-8, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-9, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-10, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-11, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-12, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-13, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-14, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-15, "010100000000000000000058400000000000005840", "POINT(96 96)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For a little dot on the table at (123.456789123456 123.456789123456), let's see what interesting results we get when we adjust the precision from 15 to -15, including a mysterious code and a description that looks like text.", "source": "original", "new_id": 1028}
{"id": 182, "function": "ST_QuantizeCoordinates", "question": "想象有一个点，坐标是123.456789123456 123.456789123456，看看如果我们从15到-15这样一个个减少精度，会得到什么样的神秘代码和文字描述。", "sql": "WITH test AS (SELECT 'POINT (123.456789123456 123.456789123456)'::geometry AS geom)\nSELECT\n  digits,\n  encode(ST_QuantizeCoordinates(geom, digits), 'hex'),\n  ST_AsText(ST_QuantizeCoordinates(geom, digits))\nFROM test, generate_series(15, -15, -1) AS digits;", "execution_result": [[15, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [14, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [13, "01010000005e9a72083cdd5e405e9a72083cdd5e40", "POINT(123.45678912345599 123.45678912345599)"], [12, "0101000000409a72083cdd5e40409a72083cdd5e40", "POINT(123.45678912345556 123.45678912345556)"], [11, "0101000000009a72083cdd5e40009a72083cdd5e40", "POINT(123.45678912345466 123.45678912345466)"], [10, "0101000000009872083cdd5e40009872083cdd5e40", "POINT(123.45678912344738 123.45678912344738)"], [9, "0101000000008072083cdd5e40008072083cdd5e40", "POINT(123.45678912336007 123.45678912336007)"], [8, "0101000000000070083cdd5e40000070083cdd5e40", "POINT(123.45678912103176 123.45678912103176)"], [7, "0101000000000060083cdd5e40000060083cdd5e40", "POINT(123.4567891061306 123.4567891061306)"], [6, "0101000000000000083cdd5e40000000083cdd5e40", "POINT(123.45678901672363 123.45678901672363)"], [5, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [4, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [3, "01010000000000000038dd5e400000000038dd5e40", "POINT(123.45654296875 123.45654296875)"], [2, "01010000000000000000dd5e400000000000dd5e40", "POINT(123.453125 123.453125)"], [1, "01010000000000000000dc5e400000000000dc5e40", "POINT(123.4375 123.4375)"], [0, "01010000000000000000c05e400000000000c05e40", "POINT(123 123)"], [-1, "01010000000000000000005e400000000000005e40", "POINT(120 120)"], [-2, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-3, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-4, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-5, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-6, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-7, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-8, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-9, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-10, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-11, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-12, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-13, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-14, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-15, "010100000000000000000058400000000000005840", "POINT(96 96)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a point with coordinates 123.456789123456 123.456789123456, and see what kind of mysterious codes and text descriptions you get as we decrease the precision from 15 to -15 one by one.", "source": "original", "new_id": 1026}
{"id": 183, "function": "ST_RemoveRepeatedPoints", "question": "把那条包含(0 0, 0 0, 1 1, 0 0, 1 1, 2 2)这些点的折线，去掉重复的点后，用某种文本方式表达出来。", "sql": "SELECT ST_AsText(ST_RemoveRepeatedPoints('LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2)'));", "execution_result": [["LINESTRING(0 0,1 1,0 0,1 1,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Express the line with points (0 0, 0 0, 1 1, 0 0, 1 1, 2 2) in some text form after removing repeated points.", "source": "original", "new_id": 1034}
{"id": 183, "function": "ST_RemoveRepeatedPoints", "question": "如果有一条线串，里面有些点是连续重复的，比如0 0和1 1这种情况，最后的结果是什么样的呢？可以用文字来表达出来。", "sql": "SELECT ST_AsText(ST_RemoveRepeatedPoints('LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2)'));", "execution_result": [["LINESTRING(0 0,1 1,0 0,1 1,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If there’s a line with some consecutive repeated points, like 0 0 and 1 1, what would the final shape look like? Can it be expressed in text form?", "source": "original", "new_id": 1033}
{"id": 182, "function": "ST_QuantizeCoordinates", "question": "给出一个点，像是这样：123.456789123456在两个方向上，看看它在精度从15到-15变化时，会变成哪些奇怪的编码和文字。每个精度都要有哦。", "sql": "WITH test AS (SELECT 'POINT (123.456789123456 123.456789123456)'::geometry AS geom)\nSELECT\n  digits,\n  encode(ST_QuantizeCoordinates(geom, digits), 'hex'),\n  ST_AsText(ST_QuantizeCoordinates(geom, digits))\nFROM test, generate_series(15, -15, -1) AS digits;", "execution_result": [[15, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [14, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [13, "01010000005e9a72083cdd5e405e9a72083cdd5e40", "POINT(123.45678912345599 123.45678912345599)"], [12, "0101000000409a72083cdd5e40409a72083cdd5e40", "POINT(123.45678912345556 123.45678912345556)"], [11, "0101000000009a72083cdd5e40009a72083cdd5e40", "POINT(123.45678912345466 123.45678912345466)"], [10, "0101000000009872083cdd5e40009872083cdd5e40", "POINT(123.45678912344738 123.45678912344738)"], [9, "0101000000008072083cdd5e40008072083cdd5e40", "POINT(123.45678912336007 123.45678912336007)"], [8, "0101000000000070083cdd5e40000070083cdd5e40", "POINT(123.45678912103176 123.45678912103176)"], [7, "0101000000000060083cdd5e40000060083cdd5e40", "POINT(123.4567891061306 123.4567891061306)"], [6, "0101000000000000083cdd5e40000000083cdd5e40", "POINT(123.45678901672363 123.45678901672363)"], [5, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [4, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [3, "01010000000000000038dd5e400000000038dd5e40", "POINT(123.45654296875 123.45654296875)"], [2, "01010000000000000000dd5e400000000000dd5e40", "POINT(123.453125 123.453125)"], [1, "01010000000000000000dc5e400000000000dc5e40", "POINT(123.4375 123.4375)"], [0, "01010000000000000000c05e400000000000c05e40", "POINT(123 123)"], [-1, "01010000000000000000005e400000000000005e40", "POINT(120 120)"], [-2, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-3, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-4, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-5, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-6, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-7, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-8, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-9, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-10, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-11, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-12, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-13, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-14, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-15, "010100000000000000000058400000000000005840", "POINT(96 96)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a point with coordinates like 123.456789123456 for both directions, and observe what odd codes and text it turns into as the precision shifts from 15 to -15. Make sure to include each precision level.", "source": "original", "new_id": 1029}
{"id": 183, "function": "ST_RemoveRepeatedPoints", "question": "给一个由这些点构成的路径：0 0, 0 0, 1 1, 0 0, 1 1, 2 2，想看看去掉那些重复点后会是什么样子。", "sql": "SELECT ST_AsText(ST_RemoveRepeatedPoints('LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2)'));", "execution_result": [["LINESTRING(0 0,1 1,0 0,1 1,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Given a path made of these points: 0 0, 0 0, 1 1, 0 0, 1 1, 2 2, let's see what it looks like after removing those repeated points.", "source": "original", "new_id": 1037}
{"id": 182, "function": "ST_QuantizeCoordinates", "question": "尝试对那些坐标进行调整，看看从15到-15变化时，它们的表现如何，尤其是点对象POINT (123.456789123456 123.456789123456)的奇怪编码和文本形式。", "sql": "WITH test AS (SELECT 'POINT (123.456789123456 123.456789123456)'::geometry AS geom)\nSELECT\n  digits,\n  encode(ST_QuantizeCoordinates(geom, digits), 'hex'),\n  ST_AsText(ST_QuantizeCoordinates(geom, digits))\nFROM test, generate_series(15, -15, -1) AS digits;", "execution_result": [[15, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [14, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [13, "01010000005e9a72083cdd5e405e9a72083cdd5e40", "POINT(123.45678912345599 123.45678912345599)"], [12, "0101000000409a72083cdd5e40409a72083cdd5e40", "POINT(123.45678912345556 123.45678912345556)"], [11, "0101000000009a72083cdd5e40009a72083cdd5e40", "POINT(123.45678912345466 123.45678912345466)"], [10, "0101000000009872083cdd5e40009872083cdd5e40", "POINT(123.45678912344738 123.45678912344738)"], [9, "0101000000008072083cdd5e40008072083cdd5e40", "POINT(123.45678912336007 123.45678912336007)"], [8, "0101000000000070083cdd5e40000070083cdd5e40", "POINT(123.45678912103176 123.45678912103176)"], [7, "0101000000000060083cdd5e40000060083cdd5e40", "POINT(123.4567891061306 123.4567891061306)"], [6, "0101000000000000083cdd5e40000000083cdd5e40", "POINT(123.45678901672363 123.45678901672363)"], [5, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [4, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [3, "01010000000000000038dd5e400000000038dd5e40", "POINT(123.45654296875 123.45654296875)"], [2, "01010000000000000000dd5e400000000000dd5e40", "POINT(123.453125 123.453125)"], [1, "01010000000000000000dc5e400000000000dc5e40", "POINT(123.4375 123.4375)"], [0, "01010000000000000000c05e400000000000c05e40", "POINT(123 123)"], [-1, "01010000000000000000005e400000000000005e40", "POINT(120 120)"], [-2, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-3, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-4, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-5, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-6, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-7, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-8, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-9, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-10, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-11, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-12, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-13, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-14, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-15, "010100000000000000000058400000000000005840", "POINT(96 96)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Try to adjust those coordinates and see how they behave when changing from 15 to -15, especially the strange encoding and text form of the point object POINT (123.456789123456 123.456789123456).", "source": "original", "new_id": 1030}
{"id": 183, "function": "ST_RemoveRepeatedPoints", "question": "从由(0 0, 0 0, 1 1, 0 0, 1 1, 2 2)这些点连成的线里，去掉那些重复的点，看看最后的样子是什么。", "sql": "SELECT ST_AsText(ST_RemoveRepeatedPoints('LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2)'));", "execution_result": [["LINESTRING(0 0,1 1,0 0,1 1,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From the line made by these points (0 0, 0 0, 1 1, 0 0, 1 1, 2 2), remove the repeated dots and see what it looks like in the end.", "source": "original", "new_id": 1032}
{"id": 183, "function": "ST_RemoveRepeatedPoints", "question": "给你一串坐标，像0 0, 0 0, 1 1, 0 0, 1 1, 2 2这样的，想知道去掉重复的点后它变成什么样的文本描述？", "sql": "SELECT ST_AsText(ST_RemoveRepeatedPoints('LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2)'));", "execution_result": [["LINESTRING(0 0,1 1,0 0,1 1,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Here's a bunch of coordinates like 0 0, 0 0, 1 1, 0 0, 1 1, 2 2, and I'm curious what the text description looks like after removing the repeated spots?", "source": "original", "new_id": 1035}
{"id": 184, "function": "ST_RemoveRepeatedPoints", "question": "对于那些坐标，比如(0,0)(0,0)(1,1)(5,5)(1,1)(2,2)组成的线形，去掉重复的点，保持2单位距离的检测，然后看看它的文字样子。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2)', 2));", "execution_result": [["LINESTRING(0 0,5 5,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For those coordinates like (0,0)(0,0)(1,1)(5,5)(1,1)(2,2) forming a line shape, remove the repeated spots, keeping a 2-unit distance check, then see its textual representation.", "source": "original", "new_id": 1039}
{"id": 182, "function": "ST_QuantizeCoordinates", "question": "从表test中，看看那个点（123.456789123456 123.456789123456）随着那些精度数字从15到-15一点点减少时，得出的三个结果：当前的精度数字、经过处理后的一串HEX代码、以及一个格式化后的字符串样子。", "sql": "WITH test AS (SELECT 'POINT (123.456789123456 123.456789123456)'::geometry AS geom)\nSELECT\n  digits,\n  encode(ST_QuantizeCoordinates(geom, digits), 'hex'),\n  ST_AsText(ST_QuantizeCoordinates(geom, digits))\nFROM test, generate_series(15, -15, -1) AS digits;", "execution_result": [[15, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [14, "01010000005f9a72083cdd5e405f9a72083cdd5e40", "POINT(123.456789123456 123.456789123456)"], [13, "01010000005e9a72083cdd5e405e9a72083cdd5e40", "POINT(123.45678912345599 123.45678912345599)"], [12, "0101000000409a72083cdd5e40409a72083cdd5e40", "POINT(123.45678912345556 123.45678912345556)"], [11, "0101000000009a72083cdd5e40009a72083cdd5e40", "POINT(123.45678912345466 123.45678912345466)"], [10, "0101000000009872083cdd5e40009872083cdd5e40", "POINT(123.45678912344738 123.45678912344738)"], [9, "0101000000008072083cdd5e40008072083cdd5e40", "POINT(123.45678912336007 123.45678912336007)"], [8, "0101000000000070083cdd5e40000070083cdd5e40", "POINT(123.45678912103176 123.45678912103176)"], [7, "0101000000000060083cdd5e40000060083cdd5e40", "POINT(123.4567891061306 123.4567891061306)"], [6, "0101000000000000083cdd5e40000000083cdd5e40", "POINT(123.45678901672363 123.45678901672363)"], [5, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [4, "0101000000000000003cdd5e40000000003cdd5e40", "POINT(123.456787109375 123.456787109375)"], [3, "01010000000000000038dd5e400000000038dd5e40", "POINT(123.45654296875 123.45654296875)"], [2, "01010000000000000000dd5e400000000000dd5e40", "POINT(123.453125 123.453125)"], [1, "01010000000000000000dc5e400000000000dc5e40", "POINT(123.4375 123.4375)"], [0, "01010000000000000000c05e400000000000c05e40", "POINT(123 123)"], [-1, "01010000000000000000005e400000000000005e40", "POINT(120 120)"], [-2, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-3, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-4, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-5, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-6, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-7, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-8, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-9, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-10, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-11, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-12, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-13, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-14, "010100000000000000000058400000000000005840", "POINT(96 96)"], [-15, "010100000000000000000058400000000000005840", "POINT(96 96)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From table test, observe that point (123.456789123456 123.456789123456) as those precision numbers decrease bit by bit from 15 to -15, resulting in three outcomes: the current precision number, a string of HEX code after processing, and a formatted string representation.", "source": "original", "new_id": 1031}
{"id": 184, "function": "ST_RemoveRepeatedPoints", "question": "给那条由(0 0, 0 0, 1 1, 5 5, 1 1, 2 2)串起的线，去掉相隔不超过2的重复小点，最后的样子用WKT说出来。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2)', 2));", "execution_result": [["LINESTRING(0 0,5 5,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that line made up of (0 0, 0 0, 1 1, 5 5, 1 1, 2 2), remove the tiny repeated dots that are no more than 2 apart, and describe the final form in WKT.", "source": "original", "new_id": 1038}
{"id": 184, "function": "ST_RemoveRepeatedPoints", "question": "把那条包含(0 0, 0 0, 1 1, 5 5, 1 1, 2 2)的小折线处理一下，去掉那些靠得太近的重复点，设定距离是2，然后看看它变成什么样子，用一种特别的格式看看结果。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2)', 2));", "execution_result": [["LINESTRING(0 0,5 5,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little zigzag line with (0 0, 0 0, 1 1, 5 5, 1 1, 2 2), do something to remove those repeated points that are too close, set the distance as 2, and see what it turns into, using a special format to view the result.", "source": "original", "new_id": 1040}
{"id": 184, "function": "ST_RemoveRepeatedPoints", "question": "给那些点画线，像0 0, 0 0, 1 1, 5 5, 1 1, 2 2这样的，去掉重复的地方，记得2单位的距离哦，然后看看它变成了什么样子。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2)', 2));", "execution_result": [["LINESTRING(0 0,5 5,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a line with those points like 0 0, 0 0, 1 1, 5 5, 1 1, 2 2, remove the repeated parts, keeping in mind the 2 units distance, then see what it looks like.", "source": "original", "new_id": 1041}
{"id": 184, "function": "ST_RemoveRepeatedPoints", "question": "给出那些连起来的点的图形，像是从(0 0)到(2 2)的线条，去掉那些太近的重复点，大约在距离2以内的。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2)', 2));", "execution_result": [["LINESTRING(0 0,5 5,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide the shape made by connecting points, like a line from (0 0) to (2 2), removing those repeating points that are too close, roughly within a distance of 2.", "source": "original", "new_id": 1042}
{"id": 183, "function": "ST_RemoveRepeatedPoints", "question": "给我看看那段连接了(0 0)到(2 2)的路线，只要那些不同的点就好。", "sql": "SELECT ST_AsText(ST_RemoveRepeatedPoints('LINESTRING (0 0, 0 0, 1 1, 0 0, 1 1, 2 2)'));", "execution_result": [["LINESTRING(0 0,1 1,0 0,1 1,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the path connecting (0 0) to (2 2), but I only need the distinct points.", "source": "original", "new_id": 1036}
{"id": 184, "function": "ST_RemoveRepeatedPoints", "question": "想象一个由点组成的曲线，像(0 0, 0 0, 1 1, 5 5, 1 1, 2 2)这样的点列，把那些特别靠近的点剔除掉，距离是2个单位，然后告诉我它变成了什么样子。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'LINESTRING (0 0, 0 0, 1 1, 5 5, 1 1, 2 2)', 2));", "execution_result": [["LINESTRING(0 0,5 5,2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a curve made of points, like the list (0 0, 0 0, 1 1, 5 5, 1 1, 2 2), and remove those points that are really close, with a distance of 2 units, then tell me what it looks like afterwards.", "source": "original", "new_id": 1043}
{"id": 185, "function": "ST_RemoveRepeatedPoints", "question": "看看那些小点和线段，像是1 1到2 2再到3 3这样，4 4和5 5的那些，去掉多余的点后，结果会是什么呢？", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))'));", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(1 1,2 2,3 3),POINT(4 4),POINT(4 4),POINT(5 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at those little dots and line segments, like from 1 1 to 2 2 to 3 3, and the ones at 4 4 and 5 5. What would it look like after removing the extra points?", "source": "original", "new_id": 1045}
{"id": 186, "function": "ST_RemoveRepeatedPoints", "question": "给你一堆小点，比如(1 1), (2 2), (3 3)，还有一个跟它们很像的(2 2)，你能找出那些不重复的点并告诉我它们的样子吗？", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'MULTIPOINT ((1 1), (2 2), (3 3), (2 2))'));", "execution_result": [["MULTIPOINT((1 1),(2 2),(3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a bunch of little dots like (1 1), (2 2), (3 3), and another one similar to them (2 2), can you find the non-repeating ones and tell me what they look like?", "source": "original", "new_id": 1050}
{"id": 185, "function": "ST_RemoveRepeatedPoints", "question": "从包含一些路径和点的集合里，去掉那些重复的小点，比如从(1 1)到(3 3)的路径里重复的(2 2)，还有两个重复的(4 4)，然后要得到一个文本形式的结果哦。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))'));", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(1 1,2 2,3 3),POINT(4 4),POINT(4 4),POINT(5 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a collection with some paths and points, remove those repetitive little dots, like the repeated (2 2) in the path from (1 1) to (3 3), and two repeated (4 4), then get a text form result.", "source": "original", "new_id": 1044}
{"id": 185, "function": "ST_RemoveRepeatedPoints", "question": "能不能给我看看一个集合，它有一些连起来的线和几个小点，去掉重复的那些，比如(1 1)到(2 2)到(3 3)的线，还有那些(4 4)和(5 5)的点。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))'));", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(1 1,2 2,3 3),POINT(4 4),POINT(4 4),POINT(5 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show me a collection that has some connected lines and a few little dots, removing those that repeat, like the line from (1 1) to (2 2) to (3 3), and the dots at (4 4) and (5 5).", "source": "original", "new_id": 1047}
{"id": 185, "function": "ST_RemoveRepeatedPoints", "question": "有一个集合，里面有些线段和点，比如从(1 1)到(2 2)到(3 3)，还有一些重复的小点，比如(4 4)和(5 5)。你能帮忙去掉那些多余的点，然后告诉我它们的形状吗？", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))'));", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(1 1,2 2,3 3),POINT(4 4),POINT(4 4),POINT(5 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There is a collection with some lines and dots, like from (1 1) to (2 2) to (3 3), and some repeated little dots like (4 4) and (5 5). Can you help remove those extra dots and then tell me their shape?", "source": "original", "new_id": 1046}
{"id": 180, "function": "ST_Project", "question": "从原点出发，沿着一个斜斜的方向走100000米，看看你到达了哪里的坐标，用那种常见的格式表示出来。", "sql": "SELECT ST_AsText(ST_Project('POINT(0 0)'::geography, 100000, radians(45.0)));", "execution_result": [["POINT(0.635231029125537 0.639472334729198)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Starting from the origin, walk 100,000 meters in a slanted direction and see where you end up, using that common format to show it.", "source": "original", "new_id": 1018}
{"id": 186, "function": "ST_RemoveRepeatedPoints", "question": "给出一串描述那些小点的文字，它们都是在一个集合里，去掉那些不必要的重复，比如两个一样的(2 2)。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'MULTIPOINT ((1 1), (2 2), (3 3), (2 2))'));", "execution_result": [["MULTIPOINT((1 1),(2 2),(3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide a string that describes those little dots in a collection, removing unnecessary duplicates like the two identical (2 2).", "source": "original", "new_id": 1055}
{"id": 186, "function": "ST_RemoveRepeatedPoints", "question": "从那些点里拿掉重复的，然后告诉我它们的那种文本形式，点是(1 1), (2 2), (3 3), 和又出现一次的(2 2)。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'MULTIPOINT ((1 1), (2 2), (3 3), (2 2))'));", "execution_result": [["MULTIPOINT((1 1),(2 2),(3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take out the repeated ones from those points and tell me their text form, the points are (1 1), (2 2), (3 3), and (2 2) which appears again.", "source": "original", "new_id": 1053}
{"id": 186, "function": "ST_RemoveRepeatedPoints", "question": "有一组小点坐标是(1 1)、(2 2)、(3 3)还有一个重复的(2 2)，你能把重复的点去掉后告诉我它们的形状吗？", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'MULTIPOINT ((1 1), (2 2), (3 3), (2 2))'));", "execution_result": [["MULTIPOINT((1 1),(2 2),(3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a bunch of little dots at coordinates (1 1), (2 2), (3 3), and a repeat at (2 2). Can you show me what their shape looks like after removing the repeated one?", "source": "original", "new_id": 1051}
{"id": 187, "function": "ST_RemoveIrrelevantPointsForView", "question": "给定一个形状，看看在框框范围(12,12,18,18)内那些不太重要的点消失后，形状会变成什么样子，结果用WKT格式表示。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18)));", "execution_result": [["POLYGON((0 30,30 30,30 0,0 0,0 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Given a shape, see what it looks like after some less important points vanish within the box range (12,12,18,18), and show the result in WKT format.", "source": "original", "new_id": 1056}
{"id": 185, "function": "ST_RemoveRepeatedPoints", "question": "想象有一些小点和线条，像(1 1)到(3 3)的折线，其中(2 2)多次出现，还有(4 4)和(5 5)这些点，问如果去掉重复的，最后会是什么样子？", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))'));", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(1 1,2 2,3 3),POINT(4 4),POINT(4 4),POINT(5 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine some little dots and lines, like a line from (1 1) to (3 3) with (2 2) appearing multiple times, and points like (4 4) and (5 5). What would it look like if duplicates were removed?", "source": "original", "new_id": 1048}
{"id": 186, "function": "ST_RemoveRepeatedPoints", "question": "能不能看看那些小点，去掉重复后，帮我用一种常见格式描述一下呢？这些点在(1 1)、(2 2)、(3 3)，还有多余的(2 2)。", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'MULTIPOINT ((1 1), (2 2), (3 3), (2 2))'));", "execution_result": [["MULTIPOINT((1 1),(2 2),(3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you take a look at those little dots and, after removing the repeats, describe them in a common format? These dots are at (1 1), (2 2), (3 3), and the extra (2 2).", "source": "original", "new_id": 1054}
{"id": 185, "function": "ST_RemoveRepeatedPoints", "question": "想象一下一个集合，里面有从点(1 1)到(2 2)再到(3 3)的线段，但(2 2)出现在两个地方，还有两个在同一位置的点(4 4)，以及一个孤零零的点(5 5)。如果去掉那些多余的点，会变成什么样子呢？", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2, 2 2, 3 3), POINT (4 4), POINT (4 4), POINT (5 5))'));", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(1 1,2 2,3 3),POINT(4 4),POINT(4 4),POINT(5 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a collection that includes a line from (1 1) to (2 2) to (3 3), but (2 2) is in two places, and two points sit together at (4 4), plus a lonely point at (5 5). What would it look like if we removed those extra points?", "source": "original", "new_id": 1049}
{"id": 186, "function": "ST_RemoveRepeatedPoints", "question": "有一个由四个点坐标组成的图形，其中有一个点坐标是重复的。你能告诉我去掉重复后，这些点在纸上画出来是什么样子吗？", "sql": "SELECT ST_AsText( ST_RemoveRepeatedPoints( 'MULTIPOINT ((1 1), (2 2), (3 3), (2 2))'));", "execution_result": [["MULTIPOINT((1 1),(2 2),(3 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a shape made of four point coordinates, with one of them being a repeat. Can you tell me what it looks like on paper after removing the duplicate?", "source": "original", "new_id": 1052}
{"id": 187, "function": "ST_RemoveIrrelevantPointsForView", "question": "在一个像框一样的区域里，边界是从12到18的地方，看看那个有点复杂的多边形，处理一下只留下看得见的点，然后用某种格式说出来。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18)));", "execution_result": [["POLYGON((0 30,30 30,30 0,0 0,0 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In a picture-like area with boundaries from 12 to 18, take a look at that somewhat complex polygon, process it to keep only the visible points, and then describe it in some format.", "source": "original", "new_id": 1058}
{"id": 187, "function": "ST_RemoveIrrelevantPointsForView", "question": "把那些包含点(0 30,15 30,30 30,30 0,0 0,0 30)围起来的形状，在12到18这个范围内看一看，去掉和这个框框无关的小点，然后用一种写出来的方法表示出来。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18)));", "execution_result": [["POLYGON((0 30,30 30,30 0,0 0,0 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the shape that includes the points (0 30, 15 30, 30 30, 30 0, 0 0, 0 30), look at it within the range from 12 to 18, remove the little dots that don't matter to this frame, and then express it in a way that you can write out.", "source": "original", "new_id": 1057}
{"id": 187, "function": "ST_RemoveIrrelevantPointsForView", "question": "看看形状POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))在一个小框框里(12 12到18 18)变得不那么复杂后是什么样子？", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18)));", "execution_result": [["POLYGON((0 30,30 30,30 0,0 0,0 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What does the shape POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) look like after becoming less complex within a small box from (12 12 to 18 18)?", "source": "original", "new_id": 1061}
{"id": 187, "function": "ST_RemoveIrrelevantPointsForView", "question": "看看在一个框里，左边12，底边12，右边18，顶边18，能看到的那些点在多边形POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))中是啥样的？", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18)));", "execution_result": [["POLYGON((0 30,30 30,30 0,0 0,0 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What do the visible points look like in the shape POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) when you peek through a frame with sides at 12, bottom at 12, right at 18, and top at 18?", "source": "original", "new_id": 1060}
{"id": 188, "function": "ST_RemoveIrrelevantPointsForView", "question": "给那些线条做个处理吧，用一个框框圈住它们，框框的角在(12 12)和(18 18)。只留下那些在视野里能看到的点，其他的就不用了，最后把结果变成文字给我。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTILINESTRING((10 15,15 15,20 15),(13 13,15 15,17 17))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Process those lines with a box that covers them, having corners at (12, 12) and (18, 18). Keep only the points visible in the view, ignore the rest, and finally give me the result in text form.", "source": "original", "new_id": 1063}
{"id": 188, "function": "ST_RemoveIrrelevantPointsForView", "question": "输出经过处理后的线条串的形状，输入是那些坐标串，像(0 0,10 0,20 0,30 0)这样的。视图范围是由12和18这些数字组成的一个框，记得保留端点哦。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTILINESTRING((10 15,15 15,20 15),(13 13,15 15,17 17))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the shape of the line strings after processing, with input being those coordinate sequences like (0 0,10 0,20 0,30 0). The view range is a box formed by numbers like 12 and 18, and remember to keep the endpoints.", "source": "original", "new_id": 1067}
{"id": 187, "function": "ST_RemoveIrrelevantPointsForView", "question": "看看那个多边形POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)，在从（12,12）到（18,18）的框框中被简化后的样子是什么。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18)));", "execution_result": [["POLYGON((0 30,30 30,30 0,0 0,0 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check out what that polygon POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) looks like after being simplified within the box from (12,12) to (18,18).", "source": "original", "new_id": 1059}
{"id": 188, "function": "ST_RemoveIrrelevantPointsForView", "question": "对由几条线段串起来的图形，看看在一个从(12,12)到(18,18)的方框里，哪些小点点是多余的。记得留住那些关键的起始和结束点，然后用一种叫WKT的方式说出来。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTILINESTRING((10 15,15 15,20 15),(13 13,15 15,17 17))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the shape made of several connected lines, figure out which little dots are unnecessary within a box from (12,12) to (18,18). Remember to keep those crucial start and end points, then describe it using something called WKT.", "source": "original", "new_id": 1064}
{"id": 189, "function": "ST_RemoveIrrelevantPointsForView", "question": "对那条从(0 0)到(30 0)经过几个点的线，用一个框框(12,12,18,18)去掉一些不重要的点，记得要保留头尾的点，然后看看它变成了什么样子。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('LINESTRING(0 0, 10 0,20 0,30 0)'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the line that goes from (0 0) to (30 0) passing through several points, use a box (12,12,18,18) to remove some less important points, remember to keep the endpoints, and then see what it turns into.", "source": "original", "new_id": 1070}
{"id": 189, "function": "ST_RemoveIrrelevantPointsForView", "question": "把那个从(0 0)到(30 0)的长条线看看在(12,12)到(18,18)这个框里哪些点是有用的，只要留住跟这个框直接有关系的头尾点，给我文字版本。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('LINESTRING(0 0, 10 0,20 0,30 0)'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that long line from (0 0) to (30 0) and see which points are useful in the box from (12,12) to (18,18). Just keep the endpoints directly related to the box and give me the text version.", "source": "original", "new_id": 1069}
{"id": 189, "function": "ST_RemoveIrrelevantPointsForView", "question": "把那条从(0 0)到(30 0)的线，经过一个像框一样的范围(12, 12, 18, 18)处理后，看看它的样子会变成什么样子。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('LINESTRING(0 0, 10 0,20 0,30 0)'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After putting the line from (0 0) to (30 0) through a frame-like area (12, 12, 18, 18), see what it looks like afterwards.", "source": "original", "new_id": 1071}
{"id": 189, "function": "ST_RemoveIrrelevantPointsForView", "question": "给定这串线(0 0到30 0)，在一个由(12, 12)到(18, 18)的框里，只留下和框有关的那些小点，其他的都不要，然后说说它变成了什么样子。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('LINESTRING(0 0, 10 0,20 0,30 0)'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Given this line from (0 0 to 30 0), within a box from (12, 12) to (18, 18), only keep the little dots that matter for the box and ignore the rest, then describe what it looks like afterwards.", "source": "original", "new_id": 1072}
{"id": 188, "function": "ST_RemoveIrrelevantPointsForView", "question": "在那些坐标点之间有一些线段，比如(0 0到30 0)，还有其他几段。看看这些线段在一个框里(12,12)-(18,18)里，哪些是有用的，只留下对视窗有影响的点，然后给个结果。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTILINESTRING((10 15,15 15,20 15),(13 13,15 15,17 17))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are some lines between those coordinates, like from (0 0 to 30 0), and a few others. Check which of these lines are useful within a box (12,12)-(18,18), keeping only the points that affect the view, then give a result.", "source": "original", "new_id": 1065}
{"id": 189, "function": "ST_RemoveIrrelevantPointsForView", "question": "有个由(0 0, 10 0, 20 0, 30 0)这些点连成的线条，假如你只想留下那些在四个角是(12, 12)和(18, 18)的框框里的点，并且要保留边缘的点，最后你会得到什么样的线条描述呢？", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('LINESTRING(0 0, 10 0,20 0,30 0)'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a line drawn through points (0 0, 10 0, 20 0, 30 0). If you only want to keep the points within a box with corners at (12, 12) and (18, 18), and you also want to keep the endpoints, what kind of line description would you end up with?", "source": "original", "new_id": 1068}
{"id": 188, "function": "ST_RemoveIrrelevantPointsForView", "question": "想象有一些线组成的图形，其中有三条线，从这些点出发：第一条从 (0 0) 经过 (10 0) 到 (30 0)，第二条从 (0 15) 开始经过 (5 15) 到 (40 15)，第三条从 (13 13) 到 (17 17)。如果在一个四边形框里边，四边形从 (12,12) 到 (18,18)，去掉那些不在框里的点，但保留重要的端点，最后看这个图形会是什么样子？", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTILINESTRING((10 15,15 15,20 15),(13 13,15 15,17 17))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a picture made of lines, with three lines starting from these points: the first goes from (0 0) through (10 0) to (30 0), the second starts at (0 15) through (5 15) to (40 15), and the third from (13 13) to (17 17). If you have a rectangle from (12,12) to (18,18), remove the points outside the rectangle but keep the important endpoints. What would the shape look like in the end?", "source": "original", "new_id": 1066}
{"id": 190, "function": "ST_RemoveIrrelevantPointsForView", "question": "对那个由(0 30)到(30 0)的多边形，在(12,12)到(18,18)的这个框里，只留有用的部分，结果要是文本哦。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["POLYGON((15 30,30 0,0 0,15 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that polygon from (0 30) to (30 0), within the box from (12,12) to (18,18), only keep the useful parts and the result should be in text.", "source": "original", "new_id": 1075}
{"id": 189, "function": "ST_RemoveIrrelevantPointsForView", "question": "有一串小点从(0 0)到(30 0)，经过某种处理后，看看在一个由(12, 12)到(18, 18)的框里，保留开头和结尾，会变成什么样的形状？", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('LINESTRING(0 0, 10 0,20 0,30 0)'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a series of little dots from (0 0) to (30 0), and after some kind of processing, see what shape it turns into within a box from (12, 12) to (18, 18), keeping the start and end.", "source": "original", "new_id": 1073}
{"id": 190, "function": "ST_RemoveIrrelevantPointsForView", "question": "对于那个包含点(0, 30), (15, 30), (30, 30), (30, 0), (0, 0)的图形，在(12, 12)到(18, 18)的框框中，只留下对这个框框有关系的那些点，结果要用那种文本形式呈现。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["POLYGON((15 30,30 0,0 0,15 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that shape with dots at (0, 30), (15, 30), (30, 30), (30, 0), (0, 0), within the box from (12, 12) to (18, 18), keep only those dots that matter to this box, and show the result in that text form.", "source": "original", "new_id": 1074}
{"id": 190, "function": "ST_RemoveIrrelevantPointsForView", "question": "看看那个多边形，点在(0 30, 15 30, 30 30, 30 0, 0 0, 0 30)的位置，在一个框框(12,12)到(18,18)里，去掉看不见的点，但要保持完整，然后告诉我结果是什么样子的。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["POLYGON((15 30,30 0,0 0,15 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at that shape with points at (0 30, 15 30, 30 30, 30 0, 0 0, 0 30), inside a box from (12,12) to (18,18), remove the points you can't see but keep it whole, then tell me what it looks like.", "source": "original", "new_id": 1076}
{"id": 190, "function": "ST_RemoveIrrelevantPointsForView", "question": "查看这些坐标点形成的形状，看看在这个范围内（12 12, 18 18）哪些点还在，特别注意最后一个点要保留下来。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["POLYGON((15 30,30 0,0 0,15 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Look at the shape formed by these coordinates and see which points remain within this range (12 12, 18 18), especially keeping the last point.", "source": "original", "new_id": 1079}
{"id": 191, "function": "ST_RemoveIrrelevantPointsForView", "question": "看一下这些多边形的小点，它们在某个12到18的方框里被处理过，最后要留下一些形状，能不能给我一个描述性的文字？", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTIPOLYGON(((10 10,40 10,20 20,10 20,10 10)),((10 10,20 10,20 20,10 20,10 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at these polygons' little dots, they've been processed within a box from 12 to 18, and some shapes need to remain, can you give me a descriptive text?", "source": "original", "new_id": 1080}
{"id": 191, "function": "ST_RemoveIrrelevantPointsForView", "question": "有两个小区域，分别由一些点组成，比如(10 10)到(40 10)这样的，看它们在一个框里(12,12,18,18)会变成什么样子，然后告诉我它们的形状文字。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTIPOLYGON(((10 10,40 10,20 20,10 20,10 10)),((10 10,20 10,20 20,10 20,10 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are two small areas made of points, like (10 10) to (40 10), see how they look inside a box (12,12,18,18) and then tell me their shape in words.", "source": "original", "new_id": 1083}
{"id": 190, "function": "ST_RemoveIrrelevantPointsForView", "question": "把那个形状POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))放在一个框里，框是从(12,12)到(18,18)，然后看一下它在这个框里会变成什么样子，记得要保留最后的点。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["POLYGON((15 30,30 0,0 0,15 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Put that shape POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) inside a box from (12,12) to (18,18), and see what it looks like in this box, remembering to keep the final points.", "source": "original", "new_id": 1078}
{"id": 191, "function": "ST_RemoveIrrelevantPointsForView", "question": "有两个多边形，一个有点在(10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)，另一个在(10 10, 20 10, 20 20, 10 20, 10 10)，在一个从(12,12)到(18,18)的框里，看看哪些点是重要的，最后变成文本。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTIPOLYGON(((10 10,40 10,20 20,10 20,10 10)),((10 10,20 10,20 20,10 20,10 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are two polygons, one with points at (10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10), and another at (10 10, 20 10, 20 20, 10 20, 10 10), within a box from (12,12) to (18,18), check which points matter, and finally turn it into text.", "source": "original", "new_id": 1081}
{"id": 192, "function": "ST_RemoveSmallParts", "question": "对于从(10, 10)到(20, 20)的那条线，去掉那些太小的部分（两个方向都用50这个数）后，结果是什么样的？", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('LINESTRING(10 10, 20 20)'), 50, 50));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that line from (10, 10) to (20, 20), what does it look like after removing the parts that are too small, using 50 in both directions?", "source": "original", "new_id": 1086}
{"id": 190, "function": "ST_RemoveIrrelevantPointsForView", "question": "从一个形状POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))中，经过在某个范围内(12,12)-(18,18)处理后，看看哪些点是关键的，并保留结尾的点，输出它的样子。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["POLYGON((15 30,30 0,0 0,15 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a shape POLYGON((0 30, 15 30, 30 30, 30 0, 0 0, 0 30)) and, after handling it within a certain range (12,12)-(18,18), see which points are crucial, keeping the ending points, and show what it looks like.", "source": "original", "new_id": 1077}
{"id": 191, "function": "ST_RemoveIrrelevantPointsForView", "question": "有两个形状的集合，像个大拼图，第一个有些点是(10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)，第二个有点是(10 10, 20 10, 20 20, 10 20, 10 10)。想要用一个框框(12,12,18,18)看看哪些点不重要，记得要保持那些圈圈，然后看看最后的结果长啥样。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTIPOLYGON(((10 10,40 10,20 20,10 20,10 10)),((10 10,20 10,20 20,10 20,10 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a set of two shapes, like a big puzzle, the first has some points at (10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10), the second has points at (10 10, 20 10, 20 20, 10 20, 10 10). Want to use a box (12,12,18,18) to see which points don't matter, and remember to keep those loops, then see what the final result looks like.", "source": "original", "new_id": 1082}
{"id": 192, "function": "ST_RemoveSmallParts", "question": "对于从点(10 10)到点(20 20)画出的那条线，去掉那些面积和周长都不到50的小段后，结果是什么样子？", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('LINESTRING(10 10, 20 20)'), 50, 50));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the line drawn from point (10 10) to point (20 20), what does it look like after removing those small segments with both area and perimeter less than 50?", "source": "original", "new_id": 1091}
{"id": 191, "function": "ST_RemoveIrrelevantPointsForView", "question": "返回一个形状的文字描述，它经过处理后只保留与视窗范围相关的部分，形状由两个区域组成，第一个区域的顶点是(10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)，第二个区域的顶点是(10 10, 20 10, 20 20, 10 20, 10 10)，视窗范围是(12,12,18,18)，并确保形状完整闭合。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTIPOLYGON(((10 10,40 10,20 20,10 20,10 10)),((10 10,20 10,20 20,10 20,10 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide a text description of a shape after filtering out parts not related to the view range. The shape has two areas, the first with vertices (10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10), and the second with vertices (10 10, 20 10, 20 20, 10 20, 10 10). The view range is (12,12,18,18), and ensure the shape remains fully closed.", "source": "original", "new_id": 1084}
{"id": 192, "function": "ST_RemoveSmallParts", "question": "给我看看那条从点10 10到点20 20的线，经过一些小的去除处理后，是什么样子的？长度和宽度都要小于50哦。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('LINESTRING(10 10, 20 20)'), 50, 50));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you show me what the line from point 10 10 to point 20 20 looks like after some small removal treatment? Both length and width should be less than 50, okay?", "source": "original", "new_id": 1089}
{"id": 191, "function": "ST_RemoveIrrelevantPointsForView", "question": "请给我一个经过处理的形状描述，它是由两个图形组成的，第一个图形有点在(10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)，第二个图形有点在(10 10, 20 10, 20 20, 10 20, 10 10)。还有查看范围是由12,12到18,18形成的一个矩形。最后，确保那些环是完整的。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTIPOLYGON(((10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10)),((10 10, 20 10, 20 20, 10 20, 10 10)))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTIPOLYGON(((10 10,40 10,20 20,10 20,10 10)),((10 10,20 10,20 20,10 20,10 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please give me a processed shape description, consisting of two figures, the first with points at (10 10, 20 10, 30 10, 40 10, 20 20, 10 20, 10 10), the second with points at (10 10, 20 10, 20 20, 10 20, 10 10). Also, the viewing range is a rectangle formed from 12,12 to 18,18. Finally, make sure those rings are complete.", "source": "original", "new_id": 1085}
{"id": 192, "function": "ST_RemoveSmallParts", "question": "从由坐标(10 10)到(20 20)的那条线中去掉面积和周长都小于50的部分，然后把它变成一种很特别的文本格式。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('LINESTRING(10 10, 20 20)'), 50, 50));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take away parts from the line going from coordinates (10 10) to (20 20) where both the area and perimeter are less than 50, then turn it into a special text format.", "source": "original", "new_id": 1088}
{"id": 192, "function": "ST_RemoveSmallParts", "question": "从那条连接了点(10 10)和点(20 20)的线中，去掉一些小块，要求它们的面积和周长都不超过50，然后看看它变成了什么样子。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('LINESTRING(10 10, 20 20)'), 50, 50));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From the line connecting the dots (10 10) and (20 20), remove some small bits that have both area and perimeter less than 50, then see what it turns into.", "source": "original", "new_id": 1090}
{"id": 193, "function": "ST_RemoveSmallParts", "question": "从那些多边形里，把面积和周长小于50的小块去掉，然后告诉我它们的形状样子。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))'), 50, 50));", "execution_result": [["MULTIPOLYGON(((60 160,120 160,120 220,60 220,60 160)),((85 75,155 75,155 145,85 145,85 75)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From those polygons, remove the little parts with area and perimeter less than 50, and then tell me what their shape looks like.", "source": "original", "new_id": 1092}
{"id": 193, "function": "ST_RemoveSmallParts", "question": "从那些复杂的多边形中，去掉面积和周长都小于50的小块后，最后得到的形状用WKT来描述。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))'), 50, 50));", "execution_result": [["MULTIPOLYGON(((60 160,120 160,120 220,60 220,60 160)),((85 75,155 75,155 145,85 145,85 75)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From those complex shapes, remove the little pieces with both area and perimeter less than 50, and describe the final shape using WKT.", "source": "original", "new_id": 1097}
{"id": 194, "function": "ST_Reverse", "question": "把这两个地方(1,2)和(1,10)连起来，看看连线的样子和倒过来的样子是什么。", "sql": "SELECT ST_AsText(geom) AS line, ST_AsText(ST_Reverse(geom)) AS reverseline \nFROM (SELECT ST_MakeLine(ST_Point(1,2), ST_Point(1,10)) AS geom) AS foo;", "execution_result": [["LINESTRING(1 2,1 10)", "LINESTRING(1 10,1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect these two spots (1,2) and (1,10), and see what the line looks like and what it looks like when flipped.", "source": "original", "new_id": 1098}
{"id": 193, "function": "ST_RemoveSmallParts", "question": "从那些重叠的多边形中去掉小于50的部分后，看看它们的WKT样子，尤其是那些在(60 160)和(120 160)之间的点，或者(85 75)和(155 75)之间的点。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))'), 50, 50));", "execution_result": [["MULTIPOLYGON(((60 160,120 160,120 220,60 220,60 160)),((85 75,155 75,155 145,85 145,85 75)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After taking out the little pieces less than 50 from those overlapping shapes, check out their WKT form, especially the points between (60 160) and (120 160), or between (85 75) and (155 75).", "source": "original", "new_id": 1095}
{"id": 188, "function": "ST_RemoveIrrelevantPointsForView", "question": "看看那条由多个小线段组成的长线，像是在(0 0)到(30 0)和(0 15)到(40 15)之间画的，还有个从(13 13)到(17 17)的，想办法只留下在一个从(12 12)到(18 18)的框框内有用的点，记得要保留那些关键的终点，然后用一种文本方式展示出来。", "sql": "SELECT ST_AsText( ST_RemoveIrrelevantPointsForView( ST_GeomFromText('MULTILINESTRING((0 0, 10 0,20 0,30 0), (0 15, 5 15, 10 15, 15 15, 20 15, 25 15, 30 15, 40 15), (13 13,15 15,17 17))'), ST_MakeEnvelope(12,12,18,18), true));", "execution_result": [["MULTILINESTRING((10 15,15 15,20 15),(13 13,15 15,17 17))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a long line made of several little segments, like drawn from (0 0) to (30 0) and (0 15) to (40 15), plus one from (13 13) to (17 17). Try to keep only the useful points within a box from (12 12) to (18 18), remembering to retain the important endpoints, and show it in a text-like format.", "source": "original", "new_id": 1062}
{"id": 194, "function": "ST_Reverse", "question": "找出从位置(1, 2)到(1, 10)的那条线，还有如果你把这条线反过来的样子，用文字来描述。", "sql": "SELECT ST_AsText(geom) AS line, ST_AsText(ST_Reverse(geom)) AS reverseline \nFROM (SELECT ST_MakeLine(ST_Point(1,2), ST_Point(1,10)) AS geom) AS foo;", "execution_result": [["LINESTRING(1 2,1 10)", "LINESTRING(1 10,1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the line that goes from spot (1, 2) to (1, 10), and also describe in words what it looks like if you reverse this line.", "source": "original", "new_id": 1099}
{"id": 194, "function": "ST_Reverse", "question": "请找出由两个小点(1 2)和(1 10)连接成的一条线的文字表达，还有如果你把这条线反过来的文字描述会是什么。", "sql": "SELECT ST_AsText(geom) AS line, ST_AsText(ST_Reverse(geom)) AS reverseline \nFROM (SELECT ST_MakeLine(ST_Point(1,2), ST_Point(1,10)) AS geom) AS foo;", "execution_result": [["LINESTRING(1 2,1 10)", "LINESTRING(1 10,1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please find the text expression of a line connecting two little dots at (1 2) and (1 10), and what the text description would be if you reversed this line.", "source": "original", "new_id": 1103}
{"id": 194, "function": "ST_Reverse", "question": "从1,2和1,10这两个小点连成的线段中，给我看它原来的样子和翻转后的样子，用一种特殊文本格式表达出来，结果叫做line和reverseline。", "sql": "SELECT ST_AsText(geom) AS line, ST_AsText(ST_Reverse(geom)) AS reverseline \nFROM (SELECT ST_MakeLine(ST_Point(1,2), ST_Point(1,10)) AS geom) AS foo;", "execution_result": [["LINESTRING(1 2,1 10)", "LINESTRING(1 10,1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From the segment formed by two little dots at 1,2 and 1,10, show me how it originally looks and how it appears after flipping, expressed in a special text format, with the results named line and reverseline.", "source": "original", "new_id": 1100}
{"id": 193, "function": "ST_RemoveSmallParts", "question": "有一个形状由三个小图组成，分别是(60 160, 120 160, 120 220, 60 220, 60 160)和(70 170, 70 210, 110 210, 110 170, 70 170)，(85 75, 155 75, 155 145, 85 145, 85 75)，以及(50 110, 70 110, 70 130, 50 130, 50 110)。帮我把面积小于50和边长小于50的部分去掉，然后告诉我剩下的是什么样子吧。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))'), 50, 50));", "execution_result": [["MULTIPOLYGON(((60 160,120 160,120 220,60 220,60 160)),((85 75,155 75,155 145,85 145,85 75)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a shape made of three little drawings, one is (60 160, 120 160, 120 220, 60 220, 60 160) and (70 170, 70 210, 110 210, 110 170, 70 170), another is (85 75, 155 75, 155 145, 85 145, 85 75), and the third is (50 110, 70 110, 70 130, 50 130, 50 110). Can you help take away parts smaller than 50 in size and length, then tell me what the rest looks like?", "source": "original", "new_id": 1094}
{"id": 194, "function": "ST_Reverse", "question": "能不能用某种格式描述一下从(1,2)到(1,10)的那条连接线，还有如果把这条线倒过来会是什么样子呢？", "sql": "SELECT ST_AsText(geom) AS line, ST_AsText(ST_Reverse(geom)) AS reverseline \nFROM (SELECT ST_MakeLine(ST_Point(1,2), ST_Point(1,10)) AS geom) AS foo;", "execution_result": [["LINESTRING(1 2,1 10)", "LINESTRING(1 10,1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you describe in some format the connecting line from (1,2) to (1,10), and what would it look like if this line were reversed?", "source": "original", "new_id": 1101}
{"id": 195, "function": "ST_Segmentize", "question": "有一个由(0 0)、(0 8)、(30 0)这几个点围成的形状，把它的边最大切成10单位长，然后用那种标准格式说出来。", "sql": "SELECT ST_AsText( ST_Segmentize(('POLYGON((0 0, 0 8, 30 0, 0 0))'::geometry), 10));", "execution_result": [["POLYGON((0 0,0 8,7.5 6,15 4,22.5 2,30 0,20 0,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a shape formed by the points (0 0), (0 8), and (30 0). Break its sides into pieces no longer than 10 units, then describe it using that standard text format.", "source": "original", "new_id": 1104}
{"id": 195, "function": "ST_Segmentize", "question": "把那个形状POLYGON((0 0, 0 8, 30 0, 0 0))切成小段，每一段不能超过10个单位长，然后用某种格式来表达结果。", "sql": "SELECT ST_AsText( ST_Segmentize(('POLYGON((0 0, 0 8, 30 0, 0 0))'::geometry), 10));", "execution_result": [["POLYGON((0 0,0 8,7.5 6,15 4,22.5 2,30 0,20 0,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that shape POLYGON((0 0, 0 8, 30 0, 0 0)) and chop it into smaller parts, each no longer than 10 units, then express the result in some format.", "source": "original", "new_id": 1106}
{"id": 192, "function": "ST_RemoveSmallParts", "question": "从那条从(10, 10)到(20, 20)的直线中去掉那些在两个方向都小于50的小段，结果用文本表示。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('LINESTRING(10 10, 20 20)'), 50, 50));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From that line going from (10, 10) to (20, 20), take out the small segments that are less than 50 in both directions, and show the result in text.", "source": "original", "new_id": 1087}
{"id": 195, "function": "ST_Segmentize", "question": "把那个形状，像是POLYGON((0 0, 0 8, 30 0, 0 0))，用一种方式切开，每段不能超过10，看看它变成什么样的文本。", "sql": "SELECT ST_AsText( ST_Segmentize(('POLYGON((0 0, 0 8, 30 0, 0 0))'::geometry), 10));", "execution_result": [["POLYGON((0 0,0 8,7.5 6,15 4,22.5 2,30 0,20 0,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that shape, like POLYGON((0 0, 0 8, 30 0, 0 0)), and cut it in a way where each piece isn't longer than 10, and see what it turns into as text.", "source": "original", "new_id": 1105}
{"id": 193, "function": "ST_RemoveSmallParts", "question": "从那些坐标形成的大形状里，去掉X和Y方向都小于50的部分，看看能用WKT说出剩下的故事吗？例如MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))'), 50, 50));", "execution_result": [["MULTIPOLYGON(((60 160,120 160,120 220,60 220,60 160)),((85 75,155 75,155 145,85 145,85 75)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From the big shapes formed by those coordinates, remove parts with both X and Y directions less than 50, and see if you can tell the remaining story in WKT. For example MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110))).", "source": "original", "new_id": 1096}
{"id": 195, "function": "ST_Segmentize", "question": "看看那个三角形状，边长最多是10的分段会变成什么样子？", "sql": "SELECT ST_AsText( ST_Segmentize(('POLYGON((0 0, 0 8, 30 0, 0 0))'::geometry), 10));", "execution_result": [["POLYGON((0 0,0 8,7.5 6,15 4,22.5 2,30 0,20 0,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What would that triangle look like if its sides were broken into pieces no longer than 10?", "source": "original", "new_id": 1107}
{"id": 195, "function": "ST_Segmentize", "question": "把那个多边形用最长不超过10的线段分开，能得到什么样的形状？", "sql": "SELECT ST_AsText( ST_Segmentize(('POLYGON((0 0, 0 8, 30 0, 0 0))'::geometry), 10));", "execution_result": [["POLYGON((0 0,0 8,7.5 6,15 4,22.5 2,30 0,20 0,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you break up that polygon into pieces not longer than 10, what shape do you get?", "source": "original", "new_id": 1109}
{"id": 193, "function": "ST_RemoveSmallParts", "question": "从那些包含坐标为MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))的多边形中，去掉面积和边长都小于50的小块，结果以文本形式给我。", "sql": "SELECT ST_AsText( ST_RemoveSmallParts( ST_GeomFromText('MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110)))'), 50, 50));", "execution_result": [["MULTIPOLYGON(((60 160,120 160,120 220,60 220,60 160)),((85 75,155 75,155 145,85 145,85 75)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From those shapes containing coordinates MULTIPOLYGON( ((60 160, 120 160, 120 220, 60 220, 60 160), (70 170, 70 210, 110 210, 110 170, 70 170)), ((85 75, 155 75, 155 145, 85 145, 85 75)), ((50 110, 70 110, 70 130, 50 130, 50 110))), remove the tiny pieces with area and perimeter both less than 50, and give me the result in text form.", "source": "original", "new_id": 1093}
{"id": 195, "function": "ST_Segmentize", "question": "你能用那些坐标创建的形状，切成每段不超过10单位长的线段，然后告诉我它们的文本形式吗？比如从(0 0)到(0 8)再到(30 0)再回到(0 0)的那个形状。", "sql": "SELECT ST_AsText( ST_Segmentize(('POLYGON((0 0, 0 8, 30 0, 0 0))'::geometry), 10));", "execution_result": [["POLYGON((0 0,0 8,7.5 6,15 4,22.5 2,30 0,20 0,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you take that shape made from those coordinates, cut it into pieces no longer than 10 units each, and then tell me their text form? Like the shape from (0 0) to (0 8) to (30 0) and back to (0 0).", "source": "original", "new_id": 1108}
{"id": 196, "function": "ST_Segmentize", "question": "把从(0 0)到(60 60)的那条线，按最大2000000米的距离切成小段，结果用WKT的那种格式给我。", "sql": "SELECT ST_AsText( ST_Segmentize(('LINESTRING (0 0, 60 60)'::geography), 2000000));", "execution_result": [["LINESTRING(0 0,4.252632294621186 8.43596525986862,8.69579947419404 16.824093489701564,13.550465473227048 25.107950473646188,19.1066053508691 33.21091076089908,25.779290201459894 41.01711439406505,34.188839517966954 48.337222885886,45.238153936612264 54.84733442373889,60 60)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that line from (0 0) to (60 60) and cut it into smaller parts with a maximum distance of 2000000 meters, then give me the result in that WKT format.", "source": "original", "new_id": 1110}
{"id": 194, "function": "ST_Reverse", "question": "能不能给我看看连接两个小点（1,2）和（1,10）的那条线的文字版本，还有如果那条线转个方向的话，它的文字版本是什么样的？", "sql": "SELECT ST_AsText(geom) AS line, ST_AsText(ST_Reverse(geom)) AS reverseline \nFROM (SELECT ST_MakeLine(ST_Point(1,2), ST_Point(1,10)) AS geom) AS foo;", "execution_result": [["LINESTRING(1 2,1 10)", "LINESTRING(1 10,1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show me the text version of the line connecting those two little dots (1,2) and (1,10), and also what the text version would look like if the line were flipped around?", "source": "original", "new_id": 1102}
{"id": 196, "function": "ST_Segmentize", "question": "看看那条从(0, 0)到(60, 60)的线，假如每段最多2000000米，结果会是什么样的文本？", "sql": "SELECT ST_AsText( ST_Segmentize(('LINESTRING (0 0, 60 60)'::geography), 2000000));", "execution_result": [["LINESTRING(0 0,4.252632294621186 8.43596525986862,8.69579947419404 16.824093489701564,13.550465473227048 25.107950473646188,19.1066053508691 33.21091076089908,25.779290201459894 41.01711439406505,34.188839517966954 48.337222885886,45.238153936612264 54.84733442373889,60 60)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine the line stretching from (0, 0) to (60, 60), if each piece is no longer than 2000000 meters, what would the text version look like?", "source": "original", "new_id": 1113}
{"id": 196, "function": "ST_Segmentize", "question": "把从(0, 0)到(60, 60)的那条线，用不超过2000000米的间隔分成小段，然后告诉我这个线条的最终样子。", "sql": "SELECT ST_AsText( ST_Segmentize(('LINESTRING (0 0, 60 60)'::geography), 2000000));", "execution_result": [["LINESTRING(0 0,4.252632294621186 8.43596525986862,8.69579947419404 16.824093489701564,13.550465473227048 25.107950473646188,19.1066053508691 33.21091076089908,25.779290201459894 41.01711439406505,34.188839517966954 48.337222885886,45.238153936612264 54.84733442373889,60 60)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that line from (0, 0) to (60, 60), break it into smaller pieces with intervals not exceeding 2000000 meters, and then tell me how this line finally looks.", "source": "original", "new_id": 1114}
{"id": 196, "function": "ST_Segmentize", "question": "把那个从(0 0)到(60 60)的长线按照最大距离2000000米进行切割，然后告诉我它的形状是什么样子的，用特定格式表达出来。", "sql": "SELECT ST_AsText( ST_Segmentize(('LINESTRING (0 0, 60 60)'::geography), 2000000));", "execution_result": [["LINESTRING(0 0,4.252632294621186 8.43596525986862,8.69579947419404 16.824093489701564,13.550465473227048 25.107950473646188,19.1066053508691 33.21091076089908,25.779290201459894 41.01711439406505,34.188839517966954 48.337222885886,45.238153936612264 54.84733442373889,60 60)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that long line from (0 0) to (60 60) and cut it based on a maximum distance of 2000000 meters, then tell me what its shape looks like, expressed in a specific format.", "source": "original", "new_id": 1115}
{"id": 196, "function": "ST_Segmentize", "question": "把从(0, 0)到(60, 60)这条线，按每段不超过2000000米的长度，切成几段，然后看看它们长啥样。", "sql": "SELECT ST_AsText( ST_Segmentize(('LINESTRING (0 0, 60 60)'::geography), 2000000));", "execution_result": [["LINESTRING(0 0,4.252632294621186 8.43596525986862,8.69579947419404 16.824093489701564,13.550465473227048 25.107950473646188,19.1066053508691 33.21091076089908,25.779290201459894 41.01711439406505,34.188839517966954 48.337222885886,45.238153936612264 54.84733442373889,60 60)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the line from (0, 0) to (60, 60), split it into parts where each part isn't more than 2000000 meters, and then see what they look like.", "source": "original", "new_id": 1112}
{"id": 197, "function": "ST_Segmentize", "question": "把那些由(0 0, 0 1, 0 9)和(1 10, 1 18)组成的线条，按每段最多5的长度来切割，看看它们的文字描述会是什么。", "sql": "SELECT ST_AsText(ST_Segmentize( 'MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))'::geometry, 5 ));", "execution_result": [["MULTILINESTRING((0 0,0 1,0 5,0 9),(1 10,1 14,1 18))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those lines made from (0 0, 0 1, 0 9) and (1 10, 1 18), slice them up with each piece no longer than 5, and see what their text description would be.", "source": "original", "new_id": 1116}
{"id": 197, "function": "ST_Segmentize", "question": "有个多段线，第一条从(0 0)跑到(0 1)再到(0 9)，第二条从(1 10)到(1 18)，想把它切成每段不超过5长的小段，然后看看它的文本格式。", "sql": "SELECT ST_AsText(ST_Segmentize( 'MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))'::geometry, 5 ));", "execution_result": [["MULTILINESTRING((0 0,0 1,0 5,0 9),(1 10,1 14,1 18))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a multiline that goes from (0 0) to (0 1) and then to (0 9) for the first part, and from (1 10) to (1 18) for the second part. Try cutting it into smaller pieces, each no longer than 5, and see its text form.", "source": "original", "new_id": 1118}
{"id": 197, "function": "ST_Segmentize", "question": "把那些线条，像是(0 0, 0 1, 0 9)和(1 10, 1 18)，每段不超过5的样子，变成文字的样子，会是什么呢？", "sql": "SELECT ST_AsText(ST_Segmentize( 'MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))'::geometry, 5 ));", "execution_result": [["MULTILINESTRING((0 0,0 1,0 5,0 9),(1 10,1 14,1 18))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What would those lines, like (0 0, 0 1, 0 9) and (1 10, 1 18), look like in a text form if each segment is not more than 5 in length?", "source": "original", "new_id": 1120}
{"id": 197, "function": "ST_Segmentize", "question": "把那两条从(0,0)到(0,1)再到(0,9)和从(1,10)到(1,18)的小线段，用一种方式切成每段不长于5的长度，然后告诉我它们的样子。", "sql": "SELECT ST_AsText(ST_Segmentize( 'MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))'::geometry, 5 ));", "execution_result": [["MULTILINESTRING((0 0,0 1,0 5,0 9),(1 10,1 14,1 18))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those two little lines going from (0,0) to (0,1) and then to (0,9), and from (1,10) to (1,18), and split them up in a way so no piece is longer than 5, then tell me what they look like.", "source": "original", "new_id": 1117}
{"id": 197, "function": "ST_Segmentize", "question": "把由那些小线段组成的形状MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))，想办法让每一段不比5长，然后说出它的样子。", "sql": "SELECT ST_AsText(ST_Segmentize( 'MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))'::geometry, 5 ));", "execution_result": [["MULTILINESTRING((0 0,0 1,0 5,0 9),(1 10,1 14,1 18))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the shape made of those little segments MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18)), make sure no part is longer than 5, and describe what it looks like.", "source": "original", "new_id": 1119}
{"id": 198, "function": "ST_SetPoint", "question": "把那条连接两点的线的第一个小点换成新的坐标点(-1 1)，看看变成什么样的形状。", "sql": "SELECT ST_AsText(ST_SetPoint('LINESTRING(-1 2,-1 3)', 0, 'POINT(-1 1)'));", "execution_result": [["LINESTRING(-1 1,-1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Swap the first little dot of the line connecting two points with a new coordinate point (-1 1), and see what shape it becomes.", "source": "original", "new_id": 1122}
{"id": 197, "function": "ST_Segmentize", "question": "把那些线条组成的东西，比如像(0 0, 0 1, 0 9)和(1 10, 1 18)，分成每段不超过5的长度，然后告诉我结果是什么样子。", "sql": "SELECT ST_AsText(ST_Segmentize( 'MULTILINESTRING((0 0, 0 1, 0 9),(1 10, 1 18))'::geometry, 5 ));", "execution_result": [["MULTILINESTRING((0 0,0 1,0 5,0 9),(1 10,1 14,1 18))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those lines made of points, like (0 0, 0 1, 0 9) and (1 10, 1 18), break them into parts where each part isn't longer than 5, and tell me what it looks like.", "source": "original", "new_id": 1121}
{"id": 196, "function": "ST_Segmentize", "question": "有一条从(0 0)到(60 60)的线，把它按最大2000000米的间隔切成小段，然后看看它的文本样子。", "sql": "SELECT ST_AsText( ST_Segmentize(('LINESTRING (0 0, 60 60)'::geography), 2000000));", "execution_result": [["LINESTRING(0 0,4.252632294621186 8.43596525986862,8.69579947419404 16.824093489701564,13.550465473227048 25.107950473646188,19.1066053508691 33.21091076089908,25.779290201459894 41.01711439406505,34.188839517966954 48.337222885886,45.238153936612264 54.84733442373889,60 60)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There’s a line from (0 0) to (60 60); split it into smaller parts with a maximum gap of 2000000 meters, then see how it looks in text.", "source": "original", "new_id": 1111}
{"id": 198, "function": "ST_SetPoint", "question": "把一条线的第一个角落用一个新的小点换掉，然后用某种格式展示出来，线是从(-1 2)到(-1 3)，新的小点是(-1 1)。", "sql": "SELECT ST_AsText(ST_SetPoint('LINESTRING(-1 2,-1 3)', 0, 'POINT(-1 1)'));", "execution_result": [["LINESTRING(-1 1,-1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Swap out the first corner of a line with a new little dot, then show it in some format. The line goes from (-1 2) to (-1 3), and the new little dot is (-1 1).", "source": "original", "new_id": 1124}
{"id": 199, "function": "ST_SetPoint", "question": "把那个有很多小点的线段最后一个变成像这样的小点：-1 1 3，然后用一种特别的格式表示出来。", "sql": "SELECT ST_AsEWKT(ST_SetPoint(foo.geom, ST_NumPoints(foo.geom) - 1, ST_GeomFromEWKT('POINT(-1 1 3)'))) \nFROM (SELECT ST_GeomFromEWKT('LINESTRING(-1 2 3,-1 3 4, 5 6 7)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 2 3,-1 3 4,-1 1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the last little dot of that line with many dots to something like this: -1 1 3, then express it in a special format.", "source": "original", "new_id": 1128}
{"id": 198, "function": "ST_SetPoint", "question": "如果你有一条线，最开始的点是(-1 2)，你把它换成(-1 1)，结果会是什么样子，用那种常见的格式说出来。", "sql": "SELECT ST_AsText(ST_SetPoint('LINESTRING(-1 2,-1 3)', 0, 'POINT(-1 1)'));", "execution_result": [["LINESTRING(-1 1,-1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you have a line and the first point is (-1 2), and you change it to (-1 1), what would it look like in that common format?", "source": "original", "new_id": 1126}
{"id": 199, "function": "ST_SetPoint", "question": "把最后一个坐标换成(-1 1 3)在那些连接起来的点中，然后给我一个EWKT样子的结果。", "sql": "SELECT ST_AsEWKT(ST_SetPoint(foo.geom, ST_NumPoints(foo.geom) - 1, ST_GeomFromEWKT('POINT(-1 1 3)'))) \nFROM (SELECT ST_GeomFromEWKT('LINESTRING(-1 2 3,-1 3 4, 5 6 7)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 2 3,-1 3 4,-1 1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Switch out the last spot with (-1 1 3) in those connected coordinates, then give me something in EWKT style.", "source": "original", "new_id": 1129}
{"id": 198, "function": "ST_SetPoint", "question": "把那条从(-1 2)到(-1 3)的小线的开头换成(-1 1)，然后看看新的形状是什么样的。", "sql": "SELECT ST_AsText(ST_SetPoint('LINESTRING(-1 2,-1 3)', 0, 'POINT(-1 1)'));", "execution_result": [["LINESTRING(-1 1,-1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the start of that little line going from (-1 2) to (-1 3) to (-1 1), and then see what the new shape looks like.", "source": "original", "new_id": 1123}
{"id": 198, "function": "ST_SetPoint", "question": "把那个点(-1 1)放在一条由(-1 2)和(-1 3)组成的线的起始位置，然后看看它会变成什么样子，用那种格式来描述哦。", "sql": "SELECT ST_AsText(ST_SetPoint('LINESTRING(-1 2,-1 3)', 0, 'POINT(-1 1)'));", "execution_result": [["LINESTRING(-1 1,-1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Place that point (-1 1) at the beginning of a line made of (-1 2) and (-1 3), then see what it looks like described in that format.", "source": "original", "new_id": 1125}
{"id": 199, "function": "ST_SetPoint", "question": "在由一些点连接成的三维线中，把最后一个点换成一个新点(-1 1 3)，然后用特殊格式展示修改后的线。", "sql": "SELECT ST_AsEWKT(ST_SetPoint(foo.geom, ST_NumPoints(foo.geom) - 1, ST_GeomFromEWKT('POINT(-1 1 3)'))) \nFROM (SELECT ST_GeomFromEWKT('LINESTRING(-1 2 3,-1 3 4, 5 6 7)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 2 3,-1 3 4,-1 1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In a 3D line made of connected points, swap the last point with a new point (-1 1 3), and then display the modified line in a special format.", "source": "original", "new_id": 1130}
{"id": 199, "function": "ST_SetPoint", "question": "把那个三维线，最后的点换成在位置-1 1 3的点，然后看看它变成什么样的字符串。", "sql": "SELECT ST_AsEWKT(ST_SetPoint(foo.geom, ST_NumPoints(foo.geom) - 1, ST_GeomFromEWKT('POINT(-1 1 3)'))) \nFROM (SELECT ST_GeomFromEWKT('LINESTRING(-1 2 3,-1 3 4, 5 6 7)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 2 3,-1 3 4,-1 1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 3D line and swap its last dot with the one at -1 1 3, then see what kind of string it turns into.", "source": "original", "new_id": 1133}
{"id": 200, "function": "ST_SetPoint", "question": "把那条有几个点的线里的倒数第三个点，用开头的那个点0 0来换一下，看看它变成啥样。", "sql": "SELECT ST_AsText(ST_SetPoint(g, -3, p)) \nFROM ST_GEomFromText('LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)') AS g, ST_PointN(g,1) as p;", "execution_result": [["LINESTRING(0 0,1 1,0 0,3 3,4 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Swap out the third-to-last spot in that line with several dots using the starting dot 0 0, and see what it turns into.", "source": "original", "new_id": 1134}
{"id": 199, "function": "ST_SetPoint", "question": "把那条三维线的最后一个小点换成在-1 1 3坐标的点，然后看看它的特别字符串是什么。", "sql": "SELECT ST_AsEWKT(ST_SetPoint(foo.geom, ST_NumPoints(foo.geom) - 1, ST_GeomFromEWKT('POINT(-1 1 3)'))) \nFROM (SELECT ST_GeomFromEWKT('LINESTRING(-1 2 3,-1 3 4, 5 6 7)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 2 3,-1 3 4,-1 1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the last little dot of that 3D line to the point at coordinates -1 1 3, and then see what its special string looks like.", "source": "original", "new_id": 1132}
{"id": 200, "function": "ST_SetPoint", "question": "从一条线串里拿第一个小点，比如0 0，把它放到倒数第三个位置，然后告诉我这条线串的新样子。", "sql": "SELECT ST_AsText(ST_SetPoint(g, -3, p)) \nFROM ST_GEomFromText('LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)') AS g, ST_PointN(g,1) as p;", "execution_result": [["LINESTRING(0 0,1 1,0 0,3 3,4 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the first little dot from a line, like 0 0, put it in the third-to-last spot, and then tell me what the new line looks like.", "source": "original", "new_id": 1135}
{"id": 198, "function": "ST_SetPoint", "question": "如果你把那个从(-1 2)到(-1 3)的线段的开头换成一个在(-1 1)的小点，会变成什么样子呢？用那种描述形状的方式告诉我。", "sql": "SELECT ST_AsText(ST_SetPoint('LINESTRING(-1 2,-1 3)', 0, 'POINT(-1 1)'));", "execution_result": [["LINESTRING(-1 1,-1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you change the start of that line from (-1 2) to (-1 3) into a little dot at (-1 1), what would it look like? Tell me using that way of describing shapes.", "source": "original", "new_id": 1127}
{"id": 199, "function": "ST_SetPoint", "question": "把那个长长的线里面最后一个坐标换成小点(-1 1 3)，然后给我看看它变成什么样的字符串。", "sql": "SELECT ST_AsEWKT(ST_SetPoint(foo.geom, ST_NumPoints(foo.geom) - 1, ST_GeomFromEWKT('POINT(-1 1 3)'))) \nFROM (SELECT ST_GeomFromEWKT('LINESTRING(-1 2 3,-1 3 4, 5 6 7)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 2 3,-1 3 4,-1 1 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Swap out the last spot in that long line with the little dot (-1 1 3), and then show me what its string looks like.", "source": "original", "new_id": 1131}
{"id": 200, "function": "ST_SetPoint", "question": "把那条线上的倒数第三个点换成第一个点，然后告诉我它的样子。", "sql": "SELECT ST_AsText(ST_SetPoint(g, -3, p)) \nFROM ST_GEomFromText('LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)') AS g, ST_PointN(g,1) as p;", "execution_result": [["LINESTRING(0 0,1 1,0 0,3 3,4 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Swap the third-to-last little dot on that line with the first one, and then let me know how it looks.", "source": "original", "new_id": 1137}
{"id": 200, "function": "ST_SetPoint", "question": "在由这些连续的小点组成的线条里，比如(0 0)、(1 1)、(2 2)、(3 3)、(4 4)，试着把其中倒数第三个小点变成第一个小点，然后看看用文字描述会是什么样子。", "sql": "SELECT ST_AsText(ST_SetPoint(g, -3, p)) \nFROM ST_GEomFromText('LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)') AS g, ST_PointN(g,1) as p;", "execution_result": [["LINESTRING(0 0,1 1,0 0,3 3,4 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In a line made of these continuous little dots, like (0 0), (1 1), (2 2), (3 3), (4 4), try changing the third-to-last dot to be the same as the first one, and then see what it looks like in words.", "source": "original", "new_id": 1136}
{"id": 200, "function": "ST_SetPoint", "question": "如果你把那些排成线的点里的倒数第三个位置换成第一个位置的点，结果会是什么样子的呢？", "sql": "SELECT ST_AsText(ST_SetPoint(g, -3, p)) \nFROM ST_GEomFromText('LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)') AS g, ST_PointN(g,1) as p;", "execution_result": [["LINESTRING(0 0,1 1,0 0,3 3,4 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What would it look like if you swapped the third-to-last place with the first place in that line of points?", "source": "original", "new_id": 1139}
{"id": 200, "function": "ST_SetPoint", "question": "想象一条线，它从(0 0)开始，一直走到(4 4)。现在，把它倒数第三个位置的点换成它开始的那个点，结果是什么样的呢？", "sql": "SELECT ST_AsText(ST_SetPoint(g, -3, p)) \nFROM ST_GEomFromText('LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)') AS g, ST_PointN(g,1) as p;", "execution_result": [["LINESTRING(0 0,1 1,0 0,3 3,4 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a line starting from (0 0) and going all the way to (4 4). Now, swap the third-to-last point with the starting point. What does that look like?", "source": "original", "new_id": 1138}
{"id": 201, "function": "ST_ShiftLongitude", "question": "把那个点，原本是-90这个数字的，经纬度是4326的，转一下让它在0到360的范围里，然后给我看看它的样子是什么。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(-90 0)'::geometry))", "execution_result": [["POINT(270 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that point, which has the number -90 and coordinates of 4326, shift it to fit within the 0 to 360 range, and show me what it looks like.", "source": "original", "new_id": 1142}
{"id": 201, "function": "ST_ShiftLongitude", "question": "把那个坐标点的经度从-90度变成一个在0到360度之间的数，看看它的文本形式是什么样子。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(-90 0)'::geometry))", "execution_result": [["POINT(270 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the longitude of that coordinate point from -90 degrees to a number between 0 and 360, and see what its text form looks like.", "source": "original", "new_id": 1143}
{"id": 202, "function": "ST_ShiftLongitude", "question": "请给出调整后经度的那两个数字(270 0)的形状的文本样子。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(270 0)'::geometry))", "execution_result": [["POINT(-90 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please provide the text form of that shape with the two numbers (270 0) after adjusting its longitude.", "source": "original", "new_id": 1149}
{"id": 201, "function": "ST_ShiftLongitude", "question": "对于那些在(-90,0)地方的小点，把它的东西方向调到0到360的范围，然后告诉我它是什么样子。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(-90 0)'::geometry))", "execution_result": [["POINT(270 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that little point at (-90,0), adjust its east-west direction to fit within 0 to 360, then let me know what it looks like.", "source": "original", "new_id": 1141}
{"id": 201, "function": "ST_ShiftLongitude", "question": "如果有个小点在-90 0那个位置，把它的横向位置变一变，让它在0到360的范围里，结果用WKT那种格式放出来。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(-90 0)'::geometry))", "execution_result": [["POINT(270 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a little dot at the spot -90 0, shift its sideways position so it falls between 0 and 360, and then show the result in that WKT format.", "source": "original", "new_id": 1140}
{"id": 202, "function": "ST_ShiftLongitude", "question": "把那些特别坐标点，像270 0这样的，稍微调整一下，让它的经度变得正常，然后告诉我它长什么样子。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(270 0)'::geometry))", "execution_result": [["POINT(-90 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those special coordinates, like 270 0, adjust them a bit so the longitude becomes normal, and then tell me what it looks like.", "source": "original", "new_id": 1146}
{"id": 202, "function": "ST_ShiftLongitude", "question": "把那个270 0的小点调整一下，让它的经度在-180到180之间，然后告诉我它的形状是什么样的。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(270 0)'::geometry))", "execution_result": [["POINT(-90 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Adjust the little dot at 270 0 so its longitude fits between -180 and 180, and then tell me what its shape looks like.", "source": "original", "new_id": 1150}
{"id": 201, "function": "ST_ShiftLongitude", "question": "请把那个在4326系统里的小点(-90 0)，让它的横向值从-90度变成0到360度之间，然后告诉我它的样子。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(-90 0)'::geometry))", "execution_result": [["POINT(270 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please take that little point (-90 0) in the 4326 system, change its horizontal value from -90 degrees to be between 0 and 360 degrees, and then tell me what it looks like.", "source": "original", "new_id": 1144}
{"id": 201, "function": "ST_ShiftLongitude", "question": "把那个点的经度从-90度改成在0到360度之间，然后给我它的形状描述。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(-90 0)'::geometry))", "execution_result": [["POINT(270 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the longitude of that point from -90 degrees to somewhere between 0 and 360, then give me its shape description.", "source": "original", "new_id": 1145}
{"id": 202, "function": "ST_ShiftLongitude", "question": "展示一个小地点的文字样子，这个地方起初在270 0那个位置，但要把它调整到-180到180之间。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(270 0)'::geometry))", "execution_result": [["POINT(-90 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show the text version of a small spot that initially sits at 270 0, but needs to be adjusted into the range of -180 to 180.", "source": "original", "new_id": 1151}
{"id": 202, "function": "ST_ShiftLongitude", "question": "你能用一种常见的文本格式描述一个在4326这个编号体系下的小点吗？它的起始位置是270和0，我想看看它在调整角度范围后会是什么样子。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(270 0)'::geometry))", "execution_result": [["POINT(-90 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you describe a little dot in a common text format under the number system 4326? It starts at 270 and 0, and I want to see what it looks like after adjusting the angle range.", "source": "original", "new_id": 1147}
{"id": 202, "function": "ST_ShiftLongitude", "question": "对于那个在270 0位置的小点，试着把它的东西方向调一调，让它在-180到180的范围里，然后看看它的形状是什么。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;POINT(270 0)'::geometry))", "execution_result": [["POINT(-90 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the little point located at 270 0, try adjusting its east-west direction so it's within the range of -180 to 180, and then see what its shape looks like.", "source": "original", "new_id": 1148}
{"id": 203, "function": "ST_ShiftLongitude", "question": "把那条连接点(174 12)和(182 13)的线，经过经度转换后，变成文字描述的样子，看看它会变成啥。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;LINESTRING(174 12, 182 13)'::geometry));", "execution_result": [["LINESTRING(174 12,-178 13)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that line connecting the points (174 12) and (182 13), and after shifting the longitude, turn it into a text description to see what it becomes.", "source": "original", "new_id": 1156}
{"id": 203, "function": "ST_ShiftLongitude", "question": "把那些174 12和182 13的小线段弄成一个新的范围，在-180到180之间，看看它们会变成什么样子。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;LINESTRING(174 12, 182 13)'::geometry));", "execution_result": [["LINESTRING(174 12,-178 13)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform those little line segments with 174 12 and 182 13 into a new range between -180 and 180, and see what they look like.", "source": "original", "new_id": 1157}
{"id": 203, "function": "ST_ShiftLongitude", "question": "把那个带有174 12和182 13这些数字的线段，经过经度调整后，看看它的文本样子是什么。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;LINESTRING(174 12, 182 13)'::geometry));", "execution_result": [["LINESTRING(174 12,-178 13)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that line with the numbers 174 12 and 182 13, adjust its longitude, and see what its text form looks like.", "source": "original", "new_id": 1152}
{"id": 203, "function": "ST_ShiftLongitude", "question": "把连接坐标(174 12)到(182 13)的线弄成文字格式，记得调一下经度让它在-180到180之间哦。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;LINESTRING(174 12, 182 13)'::geometry));", "execution_result": [["LINESTRING(174 12,-178 13)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the line connecting coordinates (174 12) to (182 13) into text format, and make sure to adjust the longitude so it's between -180 and 180.", "source": "original", "new_id": 1153}
{"id": 203, "function": "ST_ShiftLongitude", "question": "把那些连起来的坐标点(174 12)到(182 13)的线，经过一种调整，让它们的经度看起来在-180到180之间，然后用一种能读的方式展示出来。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;LINESTRING(174 12, 182 13)'::geometry));", "execution_result": [["LINESTRING(174 12,-178 13)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the line connecting those points (174 12) to (182 13), adjust it so the longitudes appear between -180 and 180, and then show it in a readable way.", "source": "original", "new_id": 1154}
{"id": 203, "function": "ST_ShiftLongitude", "question": "把那些在174 12到182 13之间的点，经过经度调整后，用一种文本方式表达出来。", "sql": "SELECT ST_AsText(ST_ShiftLongitude('SRID=4326;LINESTRING(174 12, 182 13)'::geometry));", "execution_result": [["LINESTRING(174 12,-178 13)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Express those points from 174 12 to 182 13 in a text form after adjusting the longitude.", "source": "original", "new_id": 1155}
{"id": 208, "function": "ST_SnapToGrid", "question": "把那些小线段上的点像磁铁一样吸到0.001的网格上，然后用三个小数点的方式描述它们的位置，给我一个文字结果。", "sql": "SELECT ST_AsText(ST_SnapToGrid(ST_GeomFromText('LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)'), 0.001));", "execution_result": [["LINESTRING(1.112 2.123,4.111 3.237)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Pull those little line points to a 0.001 grid like a magnet and describe their positions with three decimal places, then give me a text result.", "source": "original", "new_id": 1165}
{"id": 208, "function": "ST_SnapToGrid", "question": "把那条从1.1115678到4.11112的折线，用0.001的网格调整一下，然后看看它的文字描述是什么。", "sql": "SELECT ST_AsText(ST_SnapToGrid(ST_GeomFromText('LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)'), 0.001));", "execution_result": [["LINESTRING(1.112 2.123,4.111 3.237)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that line from 1.1115678 to 4.11112, adjust it with a 0.001 grid, and then see what its text description is.", "source": "original", "new_id": 1166}
{"id": 208, "function": "ST_SnapToGrid", "question": "把那些坐标点变成像网格一样整齐的线段，精度要是0.001，看看变成什么样子。", "sql": "SELECT ST_AsText(ST_SnapToGrid(ST_GeomFromText('LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)'), 0.001));", "execution_result": [["LINESTRING(1.112 2.123,4.111 3.237)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make those coordinates into a neat line like on a grid, with precision of 0.001, and see what it looks like.", "source": "original", "new_id": 1167}
{"id": 208, "function": "ST_SnapToGrid", "question": "把那条由点(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)组成的线，放到一个精度为0.001的小格子里，然后看看它的样子。", "sql": "SELECT ST_AsText(ST_SnapToGrid(ST_GeomFromText('LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)'), 0.001));", "execution_result": [["LINESTRING(1.112 2.123,4.111 3.237)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the line made of points (1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667), place it into a tiny grid with a 0.001 precision, and see what it looks like.", "source": "original", "new_id": 1164}
{"id": 207, "function": "ST_SnapToGrid", "question": "试着用一个参考点来对齐那个有三个小点的线状东西，参考点是(1.12, 2.22, 3.2, 4.4444)，然后看看这些精度0.1和0.01的参数会怎么影响结果，并把它变成某种EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_SnapToGrid( ST_GeomFromEWKT('LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)'), ST_GeomFromEWKT('POINT(1.12 2.22 3.2 4.4444)'), 0.1, 0.1, 0.1, 0.01) );", "execution_result": [["LINESTRING(-1.08 2.12 2.3 1.1144,4.12 3.22 3.1 1.1144,-1.08 2.12 2.3 1.1144)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Try aligning that line-like thing with three little dots using a reference point at (1.12, 2.22, 3.2, 4.4444), then see how these precision parameters of 0.1 and 0.01 affect the result, and turn it into some kind of EWKT format.", "source": "original", "new_id": 1159}
{"id": 207, "function": "ST_SnapToGrid", "question": "有个线段串，像是从某个地方出发，有几个坐标点（-1.1115678 2.123 2.3456 1.11111等等），然后它跟一个原点是(1.12 2.22 3.2 4.4444)的网格对齐，网格的精度在X/Y/Z是0.1，M是0.01，你能给我它的EWKT格式吗？", "sql": "SELECT ST_AsEWKT(ST_SnapToGrid( ST_GeomFromEWKT('LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)'), ST_GeomFromEWKT('POINT(1.12 2.22 3.2 4.4444)'), 0.1, 0.1, 0.1, 0.01) );", "execution_result": [["LINESTRING(-1.08 2.12 2.3 1.1144,4.12 3.22 3.1 1.1144,-1.08 2.12 2.3 1.1144)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a linestring, like starting from somewhere, with some coordinate points (-1.1115678 2.123 2.3456 1.11111, etc.), and it's aligned to a grid whose origin is at (1.12 2.22 3.2 4.4444), with precision of 0.1 for X/Y/Z and 0.01 for M. Can you give me its EWKT format?", "source": "original", "new_id": 1161}
{"id": 207, "function": "ST_SnapToGrid", "question": "请展示把有M值的三维线串用某个参考点做个大概的网格捕捉的结果，点在(1.12 2.22 3.2 4.4444)附近，线串是(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)，最后的结果要有个特别的格式，坐标精确到0.1，M值精确到0.01。", "sql": "SELECT ST_AsEWKT(ST_SnapToGrid( ST_GeomFromEWKT('LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)'), ST_GeomFromEWKT('POINT(1.12 2.22 3.2 4.4444)'), 0.1, 0.1, 0.1, 0.01) );", "execution_result": [["LINESTRING(-1.08 2.12 2.3 1.1144,4.12 3.22 3.1 1.1144,-1.08 2.12 2.3 1.1144)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please show the result of roughly snapping a 3D line with M values using some reference point, near (1.12 2.22 3.2 4.4444). The line is (-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112), and the final result should be in a special format, with coordinates precise to 0.1 and M values precise to 0.01.", "source": "original", "new_id": 1163}
{"id": 207, "function": "ST_SnapToGrid", "question": "有一个线状的路径，经过一些点，比如(-1.1115678 2.123 2.3456 1.11111)和其他点。现在想用(1.12 2.22 3.2 4.4444)这个点作为中心，按照0.1和0.01的精细度把这些点拉到一个网格上，然后看看结果是什么样子。", "sql": "SELECT ST_AsEWKT(ST_SnapToGrid( ST_GeomFromEWKT('LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)'), ST_GeomFromEWKT('POINT(1.12 2.22 3.2 4.4444)'), 0.1, 0.1, 0.1, 0.01) );", "execution_result": [["LINESTRING(-1.08 2.12 2.3 1.1144,4.12 3.22 3.1 1.1144,-1.08 2.12 2.3 1.1144)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a path made of points like (-1.1115678 2.123 2.3456 1.11111) and others. Now, using the point (1.12 2.22 3.2 4.4444) as a center, try to pull these points onto a grid with 0.1 and 0.01 precision, and see what the result looks like.", "source": "original", "new_id": 1158}
{"id": 208, "function": "ST_SnapToGrid", "question": "给我看看经过小网格捕捉后，那条线的样子，记得把那些坐标值缩到小数点后三位哦。", "sql": "SELECT ST_AsText(ST_SnapToGrid(ST_GeomFromText('LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)'), 0.001));", "execution_result": [["LINESTRING(1.112 2.123,4.111 3.237)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me how that line looks after snapping to a tiny grid, and remember to round those coordinates to three decimal places.", "source": "original", "new_id": 1169}
{"id": 207, "function": "ST_SnapToGrid", "question": "把那条由好几个点组成的线(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)稍微调整一下，让它跟一个参考点(1.12 2.22 3.2 4.4444)对齐。X、Y、Z每个方向的精细程度是0.1，而M的精细程度是0.01，然后用一种特殊格式显示结果。", "sql": "SELECT ST_AsEWKT(ST_SnapToGrid( ST_GeomFromEWKT('LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)'), ST_GeomFromEWKT('POINT(1.12 2.22 3.2 4.4444)'), 0.1, 0.1, 0.1, 0.01) );", "execution_result": [["LINESTRING(-1.08 2.12 2.3 1.1144,4.12 3.22 3.1 1.1144,-1.08 2.12 2.3 1.1144)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that line made of several little dots (-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112) and adjust it a bit to align with a reference point (1.12 2.22 3.2 4.4444). The precision for each of X, Y, and Z directions is 0.1, and for M it's 0.01, then show the result in some special format.", "source": "original", "new_id": 1160}
{"id": 208, "function": "ST_SnapToGrid", "question": "给我看看那些小点组成的线，它经过一个0.001的小格子调整后的样子。", "sql": "SELECT ST_AsText(ST_SnapToGrid(ST_GeomFromText('LINESTRING(1.1115678 2.123, 4.111111 3.2374897, 4.11112 3.23748667)'), 0.001));", "execution_result": [["LINESTRING(1.112 2.123,4.111 3.237)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what the line made of those little dots looks like after being adjusted by a tiny 0.001 grid.", "source": "original", "new_id": 1168}
{"id": 209, "function": "ST_Snap", "question": "把那些多边形的图形靠近一条从(5 107)到(101 100)的小路，距离是原来距离的1.01倍，然后用一种方式展示出来。", "sql": "SELECT ST_AsText(ST_Snap(poly,line, ST_Distance(poly,line)*1.01)) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((26 125,26 200,126 200,126 125,101 100,26 125),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Bring those polygon shapes closer to a path from (5 107) to (101 100), with a distance that's 1.01 times the original, and show it in some way.", "source": "original", "new_id": 1170}
{"id": 207, "function": "ST_SnapToGrid", "question": "给我看看那个长条形的东西，它有着这些神奇的坐标：(-1.1115678, 2.123, 2.3456, 1.11111), (4.111111, 3.2374897, 3.1234, 1.1111), (-1.11111112, 2.123, 2.3456, 1.1111112)，然后用某个特别的点(1.12, 2.22, 3.2, 4.4444)来让这些数字变得整齐一点，最后让我看看它的文本结果。", "sql": "SELECT ST_AsEWKT(ST_SnapToGrid( ST_GeomFromEWKT('LINESTRING(-1.1115678 2.123 2.3456 1.11111, 4.111111 3.2374897 3.1234 1.1111, -1.11111112 2.123 2.3456 1.1111112)'), ST_GeomFromEWKT('POINT(1.12 2.22 3.2 4.4444)'), 0.1, 0.1, 0.1, 0.01) );", "execution_result": [["LINESTRING(-1.08 2.12 2.3 1.1144,4.12 3.22 3.1 1.1144,-1.08 2.12 2.3 1.1144)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me that elongated thing with these magical coordinates: (-1.1115678, 2.123, 2.3456, 1.11111), (4.111111, 3.2374897, 3.1234, 1.1111), (-1.11111112, 2.123, 2.3456, 1.1111112), and then use a special point (1.12, 2.22, 3.2, 4.4444) to tidy up those numbers a bit, finally let me see its text result.", "source": "original", "new_id": 1162}
{"id": 209, "function": "ST_Snap", "question": "把那些多边形和一条从(5 107)到(101 100)的曲线挨得更近一点，距离是它们之间的1.01倍，然后看看它们变成了什么形状。", "sql": "SELECT ST_AsText(ST_Snap(poly,line, ST_Distance(poly,line)*1.01)) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((26 125,26 200,126 200,126 125,101 100,26 125),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make those polygons get a bit closer to a curve from (5 107) to (101 100), with a distance of 1.01 times between them, and see what shape they turn into.", "source": "original", "new_id": 1172}
{"id": 209, "function": "ST_Snap", "question": "想象一个多边形的集合，像是两个小岛，坐标是((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150))和((151 100, 151 200, 176 175, 151 100))。如果我们用一条折线(5 107, 54 84, 101 100)轻轻地调整这些小岛的位置，以距离的1.01倍为准，结果会是什么样子的？", "sql": "SELECT ST_AsText(ST_Snap(poly,line, ST_Distance(poly,line)*1.01)) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((26 125,26 200,126 200,126 125,101 100,26 125),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a collection of polygons, like two small islands, with coordinates ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150)) and ((151 100, 151 200, 176 175, 151 100)). If we gently adjust these islands' positions using a line (5 107, 54 84, 101 100) with a tolerance of 1.01 times the distance, what would the result look like?", "source": "original", "new_id": 1174}
{"id": 210, "function": "ST_Snap", "question": "有一个多边形，里面有一些点，比如26 125和151 100什么的，和另一条线，像是5 107到101 100那样的，要做个捕捉，距离是它们之间的1.25倍，然后看最后会是什么形状。", "sql": "SELECT ST_AsText( ST_Snap(poly,line, ST_Distance(poly,line)*1.25) ) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((5 107,26 200,126 200,126 125,101 100,54 84,5 107),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a polygon with some points like 26 125 and 151 100, and another line, kind of like from 5 107 to 101 100, you need to do a snap operation, with the distance being 1.25 times between them, and see what shape it ends up being.", "source": "original", "new_id": 1176}
{"id": 209, "function": "ST_Snap", "question": "把一个多边形的集合，像是26 125和151 100这些点，跟一条像5 107到101 100的线靠在一起，用它们之间距离的1.01倍来调整靠近的程度，结果是什么样的文本形式？", "sql": "SELECT ST_AsText(ST_Snap(poly,line, ST_Distance(poly,line)*1.01)) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((26 125,26 200,126 200,126 125,101 100,26 125),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What would the text form look like if you have a collection of shapes with points like 26 125 and 151 100, and you nudge them closer to a line from 5 107 to 101 100, using 1.01 times their distance to set how close they get?", "source": "original", "new_id": 1175}
{"id": 210, "function": "ST_Snap", "question": "用一种常见的文字格式，告诉我那些边界像是26 125到126 200的形状在靠近5 107和101 100的那条线后会变成什么样子，距离好像是1.25倍的样子。", "sql": "SELECT ST_AsText( ST_Snap(poly,line, ST_Distance(poly,line)*1.25) ) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((5 107,26 200,126 200,126 125,101 100,54 84,5 107),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Using a common text format, let me know what those boundaries like 26 125 to 126 200 will look like after getting closer to the line from 5 107 to 101 100, with a distance that seems to be 1.25 times.", "source": "original", "new_id": 1179}
{"id": 209, "function": "ST_Snap", "question": "把一个由两个多边形组成的形状，其中一个有外环(26 125, 26 200, 126 200, 126 125, 26 125)和内环(51 150, 101 150, 76 175, 51 150)，另一个的顶点是(151 100, 151 200, 176 175, 151 100)，稍微挪动一下，让它贴近一条经过点(5 107, 54 84, 101 100)的线，距离稍微多一点，大概是原来距离的1.01倍，然后用一种格式写出来，叫polysnapped。", "sql": "SELECT ST_AsText(ST_Snap(poly,line, ST_Distance(poly,line)*1.01)) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((26 125,26 200,126 200,126 125,101 100,26 125),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a shape made of two polygons, where one has an outer loop (26 125, 26 200, 126 200, 126 125, 26 125) and an inner loop (51 150, 101 150, 76 175, 51 150), and the other has vertices at (151 100, 151 200, 176 175, 151 100). Move it slightly closer to a line passing through points (5 107, 54 84, 101 100), with the distance increased a bit to about 1.01 times the original distance, then write it out in a format called polysnapped.", "source": "original", "new_id": 1171}
{"id": 210, "function": "ST_Snap", "question": "将那个由MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 ))) 组成的图形，按照LINESTRING (5 107, 54 84, 101 100)上的位置调整一下，用1.25倍的距离范围，结果要是文字形式。", "sql": "SELECT ST_AsText( ST_Snap(poly,line, ST_Distance(poly,line)*1.25) ) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((5 107,26 200,126 200,126 125,101 100,54 84,5 107),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Adjust the shape made of MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 ))) to match the position on LINESTRING (5 107, 54 84, 101 100), using 1.25 times the distance range, and return the result as text.", "source": "original", "new_id": 1177}
{"id": 210, "function": "ST_Snap", "question": "看看那些形状，像是由数字组成的图案，经过调整以便更靠近一条由5 107, 54 84, 101 100连接的小线，调整的距离是它们之间距离的1.25倍。然后告诉我那个新的形状是什么样子，用一种特别的方式来表达它。", "sql": "SELECT ST_AsText( ST_Snap(poly,line, ST_Distance(poly,line)*1.25) ) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((5 107,26 200,126 200,126 125,101 100,54 84,5 107),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Consider those shapes, which seem like patterns made of numbers, adjusted to be closer to a small line connecting 5 107, 54 84, 101 100, with the adjustment being 1.25 times the distance between them. Then tell me what that new shape looks like, expressed in a special way.", "source": "original", "new_id": 1180}
{"id": 210, "function": "ST_Snap", "question": "看看那个多边形，如果它挨着一条从5 107到54 84再到101 100的线，用个1.25倍的距离来黏合，结果会是什么样子？", "sql": "SELECT ST_AsText( ST_Snap(poly,line, ST_Distance(poly,line)*1.25) ) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((5 107,26 200,126 200,126 125,101 100,54 84,5 107),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine that polygon getting close to a line from 5 107 to 54 84 and then to 101 100, and using a distance 1.25 times to stick them together, what would it look like?", "source": "original", "new_id": 1181}
{"id": 211, "function": "ST_Snap", "question": "把那些点串(5 107, 54 84, 101 100)稍微挪一挪，靠到由几块大图形组成的集合上，看看它的新模样。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.25) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Shift that string of points (5 107, 54 84, 101 100) a bit to lean onto the collection made of several big shapes, and see its new look.", "source": "original", "new_id": 1183}
{"id": 209, "function": "ST_Snap", "question": "请提供一个经过调整后的小多边形，它和一条线路一起变得更亲密，特别是当它们之间的距离变成原来的1.01倍时，包含坐标如26 125到126 200，再到其他点。线路的坐标包括从5 107到101 100。", "sql": "SELECT ST_AsText(ST_Snap(poly,line, ST_Distance(poly,line)*1.01)) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((26 125,26 200,126 200,126 125,101 100,26 125),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please provide a small polygon that has been adjusted to become closer to a line, especially when their distance becomes 1.01 times the original, including coordinates like 26 125 to 126 200 and other points. The line coordinates include from 5 107 to 101 100.", "source": "original", "new_id": 1173}
{"id": 211, "function": "ST_Snap", "question": "把那条线段(5 107, 54 84, 101 100)靠近那些多边形( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))上，距离是它们之间的1.25倍，结果用一种格式来展示。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.25) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Move the line segment (5 107, 54 84, 101 100) closer to those polygons ( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 ))) with a distance of 1.25 times between them, and show the result in a certain format.", "source": "original", "new_id": 1182}
{"id": 210, "function": "ST_Snap", "question": "有两个图形，一个是由多个小多边形组成的复杂图形，坐标包括(26 125, 26 200, 126 200, 126 125, 26 125)和(51 150, 101 150, 76 175, 51 150)，还有一个是(151 100, 151 200, 176 175, 151 100)的多边形。另一个是由(5 107, 54 84, 101 100)组成的折线。给它们一点空间，让它们靠得更近，大约是它们之间距离的1.25倍，然后看看它们结合后的形状是什么样的，用某种格式写出来。", "sql": "SELECT ST_AsText( ST_Snap(poly,line, ST_Distance(poly,line)*1.25) ) AS polysnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), ( 51 150, 101 150, 76 175, 51 150 )), (( 151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["MULTIPOLYGON(((5 107,26 200,126 200,126 125,101 100,54 84,5 107),(51 150,101 150,76 175,51 150)),((151 100,151 200,176 175,151 100)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are two shapes, one is a complex figure made of multiple small polygons with coordinates like (26 125, 26 200, 126 200, 126 125, 26 125) and (51 150, 101 150, 76 175, 51 150), and another polygon with (151 100, 151 200, 176 175, 151 100). The other is a line made of (5 107, 54 84, 101 100). Give them some space to get closer, about 1.25 times the distance between them, and see what their combined shape looks like, written in some format.", "source": "original", "new_id": 1178}
{"id": 212, "function": "ST_Snap", "question": "把那个折线段，它有坐标(5 107, 54 84, 101 100)，和两个多边形组成的形状靠得更近一些，差不多1.01的距离，看看它最后变成什么样子，用WKT格式表达出来。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.01) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(5 107,26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the line segment with coordinates (5 107, 54 84, 101 100) and make it closer to the shape made of two polygons, almost by a distance of 1.01, and see what it turns into, expressed in WKT format.", "source": "original", "new_id": 1189}
{"id": 212, "function": "ST_Snap", "question": "把那条从(5, 107)到(101, 100)经过(54, 84)的线，挪到那些多边形的位置，挪动的距离是它们本来距离的1.01倍，最后告诉我它的新样子是什么。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.01) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(5 107,26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that line from (5, 107) to (101, 100) passing through (54, 84), and move it to the position of those polygons, with the move being 1.01 times their original distance, then tell me what it looks like now.", "source": "original", "new_id": 1188}
{"id": 211, "function": "ST_Snap", "question": "有条线走过几个地方(5 107, 54 84, 101 100)，想看看它在某些形状边界附近跳动时的样子，形状包括一些点比如(26 125, 126 200, 51 150)，跳动距离是原来距离的1.25倍，结果是什么样的？", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.25) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a line passing through a few spots (5 107, 54 84, 101 100), and I'm curious about how it looks when it jiggles near the edges of certain shapes, including points like (26 125, 126 200, 51 150), with a jiggling distance 1.25 times the original. What does the result look like?", "source": "original", "new_id": 1185}
{"id": 211, "function": "ST_Snap", "question": "有条曲线从(5 107, 54 84, 101 100)到这些点经过，你能不能把它靠近一个多边形的边界，像贴纸一样贴上去？这个多边形有两个区域，其中一个是从(26 125, 26 200, 126 200, 126 125, 26 125)围成的，还有一个从(151 100, 151 200, 176 175, 151 100)围成的。贴的距离要比它们原来距离的1.25倍长，并且用一种特别的格式来描述这个贴上去的线条？", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.25) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a curvy line passing through points like (5 107, 54 84, 101 100), could you make it snuggle up to the edge of a polygon, like a sticker sticking on? This polygon has two areas, one enclosed by (26 125, 26 200, 126 200, 126 125, 26 125), and another by (151 100, 151 200, 176 175, 151 100). The sticking distance should be 1.25 times longer than their original distance, and describe the line using a special format after sticking?", "source": "original", "new_id": 1184}
{"id": 211, "function": "ST_Snap", "question": "把那些连起来的小点(5 107, 54 84, 101 100)靠近到一个复杂的形状中，形状的边界是(26 125, 26 200, 126 200, 126 125, 26 125)和其他几个点。结果是一个新的线段，看它在文本里是什么样子，靠近的距离为原始距离的1.25倍。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.25) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Move those connected little dots (5 107, 54 84, 101 100) closer to a complex shape, whose boundary includes (26 125, 26 200, 126 200, 126 125, 26 125) and some other points. The result is a new line segment, see what it looks like in text form, with a closeness distance of 1.25 times the original distance.", "source": "original", "new_id": 1186}
{"id": 211, "function": "ST_Snap", "question": "把那条线LINESTRING (5 107, 54 84, 101 100)稍微拉近到由一些点组成的区域MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))上，以1.25倍距离为界限，看看结果是什么样子的线段。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.25) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 )))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the line LINESTRING (5 107, 54 84, 101 100) and gently bring it closer to a region made of some points MULTIPOLYGON( (( 26 125, 26 200, 126 200, 126 125, 26 125 ), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100 ))) using a boundary of 1.25 times the distance, and see what the resulting line looks like.", "source": "original", "new_id": 1187}
{"id": 212, "function": "ST_Snap", "question": "把那条从(5 107, 54 84, 101 100)开始的折线，靠近由(26 125, 26 200, 126 200, 126 125, 26 125)和一些其他点围成的多边形，距离大概是它们之间原来距离的1.01倍，然后告诉我这条折线的新样子，名字叫linesnapped。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.01) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(5 107,26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that line starting at (5 107, 54 84, 101 100) and nudge it closer to the polygon formed by (26 125, 26 200, 126 200, 126 125, 26 125) and some other points, with a distance roughly 1.01 times what it originally was, then tell me how this line looks now, named linesnapped.", "source": "original", "new_id": 1190}
{"id": 213, "function": "ST_SwapOrdinates", "question": "把那些0、0、0、2的坐标位置，先把第一个和最后一个数字换个地方，然后让第一个数字变大到原来的两倍，第二个数字保持不变，最后再把第一个和最后一个数字换回来，结果是什么样的形状呢？", "sql": "SELECT ST_AsText( ST_SwapOrdinates( ST_Scale( ST_SwapOrdinates(g,'xm'), 2, 1 ), 'xm') ) \nFROM ( SELECT 'POINT ZM (0 0 0 2)'::geometry g ) foo;", "execution_result": [["POINT ZM (0 0 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "With the coordinates 0, 0, 0, 2, first swap the first and last numbers, then make the first number twice as big while keeping the second number the same, and finally swap the first and last numbers again. What does the shape look like?", "source": "original", "new_id": 1194}
{"id": 213, "function": "ST_SwapOrdinates", "question": "对于那些坐标是(0,0,0,2)的点，先把某些坐标换一换，然后在某些方向上拉伸一下比例，比如X变成两倍，Y保持不变，最后再把坐标换回来，看看是什么样子。", "sql": "SELECT ST_AsText( ST_SwapOrdinates( ST_Scale( ST_SwapOrdinates(g,'xm'), 2, 1 ), 'xm') ) \nFROM ( SELECT 'POINT ZM (0 0 0 2)'::geometry g ) foo;", "execution_result": [["POINT ZM (0 0 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the point with coordinates (0,0,0,2), first swap some of the coordinates, then stretch it in certain directions, like making X twice as large and Y staying the same, and finally swap the coordinates back to see how it looks.", "source": "original", "new_id": 1195}
{"id": 212, "function": "ST_Snap", "question": "想象一下，当你用1.01倍的距离去调整那些点组成的线（5 107, 54 84, 101 100），让它贴合到一个更大的形状里，这个形状由一些点（比如26 125, 126 200, 151 100）构成。最后，得到的新线段会是什么样子呢？", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.01) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(5 107,26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine when you use a 1.01 times distance to adjust those points forming the line (5 107, 54 84, 101 100) to fit into a bigger shape made up of some points like (26 125, 126 200, 151 100). In the end, what would the new line segment look like?", "source": "original", "new_id": 1193}
{"id": 213, "function": "ST_SwapOrdinates", "question": "想象一下有一个点，坐标是 (0 0 0 2)，先把第一个和最后一个数字换个位置，然后把第一个数字变成它的两倍，第二个数字保持不变，最后再把第一个和最后一个数字换回来，结果是什么样子？", "sql": "SELECT ST_AsText( ST_SwapOrdinates( ST_Scale( ST_SwapOrdinates(g,'xm'), 2, 1 ), 'xm') ) \nFROM ( SELECT 'POINT ZM (0 0 0 2)'::geometry g ) foo;", "execution_result": [["POINT ZM (0 0 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a point with coordinates (0 0 0 2). First, swap the first and last numbers, then double the first number and keep the second number the same. Finally, swap the first and last numbers back. What would the result look like?", "source": "original", "new_id": 1197}
{"id": 213, "function": "ST_SwapOrdinates", "question": "给一个三维的点，像是这样(0 0 0 2)，先把第一个数字和最后一个数字对调，然后让第一个数字变成它的两倍，第二个数字保持不变，最后再对调回来，能用什么方式把最终的样子告诉我？", "sql": "SELECT ST_AsText( ST_SwapOrdinates( ST_Scale( ST_SwapOrdinates(g,'xm'), 2, 1 ), 'xm') ) \nFROM ( SELECT 'POINT ZM (0 0 0 2)'::geometry g ) foo;", "execution_result": [["POINT ZM (0 0 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For a three-dimensional point, like this (0 0 0 2), first swap the first and last numbers, then make the first number twice as big, keep the second number the same, and finally swap them back. How can you tell me what it looks like at the end?", "source": "original", "new_id": 1196}
{"id": 212, "function": "ST_Snap", "question": "想象一下，把折线(5 107, 54 84, 101 100)拉近到那组复杂的多面形上，距离得是1.01倍的那种，然后告诉我它的新样子。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.01) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(5 107,26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine pulling the line (5 107, 54 84, 101 100) closer to that complex bunch of shapes, with a distance being 1.01 times, and then let me know how it looks now.", "source": "original", "new_id": 1191}
{"id": 213, "function": "ST_SwapOrdinates", "question": "对于那个点(0 0 0 2)，先把第一个和最后一个数字换个位置，然后让第一个数字变成原来的两倍，第二个数字保持不变，再把第一个和最后一个数字换回来，最后告诉我它的样子。", "sql": "SELECT ST_AsText( ST_SwapOrdinates( ST_Scale( ST_SwapOrdinates(g,'xm'), 2, 1 ), 'xm') ) \nFROM ( SELECT 'POINT ZM (0 0 0 2)'::geometry g ) foo;", "execution_result": [["POINT ZM (0 0 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that point (0 0 0 2), first swap the first and last numbers, then make the first number twice as big, keep the second number the same, swap the first and last numbers again, and finally tell me what it looks like.", "source": "original", "new_id": 1198}
{"id": 214, "function": "ST_IsValid", "question": "看看这些小线条和形状，像LINESTRING(0 0, 1 1)和POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))，它们在地理上是否符合标准，给出两个结果。", "sql": "SELECT ST_IsValid(ST_GeomFromText('LINESTRING(0 0, 1 1)')) AS good_line, ST_IsValid(ST_GeomFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) AS bad_poly", "execution_result": [[true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if these little lines and shapes, like LINESTRING(0 0, 1 1) and POLYGON((0 0, 1 1, 1 2, 1 1, 0 0)), meet the geographical standards, providing two results.", "source": "original", "new_id": 1203}
{"id": 214, "function": "ST_IsValid", "question": "看看那条从(0 0)到(1 1)的小线是不是个好线，然后再看看那个包含点(0 0), (1 1), (1 2), (1 1), (0 0)的形状是不是个坏面。", "sql": "SELECT ST_IsValid(ST_GeomFromText('LINESTRING(0 0, 1 1)')) AS good_line, ST_IsValid(ST_GeomFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) AS bad_poly", "execution_result": [[true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that little line from (0 0) to (1 1) is a good line, and then see if the shape with points (0 0), (1 1), (1 2), (1 1), (0 0) is a bad surface.", "source": "original", "new_id": 1202}
{"id": 214, "function": "ST_IsValid", "question": "看看一条从(0 0)到(1 1)的线是不是画得对，还有一个多边形，它有点像个回字，从(0 0)到(1 1)再到(1 2)然后又回到(1 1)最后回到起点(0 0)，看看它是不是也画得对。", "sql": "SELECT ST_IsValid(ST_GeomFromText('LINESTRING(0 0, 1 1)')) AS good_line, ST_IsValid(ST_GeomFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) AS bad_poly", "execution_result": [[true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if a line going from (0 0) to (1 1) is drawn correctly, and also a polygon that looks a bit like a loop, starting at (0 0) to (1 1), then to (1 2), back to (1 1), and finally returning to the start (0 0), to see if it's drawn correctly too.", "source": "original", "new_id": 1200}
{"id": 212, "function": "ST_Snap", "question": "想象一个折线段，像是(5 107, 54 84, 101 100)那样的，被轻轻推向一个复杂的形状，这个形状由几个圈圈组成，比如(26 125, 26 200, 126 200, 126 125, 26 125)之类的。请问，这样推完后，折线段的样子会是什么？推的力度是它们距离的1.01倍哦。", "sql": "SELECT ST_AsText( ST_Snap(line, poly, ST_Distance(poly,line)*1.01) ) AS linesnapped \nFROM (SELECT ST_GeomFromText('MULTIPOLYGON( ((26 125, 26 200, 126 200, 126 125, 26 125), (51 150, 101 150, 76 175, 51 150 )), ((151 100, 151 200, 176 175, 151 100)))') AS poly, ST_GeomFromText('LINESTRING (5 107, 54 84, 101 100)') AS line ) AS foo;", "execution_result": [["LINESTRING(5 107,26 125,54 84,101 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a line segment, something like (5 107, 54 84, 101 100), gently nudged towards a complex shape made of several loops, like (26 125, 26 200, 126 200, 126 125, 26 125). What would the line segment look like after this nudge? The nudge has a strength of 1.01 times their distance.", "source": "original", "new_id": 1192}
{"id": 214, "function": "ST_IsValid", "question": "看看那条从(0,0)到(1,1)的小线是不是靠谱的，再瞧瞧那个围着(0,0), (1,1), (1,2), (1,1), (0,0)的形状是不是有效的。", "sql": "SELECT ST_IsValid(ST_GeomFromText('LINESTRING(0 0, 1 1)')) AS good_line, ST_IsValid(ST_GeomFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) AS bad_poly", "execution_result": [[true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little line from (0,0) to (1,1) is sensible, and then see if the shape that loops around (0,0), (1,1), (1,2), (1,1), (0,0) is valid.", "source": "original", "new_id": 1201}
{"id": 213, "function": "ST_SwapOrdinates", "question": "想象一个点，坐标是(0 0 0 2)，把第一个和最后一个数字换个位置，然后把第一个数字变大一倍，第二个保持不变，再把第一个和最后一个数字再换回来，结果是什么样子？", "sql": "SELECT ST_AsText( ST_SwapOrdinates( ST_Scale( ST_SwapOrdinates(g,'xm'), 2, 1 ), 'xm') ) \nFROM ( SELECT 'POINT ZM (0 0 0 2)'::geometry g ) foo;", "execution_result": [["POINT ZM (0 0 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a point with coordinates (0 0 0 2), switch the first and last numbers, then make the first number twice as large and leave the second unchanged, then switch the first and last numbers back again. What does it look like in the end?", "source": "original", "new_id": 1199}
{"id": 215, "function": "ST_IsValidDetail", "question": "看看这些坐标连起来的线是不是正确的，如果有问题，指出哪里错了以及是什么问题。", "sql": "SELECT * \nFROM ST_IsValidDetail('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [[true, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line formed by these coordinates is correct, and if there's an issue, point out where and what the problem is.", "source": "original", "new_id": 1207}
{"id": 214, "function": "ST_IsValid", "question": "看看那些连接0 0到1 1的小线段和由0 0, 1 1, 1 2这样的点围成的形状，它们是不是都按规则来的，给个是或不是就行。", "sql": "SELECT ST_IsValid(ST_GeomFromText('LINESTRING(0 0, 1 1)')) AS good_line, ST_IsValid(ST_GeomFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) AS bad_poly", "execution_result": [[true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the tiny line connecting 0 0 to 1 1 and the shape formed by points like 0 0, 1 1, 1 2 are both following the rules, just give a yes or no.", "source": "original", "new_id": 1204}
{"id": 215, "function": "ST_IsValidDetail", "question": "看看那条由这些点组成的小线：220227 150406, 2220227 150407, 222020 150410，是否有什么不对劲的地方，并告诉我具体是哪里出问题了。", "sql": "SELECT * \nFROM ST_IsValidDetail('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [[true, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there's anything odd about the little line made up of these points: 220227 150406, 2220227 150407, 222020 150410, and let me know exactly where the problem is.", "source": "original", "new_id": 1206}
{"id": 214, "function": "ST_IsValid", "question": "看看那条从(0 0)到(1 1)的线和一个围绕(0 0, 1 1, 1 2, 1 1, 0 0)的形状，它们是否规矩，分别用两列来表示结果。", "sql": "SELECT ST_IsValid(ST_GeomFromText('LINESTRING(0 0, 1 1)')) AS good_line, ST_IsValid(ST_GeomFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) AS bad_poly", "execution_result": [[true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line from (0 0) to (1 1) and a shape around (0 0, 1 1, 1 2, 1 1, 0 0) are proper, showing results in two separate columns.", "source": "original", "new_id": 1205}
{"id": 215, "function": "ST_IsValidDetail", "question": "看看由这些点组成的线条，220227 150406, 2220227 150407, 222020 150410，是不是画得对，哪里出了问题，以及为什么。", "sql": "SELECT * \nFROM ST_IsValidDetail('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [[true, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line made up of these points, 220227 150406, 2220227 150407, 222020 150410, is drawn correctly, where there might be an issue, and why.", "source": "original", "new_id": 1210}
{"id": 215, "function": "ST_IsValidDetail", "question": "检查一下这些连起来的点：220227 150406, 2220227 150407, 222020 150410，看它们组成的线是不是有问题，哪里出错了，怎么描述这个问题。", "sql": "SELECT * \nFROM ST_IsValidDetail('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [[true, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check these connected dots: 220227 150406, 2220227 150407, 222020 150410, and see if the line they form has any issues, where it goes wrong, and how to describe the problem.", "source": "original", "new_id": 1211}
{"id": 215, "function": "ST_IsValidDetail", "question": "检查一下这些连着的小线段，220227 150406到2220227 150407再到222020 150410，看看有什么问题没有。", "sql": "SELECT * \nFROM ST_IsValidDetail('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [[true, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check these connected little line segments, from 220227 150406 to 2220227 150407 then to 222020 150410, to see if there's any issue.", "source": "original", "new_id": 1209}
{"id": 216, "function": "ST_IsValidReason", "question": "看看由这些小点构成的线形是不是有些问题，它们的坐标是(220227 150406)、(2220227 150407)、(222020 150410)，然后给我一个详细的说明吧。", "sql": "SELECT ST_IsValidReason('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [["Valid Geometry"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there's anything off about the line made by these little dots, with coordinates (220227 150406), (2220227 150407), (222020 150410), and then give me a detailed explanation.", "source": "original", "new_id": 1213}
{"id": 215, "function": "ST_IsValidDetail", "question": "看看那条从220227 150406到2220227 150407再到222020 150410的折线是不是有点问题，把那些小细节，比如哪里出了错和具体情况给说一下。", "sql": "SELECT * \nFROM ST_IsValidDetail('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [[true, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that line from 220227 150406 to 2220227 150407 to 222020 150410 has any issues, and share the little details, like where it went wrong and the specific situation.", "source": "original", "new_id": 1208}
{"id": 216, "function": "ST_IsValidReason", "question": "看看由这些点组成的那条线是不是有什么问题，像是220227 150406这些点的连线，具体说说哪里不对劲。", "sql": "SELECT ST_IsValidReason('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [["Valid Geometry"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there's something wrong with the line made by connecting points like 220227 150406, and explain specifically what's not right.", "source": "original", "new_id": 1216}
{"id": 216, "function": "ST_IsValidReason", "question": "看看由三个坐标点(220227 150406)、(2220227 150407)、(222020 150410)连成的那条线是不是靠谱，并给我一些解释说明。", "sql": "SELECT ST_IsValidReason('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [["Valid Geometry"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if the line made by connecting the three coordinate points (220227 150406), (2220227 150407), (222020 150410) is reliable, and give me some explanatory notes.", "source": "original", "new_id": 1217}
{"id": 216, "function": "ST_IsValidReason", "question": "看看由这几个点(220227 150406), (2220227 150407), (222020 150410)连起来的那条线有没有啥问题，并说说具体问题出在哪儿。", "sql": "SELECT ST_IsValidReason('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [["Valid Geometry"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there's anything wrong with the line drawn through these points (220227 150406), (2220227 150407), (222020 150410), and describe exactly what's off.", "source": "original", "new_id": 1212}
{"id": 217, "function": "ST_IsValidReason", "question": "看看那些点组成的形状是好的吗？如果不好，为什么呢？", "sql": "SELECT ST_IsValidReason( 'POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))'::geometry) AS validity_info;", "execution_result": [["Self-intersection[150 150]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made by those points is okay. If not, why?", "source": "original", "new_id": 1219}
{"id": 216, "function": "ST_IsValidReason", "question": "看看由这些点组成的那条线是不是合格，点的位置是220227 150406、2220227 150407和222020 150410，然后告诉我具体哪里出了问题。", "sql": "SELECT ST_IsValidReason('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [["Valid Geometry"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line made from these points is up to standard, with points located at 220227 150406, 2220227 150407, and 222020 150410, and then let me know exactly what went wrong.", "source": "original", "new_id": 1214}
{"id": 217, "function": "ST_IsValidReason", "question": "能不能告诉我，那个用这些点组成的形状((100 200, 100 100, 200 200, 200 100, 100 200))，有没有什么问题？", "sql": "SELECT ST_IsValidReason( 'POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))'::geometry) AS validity_info;", "execution_result": [["Self-intersection[150 150]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me if there's anything wrong with that shape made from these points ((100 200, 100 100, 200 200, 200 100, 100 200))?", "source": "original", "new_id": 1222}
{"id": 217, "function": "ST_IsValidReason", "question": "看看由这些点(100 200)、(100 100)、(200 200)、(200 100)、(100 200)围成的图形是不是有点问题，并说说为什么。", "sql": "SELECT ST_IsValidReason( 'POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))'::geometry) AS validity_info;", "execution_result": [["Self-intersection[150 150]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape formed by these dots (100 200), (100 100), (200 200), (200 100), (100 200) has any issues, and explain why.", "source": "original", "new_id": 1218}
{"id": 217, "function": "ST_IsValidReason", "question": "看看由这些点(100 200)、(100 100)、(200 200)、(200 100)、(100 200)围成的形状有没有什么不对的地方，把结果称作validity_info。", "sql": "SELECT ST_IsValidReason( 'POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))'::geometry) AS validity_info;", "execution_result": [["Self-intersection[150 150]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there's anything wrong with the shape formed by these points (100 200), (100 100), (200 200), (200 100), (100 200), and call the result validity_info.", "source": "original", "new_id": 1220}
{"id": 217, "function": "ST_IsValidReason", "question": "看看那块由点(100 200), (100 100), (200 200), (200 100), (100 200)围成的图形有没有什么问题，顺便告诉我哪里出了岔子。", "sql": "SELECT ST_IsValidReason( 'POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))'::geometry) AS validity_info;", "execution_result": [["Self-intersection[150 150]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the shape made by the points (100 200), (100 100), (200 200), (200 100), (100 200) has any issues, and let me know where it went wrong.", "source": "original", "new_id": 1223}
{"id": 216, "function": "ST_IsValidReason", "question": "看看那些点连成的线是不是没问题，尤其是有问题时要告诉我为什么，点在(220227 150406), (2220227 150407), (222020 150410)。", "sql": "SELECT ST_IsValidReason('LINESTRING(220227 150406,2220227 150407,222020 150410)');", "execution_result": [["Valid Geometry"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line made from those points is okay, and if there's an issue, let me know why. The points are at (220227 150406), (2220227 150407), (222020 150410).", "source": "original", "new_id": 1215}
{"id": 218, "function": "ST_MakeValid", "question": "把那个从点到点的线修整一下，不要保留那些凹下去的部分，看看它最后变成什么样子。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=false' ));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Fix that line from dot to dot, don't keep the parts that sink in, and see what it turns into.", "source": "original", "new_id": 1224}
{"id": 218, "function": "ST_MakeValid", "question": "给我那个小线条的形状，经过处理后，确保它不会保留重叠的部分，结果是什么样子？", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=false' ));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me the shape of that little line, after processing, making sure it doesn't keep overlapping parts, what does the result look like?", "source": "original", "new_id": 1229}
{"id": 219, "function": "ST_MakeValid", "question": "有一个由六个小多边形组成的形状，坐标是(91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)等等，想看看它原来的样子，然后用一种正常的修复方法和一种特别的修复方法分别看看修复后的样子。", "sql": "SELECT c.geom AS before_geom, ST_MakeValid(c.geom) AS after_geom, ST_MakeValid(c.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))'::geometry AS geom) AS c;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a shape made of six small polygons with coordinates like (91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50), etc. Let's see how it looks originally, then see the results after fixing it with a normal method and a special method.", "source": "original", "new_id": 1230}
{"id": 218, "function": "ST_MakeValid", "question": "对于那条从(0 0)到(1 1)然后又回到(0 0)的线，用某种方式整理一下，不要保留缩小的部分，最后给出它的文字样子。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 1 1, 0 0)', 'method=structure keepcollapsed=false' ));", "execution_result": [["LINESTRING(0 0,1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the line that goes from (0 0) to (1 1) and then back to (0 0), tidy it up in some way without keeping the shrunken parts, and finally give its text form.", "source": "original", "new_id": 1226}
{"id": 218, "function": "ST_MakeValid", "question": "能不能给我一个修正后的小线条(0 0, 0 0)的那些字母表示，修正时不留那些塌掉的部分？", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=false' ));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you give me the letter representation of the fixed little line (0 0, 0 0), without keeping the parts that fall apart?", "source": "original", "new_id": 1227}
{"id": 218, "function": "ST_MakeValid", "question": "输出经过处理后修复的无效线段的形状，看看那些坐标(0 0, 0 0)变成了什么，别留那个瘪瘪的部分。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=false' ));", "execution_result": [["LINESTRING EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the shape of the fixed invalid line after processing, see what those coordinates (0 0, 0 0) have become, without keeping the collapsed part.", "source": "original", "new_id": 1228}
{"id": 218, "function": "ST_MakeValid", "question": "处理一下那条线LINESTRING(0 0, 0 0)，让它变得正常，用一种保留坍塌部分的方式，最后用某种文字格式输出。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=true' ));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Tweak that line LINESTRING(0 0, 0 0) to make it valid, using a way that keeps collapsed parts, and finally output it in some text format.", "source": "original", "new_id": 1225}
{"id": 220, "function": "ST_MakeValid", "question": "对有点奇怪的线状东西LINESTRING(0 0, 0 0)进行一些修复，保留它原来的样子，看看它的形状是什么。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=true' ));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Try fixing that odd line thing LINESTRING(0 0, 0 0) while keeping its original form, and see what its shape looks like.", "source": "original", "new_id": 1236}
{"id": 220, "function": "ST_MakeValid", "question": "如果有一条起点和终点重合的线段(0 0, 0 0)，试着用某种方式修复它，看看会得到什么样的文本形式。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=true' ));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a line where the start and end are the same point (0 0, 0 0), try to fix it somehow and see what kind of text form you get.", "source": "original", "new_id": 1237}
{"id": 219, "function": "ST_MakeValid", "question": "给我一张表，第一栏是那些有问题的六个小多边形组成的大图形，像是坐标在(91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)等等。第二栏展示一种修复后的样子，第三栏则是用另一种方式修复后的样子。", "sql": "SELECT c.geom AS before_geom, ST_MakeValid(c.geom) AS after_geom, ST_MakeValid(c.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))'::geometry AS geom) AS c;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a table where the first column is that big shape made from six problematic smaller polygons, like coordinates at (91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50) and so on. The second column shows one fixed version, and the third column shows another fixed version using another way.", "source": "original", "new_id": 1235}
{"id": 220, "function": "ST_MakeValid", "question": "对于那个奇怪的线条，看看能不能用一种方式修复它，但要保留那些没啥变化的部分，然后给我它的形状样子。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=true' ));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that strange line, see if you can fix it in some way, but keep the parts that don't change much, and then show me its shape.", "source": "original", "new_id": 1238}
{"id": 219, "function": "ST_MakeValid", "question": "有一个用许多坐标点拼成的复杂图形，像是六个不同的形状组合成的，坐标是((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150))。你需要展示这个图形原本的样子，还有用普通方法修补后的样子，以及用某种结构方式修补后的样子。", "sql": "SELECT c.geom AS before_geom, ST_MakeValid(c.geom) AS after_geom, ST_MakeValid(c.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))'::geometry AS geom) AS c;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a complex shape made from many coordinate points, like six different figures combined, with coordinates ((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)). You need to show how this shape originally looks, how it looks after being fixed in a usual way, and how it looks after being fixed using some kind of structural method.", "source": "original", "new_id": 1231}
{"id": 220, "function": "ST_MakeValid", "question": "看看那些从LINESTRING(0 0, 0 0)整理出来的结果吧，记得要保留那些缩成一点的形状哦。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=true' ));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at the results tidied up from LINESTRING(0 0, 0 0), and remember to keep those shapes that shrink into a point.", "source": "original", "new_id": 1239}
{"id": 221, "function": "ST_MakeValid", "question": "给我看一下那些点连成的两个多边形，看看原来的样子，还有用普通方法和结构化方法修复后的样子。", "sql": "SELECT f.geom AS before_geom, ST_MakeValid(f.geom) AS after_geom, ST_MakeValid(f.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))'::geometry AS geom) AS f;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the two polygons made from those points, how they originally look, and after being fixed with ordinary and structured methods.", "source": "original", "new_id": 1243}
{"id": 220, "function": "ST_MakeValid", "question": "如果有个不太对劲的线段就是(0, 0)到(0, 0)，用一种结构化的方式来修修它，并且保持那些缩成点的部分不变，结果会是什么样的文字表示？", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=true' ));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If there's a not-so-right line from (0, 0) to (0, 0), and you fix it in a structured way while keeping those squished parts unchanged, what would the text representation look like?", "source": "original", "new_id": 1241}
{"id": 220, "function": "ST_MakeValid", "question": "给我看看那个包含点(0 0, 0 0)的线在修复后变成了什么样子，考虑那些特殊的设置。", "sql": "SELECT ST_AsText(ST_MakeValid( 'LINESTRING(0 0, 0 0)', 'method=structure keepcollapsed=true' ));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what the line that includes the points (0 0, 0 0) looks like after fixing, considering those special settings.", "source": "original", "new_id": 1240}
{"id": 219, "function": "ST_MakeValid", "question": "展示一下那些形状吧，最初的六个多边形坐标是这样排的：((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150))，然后看看用普通方法和结构法修复后的样子。", "sql": "SELECT c.geom AS before_geom, ST_MakeValid(c.geom) AS after_geom, ST_MakeValid(c.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))'::geometry AS geom) AS c;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show those shapes, the initial six polygon coordinates are arranged like this: ((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)), and then see how they look after being fixed with regular method and structure method.", "source": "original", "new_id": 1233}
{"id": 221, "function": "ST_MakeValid", "question": "有一个由两个小形状组成的大形状，里面有很多点，比如第一个形状有(186 194,187 194,...,6 14)，第二个形状有(150 90,149 80,...,150 90)。想知道在不动的情况下，原本的样子是什么，还有用一种普通方法和一种特别结构方法修复后的样子。", "sql": "SELECT f.geom AS before_geom, ST_MakeValid(f.geom) AS after_geom, ST_MakeValid(f.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))'::geometry AS geom) AS f;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a big shape made of two smaller shapes with lots of dots, like the first shape has (186 194,187 194,...,6 14) and the second shape has (150 90,149 80,...,150 90). Curious about what it originally looks like without moving, and what it looks like after fixing with a normal way and a special structure way.", "source": "original", "new_id": 1242}
{"id": 221, "function": "ST_MakeValid", "question": "把那些多边形的点集合，比如186 194, 187 194, 188 195等等，和它们修复后的版本，用一种大家都懂的文本格式展示出来。这些修复方法有点像默认和结构方式的修补。", "sql": "SELECT ST_AsText(f.geom) AS before_wkt, ST_AsText(ST_MakeValid(f.geom)) AS after_wkt, ST_AsText(ST_MakeValid(f.geom, 'method=structure')) AS after_wkt_structure FROM (SELECT 'MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))'::geometry AS geom) AS f;", "execution_result": [["MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))", "MULTIPOLYGON(((11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,56.76923076923077 64.76923076923077,58 62,64 56,14 6,13 6,12 5,11 5)),((54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,125.23076923076923 133.23076923076923,56.76923076923077 64.76923076923077,54 71)),((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,134 126,128 132,125.23076923076923 133.23076923076923,186 194)),((135 125,142 118,146 109,149 100,150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,64 56,134 126,135 125)))", "MULTIPOLYGON(((149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,64 56,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,56.76923076923077 64.76923076923077,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,125.23076923076923 133.23076923076923,186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,134 126,135 125,142 118,146 109,149 100,150 90,149 80)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those collections of polygon points, like 186 194, 187 194, 188 195, etc., and show them along with their fixed-up versions in a text format everyone understands. These fixing-up methods are somewhat like default and structure patching.", "source": "original", "new_id": 1245}
{"id": 217, "function": "ST_IsValidReason", "question": "看看那个由坐标100 200, 100 100, 200 200, 200 100, 100 200围成的形状有没有什么问题，并用文字说明。", "sql": "SELECT ST_IsValidReason( 'POLYGON ((100 200, 100 100, 200 200, 200 100, 100 200))'::geometry) AS validity_info;", "execution_result": [["Self-intersection[150 150]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there's anything wrong with the shape formed by the coordinates 100 200, 100 100, 200 200, 200 100, 100 200, and explain in words.", "source": "original", "new_id": 1221}
{"id": 221, "function": "ST_MakeValid", "question": "请给出一种格式，它可以展示那些复杂的形状，其中包括坐标信息，如186 194, 187 194, 188 195等等，还有一种方法可以修复它们的几何数据。", "sql": "SELECT ST_AsEWKT(f.geom) AS before_ewkt, ST_AsEWKT(ST_MakeValid(f.geom)) AS after_ewkt, ST_AsEWKT(ST_MakeValid(f.geom, 'method=structure')) AS after_ewkt_structure FROM (SELECT 'MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))'::geometry AS geom) AS f;", "execution_result": [["MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))", "MULTIPOLYGON(((11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,56.76923076923077 64.76923076923077,58 62,64 56,14 6,13 6,12 5,11 5)),((54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,125.23076923076923 133.23076923076923,56.76923076923077 64.76923076923077,54 71)),((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,134 126,128 132,125.23076923076923 133.23076923076923,186 194)),((135 125,142 118,146 109,149 100,150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,64 56,134 126,135 125)))", "MULTIPOLYGON(((149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,64 56,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,56.76923076923077 64.76923076923077,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,125.23076923076923 133.23076923076923,186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,134 126,135 125,142 118,146 109,149 100,150 90,149 80)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please provide a format that can show those complex shapes, including coordinate information like 186 194, 187 194, 188 195, etc., along with a method to fix their geometry data.", "source": "original", "new_id": 1246}
{"id": 222, "function": "ST_InverseTransformPipeline", "question": "把一个位于143.0和-37.0的小点从一个编号4939的框架搬到7844的框架里，然后看看它长什么样。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a little point at 143.0 and -37.0 from a framework numbered 4939 and move it to framework 7844, then see what it looks like.", "source": "original", "new_id": 1248}
{"id": 221, "function": "ST_MakeValid", "question": "展示一个结果，第一列是原来有点问题的多面体，里面有两个小形状，一个是从(186 194)到(14 6)，另一个从(150 90)到(150 90)；第二列是用普通方法修复的样子；第三列则是用一种叫‘结构’的方式修复后的结果。", "sql": "SELECT f.geom AS before_geom, ST_MakeValid(f.geom) AS after_geom, ST_MakeValid(f.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))'::geometry AS geom) AS f;", "execution_result": [["010600000002000000010300000001000000230000000000000000406740000000000040684000000000006067400000000000406840000000000080674000000000006068400000000000A0674000000000006068400000000000C0674000000000006068400000000000E067400000000000606840000000000000684000000000006068400000000000206840000000000040684000000000004068400000000000406840000000000040684000000000002068400000000000606840000000000000684000000000006068400000000000E0674000000000006068400000000000C0674000000000006068400000000000A067400000000000606840000000000080674000000000004068400000000000606740000000000040684000000000004067400000000000002C4000000000000018400000000000002A40000000000000184000000000000028400000000000001440000000000000264000000000000014400000000000002440000000000000144000000000000022400000000000001440000000000000204000000000000014400000000000001C4000000000000018400000000000001840000000000000184000000000000018400000000000001C40000000000000144000000000000020400000000000001440000000000000224000000000000014400000000000002440000000000000144000000000000026400000000000001440000000000000284000000000000018400000000000002A4000000000000018400000000000002C4000000000004067400000000000406840010300000001000000210000000000000000C0624000000000008056400000000000A06240000000000000544000000000004062400000000000C051400000000000C061400000000000004F400000000000E060400000000000804B40000000000000604000000000000048400000000000C05D4000000000000046400000000000805B4000000000008044400000000000005940000000000000444000000000008056400000000000804440000000000040544000000000000046400000000000005240000000000000484000000000004050400000000000804B400000000000004D400000000000004F400000000000004B400000000000C051400000000000804940000000000000544000000000000049400000000000805640000000000080494000000000000059400000000000004B400000000000405B400000000000004D400000000000805D4000000000004050400000000000405F40000000000000524000000000008060400000000000405440000000000000614000000000008056400000000000606140000000000000594000000000008061400000000000805B4000000000006061400000000000C05D400000000000006140000000000000604000000000008060400000000000E060400000000000405F400000000000C061400000000000805D4000000000004062400000000000405B400000000000A0624000000000000059400000000000C062400000000000805640", "01060000000400000001030000000100000015000000000000000000264000000000000014400000000000002440000000000000144000000000000022400000000000001440000000000000204000000000000014400000000000001C4000000000000018400000000000001840000000000000184000000000000018400000000000001C40000000000000144000000000000020400000000000001440000000000000224000000000000014400000000000002440000000000000144000000000000026400000000000001440000000000000284000000000000018400000000000002A4000000000000018400000000000002C402776622776624C40143BB1133B3150400000000000004D400000000000004F4000000000000050400000000000004C400000000000002C4000000000000018400000000000002A4000000000000018400000000000002840000000000000144000000000000026400000000000001440010300000001000000100000000000000000004B400000000000C051400000000000804940000000000000544000000000000049400000000000805640000000000080494000000000000059400000000000004B400000000000405B400000000000004D400000000000805D4000000000004050400000000000405F40000000000000524000000000008060400000000000405440000000000000614000000000008056400000000000606140000000000000594000000000008061400000000000805B4000000000006061400000000000C05D400000000000006140ECC44EECC44E5F407662277662A760402776622776624C40143BB1133B3150400000000000004B400000000000C05140010300000001000000150000000000000000406740000000000040684000000000006067400000000000406840000000000080674000000000006068400000000000A0674000000000006068400000000000C0674000000000006068400000000000E067400000000000606840000000000000684000000000006068400000000000206840000000000040684000000000004068400000000000406840000000000040684000000000002068400000000000606840000000000000684000000000006068400000000000E0674000000000006068400000000000C0674000000000006068400000000000A067400000000000606840000000000080674000000000004068400000000000606740000000000040684000000000004067400000000000C060400000000000805F4000000000000060400000000000806040ECC44EECC44E5F407662277662A7604000000000004067400000000000406840010300000001000000140000000000000000E060400000000000405F400000000000C061400000000000805D4000000000004062400000000000405B400000000000A0624000000000000059400000000000C0624000000000008056400000000000A06240000000000000544000000000004062400000000000C051400000000000C061400000000000004F400000000000E060400000000000804B40000000000000604000000000000048400000000000C05D4000000000000046400000000000805B4000000000008044400000000000005940000000000000444000000000008056400000000000804440000000000040544000000000000046400000000000005240000000000000484000000000004050400000000000804B4000000000000050400000000000004C400000000000C060400000000000805F400000000000E060400000000000405F40", "010600000001000000010300000001000000450000000000000000A06240000000000000544000000000004062400000000000C051400000000000C061400000000000004F400000000000E060400000000000804B40000000000000604000000000000048400000000000C05D4000000000000046400000000000805B4000000000008044400000000000005940000000000000444000000000008056400000000000804440000000000040544000000000000046400000000000005240000000000000484000000000004050400000000000804B4000000000000050400000000000004C400000000000002C4000000000000018400000000000002A40000000000000184000000000000028400000000000001440000000000000264000000000000014400000000000002440000000000000144000000000000022400000000000001440000000000000204000000000000014400000000000001C4000000000000018400000000000001840000000000000184000000000000018400000000000001C40000000000000144000000000000020400000000000001440000000000000224000000000000014400000000000002440000000000000144000000000000026400000000000001440000000000000284000000000000018400000000000002A4000000000000018400000000000002C402776622776624C40143BB1133B3150400000000000004B400000000000C051400000000000804940000000000000544000000000000049400000000000805640000000000080494000000000000059400000000000004B400000000000405B400000000000004D400000000000805D4000000000004050400000000000405F40000000000000524000000000008060400000000000405440000000000000614000000000008056400000000000606140000000000000594000000000008061400000000000805B4000000000006061400000000000C05D400000000000006140ECC44EECC44E5F407662277662A760400000000000406740000000000040684000000000006067400000000000406840000000000080674000000000006068400000000000A0674000000000006068400000000000C0674000000000006068400000000000E067400000000000606840000000000000684000000000006068400000000000206840000000000040684000000000004068400000000000406840000000000040684000000000002068400000000000606840000000000000684000000000006068400000000000E0674000000000006068400000000000C0674000000000006068400000000000A067400000000000606840000000000080674000000000004068400000000000606740000000000040684000000000004067400000000000C060400000000000805F400000000000E060400000000000405F400000000000C061400000000000805D4000000000004062400000000000405B400000000000A0624000000000000059400000000000C0624000000000008056400000000000A062400000000000005440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show a result where the first column is the original slightly problematic multi-shape, containing two small shapes, one going from (186 194) to (14 6), and the other from (150 90) to (150 90); the second column is how it looks after fixing with a regular way; the third column is the result after using a method called 'structure' to fix it.", "source": "original", "new_id": 1247}
{"id": 222, "function": "ST_InverseTransformPipeline", "question": "把那些在4939系统下的143.0和-37.0这两个小数字，变换到7844系统里，然后告诉我它们的新形状是什么。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those little numbers, 143.0 and -37.0, from system 4939, shift them to system 7844, and then let me know what their new shape is.", "source": "original", "new_id": 1251}
{"id": 219, "function": "ST_MakeValid", "question": "你能展示一下那些六边形的原始形状吗？然后给我看看经过普通修理和另一种结构修理后的样子。记得用这些点：((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150))。", "sql": "SELECT c.geom AS before_geom, ST_MakeValid(c.geom) AS after_geom, ST_MakeValid(c.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))'::geometry AS geom) AS c;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show the original shape of those hexagons? Then let me see how they look after a regular fix and another structure repair. Remember to use these points: ((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)).", "source": "original", "new_id": 1234}
{"id": 222, "function": "ST_InverseTransformPipeline", "question": "把那个坐标点(143.0,-37.0)从某个编号4939的地方搬到编号7844的地方，然后告诉我它的样子是什么样的字串。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Move that coordinate point (143.0, -37.0) from a place with number 4939 to another with number 7844, and then tell me what it looks like as a string.", "source": "original", "new_id": 1249}
{"id": 222, "function": "ST_InverseTransformPipeline", "question": "把一个在4939坐标系里的点，坐标是143.0和-37.0，换到7844坐标系里，然后弄成能看懂的格式，结果叫gda2020_auto。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a point in the 4939 coordinate system with coordinates 143.0 and -37.0, switch it to the 7844 coordinate system, and turn it into a readable format, naming the result gda2020_auto.", "source": "original", "new_id": 1250}
{"id": 222, "function": "ST_InverseTransformPipeline", "question": "把那个带着4939号码的小点(143.0 -37.0)换成7844的号码，然后告诉我它的样子是什么。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change that little dot with number 4939 at (143.0 -37.0) to number 7844, and then tell me what it looks like.", "source": "original", "new_id": 1253}
{"id": 222, "function": "ST_InverseTransformPipeline", "question": "把在4939这个编号里的那个点，像是143.0和-37.0这两个数字，换到7844这个编号的那种系统里，然后看看它变成了什么样子的字符串。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that point in the 4939 numbered system, like the numbers 143.0 and -37.0, switch it to the 7844 numbered system, and then see what kind of string it turns into.", "source": "original", "new_id": 1252}
{"id": 224, "function": "ST_SetSRID", "question": "用那些数字-123.365556和48.428611弄个小点，然后用那个4326系统来标记它。", "sql": "SELECT ST_SetSRID(ST_Point(-123.365556, 48.428611),4326) AS wgs84long_lat;", "execution_result": [["0101000020E6100000D236FE4465D75EC059DAA9B9DC364840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Use the numbers -123.365556 and 48.428611 to create a little dot, then mark it with that 4326 system.", "source": "original", "new_id": 1255}
{"id": 224, "function": "ST_SetSRID", "question": "生成一个包含经度-123.365556和纬度48.428611的小点，给它贴上4326的标签，好像是某个全球标准的样子，并把它叫做wgs84long_lat。", "sql": "SELECT ST_SetSRID(ST_Point(-123.365556, 48.428611),4326) AS wgs84long_lat;", "execution_result": [["0101000020E6100000D236FE4465D75EC059DAA9B9DC364840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create a little dot with longitude -123.365556 and latitude 48.428611, give it a tag of 4326, which seems like some kind of global standard, and call it wgs84long_lat.", "source": "original", "new_id": 1254}
{"id": 219, "function": "ST_MakeValid", "question": "你能不能看看这些六个形状的坐标串，它们可能有点问题。然后，修复它们两次，一次用普通方法，一次用一种叫做结构的方法。最后，给我看看原来的样子和修复后的两种结果。每个形状的坐标分别是：第一个((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50))，第二个((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100))，第三个((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150))，第四个((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50))，第五个((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100))，第六个((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150))。", "sql": "SELECT c.geom AS before_geom, ST_MakeValid(c.geom) AS after_geom, ST_MakeValid(c.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)))'::geometry AS geom) AS c;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you check out these six shape coordinate strings? They might have a bit of trouble. Then, fix them twice, once with a normal way and once with something called a structure way. Finally, show me how they originally looked and the two fixed results. Each shape's coordinates are: first ((91 50,79 22,51 10,23 22,11 50,23 78,51 90,79 78,91 50)), second ((91 100,79 72,51 60,23 72,11 100,23 128,51 140,79 128,91 100)), third ((91 150,79 122,51 110,23 122,11 150,23 178,51 190,79 178,91 150)), fourth ((141 50,129 22,101 10,73 22,61 50,73 78,101 90,129 78,141 50)), fifth ((141 100,129 72,101 60,73 72,61 100,73 128,101 140,129 128,141 100)), sixth ((141 150,129 122,101 110,73 122,61 150,73 178,101 190,129 178,141 150)).", "source": "original", "new_id": 1232}
{"id": 224, "function": "ST_SetSRID", "question": "把一个小点放在-123.365556和48.428611的位置，用一种常见的地图方式来描述它，然后叫它wgs84long_lat。", "sql": "SELECT ST_SetSRID(ST_Point(-123.365556, 48.428611),4326) AS wgs84long_lat;", "execution_result": [["0101000020E6100000D236FE4465D75EC059DAA9B9DC364840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Place a little dot at the location -123.365556 and 48.428611, describe it using a common map way, and call it wgs84long_lat.", "source": "original", "new_id": 1256}
{"id": 224, "function": "ST_SetSRID", "question": "把那对坐标(-123.365556,48.428611)放在一个叫4326的框架里，然后给它一个名字，叫做wgs84long_lat。", "sql": "SELECT ST_SetSRID(ST_Point(-123.365556, 48.428611),4326) AS wgs84long_lat;", "execution_result": [["0101000020E6100000D236FE4465D75EC059DAA9B9DC364840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Put that pair of coordinates (-123.365556,48.428611) into a framework called 4326, and then give it a name, wgs84long_lat.", "source": "original", "new_id": 1257}
{"id": 224, "function": "ST_SetSRID", "question": "把一个在-123.365556经度和48.428611纬度的小点放在一个叫4326的框架里，然后用wgs84long_lat这个名字来称呼它。", "sql": "SELECT ST_SetSRID(ST_Point(-123.365556, 48.428611),4326) AS wgs84long_lat;", "execution_result": [["0101000020E6100000D236FE4465D75EC059DAA9B9DC364840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Place a little dot at longitude -123.365556 and latitude 48.428611 into a framework called 4326, and then call it by the name wgs84long_lat.", "source": "original", "new_id": 1258}
{"id": 224, "function": "ST_SetSRID", "question": "找出一个坐标是-123.365556和48.428611的小点，并用那个常用的地球坐标系来描述它，给它起个名字叫wgs84long_lat。", "sql": "SELECT ST_SetSRID(ST_Point(-123.365556, 48.428611),4326) AS wgs84long_lat;", "execution_result": [["0101000020E6100000D236FE4465D75EC059DAA9B9DC364840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find a little dot with coordinates -123.365556 and 48.428611, and use that common Earth coordinate system to describe it, naming it wgs84long_lat.", "source": "original", "new_id": 1259}
{"id": 225, "function": "ST_SetSRID", "question": "把那个位置标记为(-123.365556, 48.428611)的小点，先用一种常用的地球坐标系统，再换成另一种地图画法。", "sql": "SELECT ST_Transform(ST_SetSRID(ST_Point(-123.365556, 48.428611),4326),3785) AS spere_merc;", "execution_result": [["0101000020C90E000010DC02DC8F316AC16657B6BDA6915741"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that spot marked as (-123.365556, 48.428611) and first use a common earth coordinate style, then switch it to another map drawing style.", "source": "original", "new_id": 1260}
{"id": 225, "function": "ST_SetSRID", "question": "把那个点(-123.365556,48.428611)从一个地球坐标系统变成另一个网络地图系统，看看会是什么样子。", "sql": "SELECT ST_Transform(ST_SetSRID(ST_Point(-123.365556, 48.428611),4326),3785) AS spere_merc;", "execution_result": [["0101000020C90E000010DC02DC8F316AC16657B6BDA6915741"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that point (-123.365556, 48.428611) and change it from one earth coordinate system to another web map system to see what it looks like.", "source": "original", "new_id": 1263}
{"id": 226, "function": "ST_SRID", "question": "你能找到那个用数字4326表示的地球坐标系统里的小点(-71.1043 42.315)的编号吗？", "sql": "SELECT ST_SRID(ST_GeomFromText('POINT(-71.1043 42.315)',4326));", "execution_result": [[4326]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you find the number for that little point (-71.1043 42.315) in the Earth coordinate system represented by the number 4326?", "source": "original", "new_id": 1270}
{"id": 226, "function": "ST_SRID", "question": "看看那个叫'POINT(-71.1043 42.315)'的小点在某个坐标系统中是怎么标识的。", "sql": "SELECT ST_SRID(ST_GeomFromText('POINT(-71.1043 42.315)',4326));", "execution_result": [[4326]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out how that little dot called 'POINT(-71.1043 42.315)' is identified in a certain coordinate system.", "source": "original", "new_id": 1268}
{"id": 226, "function": "ST_SRID", "question": "找出那个包含坐标点(-71.1043 42.315)的小东西用的空间参考编号，它是在地球的常用系统里。", "sql": "SELECT ST_SRID(ST_GeomFromText('POINT(-71.1043 42.315)',4326));", "execution_result": [[4326]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the reference number used by that little thing containing the coordinates (-71.1043 42.315) in the common system of the Earth.", "source": "original", "new_id": 1266}
{"id": 226, "function": "ST_SRID", "question": "找出关于那个点在4326这个坐标系里的特别编号，它的位置是(-71.1043, 42.315)。", "sql": "SELECT ST_SRID(ST_GeomFromText('POINT(-71.1043 42.315)',4326));", "execution_result": [[4326]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the special number for that point in the 4326 coordinate system, where its location is (-71.1043, 42.315).", "source": "original", "new_id": 1267}
{"id": 225, "function": "ST_SetSRID", "question": "把那些在经度-123.365556和纬度48.428611的坐标点，变成一种在地图上常用的投影样子，看看它会是什么样子。", "sql": "SELECT ST_Transform(ST_SetSRID(ST_Point(-123.365556, 48.428611),4326),3785) AS spere_merc;", "execution_result": [["0101000020C90E000010DC02DC8F316AC16657B6BDA6915741"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the coordinates at longitude -123.365556 and latitude 48.428611, and transform them into a commonly used map projection, to see what it looks like.", "source": "original", "new_id": 1264}
{"id": 226, "function": "ST_SRID", "question": "给我告诉那个包含小点(-71.1043 42.315)的系统数字编号是多少？", "sql": "SELECT ST_SRID(ST_GeomFromText('POINT(-71.1043 42.315)',4326));", "execution_result": [[4326]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me what the system number is for that little dot at (-71.1043, 42.315)?", "source": "original", "new_id": 1269}
{"id": 225, "function": "ST_SetSRID", "question": "把那个在-123.365556和48.428611位置的小点，从一种坐标系统变成另一种，看看它在新世界里的样子。", "sql": "SELECT ST_Transform(ST_SetSRID(ST_Point(-123.365556, 48.428611),4326),3785) AS spere_merc;", "execution_result": [["0101000020C90E000010DC02DC8F316AC16657B6BDA6915741"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little dot at -123.365556 and 48.428611 and change it from one coordinate system to another, and see how it looks in the new world.", "source": "original", "new_id": 1265}
{"id": 225, "function": "ST_SetSRID", "question": "把那个在-123.365556和48.428611地方的小点，换个坐标系统看看会变成什么样子。", "sql": "SELECT ST_Transform(ST_SetSRID(ST_Point(-123.365556, 48.428611),4326),3785) AS spere_merc;", "execution_result": [["0101000020C90E000010DC02DC8F316AC16657B6BDA6915741"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little dot located at -123.365556 and 48.428611, and switch its coordinate system to see what it looks like.", "source": "original", "new_id": 1261}
{"id": 225, "function": "ST_SetSRID", "question": "把一个叫POINT(-123.365556 48.428611)的小点调整到某种坐标系，然后换成另一种系统，结果叫spere_merc。", "sql": "SELECT ST_Transform(ST_SetSRID(ST_Point(-123.365556, 48.428611),4326),3785) AS spere_merc;", "execution_result": [["0101000020C90E000010DC02DC8F316AC16657B6BDA6915741"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a small point called POINT(-123.365556 48.428611), adjust it to one coordinate system, then switch it to another system, and name the result spere_merc.", "source": "original", "new_id": 1262}
{"id": 226, "function": "ST_SRID", "question": "能告诉我那个点在地球上以某种系统标识的编号吗？点的位置是经度-71.1043和纬度42.315。", "sql": "SELECT ST_SRID(ST_GeomFromText('POINT(-71.1043 42.315)',4326));", "execution_result": [[4326]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me the number used to identify that point on Earth with a certain system? The point's location is longitude -71.1043 and latitude 42.315.", "source": "original", "new_id": 1271}
{"id": 221, "function": "ST_MakeValid", "question": "有一个由两个形状构成的几何图形，第一个形状的点大概是这样排的：((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194))，第二个形状的点是这样：((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90))。用一种普通的方法和一种叫‘结构’的方法来修复它们，然后告诉我原始形状和修复后的两种形状。", "sql": "SELECT f.geom AS before_geom, ST_MakeValid(f.geom) AS after_geom, ST_MakeValid(f.geom, 'method=structure') AS after_geom_structure \nFROM (SELECT 'MULTIPOLYGON(((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)),((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)))'::geometry AS geom) AS f;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a geometry made of two shapes, the first shape has points roughly ordered like this: ((186 194,187 194,188 195,189 195,190 195,191 195,192 195,193 194,194 194,194 193,195 192,195 191,195 190,195 189,195 188,194 187,194 186,14 6,13 6,12 5,11 5,10 5,9 5,8 5,7 6,6 6,6 7,5 8,5 9,5 10,5 11,5 12,6 13,6 14,186 194)), and the second shape's points are like this: ((150 90,149 80,146 71,142 62,135 55,128 48,119 44,110 41,100 40,90 41,81 44,72 48,65 55,58 62,54 71,51 80,50 90,51 100,54 109,58 118,65 125,72 132,81 136,90 139,100 140,110 139,119 136,128 132,135 125,142 118,146 109,149 100,150 90)). Fix them with a regular way and a way called 'structure', then tell me the original and the two fixed shapes.", "source": "original", "new_id": 1244}
{"id": 227, "function": "ST_Transform", "question": "在一个特别的投影下看看两个形状，它们分别是(170 50,170 72,-130 72,-130 50,170 50)和(-170 68,-170 90,-141 90,-141 68,-170 68)，找到交集并用某种常用的坐标方式告诉我。", "sql": "WITH data AS ( SELECT ST_GeomFromText('POLYGON((170 50,170 72,-130 72,-130 50,170 50))', 4326) AS p1, ST_GeomFromText('POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))', 4326) AS p2, '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'::text AS gnom ) SELECT ST_AsText( ST_Transform( ST_Intersection(ST_Transform(p1, gnom), ST_Transform(p2, gnom)), gnom, 4326)) FROM data;", "execution_result": [["POLYGON((-141.00000000000003 73.42686213789042,-141 68.00000000000001,-170 68,-170 74.05379364533805,-141.00000000000003 73.42686213789042))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In a special projection, look at two shapes, one being (170 50,170 72,-130 72,-130 50,170 50) and the other (-170 68,-170 90,-141 90,-141 68,-170 68), find the overlapping part and tell me in some common coordinate way.", "source": "original", "new_id": 1273}
{"id": 227, "function": "ST_Transform", "question": "看看两个多边形，POLYGON((170 50,170 72,-130 72,-130 50,170 50))和POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))，用一个很特别的投影方式，像是把地图铺平，然后找出重叠的部分，再用一种常见的坐标系表示出来。", "sql": "WITH data AS ( SELECT ST_GeomFromText('POLYGON((170 50,170 72,-130 72,-130 50,170 50))', 4326) AS p1, ST_GeomFromText('POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))', 4326) AS p2, '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'::text AS gnom ) SELECT ST_AsText( ST_Transform( ST_Intersection(ST_Transform(p1, gnom), ST_Transform(p2, gnom)), gnom, 4326)) FROM data;", "execution_result": [["POLYGON((-141.00000000000003 73.42686213789042,-141 68.00000000000001,-170 68,-170 74.05379364533805,-141.00000000000003 73.42686213789042))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at these two polygons, POLYGON((170 50,170 72,-130 72,-130 50,170 50)) and POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68)), use a special way to flatten the map, find where they overlap, and then show that part using a common coordinate system.", "source": "original", "new_id": 1272}
{"id": 228, "function": "ST_Transform", "question": "把那种编号4267的空间参考的描述更新成用长和宽的方式，还有一些别的参数呢。", "sql": "UPDATE spatial_ref_sys SET proj4text = '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs' WHERE srid = 4267;", "execution_result": "NO RETURN", "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the description for that reference with the number 4267 to use long and wide style, along with some other parameters.", "source": "original", "new_id": 1278}
{"id": 228, "function": "ST_Transform", "question": "在某个表中，看看编号是4267的那条，给它的文本字段换成'+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs'。", "sql": "UPDATE spatial_ref_sys SET proj4text = '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs' WHERE srid = 4267;", "execution_result": "NO RETURN", "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In a certain table, for the entry with the number 4267, change its text to '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs'.", "source": "original", "new_id": 1279}
{"id": 229, "function": "ST_Transform", "question": "把那个有点像四边形的东西，顶点是(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)、(743238 2967416)，从某个地方的坐标换到全球通用的那种，然后用一种字符串方式说出来。", "sql": "SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) AS wgs_geom;", "execution_result": [["POLYGON((-71.1776848522251 42.39028965129032,-71.17768437663261 42.390382947801015,-71.17758443054647 42.390382667791854,-71.17758259272304 42.390289364798825,-71.1776848522251 42.39028965129032))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that shape resembling a quadrilateral, with points like (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416), (743238 2967416), and change its coordinates from some specific place to the worldwide standard, then describe it as a string.", "source": "original", "new_id": 1286}
{"id": 228, "function": "ST_Transform", "question": "把编号为4267的那个空间参考的描述改成一种新的方式，像是用长宽坐标和一些特别的网格，然后看看全部更新后的内容是什么样子。", "sql": "UPDATE spatial_ref_sys \nSET proj4text = '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs' \nWHERE srid = 4267;", "execution_result": "NO RETURN", "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the description for the space reference with the number 4267 to a new style, like using long and wide coordinates and some special grids, and then see what the fully updated content looks like.", "source": "original", "new_id": 1283}
{"id": 228, "function": "ST_Transform", "question": "把那个4267编号的坐标系统的描述换成用长长的字符串，里面说到长长的线、一个叫clrk66的东西，还有一些像@conus之类的文件，还有个不定义的标志。", "sql": "UPDATE spatial_ref_sys \nSET proj4text = '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs' \nWHERE srid = 4267;", "execution_result": "NO RETURN", "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the description of the coordinate system with the number 4267 to a long string mentioning long lines, something called clrk66, some files like @conus, and an undefined flag.", "source": "original", "new_id": 1280}
{"id": 228, "function": "ST_Transform", "question": "有一个操作会对某张表里的一个编号为4267的东西进行更新，换成一种新方式定义，里面有长短轴和一些地名代码。", "sql": "UPDATE spatial_ref_sys SET proj4text = '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs' WHERE srid = 4267;", "execution_result": "NO RETURN", "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's an operation that will update something with the number 4267 in a table, changing it to a new way of defining, which includes long and short axes and some place name codes.", "source": "original", "new_id": 1282}
{"id": 227, "function": "ST_Transform", "question": "有两个形状，像是用点连接起来的那种，一个长得像这样：170 50,170 72,-130 72,-130 50,170 50，另一个形状有点像这样：-170 68,-170 90,-141 90,-141 68,-170 68。想象一下有一个特定的方式把它们变成不同的样子，然后找出它们重叠的地方，再把结果变回之前的样子，最后以某种格式输出。", "sql": "WITH data AS ( SELECT ST_GeomFromText('POLYGON((170 50,170 72,-130 72,-130 50,170 50))', 4326) AS p1, ST_GeomFromText('POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))', 4326) AS p2, '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'::text AS gnom ) \nSELECT ST_AsText( ST_Transform( ST_Intersection(ST_Transform(p1, gnom), ST_Transform(p2, gnom)), gnom, 4326)) FROM data;", "execution_result": [["POLYGON((-141.00000000000003 73.42686213789042,-141 68.00000000000001,-170 68,-170 74.05379364533805,-141.00000000000003 73.42686213789042))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are two shapes, kind of like those connected by dots. One looks like this: 170 50,170 72,-130 72,-130 50,170 50, and the other looks a bit like this: -170 68,-170 90,-141 90,-141 68,-170 68. Imagine a specific way to transform them into different forms, then find where they overlap, change the result back to the previous form, and finally output it in a certain format.", "source": "original", "new_id": 1274}
{"id": 228, "function": "ST_Transform", "question": "调整一个编号为4267的特殊参考系统，让它用新的参数描述方式，参数里提到一些地方和数字，比如'+proj=longlat +ellps=clrk66'等。", "sql": "UPDATE spatial_ref_sys SET proj4text = '+proj=longlat +ellps=clrk66 +nadgrids=@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat,NULL +no_defs' WHERE srid = 4267;", "execution_result": "NO RETURN", "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change a special reference system with the number 4267 to use a new way of describing things, with parameters mentioning some places and numbers like '+proj=longlat +ellps=clrk66', etc.", "source": "original", "new_id": 1281}
{"id": 227, "function": "ST_Transform", "question": "把两个带有这些点的区域（170 50,170 72,-130 72,-130 50,170 50 和 -170 68,-170 90,-141 90,-141 68,-170 68）先变换到一个特殊的投影方式，看它们重叠的地方，然后再转回原来的坐标格式，结果是什么样的文字形式？", "sql": "WITH data AS ( SELECT ST_GeomFromText('POLYGON((170 50,170 72,-130 72,-130 50,170 50))', 4326) AS p1, ST_GeomFromText('POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))', 4326) AS p2, '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'::text AS gnom ) \nSELECT ST_AsText( ST_Transform( ST_Intersection(ST_Transform(p1, gnom), ST_Transform(p2, gnom)), gnom, 4326)) FROM data;", "execution_result": [["POLYGON((-141.00000000000003 73.42686213789042,-141 68.00000000000001,-170 68,-170 74.05379364533805,-141.00000000000003 73.42686213789042))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take two areas with these points (170 50,170 72,-130 72,-130 50,170 50 and -170 68,-170 90,-141 90,-141 68,-170 68), transform them using a special projection method, find where they overlap, and then convert back to the original coordinate format. What does the result look like in text form?", "source": "original", "new_id": 1276}
{"id": 227, "function": "ST_Transform", "question": "在一种特殊的投影下，看看两个形状的重合区域的样子，坐标是EPSG:4326，形状分别用这些点来画：一个是(170 50,170 72,-130 72,-130 50,170 50)，另一个是(-170 68,-170 90,-141 90,-141 68,-170 68)，你能找到这个区域的文字描述吗？", "sql": "WITH data AS ( SELECT ST_GeomFromText('POLYGON((170 50,170 72,-130 72,-130 50,170 50))', 4326) AS p1, ST_GeomFromText('POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))', 4326) AS p2, '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'::text AS gnom ) SELECT ST_AsText( ST_Transform( ST_Intersection(ST_Transform(p1, gnom), ST_Transform(p2, gnom)), gnom, 4326)) FROM data;", "execution_result": [["POLYGON((-141.00000000000003 73.42686213789042,-141 68.00000000000001,-170 68,-170 74.05379364533805,-141.00000000000003 73.42686213789042))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Under a special kind of projection, see what the overlapping area of two shapes looks like. The coordinates are EPSG:4326, and the shapes are drawn with these points: one is (170 50,170 72,-130 72,-130 50,170 50), the other is (-170 68,-170 90,-141 90,-141 68,-170 68). Can you find the text description of this area?", "source": "original", "new_id": 1275}
{"id": 229, "function": "ST_Transform", "question": "把那个多边形，像是用743238 2967416和743265.625 2967416这些点画出来的，从一个地方的坐标转换到一个叫4326的全球范围里，然后用一种简单的写法表示出来。", "sql": "SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) AS wgs_geom;", "execution_result": [["POLYGON((-71.1776848522251 42.39028965129032,-71.17768437663261 42.390382947801015,-71.17758443054647 42.390382667791854,-71.17758259272304 42.390289364798825,-71.1776848522251 42.39028965129032))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that polygon, drawn with points like 743238 2967416 and 743265.625 2967416, and switch it from one local system to a global one called 4326, then represent it in a straightforward way.", "source": "original", "new_id": 1284}
{"id": 229, "function": "ST_Transform", "question": "有一个形状由这些坐标点构成：(743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416)。你能帮忙把它从一个旧的坐标系变成一个新的坐标系吗？", "sql": "SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) AS wgs_geom;", "execution_result": [["POLYGON((-71.1776848522251 42.39028965129032,-71.17768437663261 42.390382947801015,-71.17758443054647 42.390382667791854,-71.17758259272304 42.390289364798825,-71.1776848522251 42.39028965129032))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a shape made up of these points: (743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416). Can you help change it from an old coordinate system to a new one?", "source": "original", "new_id": 1285}
{"id": 227, "function": "ST_Transform", "question": "有两个区域，一个是POLYGON((170 50,170 72,-130 72,-130 50,170 50))，另一个是POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))，先用一种特别的坐标系统来处理它们，看看它们哪里重合，再把结果变回原来的坐标方式，这样得到的东西用WKT表示出来。", "sql": "WITH data AS ( SELECT ST_GeomFromText('POLYGON((170 50,170 72,-130 72,-130 50,170 50))', 4326) AS p1, ST_GeomFromText('POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68))', 4326) AS p2, '+proj=gnom +ellps=WGS84 +lat_0=70 +lon_0=-160 +no_defs'::text AS gnom ) \nSELECT ST_AsText( ST_Transform( ST_Intersection(ST_Transform(p1, gnom), ST_Transform(p2, gnom)), gnom, 4326)) FROM data;", "execution_result": [["POLYGON((-141.00000000000003 73.42686213789042,-141 68.00000000000001,-170 68,-170 74.05379364533805,-141.00000000000003 73.42686213789042))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are two areas, one is POLYGON((170 50,170 72,-130 72,-130 50,170 50)) and the other is POLYGON((-170 68,-170 90,-141 90,-141 68,-170 68)). First, use a special coordinate system to handle them, see where they overlap, and then convert the result back to the original coordinate way, and express the result in WKT.", "source": "original", "new_id": 1277}
{"id": 229, "function": "ST_Transform", "question": "把那个形状从一个特定的编号为2249的地方换到4326这个地方，然后告诉我它的新样子。", "sql": "SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) AS wgs_geom;", "execution_result": [["POLYGON((-71.1776848522251 42.39028965129032,-71.17768437663261 42.390382947801015,-71.17758443054647 42.390382667791854,-71.17758259272304 42.390289364798825,-71.1776848522251 42.39028965129032))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that shape from a specific place numbered 2249 and move it to 4326, then tell me how it looks now.", "source": "original", "new_id": 1287}
{"id": 229, "function": "ST_Transform", "question": "把那个在NAD83/维吉尼亚南边系统里的多边形，像是743238到2967416之类的点，转换成一个叫WGS84的系统，并给我它的形状表现。", "sql": "SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) AS wgs_geom;", "execution_result": [["POLYGON((-71.1776848522251 42.39028965129032,-71.17768437663261 42.390382947801015,-71.17758443054647 42.390382667791854,-71.17758259272304 42.390289364798825,-71.1776848522251 42.39028965129032))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that polygon in the NAD83/Virginia South system, with points like 743238 to 2967416, and change it to something called WGS84, then show me its shape.", "source": "original", "new_id": 1289}
{"id": 233, "function": "ST_GeogFromText", "question": "把那个点位置，-77.0092和38.889588，用一种特别的格式表示出来，记得它和4267有关哦。", "sql": "SELECT ST_AsEWKT(ST_GeogFromText('SRID=4267;POINT(-77.0092 38.889588)'));", "execution_result": [["SRID=4267;POINT(-77.0092 38.889588)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Express that point location, -77.0092 and 38.889588, in a special format, and remember it's related to 4267.", "source": "original", "new_id": 1299}
{"id": 229, "function": "ST_Transform", "question": "你能帮我把这些坐标点组成的形状，像743238 2967416和743265.625 2967416，换个地图框架吗？我想看看它在另一个系统下的样子。", "sql": "SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) AS wgs_geom;", "execution_result": [["POLYGON((-71.1776848522251 42.39028965129032,-71.17768437663261 42.390382947801015,-71.17758443054647 42.390382667791854,-71.17758259272304 42.390289364798825,-71.1776848522251 42.39028965129032))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you help me switch the framework for these coordinates that make up a shape, like 743238 2967416 and 743265.625 2967416? I want to see how it looks in another system.", "source": "original", "new_id": 1288}
{"id": 230, "function": "ST_TransformPipeline", "question": "把那个在143.0 -37.0位置的小点，从一个编号是4939的系统变到一个编号是7844的系统，然后看看它变成什么样子。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little dot at 143.0 -37.0 and switch it from a system numbered 4939 to one numbered 7844, then see what it looks like.", "source": "original", "new_id": 1290}
{"id": 233, "function": "ST_GeogFromText", "question": "把一个包含-77.0092和38.889588这些数字的小点，给它换个格式，像是让它变成更长的文本形式。", "sql": "SELECT ST_AsEWKT(ST_GeogFromText('SRID=4267;POINT(-77.0092 38.889588)'));", "execution_result": [["SRID=4267;POINT(-77.0092 38.889588)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a little dot with numbers -77.0092 and 38.889588 and change its format, like turning it into a longer text form.", "source": "original", "new_id": 1296}
{"id": 233, "function": "ST_GeogFromText", "question": "把坐标是(-77.0092,38.889588)的那个位置，用一种扩展的格式表达出来。", "sql": "SELECT ST_AsEWKT(ST_GeogFromText('SRID=4267;POINT(-77.0092 38.889588)'));", "execution_result": [["SRID=4267;POINT(-77.0092 38.889588)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Express the location at coordinates (-77.0092,38.889588) in an extended format.", "source": "original", "new_id": 1297}
{"id": 230, "function": "ST_TransformPipeline", "question": "把那个在4939坐标系里的点，坐标是143.0和-37.0，换成7844这个系统的样子，然后说出它的样子。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that point in the 4939 system, with coordinates 143.0 and -37.0, change it to look like it's in system 7844, and then say what it looks like.", "source": "original", "new_id": 1291}
{"id": 233, "function": "ST_GeogFromText", "question": "把那个在4267框架里的点，坐标是(-77.0092, 38.889588)，变成一种特别的格式来看看。", "sql": "SELECT ST_AsEWKT(ST_GeogFromText('SRID=4267;POINT(-77.0092 38.889588)'));", "execution_result": [["SRID=4267;POINT(-77.0092 38.889588)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that point within the 4267 framework, with coordinates (-77.0092, 38.889588), and turn it into some special format to see.", "source": "original", "new_id": 1298}
{"id": 230, "function": "ST_TransformPipeline", "question": "假设有一个位置在143.0和-37.0之间的小点，能不能在不同的坐标系里看到它是怎么描述的呢？", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine there's a little dot located between 143.0 and -37.0, can you see how it is described in a different coordinate system?", "source": "original", "new_id": 1295}
{"id": 230, "function": "ST_TransformPipeline", "question": "把那个在4939里有个小点(143.0 -37.0)的坐标，换个到7844的那种，然后看看它是啥样子。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little dot at (143.0 -37.0) in 4939, switch it to the 7844 type, and see what it looks like.", "source": "original", "new_id": 1293}
{"id": 230, "function": "ST_TransformPipeline", "question": "把那个在143.0和-37.0位置的小点，从一个编号4939的坐标系转到编号7844的地方，然后告诉我它的形状描述。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little dot at 143.0 and -37.0, move it from a place with number 4939 to a place with number 7844, and then tell me its shape description.", "source": "original", "new_id": 1294}
{"id": 230, "function": "ST_TransformPipeline", "question": "把那个在143.0和-37.0位置的小点从一个编号4939的系统换到一个编号7844的系统，然后用一种特殊的格式表达出来，结果叫做gda2020_auto。", "sql": "SELECT ST_AsText(ST_Transform('SRID=4939;POINT(143.0 -37.0)'::geometry, 7844)) AS gda2020_auto;", "execution_result": [["POINT(143 -37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little dot at position 143.0 and -37.0 from one system numbered 4939 and switch it to another system numbered 7844, then express it in a special format, and name the result gda2020_auto.", "source": "original", "new_id": 1292}
{"id": 235, "function": "ST_GeomCollFromText", "question": "给我一个包含那两个小坐标和一条连接它们的线的整体形状的描述，用那些数字：1 2和1 2, 3 4。", "sql": "SELECT ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(1 2),LINESTRING(1 2, 3 4))');", "execution_result": [["0107000000020000000101000000000000000000F03F0000000000000040010200000002000000000000000000F03F000000000000004000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a description of the whole shape that includes those two little dots and a line connecting them, using those numbers: 1 2 and 1 2, 3 4.", "source": "original", "new_id": 1302}
{"id": 233, "function": "ST_GeogFromText", "question": "把那个带有4267编号的小点坐标(-77.0092 38.889588)，变成一种特别的格式来看看。", "sql": "SELECT ST_AsEWKT(ST_GeogFromText('SRID=4267;POINT(-77.0092 38.889588)'));", "execution_result": [["SRID=4267;POINT(-77.0092 38.889588)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little dot with the number 4267 at coordinates (-77.0092 38.889588) and turn it into a special format to see.", "source": "original", "new_id": 1301}
{"id": 233, "function": "ST_GeogFromText", "question": "把那个点(-77.0092 38.889588)弄成一种带编号的特别字符串格式是什么样的呢？", "sql": "SELECT ST_AsEWKT(ST_GeogFromText('SRID=4267;POINT(-77.0092 38.889588)'));", "execution_result": [["SRID=4267;POINT(-77.0092 38.889588)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What does it look like when that point (-77.0092 38.889588) is turned into a special string format with a number attached?", "source": "original", "new_id": 1300}
{"id": 235, "function": "ST_GeomCollFromText", "question": "给出一个包含1 2这个点和1 2到3 4这条线的集合，用一种特别的格式表示出来。", "sql": "SELECT ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(1 2),LINESTRING(1 2, 3 4))');", "execution_result": [["0107000000020000000101000000000000000000F03F0000000000000040010200000002000000000000000000F03F000000000000004000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide a collection containing the point 1 2 and the line from 1 2 to 3 4, represented in a special format.", "source": "original", "new_id": 1307}
{"id": 235, "function": "ST_GeomCollFromText", "question": "能不能帮我搞定一个几何组合，里面有个小点在(1 2)，还有从(1 2)到(3 4)的一条线，像是给它们找个家似的？", "sql": "SELECT ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(1 2),LINESTRING(1 2, 3 4))');", "execution_result": [["0107000000020000000101000000000000000000F03F0000000000000040010200000002000000000000000000F03F000000000000004000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you help me create a geometry collection with a little dot at (1 2) and a line going from (1 2) to (3 4), like finding them a home together?", "source": "original", "new_id": 1304}
{"id": 235, "function": "ST_GeomCollFromText", "question": "想象一下，有个小集合，它包含了一个在(1,2)的点和从(1,2)到(3,4)连起来的线，你能描述这个集合的形状吗？", "sql": "SELECT ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(1 2),LINESTRING(1 2, 3 4))');", "execution_result": [["0107000000020000000101000000000000000000F03F0000000000000040010200000002000000000000000000F03F000000000000004000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a little collection that has a dot at (1,2) and a line connecting (1,2) to (3,4). Can you describe the shape of this collection?", "source": "original", "new_id": 1303}
{"id": 235, "function": "ST_GeomCollFromText", "question": "能不能给我看看包含那些坐标点和连接线的形状的特别字符串？比如点在(1 2)，线在(1 2, 3 4)。", "sql": "SELECT ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(1 2),LINESTRING(1 2, 3 4))');", "execution_result": [["0107000000020000000101000000000000000000F03F0000000000000040010200000002000000000000000000F03F000000000000004000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show me the special string for a shape that has those coordinates and connecting line? Like the point at (1 2) and the line at (1 2, 3 4).", "source": "original", "new_id": 1306}
{"id": 236, "function": "ST_GeomFromEWKT", "question": "帮我把那些坐标点(-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932)串成一条线的样子，记得用4269这个数字。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Help me string together those coordinates (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932) into a line-like shape, and remember to use the number 4269.", "source": "original", "new_id": 1309}
{"id": 236, "function": "ST_GeomFromEWKT", "question": "用一个叫4269的特殊编号，把点(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)串起来，看看能不能画出一条线。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "With a special code called 4269, string together the points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932) to see if you can draw a line.", "source": "original", "new_id": 1308}
{"id": 235, "function": "ST_GeomCollFromText", "question": "给我看看那些坐标的组合，像是1 2的小点和1 2到3 4的连线，它们一起组成的形状。", "sql": "SELECT ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(1 2),LINESTRING(1 2, 3 4))');", "execution_result": [["0107000000020000000101000000000000000000F03F0000000000000040010200000002000000000000000000F03F000000000000004000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the combination of those coordinates, like the little dot at 1 2 and the line from 1 2 to 3 4, forming a shape together.", "source": "original", "new_id": 1305}
{"id": 236, "function": "ST_GeomFromEWKT", "question": "请给我一个包含这些小点的形状：(-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932)，并用一种特别的格式展示它。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please give me a shape containing these little dots: (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932), and show it in a special format.", "source": "original", "new_id": 1311}
{"id": 236, "function": "ST_GeomFromEWKT", "question": "把那条带有编号4269的线，里面有点(-71.160281 42.258729)、(-71.160837 42.259113)、(-71.161144 42.25932)，变成一种内部的形状，然后给我看。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that line with the number 4269, which includes the points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), turn it into some kind of internal shape, and show it to me.", "source": "original", "new_id": 1312}
{"id": 236, "function": "ST_GeomFromEWKT", "question": "给我一个由小点连接成的线段，包含这些坐标：(-71.160281 42.258729)、(-71.160837 42.259113)、(-71.161144 42.25932)，然后用一种特别的方式显示，数值为4269。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a line made from little dots, containing these coordinates: (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), then show it in a special way with the number 4269.", "source": "original", "new_id": 1313}
{"id": 236, "function": "ST_GeomFromEWKT", "question": "想象一个由三个小点连起来的长条形状，它们分别在这几个地方：(-71.160281 42.258729)、(-71.160837 42.259113)、(-71.161144 42.25932)，然后用一种特别格式描述它，并且好像有个编号是4269。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a long shape connected by three little dots, located at these places: (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932), and then describe it in a special format, with something like a number 4269.", "source": "original", "new_id": 1310}
{"id": 238, "function": "ST_GeomFromEWKT", "question": "用那些数字点，像(-71.160281 42.258729)、(-71.160837 42.259113)、(-71.161144 42.25932)组成的线，想象一个大概的形状，给它一个编号4269。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["0105000020AD10000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Using those numbered dots like (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932) to form a line, imagine a general shape and give it the number 4269.", "source": "original", "new_id": 1320}
{"id": 237, "function": "ST_GeomFromEWKT", "question": "请找出一种方法来表达一个集合，这个集合有些形状包围着一些坐标，像是有两个小区域，第一个有40个角点，比如(-71.1031880899493 42.3152774590236)，第二个有5个角点，比如(-71.1043632495873 42.315113108546)，这些都在同一个系统中。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please figure out a way to express a collection, where there are some shapes surrounding certain coordinates, like two small areas, the first one with 40 corner points, such as (-71.1031880899493 42.3152774590236), and the second one with 5 corner points, such as (-71.1043632495873 42.315113108546), all within the same system.", "source": "original", "new_id": 1315}
{"id": 237, "function": "ST_GeomFromEWKT", "question": "想象一个有两个形状的图像，第一个形状有40个小点，第二个有5个小点。用这些坐标来描述它们：第一个形状从(-71.1031880899493 42.3152774590236)开始，最后回到起点。第二个形状从(-71.1043632495873 42.315113108546)开始，也回到起点。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a picture with two shapes, the first shape has 40 little dots, and the second has 5 little dots. Use these coordinates to describe them: the first shape starts at (-71.1031880899493 42.3152774590236) and returns to the starting point. The second shape starts at (-71.1043632495873 42.315113108546) and also returns to the starting point.", "source": "original", "new_id": 1314}
{"id": 237, "function": "ST_GeomFromEWKT", "question": "把那些坐标点组合成一个多边形的集合，里面有两个多边形，一个有42个角落，另一个有5个角落，坐标就像是(-71.1031880899493 42.3152774590236)和(-71.1043632495873 42.315113108546)这样的，输出这个形状的描述。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine those coordinate points into a collection of shapes, with two shapes inside. One has 42 corners, the other has 5 corners, with coordinates like (-71.1031880899493 42.3152774590236) and (-71.1043632495873 42.315113108546). Output the description of this shape.", "source": "original", "new_id": 1318}
{"id": 238, "function": "ST_GeomFromEWKT", "question": "在某种4269的背景下，想象一下从一个点到另一个点，再到第三个点的连续路径，点的位置分别是(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)，然后以一种特别的方式来描述这条路径。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["0105000020AD10000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In a setting with 4269, imagine a continuous path from one point to another, then to a third point, with positions at (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), then describe this path in a special way.", "source": "original", "new_id": 1322}
{"id": 238, "function": "ST_GeomFromEWKT", "question": "把这个带有一些数字的字符串变成一个包含三段小线条的图形，数字是-71.160281 42.258729，-71.160837 42.259113，-71.161144 42.25932。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["0105000020AD10000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn this string with some numbers into a shape with three little line segments, the numbers being -71.160281 42.258729, -71.160837 42.259113, -71.161144 42.25932.", "source": "original", "new_id": 1321}
{"id": 238, "function": "ST_GeomFromEWKT", "question": "把那个包含三段坐标线的描述转成一种可以用来画图的东西，记得那些数值是-71.160281 42.258729, -71.160837 42.259113, -71.161144 42.25932，别忘了它们的标识是4269。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["0105000020AD10000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that description with three lines of coordinates into something useful for drawing, remember the numbers are -71.160281 42.258729, -71.160837 42.259113, -71.161144 42.25932, and don't forget their identifier is 4269.", "source": "original", "new_id": 1323}
{"id": 238, "function": "ST_GeomFromEWKT", "question": "能不能用一种特别的方式来描述一串连着的线，这些线由三个小点组成：(-71.160281 42.258729)、(-71.160837 42.259113)、(-71.161144 42.25932)，而且那个号码是4269？", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["0105000020AD10000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you describe in a special way a series of connected lines made up of three little dots: (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932), and that number is 4269?", "source": "original", "new_id": 1325}
{"id": 238, "function": "ST_GeomFromEWKT", "question": "把那串包含三个小点的多线数据，用某种方式变成系统能理解的几何样子，并带上4269这个数字。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["0105000020AD10000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that multiline data with three little dots into a shape the system can understand, and include the number 4269.", "source": "original", "new_id": 1324}
{"id": 239, "function": "ST_GeomFromEWKT", "question": "用那个编号为4269的系统，把这些坐标做成一个点，坐标是(-71.064544, 42.28787)。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POINT(-71.064544 42.28787)');", "execution_result": [["0101000020AD100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Using that system numbered 4269, create a point with these coordinates, which are (-71.064544, 42.28787).", "source": "original", "new_id": 1326}
{"id": 239, "function": "ST_GeomFromEWKT", "question": "看看那个包含数字-71.064544和42.28787的点，转换成那种带有4269编号的形状是什么样的？", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POINT(-71.064544 42.28787)');", "execution_result": [["0101000020AD100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What does the shape look like when you convert that point with numbers -71.064544 and 42.28787 into something with the number 4269?", "source": "original", "new_id": 1329}
{"id": 239, "function": "ST_GeomFromEWKT", "question": "把那个有数字-71.064544和42.28787的点变成一种能用的形状，记得用4269来做这件事。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POINT(-71.064544 42.28787)');", "execution_result": [["0101000020AD100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that point with numbers -71.064544 and 42.28787 into some usable shape, and remember to use 4269 for this.", "source": "original", "new_id": 1327}
{"id": 239, "function": "ST_GeomFromEWKT", "question": "给我一个特别的字符串，它用一种方式描述了一个点，坐标是(-71.064544 42.28787)，而且这个点在某个神秘编号4269的系统里。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POINT(-71.064544 42.28787)');", "execution_result": [["0101000020AD100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a special string that describes a point, with coordinates (-71.064544 42.28787), and this point is in a mysterious system numbered 4269.", "source": "original", "new_id": 1328}
{"id": 239, "function": "ST_GeomFromEWKT", "question": "能不能给我一个带有数字4269和位置(-71.064544, 42.28787)的几何小点？", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POINT(-71.064544 42.28787)');", "execution_result": [["0101000020AD100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you give me a little geometric dot with the number 4269 and the location (-71.064544, 42.28787)?", "source": "original", "new_id": 1330}
{"id": 237, "function": "ST_GeomFromEWKT", "question": "你能帮我找一个有特殊编号的多边形集合吗？它里面有两个形状，第一个形状有40个点，像这样：(-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,...)，第二个形状只有5个点，像这样：(-71.1043632495873 42.315113108546, -71.1043583974082 42.3151211109857,...)", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))');", "execution_result": [["0106000020AD1000000200000001030000000100000028000000D0EA37A29AC651C00FD603035B284540FEFCFB379AC651C0C0503E9F5B284540FFDDDD4D96C651C033AC3B284F2845402C7C643E8CC651C027D4465F58284540B03124FF85C651C0A206D8594928454017901C728FC651C08A98CCA040284540B76E11DD93C651C063FAF49536284540258F3B6B99C651C041CFB5203A284540DB5AB4A09BC651C02189C9F731284540055BD8789CC651C0D6A3DE703228454009A89E449DC651C0790A5D7F2F2845400DD1430B9EC651C0651AB8AB2C284540D24AF36DAAC651C0451369EE3428454041DB9A3FAAC651C00AD1F63636284540AABAC10BAAC651C097B3F71438284540EEA5F4E1A9C651C0BEBE83FA39284540599A39C2A9C651C00C8C21E03B2845401BA199B1A9C651C03CFDD9C53D28454038B50BABA9C651C01231A4AB3F2845408AD88FAEA9C651C08D27809141284540DF0C26BCA9C651C0A0E06D7743284540955CD7D8A9C651C0B13D765D452845408BC19AFFA9C651C0F75C9043472845400C397630AAC651C07FD7422249284540EB5BC961AAC651C0204B796B4A28454016701F8EAAC651C04B0FB4A54B28454000417D0EACC651C04E95A723562845403648F5DBA9C651C009A7D75754284540FD1F4F43A9C651C0D77C0C53562845404B7C9CA7A8C651C0C454E9D255284540DEBC3841A8C651C0A88C5CEC57284540F633B6DCA5C651C034C39CA855284540AAF53664A5C651C0DA78AA37552845407C64FD2CA5C651C09DE8F60255284540128F4CAAA3C651C0F8E06CB753284540A5B22E7AA0C651C03263DA775A284540BA48C02E9DC651C0B8FF45525728454079679AC79BC651C02B3B005B59284540882CEC349BC651C04658452B5A284540D0EA37A29AC651C00FD603035B284540010300000001000000050000006EF831E3ADC651C07CDF57A05528454099FBD7CEADC651C03CFB78E355284540E538D293ADC651C0F3699A22542845408FF3B73EAEC651C0E261F284542845406EF831E3ADC651C07CDF57A055284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you help me find a special numbered collection of shapes? It contains two forms, the first one has 40 dots, like this: (-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,...), and the second shape has only 5 points, like this: (-71.1043632495873 42.315113108546, -71.1043583974082 42.3151211109857,...)", "source": "original", "new_id": 1319}
{"id": 239, "function": "ST_GeomFromEWKT", "question": "给我看看那个在4269里头，坐标是(-71.064544 42.28787)的小点，用某种特别的格式写出来。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POINT(-71.064544 42.28787)');", "execution_result": [["0101000020AD100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me that little point at coordinates (-71.064544 42.28787) within 4269, written in some special format.", "source": "original", "new_id": 1331}
{"id": 241, "function": "ST_GeomFromEWKT", "question": "把这串特别字符串'CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'变成一个可以用的形状，包含那些有趣的点。", "sql": "SELECT ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)');", "execution_result": [["0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn this special string 'CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)' into a usable shape, covering those interesting points.", "source": "original", "new_id": 1339}
{"id": 241, "function": "ST_GeomFromEWKT", "question": "想象一下，有三个坐标点：220268 150415 1、220227 150505 2和220227 150406 3，它们组成了一条弯曲的线路，能否表示出这个整体的形状呢？", "sql": "SELECT ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)');", "execution_result": [["0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine three coordinate points: 220268 150415 1, 220227 150505 2, and 220227 150406 3, forming a curved line. Could you represent the overall shape of it?", "source": "original", "new_id": 1338}
{"id": 241, "function": "ST_GeomFromEWKT", "question": "把那个由三个3D坐标点220268 150415 1, 220227 150505 2, 和220227 150406 3组成的圆弧形状的东西弄出来。", "sql": "SELECT ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)');", "execution_result": [["0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Get that shape thing made of a circular arc with the three 3D points 220268 150415 1, 220227 150505 2, and 220227 150406 3.", "source": "original", "new_id": 1341}
{"id": 240, "function": "ST_GeomFromEWKT", "question": "把那个写成一长串数字的形状变成一种能被识别的几何体，里面有6个小面，每个面都有点坐标，比如第一个面是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，其他的也有类似的数字组合。", "sql": "SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change that shape with a long list of numbers into a recognizable geometry, containing 6 small faces, each with point coordinates like the first face is (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), and others have similar number combinations.", "source": "original", "new_id": 1335}
{"id": 241, "function": "ST_GeomFromEWKT", "question": "能不能把'CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'这样的描述变成一个表示圆弧的东西，包含三个位置为220268 150415 1、220227 150505 2和220227 150406 3的小点？", "sql": "SELECT ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)');", "execution_result": [["0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you turn something like 'CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)' into something that represents a circular arc, with three spots being 220268 150415 1, 220227 150505 2, and 220227 150406 3?", "source": "original", "new_id": 1340}
{"id": 242, "function": "ST_GeomFromEWKT", "question": "用那些数字做一个形状，都是在NAD83系统里，像个封闭的路径，五个点连起来的样子。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["0103000020AD10000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make a shape with those numbers, all in the NAD83 system, like a closed path, connecting five points together.", "source": "original", "new_id": 1345}
{"id": 241, "function": "ST_GeomFromEWKT", "question": "能不能说出一个用三个小点组成的弯曲的三维形状呢？这些小点是220268 150415 1，220227 150505 2，还有220227 150406 3。", "sql": "SELECT ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)');", "execution_result": [["0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you tell me about a curved three-dimensional shape made of three little dots? These dots are 220268 150415 1, 220227 150505 2, and 220227 150406 3.", "source": "original", "new_id": 1342}
{"id": 240, "function": "ST_GeomFromEWKT", "question": "想象一个由六个小平面组成的复杂立体，每个平面都有特定的点，比如第一个平面有点(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，其他平面也有类似的点。用一种可以表达这些点的格式来描述这个立体吧。", "sql": "SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a complex solid made up of six small surfaces, each with specific points, like the first surface having points (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), and other surfaces having similar points. Describe this solid using a format that can express these points.", "source": "original", "new_id": 1336}
{"id": 240, "function": "ST_GeomFromEWKT", "question": "想象一个由六块小平面拼成的三维形状，具体来说，每块小平面有它自己的坐标：第一个是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个是(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个是(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个是(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个是(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个是(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。", "sql": "SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a 3D shape made up of six little flat surfaces, each with its own coordinates: the first one is (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second is (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third is (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth is (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth is (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth is (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1334}
{"id": 241, "function": "ST_GeomFromEWKT", "question": "给我看看由三个特别点构成的弯曲线，那些点是220268 150415 1、220227 150505 2和220227 150406 3，用那些奇怪的格式来表示。", "sql": "SELECT ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)');", "execution_result": [["0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the curved line made from three special points, which are 220268 150415 1, 220227 150505 2, and 220227 150406 3, using that unusual format.", "source": "original", "new_id": 1343}
{"id": 240, "function": "ST_GeomFromEWKT", "question": "想象一个立体的形状，它由六个面组成，分别用这些点连起来：第一个面是(0 0 0), (0 0 1), (0 1 1), (0 1 0), (0 0 0)；第二个面是(0 0 0), (0 1 0), (1 1 0), (1 0 0), (0 0 0)；第三个面是(0 0 0), (1 0 0), (1 0 1), (0 0 1), (0 0 0)；第四个面是(1 1 0), (1 1 1), (1 0 1), (1 0 0), (1 1 0)；第五个面是(0 1 0), (0 1 1), (1 1 1), (1 1 0), (0 1 0)；第六个面是(0 0 1), (1 0 1), (1 1 1), (0 1 1), (0 0 1)。", "sql": "SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a 3D shape made of six surfaces, each linked by these dots: the first surface is (0 0 0), (0 0 1), (0 1 1), (0 1 0), (0 0 0); the second surface is (0 0 0), (0 1 0), (1 1 0), (1 0 0), (0 0 0); the third surface is (0 0 0), (1 0 0), (1 0 1), (0 0 1), (0 0 0); the fourth surface is (1 1 0), (1 1 1), (1 0 1), (1 0 0), (1 1 0); the fifth surface is (0 1 0), (0 1 1), (1 1 1), (1 1 0), (0 1 0); the sixth surface is (0 0 1), (1 0 1), (1 1 1), (0 1 1), (0 0 1).", "source": "original", "new_id": 1333}
{"id": 242, "function": "ST_GeomFromEWKT", "question": "用这些坐标点(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)再回到第一个点，画出一个封闭的形状，听说它的编号是4269。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["0103000020AD10000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "With these little dots (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and back to the first one, draw a closed shape, I heard its number is 4269.", "source": "original", "new_id": 1344}
{"id": 240, "function": "ST_GeomFromEWKT", "question": "把由6个小平面组成的多面体表面转成一种能用的形状，第一个小面的点是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个小面的点是(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，第三个小面的点是(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，第四个小面的点是(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，第五个小面的点是(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，第六个小面的点是(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。", "sql": "SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the polyhedral surface made of 6 small faces into a usable shape. The first little face has points (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second one has (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), the third has (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), the fourth has (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), the fifth has (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the sixth has (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1337}
{"id": 240, "function": "ST_GeomFromEWKT", "question": "把那些立体形状变成可以用的几何物件，它有六个面，像是第一个有这些点：0 0 0到0 0 1再到0 1 1，继续到0 1 0然后又回到0 0 0。第二个面从0 0 0到0 1 0，接着是1 1 0，再到1 0 0，最后回到0 0 0。第三个是从0 0 0到1 0 0然后到1 0 1，再到0 0 1，然后又回到0 0 0。第四个面从1 1 0到1 1 1再到1 0 1，接着到1 0 0最后回到1 1 0。第五个从0 1 0到0 1 1然后到1 1 1，接着到1 1 0最后回到0 1 0。最后一个面从0 0 1到1 0 1再到1 1 1，继续到0 1 1然后回到0 0 1。", "sql": "SELECT ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those 3D shapes into usable geometry things. It has six sides, like the first one with these points: 0 0 0 to 0 0 1 then to 0 1 1, continuing to 0 1 0 and back to 0 0 0. The second side goes from 0 0 0 to 0 1 0, then 1 1 0, then to 1 0 0, and finally back to 0 0 0. The third goes from 0 0 0 to 1 0 0 then to 1 0 1, then to 0 0 1, and back to 0 0 0. The fourth side goes from 1 1 0 to 1 1 1 then to 1 0 1, then to 1 0 0 and finally back to 1 1 0. The fifth goes from 0 1 0 to 0 1 1 then to 1 1 1, then to 1 1 0 and finally back to 0 1 0. The last side goes from 0 0 1 to 1 0 1 then to 1 1 1, continuing to 0 1 1 and back to 0 0 1.", "source": "original", "new_id": 1332}
{"id": 242, "function": "ST_GeomFromEWKT", "question": "请展示一个由这些坐标点围成的形状：(-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), 再回到起点(-71.1776585052917 42.3902909739571)，并且用某种编号标记。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["0103000020AD10000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show a shape formed by these coordinate points: (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and back to the start (-71.1776585052917 42.3902909739571), marked with some kind of number?", "source": "original", "new_id": 1347}
{"id": 242, "function": "ST_GeomFromEWKT", "question": "想要一个形状，它有五个特别的点，像这样：(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)，然后回到最开始的地方。这个形状还需要符合一个编号为4269的系统。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["0103000020AD10000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can we have a shape with five special spots, like this: (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and then back to the starting place? This shape also needs to fit into a system numbered 4269.", "source": "original", "new_id": 1346}
{"id": 242, "function": "ST_GeomFromEWKT", "question": "有个形状像五边形的小图形，上面标了几个点，坐标是(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)和最后一个跟第一个一样。你能给我这个图形的文字描述吗？", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["0103000020AD10000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a shape like a pentagon, marked with some points, with coordinates (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and the last one is the same as the first. Can you give me a text description of this shape?", "source": "original", "new_id": 1349}
{"id": 244, "function": "ST_GeomFromMARC21", "question": "把编号为84696781的那个记录变成一个可以描述形状的格式，范围是东边从E0130600到E0133100，经纬度从北边N0523900到南边N0522300，比例尺是1:50000。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'));", "execution_result": [["POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the record with the number 84696781 into a format that describes shapes, with the area stretching east from E0130600 to E0133100, and latitude from north N0523900 to south N0522300, at a scale of 1:50000.", "source": "original", "new_id": 1356}
{"id": 244, "function": "ST_GeomFromMARC21", "question": "有个记录，里面有些边界信息，比如东边到E0130600，西边到E0133100，北边是N0523900，南边是N0522300。你能把它变成一个描述形状的文字吗？", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'));", "execution_result": [["POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a record with some boundary details, like east reaching E0130600, west reaching E0133100, north at N0523900, and south at N0522300. Can you turn it into a shape description in words?", "source": "original", "new_id": 1355}
{"id": 243, "function": "ST_GeomFromMARC21", "question": "想象一下有一些坐标信息在一个奇怪的XML记录里，里面有两个034字段，先不管那些复杂的名字，第一个有些像是E0130600到E0133100这样的东西，第二个则是W004.500000到N054.250000这样的数字，能不能把这些信息变成一个简单的WKT文本？", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine some coordinate-like details in a peculiar XML record, with two 034 fields. Without worrying about those complex names, the first one has something like E0130600 to E0133100, and the second one has numbers like W004.500000 to N054.250000. Can you turn all this into a simple WKT text?", "source": "original", "new_id": 1353}
{"id": 242, "function": "ST_GeomFromEWKT", "question": "给我一个由五个小点围成的形状的描述，这些点分别是(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)和(-71.1776585052917 42.3902909739571)，并且记得提到4269这个数字。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["0103000020AD10000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a description of a shape made by five little dots, which are (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571), and remember to mention the number 4269.", "source": "original", "new_id": 1348}
{"id": 243, "function": "ST_GeomFromMARC21", "question": "把一种特别的格式记录变成一种描述形状的字符串，其中有两个不同的小标签，第一个有个特别的数字1，里面有些神秘的坐标，比如东边的E0130600和E0133100，还有北边的N0523900和N0522300。另一个标签就比较简单，没有特别数字，只有一些西边和北边的值，像是W004.500000和N054.250000之类的。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform a special format record into a shape-describing string, where there are two different little tags. The first one has a special number 1 and contains some mysterious coordinates like east values E0130600 and E0133100, and north values N0523900 and N0522300. The other tag is simpler, without a special number, just some west and north values, like W004.500000 and N054.250000.", "source": "original", "new_id": 1350}
{"id": 243, "function": "ST_GeomFromMARC21", "question": "从包含两个034字段的MARC21记录中弄出一个可以看懂的几何图形，第一个字段有个数字1和一些小标记，像是a是a，b是50000，d是E0130600，e是E0133100，f是N0523900，g是N0522300。第二个字段就比较简单，都是些W和N开头的数字。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make sense of the geometric shape from MARC21 records with two 034 fields. The first field has a number 1 and some little markers, like a is a, b is 50000, d is E0130600, e is E0133100, f is N0523900, g is N0522300. The second field is simpler, with numbers starting with W and N.", "source": "original", "new_id": 1352}
{"id": 244, "function": "ST_GeomFromMARC21", "question": "把一个有特定编号和边界数字的地理记录变成一种可以看的文本格式，看看那些东经和北纬的数字怎么拼成一个整体。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'));", "execution_result": [["POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn a geographic record with specific numbers and boundaries into a viewable text format, and see how those east and north numbers fit together as a whole.", "source": "original", "new_id": 1357}
{"id": 243, "function": "ST_GeomFromMARC21", "question": "把那些含有034标签的MARC21数据做成图形，然后用一种文字样式来表达。第一个标签有点复杂，东边从13度06分到13度31分，北边是52度23分到52度39分，比例尺是50000。第二个就简单多了，只是一个坐标，西边4.5度，北边54.25度。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those MARC21 records with the 034 tag into shapes and express them in a kind of text style. The first tag is a bit complex, with the east ranging from 13 degrees 06 minutes to 13 degrees 31 minutes, and the north from 52 degrees 23 minutes to 52 degrees 39 minutes, with a scale of 50000. The second one is much simpler, just a single coordinate, west at 4.5 degrees, north at 54.25 degrees.", "source": "original", "new_id": 1351}
{"id": 243, "function": "ST_GeomFromMARC21", "question": "在那些记录里，有两个034字段，第一个的秘密代码是ind1=\"1\"，带着一些像a、50000这样的值，还有E0130600到E0133100和N0523900到N0522300的范围。另一个034字段比较神秘，ind1是空的，里面有W004.500000到W004.500000和N054.250000到N054.250000这种奇特的数值。你能把这些转成某种文本格式吗？", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In those records, there are two 034 fields, the first has a secret code ind1=\"1\", with values like a, 50000, and ranges from E0130600 to E0133100 and N0523900 to N0522300. The other 034 field is more mysterious, ind1 is blank, and it contains peculiar numbers like W004.500000 to W004.500000 and N054.250000 to N054.250000. Can you convert these into some kind of text format?", "source": "original", "new_id": 1354}
{"id": 244, "function": "ST_GeomFromMARC21", "question": "把那个有东边在E0130600和西边在E0133100的范围，北边到N0523900和南边到N0522300的坐标，变成一种能看懂的图形描述。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'));", "execution_result": [["POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those boundaries with east at E0130600, west at E0133100, north reaching N0523900, and south at N0522300, and turn them into a readable shape description.", "source": "original", "new_id": 1358}
{"id": 244, "function": "ST_GeomFromMARC21", "question": "从给出的MARC21格式的地理记录中，找出那些边界数字，然后看看它们代表的范围是什么样的。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'));", "execution_result": [["POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From the provided MARC21 format geographic record, find those boundary numbers and see what kind of area they represent.", "source": "original", "new_id": 1359}
{"id": 237, "function": "ST_GeomFromEWKT", "question": "输出一个SRID为4269的MULTIPOLYGON几何对象的WKT字符串，该对象包含两个多边形：第一个多边形由40个顶点组成（坐标依次为((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236))，第二个多边形坐标依次为((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546))。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of a MULTIPOLYGON geometry object with SRID 4269, containing two polygons: the first polygon consists of 40 vertices with coordinates ((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043, -71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397, -71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587, -71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902, -71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215, -71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557, -71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533, -71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241, -71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048, -71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017, -71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148, -71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446, -71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739, -71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917, -71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447, -71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995, -71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535, -71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313, -71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061, -71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)); the second polygon consists of 5 vertices with coordinates ((-71.1043632495873 42.315113108546, -71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829, -71.1043850704575 42.3150793250568, -71.1043632495873 42.315113108546)).", "source": "original", "new_id": 1317}
{"id": 245, "function": "ST_GeomFromMARC21", "question": "把这个记录里的那些经纬度从西边到东边是-4.500000度，从南边到北边是54.250000度，变成一个几何形状，然后以一种文本格式输出。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >00000nz a2200000nc 4500</leader> <controlfield tag=\"001\" >040277569</controlfield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["POINT(-4.5 54.25)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinates in the record, going from west to east at -4.500000 degrees and from south to north at 54.250000 degrees, into a geometric shape and then output it in a text format.", "source": "original", "new_id": 1361}
{"id": 244, "function": "ST_GeomFromMARC21", "question": "把一种特殊格式的地理信息变成一个形状后，能不能给出那个形状的文本形式？这个信息里有一些边界，比如东边是E0130600，西边是E0133100，北边是N0523900，南边是N0522300，还有一个比例是50000。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >01062cem a2200241 a 4500</leader> <controlfield tag=\"001\" > 84696781 </controlfield> <datafield tag=\"034\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\" >a</subfield> <subfield code=\"b\" >50000</subfield> <subfield code=\"d\" >E0130600</subfield> <subfield code=\"e\" >E0133100</subfield> <subfield code=\"f\" >N0523900</subfield> <subfield code=\"g\" >N0522300</subfield> </datafield> </record >'));", "execution_result": [["POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you transform some special format geographic info into a shape and then provide the text version of that shape? This info includes some boundaries, like east at E0130600, west at E0133100, north at N0523900, and south at N0522300, with a scale of 50000.", "source": "original", "new_id": 1360}
{"id": 237, "function": "ST_GeomFromEWKT", "question": "使用ST_GeomFromEWKT函数创建一个SRID为4269的多边形集合，该集合包含两个多边形：第一个多边形由42个顶点组成，坐标依次为((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236))；第二个多边形坐标依次为((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546))。", "sql": "SELECT ST_GeomFromEWKT('SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the EWKT string representation of a MULTIPOLYGON geometry object with SRID 4269, containing two polygons: the first polygon consists of 40 vertices with coordinates ((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043, -71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397, -71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587, -71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902, -71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215, -71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557, -71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533, -71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241, -71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048, -71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017, -71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148, -71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446, -71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739, -71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917, -71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447, -71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995, -71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535, -71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313, -71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061, -71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)); the second polygon consists of 5 vertices with coordinates ((-71.1043632495873 42.315113108546, -71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829, -71.1043850704575 42.3150793250568, -71.1043632495873 42.315113108546)).", "source": "original", "new_id": 1316}
{"id": 245, "function": "ST_GeomFromMARC21", "question": "把那些西经4.500000度到4.500000度，北纬54.250000度到54.250000度的坐标，变成某种形状，然后告诉我它长什么样子。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >00000nz a2200000nc 4500</leader> <controlfield tag=\"001\" >040277569</controlfield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["POINT(-4.5 54.25)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those coordinates from longitude -4.500000° to -4.500000° and latitude 54.250000° to 54.250000°, turn them into some kind of shape, and then let me know what it looks like.", "source": "original", "new_id": 1366}
{"id": 245, "function": "ST_GeomFromMARC21", "question": "有些地理坐标记录是这样子的：西经4.500000度到西经4.500000度，北纬54.250000度到北纬54.250000度。能不能把它转成一个几何形状，然后用一种常见的格式描述出来？", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >00000nz a2200000nc 4500</leader> <controlfield tag=\"001\" >040277569</controlfield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["POINT(-4.5 54.25)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are some geographic coordinate records like this: longitude -4.500000° to -4.500000°, latitude 54.250000° to 54.250000°. Can you turn it into a geometric shape and describe it in a common format?", "source": "original", "new_id": 1363}
{"id": 245, "function": "ST_GeomFromMARC21", "question": "把这个MARC21格式的记录中包含的地理信息转换成一个形状，然后给我它的文本样子。记录里有-4.500000度到-4.500000度的经度，还有54.250000度到54.250000度的纬度。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >00000nz a2200000nc 4500</leader> <controlfield tag=\"001\" >040277569</controlfield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["POINT(-4.5 54.25)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the geographic details in this MARC21 format record into a shape, then show me how it looks in text. The record has longitude from -4.500000° to -4.500000° and latitude from 54.250000° to 54.250000°.", "source": "original", "new_id": 1362}
{"id": 245, "function": "ST_GeomFromMARC21", "question": "把那个坐标记录，像是W004.500000和N054.250000这些，变成一个可以看的形状，然后给我它的样子描述。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >00000nz a2200000nc 4500</leader> <controlfield tag=\"001\" >040277569</controlfield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["POINT(-4.5 54.25)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those coordinate records, like W004.500000 and N054.250000, and turn them into a viewable shape, then provide me with its descriptive appearance.", "source": "original", "new_id": 1364}
{"id": 245, "function": "ST_GeomFromMARC21", "question": "帮我把这个MARC21格式的记录里的地理信息，像是从经度-4.500000°到-4.500000°，纬度54.250000°到54.250000°，变成一个几何的样子，然后告诉我它的WKT模样。", "sql": "SELECT ST_AsText( ST_GeomFromMARC21(' <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader >00000nz a2200000nc 4500</leader> <controlfield tag=\"001\" >040277569</controlfield> <datafield tag=\"034\" ind1=\" \" ind2=\" \"> <subfield code=\"d\" >W004.500000</subfield> <subfield code=\"e\" >W004.500000</subfield> <subfield code=\"f\" >N054.250000</subfield> <subfield code=\"g\" >N054.250000</subfield> </datafield> </record >'));", "execution_result": [["POINT(-4.5 54.25)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Help me turn the geographic info from this MARC21 record, like from longitude -4.500000° to -4.500000° and latitude 54.250000° to 54.250000°, into a geometric shape, and then tell me its WKT appearance.", "source": "original", "new_id": 1365}
{"id": 246, "function": "ST_GeomFromText", "question": "用这些神秘的坐标点：(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)，画一个围成圈的形状吧。", "sql": "SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Using these mystical coordinates: (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), draw a shape that loops around.", "source": "original", "new_id": 1368}
{"id": 246, "function": "ST_GeomFromText", "question": "把那一串坐标做成一个封闭的形状，看看里面是什么样的几何图形。坐标是：(-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), (-71.1776585052917 42.3902909739571)。", "sql": "SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make a closed shape from this series of coordinates and see what kind of geometric figure it is. The coordinates are: (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1370}
{"id": 246, "function": "ST_GeomFromText", "question": "把那些坐标点串成一个闭合的形状，看看这个多边形几何是什么样的。点的位置是：(-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), 再回到起点(-71.1776585052917 42.3902909739571)。", "sql": "SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those coordinate points into a closed shape and see what this polygon geometry looks like. The points are located at: (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and back to the starting point (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1367}
{"id": 246, "function": "ST_GeomFromText", "question": "想象一个由这些坐标点组成的形状：(-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531)，然后再回到起点。请给出这个形状的内部形式。", "sql": "SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a shape made by these coordinate points: (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and then returning to the starting point. Please provide the internal form of this shape.", "source": "original", "new_id": 1371}
{"id": 246, "function": "ST_GeomFromText", "question": "给我一个由这些点围起来的形状：(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)和回到起点(-71.1776585052917 42.3902909739571)。", "sql": "SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a shape enclosed by these points: (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and back to the starting point (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1372}
{"id": 247, "function": "ST_GeomFromText", "question": "你能把这些点(-71.160281 42.258729)、(-71.160837 42.259113)、和(-71.161144 42.25932)连成一串线，然后给出它的形状吗？", "sql": "SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["010500000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you connect these points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932) into a string of lines, and then show its shape?", "source": "original", "new_id": 1373}
{"id": 246, "function": "ST_GeomFromText", "question": "把那个有五个点的形状弄出来，它们的坐标是：(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)、(-71.1776585052917 42.3902909739571)。", "sql": "SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Get that shape made of five points, with coordinates: (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), (-71.1776585052917 42.3902909739571).", "source": "original", "new_id": 1369}
{"id": 247, "function": "ST_GeomFromText", "question": "有三个位置点，分别是(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)，想象一下它们连起来的样子，会是一个什么样的形状呢？", "sql": "SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["010500000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine three location points: (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932). What kind of shape would they form if connected?", "source": "original", "new_id": 1374}
{"id": 247, "function": "ST_GeomFromText", "question": "把三个地方的小点连接成一条线，坐标是：第一个点在经度-71.160281和纬度42.258729，第二个点在经度-71.160837和纬度42.259113，第三个点在经度-71.161144和纬度42.25932。", "sql": "SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["010500000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect three little dots into a line, with coordinates: the first dot is at longitude -71.160281 and latitude 42.258729, the second dot is at longitude -71.160837 and latitude 42.259113, the third dot is at longitude -71.161144 and latitude 42.25932.", "source": "original", "new_id": 1375}
{"id": 248, "function": "ST_GeomFromText", "question": "把那些坐标点220268 150415, 220227 150505, 220227 150406组成的弧线，变成一个图形吧。", "sql": "SELECT ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)');", "execution_result": [["0108000000030000000000000060E30A4100000000785C02410000000018E20A4100000000485F02410000000018E20A4100000000305C0241"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinate points 220268 150415, 220227 150505, 220227 150406 into a shape that forms an arc.", "source": "original", "new_id": 1379}
{"id": 247, "function": "ST_GeomFromText", "question": "能不能给我看看那些坐标点啊？就是(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)连成的一种线条的样子。", "sql": "SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["010500000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show me what those coordinates look like? You know, the ones like (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932) connected as some kind of line.", "source": "original", "new_id": 1376}
{"id": 248, "function": "ST_GeomFromText", "question": "有三个坐标点，220268和150415，220227和150505，还有220227和150406，用这些点画个弯曲的线条吧。", "sql": "SELECT ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)');", "execution_result": [["0108000000030000000000000060E30A4100000000785C02410000000018E20A4100000000485F02410000000018E20A4100000000305C0241"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are three points, 220268 and 150415, 220227 and 150505, and 220227 and 150406, use these to draw a curved line.", "source": "original", "new_id": 1380}
{"id": 247, "function": "ST_GeomFromText", "question": "给我看看由这些点组成的线条的样子：(-71.160281 42.258729)、(-71.160837 42.259113)、(-71.161144 42.25932)。", "sql": "SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["010500000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what the line made by these points looks like: (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932).", "source": "original", "new_id": 1378}
{"id": 248, "function": "ST_GeomFromText", "question": "有个弯曲的线条，它是由三个点形成的，点的位置分别是220268 150415、220227 150505和220227 150406，你能找出这个线条的几何形状吗？", "sql": "SELECT ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)');", "execution_result": [["0108000000030000000000000060E30A4100000000785C02410000000018E20A4100000000485F02410000000018E20A4100000000305C0241"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a curvy line made up of three points located at 220268 150415, 220227 150505, and 220227 150406. Can you figure out the shape of this line?", "source": "original", "new_id": 1381}
{"id": 248, "function": "ST_GeomFromText", "question": "把那些点220268 150415, 220227 150505, 220227 150406围起来，看看它们形成的弧线是什么样的形状。", "sql": "SELECT ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)');", "execution_result": [["0108000000030000000000000060E30A4100000000785C02410000000018E20A4100000000485F02410000000018E20A4100000000305C0241"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Wrap those points 220268 150415, 220227 150505, and 220227 150406 together and see what kind of arc shape they form.", "source": "original", "new_id": 1382}
{"id": 247, "function": "ST_GeomFromText", "question": "在脑海中想象一下由这些点(-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932)连成的线，然后把它变成那种可以被系统理解的样子。", "sql": "SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');", "execution_result": [["010500000001000000010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine in your mind a line formed by these points (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932), and turn it into something that the system can understand.", "source": "original", "new_id": 1377}
{"id": 248, "function": "ST_GeomFromText", "question": "根据三个点220268 150415、220227 150505和220227 150406，找出它们一起形成的那个弯曲的线条是什么样的。", "sql": "SELECT ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)');", "execution_result": [["0108000000030000000000000060E30A4100000000785C02410000000018E20A4100000000485F02410000000018E20A4100000000305C0241"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Based on the three points 220268 150415, 220227 150505, and 220227 150406, find out what the curved line they form together looks like.", "source": "original", "new_id": 1384}
{"id": 248, "function": "ST_GeomFromText", "question": "能不能把那三个点220268 150415, 220227 150505, 220227 150406画成一个圆弧，然后用某种内部格式表示出来？", "sql": "SELECT ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)');", "execution_result": [["0108000000030000000000000060E30A4100000000785C02410000000018E20A4100000000485F02410000000018E20A4100000000305C0241"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you draw an arc with those three points 220268 150415, 220227 150505, 220227 150406, and then express it in some kind of internal format?", "source": "original", "new_id": 1383}
{"id": 250, "function": "ST_GeomFromText", "question": "把这些坐标点(-71.160281 42.258729)，(-71.160837 42.259113)，(-71.161144 42.25932)弄成一个连起来的线，像那种地图上的线，用编号4269来处理。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn these coordinate points (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932) into a connected line, like those lines on maps, using the number 4269 to handle it.", "source": "original", "new_id": 1391}
{"id": 249, "function": "ST_GeomFromText", "question": "想象一下有两个小地块，一个有很多点组成，另一个有五个点，它们的坐标是这样的：(-71.1031880899493 42.3152774590236)...(-71.1043632495873 42.315113108546)，这些坐标都在一个特定的系统中。", "sql": "SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine there are two small plots, one made up of many points, and the other with five points, and their coordinates are like this: (-71.1031880899493 42.3152774590236)...(-71.1043632495873 42.315113108546), all within a specific system.", "source": "original", "new_id": 1386}
{"id": 249, "function": "ST_GeomFromText", "question": "把这些小多边形的坐标串连起来做成一个大多边形，坐标是(-71.1031880899493 42.3152774590236)等等，和(-71.1043632495873 42.315113108546)等等，然后用某种方式标记成4326。", "sql": "SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Link the coordinates of these little polygons into a big one, with points like (-71.1031880899493 42.3152774590236) and (-71.1043632495873 42.315113108546), then somehow tag it as 4326.", "source": "original", "new_id": 1385}
{"id": 251, "function": "ST_GeomFromText", "question": "把那些数字点，像-71.064544和42.28787，变成一个地图上的形状。", "sql": "SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those number dots, like -71.064544 and 42.28787, into a shape on the map.", "source": "original", "new_id": 1397}
{"id": 249, "function": "ST_GeomFromText", "question": "给我一种方式来处理由两个形状组成的地理数据，第一个形状的那些点是从(-71.1031880899493, 42.3152774590236)到(-71.103223066939, 42.3152517403219)，第二个形状从(-71.1043632495873, 42.315113108546)到(-71.1043850704575, 42.3150793250568)，并确保它们在某个常见的空间系统里。", "sql": "SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find a way to handle geographic data made of two shapes, with the first shape's points ranging from (-71.1031880899493, 42.3152774590236) to (-71.103223066939, 42.3152517403219), and the second shape from (-71.1043632495873, 42.315113108546) to (-71.1043850704575, 42.3150793250568), making sure they fit within a common spatial system.", "source": "original", "new_id": 1387}
{"id": 250, "function": "ST_GeomFromText", "question": "用这些小点(-71.160281 42.258729)、(-71.160837 42.259113)、(-71.161144 42.25932)画出一条连接它们的线，参照系是4269。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a line that connects these little dots (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932), using the reference system 4269.", "source": "original", "new_id": 1392}
{"id": 251, "function": "ST_GeomFromText", "question": "把那些坐标数字 -71.064544 和 42.28787 变成一个几何形状。", "sql": "SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinate numbers -71.064544 and 42.28787 into a geometry shape.", "source": "original", "new_id": 1400}
{"id": 249, "function": "ST_GeomFromText", "question": "能不能告诉我一个形状，它由两个不同的区域组成，第一部分有很多点，像是(-71.1031880899493 42.3152774590236)和(-71.1023097974109 42.3151969047397)，第二部分有些其他点，比如(-71.1043632495873 42.315113108546)？", "sql": "SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);", "execution_result": [["0106000020E61000000200000001030000000100000028000000D0EA37A29AC651C00FD603035B284540FEFCFB379AC651C0C0503E9F5B284540FFDDDD4D96C651C033AC3B284F2845402C7C643E8CC651C027D4465F58284540B03124FF85C651C0A206D8594928454017901C728FC651C08A98CCA040284540B76E11DD93C651C063FAF49536284540258F3B6B99C651C041CFB5203A284540DB5AB4A09BC651C02189C9F731284540055BD8789CC651C0D6A3DE703228454009A89E449DC651C0790A5D7F2F2845400DD1430B9EC651C0651AB8AB2C284540D24AF36DAAC651C0451369EE3428454041DB9A3FAAC651C00AD1F63636284540AABAC10BAAC651C097B3F71438284540EEA5F4E1A9C651C0BEBE83FA39284540599A39C2A9C651C00C8C21E03B2845401BA199B1A9C651C03CFDD9C53D28454038B50BABA9C651C01231A4AB3F2845408AD88FAEA9C651C08D27809141284540DF0C26BCA9C651C0A0E06D7743284540955CD7D8A9C651C0B13D765D452845408BC19AFFA9C651C0F75C9043472845400C397630AAC651C07FD7422249284540EB5BC961AAC651C0204B796B4A28454016701F8EAAC651C04B0FB4A54B28454000417D0EACC651C04E95A723562845403648F5DBA9C651C009A7D75754284540FD1F4F43A9C651C0D77C0C53562845404B7C9CA7A8C651C0C454E9D255284540DEBC3841A8C651C0A88C5CEC57284540F633B6DCA5C651C034C39CA855284540AAF53664A5C651C0DA78AA37552845407C64FD2CA5C651C09DE8F60255284540128F4CAAA3C651C0F8E06CB753284540A5B22E7AA0C651C03263DA775A284540BA48C02E9DC651C0B8FF45525728454079679AC79BC651C02B3B005B59284540882CEC349BC651C04658452B5A284540D0EA37A29AC651C00FD603035B284540010300000001000000050000006EF831E3ADC651C07CDF57A05528454099FBD7CEADC651C03CFB78E355284540E538D293ADC651C0F3699A22542845408FF3B73EAEC651C0E261F284542845406EF831E3ADC651C07CDF57A055284540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you tell me about a shape made up of two different areas? The first part has many points like (-71.1031880899493 42.3152774590236) and (-71.1023097974109 42.3151969047397), while the second part has other points, like (-71.1043632495873 42.315113108546)?", "source": "original", "new_id": 1388}
{"id": 250, "function": "ST_GeomFromText", "question": "有一个线状的东西，它经过三个地方：第一个地方是(-71.160281 42.258729)，接着是(-71.160837 42.259113)，最后到(-71.161144 42.25932)。用那个4269的系统去处理这件事。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a line-like thing passing through three spots: first at (-71.160281 42.258729), then (-71.160837 42.259113), and finally (-71.161144 42.25932). Use that 4269 system to handle this.", "source": "original", "new_id": 1393}
{"id": 250, "function": "ST_GeomFromText", "question": "能不能用一种简单的方式描述一下，那些像串起来的珍珠一样的点，坐标是(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)，记得用4269这个数字。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you describe in a simple way those points strung together like pearls, with coordinates (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932), remembering to use the number 4269?", "source": "original", "new_id": 1394}
{"id": 250, "function": "ST_GeomFromText", "question": "能不能给我一个由这些点组成的线条：(-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932)，并用编号4269的系统来表示？", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you give me a line made of these points: (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932), and use system number 4269 to represent it?", "source": "original", "new_id": 1395}
{"id": 251, "function": "ST_GeomFromText", "question": "把那个有两个数的小点，-71.064544和42.28787，变成大家都能用的地图上的样子。", "sql": "SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that little dot with two numbers, -71.064544 and 42.28787, into a form that everyone can use on a map.", "source": "original", "new_id": 1399}
{"id": 251, "function": "ST_GeomFromText", "question": "把那个写成'POINT(-71.064544 42.28787)'的点，变成一种可以用的形状，其中-71.064544是横着的，42.28787是竖着的。", "sql": "SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that thing written as 'POINT(-71.064544 42.28787)' into a usable shape, where -71.064544 is the sideways part and 42.28787 is the up-and-down part.", "source": "original", "new_id": 1398}
{"id": 251, "function": "ST_GeomFromText", "question": "给我看看那些数字变成的形状，像-71.064544和42.28787这样的点。", "sql": "SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the shape made from those numbers, like the point -71.064544 and 42.28787.", "source": "original", "new_id": 1401}
{"id": 250, "function": "ST_GeomFromText", "question": "能不能给我一个用那些坐标点 (-71.160281 42.258729)、(-71.160837 42.259113)、(-71.161144 42.25932)串成的线条的描述，用一种叫EPSG:4269的方式？", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);", "execution_result": [["0102000020AD10000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you give me a description of a line made from those coordinate points (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932), using something called EPSG:4269?", "source": "original", "new_id": 1396}
{"id": 251, "function": "ST_GeomFromText", "question": "给出一个小点的描述，这个点位于X是-71.064544，Y是42.28787的位置。", "sql": "SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide a description of a little dot located at where X is -71.064544 and Y is 42.28787.", "source": "original", "new_id": 1402}
{"id": 252, "function": "ST_GeomFromText", "question": "把这些坐标点(-71.160281 42.258729, -71.160837 42.259113, -71.161144 42.25932)弄成一个连起来的线的样子。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make these coordinate points (-71.160281 42.258729, -71.160837 42.259113, -71.161144 42.25932) into a connected line shape.", "source": "original", "new_id": 1403}
{"id": 249, "function": "ST_GeomFromText", "question": "假如有两个形状，一个大一点，一个小一点，它们的边界都是由点组成的。大形状的点从(-71.1031880899493 42.3152774590236)开始，然后是(-71.1031627617667 42.3152960829043)，还有其他点，最后回到起始点。小形状的点从(-71.1043632495873 42.315113108546)开始，绕一圈后回到起始点。给我它们的合并图形的文字版吧，记得用那个全球通用的坐标系统。", "sql": "SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine two shapes, one is bigger and the other smaller, both outlined by points. The bigger shape starts at (-71.1031880899493 42.3152774590236), followed by (-71.1031627617667 42.3152960829043), and other points, finally returning to the start. The smaller shape starts at (-71.1043632495873 42.315113108546), makes a loop, and returns to the start. Give me the combined shape's text version, using that globally recognized coordinate system.", "source": "original", "new_id": 1390}
{"id": 252, "function": "ST_GeomFromText", "question": "请展示由这些点(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)连起来的那种线条形状。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you show the kind of line shape that connects these dots: (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932)?", "source": "original", "new_id": 1406}
{"id": 252, "function": "ST_GeomFromText", "question": "想象一条由三颗小星星连成的线，它们的位置是：第一个在(-71.160281, 42.258729)，第二个在(-71.160837, 42.259113)，第三个在(-71.161144, 42.25932)。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a line made by connecting three little stars, with their positions at: the first at (-71.160281, 42.258729), the second at (-71.160837, 42.259113), and the third at (-71.161144, 42.25932).", "source": "original", "new_id": 1405}
{"id": 252, "function": "ST_GeomFromText", "question": "用这些点(-71.160281 42.258729)、(-71.160837 42.259113)、(-71.161144 42.25932)连成一条线，然后告诉我它的特殊描述方式。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect these dots (-71.160281 42.258729), (-71.160837 42.259113), (-71.161144 42.25932) into a line, and then tell me its special description format.", "source": "original", "new_id": 1404}
{"id": 252, "function": "ST_GeomFromText", "question": "给出由这些坐标点(-71.160281 42.258729)、(-71.160837 42.259113)和(-71.161144 42.25932)连成的路径的文本格式是什么？", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What is the text format of the path formed by connecting these points (-71.160281 42.258729), (-71.160837 42.259113), and (-71.161144 42.25932)?", "source": "original", "new_id": 1408}
{"id": 253, "function": "ST_LineFromText", "question": "把那条从(1 2)到(3 4)的小线变成一个叫aline的形状，还有看看从(1 2)的小点变成线时会发生什么，叫它null_return。", "sql": "SELECT ST_LineFromText('LINESTRING(1 2, 3 4)') AS aline, ST_LineFromText('POINT(1 2)') AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that little line from (1 2) to (3 4) into a shape called aline, and see what happens when a little dot at (1 2) tries to become a line, call it null_return.", "source": "original", "new_id": 1411}
{"id": 252, "function": "ST_GeomFromText", "question": "把这些坐标点组成的线，像是串起来的珠子，变成一种内部用的格式。", "sql": "SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');", "execution_result": [["010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn these coordinate points into a line, like beads on a string, into a format used internally.", "source": "original", "new_id": 1407}
{"id": 253, "function": "ST_LineFromText", "question": "把那些数字1 2, 3 4想象成一条线，然后看看1 2变成线时会怎样，结果可能是空的哦。", "sql": "SELECT ST_LineFromText('LINESTRING(1 2, 3 4)') AS aline, ST_LineFromText('POINT(1 2)') AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine those numbers 1 2, 3 4 as forming a line, and see what happens when 1 2 tries to become a line, the result might be empty.", "source": "original", "new_id": 1409}
{"id": 253, "function": "ST_LineFromText", "question": "看看能不能变成一条线状的东西，用这些数字：1 2到3 4。还有，如果你用1 2这些点试试，会发生什么呢？", "sql": "SELECT ST_LineFromText('LINESTRING(1 2, 3 4)') AS aline, ST_LineFromText('POINT(1 2)') AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if you can turn it into a line-like thing using these numbers: 1 2 to 3 4. Also, what happens if you try with just the points 1 2?", "source": "original", "new_id": 1412}
{"id": 254, "function": "ST_MLineFromText", "question": "把这个奇怪的文本'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))'变成一个由两条线组成的神秘形状。", "sql": "SELECT ST_MLineFromText('MULTILINESTRING((1 2, 3 4), (4 5, 6 7))');", "execution_result": [["010500000002000000010200000002000000000000000000F03F0000000000000040000000000000084000000000000010400102000000020000000000000000001040000000000000144000000000000018400000000000001C40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn this strange text 'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))' into a mysterious shape made of two lines.", "source": "original", "new_id": 1415}
{"id": 253, "function": "ST_LineFromText", "question": "展示如何把'LINESTRING(1 2, 3 4)'变成一条线的样子（叫做aline），以及当试图把'POINT(1 2)'变成线时会得到什么（叫做null_return）。", "sql": "SELECT ST_LineFromText('LINESTRING(1 2, 3 4)') AS aline, ST_LineFromText('POINT(1 2)') AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show how to turn 'LINESTRING(1 2, 3 4)' into a line shape (called aline), and what happens when trying to turn 'POINT(1 2)' into a line (called null_return).", "source": "original", "new_id": 1413}
{"id": 253, "function": "ST_LineFromText", "question": "把那些坐标变成一条连接的线，看看1 2和3 4之间会发生什么，然后试试仅用1 2的那个点去做同样的事，看看会有什么结果。", "sql": "SELECT ST_LineFromText('LINESTRING(1 2, 3 4)') AS aline, ST_LineFromText('POINT(1 2)') AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinates into a connecting line and see what happens between 1 2 and 3 4, then try to do the same with just the point 1 2 and see what result you get.", "source": "original", "new_id": 1410}
{"id": 253, "function": "ST_LineFromText", "question": "试着把那些坐标'LINESTRING(1 2, 3 4)'变成一个线条看看结果是什么（叫做aline），还有当你把'POINT(1 2)'弄成线条时会得到什么奇怪的东西（叫做null_return）。", "sql": "SELECT ST_LineFromText('LINESTRING(1 2, 3 4)') AS aline, ST_LineFromText('POINT(1 2)') AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Try to turn those coordinates 'LINESTRING(1 2, 3 4)' into a line and see what the result is (called aline), and what strange thing you get when you try to make 'POINT(1 2)' into a line (called null_return).", "source": "original", "new_id": 1414}
{"id": 254, "function": "ST_MLineFromText", "question": "有一串数字像是坐标，像是连接了(1 2)到(3 4)和(4 5)到(6 7)的两条线，感觉它们组成了一个整体，能不能帮我看看是什么形状？", "sql": "SELECT ST_MLineFromText('MULTILINESTRING((1 2, 3 4), (4 5, 6 7))');", "execution_result": [["010500000002000000010200000002000000000000000000F03F0000000000000040000000000000084000000000000010400102000000020000000000000000001040000000000000144000000000000018400000000000001C40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a series of numbers that seem like coordinates, connecting (1 2) to (3 4) and (4 5) to (6 7) as two lines. It feels like they make up something together; can you help me see what shape it forms?", "source": "original", "new_id": 1416}
{"id": 254, "function": "ST_MLineFromText", "question": "把那个写成'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))'的文字，变成一个有两条小线段的形状，第一条从1 2到3 4，第二条从4 5到6 7。", "sql": "SELECT ST_MLineFromText('MULTILINESTRING((1 2, 3 4), (4 5, 6 7))');", "execution_result": [["010500000002000000010200000002000000000000000000F03F0000000000000040000000000000084000000000000010400102000000020000000000000000001040000000000000144000000000000018400000000000001C40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that text written as 'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))' and turn it into a shape with two little lines, the first going from 1 2 to 3 4, and the second from 4 5 to 6 7.", "source": "original", "new_id": 1417}
{"id": 254, "function": "ST_MLineFromText", "question": "把那些1和2, 3和4, 还有4和5, 6和7连起来的线条，变成一个几何形状，然后看看它是什么。", "sql": "SELECT ST_MLineFromText('MULTILINESTRING((1 2, 3 4), (4 5, 6 7))');", "execution_result": [["010500000002000000010200000002000000000000000000F03F0000000000000040000000000000084000000000000010400102000000020000000000000000001040000000000000144000000000000018400000000000001C40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those lines connecting 1 and 2, 3 and 4, and also 4 and 5, 6 and 7, turn them into a shape, and see what it is.", "source": "original", "new_id": 1418}
{"id": 254, "function": "ST_MLineFromText", "question": "有一个由点(1 2)到(3 4)和点(4 5)到(6 7)的小线段组成的形状，把它变成一个可以在地图上用的东西。", "sql": "SELECT ST_MLineFromText('MULTILINESTRING((1 2, 3 4), (4 5, 6 7))');", "execution_result": [["010500000002000000010200000002000000000000000000F03F0000000000000040000000000000084000000000000010400102000000020000000000000000001040000000000000144000000000000018400000000000001C40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a shape made of little lines from point (1 2) to (3 4) and from point (4 5) to (6 7), turn it into something usable on a map.", "source": "original", "new_id": 1419}
{"id": 255, "function": "ST_MPointFromText", "question": "用这些数字(-70.9590 42.1180)和(-70.9611 42.1223)来搞一个4326的多点形状是什么样的？", "sql": "SELECT ST_MPointFromText('MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))', 4326);", "execution_result": [["0104000020E61000000200000001010000004C37894160BD51C0C976BE9F1A0F45400101000000E10B93A982BD51C08126C286A70F4540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What does it look like when you make a shape with these numbers (-70.9590 42.1180) and (-70.9611 42.1223) and it has a 4326 thing?", "source": "original", "new_id": 1421}
{"id": 255, "function": "ST_MPointFromText", "question": "把那个描述两个小点的文字，坐标是那些经纬度数字，变成一个包含它们的形状，用4326的地图基准。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))', 4326);", "execution_result": [["0104000020E61000000200000001010000004C37894160BD51C0C976BE9F1A0F45400101000000E10B93A982BD51C08126C286A70F4540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform that text describing two little dots, with those latitude and longitude numbers, into a shape that includes them, using the 4326 map base.", "source": "original", "new_id": 1423}
{"id": 255, "function": "ST_MPointFromText", "question": "把那些有点像(-70.9590 42.1180)和(-70.9611 42.1223)的小点组合成一个整体，并用4326这种常用方式表示。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))', 4326);", "execution_result": [["0104000020E61000000200000001010000004C37894160BD51C0C976BE9F1A0F45400101000000E10B93A982BD51C08126C286A70F4540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Combine those little dots like (-70.9590 42.1180) and (-70.9611 42.1223) into a whole, using that common way of 4326.", "source": "original", "new_id": 1422}
{"id": 254, "function": "ST_MLineFromText", "question": "把那个写着'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))'的文字变成一个能在地图上用的多段线形状，想想它就像两条小路，第一条从(1, 2)到(3, 4)，第二条从(4, 5)到(6, 7)。", "sql": "SELECT ST_MLineFromText('MULTILINESTRING((1 2, 3 4), (4 5, 6 7))');", "execution_result": [["010500000002000000010200000002000000000000000000F03F0000000000000040000000000000084000000000000010400102000000020000000000000000001040000000000000144000000000000018400000000000001C40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the text 'MULTILINESTRING((1 2, 3 4), (4 5, 6 7))' into a shape you can use on a map, like two little paths, the first from (1, 2) to (3, 4) and the second from (4, 5) to (6, 7).", "source": "original", "new_id": 1420}
{"id": 255, "function": "ST_MPointFromText", "question": "把那些点在坐标(-70.9590 42.1180)和(-70.9611 42.1223)做成一个集合，参考系统用4326那个。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))', 4326);", "execution_result": [["0104000020E61000000200000001010000004C37894160BD51C0C976BE9F1A0F45400101000000E10B93A982BD51C08126C286A70F4540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make a collection of those dots at coordinates (-70.9590 42.1180) and (-70.9611 42.1223), using that 4326 reference system.", "source": "original", "new_id": 1425}
{"id": 255, "function": "ST_MPointFromText", "question": "把那两个地方的坐标，像是(-70.9590 42.1180)和(-70.9611 42.1223)，变成一个包含它们的小集合，放在一个常用的地球坐标框架里。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))', 4326);", "execution_result": [["0104000020E61000000200000001010000004C37894160BD51C0C976BE9F1A0F45400101000000E10B93A982BD51C08126C286A70F4540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those two spots with coordinates like (-70.9590 42.1180) and (-70.9611 42.1223), and make them into a small collection that fits in a common earth coordinate framework.", "source": "original", "new_id": 1424}
{"id": 255, "function": "ST_MPointFromText", "question": "把那些有点像小点的坐标，像(-70.9590 42.1180)和(-70.9611 42.1223)，转成一个特别格式，用那个4326的标识。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((-70.9590 42.1180),(-70.9611 42.1223))', 4326);", "execution_result": [["0104000020E61000000200000001010000004C37894160BD51C0C976BE9F1A0F45400101000000E10B93A982BD51C08126C286A70F4540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert those coordinates that are kind of like little dots, like (-70.9590 42.1180) and (-70.9611 42.1223), into a special format using that 4326 identifier.", "source": "original", "new_id": 1426}
{"id": 256, "function": "ST_MPointFromText", "question": "拿两个地方坐标，一个是1和2，另一个是3和4，把它们变成一个包含这些点的小集合。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((1 2),(3 4))');", "execution_result": [["0104000000020000000101000000000000000000F03F0000000000000040010100000000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take two sets of coordinates, one at 1 and 2, the other at 3 and 4, and turn them into a small collection containing these points.", "source": "original", "new_id": 1428}
{"id": 256, "function": "ST_MPointFromText", "question": "把写成'MULTIPOINT((1 2),(3 4))'的那些坐标变成一个包含两个小点的东西，一个在(1, 2)，另一个在(3, 4)。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((1 2),(3 4))');", "execution_result": [["0104000000020000000101000000000000000000F03F0000000000000040010100000000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinates written as 'MULTIPOINT((1 2),(3 4))' into something with two little points, one at (1, 2) and the other at (3, 4).", "source": "original", "new_id": 1429}
{"id": 256, "function": "ST_MPointFromText", "question": "给出那些坐标点的形状，像是由文本'MULTIPOINT((1 2),(3 4))'变成的两个小点的组合。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((1 2),(3 4))');", "execution_result": [["0104000000020000000101000000000000000000F03F0000000000000040010100000000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide the shape of those coordinates, like the combination of two little dots transformed from the text 'MULTIPOINT((1 2),(3 4))'.", "source": "original", "new_id": 1430}
{"id": 256, "function": "ST_MPointFromText", "question": "把那种有两个点的描述'((1 2),(3 4))'变成内部能用的格式，然后看看它是什么形状。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((1 2),(3 4))');", "execution_result": [["0104000000020000000101000000000000000000F03F0000000000000040010100000000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that description with two little points '((1 2),(3 4))' and turn it into a format that's usable inside, then see what shape it is.", "source": "original", "new_id": 1431}
{"id": 256, "function": "ST_MPointFromText", "question": "把'MULTIPOINT((1 2),(3 4))'变成一种能描述两个小点的几何东西，用一种特别的文本方式来表达出来。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((1 2),(3 4))');", "execution_result": [["0104000000020000000101000000000000000000F03F0000000000000040010100000000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn 'MULTIPOINT((1 2),(3 4))' into a geometric thing that describes two little dots, expressing it in a special text way.", "source": "original", "new_id": 1432}
{"id": 256, "function": "ST_MPointFromText", "question": "把那个有点像'MULTIPOINT((1 2),(3 4))'的文字变成一个包含(1 2)和(3 4)这些小点的形状。", "sql": "SELECT ST_MPointFromText('MULTIPOINT((1 2),(3 4))');", "execution_result": [["0104000000020000000101000000000000000000F03F0000000000000040010100000000000000000008400000000000001040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the text that looks like 'MULTIPOINT((1 2),(3 4))' into a shape that includes those little dots at (1 2) and (3 4).", "source": "original", "new_id": 1427}
{"id": 257, "function": "ST_MPolyFromText", "question": "把这些坐标串变成一个集合，这些坐标围成的形状在地图上是4326的。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn these coordinates into a collection, where the shape formed by them is 4326 on the map.", "source": "original", "new_id": 1435}
{"id": 257, "function": "ST_MPolyFromText", "question": "把那些坐标小点连成一个整体，从这些数字中得到一个完整的形状，记得它需要符合4326的标准。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Link those little coordinate dots to form a whole, deriving a complete shape from these numbers, remembering it needs to meet the 4326 standard.", "source": "original", "new_id": 1436}
{"id": 257, "function": "ST_MPolyFromText", "question": "给我看看那个由一堆坐标点围成的小圈圈形成的图形，坐标是那些像-70.916和42.1002这样的数字，还记得它们用的那个全球通用的定位系统吗？", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the shape formed by a bunch of coordinate points making a little loop, with coordinates like -70.916 and 42.1002. Do you remember that global standard positioning system they use?", "source": "original", "new_id": 1438}
{"id": 257, "function": "ST_MPolyFromText", "question": "有个多边形，它是由一大串坐标点组成的，像是(-70.916 42.1002)这样的点，还有很多其他点围成一个闭合的圈圈。用这些点和那个常用的地理系统4326，生成一个多边形吧。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a polygon made up of a long list of coordinate points, like (-70.916 42.1002), and many other points forming a closed loop. Use these points and that common geographic system 4326 to create a polygon.", "source": "original", "new_id": 1433}
{"id": 257, "function": "ST_MPolyFromText", "question": "如果你有一串坐标点，比如(-70.916 42.1002, -70.9468 42.0946, -70.9765 42.0872等等)，可以把它们连起来形成一个大形状，并用4326这种方式定位它。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you have a bunch of coordinates, like (-70.916 42.1002, -70.9468 42.0946, -70.9765 42.0872 and so on), you can connect them to form a big shape and use the 4326 method to locate it.", "source": "original", "new_id": 1434}
{"id": 258, "function": "ST_MPolyFromText", "question": "用那些数字做个三维的多面体，外面是(0 0 1,20 0 1,20 20 1,0 20 1,0 0 1)，里面有个小圈(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make a 3D shape with those numbers, with the outer part being (0 0 1,20 0 1,20 20 1,0 20 1,0 0 1) and a small loop inside (5 5 3,5 7 3,7 7 3,7 5 3,5 5 3).", "source": "original", "new_id": 1439}
{"id": 257, "function": "ST_MPolyFromText", "question": "给我一个由一连串坐标点包围的形状，里面有51个点，比如(-70.916 42.1002到-70.9315 42.1165)，你知道的，这些点都在一个大系统里，编号是4326。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273, -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me a shape surrounded by a series of coordinate points, containing 51 points like (-70.916 42.1002 to -70.9315 42.1165), you know, these points are all in a big system with the number 4326.", "source": "original", "new_id": 1437}
{"id": 249, "function": "ST_GeomFromText", "question": "输出由两个多边形组成的MULTIPOLYGON几何对象的WKT表示，其中第一个多边形的顶点坐标依次为(-71.1031880899493 42.3152774590236), (-71.1031627617667 42.3152960829043), (-71.102923838298 42.3149156848307), (-71.1023097974109 42.3151969047397), (-71.1019285062273 42.3147384934248), (-71.102505233663 42.3144722937587), (-71.10277487471 42.3141658254797), (-71.103113945163 42.3142739188902), (-71.10324876416 42.31402489987), (-71.1033002961013 42.3140393340215), (-71.1033488797549 42.3139495090772), (-71.103396240451 42.3138632439557), (-71.1041521907712 42.3141153348029), (-71.1041411411543 42.3141545014533), (-71.1041287795912 42.3142114839058), (-71.1041188134329 42.3142693656241), (-71.1041112482575 42.3143272556118), (-71.1041072845732 42.3143851580048), (-71.1041057218871 42.3144430686681), (-71.1041065602059 42.3145009876017), (-71.1041097995362 42.3145589148055), (-71.1041166403905 42.3146168544148), (-71.1041258822717 42.3146748022936), (-71.1041375307579 42.3147318674446), (-71.1041492906949 42.3147711126569), (-71.1041598612795 42.314808571739), (-71.1042515013869 42.3151287620809), (-71.1041173835118 42.3150739481917), (-71.1040809891419 42.3151344119048), (-71.1040438678912 42.3151191367447), (-71.1040194562988 42.3151832057859), (-71.1038734225584 42.3151140942995), (-71.1038446938243 42.3151006300338), (-71.1038315271889 42.315094347535), (-71.1037393329282 42.315054824985), (-71.1035447555574 42.3152608696313), (-71.1033436658644 42.3151648370544), (-71.1032580383161 42.3152269126061), (-71.103223066939 42.3152517403219), (-71.1031880899493 42.3152774590236)，第二个多边形的顶点坐标依次为(-71.1043632495873 42.315113108546), (-71.1043583974082 42.3151211109857), (-71.1043443253471 42.3150676015829), (-71.1043850704575 42.3150793250568), (-71.1043632495873 42.315113108546)，空间参考系为EPSG:4326。", "sql": "SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236, -71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307, -71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248, -71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797, -71.103113945163 42.3142739188902,-71.10324876416 42.31402489987, -71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772, -71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029, -71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058, -71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118, -71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681, -71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055, -71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936, -71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569, -71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809, -71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048, -71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859, -71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338, -71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985, -71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544, -71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219, -71.1031880899493 42.3152774590236)), ((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857, -71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the WKT representation of a MULTIPOLYGON geometry object composed of two polygons. The first polygon's vertex coordinates are (-71.1031880899493 42.3152774590236), (-71.1031627617667 42.3152960829043), (-71.102923838298 42.3149156848307), (-71.1023097974109 42.3151969047397), (-71.1019285062273 42.3147384934248), (-71.102505233663 42.3144722937587), (-71.10277487471 42.3141658254797), (-71.103113945163 42.3142739188902), (-71.10324876416 42.31402489987), (-71.1033002961013 42.3140393340215), (-71.1033488797549 42.3139495090772), (-71.103396240451 42.3138632439557), (-71.1041521907712 42.3141153348029), (-71.1041411411543 42.3141545014533), (-71.1041287795912 42.3142114839058), (-71.1041188134329 42.3142693656241), (-71.1041112482575 42.3143272556118), (-71.1041072845732 42.3143851580048), (-71.1041057218871 42.3144430686681), (-71.1041065602059 42.3145009876017), (-71.1041097995362 42.3145589148055), (-71.1041166403905 42.3146168544148), (-71.1041258822717 42.3146748022936), (-71.1041375307579 42.3147318674446), (-71.1041492906949 42.3147711126569), (-71.1041598612795 42.314808571739), (-71.1042515013869 42.3151287620809), (-71.1041173835118 42.3150739481917), (-71.1040809891419 42.3151344119048), (-71.1040438678912 42.3151191367447), (-71.1040194562988 42.3151832057859), (-71.1038734225584 42.3151140942995), (-71.1038446938243 42.3151006300338), (-71.1038315271889 42.315094347535), (-71.1037393329282 42.315054824985), (-71.1035447555574 42.3152608696313), (-71.1033436658644 42.3151648370544), (-71.1032580383161 42.3152269126061), (-71.103223066939 42.3152517403219), (-71.1031880899493 42.3152774590236). The second polygon's vertex coordinates are (-71.1043632495873 42.315113108546), (-71.1043583974082 42.3151211109857), (-71.1043443253471 42.3150676015829), (-71.1043850704575 42.3150793250568), (-71.1043632495873 42.315113108546). The spatial reference system is EPSG:4326.", "source": "original", "new_id": 1389}
{"id": 258, "function": "ST_MPolyFromText", "question": "想象一下一个立体图形，它有一个大的外壳，顶点是(0 0 1)到(20 0 1)到(20 20 1)到(0 20 1)，然后回到起点。里面有个小洞，顶点是(5 5 3)到(5 7 3)到(7 7 3)到(7 5 3)，然后回到起点。这个图形的每个顶点都有XYZ坐标。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a 3D shape with a big outer shell having corners at (0 0 1) to (20 0 1) to (20 20 1) to (0 20 1), and then back to the start. Inside, there's a small hole with corners at (5 5 3) to (5 7 3) to (7 7 3) to (7 5 3), and then back to the start. Each corner of this shape has XYZ coordinates.", "source": "original", "new_id": 1440}
{"id": 258, "function": "ST_MPolyFromText", "question": "把一串描述立体形状的小点坐标的文字变成一个能包含所有这些点的图形，这些点分两组，第一组是(0 0 1,20 0 1,20 20 1,0 20 1,0 0 1)，第二组是(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)，第三个数字分别是1和3。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform a string describing a shape with little dots into a figure that encompasses all these dots, where the dots are divided into two groups: the first group is (0 0 1,20 0 1,20 20 1,0 20 1,0 0 1), and the second group is (5 5 3,5 7 3,7 7 3,7 5 3,5 5 3), with the third number being 1 and 3 respectively.", "source": "original", "new_id": 1441}
{"id": 258, "function": "ST_MPolyFromText", "question": "给我看看那种由这些点(0 0 1,20 0 1,20 20 1,0 20 1,0 0 1)和那些点(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)形成的立体形状的完整样子。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the full shape made from these points (0 0 1,20 0 1,20 20 1,0 20 1,0 0 1) and those points (5 5 3,5 7 3,7 7 3,7 5 3,5 5 3) in a 3D form.", "source": "original", "new_id": 1442}
{"id": 259, "function": "ST_PointFromText", "question": "如何用经度-71.064544和纬度42.28787这两个小数字，在那个常用的坐标系统中，弄出一个代表位置的小点呢？", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)', 4326);", "execution_result": [["0101000020E6100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How can you use the tiny numbers -71.064544 for longitude and 42.28787 for latitude, in that common coordinate system, to create a small dot that represents a location?", "source": "original", "new_id": 1446}
{"id": 258, "function": "ST_MPolyFromText", "question": "把那种有高高低低的数字的外面和里面的形状，像(0 0 1→20 0 1→20 20 1→0 20 1)和(5 5 3→5 7 3→7 7 3→7 5 3)，变成一个复杂的几何图形，然后告诉我这个图形的所有点在哪里。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those shapes with ups and downs in numbers, like (0 0 1→20 0 1→20 20 1→0 20 1) and (5 5 3→5 7 3→7 7 3→7 5 3), turn them into a complex geometric figure, and tell me where all the points of this figure are.", "source": "original", "new_id": 1443}
{"id": 259, "function": "ST_PointFromText", "question": "怎么用那个带有坐标的文字'POINT(-71.064544 42.28787)'和某个编号为4326的系统弄出一个平面上的小点呀？", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)', 4326);", "execution_result": [["0101000020E6100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How do you use that text with coordinates 'POINT(-71.064544 42.28787)' and some system numbered 4326 to create a little dot on a plane?", "source": "original", "new_id": 1445}
{"id": 259, "function": "ST_PointFromText", "question": "怎么把那些数字-71.064544和42.28787变成一个有4326身份标识的空间小点呢？", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)', 4326);", "execution_result": [["0101000020E6100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How can those numbers -71.064544 and 42.28787 be turned into a little spatial point with the 4326 identity?", "source": "original", "new_id": 1447}
{"id": 258, "function": "ST_MPolyFromText", "question": "从那个特别的文本'MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))'中弄出一个多边形的形状，确保它把所有那些顶点坐标完整地展现出来。", "sql": "SELECT ST_MPolyFromText('MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From that special text 'MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))', create a polygon-like shape, ensuring it fully displays all those vertex coordinates.", "source": "original", "new_id": 1444}
{"id": 259, "function": "ST_PointFromText", "question": "把这些坐标'-71.064544 42.28787'变成一个与4326相关的小点，看看结果是什么。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)', 4326);", "execution_result": [["0101000020E6100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn these coordinates '-71.064544 42.28787' into a small dot related to 4326, and see what the result is.", "source": "original", "new_id": 1448}
{"id": 260, "function": "ST_PointFromText", "question": "用字串'POINT(-71.064544 42.28787)'弄出那个二维的小点，-71.064544和42.28787是它的横竖坐标。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Use the string 'POINT(-71.064544 42.28787)' to make that two-dimensional little dot, where -71.064544 and 42.28787 are its horizontal and vertical coordinates.", "source": "original", "new_id": 1451}
{"id": 259, "function": "ST_PointFromText", "question": "输出通过解析写着'POINT(-71.064544 42.28787)'字样的点，并用那个4326的编号系统来生成的那个点形状。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)', 4326);", "execution_result": [["0101000020E6100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output the shape made by reading 'POINT(-71.064544 42.28787)' and using that 4326 number system to create the point.", "source": "original", "new_id": 1450}
{"id": 260, "function": "ST_PointFromText", "question": "怎么从这种写法'POINT(-71.064544 42.28787)'弄出一个位置点呢？这个点的横坐标是-71.064544，竖坐标是42.28787。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How do you get a location point from writing it like 'POINT(-71.064544 42.28787)'? This point has a horizontal coordinate of -71.064544 and a vertical coordinate of 42.28787.", "source": "original", "new_id": 1452}
{"id": 259, "function": "ST_PointFromText", "question": "找一个包含经度-71.064544和纬度42.28787的小点，并把它变成计算机能读懂的神秘代码，记得用4326的数字来标记它的空间位置。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)', 4326);", "execution_result": [["0101000020E6100000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find a little dot with longitude -71.064544 and latitude 42.28787, and turn it into mysterious code that computers understand, using the number 4326 to mark its space location.", "source": "original", "new_id": 1449}
{"id": 260, "function": "ST_PointFromText", "question": "把那个写着'POINT(-71.064544 42.28787)'的文字描述，看看它变成了什么样的点，那个点就在经度-71.064544和纬度42.28787那里。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that description saying 'POINT(-71.064544 42.28787)', and see what kind of dot it turns into, the one right there at longitude -71.064544 and latitude 42.28787.", "source": "original", "new_id": 1454}
{"id": 260, "function": "ST_PointFromText", "question": "把这个'POINT(-71.064544 42.28787)'的文字描述变成一个地图上的点，那里的数字-71.064544和42.28787代表位置。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn this 'POINT(-71.064544 42.28787)' text description into a point on a map, where the numbers -71.064544 and 42.28787 indicate a location.", "source": "original", "new_id": 1453}
{"id": 260, "function": "ST_PointFromText", "question": "解析文本'POINT(-71.064544 42.28787)'，得到一个只带有横纵坐标的小点。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Interpret the text 'POINT(-71.064544 42.28787)' to get a small dot with only horizontal and vertical coordinates.", "source": "original", "new_id": 1456}
{"id": 260, "function": "ST_PointFromText", "question": "请展示一个由'POINT(-71.064544 42.28787)'这样的描述生成的小点，里面有-71.064544和42.28787这两个数字。", "sql": "SELECT ST_PointFromText('POINT(-71.064544 42.28787)');", "execution_result": [["0101000000CB49287D21C451C0F0BF95ECD8244540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please show a little dot created from something like 'POINT(-71.064544 42.28787)', containing the numbers -71.064544 and 42.28787.", "source": "original", "new_id": 1455}
{"id": 261, "function": "ST_PolygonFromText", "question": "用这样一些坐标来画一个闭合的形状，起点和终点都是-71.1776585052917 42.3902909739571，中间经过-71.1776820268866 42.3903701743239、-71.1776063012595 42.3903825660754、-71.1775826583081 42.3903033653531。", "sql": "SELECT ST_PolygonFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a closed shape with these coordinates, starting and ending at -71.1776585052917 42.3902909739571, passing through -71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754, and -71.1775826583081 42.3903033653531 in between.", "source": "original", "new_id": 1458}
{"id": 261, "function": "ST_PolygonFromText", "question": "用这些坐标点（-71.1776585052917 42.3902909739571、-71.1776820268866 42.3903701743239、-71.1776063012595 42.3903825660754、-71.1775826583081 42.3903033653531、-71.1776585052917 42.3902909739571）围成一个闭合的形状，然后告诉我它是怎样的样子。", "sql": "SELECT ST_PolygonFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Using these points (-71.1776585052917 42.3902909739571, -71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754, -71.1775826583081 42.3903033653531, -71.1776585052917 42.3902909739571), create a closed shape and then show me what it looks like.", "source": "original", "new_id": 1457}
{"id": 261, "function": "ST_PolygonFromText", "question": "给出这些坐标点：(-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531)，还有第一个点回到起点的情况，看看它们围成的图形在地图上是什么样的。", "sql": "SELECT ST_PolygonFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Given these coordinate spots: (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and returning to the first point, see what shape they form on the map.", "source": "original", "new_id": 1461}
{"id": 261, "function": "ST_PolygonFromText", "question": "把这些点连起来，像绕成一个圈：-71.1776585052917 42.3902909739571, -71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754, -71.1775826583081 42.3903033653531, 再回到起点-71.1776585052917 42.3902909739571，做成一个完整的形状。", "sql": "SELECT ST_PolygonFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect these points like making a loop: -71.1776585052917 42.3902909739571, -71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754, -71.1775826583081 42.3903033653531, and return to the start -71.1776585052917 42.3902909739571, forming a complete shape.", "source": "original", "new_id": 1459}
{"id": 261, "function": "ST_PolygonFromText", "question": "给出这几个小点(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)和(-71.1776585052917 42.3902909739571)，说一下它们围成的那个形状的文本样子。", "sql": "SELECT ST_PolygonFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For these little dots (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and (-71.1776585052917 42.3902909739571), describe the text form of the shape they enclose.", "source": "original", "new_id": 1460}
{"id": 262, "function": "ST_GeogFromWKB", "question": "把那个奇怪的二进制数据转换成一个地理对象，然后看看它变成了什么样的文本格式。", "sql": "SELECT ST_AsText( ST_GeogFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@') );", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that strange binary data and turn it into a geographic object, then see what kind of text format it becomes.", "source": "original", "new_id": 1466}
{"id": 262, "function": "ST_GeogFromWKB", "question": "把那些神秘的二进制符号E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@'变成一个地图上的东西，然后用某种文本格式显示出来。", "sql": "SELECT ST_AsText( ST_GeogFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@') );", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those mysterious binary symbols E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@' into something on a map, and then show it using some kind of text format.", "source": "original", "new_id": 1464}
{"id": 263, "function": "ST_GeomFromEWKB", "question": "将EWKB格式的二进制数据'\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1'转换为PostGIS几何对象。", "sql": "SELECT ST_GeomFromEWKB('\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1');", "execution_result": [["0102000020AD10000003000000E44A3D0A0B4220CA51C06EC328081E21454027BF45274B0ACA51C0F67B629D2A214540957CEC2E50CA510AC07099D365"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKB-formatted geometry data with SRID 4326 '\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1' into a PostGIS geometry object and display it.", "source": "original", "new_id": 1469}
{"id": 262, "function": "ST_GeogFromWKB", "question": "把那些奇怪的二进制数变成一个地理的形状，然后看看它变成文字是什么样子。", "sql": "SELECT ST_AsText( ST_GeogFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@') );", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform those strange binary numbers into a geographic shape, and then see what it looks like as text.", "source": "original", "new_id": 1467}
{"id": 261, "function": "ST_PolygonFromText", "question": "给定这些奇特的坐标点：(-71.1776585052917 42.3902909739571)、(-71.1776820268866 42.3903701743239)、(-71.1776063012595 42.3903825660754)、(-71.1775826583081 42.3903033653531)以及最后一个(-71.1776585052917 42.3902909739571)，可以想象一个形状把它们包围起来，能否给出这个形状的特别文本表达？", "sql": "SELECT ST_PolygonFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239, -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');", "execution_result": [["010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Given these peculiar coordinate points: (-71.1776585052917 42.3902909739571), (-71.1776820268866 42.3903701743239), (-71.1776063012595 42.3903825660754), (-71.1775826583081 42.3903033653531), and the last one (-71.1776585052917 42.3902909739571), can you imagine a shape that surrounds them? Could you provide the special text expression for this shape?", "source": "original", "new_id": 1462}
{"id": 262, "function": "ST_GeogFromWKB", "question": "把那些奇怪的二进制数据E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@'变成一个地理上的小东西，然后用某种文本方式表达出来。", "sql": "SELECT ST_AsText( ST_GeogFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@') );", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that strange binary data E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@' and turn it into a little geographic thing, then express it in some kind of text form.", "source": "original", "new_id": 1465}
{"id": 263, "function": "ST_GeomFromEWKB", "question": "解析EWKB二进制字符串'\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1'并生成对应的几何对象。", "sql": "SELECT ST_GeomFromEWKB('\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1');", "execution_result": [["0102000020AD10000003000000E44A3D0A0B4220CA51C06EC328081E21454027BF45274B0ACA51C0F67B629D2A214540957CEC2E50CA510AC07099D365"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKB-formatted geometry data with SRID 4326 '\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1' into a PostGIS geometry object and display it.", "source": "original", "new_id": 1470}
{"id": 262, "function": "ST_GeogFromWKB", "question": "把那个看起来很复杂的二进制数据E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@'变成一个地理形状，然后用简单的文本方式写出来。", "sql": "SELECT ST_AsText( ST_GeogFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@') );", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that seemingly complex binary data E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@' and turn it into a geographic shape, then write it out in a simple text way.", "source": "original", "new_id": 1468}
{"id": 262, "function": "ST_GeogFromWKB", "question": "把那些奇怪的二进制符号E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@'变成一个可以看懂的地理描述，像是用文字写出来的那种。", "sql": "SELECT ST_AsText( ST_GeogFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@') );", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that strange binary string E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@' into a comprehensible geographic description, like writing it out in words.", "source": "original", "new_id": 1463}
{"id": 263, "function": "ST_GeomFromEWKB", "question": "使用ST_GeomFromEWKB函数将EWKB编码'\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1'转换为PostGIS几何对象。", "sql": "SELECT ST_GeomFromEWKB('\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1');", "execution_result": [["0102000020AD10000003000000E44A3D0A0B4220CA51C06EC328081E21454027BF45274B0ACA51C0F67B629D2A214540957CEC2E50CA510AC07099D365"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKB-formatted geometry data with SRID 4326 '\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1' into a PostGIS geometry object and display it.", "source": "original", "new_id": 1471}
{"id": 264, "function": "ST_GeomFromEWKB", "question": "在处理这个特别的二进制串时，能不能告诉我这些小点组成的图形是什么呢？还有，那个标识数字是什么？", "sql": "SELECT ST_GeomFromEWKB(E'\\\\001\\\\002\\\\000\\\\000 \\\\255\\\\020\\\\000\\\\000\\\\003\\\\000\\\\000\\\\000\\\\344J= \\\\013B\\\\312Q\\\\300n\\\\303(\\\\010\\\\036!E@''\\\\277E''K \\\\312Q\\\\300\\\\366{b\\\\235*!E@\\\\225|\\\\354.P\\\\312Q \\\\300p\\\\231\\\\323e1!E@');", "execution_result": [["0102000020AD10000003000000E44A3D200B42CA51C06EC328081E21454027BF45274B20CA51C0F67B629D2A214540957CEC2E50CA5120C07099D36531"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "When dealing with this special binary string, can you tell me what shape these little dots form? Also, what is that identifier number?", "source": "original", "new_id": 1475}
{"id": 264, "function": "ST_GeomFromEWKB", "question": "把那个长长的十六进制字符串变成一个图形，能告诉我这个图形是什么样的和它里面的坐标吗？", "sql": "SELECT ST_GeomFromEWKB(E'\\\\001\\\\002\\\\000\\\\000 \\\\255\\\\020\\\\000\\\\000\\\\003\\\\000\\\\000\\\\000\\\\344J= \\\\013B\\\\312Q\\\\300n\\\\303(\\\\010\\\\036!E@''\\\\277E''K \\\\312Q\\\\300\\\\366{b\\\\235*!E@\\\\225|\\\\354.P\\\\312Q \\\\300p\\\\231\\\\323e1!E@');", "execution_result": [["0102000020AD10000003000000E44A3D200B42CA51C06EC328081E21454027BF45274B20CA51C0F67B629D2A214540957CEC2E50CA5120C07099D36531"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you transform that long hexadecimal string into a shape and tell me what kind of shape it is and the coordinates inside?", "source": "original", "new_id": 1477}
{"id": 263, "function": "ST_GeomFromEWKB", "question": "解析EWKB二进制数据'\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1'并输出对应的几何对象。", "sql": "SELECT ST_GeomFromEWKB('\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1');", "execution_result": [["0102000020AD10000003000000E44A3D0A0B4220CA51C06EC328081E21454027BF45274B0ACA51C0F67B629D2A214540957CEC2E50CA510AC07099D365"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKB-formatted geometry data with SRID 4326 '\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1' into a PostGIS geometry object and display it.", "source": "original", "new_id": 1473}
{"id": 263, "function": "ST_GeomFromEWKB", "question": "把这个看起来很复杂的二进制串，像这样‘\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1’，变成一个可以看到的图形，看看有什么特别的地方。", "sql": "SELECT ST_GeomFromEWKB('\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1');", "execution_result": [["0102000020AD10000003000000E44A3D0A0B4220CA51C06EC328081E21454027BF45274B0ACA51C0F67B629D2A214540957CEC2E50CA510AC07099D365"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take this seemingly complex binary string, like '\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1', and turn it into a visible shape to see if there's anything special about it.", "source": "original", "new_id": 1472}
{"id": 263, "function": "ST_GeomFromEWKB", "question": "将包含SRID 4326的EWKB格式几何数据'\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1'转换为PostGIS几何对象并输出。", "sql": "SELECT ST_GeomFromEWKB('\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1');", "execution_result": [["0102000020AD10000003000000E44A3D0A0B4220CA51C06EC328081E21454027BF45274B0ACA51C0F67B629D2A214540957CEC2E50CA510AC07099D365"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the EWKB-formatted geometry data with SRID 4326 '\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=\\012\\013B \\312Q\\300n\\303(\\010\\036!E@''\\277E''K\\012\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q\\012\\300p\\231\\323e1' into a PostGIS geometry object and display it.", "source": "original", "new_id": 1474}
{"id": 264, "function": "ST_GeomFromEWKB", "question": "把那个很长的二进制串变成一个形状，它里面有三个小点，坐标是那些数字(344A3D200B42, C31251C06EC328081E214540)、(27BF45274B20, C31251C0F67B629D2A214540)和(957CEC2E50, C3125120C07091D36531214540)，之后看看它属于哪个空间系统和是什么类型的形状?", "sql": "SELECT ST_GeomFromEWKB(E'\\\\001\\\\002\\\\000\\\\000 \\\\255\\\\020\\\\000\\\\000\\\\003\\\\000\\\\000\\\\000\\\\344J= \\\\013B\\\\312Q\\\\300n\\\\303(\\\\010\\\\036!E@''\\\\277E''K \\\\312Q\\\\300\\\\366{b\\\\235*!E@\\\\225|\\\\354.P\\\\312Q \\\\300p\\\\231\\\\323e1!E@');", "execution_result": [["0102000020AD10000003000000E44A3D200B42CA51C06EC328081E21454027BF45274B20CA51C0F67B629D2A214540957CEC2E50CA5120C07099D36531"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that lengthy binary string into a shape, which includes three little dots, with coordinates like those numbers (344A3D200B42, C31251C06EC328081E214540), (27BF45274B20, C31251C0F67B629D2A214540), and (957CEC2E50, C3125120C07091D36531214540). Then, see which spatial system it belongs to and what type of shape it is.", "source": "original", "new_id": 1476}
{"id": 265, "function": "ST_GeomFromWKB", "question": "把那些奇怪的字节码E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@'变成一个带4326标记的小图形，并用一种特别的文本格式展示出来。", "sql": "SELECT ST_AsEWKT( ST_GeomFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@',4326) );", "execution_result": [["SRID=4326;LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those strange bytes E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@' into a small shape marked with 4326, and show it in a special text format.", "source": "original", "new_id": 1478}
{"id": 265, "function": "ST_GeomFromWKB", "question": "把包含那些奇怪字节的WKB几何变成一个在4326的坐标系里能识别的形状，然后用带标识的文本方式展示出来。", "sql": "SELECT ST_AsEWKT( ST_GeomFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@',4326) );", "execution_result": [["SRID=4326;LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the WKB geometry with those odd bytes into a shape recognizable in the 4326 coordinate system, then display it as text with an identifier.", "source": "original", "new_id": 1483}
{"id": 266, "function": "ST_LineFromWKB", "question": "把由那些连接1 2和3 4的小点构成的线变成一种中间格式再变回来，看看它叫什么名。而看看1 2这个点变成那种线后会不会什么都没有。", "sql": "SELECT ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)'))) AS aline, ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('POINT(1 2)'))) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the line made of little dots connecting 1 2 and 3 4 into some middle format and back, and check what it's called. And see if the 1 2 point turns into nothing when changed into that kind of line.", "source": "original", "new_id": 1484}
{"id": 265, "function": "ST_GeomFromWKB", "question": "把这个奇怪的字节串E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@'变成一个包含4326数字的几何形状，然后用一种特别的文字格式展示出来。", "sql": "SELECT ST_AsEWKT( ST_GeomFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@',4326) );", "execution_result": [["SRID=4326;LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn this peculiar byte sequence E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@' into a geometry shape with the number 4326, then show it in a special text format.", "source": "original", "new_id": 1479}
{"id": 266, "function": "ST_LineFromWKB", "question": "试着看看那些1 2和3 4的小点连成的线，经过某种格式变换后会变成什么样的形状，再看看1 2的小点经过同样的过程会不会因为不合适而消失不见。", "sql": "SELECT ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)'))) AS aline, ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('POINT(1 2)'))) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Try to see what shape those little dots at 1 2 and 3 4 form after some kind of format transformation, and then check if the dot at 1 2 disappears because it doesn't fit when going through the same process.", "source": "original", "new_id": 1488}
{"id": 266, "function": "ST_LineFromWKB", "question": "如果拿那些(1 2, 3 4)的线条数据，经过某种格式转换，能得到什么样的线？而(1 2)这个点的数据经过同样的处理，会不会就得不到线呢？", "sql": "SELECT ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)'))) AS aline, ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('POINT(1 2)'))) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you take the line data with those (1 2, 3 4) numbers through some kind of format change, what kind of line comes out? And with the (1 2) point data treated the same way, is it impossible to get a line?", "source": "original", "new_id": 1485}
{"id": 265, "function": "ST_GeomFromWKB", "question": "把那个有点复杂的字节串E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@'变成一个几何形状，想象它在某个特别的地理参考系统里，然后找个方式把它变成带有这种系统标识的文本格式。", "sql": "SELECT ST_AsEWKT( ST_GeomFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@',4326) );", "execution_result": [["SRID=4326;LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that somewhat complex byte sequence E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@' and turn it into a geometry shape, imagining it in a special geographic reference system, then find a way to convert it into a text format with this system's identifier.", "source": "original", "new_id": 1482}
{"id": 266, "function": "ST_LineFromWKB", "question": "输出两个结果：1) 通过某种中间方式，把那条从(1, 2)到(3, 4)的线变成线形物体后的样子；2) 当一个小点(1, 2)也经过同样的变化时，会不会因为不匹配而返回空。", "sql": "SELECT ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)'))) AS aline, ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('POINT(1 2)'))) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output two results: 1) the appearance of the line object after a certain intermediate method changes the line from (1, 2) to (3, 4); 2) whether a small dot (1, 2), when undergoing the same process, returns empty due to mismatch.", "source": "original", "new_id": 1486}
{"id": 266, "function": "ST_LineFromWKB", "question": "给我两个东西：一个是那些点从1 2到3 4组成的线转过来后的样子，另一个是1 2那个小点转不过来时是不是空的答案。", "sql": "SELECT ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)'))) AS aline, ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('POINT(1 2)'))) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Give me two things: one is the appearance of the line made from those points from 1 2 to 3 4 after conversion, and the other is whether the little dot at 1 2 ends up empty when it can't be converted.", "source": "original", "new_id": 1489}
{"id": 266, "function": "ST_LineFromWKB", "question": "看看当你把那些从1 2到3 4的小线变成一种中间格式再变回来时，它还像不像原来那样；还有当你对1 2的小点做同样的事时，能不能得到一个结果。", "sql": "SELECT ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)'))) AS aline, ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('POINT(1 2)'))) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if when you turn those little lines from 1 2 to 3 4 into some kind of middle format and back, it still looks the same as before; and whether doing the same with the little dot at 1 2 gives you a result.", "source": "original", "new_id": 1487}
{"id": 265, "function": "ST_GeomFromWKB", "question": "把那些奇怪的字节串E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@'变成一个带有4326编号的形状，然后用一种包含编号的长字符串形式展示出来。", "sql": "SELECT ST_AsEWKT( ST_GeomFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@',4326) );", "execution_result": [["SRID=4326;LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that strange byte sequence E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@' and turn it into a shape with the number 4326, then show it as a long string form that includes the number.", "source": "original", "new_id": 1481}
{"id": 267, "function": "ST_LinestringFromWKB", "question": "把那些1 2到3 4的小点连成的线变成一种计算机能读的格式，再看看用1 2这个小点是不是没法变成线。结果是啥呢？", "sql": "SELECT ST_LineStringFromWKB( ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)')) ) AS aline, ST_LinestringFromWKB( ST_AsBinary(ST_GeomFromText('POINT(1 2)')) ) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those little dots from 1 2 to 3 4 into a computer-readable format, then check if using the little dot at 1 2 can't be made into a line. What's the result?", "source": "original", "new_id": 1490}
{"id": 265, "function": "ST_GeomFromWKB", "question": "把那串神秘的二进制代码E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@'变成一个带有4326标识的几何形状，然后用一种包含标识的特殊格式文本展示出来。", "sql": "SELECT ST_AsEWKT( ST_GeomFromWKB(E'\\\\001\\\\002\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\037\\\\205\\\\353Q\\\\270~\\\\\\\\\\\\300\\\\323Mb\\\\020X\\\\231C@\\\\020X9\\\\264\\\\310~\\\\\\\\\\\\300)\\\\\\\\\\\\217\\\\302\\\\365\\\\230C@',4326) );", "execution_result": [["SRID=4326;LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that mysterious binary sequence E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@' and turn it into a shape with a 4326 label, then show it in a special text format that includes the label.", "source": "original", "new_id": 1480}
{"id": 267, "function": "ST_LinestringFromWKB", "question": "先把1 2到3 4的那条线转成某种格式，再变成另一种格式，然后生成一个线对象。接着用1 2的那个点做同样的处理，看看是否会得到空结果。", "sql": "SELECT ST_LineStringFromWKB( ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)')) ) AS aline, ST_LinestringFromWKB( ST_AsBinary(ST_GeomFromText('POINT(1 2)')) ) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "First, change the line from 1 2 to 3 4 into some format, then into another format, and finally make a line object. Next, do the same with the point at 1 2 to see if it results in an empty outcome.", "source": "original", "new_id": 1492}
{"id": 267, "function": "ST_LinestringFromWKB", "question": "看看由那些1 2到3 4的坐标组成的线形状变成了什么，并确认点1 2无法变成线而得到的空结果。", "sql": "SELECT ST_LineStringFromWKB( ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)')) ) AS aline, ST_LinestringFromWKB( ST_AsBinary(ST_GeomFromText('POINT(1 2)')) ) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check what the line shape made of those 1 2 to 3 4 coordinates turns into, and confirm the empty result from trying to make point 1 2 into a line.", "source": "original", "new_id": 1493}
{"id": 267, "function": "ST_LinestringFromWKB", "question": "把那条包含(1 2, 3 4)的小线变成一种特别的数字格式，再用这个格式试着把它变回原来的样子；顺便看看如果用(1 2)这个小点会不会得到空的结果。", "sql": "SELECT ST_LineStringFromWKB( ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)')) ) AS aline, ST_LinestringFromWKB( ST_AsBinary(ST_GeomFromText('POINT(1 2)')) ) IS NULL AS null_return;", "execution_result": [["010200000002000000000000000000F03F000000000000004000000000000008400000000000001040", true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the little line with (1 2, 3 4) into a special digital form, then try to change it back to its original shape; also check if using the little dot (1 2) gives an empty result.", "source": "original", "new_id": 1491}
{"id": 268, "function": "ST_PointFromWKB", "question": "把一个小坐标(2, 5)变成一种特别格式，然后再变回去，最后以一种常见的文本方式呈现出来。", "sql": "SELECT ST_AsText( ST_PointFromWKB( ST_AsEWKB('POINT(2 5)'::geometry) ) );", "execution_result": [["POINT(2 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a small coordinate (2, 5), turn it into a special format, then change it back, and finally show it in a common text way.", "source": "original", "new_id": 1494}
{"id": 268, "function": "ST_PointFromWKB", "question": "把那个点(2 5)变成某种神秘的二进制，然后再变回去，最后用一种文字形式来描述这个点。", "sql": "SELECT ST_AsText( ST_PointFromWKB( ST_AsEWKB('POINT(2 5)'::geometry) ) );", "execution_result": [["POINT(2 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that point (2 5) into some kind of mysterious binary, then change it back, and finally describe this point in a text form.", "source": "original", "new_id": 1496}
{"id": 268, "function": "ST_PointFromWKB", "question": "把那个点(2 5)变成一种特别格式，再用一些方法把它变回点，最后看看它长什么样子。", "sql": "SELECT ST_AsText( ST_PointFromWKB( ST_AsEWKB('POINT(2 5)'::geometry) ) );", "execution_result": [["POINT(2 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that point (2 5), turn it into a special format, use some steps to turn it back into a point, and finally see what it looks like.", "source": "original", "new_id": 1498}
{"id": 268, "function": "ST_PointFromWKB", "question": "先把这些坐标(2, 5)变成一种计算机能读的特殊码，再让它回到原来的样子，然后看看它用简单文字怎么描述。", "sql": "SELECT ST_AsText( ST_PointFromWKB( ST_AsEWKB('POINT(2 5)'::geometry) ) );", "execution_result": [["POINT(2 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "First, turn these coordinates (2, 5) into a special code that computers understand, then bring it back to its original form, and finally see how it is described in plain text.", "source": "original", "new_id": 1495}
{"id": 268, "function": "ST_PointFromWKB", "question": "把那个二维小点(2 5)经过几种转换，最后看看它变成什么样的文字描述。", "sql": "SELECT ST_AsText( ST_PointFromWKB( ST_AsEWKB('POINT(2 5)'::geometry) ) );", "execution_result": [["POINT(2 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little 2D dot (2 5) through a few conversions, and finally see what kind of text description it becomes.", "source": "original", "new_id": 1497}
{"id": 268, "function": "ST_PointFromWKB", "question": "把一个在2和5位置的小点，经过几步转换，最后得到的文字样子是什么？", "sql": "SELECT ST_AsText( ST_PointFromWKB( ST_AsEWKB('POINT(2 5)'::geometry) ) );", "execution_result": [["POINT(2 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What does a little dot at 2 and 5 look like in words after a few transformations?", "source": "original", "new_id": 1499}
{"id": 269, "function": "ST_Box2dFromGeoHash", "question": "用那个地理编码'9qqj7nmxncgyy4d0dbxqz0'来找出一个能把它整个盖住的简单框框。", "sql": "SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0');", "execution_result": [["BOX(-115.17281600000001 36.11464599999999,-115.172816 36.114646)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Using that geocode '9qqj7nmxncgyy4d0dbxqz0', find a simple box that can cover it all.", "source": "original", "new_id": 1501}
{"id": 269, "function": "ST_Box2dFromGeoHash", "question": "给我看看'9qqj7nmxncgyy4d0dbxqz0'这个地理哈希的神秘边界形状。", "sql": "SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0');", "execution_result": [["BOX(-115.17281600000001 36.11464599999999,-115.172816 36.114646)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the mysterious boundary shape of the geohash '9qqj7nmxncgyy4d0dbxqz0'.", "source": "original", "new_id": 1503}
{"id": 269, "function": "ST_Box2dFromGeoHash", "question": "把那个地理哈希码'9qqj7nmxncgyy4d0dbxqz0'弄成一个能包住的二维框的样子。", "sql": "SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0');", "execution_result": [["BOX(-115.17281600000001 36.11464599999999,-115.172816 36.114646)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that geohash '9qqj7nmxncgyy4d0dbxqz0' into a shape that can cover it in two dimensions.", "source": "original", "new_id": 1500}
{"id": 269, "function": "ST_Box2dFromGeoHash", "question": "把这个地理编码'9qqj7nmxncgyy4d0dbxqz0'变成一个包住它的简单框框，然后告诉我这个框框的边边角角。", "sql": "SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0');", "execution_result": [["BOX(-115.17281600000001 36.11464599999999,-115.172816 36.114646)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn this geocode '9qqj7nmxncgyy4d0dbxqz0' into a simple box that wraps around it and tell me the corners of that box.", "source": "original", "new_id": 1504}
{"id": 269, "function": "ST_Box2dFromGeoHash", "question": "找出地理哈希值'9qqj7nmxncgyy4d0dbxqz0'对应的那个简单的框框，里面放那些坐标边界。", "sql": "SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0');", "execution_result": [["BOX(-115.17281600000001 36.11464599999999,-115.172816 36.114646)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Identify the simple box that corresponds to the geohash '9qqj7nmxncgyy4d0dbxqz0', enclosing those boundary coordinates.", "source": "original", "new_id": 1502}
{"id": 269, "function": "ST_Box2dFromGeoHash", "question": "找出地理哈希'9qqj7nmxncgyy4d0dbxqz0'的坐标，然后想象一个能包住它的最小盒子。", "sql": "SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0');", "execution_result": [["BOX(-115.17281600000001 36.11464599999999,-115.172816 36.114646)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the coordinates for geohash '9qqj7nmxncgyy4d0dbxqz0' and imagine the smallest box that can cover it.", "source": "original", "new_id": 1505}
{"id": 270, "function": "ST_GeomFromGeoHash", "question": "把这个奇特的字符串'9qqj7nmxncgyy4d0dbxqz0'弄成一个图形，只要前面4个字符的准确度，最后用一种常见的格式说出来。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POLYGON((-115.3125 36.03515625,-115.3125 36.2109375,-114.9609375 36.2109375,-114.9609375 36.03515625,-115.3125 36.03515625))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn this peculiar string '9qqj7nmxncgyy4d0dbxqz0' into a shape, just with the accuracy of the first 4 characters, and finally express it in a common format.", "source": "original", "new_id": 1506}
{"id": 270, "function": "ST_GeomFromGeoHash", "question": "把那个长长的代码串'9qqj7nmxncgyy4d0dbxqz0'变成一种图形，用4个字符的清晰度，看看它的外形是什么。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POLYGON((-115.3125 36.03515625,-115.3125 36.2109375,-114.9609375 36.2109375,-114.9609375 36.03515625,-115.3125 36.03515625))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that long code '9qqj7nmxncgyy4d0dbxqz0' and turn it into a kind of shape, using a clarity of 4 characters, to see what it looks like.", "source": "original", "new_id": 1509}
{"id": 270, "function": "ST_GeomFromGeoHash", "question": "把那个有点神秘的代码'9qqj7nmxncgyy4d0dbxqz0'转换成某种图形，记得用个数字4来处理，然后看看它变成文字是什么样子。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POLYGON((-115.3125 36.03515625,-115.3125 36.2109375,-114.9609375 36.2109375,-114.9609375 36.03515625,-115.3125 36.03515625))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that somewhat mysterious code '9qqj7nmxncgyy4d0dbxqz0' into some sort of shape, remember to use the number 4 for processing, and then see what it looks like in words.", "source": "original", "new_id": 1507}
{"id": 270, "function": "ST_GeomFromGeoHash", "question": "把那个很长的地理编码'9qqj7nmxncgyy4d0dbxqz0'缩短到4位，然后变成一个可以看到的形状。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POLYGON((-115.3125 36.03515625,-115.3125 36.2109375,-114.9609375 36.2109375,-114.9609375 36.03515625,-115.3125 36.03515625))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that long geocode '9qqj7nmxncgyy4d0dbxqz0', trim it to 4 characters, and turn it into a visible shape.", "source": "original", "new_id": 1510}
{"id": 270, "function": "ST_GeomFromGeoHash", "question": "把编码为'9qqj7nmxncgyy4d0dbxqz0'的那串字符变成一幅图形，边界模糊到4的程度，然后用一种常见的文本方式来描述它。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POLYGON((-115.3125 36.03515625,-115.3125 36.2109375,-114.9609375 36.2109375,-114.9609375 36.03515625,-115.3125 36.03515625))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the string '9qqj7nmxncgyy4d0dbxqz0' into a picture, with its edges blurred to a level of 4, and then describe it using a common text format.", "source": "original", "new_id": 1508}
{"id": 270, "function": "ST_GeomFromGeoHash", "question": "把这个奇怪的字符串'9qqj7nmxncgyy4d0dbxqz0'变成某种形状，使用一个神秘的精度值4，然后告诉我这个形状长什么样。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POLYGON((-115.3125 36.03515625,-115.3125 36.2109375,-114.9609375 36.2109375,-114.9609375 36.03515625,-115.3125 36.03515625))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take this strange string '9qqj7nmxncgyy4d0dbxqz0' and turn it into some kind of shape using a mysterious precision value of 4, then tell me what this shape looks like.", "source": "original", "new_id": 1511}
{"id": 271, "function": "ST_GeomFromGeoHash", "question": "把那个神秘的'9qqj7nmxncgyy4d0dbxqz0'变成一种形状，然后用一种特别的文字形式表达出来。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POLYGON((-115.17281600000001 36.11464599999999,-115.17281600000001 36.114646,-115.172816 36.114646,-115.172816 36.11464599999999,-115.17281600000001 36.11464599999999))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that mysterious '9qqj7nmxncgyy4d0dbxqz0' into a shape, and express it in a special text form.", "source": "original", "new_id": 1512}
{"id": 271, "function": "ST_GeomFromGeoHash", "question": "使用'9qqj7nmxncgyy4d0dbxqz0'这个神秘编码来创造一个形状，然后把这个形状用一种大家都能看懂的文字格式表达出来。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POLYGON((-115.17281600000001 36.11464599999999,-115.17281600000001 36.114646,-115.172816 36.114646,-115.172816 36.11464599999999,-115.17281600000001 36.11464599999999))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Use the mysterious code '9qqj7nmxncgyy4d0dbxqz0' to create a shape, and then express that shape in a text format that everyone can understand.", "source": "original", "new_id": 1514}
{"id": 271, "function": "ST_GeomFromGeoHash", "question": "把那个包含了'9qqj7nmxncgyy4d0dbxqz0'的小玩意儿，换成一种大家都能看懂的文字描述。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POLYGON((-115.17281600000001 36.11464599999999,-115.17281600000001 36.114646,-115.172816 36.114646,-115.172816 36.11464599999999,-115.17281600000001 36.11464599999999))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that little thing with '9qqj7nmxncgyy4d0dbxqz0' into a text description everyone can understand.", "source": "original", "new_id": 1515}
{"id": 271, "function": "ST_GeomFromGeoHash", "question": "从这个神秘代码'9qqj7nmxncgyy4d0dbxqz0'中找出其代表的图形，并把这个图形用一种常见的描述格式说出来。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POLYGON((-115.17281600000001 36.11464599999999,-115.17281600000001 36.114646,-115.172816 36.114646,-115.172816 36.11464599999999,-115.17281600000001 36.11464599999999))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out the shape represented by this mysterious code '9qqj7nmxncgyy4d0dbxqz0' and describe it in a common format.", "source": "original", "new_id": 1513}
{"id": 272, "function": "ST_GeomFromGeoHash", "question": "把这个叫做'9qqj7nmxncgyy4d0dbxqz0'的神秘代码变成一个很精确的形状，然后以某种文本方式展示出来。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POLYGON((-115.17282128334045 36.11464083194733,-115.17282128334045 36.114646196365356,-115.1728105545044 36.114646196365356,-115.1728105545044 36.11464083194733,-115.17282128334045 36.11464083194733))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform this mysterious code '9qqj7nmxncgyy4d0dbxqz0' into a very precise shape, then show it in some text form.", "source": "original", "new_id": 1518}
{"id": 271, "function": "ST_GeomFromGeoHash", "question": "把那个长长的'9qqj7nmxncgyy4d0dbxqz0'代码变成一个地理形状，然后用一种能读懂的格式讲出来。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POLYGON((-115.17281600000001 36.11464599999999,-115.17281600000001 36.114646,-115.172816 36.114646,-115.172816 36.11464599999999,-115.17281600000001 36.11464599999999))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that long code '9qqj7nmxncgyy4d0dbxqz0' into a geographic shape, then describe it in a readable format.", "source": "original", "new_id": 1516}
{"id": 271, "function": "ST_GeomFromGeoHash", "question": "能不能用一种特别的字符方式呈现从那个奇妙的编码'9qqj7nmxncgyy4d0dbxqz0'里找出的形状呢？", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POLYGON((-115.17281600000001 36.11464599999999,-115.17281600000001 36.114646,-115.172816 36.114646,-115.172816 36.11464599999999,-115.17281600000001 36.11464599999999))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show the shape found from that peculiar code '9qqj7nmxncgyy4d0dbxqz0' using a special kind of character format?", "source": "original", "new_id": 1517}
{"id": 272, "function": "ST_GeomFromGeoHash", "question": "把这个奇怪的地理编码'9qqj7nmxncgyy4d0dbxqz0'变成一个形状，用那些数字10作为它的精细度，然后告诉我它长什么样子。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POLYGON((-115.17282128334045 36.11464083194733,-115.17282128334045 36.114646196365356,-115.1728105545044 36.114646196365356,-115.1728105545044 36.11464083194733,-115.17282128334045 36.11464083194733))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn this odd geographic code '9qqj7nmxncgyy4d0dbxqz0' into a shape, using those numbers 10 as its detail level, then tell me what it looks like.", "source": "original", "new_id": 1521}
{"id": 272, "function": "ST_GeomFromGeoHash", "question": "把那个叫做'9qqj7nmxncgyy4d0dbxqz0'的地理编码转化为一种文字描述的形状，注意要用10这个数字去做转换哦。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POLYGON((-115.17282128334045 36.11464083194733,-115.17282128334045 36.114646196365356,-115.1728105545044 36.114646196365356,-115.1728105545044 36.11464083194733,-115.17282128334045 36.11464083194733))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that geographic code '9qqj7nmxncgyy4d0dbxqz0' into a shape described with words, and make sure to use the number 10 for the conversion.", "source": "original", "new_id": 1519}
{"id": 272, "function": "ST_GeomFromGeoHash", "question": "把那个长长的编码'9qqj7nmxncgyy4d0dbxqz0'变成一个可视化形状，用10这个数字来确保它的准确度，然后以一种文本形式输出。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POLYGON((-115.17282128334045 36.11464083194733,-115.17282128334045 36.114646196365356,-115.1728105545044 36.114646196365356,-115.1728105545044 36.11464083194733,-115.17282128334045 36.11464083194733))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that long code '9qqj7nmxncgyy4d0dbxqz0' into a visual shape, using the number 10 to ensure its accuracy, then output it in a text form.", "source": "original", "new_id": 1522}
{"id": 273, "function": "ST_GeomFromGML", "question": "用那些点构成一个曲线吧，坐标是42.258729 -71.16028和42.259112 -71.160837，还有一个重复的点，大家都在EPSG:4269这个地方上。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$);", "execution_result": [["0102000020AD100000030000006EC328081E214540FC8C0B0742CA51C027BF45274BCA51C02600FF942A2145406EC328081E214540FC8C0B0742CA51C0"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make a line with those points, coordinates are 42.258729 -71.16028 and 42.259112 -71.160837, plus a repeated point, all located in the EPSG:4269 area.", "source": "original", "new_id": 1524}
{"id": 272, "function": "ST_GeomFromGeoHash", "question": "把那个代码'9qqj7nmxncgyy4d0dbxqz0'变成一种几何图形，用10这个数来搞定，然后给我看看它的文本样子。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POLYGON((-115.17282128334045 36.11464083194733,-115.17282128334045 36.114646196365356,-115.1728105545044 36.114646196365356,-115.1728105545044 36.11464083194733,-115.17282128334045 36.11464083194733))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that code '9qqj7nmxncgyy4d0dbxqz0' and turn it into a kind of geometric shape, using the number 10 to sort it out, then show me what it looks like in text.", "source": "original", "new_id": 1523}
{"id": 272, "function": "ST_GeomFromGeoHash", "question": "用'9qqj7nmxncgyy4d0dbxqz0'这样的一串字符，还有个数字10，变成那种标准的文本形式，描述地理形状。", "sql": "SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POLYGON((-115.17282128334045 36.11464083194733,-115.17282128334045 36.114646196365356,-115.1728105545044 36.114646196365356,-115.1728105545044 36.11464083194733,-115.17282128334045 36.11464083194733))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the string '9qqj7nmxncgyy4d0dbxqz0' and a number 10, and turn it into that standard text form that describes a geographic shape.", "source": "original", "new_id": 1520}
{"id": 273, "function": "ST_GeomFromGML", "question": "用那种格式来做一个包含三个点的线条，先是42.258729 -71.16028，然后是42.259112 -71.160837，最后回到第一个点，所有这些都在那个4269的坐标系统里。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$);", "execution_result": [["0102000020AD100000030000006EC328081E214540FC8C0B0742CA51C027BF45274BCA51C02600FF942A2145406EC328081E214540FC8C0B0742CA51C0"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create a line with three spots in that format, starting at 42.258729 -71.16028, then moving to 42.259112 -71.160837, and finally returning to the first spot, all in that 4269 coordinate system.", "source": "original", "new_id": 1525}
{"id": 273, "function": "ST_GeomFromGML", "question": "有一个包含一些坐标的格式，这些坐标是42.258729 -71.16028和42.259112 -71.160837，还有个重复的坐标，跟着一个链接#p1。这个东西用来表示某种线条，基于EPSG:4269的系统。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$);", "execution_result": [["0102000020AD100000030000006EC328081E214540FC8C0B0742CA51C027BF45274BCA51C02600FF942A2145406EC328081E214540FC8C0B0742CA51C0"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a format with some coordinates, like 42.258729 -71.16028 and 42.259112 -71.160837, and there's a repeated one following a link #p1. This thing is used to show some kind of line, based on the EPSG:4269 system.", "source": "original", "new_id": 1526}
{"id": 274, "function": "ST_GeomFromGML", "question": "把一串坐标像是-71.16028,42.258729这样的，经过某种转换后，想知道它们的坐标体系（EPSG:4269）有没有保持不变？", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$);", "execution_result": [["0102000020AD10000003000000FC8C0B0742CA51C06EC328081E21454027BF45274BCA51C02600FF942A214540ADBEBA2A50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After some sort of transformation with a series of coordinates like -71.16028,42.258729, do they still keep their coordinate system (EPSG:4269) unchanged?", "source": "original", "new_id": 1530}
{"id": 273, "function": "ST_GeomFromGML", "question": "请给我一个包含两个独立小点和一个重复小点的线状东西，坐标是42.258729 -71.16028和42.259112 -71.160837，还有个连接的东西，都是在EPSG:4269下的。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$);", "execution_result": [["0102000020AD100000030000006EC328081E214540FC8C0B0742CA51C027BF45274BCA51C02600FF942A2145406EC328081E214540FC8C0B0742CA51C0"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please give me a line-like thing that has two separate little dots and one repeated little dot, with coordinates 42.258729 -71.16028 and 42.259112 -71.160837, plus something linked, all under EPSG:4269.", "source": "original", "new_id": 1529}
{"id": 274, "function": "ST_GeomFromGML", "question": "如果有一些坐标像-71.16028和42.258729这样的，经过转换后，它们的原始系统定义还会保持不变吗？", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$);", "execution_result": [["0102000020AD10000003000000FC8C0B0742CA51C06EC328081E21454027BF45274BCA51C02600FF942A214540ADBEBA2A50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If there are some coordinates like -71.16028 and 42.258729, after conversion, will their original system definition remain unchanged?", "source": "original", "new_id": 1531}
{"id": 273, "function": "ST_GeomFromGML", "question": "请想象一个由几个点串成的线，其中有个点叫42.258729 -71.16028，可以用来做起点和终点，中间还有个点42.259112 -71.160837。这个线用一种特别的方式表示，坐标是基于EPSG:4269的。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$);", "execution_result": [["0102000020AD100000030000006EC328081E214540FC8C0B0742CA51C027BF45274BCA51C02600FF942A2145406EC328081E214540FC8C0B0742CA51C0"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a line made up of a few points, where one point called 42.258729 -71.16028 can be both the start and end, with another point in the middle at 42.259112 -71.160837. This line is represented in a special way, with coordinates based on EPSG:4269.", "source": "original", "new_id": 1528}
{"id": 274, "function": "ST_GeomFromGML", "question": "把那个用GML格式描述的长长的线条数据转成PostGIS能读懂的样子，它原本提到的坐标系统EPSG:4269还在吗？", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$);", "execution_result": [["0102000020AD10000003000000FC8C0B0742CA51C06EC328081E21454027BF45274BCA51C02600FF942A214540ADBEBA2A50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "When you take that long line described in GML style and change it into something PostGIS can understand, does it still mention the original coordinate system EPSG:4269?", "source": "original", "new_id": 1532}
{"id": 274, "function": "ST_GeomFromGML", "question": "将那些坐标 -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 转变成某种数据库里的形状后，结果保留了原来的坐标系统定义吗？", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$);", "execution_result": [["0102000020AD10000003000000FC8C0B0742CA51C06EC328081E21454027BF45274BCA51C02600FF942A214540ADBEBA2A50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "After turning those coordinates -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 into some kind of shape in a database, does the result keep the original coordinate system definition?", "source": "original", "new_id": 1533}
{"id": 273, "function": "ST_GeomFromGML", "question": "请把那些坐标点，比如42.258729 -71.16028和42.259112 -71.160837，还有一个重复的小点，用某种方式变成一个覆盖它们的形状。", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" srsName=\"urn:ogc:def:crs:EPSG::4269\"> <gml:pointProperty> <gml:Point gml:id=\"p1\" ><gml:pos >42.258729 -71.16028</gml:pos ></gml:Point> </gml:pointProperty> <gml:pos >42.259112 -71.160837</gml:pos> <gml:pointProperty> <gml:Point xlink:type=\"simple\" xlink:href=\"#p1\"/> </gml:pointProperty> </gml:LineString> $$);", "execution_result": [["0102000020AD100000030000006EC328081E214540FC8C0B0742CA51C027BF45274BCA51C02600FF942A2145406EC328081E214540FC8C0B0742CA51C0"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please transform those coordinates, like 42.258729 -71.16028 and 42.259112 -71.160837, along with a repeated little point, into a shape that covers them all in some way.", "source": "original", "new_id": 1527}
{"id": 274, "function": "ST_GeomFromGML", "question": "把那个带有这些数字的小线条从某种格式转换成另一个后，新的形状是否仍然记得这些数字的原始位置标识（EPSG:4269）？", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$);", "execution_result": [["0102000020AD10000003000000FC8C0B0742CA51C06EC328081E21454027BF45274BCA51C02600FF942A214540ADBEBA2A50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "When that little line with these numbers is switched from one style to another, does the new shape still remember the original location tag (EPSG:4269) for these numbers?", "source": "original", "new_id": 1535}
{"id": 275, "function": "ST_GeomFromGML", "question": "把那个由六个小平面组成的立体结构，从一种格式变成另一种，其中每个小平面有一组坐标，比如第一个是0 0 0到0 0 1，第二个是0 0 0到0 1 0，依此类推。", "sql": "SELECT ST_AsEWKT(ST_GeomFromGML(' <gml:PolyhedralSurface xmlns:gml=\"http://www.opengis.net/gml\"> <gml:polygonPatches> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> </gml:polygonPatches> </gml:PolyhedralSurface >'));", "execution_result": [["POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0)),((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0)),((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0)),((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that 3D shape made of six little surfaces from one format to another, where each surface has a set of coordinates, like the first one from 0 0 0 to 0 0 1, the second one from 0 0 0 to 0 1 0, and so on.", "source": "original", "new_id": 1536}
{"id": 274, "function": "ST_GeomFromGML", "question": "如果把一个包含三个点（-71.16028,42.258729）、（-71.160837,42.259112）、（-71.161143,42.25932）的那种线变成另一种格式，它还保留原来的坐标系编号吗？", "sql": "SELECT ST_GeomFromGML($$ <gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4269\"> <gml:coordinates> -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932 </gml:coordinates> </gml:LineString> $$);", "execution_result": [["0102000020AD10000003000000FC8C0B0742CA51C06EC328081E21454027BF45274BCA51C02600FF942A214540ADBEBA2A50CA51C07099D36531214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you change a kind of line with three points (-71.16028,42.258729), (-71.160837,42.259112), (-71.161143,42.25932) into another format, does it still keep the original coordinate system number?", "source": "original", "new_id": 1534}
{"id": 275, "function": "ST_GeomFromGML", "question": "想办法把有6个面的小立方体的那种复杂格式变成另一种格式。每个面都有一些角，比如前面是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，底面有(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，还有其他面。你能做到吗？", "sql": "SELECT ST_AsEWKT(ST_GeomFromGML(' <gml:PolyhedralSurface xmlns:gml=\"http://www.opengis.net/gml\"> <gml:polygonPatches> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> </gml:polygonPatches> </gml:PolyhedralSurface >'));", "execution_result": [["POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0)),((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0)),((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0)),((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Try to transform that complicated format of a small cube with 6 faces into another format. Each face has some corners, like the front has (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the bottom has (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), and there are other faces. Can you do it?", "source": "original", "new_id": 1540}
{"id": 275, "function": "ST_GeomFromGML", "question": "把那个有六个面的小立体，从一种格式变成另一种格式，面上有些点，比如第一个面是[0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0]，第二个面是[0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0]，其他面也各有一堆点。", "sql": "SELECT ST_AsEWKT(ST_GeomFromGML(' <gml:PolyhedralSurface xmlns:gml=\"http://www.opengis.net/gml\"> <gml:polygonPatches> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> </gml:polygonPatches> </gml:PolyhedralSurface >'));", "execution_result": [["POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0)),((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0)),((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0)),((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that small 3D shape with six sides from one format to another, with dots on the surfaces, like the first side is [0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0], the second side is [0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0], and other sides have their own bunch of dots.", "source": "original", "new_id": 1538}
{"id": 276, "function": "ST_GeomFromGeoJSON", "question": "把包含坐标[-48.23456,20.12345]的小点从某种格式变成另一种叫WKT的文本形式。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}')) AS wkt;", "execution_result": [["POINT(-48.23456 20.12345)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the little point with coordinates [-48.23456,20.12345] from one format to another called WKT text.", "source": "original", "new_id": 1542}
{"id": 276, "function": "ST_GeomFromGeoJSON", "question": "怎么把那个有点像地图上的小点，位置在经度-48.23456和纬度20.12345的东西，变成一种常见的文本格式呢？", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}')) AS wkt;", "execution_result": [["POINT(-48.23456 20.12345)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How can you change that sort of map-like dot, located at longitude -48.23456 and latitude 20.12345, into a common text format?", "source": "original", "new_id": 1543}
{"id": 277, "function": "ST_GeomFromGeoJSON", "question": "如何从一个包含点[1,2,3]、[4,5,6]和[7,8,9]的线条形状中获取它的文字形式？", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}')) AS wkt;", "execution_result": [["LINESTRING Z (1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How can you get the written form of a line shape that includes points [1,2,3], [4,5,6], and [7,8,9]?", "source": "original", "new_id": 1549}
{"id": 277, "function": "ST_GeomFromGeoJSON", "question": "把那串坐标数据，像1,2,3这些，转成一种文本格式，能描述出连接的样子。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}')) AS wkt;", "execution_result": [["LINESTRING Z (1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform those coordinates, like 1,2,3, into a text format that describes the connected shape.", "source": "original", "new_id": 1548}
{"id": 275, "function": "ST_GeomFromGML", "question": "有个立体的形状，它是由六块小平面连接而成的，每块小平面都有一些点，比如第一个是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个是(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，等等。你能把这些信息变成一种特别的格式吗？", "sql": "SELECT ST_AsEWKT(ST_GeomFromGML(' <gml:PolyhedralSurface xmlns:gml=\"http://www.opengis.net/gml\"> <gml:polygonPatches> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> </gml:polygonPatches> </gml:PolyhedralSurface >'));", "execution_result": [["POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0)),((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0)),((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0)),((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a 3D shape made up of six little flat pieces, each with some points, like the first one is (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), and the second is (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), and so on. Can you turn this information into a special format?", "source": "original", "new_id": 1541}
{"id": 276, "function": "ST_GeomFromGeoJSON", "question": "把那个有经度-48.23456和纬度20.12345的小点转换成一种常见的文本格式，你知道是哪种吗？", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}')) AS wkt;", "execution_result": [["POINT(-48.23456 20.12345)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that little dot with longitude -48.23456 and latitude 20.12345 into a common text format, do you know which one?", "source": "original", "new_id": 1546}
{"id": 276, "function": "ST_GeomFromGeoJSON", "question": "把那个有点像坐标[-48.23456,20.12345]的小点，转换成一种常见的文本格式。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}')) AS wkt;", "execution_result": [["POINT(-48.23456 20.12345)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little dot that resembles coordinates [-48.23456,20.12345] and turn it into a common text format.", "source": "original", "new_id": 1544}
{"id": 277, "function": "ST_GeomFromGeoJSON", "question": "你能用一种特别的方式描述从这些坐标[1,2,3]、[4,5,6]、[7,8,9]组成的线吗？", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}')) AS wkt;", "execution_result": [["LINESTRING Z (1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you describe in a special way the line formed by these coordinates [1,2,3], [4,5,6], [7,8,9]?", "source": "original", "new_id": 1552}
{"id": 277, "function": "ST_GeomFromGeoJSON", "question": "把那个有点像线条的东西，用那串包含[1,2,3]、[4,5,6]、[7,8,9]的文字描述，看看它会变成什么样的文本格式。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}')) AS wkt;", "execution_result": [["LINESTRING Z (1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that thing that resembles a line, described by the string containing [1,2,3], [4,5,6], [7,8,9], and see what text format it turns into.", "source": "original", "new_id": 1550}
{"id": 276, "function": "ST_GeomFromGeoJSON", "question": "把那个有点像地图上标记的小点，坐标是[-48.23456,20.12345]，变成一种常见的文本形式。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}')) AS wkt;", "execution_result": [["POINT(-48.23456 20.12345)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that thing like a map marker with coordinates [-48.23456,20.12345] into a common text format.", "source": "original", "new_id": 1547}
{"id": 276, "function": "ST_GeomFromGeoJSON", "question": "把那个包含坐标[-48.23456,20.12345]的小点从某种格式变成一种常见的文字描述。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}')) AS wkt;", "execution_result": [["POINT(-48.23456 20.12345)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that little point with coordinates [-48.23456,20.12345] from some format into a common text description.", "source": "original", "new_id": 1545}
{"id": 277, "function": "ST_GeomFromGeoJSON", "question": "如果你有一个包含这些点的奇妙线条：[1,2,3]、[4,5,6]、[7,8,9]，用一种常见的文本格式表达它是什么样子？", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}')) AS wkt;", "execution_result": [["LINESTRING Z (1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you have a magical line made up of these points: [1,2,3], [4,5,6], [7,8,9], how would you describe it in a common text format?", "source": "original", "new_id": 1551}
{"id": 275, "function": "ST_GeomFromGML", "question": "把那个有六个小面片的三维形状，从一种格式变成另一种格式，每个面片都有一串数字坐标。第一个是0 0 0到0 0 1到0 1 1到0 1 0再回到0 0 0，第二个是0 0 0到0 1 0到1 1 0到1 0 0再回到0 0 0，第三个是0 0 0到1 0 0到1 0 1到0 0 1再回到0 0 0，第四个是1 1 0到1 1 1到1 0 1到1 0 0再回到1 1 0，第五个是0 1 0到0 1 1到1 1 1到1 1 0再回到0 1 0，第六个是0 0 1到1 0 1到1 1 1到0 1 1再回到0 0 1。", "sql": "SELECT ST_AsEWKT(ST_GeomFromGML(' <gml:PolyhedralSurface xmlns:gml=\"http://www.opengis.net/gml\"> <gml:polygonPatches> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> </gml:polygonPatches> </gml:PolyhedralSurface >'));", "execution_result": [["POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0)),((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0)),((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0)),((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change that 3D shape with six little faces from one format to another, each face has a sequence of number coordinates. The first is 0 0 0 to 0 0 1 to 0 1 1 to 0 1 0 and back to 0 0 0, the second is 0 0 0 to 0 1 0 to 1 1 0 to 1 0 0 and back to 0 0 0, the third is 0 0 0 to 1 0 0 to 1 0 1 to 0 0 1 and back to 0 0 0, the fourth is 1 1 0 to 1 1 1 to 1 0 1 to 1 0 0 and back to 1 1 0, the fifth is 0 1 0 to 0 1 1 to 1 1 1 to 1 1 0 and back to 0 1 0, the sixth is 0 0 1 to 1 0 1 to 1 1 1 to 0 1 1 and back to 0 0 1.", "source": "original", "new_id": 1537}
{"id": 278, "function": "ST_GeomFromKML", "question": "把那个描述两点的小线条，坐标分别是-71.1663,42.2614和-71.1667,42.2616，变成适合使用的形状呢？", "sql": "SELECT ST_GeomFromKML($$ <LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString> $$);", "execution_result": [["0102000020E610000002000000CA54C1A8A4CA51C05396218E75214540910F7A36ABCA51C01A51DA1B7C214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you turn that little line describing two points, with coordinates -71.1663,42.2614 and -71.1667,42.2616, into a usable shape?", "source": "original", "new_id": 1554}
{"id": 277, "function": "ST_GeomFromGeoJSON", "question": "从一个包含坐标的字符串中，有一种方法可以变成一个线条的形状，你能把这个形状的描述告诉我吗？坐标是这些：[1,2,3],[4,5,6],[7,8,9]。", "sql": "SELECT ST_AsText(ST_GeomFromGeoJSON('{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6],[7,8,9]]}')) AS wkt;", "execution_result": [["LINESTRING Z (1 2 3,4 5 6,7 8 9)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "From a string containing coordinates, there's a way to turn it into a line shape. Can you tell me the description of this shape? The coordinates are these: [1,2,3],[4,5,6],[7,8,9].", "source": "original", "new_id": 1553}
{"id": 278, "function": "ST_GeomFromKML", "question": "能不能给我一个用那种标记语言描述的线条，有两个点，一个在-71.1663,42.2614，另一个在-71.1667,42.2616？", "sql": "SELECT ST_GeomFromKML($$ <LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString> $$);", "execution_result": [["0102000020E610000002000000CA54C1A8A4CA51C05396218E75214540910F7A36ABCA51C01A51DA1B7C214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you give me a line described in that markup language, with two points, one at -71.1663,42.2614 and the other at -71.1667,42.2616?", "source": "original", "new_id": 1555}
{"id": 278, "function": "ST_GeomFromKML", "question": "试着去弄清楚从某种KML格式的线状路径中得出的空间形状，这条路径上有两个点，分别在-71.1663,42.2614和-71.1667,42.2616。", "sql": "SELECT ST_GeomFromKML($$ <LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString> $$);", "execution_result": [["0102000020E610000002000000CA54C1A8A4CA51C05396218E75214540910F7A36ABCA51C01A51DA1B7C214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Try to figure out the spatial shape derived from some kind of line path in KML format, which has two points at -71.1663,42.2614 and -71.1667,42.2616.", "source": "original", "new_id": 1556}
{"id": 278, "function": "ST_GeomFromKML", "question": "请找出由描述两个点-71.1663,42.2614和-71.1667,42.2616的线段形成的图形。", "sql": "SELECT ST_GeomFromKML($$ <LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString> $$);", "execution_result": [["0102000020E610000002000000CA54C1A8A4CA51C05396218E75214540910F7A36ABCA51C01A51DA1B7C214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please identify the shape formed by a line segment described by the two points -71.1663,42.2614 and -71.1667,42.2616.", "source": "original", "new_id": 1559}
{"id": 278, "function": "ST_GeomFromKML", "question": "把包含坐标点-71.1663,42.2614和-71.1667,42.2616的那段KML字符串变成一种几何形状，看看结果是什么。", "sql": "SELECT ST_GeomFromKML($$ <LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString> $$);", "execution_result": [["0102000020E610000002000000CA54C1A8A4CA51C05396218E75214540910F7A36ABCA51C01A51DA1B7C214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform that stretch of KML string with the coordinates -71.1663,42.2614 and -71.1667,42.2616 into some kind of geometric shape, and see what comes out.", "source": "original", "new_id": 1557}
{"id": 278, "function": "ST_GeomFromKML", "question": "把那个包含起始和结束小点的KML文件转成一个PostGIS的形状，坐标是-71.1663,42.2614到-71.1667,42.2616。", "sql": "SELECT ST_GeomFromKML($$ <LineString> <coordinates >-71.1663,42.2614 -71.1667,42.2616</coordinates> </LineString> $$);", "execution_result": [["0102000020E610000002000000CA54C1A8A4CA51C05396218E75214540910F7A36ABCA51C01A51DA1B7C214540"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert that KML file with starting and ending little dots into a PostGIS shape, with coordinates from -71.1663,42.2614 to -71.1667,42.2616.", "source": "original", "new_id": 1558}
{"id": 275, "function": "ST_GeomFromGML", "question": "把由六个小面构成的立体形状，从一个叫GML的格式变成另一种叫EWKT的格式。每个小面的顶点都是像(0 0 0)这样的小点，具体是：第一个小面有(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)，第二个小面有(0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)，接着还有其他小面，它们的点分别是(0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)，(1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)，(0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)，最后一个小面有(0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)。", "sql": "SELECT ST_AsEWKT(ST_GeomFromGML(' <gml:PolyhedralSurface xmlns:gml=\"http://www.opengis.net/gml\"> <gml:polygonPatches> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing ><gml:posList srsDimension=\"3\" >0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList ></gml:LinearRing> </gml:exterior> </gml:PolygonPatch> </gml:polygonPatches> </gml:PolyhedralSurface >'));", "execution_result": [["POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,1 0 1,0 0 1,0 0 0)),((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0)),((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0)),((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn a 3D shape made of six flat sides from something called GML format into another one called EWKT. Each face has corners like (0 0 0), specifically: the first face has (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), the second face has (0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0), and then the other faces have points (0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0), (1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0), (0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0), and the last face has (0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1).", "source": "original", "new_id": 1539}
{"id": 279, "function": "ST_GeomFromTWKB", "question": "把那些连接点(126 34, 127 35)的线变成一种简化的格式，再把它变回原来的样子，最后看看它的文字表达。", "sql": "SELECT ST_AsText(ST_GeomFromTWKB(ST_AsTWKB('LINESTRING(126 34, 127 35)'::geometry)));", "execution_result": [["LINESTRING(126 34,127 35)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the line connecting those points (126 34, 127 35) into a simpler format, then change it back to its original form, and finally see its text expression.", "source": "original", "new_id": 1560}
{"id": 279, "function": "ST_GeomFromTWKB", "question": "把那个连接了126 34到127 35的小线条变成一种特别的格式，然后再变回普通的样子，最后看看它的文本样子是什么。", "sql": "SELECT ST_AsText(ST_GeomFromTWKB(ST_AsTWKB('LINESTRING(126 34, 127 35)'::geometry)));", "execution_result": [["LINESTRING(126 34,127 35)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little line connecting 126 34 to 127 35, turn it into a special format, then change it back to its usual form, and finally see what its text version looks like.", "source": "original", "new_id": 1563}
{"id": 279, "function": "ST_GeomFromTWKB", "question": "把那些坐标126 34到127 35变成一种二进制格式，再转回来，最后看看它的文字描述。", "sql": "SELECT ST_AsText(ST_GeomFromTWKB(ST_AsTWKB('LINESTRING(126 34, 127 35)'::geometry)));", "execution_result": [["LINESTRING(126 34,127 35)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those coordinates from 126 34 to 127 35, turn them into some kind of binary format, then change them back, and finally see their text description.", "source": "original", "new_id": 1564}
{"id": 279, "function": "ST_GeomFromTWKB", "question": "把一条从126 34到127 35的线变成一种压缩的格式，再转换回来，然后告诉我它的标准文字形式。", "sql": "SELECT ST_AsText(ST_GeomFromTWKB(ST_AsTWKB('LINESTRING(126 34, 127 35)'::geometry)));", "execution_result": [["LINESTRING(126 34,127 35)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn a line from 126 34 to 127 35 into some compressed format, convert it back, and then tell me its standard text form.", "source": "original", "new_id": 1565}
{"id": 280, "function": "ST_GeomFromTWKB", "question": "把神秘的编码E'\\x620002f7f40dbce4040105'变成一个图形，然后用一种特别的方式展示出来，记得要带上那个数字标识。", "sql": "SELECT ST_AsEWKT(ST_GeomFromTWKB(E'\\\\x620002f7f40dbce4040105'));", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform the mysterious code E'\\x620002f7f40dbce4040105' into a shape and display it in a special way, making sure to include that number identifier.", "source": "original", "new_id": 1566}
{"id": 279, "function": "ST_GeomFromTWKB", "question": "把那些点组成的线，经过一种特别的转换，看看最后是什么样子，记得要用126 34和127 35这些数字哦。", "sql": "SELECT ST_AsText(ST_GeomFromTWKB(ST_AsTWKB('LINESTRING(126 34, 127 35)'::geometry)));", "execution_result": [["LINESTRING(126 34,127 35)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those points and make a line, then go through a special conversion to see what it ends up looking like, remember to use the numbers 126 34 and 127 35.", "source": "original", "new_id": 1561}
{"id": 279, "function": "ST_GeomFromTWKB", "question": "拿着两个点，像是(126,34)和(127,35)，把它变成一种特别的编码，然后再变回原来的样子，最后看看它的文字样子是什么。", "sql": "SELECT ST_AsText(ST_GeomFromTWKB(ST_AsTWKB('LINESTRING(126 34, 127 35)'::geometry)));", "execution_result": [["LINESTRING(126 34,127 35)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take two points, like (126,34) and (127,35), turn it into a special code, then change it back to its original form, and finally see what its text version looks like.", "source": "original", "new_id": 1562}
{"id": 280, "function": "ST_GeomFromTWKB", "question": "把那些奇怪的编码E'\\x620002f7f40dbce4040105'变成一个图形，然后用一种特别的格式显示出来。", "sql": "SELECT ST_AsEWKT(ST_GeomFromTWKB(E'\\\\x620002f7f40dbce4040105'));", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that strange encoded string E'\\x620002f7f40dbce4040105' and turn it into a shape, then display it in a special format.", "source": "original", "new_id": 1570}
{"id": 280, "function": "ST_GeomFromTWKB", "question": "把这个奇怪的编码E'\\x620002f7f40dbce4040105'弄成一个可以画出来的形状，然后以一种带编号的方式说出来。", "sql": "SELECT ST_AsEWKT(ST_GeomFromTWKB(E'\\\\x620002f7f40dbce4040105'));", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take this strange code E'\\x620002f7f40dbce4040105' and turn it into something drawable, then describe it in a numbered way.", "source": "original", "new_id": 1569}
{"id": 280, "function": "ST_GeomFromTWKB", "question": "把一个神秘的编码，像是E'\\x620002f7f40dbce4040105'这样的，变成一个几何形状，然后用一种能显示细节的方式来表达它。", "sql": "SELECT ST_AsEWKT(ST_GeomFromTWKB(E'\\\\x620002f7f40dbce4040105'));", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a mysterious code, something like E'\\x620002f7f40dbce4040105', and turn it into a geometric shape, then express it in a way that shows details.", "source": "original", "new_id": 1567}
{"id": 280, "function": "ST_GeomFromTWKB", "question": "把那些奇怪的编码字符串E'\\x620002f7f40dbce4040105'变成一个可以看懂的形状，最后用一种带编号的信息格式展示出来。", "sql": "SELECT ST_AsEWKT(ST_GeomFromTWKB(E'\\\\x620002f7f40dbce4040105'));", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that odd encoded string E'\\x620002f7f40dbce4040105' into a readable shape, and finally display it using a format that includes a number.", "source": "original", "new_id": 1568}
{"id": 281, "function": "ST_LineFromEncodedPolyline", "question": "把那串神秘的编码'_p~iF~ps|U_ulLnnqC_mqNvxq`@'变成一条线，然后用一种特别的格式展示它的空间样子。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@'));", "execution_result": [["SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that mysterious code '_p~iF~ps|U_ulLnnqC_mqNvxq`@' and turn it into a line, then show its spatial appearance in a special format.", "source": "original", "new_id": 1572}
{"id": 281, "function": "ST_LineFromEncodedPolyline", "question": "把那个奇怪的字符串'_p~iF~ps|U_ulLnnqC_mqNvxq`@'变成一条线，然后看看它的详细描述。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@'));", "execution_result": [["SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that weird string '_p~iF~ps|U_ulLnnqC_mqNvxq`@' into a line and then check its detailed description.", "source": "original", "new_id": 1573}
{"id": 281, "function": "ST_LineFromEncodedPolyline", "question": "把这串特别的线条密码 '_p~iF~ps|U_ulLnnqC_mqNvxq`@'变成一个几何图形，然后用一种包含坐标信息的格式完整地展示出来。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@'));", "execution_result": [["SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn this special line code '_p~iF~ps|U_ulLnnqC_mqNvxq`@' into a geometry shape, and then fully show it in a format that includes coordinate info.", "source": "original", "new_id": 1574}
{"id": 280, "function": "ST_GeomFromTWKB", "question": "把那些奇怪的编码E'\\x620002f7f40dbce4040105'变成一个形状，并让它以某种方式显示出具体位置的格式。", "sql": "SELECT ST_AsEWKT(ST_GeomFromTWKB(E'\\\\x620002f7f40dbce4040105'));", "execution_result": [["LINESTRING(-113.98 39.198,-113.981 39.195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that odd code E'\\x620002f7f40dbce4040105' into a shape, and let it show up in a format that somehow includes the exact location.", "source": "original", "new_id": 1571}
{"id": 281, "function": "ST_LineFromEncodedPolyline", "question": "把那个神秘的编码线条 `_p~iF~ps|U_ulLnnqC_mqNvxq`@ 变成一个几何形状，然后用一种特别的方式展示出来。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@'));", "execution_result": [["SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that mysterious encoded line `_p~iF~ps|U_ulLnnqC_mqNvxq`@ into a geometric shape, then show it in a special way.", "source": "original", "new_id": 1577}
{"id": 282, "function": "ST_LineFromEncodedPolyline", "question": "把那个神秘的线条代码'_p~iF~ps|U_ulLnnqC_mqNvxq`@'解开，用6这个数字来帮忙变成一条线，然后看看它的完整样子，记得要有那个空间识别码哦。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@',6));", "execution_result": [["SRID=4326;LINESTRING(-12.02 3.85,-12.095 4.07,-12.6453 4.3252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Unravel that mysterious line code '_p~iF~ps|U_ulLnnqC_mqNvxq`@', use the number 6 to help turn it into a line, then see its complete form, remember to include that spatial identification code.", "source": "original", "new_id": 1579}
{"id": 281, "function": "ST_LineFromEncodedPolyline", "question": "有一个神秘的字符串 '_p~iF~ps|U_ulLnnqC_mqNvxq`@'，你能把它变成一个代表线段的形状，并用一种扩展的方式展示吗？", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@'));", "execution_result": [["SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a mysterious string '_p~iF~ps|U_ulLnnqC_mqNvxq`@', can you turn it into a shape representing a line segment and show it in an extended way?", "source": "original", "new_id": 1576}
{"id": 282, "function": "ST_LineFromEncodedPolyline", "question": "把这串神秘的线条代码'_p~iF~ps|U_ulLnnqC_mqNvxq`@'解开成一个小线条的形状，记得用6这个数字来处理，然后看看它长什么样子吧，顺便带上那些坐标的背景信息。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@',6));", "execution_result": [["SRID=4326;LINESTRING(-12.02 3.85,-12.095 4.07,-12.6453 4.3252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Unravel this mysterious line code '_p~iF~ps|U_ulLnnqC_mqNvxq`@' into a small line shape, remember to use the number 6 for processing, and then see what it looks like, including some background info of those coordinates.", "source": "original", "new_id": 1578}
{"id": 281, "function": "ST_LineFromEncodedPolyline", "question": "把那个奇怪的折线符号'_p~iF~ps|U_ulLnnqC_mqNvxq`@'变成几何线段，然后用一种空间参考的格式来展示它。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@'));", "execution_result": [["SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that strange polyline symbol '_p~iF~ps|U_ulLnnqC_mqNvxq`@', turn it into a geometry line, and show it using a format that includes spatial reference.", "source": "original", "new_id": 1575}
{"id": 283, "function": "ST_PointFromGeoHash", "question": "把这个奇怪的代码'9qqj7nmxncgyy4d0dbxqz0'变成一个小点，然后用一种常见的格式说出它的位置。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POINT(-115.17281600000001 36.11464599999999)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn this strange code '9qqj7nmxncgyy4d0dbxqz0' into a little dot, and then express its location in a common format.", "source": "original", "new_id": 1584}
{"id": 282, "function": "ST_LineFromEncodedPolyline", "question": "用一种方式把字符串'_p~iF~ps|U_ulLnnqC_mqNvxq`@'变成一条线，精度要是6，然后弄成那种包含详细信息的格式。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@',6));", "execution_result": [["SRID=4326;LINESTRING(-12.02 3.85,-12.095 4.07,-12.6453 4.3252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the string '_p~iF~ps|U_ulLnnqC_mqNvxq`@' and turn it into a line with precision 6, then make it into that format with detailed info.", "source": "original", "new_id": 1582}
{"id": 282, "function": "ST_LineFromEncodedPolyline", "question": "把那串神秘字符'_p~iF~ps|U_ulLnnqC_mqNvxq`@'用某种方式变成一条线，精度似乎是6，然后看看它的坐标系统扩展是啥样子。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@',6));", "execution_result": [["SRID=4326;LINESTRING(-12.02 3.85,-12.095 4.07,-12.6453 4.3252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that mysterious string '_p~iF~ps|U_ulLnnqC_mqNvxq`@', turn it into a line somehow, with a precision that seems to be 6, then see what its coordinate system extension looks like.", "source": "original", "new_id": 1580}
{"id": 282, "function": "ST_LineFromEncodedPolyline", "question": "把那个奇怪编码的折线变成一个线状的东西，记得用六的精细度，然后看它的完整描述，里面要有那些坐标系的东西。", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@',6));", "execution_result": [["SRID=4326;LINESTRING(-12.02 3.85,-12.095 4.07,-12.6453 4.3252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that strangely encoded line into something line-shaped, remember to use a precision of six, then check its full description, including those coordinate system things.", "source": "original", "new_id": 1583}
{"id": 283, "function": "ST_PointFromGeoHash", "question": "把这个神秘的'9qqj7nmxncgyy4d0dbxqz0'代码变成一个小点，然后用那种标准的文字格式来描述这个点。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POINT(-115.17281600000001 36.11464599999999)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn this mysterious '9qqj7nmxncgyy4d0dbxqz0' code into a little dot, and then describe this dot using that standard text format.", "source": "original", "new_id": 1585}
{"id": 283, "function": "ST_PointFromGeoHash", "question": "把那个特别长的编码'9qqj7nmxncgyy4d0dbxqz0'变成一个具体的小点，然后告诉我这个点的坐标是什么样的文字描述。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POINT(-115.17281600000001 36.11464599999999)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that really long code '9qqj7nmxncgyy4d0dbxqz0' and turn it into a specific little dot, then tell me what the coordinates of this dot look like in a text description.", "source": "original", "new_id": 1586}
{"id": 283, "function": "ST_PointFromGeoHash", "question": "把这个奇怪的编码'9qqj7nmxncgyy4d0dbxqz0'变成一个小点，然后告诉我这个点用标准格式怎么说。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POINT(-115.17281600000001 36.11464599999999)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn this mysterious code '9qqj7nmxncgyy4d0dbxqz0' into a little dot, then tell me how to say this dot in standard format.", "source": "original", "new_id": 1589}
{"id": 284, "function": "ST_PointFromGeoHash", "question": "把这个奇怪的编码'9qqj7nmxncgyy4d0dbxqz0'变成一个10位精度的小点，看看它的样子。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POINT(-115.17281591892242 36.11464351415634)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take this strange code '9qqj7nmxncgyy4d0dbxqz0' and turn it into a little dot with 10-digit precision to see what it looks like.", "source": "original", "new_id": 1590}
{"id": 282, "function": "ST_LineFromEncodedPolyline", "question": "有一个奇怪的字符串'_p~iF~ps|U_ulLnnqC_mqNvxq`@'，能不能把它转成那些连起来的点的形状，然后再看看它的详细样子是什么？", "sql": "SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@',6));", "execution_result": [["SRID=4326;LINESTRING(-12.02 3.85,-12.095 4.07,-12.6453 4.3252)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a strange string '_p~iF~ps|U_ulLnnqC_mqNvxq`@', can you turn it into those connected dots shape and then see what its detailed appearance is?", "source": "original", "new_id": 1581}
{"id": 283, "function": "ST_PointFromGeoHash", "question": "把这个奇怪的代码'9qqj7nmxncgyy4d0dbxqz0'变成一个小点，然后看看它的标准描述是什么。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POINT(-115.17281600000001 36.11464599999999)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take this odd code '9qqj7nmxncgyy4d0dbxqz0', turn it into a little dot, and see what its standard description is.", "source": "original", "new_id": 1587}
{"id": 283, "function": "ST_PointFromGeoHash", "question": "获取那个特别的编码'9qqj7nmxncgyy4d0dbxqz0'对应的点，然后用一种常见的文本格式来表达这个点的位置。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));", "execution_result": [["POINT(-115.17281600000001 36.11464599999999)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that special code '9qqj7nmxncgyy4d0dbxqz0' to find the point it represents, then use a common text format to show where this point is.", "source": "original", "new_id": 1588}
{"id": 284, "function": "ST_PointFromGeoHash", "question": "把那个长长的'9qqj7nmxncgyy4d0dbxqz0'字符串变成一个精确到10位的小点，并告诉我它的形状描述。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POINT(-115.17281591892242 36.11464351415634)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that long '9qqj7nmxncgyy4d0dbxqz0' string into a tiny dot with 10-digit precision, and tell me its shape description.", "source": "original", "new_id": 1593}
{"id": 284, "function": "ST_PointFromGeoHash", "question": "用那个叫'9qqj7nmxncgyy4d0dbxqz0'的奇怪码，把它变成一个点，弄得很精确，差不多10位的样子，然后看看它长啥样，用文字形式描述一下。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POINT(-115.17281591892242 36.11464351415634)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Using that odd code '9qqj7nmxncgyy4d0dbxqz0', turn it into a point with high precision, like around 10 digits, and then see what it looks like, describing it in text form.", "source": "original", "new_id": 1591}
{"id": 284, "function": "ST_PointFromGeoHash", "question": "把编码'9qqj7nmxncgyy4d0dbxqz0'变成一个很精确的小点，有10位那么多，然后告诉我这个点长什么样子。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POINT(-115.17281591892242 36.11464351415634)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the code '9qqj7nmxncgyy4d0dbxqz0' into a very precise little dot, as precise as 10 digits, and then tell me what this dot looks like.", "source": "original", "new_id": 1595}
{"id": 284, "function": "ST_PointFromGeoHash", "question": "把那串神秘的地理编码'9qqj7nmxncgyy4d0dbxqz0'变成一个精度是10的小点，然后用某种方式把它变成文本格式。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POINT(-115.17281591892242 36.11464351415634)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that mysterious GeoHash string '9qqj7nmxncgyy4d0dbxqz0' and turn it into a little point with precision of 10, then somehow convert it into a text format.", "source": "original", "new_id": 1592}
{"id": 284, "function": "ST_PointFromGeoHash", "question": "把那些奇怪的字符'9qqj7nmxncgyy4d0dbxqz0'变成一个精度有10位的小点，然后用某种方式展示它的样子。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));", "execution_result": [["POINT(-115.17281591892242 36.11464351415634)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those strange characters '9qqj7nmxncgyy4d0dbxqz0' into a little dot with 10-digit precision and show its appearance in some way.", "source": "original", "new_id": 1594}
{"id": 285, "function": "ST_PointFromGeoHash", "question": "把那个长长的地理编码字符串'9qqj7nmxncgyy4d0dbxqz0'的前面几位变成一个小点，然后用文字方式显示这个点的位置。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POINT(-115.13671875 36.123046875)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform the beginning of that long geographic code '9qqj7nmxncgyy4d0dbxqz0' into a little dot, and then show the location of this dot in a textual way.", "source": "original", "new_id": 1596}
{"id": 285, "function": "ST_PointFromGeoHash", "question": "拿那个很长的GeoHash值'9qqj7nmxncgyy4d0dbxqz0'，用前面四个字符来搞一个点，然后告诉我这个点的样子是什么。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POINT(-115.13671875 36.123046875)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that long GeoHash value '9qqj7nmxncgyy4d0dbxqz0', use the first four characters to make a point, then tell me what this point looks like.", "source": "original", "new_id": 1597}
{"id": 285, "function": "ST_PointFromGeoHash", "question": "把那个很长的'9qqj7nmxncgyy4d0dbxqz0'代码变成一个小点，用4这个数字来简化，然后告诉我这个点的位置。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POINT(-115.13671875 36.123046875)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that long '9qqj7nmxncgyy4d0dbxqz0' code and turn it into a little dot, simplify it using the number 4, then tell me the location of this dot.", "source": "original", "new_id": 1600}
{"id": 285, "function": "ST_PointFromGeoHash", "question": "把这个神秘的字符串'9qqj7nmxncgyy4d0dbxqz0'变成一个小点，用一种方式让它只到4位，然后告诉我这个点的样子。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POINT(-115.13671875 36.123046875)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn this mysterious string '9qqj7nmxncgyy4d0dbxqz0' into a little dot, using a way to make it only to 4 digits, then tell me what this point looks like.", "source": "original", "new_id": 1601}
{"id": 285, "function": "ST_PointFromGeoHash", "question": "用一串叫做'9qqj7nmxncgyy4d0dbxqz0'的神秘代码，找出它在某个4位精度水平上的位置，然后用一种常见的文本格式描述这个位置。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POINT(-115.13671875 36.123046875)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "With a mysterious code called '9qqj7nmxncgyy4d0dbxqz0', figure out its location at some 4-digit precision level, and then describe this place in a common text format.", "source": "original", "new_id": 1598}
{"id": 287, "function": "ST_AsEWKT", "question": "有些坐标点，比如(60E30A41, 785C0241, 1.0)和其他两个，能不能用一种特别格式的串连成一条线？", "sql": "SELECT ST_AsEWKT('0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840')", "execution_result": [["CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can some coordinate points, like (60E30A41, 785C0241, 1.0) and two others, be strung together into a line in a special format?", "source": "original", "new_id": 1606}
{"id": 287, "function": "ST_AsEWKT", "question": "输出一个包含三个小点的3D线段，点的位置是(60E30A41, 785C0241, 1.0)、(18E20A41, 485F0241, 2.0)和(18E20A41, 305C0241, 3.0)，用某种格式表示。", "sql": "SELECT ST_AsEWKT('0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840')", "execution_result": [["CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Output a 3D linestring that strings together three little dots: (60E30A41, 785C0241, 1.0), (18E20A41, 485F0241, 2.0), and (18E20A41, 305C0241, 3.0), using some format.", "source": "original", "new_id": 1605}
{"id": 287, "function": "ST_AsEWKT", "question": "能不能把点(60E30A41,785C0241,3F800000)、点(18E20A41,485F0241,40000000)和点(18E20A41,305C0241,40080000)连成一条线，然后用一种特殊格式来表示？", "sql": "SELECT ST_AsEWKT('0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840')", "execution_result": [["CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you connect the points (60E30A41, 785C0241, 3F800000), (18E20A41, 485F0241, 40000000), and (18E20A41, 305C0241, 40080000) into a line, and then represent it in a special format?", "source": "original", "new_id": 1602}
{"id": 285, "function": "ST_PointFromGeoHash", "question": "用那个长长的地理编码字符串'9qqj7nmxncgyy4d0dbxqz0'，只看前面4个字符，想知道它变成一个点之后的样子是什么。", "sql": "SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));", "execution_result": [["POINT(-115.13671875 36.123046875)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Using that long geographic code '9qqj7nmxncgyy4d0dbxqz0', just look at the first 4 characters, and find out what it looks like when it turns into a point.", "source": "original", "new_id": 1599}
{"id": 287, "function": "ST_AsEWKT", "question": "请用一种特别的格式描述三个三维小点，它们分别位于(60E30A41, 785C0241, 1.0)、(18E20A41, 485F0241, 2.0)和(18E20A41, 305C0241, 3.0)之间，像连成一条线一样。", "sql": "SELECT ST_AsEWKT('0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840')", "execution_result": [["CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please describe in a special format three 3D little points located at (60E30A41, 785C0241, 1.0), (18E20A41, 485F0241, 2.0), and (18E20A41, 305C0241, 3.0), as if they are connected in a line.", "source": "original", "new_id": 1603}
{"id": 290, "function": "ST_AsText", "question": "把那个在(111.1111111, 1.1111111)的小点变成一种文字描述。", "sql": "SELECT ST_AsText('POINT(111.1111111 1.1111111)');", "execution_result": [["POINT(111.1111111 1.1111111)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that little dot at (111.1111111, 1.1111111) into a kind of text description.", "source": "original", "new_id": 1608}
{"id": 287, "function": "ST_AsEWKT", "question": "怎么能把三个点的线条变成一种特别的格式呢？点的坐标有些复杂，比如第一个点是60E30A41和785C0241，第二个和第三个点也有类似的数字，还有一些奇怪的高度值像1.0、2.0和3.0。", "sql": "SELECT ST_AsEWKT('0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840')", "execution_result": [["CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How can we turn a line of three points into a special format? The point coordinates are quite complex, like the first point is 60E30A41 and 785C0241, and the second and third points have similar numbers, with some odd height values like 1.0, 2.0, and 3.0.", "source": "original", "new_id": 1604}
{"id": 290, "function": "ST_AsText", "question": "能不能告诉我关于那些数字111.1111111和1.1111111的小点的文本形式呢？", "sql": "SELECT ST_AsText('POINT(111.1111111 1.1111111)');", "execution_result": [["POINT(111.1111111 1.1111111)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you tell me the text form of that little dot with numbers 111.1111111 and 1.1111111?", "source": "original", "new_id": 1611}
{"id": 290, "function": "ST_AsText", "question": "帮我看看那个点，数字是111.1111111在横边，1.1111111在竖边，怎么表达它的样子呢？", "sql": "SELECT ST_AsText('POINT(111.1111111 1.1111111)');", "execution_result": [["POINT(111.1111111 1.1111111)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you show me how that point looks, with the number 111.1111111 on the horizontal and 1.1111111 on the vertical?", "source": "original", "new_id": 1613}
{"id": 291, "function": "ST_AsBinary", "question": "把那个封闭的四边形用一种数字方式展示出来，记得用4326这个数字来处理哦。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Show that closed shape in a digital way, and remember to use the number 4326 for processing.", "source": "original", "new_id": 1614}
{"id": 290, "function": "ST_AsText", "question": "请问如何描述一下坐标在111.1111111和1.1111111的那个小点的文字版本？", "sql": "SELECT ST_AsText('POINT(111.1111111 1.1111111)');", "execution_result": [["POINT(111.1111111 1.1111111)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "How would you describe the text version of that little dot at coordinates 111.1111111 and 1.1111111?", "source": "original", "new_id": 1612}
{"id": 290, "function": "ST_AsText", "question": "把那个点的坐标，像是111.1111111和1.1111111，用一种常见的文字形式表达出来。", "sql": "SELECT ST_AsText('POINT(111.1111111 1.1111111)');", "execution_result": [["POINT(111.1111111 1.1111111)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Express the coordinates of that point, like 111.1111111 and 1.1111111, in a common text format.", "source": "original", "new_id": 1609}
{"id": 291, "function": "ST_AsBinary", "question": "把那个由0 0、0 1、1 1、1 0、0 0这些点围成的形状，经过4326的神秘转换后，变成电脑能读的二进制形式看看。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Take that shape made by points like 0 0, 0 1, 1 1, 1 0, 0 0, and after some mysterious 4326 conversion, turn it into a computer-readable binary form to see.", "source": "original", "new_id": 1616}
{"id": 291, "function": "ST_AsBinary", "question": "把由这些点(0 0)、(0 1)、(1 1)、(1 0)、(0 0)围成的图形，用一种电脑能直接读的格式来表示，坐标系统是4326。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Turn the shape made by these points (0 0), (0 1), (1 1), (1 0), (0 0) into a format that computers can read directly, with the coordinate system being 4326.", "source": "original", "new_id": 1615}
{"id": 292, "function": "ST_AsBinary", "question": "把那个包含点(0 0),(0 1),(1 1),(1 0)的形状，用一种特别的方式转换成电脑能读的二进制格式。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["AAAAAAMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAD/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Take that shape with points (0 0), (0 1), (1 1), (1 0) and change it into a binary format that computers can read in a special way.", "source": "original", "new_id": 1620}
{"id": 290, "function": "ST_AsText", "question": "对于那个在111.1111111和1.1111111交汇的小点，把它用一种文本方式表述出来，不要动那些小数。", "sql": "SELECT ST_AsText('POINT(111.1111111 1.1111111)');", "execution_result": [["POINT(111.1111111 1.1111111)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that tiny spot where 111.1111111 and 1.1111111 meet, express it in a text form without touching the decimals.", "source": "original", "new_id": 1610}
{"id": 291, "function": "ST_AsBinary", "question": "把那个形状哦，就是从0 0到0 1再到1 1再到1 0然后回到0 0的，转换成某种电脑能读的流格式，记得用4326的坐标哦。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Convert that shape, you know, starting from 0 0 to 0 1, then to 1 1, then 1 0, and back to 0 0, into some kind of computer-readable stream format, and use the 4326 coordinates.", "source": "original", "new_id": 1618}
{"id": 291, "function": "ST_AsBinary", "question": "把那个用数字4326标记的多边形（像是0 0, 0 1, 1 1, 1 0, 0 0这些点构成的形状）变成一种计算机能直接理解的格式，会是什么样子？", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "What would it look like if you turned that polygon marked with the number 4326, made of points like 0 0, 0 1, 1 1, 1 0, 0 0, into a format that a computer can directly understand?", "source": "original", "new_id": 1619}
{"id": 292, "function": "ST_AsBinary", "question": "能不能把那个围起来的形状用某种方式变成包含这些坐标的特别编码的数据？记得是0 0, 0 1, 1 1, 1 0, 0 0哦。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["AAAAAAMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAD/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Could you somehow transform that enclosed shape into specially encoded data containing these coordinates? Remember it's 0 0, 0 1, 1 1, 1 0, 0 0.", "source": "original", "new_id": 1621}
{"id": 291, "function": "ST_AsBinary", "question": "把那个由坐标0 0, 0 1, 1 1, 1 0, 0 0围成的形状，用一种计算机能直接读懂的方式表示出来，记得用4326这个数字。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Turn that shape surrounded by the coordinates 0 0, 0 1, 1 1, 1 0, 0 0 into a way that computers can directly understand, and remember to use the number 4326.", "source": "original", "new_id": 1617}
{"id": 292, "function": "ST_AsBinary", "question": "把那个用四个小点围成的形状，依照WGS84系统，变成某种计算机能读的格式，记得用XDR那种方式哦。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["AAAAAAMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAD/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Take that shape made by four little dots, according to the WGS84 system, and change it into a format a computer can read, remember to use that XDR way.", "source": "original", "new_id": 1623}
{"id": 293, "function": "ST_AsEWKB", "question": "把4326那种坐标系里的那个多边形，像(0 0,0 1,1 1,1 0,0 0)那样的，弄成一种特别格式输出。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAACDmEAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Take that polygon in the 4326 coordinate system, like (0 0,0 1,1 1,1 0,0 0), and turn it into a special format output.", "source": "original", "new_id": 1625}
{"id": 287, "function": "ST_AsEWKT", "question": "能不能给我一个用那些点组成的三维线，点的坐标就像是(60E30A41, 785C0241)配上1.0，其他两个点分别是(18E20A41, 485F0241)配上2.0，还有一个(18E20A41, 305C0241)配上3.0，整个形状用某种格式来表达？", "sql": "SELECT ST_AsEWKT('0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840')", "execution_result": [["CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you give me a 3D line made from those points, with coordinates like (60E30A41, 785C0241) paired with 1.0, and the other two points being (18E20A41, 485F0241) paired with 2.0, and (18E20A41, 305C0241) paired with 3.0, expressed in some format?", "source": "original", "new_id": 1607}
{"id": 293, "function": "ST_AsEWKB", "question": "把那些点(0 0)、(0 1)、(1 1)、(1 0)、(0 0)连起来的形状，用一种特别的格式在WGS84系统里展现出来。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAACDmEAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Take those dots (0 0), (0 1), (1 1), (1 0), (0 0) and show the shape they make in a special format within the WGS84 system.", "source": "original", "new_id": 1626}
{"id": 292, "function": "ST_AsBinary", "question": "把那个四边形的形状，坐标是(0 0, 0 1, 1 1, 1 0, 0 0)，换成一种特别的二进制格式，像是XDR那种。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["AAAAAAMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAD/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Turn that four-sided shape with coordinates (0 0, 0 1, 1 1, 1 0, 0 0) into a special binary format, like the XDR kind.", "source": "original", "new_id": 1624}
{"id": 292, "function": "ST_AsBinary", "question": "把那个有五个小点的形状，坐标分别是(0 0)、(0 1)、(1 1)、(1 0)、(0 0)，变成一种特别的数字串，记得用4326来处理哦。", "sql": "SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["AAAAAAMAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAD/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Transform that shape with five little dots, coordinates being (0 0), (0 1), (1 1), (1 0), (0 0), into a special string of numbers, and remember to handle it with 4326.", "source": "original", "new_id": 1622}
{"id": 293, "function": "ST_AsEWKB", "question": "把那个用数字标出来的多边形，像是从(0 0)走到(0 1)，再到(1 1)，然后(1 0)，最后回到起点(0 0)的那种，在一个叫4326的系统里，变成一种特别格式，能输出的那种。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAACDmEAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Take that polygon marked with numbers, like moving from (0 0) to (0 1), then to (1 1), then (1 0), and finally back to the start (0 0), in a system called 4326, and turn it into a special format that can be output.", "source": "original", "new_id": 1627}
{"id": 293, "function": "ST_AsEWKB", "question": "能不能把那个由(0 0,0 1,1 1,1 0,0 0)围成的小区域，用一种特别的格式来表示呢？", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAACDmEAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Can you take that small area enclosed by (0 0,0 1,1 1,1 0,0 0) and express it in a special format?", "source": "original", "new_id": 1630}
{"id": 293, "function": "ST_AsEWKB", "question": "把那个由点(0 0), (0 1), (1 1), (1 0), (0 0)围成的形状，用某种特别的二进制方式表现出来，记得它在一个叫4326的系统里哦。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAACDmEAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Show that shape made by points (0 0), (0 1), (1 1), (1 0), (0 0) using a special kind of binary way, and remember it's in a system called 4326.", "source": "original", "new_id": 1628}
{"id": 293, "function": "ST_AsEWKB", "question": "把那个由坐标(0 0, 0 1, 1 1, 1 0, 0 0)组成的形状，在某个全球定位系统下，变成一种特别的计算机语言格式。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["AQMAACDmEAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Transform the shape made from coordinates (0 0, 0 1, 1 1, 1 0, 0 0) in some global positioning system into a special computer language format.", "source": "original", "new_id": 1629}
{"id": 294, "function": "ST_AsEWKB", "question": "把由(0 0)、(0 1)、(1 1)、(1 0)、(0 0)围成的那个四边形，用一种特别的方式转换成特定格式的二进制数据，别忘了它是以4326为基准的。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["ACAAAAMAABDmAAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Take that shape formed by (0 0), (0 1), (1 1), (1 0), (0 0) and transform it in a special way into a specific format of binary data, and remember it's based on 4326.", "source": "original", "new_id": 1632}
{"id": 294, "function": "ST_AsEWKB", "question": "把那些点组成的多边形，比如从0到1这样的，转换成一种特别的格式，就像给它穿上特殊的衣服一样。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["ACAAAAMAABDmAAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Turn the polygon made of those points, like from 0 to 1, into a special format, as if dressing it in a special outfit.", "source": "original", "new_id": 1636}
{"id": 294, "function": "ST_AsEWKB", "question": "把那个四角形，角在(0 0),(0 1),(1 1),(1 0)和(0 0)，用一种特别的二进制形式展示，坐标是4326。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["ACAAAAMAABDmAAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Show that four-cornered shape with corners at (0 0), (0 1), (1 1), (1 0), and (0 0) in a special binary way, with coordinates being 4326.", "source": "original", "new_id": 1634}
{"id": 294, "function": "ST_AsEWKB", "question": "把那些点连成的四边形，用地球坐标系中的4326来描述，转成一种奇怪的字节格式。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["ACAAAAMAABDmAAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Take the four-sided shape made by those points, described in the 4326 earth coordinate system, and turn it into a peculiar byte format.", "source": "original", "new_id": 1631}
{"id": 294, "function": "ST_AsEWKB", "question": "把那个由这些点组成的形状，像(0,0)、(0,1)、(1,1)、(1,0)、(0,0)这样，变成一种特别的格式，用4326坐标系，然后用某种方式输出它。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["ACAAAAMAABDmAAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Take that shape made from these points, like (0,0), (0,1), (1,1), (1,0), (0,0), and change it into a special format using the 4326 coordinate system, then output it in a certain way.", "source": "original", "new_id": 1633}
{"id": 294, "function": "ST_AsEWKB", "question": "把那些点连起来形成的闭合形状(0 0,0 1,1 1,1 0,0 0)，用一种特别的次序来做成一种特殊的二进制，坐标系是4326。", "sql": "SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');", "execution_result": [["ACAAAAMAABDmAAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Take those connected dots forming a closed shape (0 0,0 1,1 1,1 0,0 0), and turn it into a special kind of binary using a particular order, with the coordinate system being 4326.", "source": "original", "new_id": 1635}
{"id": 295, "function": "ST_AsHEXEWKB", "question": "把那个由0到1的四边形，像是个小方块的形状，变成一种带有数字和字母的长串，记得它有4326这个数字哦。", "sql": "SELECT ST_AsHEXEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["0103000020E61000000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that shape from 0 to 1, like a little square, into a long string with numbers and letters, and remember it has the number 4326.", "source": "original", "new_id": 1637}
{"id": 295, "function": "ST_AsHEXEWKB", "question": "把那个包含点(0 0), (0 1), (1 1), (1 0), (0 0)的多边形，用某种方法变成一个很长的16进制代码，记得用4326哦。", "sql": "SELECT ST_AsHEXEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["0103000020E61000000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that shape made of points (0 0), (0 1), (1 1), (1 0), (0 0) into a long hexadecimal code, and remember to use 4326.", "source": "original", "new_id": 1642}
{"id": 295, "function": "ST_AsHEXEWKB", "question": "把那个围成方形的坐标点集合，像是(0 0, 0 1, 1 1, 1 0, 0 0)，用一种特别的十六进制方式表示出来，记得它是4326哦。", "sql": "SELECT ST_AsHEXEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["0103000020E61000000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that set of coordinates forming a square, like (0 0, 0 1, 1 1, 1 0, 0 0), and express it in a special hexadecimal way, remember it's 4326.", "source": "original", "new_id": 1641}
{"id": 296, "function": "ST_AsEncodedPolyline", "question": "把从那里的地方到那里的地方，沿着每段100002米的距离，变成可以在谷歌地图上显示的线条。", "sql": "SELECT ST_AsEncodedPolyline( ST_Segmentize( ST_GeogFromText('LINESTRING(-71.0519 42.4935,-122.4483 37.64)'), 100002)::geometry) AS encodedFlightPath;", "execution_result": [["kojbGjitpLonTt_~CijSfq~C{eR|a_DiaQvq_Dk|Ov``DgwNvn`D_rMz{`DolL`haDyfKfsaDaaJl}aD_{HtfbD_uGznbDunF`vbDmhEb|bD_bDfacDq{BdecD_uAdhcDon@~icD{GxjcDr\\njcDfcAdicDxiBtfcDfpCdccDvvDr~bD`}E~xbDhcGhrbDniHpjbDnoIzabDjuJ`xaDd{KhmaDt`MraaDbfN|t`DfkOhg`DhpPxx_D~tQhi_DpyR`y~Cx}Szg~CzaU|u}CpeVdc}C`iWto|CdlXj{{C`oYlf{CrqZvpzCzs[nzyCtu\\pcyChw]`lxCnx^~swCjy_@j{vCxy`@fbvC~ya@vhuCvyb@tntCbyc@htsC`xd@nyrCvve@j~qC|tf@zbqCvrg@dgpCdph@bkoCdmi@|nnCzij@lrmC`fk@xulCzal@~xkCh}l@b|jChxm@`_jC|rn@~aiC"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the path from there to there, segmenting it every 100002 meters, and turn it into lines that can be shown on Google Maps.", "source": "original", "new_id": 1643}
{"id": 295, "function": "ST_AsHEXEWKB", "question": "把由这些点(0 0)、(0 1)、(1 1)、(1 0)、(0 0)围起来的形状，转成一种长得像十六进制的字符串。", "sql": "SELECT ST_AsHEXEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["0103000020E61000000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the shape surrounded by these points (0 0), (0 1), (1 1), (1 0), (0 0) into a string that looks like hexadecimal.", "source": "original", "new_id": 1638}
{"id": 296, "function": "ST_AsEncodedPolyline", "question": "能否用一种特别的编码方式展示一条被分成每段100008米的小段的路线？", "sql": "SELECT ST_AsEncodedPolyline( ST_Segmentize( ST_GeogFromText('LINESTRING(-71.0519 42.4935,-122.4483 37.64)'), 100008)::geometry) AS encodedFlightPath;", "execution_result": [["kojbGjitpLonTt_~CijSfq~C{eR|a_DiaQvq_Dk|Ov``DgwNvn`D_rMz{`DolL`haDyfKfsaDaaJl}aD_{HtfbD_uGznbDunF`vbDmhEb|bD_bDfacDq{BdecD_uAdhcDon@~icD{GxjcDr\\njcDfcAdicDxiBtfcDfpCdccDvvDr~bD`}E~xbDhcGhrbDniHpjbDnoIzabDjuJ`xaDd{KhmaDt`MraaDbfN|t`DfkOhg`DhpPxx_D~tQhi_DpyR`y~Cx}Szg~CzaU|u}CpeVdc}C`iWto|CdlXj{{C`oYlf{CrqZvpzCzs[nzyCtu\\pcyChw]`lxCnx^~swCjy_@j{vCxy`@fbvC~ya@vhuCvyb@tntCbyc@htsC`xd@nyrCvve@j~qC|tf@zbqCvrg@dgpCdph@bkoCdmi@|nnCzij@lrmC`fk@xulCzal@~xkCh}l@b|jChxm@`_jC|rn@~aiC"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show a route, split into small segments of 100008 meters each, using a special kind of encoding?", "source": "original", "new_id": 1647}
{"id": 296, "function": "ST_AsEncodedPolyline", "question": "把从那两个点开始的线，分成每段最多10万米长，然后转换成一种可以在地图上用的特殊线条格式。", "sql": "SELECT ST_AsEncodedPolyline( ST_Segmentize( ST_GeogFromText('LINESTRING(-71.0519 42.4935,-122.4483 37.64)'), 100000)::geometry) AS encodedFlightPath;", "execution_result": [["kojbGjitpLonTt_~CijSfq~C{eR|a_DiaQvq_Dk|Ov``DgwNvn`D_rMz{`DolL`haDyfKfsaDaaJl}aD_{HtfbD_uGznbDunF`vbDmhEb|bD_bDfacDq{BdecD_uAdhcDon@~icD{GxjcDr\\njcDfcAdicDxiBtfcDfpCdccDvvDr~bD`}E~xbDhcGhrbDniHpjbDnoIzabDjuJ`xaDd{KhmaDt`MraaDbfN|t`DfkOhg`DhpPxx_D~tQhi_DpyR`y~Cx}Szg~CzaU|u}CpeVdc}C`iWto|CdlXj{{C`oYlf{CrqZvpzCzs[nzyCtu\\pcyChw]`lxCnx^~swCjy_@j{vCxy`@fbvC~ya@vhuCvyb@tntCbyc@htsC`xd@nyrCvve@j~qC|tf@zbqCvrg@dgpCdph@bkoCdmi@|nnCzij@lrmC`fk@xulCzal@~xkCh}l@b|jChxm@`_jC|rn@~aiC"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the line starting from those two points and split it into segments each no longer than 100,000 meters, then convert it into a special line format used on maps.", "source": "original", "new_id": 1645}
{"id": 296, "function": "ST_AsEncodedPolyline", "question": "把从这个地方(-71.0519 42.4935)跑到那个地方(-122.4483 37.64)的路线，按照每段100003米来切分，然后弄成一种特殊的线条格式。", "sql": "SELECT ST_AsEncodedPolyline( ST_Segmentize( ST_GeogFromText('LINESTRING(-71.0519 42.4935,-122.4483 37.64)'), 100003)::geometry) AS encodedFlightPath;", "execution_result": [["kojbGjitpLonTt_~CijSfq~C{eR|a_DiaQvq_Dk|Ov``DgwNvn`D_rMz{`DolL`haDyfKfsaDaaJl}aD_{HtfbD_uGznbDunF`vbDmhEb|bD_bDfacDq{BdecD_uAdhcDon@~icD{GxjcDr\\njcDfcAdicDxiBtfcDfpCdccDvvDr~bD`}E~xbDhcGhrbDniHpjbDnoIzabDjuJ`xaDd{KhmaDt`MraaDbfN|t`DfkOhg`DhpPxx_D~tQhi_DpyR`y~Cx}Szg~CzaU|u}CpeVdc}C`iWto|CdlXj{{C`oYlf{CrqZvpzCzs[nzyCtu\\pcyChw]`lxCnx^~swCjy_@j{vCxy`@fbvC~ya@vhuCvyb@tntCbyc@htsC`xd@nyrCvve@j~qC|tf@zbqCvrg@dgpCdph@bkoCdmi@|nnCzij@lrmC`fk@xulCzal@~xkCh}l@b|jChxm@`_jC|rn@~aiC"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the route from this place (-71.0519 42.4935) to that place (-122.4483 37.64), chop it into parts of 100003 meters each, and then turn it into a special line format.", "source": "original", "new_id": 1644}
{"id": 295, "function": "ST_AsHEXEWKB", "question": "把那个有五个点的形状，坐标是(0 0)、(0 1)、(1 1)、(1 0)、(0 0)，变成一种特别的字符串。", "sql": "SELECT ST_AsHEXEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["0103000020E61000000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that shape with five points, coordinates like (0 0), (0 1), (1 1), (1 0), (0 0), into a special kind of string.", "source": "original", "new_id": 1639}
{"id": 295, "function": "ST_AsHEXEWKB", "question": "把那个围绕点(0 0,0 1,1 1,1 0,0 0)的图形，按某种编码方式变成一串十六进制的字符。", "sql": "SELECT ST_AsHEXEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["0103000020E61000000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that shape around the points (0 0,0 1,1 1,1 0,0 0) into a string of hexadecimal characters using some kind of encoding.", "source": "original", "new_id": 1640}
{"id": 296, "function": "ST_AsEncodedPolyline", "question": "把那个从-71.0519到-122.4483之间的线条分成每段最多10万米的长度，然后变成一种适合地图显示的串。", "sql": "SELECT ST_AsEncodedPolyline( ST_Segmentize( ST_GeogFromText('LINESTRING(-71.0519 42.4935,-122.4483 37.64)'), 100000)::geometry) AS encodedFlightPath;", "execution_result": [["kojbGjitpLonTt_~CijSfq~C{eR|a_DiaQvq_Dk|Ov``DgwNvn`D_rMz{`DolL`haDyfKfsaDaaJl}aD_{HtfbD_uGznbDunF`vbDmhEb|bD_bDfacDq{BdecD_uAdhcDon@~icD{GxjcDr\\njcDfcAdicDxiBtfcDfpCdccDvvDr~bD`}E~xbDhcGhrbDniHpjbDnoIzabDjuJ`xaDd{KhmaDt`MraaDbfN|t`DfkOhg`DhpPxx_D~tQhi_DpyR`y~Cx}Szg~CzaU|u}CpeVdc}C`iWto|CdlXj{{C`oYlf{CrqZvpzCzs[nzyCtu\\pcyChw]`lxCnx^~swCjy_@j{vCxy`@fbvC~ya@vhuCvyb@tntCbyc@htsC`xd@nyrCvve@j~qC|tf@zbqCvrg@dgpCdph@bkoCdmi@|nnCzij@lrmC`fk@xulCzal@~xkCh}l@b|jChxm@`_jC|rn@~aiC"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that line from -71.0519 to -122.4483 and split it into parts no longer than 100,000 meters each, then turn it into a string suitable for map display.", "source": "original", "new_id": 1648}
{"id": 297, "function": "ST_AsEncodedPolyline", "question": "能不能给我一个用那些点（-120.2 38.5), (-120.95 40.7), (-126.453 43.252)连起来的线的神秘字符串？", "sql": "SELECT ST_AsEncodedPolyline(GeomFromEWKT('SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)'));", "execution_result": [["_p~iF~ps|U_ulLnnqC_mqNvxq`@"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you give me a mysterious string for the line connecting those points (-120.2 38.5), (-120.95 40.7), (-126.453 43.252)?", "source": "original", "new_id": 1649}
{"id": 297, "function": "ST_AsEncodedPolyline", "question": "把那些坐标点连起来形成的线，经过某种转换，得到一个特殊的字符串，坐标是(-120.2 38.5)、(-120.95 40.7)和(-126.453 43.252)。", "sql": "SELECT ST_AsEncodedPolyline(GeomFromEWKT('SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)'));", "execution_result": [["_p~iF~ps|U_ulLnnqC_mqNvxq`@"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the line formed by connecting those coordinates into a special string through some conversion, with coordinates (-120.2 38.5), (-120.95 40.7), and (-126.453 43.252).", "source": "original", "new_id": 1651}
{"id": 297, "function": "ST_AsEncodedPolyline", "question": "帮我找出那些小点连成的线串，里面有-120.2 38.5、-120.95 40.7和-126.453 43.252，记得用4326来处理。", "sql": "SELECT ST_AsEncodedPolyline(GeomFromEWKT('SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)'));", "execution_result": [["_p~iF~ps|U_ulLnnqC_mqNvxq`@"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Help me find the string of little dots that connect -120.2 38.5, -120.95 40.7, and -126.453 43.252, and remember to handle it with 4326.", "source": "original", "new_id": 1652}
{"id": 297, "function": "ST_AsEncodedPolyline", "question": "把由这些点组成的路径，像-120.2 38.5, -120.95 40.7, -126.453 43.252，转成一种特别的字符串形式，记得用4326的那个编号。", "sql": "SELECT ST_AsEncodedPolyline(GeomFromEWKT('SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)'));", "execution_result": [["_p~iF~ps|U_ulLnnqC_mqNvxq`@"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the path made by these points, like -120.2 38.5, -120.95 40.7, -126.453 43.252, into a special string form, and remember to use that 4326 number.", "source": "original", "new_id": 1654}
{"id": 298, "function": "ST_AsGeobuf", "question": "把那些围成(0 0,0 1,1 1,1 0,0 0)的小点形成的形状，经过某种神秘的转换，然后用一种编码方式表示出来。", "sql": "SELECT encode(ST_AsGeobuf(q, 'geom'), 'base64') FROM (SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))') AS geom) AS q;", "execution_result": [["GAAiEAoOCgwIBBoIAAAAAgIAAAE="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those little dots forming (0 0,0 1,1 1,1 0,0 0) into a shape, perform some mysterious conversion, and then express it using a kind of encoding.", "source": "original", "new_id": 1655}
{"id": 298, "function": "ST_AsGeobuf", "question": "把那些点(0,0)、(0,1)、(1,1)、(1,0)围成的形状弄成一种奇怪的编码，然后给我那个结果。", "sql": "SELECT encode(ST_AsGeobuf(q, 'geom'), 'base64') FROM (SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))') AS geom) AS q;", "execution_result": [["GAAiEAoOCgwIBBoIAAAAAgIAAAE="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those points at (0,0), (0,1), (1,1), (1,0) and make a shape out of them, then turn it into some strange encoding and give me the result.", "source": "original", "new_id": 1656}
{"id": 298, "function": "ST_AsGeobuf", "question": "把那些围住0 0到1 1之间的小点的形状变成一种特殊的格式，然后再用一种编码方式来得到结果。", "sql": "SELECT encode(ST_AsGeobuf(q, 'geom'), 'base64') FROM (SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))') AS geom) AS q;", "execution_result": [["GAAiEAoOCgwIBBoIAAAAAgIAAAE="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform the shape that encircles those little dots from 0 0 to 1 1 into a special format, and then use a type of encoding to get the result.", "source": "original", "new_id": 1657}
{"id": 296, "function": "ST_AsEncodedPolyline", "question": "把从波士顿到旧金山的那根线，按照每段长度100007米切开，然后给我它的神秘编码版本。", "sql": "SELECT ST_AsEncodedPolyline( ST_Segmentize( ST_GeogFromText('LINESTRING(-71.0519 42.4935,-122.4483 37.64)'), 100007)::geometry) AS encodedFlightPath;", "execution_result": [["kojbGjitpLonTt_~CijSfq~C{eR|a_DiaQvq_Dk|Ov``DgwNvn`D_rMz{`DolL`haDyfKfsaDaaJl}aD_{HtfbD_uGznbDunF`vbDmhEb|bD_bDfacDq{BdecD_uAdhcDon@~icD{GxjcDr\\njcDfcAdicDxiBtfcDfpCdccDvvDr~bD`}E~xbDhcGhrbDniHpjbDnoIzabDjuJ`xaDd{KhmaDt`MraaDbfN|t`DfkOhg`DhpPxx_D~tQhi_DpyR`y~Cx}Szg~CzaU|u}CpeVdc}C`iWto|CdlXj{{C`oYlf{CrqZvpzCzs[nzyCtu\\pcyChw]`lxCnx^~swCjy_@j{vCxy`@fbvC~ya@vhuCvyb@tntCbyc@htsC`xd@nyrCvve@j~qC|tf@zbqCvrg@dgpCdph@bkoCdmi@|nnCzij@lrmC`fk@xulCzal@~xkCh}l@b|jChxm@`_jC|rn@~aiC"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that line from Boston to San Francisco, cut it into pieces each 100007 meters long, then give me its mysterious encoded version.", "source": "original", "new_id": 1646}
{"id": 297, "function": "ST_AsEncodedPolyline", "question": "给我那些点的连线，像是从-120.2 38.5到-120.95 40.7再到-126.453 43.252，看看它变成什么样的编码字符串吧。", "sql": "SELECT ST_AsEncodedPolyline(GeomFromEWKT('SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)'));", "execution_result": [["_p~iF~ps|U_ulLnnqC_mqNvxq`@"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the encoded string for connecting those points, like from -120.2 38.5 to -120.95 40.7 and then to -126.453 43.252.", "source": "original", "new_id": 1653}
{"id": 298, "function": "ST_AsGeobuf", "question": "把一个像这样的小方块(0 0,0 1,1 1,1 0,0 0)转成一种特别的格式，然后再变成一种编码后的字符串，结果是什么呢？", "sql": "SELECT encode(ST_AsGeobuf(q, 'geom'), 'base64') FROM (SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))') AS geom) AS q;", "execution_result": [["GAAiEAoOCgwIBBoIAAAAAgIAAAE="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a little square like this (0 0,0 1,1 1,1 0,0 0), turn it into a special format, and then into an encoded string, what would the result be?", "source": "original", "new_id": 1660}
{"id": 300, "function": "ST_AsGeoJSON", "question": "帮我找出从位置1、2、3到位置4、5、6的那条三维路径，给我它的特别格式。", "sql": "SELECT ST_AsGeoJSON('LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6]]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Help me find the 3D path from spot 1, 2, 3 to spot 4, 5, 6, and give me its special format.", "source": "original", "new_id": 1662}
{"id": 300, "function": "ST_AsGeoJSON", "question": "请你把那些连接的点，像1 2 3和4 5 6，变成一种常见的格式来看看吧。", "sql": "SELECT ST_AsGeoJSON('LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6]]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you turn those connected points, like 1 2 3 and 4 5 6, into a common format for us to see?", "source": "original", "new_id": 1661}
{"id": 300, "function": "ST_AsGeoJSON", "question": "能不能帮我弄一下那种格式化的东西，把那些点1 2 3和4 5 6连成线？", "sql": "SELECT ST_AsGeoJSON('LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6]]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you help me get that formatted thing, connecting those points 1 2 3 and 4 5 6 into a line?", "source": "original", "new_id": 1664}
{"id": 298, "function": "ST_AsGeobuf", "question": "把那个像方形的地形数据变成一种特别编码的字符串，坐标是从(0 0)到(1 1)再回到(0 0)。", "sql": "SELECT encode(ST_AsGeobuf(q, 'geom'), 'base64') FROM (SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))') AS geom) AS q;", "execution_result": [["GAAiEAoOCgwIBBoIAAAAAgIAAAE="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that square-like shape data into a special encoded string, with coordinates from (0 0) to (1 1) and back to (0 0).", "source": "original", "new_id": 1658}
{"id": 300, "function": "ST_AsGeoJSON", "question": "有一个从这儿到那儿的线段，它的坐标是1 2 3到4 5 6，能不能把它变成一种叫GeoJSON的格式？", "sql": "SELECT ST_AsGeoJSON('LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6]]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a line going from here to there, with coordinates 1 2 3 to 4 5 6. Can you turn it into something called GeoJSON?", "source": "original", "new_id": 1663}
{"id": 298, "function": "ST_AsGeobuf", "question": "把那个方形的图形，带着它的那些角落坐标(0 0,0 1,1 1,1 0,0 0)，弄成一种特别的格式，然后再用某种方式转成一串神秘的字符。", "sql": "SELECT encode(ST_AsGeobuf(q, 'geom'), 'base64') FROM (SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))') AS geom) AS q;", "execution_result": [["GAAiEAoOCgwIBBoIAAAAAgIAAAE="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that square shape, with its corner coordinates (0 0,0 1,1 1,1 0,0 0), turn it into a special format, and then somehow convert it into a string of mysterious characters.", "source": "original", "new_id": 1659}
{"id": 300, "function": "ST_AsGeoJSON", "question": "能不能把那条从(1,2,3)到(4,5,6)的线变成一个GeoJSON的样子呢？", "sql": "SELECT ST_AsGeoJSON('LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6]]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you turn that line from (1,2,3) to (4,5,6) into a GeoJSON format?", "source": "original", "new_id": 1665}
{"id": 300, "function": "ST_AsGeoJSON", "question": "给出一种把那些(1 2 3)和(4 5 6)两个点连接起来的长条形状的特别字符串。", "sql": "SELECT ST_AsGeoJSON('LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["{\"type\":\"LineString\",\"coordinates\":[[1,2,3],[4,5,6]]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide a special string that connects those two points (1 2 3) and (4 5 6) in a line shape.", "source": "original", "new_id": 1666}
{"id": 303, "function": "ST_AsGeoJSON", "question": "把那个有1和'one'这些信息的小点，变成一种能让大家都懂的格式，记得用1作为它的标记哦。", "sql": "SELECT ST_AsGeoJSON(t.*, id_column => 'id') FROM (VALUES (1, 'one', 'POINT(1 1)'::geometry)) AS t(id, name, geom);", "execution_result": [["{\"type\": \"Feature\", \"geometry\": {\"type\":\"Point\",\"coordinates\":[1,1]}, \"id\": 1, \"properties\": {\"name\": \"one\"}}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the little dot with 1 and 'one' into a format everyone can understand, and remember to use 1 as its label.", "source": "original", "new_id": 1678}
{"id": 302, "function": "ST_AsGeoJSON", "question": "请把坐标是(1, 1)的小点变成一种文本格式，记得用那个4326的编号，保留9个小数位，还有要加上长的那个坐标系统和边框的东西。", "sql": "SELECT ST_AsGeoJSON(ST_SetSRID('POINT(1 1)'::geometry, 4326), 9, 4|1);", "execution_result": [["{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::4326\"}},\"bbox\":[1.000000000,1.000000000,1.000000000,1.000000000],\"coordinates\":[1,1]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please change the little dot at coordinates (1, 1) into some kind of text format, remember to use the number 4326, keep 9 decimal places, and also add that long coordinate system and the boundary thing.", "source": "original", "new_id": 1667}
{"id": 303, "function": "ST_AsGeoJSON", "question": "把那个编号是1，名字叫'one'的小点变成一种常见的网络格式，记得要用编号作为它的独特标识。", "sql": "SELECT ST_AsGeoJSON(t.*, id_column => 'id') FROM (VALUES (1, 'one', 'POINT(1 1)'::geometry)) AS t(id, name, geom);", "execution_result": [["{\"type\": \"Feature\", \"geometry\": {\"type\":\"Point\",\"coordinates\":[1,1]}, \"id\": 1, \"properties\": {\"name\": \"one\"}}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that little dot with number 1 and name 'one' into a common web format, and remember to use the number as its unique identifier.", "source": "original", "new_id": 1673}
{"id": 303, "function": "ST_AsGeoJSON", "question": "把有1号和名字叫‘one’的东西，还有一个在(1 1)位置的小点，弄成那种地图数据的格式，记得把1号放在显眼的位置。", "sql": "SELECT ST_AsGeoJSON(t.*, id_column => 'id') FROM (VALUES (1, 'one', 'POINT(1 1)'::geometry)) AS t(id, name, geom);", "execution_result": [["{\"type\": \"Feature\", \"geometry\": {\"type\":\"Point\",\"coordinates\":[1,1]}, \"id\": 1, \"properties\": {\"name\": \"one\"}}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the item numbered 1, named 'one', along with a tiny dot at (1 1), and turn it into that map data format, making sure the number 1 is prominently placed.", "source": "original", "new_id": 1677}
{"id": 303, "function": "ST_AsGeoJSON", "question": "想象一下有个小表，里面有个编号是1、名字是'one'的小点，坐标是(1 1)。你能把这个化成一种网络上常用的格式吗？记得用'id'来标记它哦。", "sql": "SELECT ST_AsGeoJSON(t.*, id_column => 'id') FROM (VALUES (1, 'one', 'POINT(1 1)'::geometry)) AS t(id, name, geom);", "execution_result": [["{\"type\": \"Feature\", \"geometry\": {\"type\":\"Point\",\"coordinates\":[1,1]}, \"id\": 1, \"properties\": {\"name\": \"one\"}}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine there's a small table with a little dot having an id of 1, a name 'one', and coordinates (1 1). Can you turn this into a commonly used web format? Remember to label it with 'id'.", "source": "original", "new_id": 1675}
{"id": 302, "function": "ST_AsGeoJSON", "question": "把那个点1 1变成一个特别格式的字符串，坐标系是4326，要有9位小数，还有长的坐标系名字和边界信息。", "sql": "SELECT ST_AsGeoJSON(ST_SetSRID('POINT(1 1)'::geometry, 4326), 9, 4|1);", "execution_result": [["{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::4326\"}},\"bbox\":[1.000000000,1.000000000,1.000000000,1.000000000],\"coordinates\":[1,1]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that point 1 1 into a special format string, with coordinate system 4326, keeping 9 decimal places, along with a long coordinate system name and boundary information.", "source": "original", "new_id": 1670}
{"id": 302, "function": "ST_AsGeoJSON", "question": "把那些坐标(1 1)变成一种格式，看起来像GeoJSON，保留9个小数位，还有那个长的坐标系标识符，记得加上边界框的东西。", "sql": "SELECT ST_AsGeoJSON(ST_SetSRID('POINT(1 1)'::geometry, 4326), 9, 4|1);", "execution_result": [["{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::4326\"}},\"bbox\":[1.000000000,1.000000000,1.000000000,1.000000000],\"coordinates\":[1,1]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinates (1 1) into a format that looks like GeoJSON, keeping 9 decimal places, with that long coordinate system identifier, and don't forget the boundary box thing.", "source": "original", "new_id": 1671}
{"id": 302, "function": "ST_AsGeoJSON", "question": "把那个在(1, 1)的小点变成一种特别的地理格式，记得保持9位小数，还有一种编号是4326的参考系。顺便加上边界的东西和其他一些信息。", "sql": "SELECT ST_AsGeoJSON(ST_SetSRID('POINT(1 1)'::geometry, 4326), 9, 4|1);", "execution_result": [["{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::4326\"}},\"bbox\":[1.000000000,1.000000000,1.000000000,1.000000000],\"coordinates\":[1,1]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform that little dot at (1, 1) into a special geographic format, remember to keep 9 decimal places, and use a reference system numbered 4326. Also, include boundary stuff and some other information.", "source": "original", "new_id": 1668}
{"id": 303, "function": "ST_AsGeoJSON", "question": "把那个编号是1、名字是'one'的小点(1 1)变成一种大家都能读的格式，可以用编号来识别。", "sql": "SELECT ST_AsGeoJSON(t.*, id_column => 'id') FROM (VALUES (1, 'one', 'POINT(1 1)'::geometry)) AS t(id, name, geom);", "execution_result": [["{\"type\": \"Feature\", \"geometry\": {\"type\":\"Point\",\"coordinates\":[1,1]}, \"id\": 1, \"properties\": {\"name\": \"one\"}}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that little dot with number 1 and name 'one' at (1 1) into a format everyone can read, using the number as an identifier.", "source": "original", "new_id": 1676}
{"id": 303, "function": "ST_AsGeoJSON", "question": "你能把那个有三个数据的小表，里面有个编号是1，名字是'one'，还有个点在(1, 1)的，变成一个包含这些信息的特殊格式吗？记得要用编号作为标识。", "sql": "SELECT ST_AsGeoJSON(t.*, id_column => 'id') FROM (VALUES (1, 'one', 'POINT(1 1)'::geometry)) AS t(id, name, geom);", "execution_result": [["{\"type\": \"Feature\", \"geometry\": {\"type\":\"Point\",\"coordinates\":[1,1]}, \"id\": 1, \"properties\": {\"name\": \"one\"}}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you turn that little table with three pieces of data, where there's a number 1, a name 'one', and a point at (1, 1), into a special format that includes this information? Remember to use the number as the identifier.", "source": "original", "new_id": 1674}
{"id": 302, "function": "ST_AsGeoJSON", "question": "把那个在(1, 1)的点放在4326的地图框架里，然后用一种能看见很多小数点的方式说出来，还要包括一些位置和边界的信息。", "sql": "SELECT ST_AsGeoJSON(ST_SetSRID('POINT(1 1)'::geometry, 4326), 9, 4|1);", "execution_result": [["{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::4326\"}},\"bbox\":[1.000000000,1.000000000,1.000000000,1.000000000],\"coordinates\":[1,1]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that point at (1, 1), place it in the 4326 map framework, and then describe it in a way that shows many decimal places, also including some location and boundary information.", "source": "original", "new_id": 1669}
{"id": 302, "function": "ST_AsGeoJSON", "question": "把坐标是(1 1)的小点弄成那种带有4326编号的格式，要有个9位的小数，还得带上个框框和标识符。", "sql": "SELECT ST_AsGeoJSON(ST_SetSRID('POINT(1 1)'::geometry, 4326), 9, 4|1);", "execution_result": [["{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::4326\"}},\"bbox\":[1.000000000,1.000000000,1.000000000,1.000000000],\"coordinates\":[1,1]}"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the little dot at coordinates (1 1) into that format with number 4326, make sure it has 9 decimal places, and include a box and an identifier.", "source": "original", "new_id": 1672}
{"id": 304, "function": "ST_AsGML", "question": "把那个由多个面构成的小立方体形状，坐标是像(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)这样的，变成一种叫GML3的格式。", "sql": "SELECT ST_AsGML(3, ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["<gml:PolyhedralSurface><gml:polygonPatches><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch></gml:polygonPatches></gml:PolyhedralSurface>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that cube-like shape made of multiple faces, with coordinates like (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), and turn it into something called GML3 format.", "source": "original", "new_id": 1680}
{"id": 304, "function": "ST_AsGML", "question": "有一个3D的多面体，像是由六个小平面拼起来的，每个面都有一堆点，比如第一个面的点是(0 0 0), (0 0 1), (0 1 1), (0 1 0)这些。能不能把这个立体的东西变成一种叫GML3的文字描述呢？", "sql": "SELECT ST_AsGML(3, ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));", "execution_result": [["<gml:PolyhedralSurface><gml:polygonPatches><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch><gml:PolygonPatch><gml:exterior><gml:LinearRing><gml:posList srsDimension=\"3\">0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList></gml:LinearRing></gml:exterior></gml:PolygonPatch></gml:polygonPatches></gml:PolyhedralSurface>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a 3D shape made like a puzzle with six little surfaces, each with its own set of dots, like the first one has (0 0 0), (0 0 1), (0 1 1), (0 1 0). Can this solid thing be turned into some kind of text description called GML3?", "source": "original", "new_id": 1679}
{"id": 305, "function": "ST_AsGML", "question": "把那些连接点1 2, 3 4, 10 20的线，转换成一种格式，看起来像GML3，保留5个小数位，另外有个神秘的数字49要用上。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 49);", "execution_result": [["<gml:Envelope srsName=\"urn:ogc:def:crs:EPSG::4326\" srsDimension=\"2\"><gml:lowerCorner>2 1</gml:lowerCorner><gml:upperCorner>20 10</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the line that connects the points 1 2, 3 4, 10 20, and turn it into something that resembles GML3 format, keeping 5 decimal places, and there's also a mysterious number 49 to use.", "source": "original", "new_id": 1681}
{"id": 305, "function": "ST_AsGML", "question": "把那些数字坐标组成的线段变成一种特殊格式，记得要有五个数字的精度哦，另外有个属性要设置成49。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 49);", "execution_result": [["<gml:Envelope srsName=\"urn:ogc:def:crs:EPSG::4326\" srsDimension=\"2\"><gml:lowerCorner>2 1</gml:lowerCorner><gml:upperCorner>20 10</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the line made of those number coordinates into a special format, remember to keep five digits of precision, and there's an attribute that needs to be set to 49.", "source": "original", "new_id": 1686}
{"id": 297, "function": "ST_AsEncodedPolyline", "question": "把那些点连成一条线，用特别的编码方式，记得用4326这个数字。", "sql": "SELECT ST_AsEncodedPolyline(GeomFromEWKT('SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)'));", "execution_result": [["_p~iF~ps|U_ulLnnqC_mqNvxq`@"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those points into a line, using a special encoding method, and remember the number 4326.", "source": "original", "new_id": 1650}
{"id": 306, "function": "ST_AsGML", "question": "把那些坐标串成的线，像1 2，3 4，还有10 20，用某种格式显示出来，记得保留五位小数哦，还要用一个32的参数来做点什么事。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 32);", "execution_result": [["<gml:Envelope srsName=\"EPSG:4326\" srsDimension=\"2\"><gml:lowerCorner>1 2</gml:lowerCorner><gml:upperCorner>10 20</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those coordinates like 1 2, 3 4, and 10 20 that form a line, and show it in some kind of format, remember to keep five decimal places, and use a 32 parameter to do something.", "source": "original", "new_id": 1687}
{"id": 305, "function": "ST_AsGML", "question": "把连接这些点的线(1 2, 3 4, 10 20)变成一种特定的格式，保留五位小数，某个参数值是49。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 49);", "execution_result": [["<gml:Envelope srsName=\"urn:ogc:def:crs:EPSG::4326\" srsDimension=\"2\"><gml:lowerCorner>2 1</gml:lowerCorner><gml:upperCorner>20 10</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the line connecting these points (1 2, 3 4, 10 20) into a specific format, keeping five decimal places, with some parameter value being 49.", "source": "original", "new_id": 1685}
{"id": 305, "function": "ST_AsGML", "question": "把那些连在一起的点(1 2, 3 4, 10 20)变成一种叫GML3的格式，确保数字保留到小数点后5位，并且有个神秘的49在那里。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 49);", "execution_result": [["<gml:Envelope srsName=\"urn:ogc:def:crs:EPSG::4326\" srsDimension=\"2\"><gml:lowerCorner>2 1</gml:lowerCorner><gml:upperCorner>20 10</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those connected dots (1 2, 3 4, 10 20) into something called GML3 format, making sure to keep numbers to 5 decimal places, and there's a mysterious 49 involved.", "source": "original", "new_id": 1684}
{"id": 305, "function": "ST_AsGML", "question": "把那些连接的点，像1 2、3 4、10 20，在一个地球坐标系里，转换成一种特别的格式，记得保持五位数字的精度，还有一个参数要设成49。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 49);", "execution_result": [["<gml:Envelope srsName=\"urn:ogc:def:crs:EPSG::4326\" srsDimension=\"2\"><gml:lowerCorner>2 1</gml:lowerCorner><gml:upperCorner>20 10</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform those linked dots, like 1 2, 3 4, 10 20, in an Earth coordinate system into a special format, remember to keep five digits of precision, and set one of the options to 49.", "source": "original", "new_id": 1682}
{"id": 305, "function": "ST_AsGML", "question": "把那条由(1 2)、(3 4)、(10 20)这几个点连成的线，变成一种叫GML3的格式，记得保留5个小数点哦，还有49这个数字要加进去。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 49);", "execution_result": [["<gml:Envelope srsName=\"urn:ogc:def:crs:EPSG::4326\" srsDimension=\"2\"><gml:lowerCorner>2 1</gml:lowerCorner><gml:upperCorner>20 10</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that line made from the points (1 2), (3 4), and (10 20), and turn it into something called GML3 format, keeping 5 decimal places, and remember to include the number 49.", "source": "original", "new_id": 1683}
{"id": 306, "function": "ST_AsGML", "question": "把那些坐标串起来，像是1到2，再到3和4，最后到10和20，变成一种格式，精确到五个小数位，给它一个32号标记，用地球的坐标系。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 32);", "execution_result": [["<gml:Envelope srsName=\"EPSG:4326\" srsDimension=\"2\"><gml:lowerCorner>1 2</gml:lowerCorner><gml:upperCorner>10 20</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Link those coordinates together, like from 1 to 2, then to 3 and 4, finally to 10 and 20, into a certain format, precise to five decimal places, with a 32 number tag, using the Earth's coordinate system.", "source": "original", "new_id": 1688}
{"id": 306, "function": "ST_AsGML", "question": "能不能把那些连接点像1 2, 3 4, 10 20的线变成一种描述格式呢？记得要保留坐标的小数位哦，另外有个32的选项好像和边框有关。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 32);", "execution_result": [["<gml:Envelope srsName=\"EPSG:4326\" srsDimension=\"2\"><gml:lowerCorner>1 2</gml:lowerCorner><gml:upperCorner>10 20</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you turn those connecting points like 1 2, 3 4, 10 20 into some kind of descriptive format? Remember to keep the decimal places for the coordinates, and there's a 32 option that seems related to the border.", "source": "original", "new_id": 1689}
{"id": 306, "function": "ST_AsGML", "question": "请给我一串表示连着的点的图形，像是(1 2, 3 4, 10 20)这些点，用一种特别的格式来展示，保留一些小数位就好，记得要用32这个数字来标记它的空间参考。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 32);", "execution_result": [["<gml:Envelope srsName=\"EPSG:4326\" srsDimension=\"2\"><gml:lowerCorner>1 2</gml:lowerCorner><gml:upperCorner>10 20</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you give me a string representing connected dots, like those points (1 2, 3 4, 10 20), shown in a special format, just keep some decimal places, and remember to mark its spatial reference with the number 32.", "source": "original", "new_id": 1691}
{"id": 307, "function": "ST_AsGML", "question": "把坐标是(5.234234233242, 6.34534534534)的小点变成一种特别的格式，记得用五个数字来表示它的精细程度，保持它的独特身份有17位。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('POINT(5.234234233242 6.34534534534)',4326), 5, 17);", "execution_result": [["<gml:Point srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:pos srsDimension=\"2\">6.34535 5.23423</gml:pos></gml:Point>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the little point at (5.234234233242, 6.34534534534) into a special format, remember to use five numbers for its detail level, keeping its unique identity with 17 digits.", "source": "original", "new_id": 1693}
{"id": 307, "function": "ST_AsGML", "question": "把那个点(5.234234233242 6.34534534534)用某种格式转换一下，记得精确到小数点后5位，保持某个编号有17位长。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('POINT(5.234234233242 6.34534534534)',4326), 5, 17);", "execution_result": [["<gml:Point srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:pos srsDimension=\"2\">6.34535 5.23423</gml:pos></gml:Point>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that point (5.234234233242 6.34534534534) and change it into some format, make sure to round it to 5 decimal places, and keep a certain identifier 17 digits long.", "source": "original", "new_id": 1694}
{"id": 306, "function": "ST_AsGML", "question": "能不能把那些连起来的点，像1 2, 3 4, 10 20这些，用一种叫GML3的方式表现出来？记得要很精细哦，坐标要有五个小数点的那种，还有个32的神秘数字，可能和那个形状的外框有关。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 32);", "execution_result": [["<gml:Envelope srsName=\"EPSG:4326\" srsDimension=\"2\"><gml:lowerCorner>1 2</gml:lowerCorner><gml:upperCorner>10 20</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you show those connected dots, like 1 2, 3 4, 10 20, in a way called GML3? Remember to be very precise, with coordinates having five decimal places, and there's this mysterious number 32, maybe related to the shape's outer frame.", "source": "original", "new_id": 1692}
{"id": 306, "function": "ST_AsGML", "question": "能不能把那条穿过(1 2), (3 4), (10 20)的线段弄成一种叫GML3的格式，把小数留到第5位，顺便用32那个数字来处理？", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 32);", "execution_result": [["<gml:Envelope srsName=\"EPSG:4326\" srsDimension=\"2\"><gml:lowerCorner>1 2</gml:lowerCorner><gml:upperCorner>10 20</gml:upperCorner></gml:Envelope>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you turn the line that goes through (1 2), (3 4), (10 20) into something called GML3 format, keeping decimals to the 5th place, and use that number 32 while you're at it?", "source": "original", "new_id": 1690}
{"id": 307, "function": "ST_AsGML", "question": "把那个特别的点(5.234234233242 6.34534534534)弄成一种格式，好像是GML3的，记得要把数字弄得精确到5位小数，然后整个输出要保持17位数的准确度。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('POINT(5.234234233242 6.34534534534)',4326), 5, 17);", "execution_result": [["<gml:Point srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:pos srsDimension=\"2\">6.34535 5.23423</gml:pos></gml:Point>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that special point (5.234234233242 6.34534534534) and turn it into a format, maybe GML3, making sure to round the numbers to 5 decimal places, and keep the whole output accurate to 17 digits.", "source": "original", "new_id": 1695}
{"id": 307, "function": "ST_AsGML", "question": "把那个点形状(5.234234233242 6.34534534534)变成一种特别的格式，记得用那个数字系统4326，坐标要留5位，整体要有17位数字的准确度。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('POINT(5.234234233242 6.34534534534)',4326), 5, 17);", "execution_result": [["<gml:Point srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:pos srsDimension=\"2\">6.34535 5.23423</gml:pos></gml:Point>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that point (5.234234233242 6.34534534534) into a special format, using that number system 4326, keep the coordinates to 5 places, and make sure there are 17 digits of precision overall.", "source": "original", "new_id": 1696}
{"id": 308, "function": "ST_AsGML", "question": "把那个由0 0到1 1的方形区域，使用某种坐标系统，变成一种特殊文字格式。", "sql": "SELECT ST_AsGML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<gml:Polygon srsName=\"EPSG:4326\"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>0,0 0,1 1,1 1,0 0,0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that square area from 0 0 to 1 1, using some kind of coordinate system, into a special text format.", "source": "original", "new_id": 1699}
{"id": 307, "function": "ST_AsGML", "question": "把那个点(5.234234233242 6.34534534534)用一种常用的格式来表达，记得保持小数到第五位和总共17位的精度哦。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('POINT(5.234234233242 6.34534534534)',4326), 5, 17);", "execution_result": [["<gml:Point srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:pos srsDimension=\"2\">6.34535 5.23423</gml:pos></gml:Point>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Express that point (5.234234233242 6.34534534534) in a commonly used format, remembering to keep the decimals to the fifth place and 17 digits in total.", "source": "original", "new_id": 1697}
{"id": 308, "function": "ST_AsGML", "question": "把那个围成一圈的小点们，像是0 0到1 1这样的，转换成一种特别的格式，叫GML3.2，用那个全球定位的坐标系统。", "sql": "SELECT ST_AsGML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<gml:Polygon srsName=\"EPSG:4326\"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>0,0 0,1 1,1 1,0 0,0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those points that form a loop, like from 0 0 to 1 1, and convert them into a special format called GML3.2, using that global positioning coordinate system.", "source": "original", "new_id": 1702}
{"id": 308, "function": "ST_AsGML", "question": "把那个由坐标点(0 0)、(0 1)、(1 1)、(1 0)、(0 0)组成的形状，用一种格式转换出来，应该是那种能在网页上看到的格式。", "sql": "SELECT ST_AsGML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<gml:Polygon srsName=\"EPSG:4326\"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>0,0 0,1 1,1 1,0 0,0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that shape made of points at (0 0), (0 1), (1 1), (1 0), (0 0) and convert it into a format you can see on the web.", "source": "original", "new_id": 1701}
{"id": 308, "function": "ST_AsGML", "question": "把那个有点方方正正的形状，坐标是(0 0,0 1,1 1,1 0,0 0)，转成一种类似XML的格式，记得它是4326的。", "sql": "SELECT ST_AsGML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<gml:Polygon srsName=\"EPSG:4326\"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>0,0 0,1 1,1 1,0 0,0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that somewhat square shape with coordinates (0 0,0 1,1 1,1 0,0 0) and turn it into a format kind of like XML. Remember, it's a 4326.", "source": "original", "new_id": 1704}
{"id": 308, "function": "ST_AsGML", "question": "把那个四边形从0 0到1 1的坐标，用那种通用的标记方式表示出来，记得是用地球上的那种坐标哦。", "sql": "SELECT ST_AsGML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<gml:Polygon srsName=\"EPSG:4326\"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>0,0 0,1 1,1 1,0 0,0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that quadrilateral from the coordinates 0 0 to 1 1 into some kind of universal labeling format, and remember it's using the Earth-based coordinates.", "source": "original", "new_id": 1703}
{"id": 308, "function": "ST_AsGML", "question": "把那些围成一个圈的点，像(0,0)、(0,1)、(1,1)、(1,0)、(0,0)，转成一种叫GML3.2的格式，用那个全球定位的系统。", "sql": "SELECT ST_AsGML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<gml:Polygon srsName=\"EPSG:4326\"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>0,0 0,1 1,1 1,0 0,0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those points forming a loop, like (0,0), (0,1), (1,1), (1,0), (0,0), and change them into a format called GML3.2, using that global positioning system.", "source": "original", "new_id": 1700}
{"id": 309, "function": "ST_AsKML", "question": "把那个用(0 0,0 1,1 1,1 0,0 0)这些点围起来的形状，变成一种可以在地图上展示的格式。", "sql": "SELECT ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<Polygon><outerBoundaryIs><LinearRing><coordinates>0,0 0,1 1,1 1,0 0,0</coordinates></LinearRing></outerBoundaryIs></Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that shape made by connecting these dots (0 0,0 1,1 1,1 0,0 0) into a format that can be shown on a map.", "source": "original", "new_id": 1705}
{"id": 307, "function": "ST_AsGML", "question": "把那个带有特殊数字4326的小点(5.234234233242 6.34534534534)变成一种叫GML3的格式，记得小数点后面要留5个位置，总共要有17个重要数字哦。", "sql": "SELECT ST_AsGML(3, ST_GeomFromText('POINT(5.234234233242 6.34534534534)',4326), 5, 17);", "execution_result": [["<gml:Point srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:pos srsDimension=\"2\">6.34535 5.23423</gml:pos></gml:Point>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that little dot with the special number 4326 at (5.234234233242 6.34534534534) into something called GML3 format, and remember to keep 5 spots after the decimal and a total of 17 important digits.", "source": "original", "new_id": 1698}
{"id": 309, "function": "ST_AsKML", "question": "把那个0 0到1 1的四边形，在某个地球坐标系统里，变成一种可以用的格式。", "sql": "SELECT ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<Polygon><outerBoundaryIs><LinearRing><coordinates>0,0 0,1 1,1 1,0 0,0</coordinates></LinearRing></outerBoundaryIs></Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that square from 0 0 to 1 1 in some earth coordinate system into a usable format.", "source": "original", "new_id": 1706}
{"id": 309, "function": "ST_AsKML", "question": "把那个用0 0, 0 1, 1 1, 1 0, 0 0这些点围起来的图形，转成一个特别的地图文件格式，记得用4326哦。", "sql": "SELECT ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<Polygon><outerBoundaryIs><LinearRing><coordinates>0,0 0,1 1,1 1,0 0,0</coordinates></LinearRing></outerBoundaryIs></Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the shape surrounded by the points 0 0, 0 1, 1 1, 1 0, 0 0 and turn it into a special map file format, and remember to use 4326.", "source": "original", "new_id": 1709}
{"id": 309, "function": "ST_AsKML", "question": "把那个由坐标围成的方形区域（0 0, 0 1, 1 1, 1 0, 0 0）的样子，用一些方式变成KML的样子看看。", "sql": "SELECT ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<Polygon><outerBoundaryIs><LinearRing><coordinates>0,0 0,1 1,1 1,0 0,0</coordinates></LinearRing></outerBoundaryIs></Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that square area formed by the coordinates (0 0, 0 1, 1 1, 1 0, 0 0) and somehow turn it into a KML format to see.", "source": "original", "new_id": 1707}
{"id": 310, "function": "ST_AsKML", "question": "把那条用1 2 3和4 5 6这些坐标点构成的线，在常用的地球坐标系统里，变成一种可以在地图上展示的格式。", "sql": "SELECT ST_AsKML('SRID=4326;LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["<LineString><coordinates>1,2,3 4,5,6</coordinates></LineString>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take the line made from the points 1 2 3 and 4 5 6 in the usual Earth coordinate system, and turn it into a format that can be shown on maps.", "source": "original", "new_id": 1712}
{"id": 310, "function": "ST_AsKML", "question": "有一个空间线，连接了1 2 3和4 5 6这两个点，能不能变成一种适合地图的格式？", "sql": "SELECT ST_AsKML('SRID=4326;LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["<LineString><coordinates>1,2,3 4,5,6</coordinates></LineString>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a spatial line connecting the points 1 2 3 and 4 5 6, can it be turned into a format suitable for maps?", "source": "original", "new_id": 1713}
{"id": 309, "function": "ST_AsKML", "question": "把那个像框的形状，坐标是0 0到1 1，弄成一种能在地图上看到的格式，用4326这个数字来处理。", "sql": "SELECT ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<Polygon><outerBoundaryIs><LinearRing><coordinates>0,0 0,1 1,1 1,0 0,0</coordinates></LinearRing></outerBoundaryIs></Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that frame-like shape with coordinates from 0 0 to 1 1 and turn it into a format that can be seen on a map, using the number 4326 for processing.", "source": "original", "new_id": 1710}
{"id": 310, "function": "ST_AsKML", "question": "把一个像LINESTRING(1 2 3, 4 5 6)这样的三维线，在某个地球坐标系里变成KML格式的东西。", "sql": "SELECT ST_AsKML('SRID=4326;LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["<LineString><coordinates>1,2,3 4,5,6</coordinates></LineString>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn a 3D line like LINESTRING(1 2 3, 4 5 6) in some Earth coordinate system into a KML format thing.", "source": "original", "new_id": 1714}
{"id": 310, "function": "ST_AsKML", "question": "把那个用4326标识的空间线，包含1 2 3和4 5 6这些点，变成一种适合展示的格式。", "sql": "SELECT ST_AsKML('SRID=4326;LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["<LineString><coordinates>1,2,3 4,5,6</coordinates></LineString>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that spatial line marked with 4326, which includes the points 1 2 3 and 4 5 6, into a format suitable for display.", "source": "original", "new_id": 1711}
{"id": 310, "function": "ST_AsKML", "question": "把那些在空间里连成线的点，像是1 2 3到4 5 6，用一种可以展示的格式变出来。", "sql": "SELECT ST_AsKML('SRID=4326;LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["<LineString><coordinates>1,2,3 4,5,6</coordinates></LineString>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those points in space that form a line, like from 1 2 3 to 4 5 6, and transform them into a format that can be displayed.", "source": "original", "new_id": 1716}
{"id": 311, "function": "ST_AsLatLonText", "question": "把那个点的坐标变成像是度、分、秒这种格式，它有负的数字，记得要留三位小数哦。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"C'));", "execution_result": [["2Â°19'29.928\"S 3Â°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinates into something like degrees, minutes, seconds format, it has negative numbers, remember to keep three decimal places.", "source": "original", "new_id": 1719}
{"id": 311, "function": "ST_AsLatLonText", "question": "把那个坐标点(-3.2342342, -2.32498)变成一种奇怪的经纬度文字格式，像这样：\"DÂ°M'S.SSS\"C\"。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"C'));", "execution_result": [["2Â°19'29.928\"S 3Â°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that coordinate point (-3.2342342, -2.32498) into a peculiar latitude/longitude text format, something like: \"DÂ°M'S.SSS\"C\".", "source": "original", "new_id": 1717}
{"id": 310, "function": "ST_AsKML", "question": "把那些点连起来，像是从1 2 3到4 5 6，看看能不能用一种通用的格式来表达，当然是在那个常见的全球坐标系里。", "sql": "SELECT ST_AsKML('SRID=4326;LINESTRING(1 2 3, 4 5 6)');", "execution_result": [["<LineString><coordinates>1,2,3 4,5,6</coordinates></LineString>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Connect those points, like from 1 2 3 to 4 5 6, and see if you can express it in a common format, of course, in that usual global coordinate system.", "source": "original", "new_id": 1715}
{"id": 311, "function": "ST_AsLatLonText", "question": "把那个点，坐标是(-3.2342342, -2.32498)，用一种特殊的格式转换成显示角度、分、秒并带三位小数的样子。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"C'));", "execution_result": [["2Â°19'29.928\"S 3Â°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that point with coordinates (-3.2342342, -2.32498) and turn it into a special format showing degrees, minutes, seconds with three decimal places.", "source": "original", "new_id": 1718}
{"id": 311, "function": "ST_AsLatLonText", "question": "把那些坐标点(-3.2342342, -2.32498)弄成像“度分秒”这种格式的经纬度文字。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"C'));", "execution_result": [["2Â°19'29.928\"S 3Â°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Make those coordinates (-3.2342342, -2.32498) into a latitude/longitude text like the 'degree-minute-second' format.", "source": "original", "new_id": 1720}
{"id": 311, "function": "ST_AsLatLonText", "question": "把那个有点像地球坐标的点，(-3.2342342 -2.32498)，变成一种奇怪的度分秒格式的文字吧。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"C'));", "execution_result": [["2Â°19'29.928\"S 3Â°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that point, which is kind of like Earth coordinates, (-3.2342342 -2.32498), into a strange degree-minute-second text format.", "source": "original", "new_id": 1722}
{"id": 312, "function": "ST_AsLatLonText", "question": "把那个小点的坐标是(-3.2342342, -2.32498)，变成像度分秒那样的经纬度文字。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"'));", "execution_result": [["-2Â°19'29.928\" -3Â°14'3.243\""]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinates, which are (-3.2342342, -2.32498), into a latitude and longitude string that looks like degree-minute-second.", "source": "original", "new_id": 1723}
{"id": 311, "function": "ST_AsLatLonText", "question": "把那两个数字 -3.2342342 和 -2.32498 变成一种带有度数、分和秒的方向字符串。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"C'));", "execution_result": [["2Â°19'29.928\"S 3Â°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those two numbers -3.2342342 and -2.32498 into a kind of directional string with degrees, minutes, and seconds.", "source": "original", "new_id": 1721}
{"id": 312, "function": "ST_AsLatLonText", "question": "把那个点的坐标，像用时钟说时间一样，变成一个有度、分、秒的小数点的表达。记得要用-3.2342342和-2.32498哦。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"'));", "execution_result": [["-2Â°19'29.928\" -3Â°14'3.243\""]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the coordinates of that point into a format like telling time with degrees, minutes, and seconds, including decimals. Remember to use -3.2342342 and -2.32498.", "source": "original", "new_id": 1724}
{"id": 312, "function": "ST_AsLatLonText", "question": "把那个点的坐标(-3.2342342, -2.32498)换成一种带度分秒的小数形式的经纬度表达吧。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"'));", "execution_result": [["-2Â°19'29.928\" -3Â°14'3.243\""]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the coordinates of that point (-3.2342342, -2.32498) into a kind of latitude and longitude expression with degrees, minutes, and seconds in decimal form.", "source": "original", "new_id": 1726}
{"id": 312, "function": "ST_AsLatLonText", "question": "把那个点的坐标变成一个度分秒的样子，记得度、分和秒要有符号，秒要三位小数哦，坐标是(-3.2342342 -2.32498)。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"'));", "execution_result": [["-2Â°19'29.928\" -3Â°14'3.243\""]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the coordinates of that point into a degree-minute-second format, remember to include symbols for degrees, minutes, and seconds, with seconds to three decimal places, the coordinates are (-3.2342342 -2.32498).", "source": "original", "new_id": 1727}
{"id": 312, "function": "ST_AsLatLonText", "question": "把那个包含数字-3.2342342和-2.32498的小点，变成一种奇怪的度分秒样式的经纬度描述，就像这样\"D°M'S.SSS\"。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"'));", "execution_result": [["-2Â°19'29.928\" -3Â°14'3.243\""]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that small point with numbers -3.2342342 and -2.32498 into a strange degree-minute-second style latitude/longitude description, something like \"D°M'S.SSS\".", "source": "original", "new_id": 1728}
{"id": 313, "function": "ST_AsLatLonText", "question": "把那个点的坐标换成一种看起来像纬度和经度的格式，用四个小数位的数字加上方向的符号来表达。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D.DDDD degrees C'));", "execution_result": [["2.3250 degrees S 3.2342 degrees W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the coordinates of that point into a format that looks like latitude and longitude, using numbers with four decimal places plus a directional symbol.", "source": "original", "new_id": 1731}
{"id": 313, "function": "ST_AsLatLonText", "question": "把那个点 (-3.2342342, -2.32498) 的位置换成带有方向字母的格式，保留四个小数位的度。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D.DDDD degrees C'));", "execution_result": [["2.3250 degrees S 3.2342 degrees W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the location of that point (-3.2342342, -2.32498) into a format with a direction letter, keeping four decimal places in degrees.", "source": "original", "new_id": 1730}
{"id": 313, "function": "ST_AsLatLonText", "question": "把那个点的坐标，像-3.2342342和-2.32498这种，变成一种度数文字，保留四个小数位，最后加个方向符号。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D.DDDD degrees C'));", "execution_result": [["2.3250 degrees S 3.2342 degrees W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that point with coordinates like -3.2342342 and -2.32498 into some kind of degree text, keeping four decimal places, and then add a direction symbol at the end.", "source": "original", "new_id": 1733}
{"id": 314, "function": "ST_AsLatLonText", "question": "把坐标是(-302.2342342, -792.32498)的那个点，变成像度分秒那样的文字。", "sql": "SELECT (ST_AsLatLonText('POINT (-302.2342342 -792.32498)'));", "execution_result": [["72°19'29.928\"S 57°45'56.757\"E"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the point with coordinates (-302.2342342, -792.32498) into a text like degrees-minutes-seconds.", "source": "original", "new_id": 1735}
{"id": 313, "function": "ST_AsLatLonText", "question": "把那个点，坐标是(-3.2342342 -2.32498)，变成像“D.DDDD度C”这样的格式，记得要有4位小数哦，还有方向字母。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D.DDDD degrees C'));", "execution_result": [["2.3250 degrees S 3.2342 degrees W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that point, with coordinates (-3.2342342 -2.32498), into something like 'D.DDDD degrees C', remember to use 4 decimal places and include a direction letter.", "source": "original", "new_id": 1734}
{"id": 313, "function": "ST_AsLatLonText", "question": "把那个点(-3.2342342, -2.32498)变成像这种格式的文字：3.2342°S 2.3250°W。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D.DDDD degrees C'));", "execution_result": [["2.3250 degrees S 3.2342 degrees W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change that point (-3.2342342, -2.32498) into a text format like this: 3.2342°S 2.3250°W.", "source": "original", "new_id": 1732}
{"id": 313, "function": "ST_AsLatLonText", "question": "把那个坐标是(-3.2342342, -2.32498)的小点变成一种奇怪的文本格式，像这样“D.DDDD degrees C”。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D.DDDD degrees C'));", "execution_result": [["2.3250 degrees S 3.2342 degrees W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that little dot with coordinates (-3.2342342, -2.32498) into a strange text format, like this: \"D.DDDD degrees C\".", "source": "original", "new_id": 1729}
{"id": 312, "function": "ST_AsLatLonText", "question": "把那个坐标点，像是-3.2342342和-2.32498这样的，变成一种看起来像度分秒的文字格式，像这样D°M'S.SSS\"。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'DÂ°M''S.SSS\"'));", "execution_result": [["-2Â°19'29.928\" -3Â°14'3.243\""]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform that coordinate point, like -3.2342342 and -2.32498, into a text format that looks like degrees, minutes, and seconds, like this D°M'S.SSS\".", "source": "original", "new_id": 1725}
{"id": 314, "function": "ST_AsLatLonText", "question": "把那个点的坐标变成像“X°Y'Z\" W”的格式，看看是什么结果。", "sql": "SELECT (ST_AsLatLonText('POINT (-302.2342342 -792.32498)'));", "execution_result": [["72°19'29.928\"S 57°45'56.757\"E"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinates into something like 'X°Y'Z\" W' format and see what it looks like.", "source": "original", "new_id": 1738}
{"id": 314, "function": "ST_AsLatLonText", "question": "把那个在(-302.2342342 -792.32498)的点，用常见的度分秒方式描述出来。", "sql": "SELECT (ST_AsLatLonText('POINT (-302.2342342 -792.32498)'));", "execution_result": [["72°19'29.928\"S 57°45'56.757\"E"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Describe that point at (-302.2342342 -792.32498) using the common degrees-minutes-seconds style.", "source": "original", "new_id": 1737}
{"id": 314, "function": "ST_AsLatLonText", "question": "把那个点(-302.2342342 -792.32498)的具体位置换成像时钟显示的那种格式，然后告诉我。", "sql": "SELECT (ST_AsLatLonText('POINT (-302.2342342 -792.32498)'));", "execution_result": [["72°19'29.928\"S 57°45'56.757\"E"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that point (-302.2342342 -792.32498) and convert its specific location to a format like what a clock shows, then tell me.", "source": "original", "new_id": 1739}
{"id": 309, "function": "ST_AsKML", "question": "把那个四个角的形状，像框一样的，跟这些数字0 0, 0 1, 1 1, 1 0, 0 0有关的，变成一种常见的地图格式。注意那些数字是特别的4326。", "sql": "SELECT ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));", "execution_result": [["<Polygon><outerBoundaryIs><LinearRing><coordinates>0,0 0,1 1,1 1,0 0,0</coordinates></LinearRing></outerBoundaryIs></Polygon>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that box-like shape with corners at 0 0, 0 1, 1 1, 1 0, 0 0 into a usual map format. Those numbers are special, like 4326.", "source": "original", "new_id": 1708}
{"id": 314, "function": "ST_AsLatLonText", "question": "把那个点坐标，像经纬度那样写成度分秒的格式，看看它是什么样子吧。", "sql": "SELECT (ST_AsLatLonText('POINT (-302.2342342 -792.32498)'));", "execution_result": [["72°19'29.928\"S 57°45'56.757\"E"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Write that point's coordinates in a format like latitude and longitude, using degrees-minutes-seconds, and see what it looks like.", "source": "original", "new_id": 1736}
{"id": 314, "function": "ST_AsLatLonText", "question": "把那个位置点的数字换成度分秒的样子，然后写出来。", "sql": "SELECT (ST_AsLatLonText('POINT (-302.2342342 -792.32498)'));", "execution_result": [["72°19'29.928\"S 57°45'56.757\"E"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the numbers of that location point into degrees-minutes-seconds format, then write it out.", "source": "original", "new_id": 1740}
{"id": 315, "function": "ST_AsLatLonText", "question": "把那个坐标是(-3.2342342, -2.32498)的小点，变成什么‘度分秒’的文字形式，可以完整地说出来。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D degrees, M minutes, S seconds to the C'));", "execution_result": [["2 degrees, 19 minutes, 30 seconds to the S 3 degrees, 14 minutes, 3 seconds to the W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that little dot at coordinates (-3.2342342, -2.32498) into some kind of 'degrees, minutes, seconds' text form, and say the whole thing out loud.", "source": "original", "new_id": 1741}
{"id": 315, "function": "ST_AsLatLonText", "question": "把那个小点的坐标是(-3.2342342, -2.32498)转成一种用度、分、秒和方向来描述的文字形式。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D degrees, M minutes, S seconds to the C'));", "execution_result": [["2 degrees, 19 minutes, 30 seconds to the S 3 degrees, 14 minutes, 3 seconds to the W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Change the coordinates of that little point (-3.2342342, -2.32498) into a kind of description using degrees, minutes, seconds, and direction.", "source": "original", "new_id": 1743}
{"id": 315, "function": "ST_AsLatLonText", "question": "把那两个小数字-3.2342342和-2.32498变成一个奇怪的格式，像是“多少度多少分多少秒在某个方向”那样的完整句子。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D degrees, M minutes, S seconds to the C'));", "execution_result": [["2 degrees, 19 minutes, 30 seconds to the S 3 degrees, 14 minutes, 3 seconds to the W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those two little numbers -3.2342342 and -2.32498 into a strange format, like a complete sentence saying 'how many degrees, how many minutes, how many seconds in some direction'.", "source": "original", "new_id": 1744}
{"id": 316, "function": "ST_AsLatLonText", "question": "把那个坐标点，像地图上的方向描述一样，转成文字格式。坐标是(-3.2342342 -2.32498)。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)'));", "execution_result": [["2°19'29.928\"S 3°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that coordinate, like a map's direction description, into a text format. The coordinates are (-3.2342342 -2.32498).", "source": "original", "new_id": 1748}
{"id": 315, "function": "ST_AsLatLonText", "question": "把那些坐标点里的-3.2342342和-2.32498，变成类似“D度M分S秒到C”的经纬度文字，给出完整结果。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D degrees, M minutes, S seconds to the C'));", "execution_result": [["2 degrees, 19 minutes, 30 seconds to the S 3 degrees, 14 minutes, 3 seconds to the W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinates -3.2342342 and -2.32498 into a lat/long text like “D degrees M minutes S seconds to C”, providing the full result.", "source": "original", "new_id": 1746}
{"id": 316, "function": "ST_AsLatLonText", "question": "把那个坐标在(-3.2342342, -2.32498)的小点转成那种东南西北的度分秒格式的文字。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)'));", "execution_result": [["2°19'29.928\"S 3°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the little dot at coordinates (-3.2342342, -2.32498) into that degrees-minutes-seconds kind of text with directions like north and south.", "source": "original", "new_id": 1747}
{"id": 315, "function": "ST_AsLatLonText", "question": "把那些点 (-3.2342342 -2.32498) 用一种说法变成纬度和经度的描述，像是“D度，M分，S秒朝向C”这样的格式，完整写出来。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D degrees, M minutes, S seconds to the C'));", "execution_result": [["2 degrees, 19 minutes, 30 seconds to the S 3 degrees, 14 minutes, 3 seconds to the W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those points (-3.2342342 -2.32498) and turn them into a description of latitude and longitude, like in the format “D degrees, M minutes, S seconds to the C”, and write it out fully.", "source": "original", "new_id": 1745}
{"id": 316, "function": "ST_AsLatLonText", "question": "把那个点在-3.2342342和-2.32498位置的坐标转换成更常见的文字样式，好像是度、分、秒的那种。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)'));", "execution_result": [["2°19'29.928\"S 3°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert the coordinates of that point at -3.2342342 and -2.32498 into a more common text style, like the degrees-minutes-seconds type.", "source": "original", "new_id": 1751}
{"id": 316, "function": "ST_AsLatLonText", "question": "把那个点，坐标是-3.2342342和-2.32498，用一种像时钟指针转动的方式写出来，包含方向哦。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)'));", "execution_result": [["2°19'29.928\"S 3°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that point, with coordinates -3.2342342 and -2.32498, and write it out in a way that looks like clock hands turning, including direction.", "source": "original", "new_id": 1749}
{"id": 316, "function": "ST_AsLatLonText", "question": "把那个点的坐标，像时钟一样，用度分秒来描述，坐标是(-3.2342342 -2.32498)。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)'));", "execution_result": [["2°19'29.928\"S 3°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Describe the coordinates of that point like a clock, using degrees-minutes-seconds for the coordinates (-3.2342342 -2.32498).", "source": "original", "new_id": 1750}
{"id": 317, "function": "ST_AsMARC21", "question": "那个包含数字-4.504289和54.253312的小点，能不能变成一种特别的编码格式，像是书籍用的格式？", "sql": "SELECT ST_AsMARC21('SRID=4326;POINT(-4.504289 54.253312)'::geometry);", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W0043015</subfield><subfield code=\"e\">W0043015</subfield><subfield code=\"f\">N0541512</subfield><subfield code=\"g\">N0541512</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could that little dot with numbers -4.504289 and 54.253312 be transformed into a special encoding format, like the one used for books?", "source": "original", "new_id": 1757}
{"id": 317, "function": "ST_AsMARC21", "question": "把那个有点特别的坐标(-4.504289 54.253312)转成一种图书馆用的格式，记得它是4326的。", "sql": "SELECT ST_AsMARC21('SRID=4326;POINT(-4.504289 54.253312)'::geometry);", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W0043015</subfield><subfield code=\"e\">W0043015</subfield><subfield code=\"f\">N0541512</subfield><subfield code=\"g\">N0541512</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that somewhat special coordinate (-4.504289 54.253312) into a library-used format, and remember it's a 4326 one.", "source": "original", "new_id": 1755}
{"id": 317, "function": "ST_AsMARC21", "question": "拿着这些数字-4.504289和54.253312，想办法把它们变成一种叫MARC21的地理编码形式，然后告诉我结果。", "sql": "SELECT ST_AsMARC21('SRID=4326;POINT(-4.504289 54.253312)'::geometry);", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W0043015</subfield><subfield code=\"e\">W0043015</subfield><subfield code=\"f\">N0541512</subfield><subfield code=\"g\">N0541512</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take these numbers -4.504289 and 54.253312, and find a way to turn them into something called MARC21 geospatial encoding, then let me know the result.", "source": "original", "new_id": 1758}
{"id": 317, "function": "ST_AsMARC21", "question": "把那个坐标是(-4.504289, 54.253312)的点变成一种图书馆编码的字符串。", "sql": "SELECT ST_AsMARC21('SRID=4326;POINT(-4.504289 54.253312)'::geometry);", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W0043015</subfield><subfield code=\"e\">W0043015</subfield><subfield code=\"f\">N0541512</subfield><subfield code=\"g\">N0541512</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the point with coordinates (-4.504289, 54.253312) into a kind of library encoding string.", "source": "original", "new_id": 1753}
{"id": 317, "function": "ST_AsMARC21", "question": "把经度是-4.504289、纬度是54.253312的点，转换成一种图书馆用的编码格式，能帮忙输出吗？", "sql": "SELECT ST_AsMARC21('SRID=4326;POINT(-4.504289 54.253312)'::geometry);", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W0043015</subfield><subfield code=\"e\">W0043015</subfield><subfield code=\"f\">N0541512</subfield><subfield code=\"g\">N0541512</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you help convert the point with longitude -4.504289 and latitude 54.253312 into a library-style encoding format and output it?", "source": "original", "new_id": 1754}
{"id": 317, "function": "ST_AsMARC21", "question": "把那个有SRID 4326的小点，坐标是-4.504289和54.253312，变成图书馆里用的格式字符串，看看结果是什么。", "sql": "SELECT ST_AsMARC21('SRID=4326;POINT(-4.504289 54.253312)'::geometry);", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W0043015</subfield><subfield code=\"e\">W0043015</subfield><subfield code=\"f\">N0541512</subfield><subfield code=\"g\">N0541512</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that little dot with SRID 4326, coordinates -4.504289 and 54.253312, and turn it into the format string used in libraries to see what it results in.", "source": "original", "new_id": 1756}
{"id": 316, "function": "ST_AsLatLonText", "question": "把那个坐标点(-3.2342342 -2.32498)的具体位置转换成用度分秒表示的文字，带方向哦。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)'));", "execution_result": [["2°19'29.928\"S 3°14'3.243\"W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert that coordinate point (-3.2342342 -2.32498) into a text format using degrees-minutes-seconds, with direction.", "source": "original", "new_id": 1752}
{"id": 318, "function": "ST_AsMARC21", "question": "把那个由几组数字构成的形状和一个孤零零的小点，变成一种特别的格式，记得用那种常用的全球坐标系统，输出要像度分秒那样。", "sql": "SELECT ST_AsMARC21('SRID=4326;GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))'::geometry,'hdddmm.mmmm');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">E01307.0000</subfield><subfield code=\"e\">E01331.0000</subfield><subfield code=\"f\">N05240.0000</subfield><subfield code=\"g\">N05224.0000</subfield></datafield><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W00430.0000</subfield><subfield code=\"e\">W00430.0000</subfield><subfield code=\"f\">N05415.0000</subfield><subfield code=\"g\">N05415.0000</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that shape made of several numbers and a lonely little dot into a special format, remember to use that common global coordinate system, and the output should be like degree-minute-second.", "source": "original", "new_id": 1760}
{"id": 318, "function": "ST_AsMARC21", "question": "有一个集合，其中有个由这些点构成的形状：比如(13.1 52.65)、(13.516666666666667 52.65)等等，还有个孤零零的点(-4.5 54.25)。能不能把这些东西变成某种图书馆用的格式，坐标要像度分秒那样显示？", "sql": "SELECT ST_AsMARC21('SRID=4326;GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))'::geometry,'hdddmm.mmmm');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">E01307.0000</subfield><subfield code=\"e\">E01331.0000</subfield><subfield code=\"f\">N05240.0000</subfield><subfield code=\"g\">N05224.0000</subfield></datafield><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W00430.0000</subfield><subfield code=\"e\">W00430.0000</subfield><subfield code=\"f\">N05415.0000</subfield><subfield code=\"g\">N05415.0000</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a collection with a shape made up of points like (13.1 52.65), (13.516666666666667 52.65), etc., and a lonely point at (-4.5 54.25). Can you turn these into some library format, with the coordinates showing like degrees-minutes-seconds?", "source": "original", "new_id": 1761}
{"id": 318, "function": "ST_AsMARC21", "question": "把一个包含小点和一个四边形的集合，四边形由这些坐标(13.1 52.65)、(13.516666666666667 52.65)、(13.516666666666667 52.38333333333333)、(13.1 52.38333333333333)形成，另一个小点在(-4.5 54.25)，转换为一种特别的格式，结果要像度分那样显示。", "sql": "SELECT ST_AsMARC21('SRID=4326;GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))'::geometry,'hdddmm.mmmm');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">E01307.0000</subfield><subfield code=\"e\">E01331.0000</subfield><subfield code=\"f\">N05240.0000</subfield><subfield code=\"g\">N05224.0000</subfield></datafield><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W00430.0000</subfield><subfield code=\"e\">W00430.0000</subfield><subfield code=\"f\">N05415.0000</subfield><subfield code=\"g\">N05415.0000</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a collection with small dots and a four-sided shape, where the shape is formed by these coordinates (13.1 52.65), (13.516666666666667 52.65), (13.516666666666667 52.38333333333333), (13.1 52.38333333333333), and another small dot at (-4.5 54.25), and convert it into a special format, with the result showing like degree-minutes.", "source": "original", "new_id": 1763}
{"id": 318, "function": "ST_AsMARC21", "question": "有个几何的集合，包含了一块有点像小方块的形状和一个小点，坐标分别是(13.1 52.65), (13.516666666666667 52.65), (13.516666666666667 52.38333333333333), (13.1 52.38333333333333)，以及(-4.5 54.25)。可以用那种图书馆常用的格式来表示这些位置吗？", "sql": "SELECT ST_AsMARC21('SRID=4326;GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))'::geometry,'hdddmm.mmmm');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">E01307.0000</subfield><subfield code=\"e\">E01331.0000</subfield><subfield code=\"f\">N05240.0000</subfield><subfield code=\"g\">N05224.0000</subfield></datafield><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W00430.0000</subfield><subfield code=\"e\">W00430.0000</subfield><subfield code=\"f\">N05415.0000</subfield><subfield code=\"g\">N05415.0000</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a collection of geometry, including a shape like a little square and a small dot, with coordinates (13.1 52.65), (13.516666666666667 52.65), (13.516666666666667 52.38333333333333), (13.1 52.38333333333333), and (-4.5 54.25). Can these locations be shown in that format often used by libraries?", "source": "original", "new_id": 1762}
{"id": 318, "function": "ST_AsMARC21", "question": "把那个有几个小形状的集合，像是一个用(13.1 52.65)和其他几个点围成的多边形，还有一个在(-4.5 54.25)的小点，用一种特别的度分秒格式转成MARC21的样子。", "sql": "SELECT ST_AsMARC21('SRID=4326;GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))'::geometry,'hdddmm.mmmm');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">E01307.0000</subfield><subfield code=\"e\">E01331.0000</subfield><subfield code=\"f\">N05240.0000</subfield><subfield code=\"g\">N05224.0000</subfield></datafield><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W00430.0000</subfield><subfield code=\"e\">W00430.0000</subfield><subfield code=\"f\">N05415.0000</subfield><subfield code=\"g\">N05415.0000</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that collection with a few little shapes, like a polygon surrounded by (13.1 52.65) and some other points, plus a small dot at (-4.5 54.25), and turn it into MARC21 style using a special degree-minute-second format.", "source": "original", "new_id": 1759}
{"id": 315, "function": "ST_AsLatLonText", "question": "把那个地方的坐标点，像是-3.2342342和-2.32498，用一种格式化的方式变成“D度，M分，S秒到C”的样子，得到完整的字符串结果。", "sql": "SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D degrees, M minutes, S seconds to the C'));", "execution_result": [["2 degrees, 19 minutes, 30 seconds to the S 3 degrees, 14 minutes, 3 seconds to the W"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that location's coordinates, like -3.2342342 and -2.32498, and transform them into a formatted style like “D degrees, M minutes, S seconds to the C”, getting the full string result.", "source": "original", "new_id": 1742}
{"id": 320, "function": "ST_AsMVTGeom", "question": "用两个点坐标(0,0)和(4096,4096)来画个边框，把一个由那些点构成的形状POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))变成某种格式，然后以文本形式展示出来。", "sql": "SELECT ST_AsText(ST_AsMVTGeom(ST_GeomFromText('POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))'), ST_MakeBox2D(ST_Point(0, 0), ST_Point(4096, 4096)), 4096, 0, false));", "execution_result": [["MULTIPOLYGON(((5 4096,10 4091,10 4096,5 4096)),((5 4096,0 4101,0 4096,5 4096)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Using two points with coordinates (0,0) and (4096,4096) to sketch a boundary, transform a shape made of those points POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0)) into some format, and then show it as text.", "source": "original", "new_id": 1772}
{"id": 320, "function": "ST_AsMVTGeom", "question": "把那个形状，像是从(0,0)到(4096,4096)的一个大框里的POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))，换个方式变成一种地图瓦片格式，大小是4096，不要裁剪，然后看看它的文本样子。", "sql": "SELECT ST_AsText(ST_AsMVTGeom(ST_GeomFromText('POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))'), ST_MakeBox2D(ST_Point(0, 0), ST_Point(4096, 4096)), 4096, 0, false));", "execution_result": [["MULTIPOLYGON(((5 4096,10 4091,10 4096,5 4096)),((5 4096,0 4101,0 4096,5 4096)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that shape, like a big box from (0,0) to (4096,4096) containing POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0)), change it into a type of map tile format, size 4096, don't clip it, and then see its text form.", "source": "original", "new_id": 1771}
{"id": 320, "function": "ST_AsMVTGeom", "question": "有一个多边形，像个不规则的四边形，用那些(0,0)和(4096,4096)坐标框住，想知道经过某种瓦片转换后，它会变成什么样的WKT格式？", "sql": "SELECT ST_AsText(ST_AsMVTGeom(ST_GeomFromText('POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))'), ST_MakeBox2D(ST_Point(0, 0), ST_Point(4096, 4096)), 4096, 0, false));", "execution_result": [["MULTIPOLYGON(((5 4096,10 4091,10 4096,5 4096)),((5 4096,0 4101,0 4096,5 4096)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a polygon, kind of like an irregular quadrilateral, boxed in by those coordinates (0,0) and (4096,4096). What would its WKT format look like after some kind of tile conversion?", "source": "original", "new_id": 1774}
{"id": 319, "function": "ST_AsMARC21", "question": "把那个围起来的形状，里面有些点像是(-4.5792 54.1817)这种，弄成一种叫MARC21的格式，记得坐标要留到小数点后4位哦。", "sql": "SELECT ST_AsMARC21('SRID=4326;POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))'::geometry,'hddd.dddd');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W004.5792</subfield><subfield code=\"e\">W004.5466</subfield><subfield code=\"f\">N054.1970</subfield><subfield code=\"g\">N054.1817</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that enclosed shape with some points like (-4.5792 54.1817) and turn it into something called MARC21 format, and remember to keep the coordinates rounded to 4 decimal places.", "source": "original", "new_id": 1770}
{"id": 319, "function": "ST_AsMARC21", "question": "把这些点(-4.5792388916015625 54.18172660239091, -4.56756591796875 54.196993557130355, -4.546623229980469 54.18313300502024, -4.5792388916015625 54.18172660239091)围成的图形转换成一种图书馆用的格式，记得用四位小数哦，那个编号是4326。", "sql": "SELECT ST_AsMARC21('SRID=4326;POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))'::geometry,'hddd.dddd');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W004.5792</subfield><subfield code=\"e\">W004.5466</subfield><subfield code=\"f\">N054.1970</subfield><subfield code=\"g\">N054.1817</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn these points (-4.5792388916015625 54.18172660239091, -4.56756591796875 54.196993557130355, -4.546623229980469 54.18313300502024, -4.5792388916015625 54.18172660239091) into a library format, remember to use four decimal places, that number is 4326.", "source": "original", "new_id": 1769}
{"id": 319, "function": "ST_AsMARC21", "question": "把那个用小点圈起来的形状，坐标是(-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091)，转换成一种叫MARC21的格式，记得用度分秒这种方式来表示精确度。", "sql": "SELECT ST_AsMARC21('SRID=4326;POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))'::geometry,'hddd.dddd');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W004.5792</subfield><subfield code=\"e\">W004.5466</subfield><subfield code=\"f\">N054.1970</subfield><subfield code=\"g\">N054.1817</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that shape surrounded by small dots, with coordinates (-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091), and change it into something called MARC21 format, using the degree-minute-second way for precision.", "source": "original", "new_id": 1768}
{"id": 323, "function": "ST_AsSVG", "question": "能不能把由一些点组成的弯曲路径，像是从(5 5)到(3 5)再到(3 3)又到(0 3)的线，以及从(0 0)到(2 1)再到(2 2)的弧，变成一个完整的形状，并且用一种图形语言展示出来，保持那些数字原样呢？", "sql": "SELECT ST_AsSVG('MULTICURVE((5 5,3 5,3 3,0 3), CIRCULARSTRING(0 0,2 1,2 2))'::geometry, 0, 0);", "execution_result": [["M 5 -5 L 3 -5 3 -3 0 -3 M 0 0 A 2 2 0 0 0 2 -2"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you turn a wavy path made of some points, like the line going from (5 5) to (3 5) to (3 3) to (0 3), and the arc from (0 0) to (2 1) to (2 2), into a complete shape and show it in some kind of graphic language, keeping those numbers unchanged?", "source": "original", "new_id": 1778}
{"id": 319, "function": "ST_AsMARC21", "question": "把那些点围成的形状，坐标是(-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091)，转成一种叫MARC21的格式，记得用四位小数哦。", "sql": "SELECT ST_AsMARC21('SRID=4326;POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))'::geometry,'hddd.dddd');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W004.5792</subfield><subfield code=\"e\">W004.5466</subfield><subfield code=\"f\">N054.1970</subfield><subfield code=\"g\">N054.1817</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those points that form a shape with coordinates (-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091) and change it into some format called MARC21, and make sure to use four decimal places.", "source": "original", "new_id": 1765}
{"id": 320, "function": "ST_AsMVTGeom", "question": "把那个多边形，边上是(0 0), (10 0), (10 5), (0 -5), (0 0)那些点，转换成一种地图上的图块格式，用(0 0)和(4096 4096)这两个点画个框，大小是4096，别加缓冲区，也不剪裁，最后用WKT格式看看结果。", "sql": "SELECT ST_AsText(ST_AsMVTGeom(ST_GeomFromText('POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))'), ST_MakeBox2D(ST_Point(0, 0), ST_Point(4096, 4096)), 4096, 0, false));", "execution_result": [["MULTIPOLYGON(((5 4096,10 4091,10 4096,5 4096)),((5 4096,0 4101,0 4096,5 4096)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that polygon with edges at (0 0), (10 0), (10 5), (0 -5), (0 0) and turn it into a kind of map tile format. Use the points (0 0) and (4096 4096) to draw a box, make it size 4096, don't add a buffer, and no trimming, then see the result in WKT format.", "source": "original", "new_id": 1773}
{"id": 318, "function": "ST_AsMARC21", "question": "帮我把一个包含形状和小点的东西，变成一种特别的坐标格式。形状是由(13.1 52.65)、(13.516666666666667 52.65)、(13.516666666666667 52.38333333333333)、(13.1 52.38333333333333)这些点围成的，还有一个点是在(-4.5 54.25)。输出要用度分秒的样子哦（hdddmm.mmmm）。", "sql": "SELECT ST_AsMARC21('SRID=4326;GEOMETRYCOLLECTION(POLYGON((13.1 52.65,13.516666666666667 52.65,13.516666666666667 52.38333333333333,13.1 52.38333333333333,13.1 52.65)),POINT(-4.5 54.25))'::geometry,'hdddmm.mmmm');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">E01307.0000</subfield><subfield code=\"e\">E01331.0000</subfield><subfield code=\"f\">N05240.0000</subfield><subfield code=\"g\">N05224.0000</subfield></datafield><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W00430.0000</subfield><subfield code=\"e\">W00430.0000</subfield><subfield code=\"f\">N05415.0000</subfield><subfield code=\"g\">N05415.0000</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Help me turn something that includes a shape and little dots into a special coordinate format. The shape is surrounded by these points: (13.1 52.65), (13.516666666666667 52.65), (13.516666666666667 52.38333333333333), (13.1 52.38333333333333), and there's a point at (-4.5 54.25). The output should look like degree-minute-second (hdddmm.mmmm).", "source": "original", "new_id": 1764}
{"id": 323, "function": "ST_AsSVG", "question": "把包含那些线段(5 5,3 5,3 3,0 3)和弧线(0 0,2 1,2 2)的大曲线变成SVG路径，全部用绝对坐标，数字都不动小数点哦。", "sql": "SELECT ST_AsSVG('MULTICURVE((5 5,3 5,3 3,0 3), CIRCULARSTRING(0 0,2 1,2 2))'::geometry, 0, 0);", "execution_result": [["M 5 -5 L 3 -5 3 -3 0 -3 M 0 0 A 2 2 0 0 0 2 -2"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the big curve with those segments (5 5,3 5,3 3,0 3) and arcs (0 0,2 1,2 2) into an SVG path, using all absolute coordinates, and keep the numbers without touching the decimal point.", "source": "original", "new_id": 1777}
{"id": 319, "function": "ST_AsMARC21", "question": "把那些围着这几个点的形状，像(-4.5792388916015625 54.18172660239091)到(-4.546623229980469 54.18313300502024)的闭合图，转换成一种书籍管理用的格式，记得精确到小数点后四位哦，坐标系统是4326。", "sql": "SELECT ST_AsMARC21('SRID=4326;POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))'::geometry,'hddd.dddd');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W004.5792</subfield><subfield code=\"e\">W004.5466</subfield><subfield code=\"f\">N054.1970</subfield><subfield code=\"g\">N054.1817</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Convert that shape surrounding points like (-4.5792388916015625 54.18172660239091) to (-4.546623229980469 54.18313300502024) into a format used for managing books, making sure precision goes to four decimal places, and the coordinate system is 4326.", "source": "original", "new_id": 1766}
{"id": 319, "function": "ST_AsMARC21", "question": "把一个特别的形状，像是四个小点连起来的样子，坐标是(-4.5792388916015625 54.18172660239091)、(-4.56756591796875 54.196993557130355)、(-4.546623229980469 54.18313300502024)、(-4.5792388916015625 54.18172660239091)，转换成一种特别格式，记得要精确到小数点后四位哦。", "sql": "SELECT ST_AsMARC21('SRID=4326;POLYGON((-4.5792388916015625 54.18172660239091,-4.56756591796875 54.196993557130355,-4.546623229980469 54.18313300502024,-4.5792388916015625 54.18172660239091))'::geometry,'hddd.dddd');", "execution_result": [["<record xmlns=\"http://www.loc.gov/MARC21/slim\"><datafield tag=\"034\" ind1=\"1\" ind2=\" \"><subfield code=\"a\">a</subfield><subfield code=\"d\">W004.5792</subfield><subfield code=\"e\">W004.5466</subfield><subfield code=\"f\">N054.1970</subfield><subfield code=\"g\">N054.1817</subfield></datafield></record>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Transform a special shape, kind of like connecting four little dots, with coordinates (-4.5792388916015625 54.18172660239091), (-4.56756591796875 54.196993557130355), (-4.546623229980469 54.18313300502024), (-4.5792388916015625 54.18172660239091), into a special format, and make sure the precision is to four decimal places.", "source": "original", "new_id": 1767}
{"id": 320, "function": "ST_AsMVTGeom", "question": "把那个多边形的样子弄成一种特别的格式，范围从左下角的点(0 0)到右上角的点(4096 4096)，大小是4096单位，不用缓冲，别剪裁，最后给我那个格式的文字版本。", "sql": "SELECT ST_AsText(ST_AsMVTGeom(ST_GeomFromText('POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))'), ST_MakeBox2D(ST_Point(0, 0), ST_Point(4096, 4096)), 4096, 0, false));", "execution_result": [["MULTIPOLYGON(((5 4096,10 4091,10 4096,5 4096)),((5 4096,0 4101,0 4096,5 4096)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that polygon shape into a special format, with coordinates ranging from the bottom-left point (0 0) to the top-right point (4096 4096), size is 4096 units, no buffer, don't clip, and finally give me the text version of that format.", "source": "original", "new_id": 1775}
{"id": 323, "function": "ST_AsSVG", "question": "把那个有两条线的复杂形状变成画图用的路径字符串。第一条线是折线，经过(5 5)、(3 5)、(3 3)、(0 3)，第二条线像弯弯的弧线，经过(0 0)、(2 1)、(2 2)。不要用相对的点，也别管小数点的事儿。", "sql": "SELECT ST_AsSVG('MULTICURVE((5 5,3 5,3 3,0 3), CIRCULARSTRING(0 0,2 1,2 2))'::geometry, 0, 0);", "execution_result": [["M 5 -5 L 3 -5 3 -3 0 -3 M 0 0 A 2 2 0 0 0 2 -2"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that shape with two lines into a path for drawing pictures. The first line zigzags through (5 5), (3 5), (3 3), (0 3), and the second line is like a curved arc through (0 0), (2 1), (2 2). Don't use relative points and forget about decimal details.", "source": "original", "new_id": 1779}
{"id": 320, "function": "ST_AsMVTGeom", "question": "把那个形状POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))变成一种地图上的特殊格式，用底部和顶部的那些点来决定范围，尺寸是4096，用0距离，没有裁剪，最后要看到转换后的样子是什么。", "sql": "SELECT ST_AsText(ST_AsMVTGeom(ST_GeomFromText('POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))'), ST_MakeBox2D(ST_Point(0, 0), ST_Point(4096, 4096)), 4096, 0, false));", "execution_result": [["MULTIPOLYGON(((5 4096,10 4091,10 4096,5 4096)),((5 4096,0 4101,0 4096,5 4096)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that shape POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0)) into a special format for maps, using those points at the bottom and top to decide the range, size is 4096, with 0 distance, no clipping, and finally see what the converted result looks like.", "source": "original", "new_id": 1776}
{"id": 324, "function": "ST_AsSVG", "question": "把那些绕来绕去的小点串在一起，形成一个画图用的路径数据，包含坐标：-2 0, 0 2, 2 0, 0 2, 2 4。", "sql": "SELECT ST_AsSVG( ST_GeomFromText('CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)') );", "execution_result": [["M -2 0 A 2 2 0 0 1 2 0 A 2 2 0 0 1 2 -4"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those meandering little dots and string them together to form a drawing path data, including coordinates: -2 0, 0 2, 2 0, 0 2, 2 4.", "source": "original", "new_id": 1783}
{"id": 323, "function": "ST_AsSVG", "question": "把那个由直线段(5 5,3 5,3 3,0 3)和圆弧(0 0,2 1,2 2)组成的多段曲线，变成一种可以在网页上画图的格式，记得要用完整的数字哦。", "sql": "SELECT ST_AsSVG('MULTICURVE((5 5,3 5,3 3,0 3), CIRCULARSTRING(0 0,2 1,2 2))'::geometry, 0, 0);", "execution_result": [["M 5 -5 L 3 -5 3 -3 0 -3 M 0 0 A 2 2 0 0 0 2 -2"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the shape made of the straight lines (5 5,3 5,3 3,0 3) and the arc (0 0,2 1,2 2) into a format that can draw pictures on websites, and make sure to use full numbers.", "source": "original", "new_id": 1781}
{"id": 323, "function": "ST_AsSVG", "question": "把由几个小线段和弯曲部分组成的路径，像用画笔描绘一样，转成一个包含这些坐标(5 5,3 5,3 3,0 3)和圆弧(0 0,2 1,2 2)的SVG字符串，不用相对坐标，也不留小数。", "sql": "SELECT ST_AsSVG('MULTICURVE((5 5,3 5,3 3,0 3), CIRCULARSTRING(0 0,2 1,2 2))'::geometry, 0, 0);", "execution_result": [["M 5 -5 L 3 -5 3 -3 0 -3 M 0 0 A 2 2 0 0 0 2 -2"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the path made of some little line bits and curves into an SVG string, like painting with a brush, including these coordinates (5 5,3 5,3 3,0 3) and arc (0 0,2 1,2 2), without using relative coordinates or leaving decimal places.", "source": "original", "new_id": 1780}
{"id": 324, "function": "ST_AsSVG", "question": "把这些点的圆弧变成一种图形格式，你知道的那种带(-2,0)、(0,2)、(2,0)、(0,2)、(2,4)的路径。", "sql": "SELECT ST_AsSVG( ST_GeomFromText('CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)') );", "execution_result": [["M -2 0 A 2 2 0 0 1 2 0 A 2 2 0 0 1 2 -4"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the arc with those points into a kind of graphic format, you know, the path with (-2,0), (0,2), (2,0), (0,2), (2,4).", "source": "original", "new_id": 1784}
{"id": 324, "function": "ST_AsSVG", "question": "用一个艺术家的方式把那条由(-2,0)、(0,2)、(2,0)、(0,2)和(2,4)这些点构成的弯曲线条变成一种可以在网页上画的小路径格式。", "sql": "SELECT ST_AsSVG( ST_GeomFromText('CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)') );", "execution_result": [["M -2 0 A 2 2 0 0 1 2 0 A 2 2 0 0 1 2 -4"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In an artistic way, turn the curvy line formed by the points (-2,0), (0,2), (2,0), (0,2), and (2,4) into a small path format that can be drawn on a webpage.", "source": "original", "new_id": 1785}
{"id": 323, "function": "ST_AsSVG", "question": "把由一些点连起来的路径，像是那些(5 5,3 5,3 3,0 3)的线，还有弧形(0 0,2 1,2 2)，变成一种画图的字符串，记得要用绝对坐标哦，别动小数点的数量。", "sql": "SELECT ST_AsSVG('MULTICURVE((5 5,3 5,3 3,0 3), CIRCULARSTRING(0 0,2 1,2 2))'::geometry, 0, 0);", "execution_result": [["M 5 -5 L 3 -5 3 -3 0 -3 M 0 0 A 2 2 0 0 0 2 -2"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the path made of connected dots, like those lines (5 5,3 5,3 3,0 3) and the curved shape (0 0,2 1,2 2), into a drawing string, make sure to use absolute coordinates and don't alter the number of decimal places.", "source": "original", "new_id": 1782}
{"id": 324, "function": "ST_AsSVG", "question": "把这些坐标点组成的圆弧曲线，像画图一样变成一个特殊的路径字符串：(-2 0,0 2,2 0,0 2,2 4)。", "sql": "SELECT ST_AsSVG( ST_GeomFromText('CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)') );", "execution_result": [["M -2 0 A 2 2 0 0 1 2 0 A 2 2 0 0 1 2 -4"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the curve made from these coordinates into a special path string like for drawing: (-2 0,0 2,2 0,0 2,2 4).", "source": "original", "new_id": 1786}
{"id": 324, "function": "ST_AsSVG", "question": "能不能把那些坐标点构成的弧线，像是-2 0, 0 2, 2 0, 0 2, 2 4这些，变成一个画图用的路径？", "sql": "SELECT ST_AsSVG( ST_GeomFromText('CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)') );", "execution_result": [["M -2 0 A 2 2 0 0 1 2 0 A 2 2 0 0 1 2 -4"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you turn those coordinate points forming an arc, like -2 0, 0 2, 2 0, 0 2, 2 4, into a path for drawing?", "source": "original", "new_id": 1787}
{"id": 324, "function": "ST_AsSVG", "question": "能不能把那个圆弧线，像是这些点(-2 0, 0 2, 2 0, 0 2, 2 4)，变成一种SVG图形路径的描述？", "sql": "SELECT ST_AsSVG( ST_GeomFromText('CIRCULARSTRING(-2 0,0 2,2 0,0 2,2 4)') );", "execution_result": [["M -2 0 A 2 2 0 0 1 2 0 A 2 2 0 0 1 2 -4"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you turn that circular arc line, like those points (-2 0, 0 2, 2 0, 0 2, 2 4), into some kind of SVG shape path description?", "source": "original", "new_id": 1788}
{"id": 325, "function": "ST_AsSVG", "question": "你能把由那些点连成的弯弯曲曲的形状，和几个小面围成的图形，用一种特别的线条格式输出吗？比如说像(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0)和(-1 0,0 0.5,1 0,0 1,-1 0)这样的曲线，还有(7 8,10 10,6 14,4 11,7 8)那样的多边形，记得用相对位置和两位小数哦。", "sql": "SELECT ST_AsSVG('MULTISURFACE( CURVEPOLYGON(CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0), (-1 0,0 0.5,1 0,0 1,-1 0)), ((7 8,10 10,6 14,4 11,7 8)))'::geometry, 0, 5);", "execution_result": [["M -2 0 A 1 1 0 0 0 0 0 A 1 1 0 0 0 2 0 A 2 2 0 0 0 -2 0 Z M -1 0 L 0 -0.5 1 0 0 -1 -1 0 Z M 7 -8 L 10 -10 6 -14 4 -11 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Could you output the shape made from connecting those twisty points and a few small surfaces in a special line format? Like the curves such as (-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0) and (-1 0,0 0.5,1 0,0 1,-1 0), and polygons like (7 8,10 10,6 14,4 11,7 8), using relative positions and two decimal places.", "source": "original", "new_id": 1790}
{"id": 325, "function": "ST_AsSVG", "question": "把由弯曲的线串和一些点组成的形状，还有一个独立的多边形，变成那种可以看的小画，这些点的位置是(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0)和(-1 0,0 0.5,1 0,0 1,-1 0)，另外是(7 8,10 10,6 14,4 11,7 8)，记得用准确度到小数点后两位哦。", "sql": "SELECT ST_AsSVG('MULTISURFACE( CURVEPOLYGON(CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0), (-1 0,0 0.5,1 0,0 1,-1 0)), ((7 8,10 10,6 14,4 11,7 8)))'::geometry, 0, 2);", "execution_result": [["M -2 0 A 1 1 0 0 0 0 0 A 1 1 0 0 0 2 0 A 2 2 0 0 0 -2 0 Z M -1 0 L 0 -0.5 1 0 0 -1 -1 0 Z M 7 -8 L 10 -10 6 -14 4 -11 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn a shape made of a curved line and some dots, along with a separate polygon, into that kind of viewable little picture. The dots are at (-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0) and (-1 0,0 0.5,1 0,0 1,-1 0), plus (7 8,10 10,6 14,4 11,7 8), and remember to have precision up to two decimal places.", "source": "original", "new_id": 1792}
{"id": 325, "function": "ST_AsSVG", "question": "把那个包含曲线和普通形状的东西，像(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0)还有(7 8,10 10,6 14,4 11,7 8)，弄成一种图形格式，用那种相对位置的方式，要记得保留两位小数哦。", "sql": "SELECT ST_AsSVG('MULTISURFACE( CURVEPOLYGON(CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0), (-1 0,0 0.5,1 0,0 1,-1 0)), ((7 8,10 10,6 14,4 11,7 8)))'::geometry, 0, 4);", "execution_result": [["M -2 0 A 1 1 0 0 0 0 0 A 1 1 0 0 0 2 0 A 2 2 0 0 0 -2 0 Z M -1 0 L 0 -0.5 1 0 0 -1 -1 0 Z M 7 -8 L 10 -10 6 -14 4 -11 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that thing with curves and regular shapes, like (-2 0, -1 -1, 0 0, 1 -1, 2 0, 0 2, -2 0) and (7 8, 10 10, 6 14, 4 11, 7 8), turn it into some kind of graphic format using that relative position method, and remember to keep two decimal places.", "source": "original", "new_id": 1789}
{"id": 325, "function": "ST_AsSVG", "question": "有个奇妙的形状，它包括一串圆弧和一个小环，以及一个孤立的多边形，坐标像这样：(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0)和(-1 0,0 0.5,1 0,0 1,-1 0)，还有(7 8,10 10,6 14,4 11,7 8)。这个形状要变成SVG路径，得用特别的坐标方式，精确到小数点后两位。", "sql": "SELECT ST_AsSVG('MULTISURFACE( CURVEPOLYGON(CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0), (-1 0,0 0.5,1 0,0 1,-1 0)), ((7 8,10 10,6 14,4 11,7 8)))'::geometry, 0, 2);", "execution_result": [["M -2 0 A 1 1 0 0 0 0 0 A 1 1 0 0 0 2 0 A 2 2 0 0 0 -2 0 Z M -1 0 L 0 -0.5 1 0 0 -1 -1 0 Z M 7 -8 L 10 -10 6 -14 4 -11 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a curious shape, including a string of arcs and a small ring, plus a standalone polygon, with coordinates like these: (-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0) and (-1 0,0 0.5,1 0,0 1,-1 0), also (7 8,10 10,6 14,4 11,7 8). This shape needs to be turned into an SVG path, using a special coordinate way, precise to two decimal places.", "source": "original", "new_id": 1794}
{"id": 325, "function": "ST_AsSVG", "question": "把那些包含弧形和直线的小面组合，还有一个独立的多边形(7 8,10 10,6 14,4 11,7 8)，变成SVG的路径样子，不用那些相对移动的数字，留点小数后两位。", "sql": "SELECT ST_AsSVG('MULTISURFACE( CURVEPOLYGON(CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0), (-1 0,0 0.5,1 0,0 1,-1 0)), ((7 8,10 10,6 14,4 11,7 8)))'::geometry, 0, 2);", "execution_result": [["M -2 0 A 1 1 0 0 0 0 0 A 1 1 0 0 0 2 0 A 2 2 0 0 0 -2 0 Z M -1 0 L 0 -0.5 1 0 0 -1 -1 0 Z M 7 -8 L 10 -10 6 -14 4 -11 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those shapes with curves and straight lines, plus an isolated polygon (7 8,10 10,6 14,4 11,7 8), into SVG path style, without using those relative moving numbers, and keep two decimal places.", "source": "original", "new_id": 1793}
{"id": 326, "function": "ST_AsSVG", "question": "把那个围成方块的坐标串变成适合画图的小道消息格式。", "sql": "SELECT ST_AsSVG('POLYGON((0 0,0 1,1 1,1 0,0 0))'::geometry);", "execution_result": [["M 0 0 L 0 -1 1 -1 1 0 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinates forming a square into a drawing-friendly path string.", "source": "original", "new_id": 1800}
{"id": 325, "function": "ST_AsSVG", "question": "把由弯弯曲曲的线和一些点围成的图形，变成一种图像格式。这个图形有两部分：一部分是一个外面有曲线的圈圈和里面有个小圈圈，坐标有(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0)和(-1 0,0 0.5,1 0,0 1,-1 0)；另一部分是由(7 8,10 10,6 14,4 11,7 8)围成的形状。用那种相对位置的方式，数字留两个小数点。", "sql": "SELECT ST_AsSVG('MULTISURFACE( CURVEPOLYGON(CIRCULARSTRING(-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0), (-1 0,0 0.5,1 0,0 1,-1 0)), ((7 8,10 10,6 14,4 11,7 8)))'::geometry, 0, 2);", "execution_result": [["M -2 0 A 1 1 0 0 0 0 0 A 1 1 0 0 0 2 0 A 2 2 0 0 0 -2 0 Z M -1 0 L 0 -0.5 1 0 0 -1 -1 0 Z M 7 -8 L 10 -10 6 -14 4 -11 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the shape made of wavy lines and some dots into an image format. This shape has two parts: one part is a circle with a curvy outer line and a small inner circle, with coordinates like (-2 0,-1 -1,0 0,1 -1,2 0,0 2,-2 0) and (-1 0,0 0.5,1 0,0 1,-1 0); the other part is a shape formed by (7 8,10 10,6 14,4 11,7 8). Use that relative position method, keeping numbers to two decimal places.", "source": "original", "new_id": 1791}
{"id": 327, "function": "ST_AsTWKB", "question": "把那个小点和编号100一起变成一种特别的二进制格式。", "sql": "SELECT ST_AsTWKB(array_agg(ST_Point(1,2)), array_agg(100)) FROM (VALUES (1)) AS t;", "execution_result": [["BAQByAECBA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Turn that little dot and number 100 together into a special binary format.", "source": "original", "new_id": 1801}
{"id": 326, "function": "ST_AsSVG", "question": "请把由那些点构成的封闭形状，像(0,0)、(0,1)、(1,1)、(1,0)的，变成一种可以画出来的路径。", "sql": "SELECT ST_AsSVG('POLYGON((0 0,0 1,1 1,1 0,0 0))'::geometry);", "execution_result": [["M 0 0 L 0 -1 1 -1 1 0 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Please transform the closed shape made from those points, like (0,0), (0,1), (1,1), (1,0), into a drawable path.", "source": "original", "new_id": 1796}
{"id": 326, "function": "ST_AsSVG", "question": "把那个四个点围起来的形状，转成一种网页上画图用的路线描述。", "sql": "SELECT ST_AsSVG('POLYGON((0 0,0 1,1 1,1 0,0 0))'::geometry);", "execution_result": [["M 0 0 L 0 -1 1 -1 1 0 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that shape made by four points into a kind of path description used for drawing on the web.", "source": "original", "new_id": 1799}
{"id": 328, "function": "ST_AsTWKB", "question": "有条小线段，它从(1 1)一路跑到(5 5)，你能把它变成某种特别的字符串吗？", "sql": "SELECT ST_AsTWKB('LINESTRING(1 1,5 5)'::geometry);", "execution_result": [["AgACAgIICA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "There's a little line that goes from (1 1) to (5 5), can you turn it into some kind of special string?", "source": "original", "new_id": 1804}
{"id": 326, "function": "ST_AsSVG", "question": "把那些点(0 0,0 1,1 1,1 0,0 0)连起来形成的形状，弄成能在图形中用的路径数据，特别是那个路径的d值。", "sql": "SELECT ST_AsSVG('POLYGON((0 0,0 1,1 1,1 0,0 0))'::geometry);", "execution_result": [["M 0 0 L 0 -1 1 -1 1 0 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take those points (0 0,0 1,1 1,1 0,0 0) that form a shape and turn them into path data for use in graphics, especially the path's d value.", "source": "original", "new_id": 1798}
{"id": 326, "function": "ST_AsSVG", "question": "把那些围成(0 0)、(0 1)、(1 1)、(1 0)、(0 0)的小点的形状变成一种可以画图的线条格式。", "sql": "SELECT ST_AsSVG('POLYGON((0 0,0 1,1 1,1 0,0 0))'::geometry);", "execution_result": [["M 0 0 L 0 -1 1 -1 1 0 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the shape formed by those little dots at (0 0), (0 1), (1 1), (1 0), (0 0) into a kind of line format for drawing.", "source": "original", "new_id": 1797}
{"id": 328, "function": "ST_AsTWKB", "question": "给我看一下那些点连起来的线从1到5再到5的奇怪格式吧。", "sql": "SELECT ST_AsTWKB('LINESTRING(1 1,5 5)'::geometry);", "execution_result": [["AgACAgIICA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Show me the odd format for those points connected in a line from 1 to 5 to 5.", "source": "original", "new_id": 1805}
{"id": 328, "function": "ST_AsTWKB", "question": "给我看看从一点到另一点的线段，它连接了(1,1)和(5,5)，用一种特别的二进制方式表示。", "sql": "SELECT ST_AsTWKB('LINESTRING(1 1,5 5)'::geometry);", "execution_result": [["AgACAgIICA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Show me the segment that connects one point to another, from (1,1) to (5,5), in a special binary way.", "source": "original", "new_id": 1803}
{"id": 328, "function": "ST_AsTWKB", "question": "给我那个连接点1 1和5 5的线段的特别编码是什么？", "sql": "SELECT ST_AsTWKB('LINESTRING(1 1,5 5)'::geometry);", "execution_result": [["AgACAgIICA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "What is the special encoding for the line segment connecting points 1 1 and 5 5?", "source": "original", "new_id": 1807}
{"id": 328, "function": "ST_AsTWKB", "question": "请给我一种特殊的压缩表示法，用来描述从(1,1)到(5,5)的连接线条。", "sql": "SELECT ST_AsTWKB('LINESTRING(1 1,5 5)'::geometry);", "execution_result": [["AgACAgIICA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Please give me a special compressed representation to describe the connecting line from (1,1) to (5,5).", "source": "original", "new_id": 1806}
{"id": 326, "function": "ST_AsSVG", "question": "把那些顶点是(0 0)、(0 1)、(1 1)、(1 0)、(0 0)的小形状变成SVG的那种格式。", "sql": "SELECT ST_AsSVG('POLYGON((0 0,0 1,1 1,1 0,0 0))'::geometry);", "execution_result": [["M 0 0 L 0 -1 1 -1 1 0 Z"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the little shape with corners at (0 0), (0 1), (1 1), (1 0), (0 0) into that SVG kind of format.", "source": "original", "new_id": 1795}
{"id": 329, "function": "ST_AsX3D", "question": "把由这些点组成的立方体模型转成一种电脑图纸格式，包含所有的声明和节点，最后要用蓝色材料来做它的表面。", "sql": "SELECT '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor=''0 0 1''/> </Appearance > ' || ST_AsX3D( ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) || '</Shape> </Transform> </Scene> </X3D >' AS x3ddoc;", "execution_result": [["<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor='0 0 1'/> </Appearance > <IndexedFaceSet convex='false'  coordIndex='0 1 2 3 -1 4 5 6 7 -1 8 9 10 11 -1 12 13 14 15 -1 16 17 18 19 -1 20 21 22 23'><Coordinate point='0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 1' /></IndexedFaceSet></Shape> </Transform> </Scene> </X3D >"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the cube model made of these points into a kind of computer drawing format, including all declarations and nodes, and finally use blue material for its surface.", "source": "original", "new_id": 1808}
{"id": 329, "function": "ST_AsX3D", "question": "把那个由6个面组成的立体，顶点是像(0 0 0)和(0 0 1)这样的，把它变成一个蓝色发光的三维图，放进一个完整的XML文档，最后叫做x3ddoc。", "sql": "SELECT '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor=''0 0 1''/> </Appearance > ' || ST_AsX3D( ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) || '</Shape> </Transform> </Scene> </X3D >' AS x3ddoc;", "execution_result": [["<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor='0 0 1'/> </Appearance > <IndexedFaceSet convex='false'  coordIndex='0 1 2 3 -1 4 5 6 7 -1 8 9 10 11 -1 12 13 14 15 -1 16 17 18 19 -1 20 21 22 23'><Coordinate point='0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 1' /></IndexedFaceSet></Shape> </Transform> </Scene> </X3D >"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take that 3D shape with 6 sides, with corners like (0 0 0) and (0 0 1), turn it into a blue glowing 3D picture, and put it into a complete XML document, finally named x3ddoc.", "source": "original", "new_id": 1810}
{"id": 329, "function": "ST_AsX3D", "question": "你能弄一个包含六个小面组成的立方体的东西吗？这些面有些特别的点，比如(0 0 0)到(0 0 1)再到(0 1 1)等等。然后把它变成一种看起来很蓝的东西，这个蓝是(0 0 1)的那种，还要放进一个叫XML的文件里。", "sql": "SELECT '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor=''0 0 1''/> </Appearance > ' || ST_AsX3D( ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) || '</Shape> </Transform> </Scene> </X3D >' AS x3ddoc;", "execution_result": [["<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor='0 0 1'/> </Appearance > <IndexedFaceSet convex='false'  coordIndex='0 1 2 3 -1 4 5 6 7 -1 8 9 10 11 -1 12 13 14 15 -1 16 17 18 19 -1 20 21 22 23'><Coordinate point='0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 1' /></IndexedFaceSet></Shape> </Transform> </Scene> </X3D >"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you make something with a cube made up of six little faces? These faces have some special points, like from (0 0 0) to (0 0 1) then to (0 1 1), and so on. Then turn it into something that looks quite blue, the blue being of the (0 0 1) kind, and put it into a file called XML.", "source": "original", "new_id": 1809}
{"id": 329, "function": "ST_AsX3D", "question": "试着搞一个带有六个面的小方块，它们的点是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)等等，把它们放在一个特别的文件里，然后让它们看起来像蓝色的灯泡。", "sql": "SELECT '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor=''0 0 1''/> </Appearance > ' || ST_AsX3D( ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) || '</Shape> </Transform> </Scene> </X3D >' AS x3ddoc;", "execution_result": [["<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor='0 0 1'/> </Appearance > <IndexedFaceSet convex='false'  coordIndex='0 1 2 3 -1 4 5 6 7 -1 8 9 10 11 -1 12 13 14 15 -1 16 17 18 19 -1 20 21 22 23'><Coordinate point='0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 1' /></IndexedFaceSet></Shape> </Transform> </Scene> </X3D >"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Try to create a little cube with six sides, using points like (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), and put them in a special file, making them look like a blue light bulb.", "source": "original", "new_id": 1812}
{"id": 329, "function": "ST_AsX3D", "question": "制作一个符合某种标准的文件，里面有个小立方体，顶点坐标像是(0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)这样的，记得要有文档的开头和场景，还有个蓝色的物件。", "sql": "SELECT '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor=''0 0 1''/> </Appearance > ' || ST_AsX3D( ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) || '</Shape> </Transform> </Scene> </X3D >' AS x3ddoc;", "execution_result": [["<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor='0 0 1'/> </Appearance > <IndexedFaceSet convex='false'  coordIndex='0 1 2 3 -1 4 5 6 7 -1 8 9 10 11 -1 12 13 14 15 -1 16 17 18 19 -1 20 21 22 23'><Coordinate point='0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 1' /></IndexedFaceSet></Shape> </Transform> </Scene> </X3D >"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create a document that fits some standard, with a small cube inside, vertex coordinates like (0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0), make sure it has the document start and scene, and a blue object.", "source": "original", "new_id": 1813}
{"id": 331, "function": "ST_AsX3D", "question": "有两个小三角形，一个的点是(0,0,0)、(0,0,1)、(0,1,0)，另一个的点是(0,0,0)、(0,1,0)、(1,1,0)，把它们变成一种3D格式的字符串，看起来像X3D的样子。", "sql": "SELECT ST_AsX3D(ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )')) AS x3dfrag;", "execution_result": [["<IndexedTriangleSet  index='0 1 2 3 4 5'><Coordinate point='0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0'/></IndexedTriangleSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are two little triangles, one with points at 0 0 0, 0 0 1, 0 1 0, and another at 0 0 0, 0 1 0, 1 1 0. Turn them into a kind of 3D format string that looks like X3D.", "source": "original", "new_id": 1814}
{"id": 331, "function": "ST_AsX3D", "question": "把那种由两个小三角片组成的立体图形，坐标是(0 0 0, 0 0 1, 0 1 0)和(0 0 0, 0 1 0, 1 1 0)，变成一种叫X3D的格式。", "sql": "SELECT ST_AsX3D(ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )')) AS x3dfrag;", "execution_result": [["<IndexedTriangleSet  index='0 1 2 3 4 5'><Coordinate point='0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0'/></IndexedTriangleSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that 3D shape made of two small triangular pieces, with coordinates (0 0 0, 0 0 1, 0 1 0) and (0 0 0, 0 1 0, 1 1 0), into a format called X3D.", "source": "original", "new_id": 1815}
{"id": 331, "function": "ST_AsX3D", "question": "把两个小三角形，一个是0 0 0, 0 0 1, 0 1 0，另一个是0 0 0, 0 1 0, 1 1 0，变成一种3D格式的字符串吧。", "sql": "SELECT ST_AsX3D(ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )')) AS x3dfrag;", "execution_result": [["<IndexedTriangleSet  index='0 1 2 3 4 5'><Coordinate point='0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0'/></IndexedTriangleSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those two little triangles, one at 0 0 0, 0 0 1, 0 1 0, and the other at 0 0 0, 0 1 0, 1 1 0, into a kind of 3D format string.", "source": "original", "new_id": 1817}
{"id": 331, "function": "ST_AsX3D", "question": "试着把那些由点组成的两个三角形变成一种可以在三维空间展示的格式，记得这些点的坐标是(0 0 0)、(0 0 1)、(0 1 0)和(0 0 0)、(0 1 0)、(1 1 0)。", "sql": "SELECT ST_AsX3D(ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )')) AS x3dfrag;", "execution_result": [["<IndexedTriangleSet  index='0 1 2 3 4 5'><Coordinate point='0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0'/></IndexedTriangleSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Try to turn those two triangles made up of points into a format that can be displayed in 3D space, remember the coordinates of these points are (0 0 0), (0 0 1), (0 1 0) and (0 0 0), (0 1 0), (1 1 0).", "source": "original", "new_id": 1816}
{"id": 329, "function": "ST_AsX3D", "question": "创建一个特别的文件，里面有个由这些点组成的立方体：((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))，并且它会发出蓝色的光。", "sql": "SELECT '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor=''0 0 1''/> </Appearance > ' || ST_AsX3D( ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) || '</Shape> </Transform> </Scene> </X3D >' AS x3ddoc;", "execution_result": [["<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.0//EN\" \"http://www.web3d.org/specifications/x3d-3.0.dtd\"> <X3D> <Scene> <Transform> <Shape> <Appearance> <Material emissiveColor='0 0 1'/> </Appearance > <IndexedFaceSet convex='false'  coordIndex='0 1 2 3 -1 4 5 6 7 -1 8 9 10 11 -1 12 13 14 15 -1 16 17 18 19 -1 20 21 22 23'><Coordinate point='0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 1' /></IndexedFaceSet></Shape> </Transform> </Scene> </X3D >"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create a special file featuring a cube made from these points: ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)), and it will emit blue light.", "source": "original", "new_id": 1811}
{"id": 331, "function": "ST_AsX3D", "question": "把由两个小三角形组成的复杂几何体变成一种叫X3D的格式，那些小点的坐标是(0 0 0, 0 0 1, 0 1 0)和(0 0 0, 0 1 0, 1 1 0)。", "sql": "SELECT ST_AsX3D(ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )')) AS x3dfrag;", "execution_result": [["<IndexedTriangleSet  index='0 1 2 3 4 5'><Coordinate point='0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0'/></IndexedTriangleSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn a complex shape made of two small triangles into something called X3D format, where the little dots are at 0 0 0, 0 0 1, 0 1 0 and 0 0 0, 0 1 0, 1 1 0.", "source": "original", "new_id": 1818}
{"id": 331, "function": "ST_AsX3D", "question": "把由两个三角形组成的那些小平面，按照X3D的样子，转成一个三维的格式。第一个三角形有0 0 0、0 0 1、0 1 0这些点，另一个有0 0 0、0 1 0、1 1 0这些点。", "sql": "SELECT ST_AsX3D(ST_GeomFromEWKT('TIN ((( 0 0 0, 0 0 1, 0 1 0, 0 0 0 )), (( 0 0 0, 0 1 0, 1 1 0, 0 0 0 )) )')) AS x3dfrag;", "execution_result": [["<IndexedTriangleSet  index='0 1 2 3 4 5'><Coordinate point='0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0'/></IndexedTriangleSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those little triangle surfaces made of two triangles into a three-dimensional format like X3D. The first triangle has points at 0 0 0, 0 0 1, 0 1 0, and the other one has points at 0 0 0, 0 1 0, 1 1 0.", "source": "original", "new_id": 1819}
{"id": 334, "function": "ST_GeoHash", "question": "帮我找出一个字符串，代表那个在地图上坐标是(-126, 48)的小点。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48) );", "execution_result": [["c0w3hf1s70w3hf1s70w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Help me find a string that represents that little dot on the map with coordinates (-126, 48).", "source": "original", "new_id": 1826}
{"id": 333, "function": "ST_AsX3D", "question": "有一个几何对象里有两组小点连成的线，第一组是像20 0 10这样的坐标组成的，第二组也是类似12 0 10的点。想要把它们变成另一种格式，好像是叫X3D的那种。", "sql": "SELECT ST_AsX3D( ST_GeomFromEWKT('MULTILINESTRING((20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10))') ) AS x3dfrag;", "execution_result": [["<IndexedLineSet  coordIndex='0 1 2 3 4 5 6 7 0 -1 8 9 10 11 12 13 14 15 8'><Coordinate point='20 0 10 16 -12 10 0 -16 10 -12 -12 10 -20 0 10 -12 16 10 0 24 10 16 16 10 12 0 10 8 8 10 0 12 10 -8 8 10 -8 0 10 -8 -4 10 0 -8 10 8 -4 10 ' /></IndexedLineSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a geometry object with two sets of connected little dots, the first set is made of coordinates like 20 0 10, and the second set has similar points like 12 0 10. We want to change them into another format, something called X3D.", "source": "original", "new_id": 1822}
{"id": 333, "function": "ST_AsX3D", "question": "把两个3D线条集合的那些点按某种格式转换成X3D，其中第一个集合有9个点(20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10)，第二个集合也有9个点(12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10)。", "sql": "SELECT ST_AsX3D( ST_GeomFromEWKT('MULTILINESTRING((20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10))') ) AS x3dfrag;", "execution_result": [["<IndexedLineSet  coordIndex='0 1 2 3 4 5 6 7 0 -1 8 9 10 11 12 13 14 15 8'><Coordinate point='20 0 10 16 -12 10 0 -16 10 -12 -12 10 -20 0 10 -12 16 10 0 24 10 16 16 10 12 0 10 8 8 10 0 12 10 -8 8 10 -8 0 10 -8 -4 10 0 -8 10 8 -4 10 ' /></IndexedLineSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn the two groups of 3D line points into some X3D format, where the first group has 9 points (20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10) and the second group also has 9 points (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10).", "source": "original", "new_id": 1820}
{"id": 328, "function": "ST_AsTWKB", "question": "把从一点到另一点的这条线，看看它变成另一个特别格式后的样子。", "sql": "SELECT ST_AsTWKB('LINESTRING(1 1,5 5)'::geometry);", "execution_result": [["AgACAgIICA=="]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "memoryview_to_base64", "question_en": "Take the line from one point to another and see how it looks in that special format.", "source": "original", "new_id": 1802}
{"id": 334, "function": "ST_GeoHash", "question": "找一下那个经度是-126，纬度是48的地方，看看它的神秘编码是什么。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48) );", "execution_result": [["c0w3hf1s70w3hf1s70w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the mysterious code for the place with longitude -126 and latitude 48.", "source": "original", "new_id": 1827}
{"id": 334, "function": "ST_GeoHash", "question": "帮我找出那个在-126和48位置的小点的神秘编码吧。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48) );", "execution_result": [["c0w3hf1s70w3hf1s70w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Help me find the mysterious code for the little dot at location -126 and 48.", "source": "original", "new_id": 1829}
{"id": 334, "function": "ST_GeoHash", "question": "对于那些位于经度-126和纬度48的地方，找出它的特殊编码是什么。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48) );", "execution_result": [["c0w3hf1s70w3hf1s70w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the spot at longitude -126 and latitude 48, figure out what its special code is.", "source": "original", "new_id": 1828}
{"id": 333, "function": "ST_AsX3D", "question": "把那些坐标点变成一个能在三维空间里展示的格式，这些点有两组，第一组包括20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10，第二组有12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10。", "sql": "SELECT ST_AsX3D( ST_GeomFromEWKT('MULTILINESTRING((20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10))') ) AS x3dfrag;", "execution_result": [["<IndexedLineSet  coordIndex='0 1 2 3 4 5 6 7 0 -1 8 9 10 11 12 13 14 15 8'><Coordinate point='20 0 10 16 -12 10 0 -16 10 -12 -12 10 -20 0 10 -12 16 10 0 24 10 16 16 10 12 0 10 8 8 10 0 12 10 -8 8 10 -8 0 10 -8 -4 10 0 -8 10 8 -4 10 ' /></IndexedLineSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those coordinates into a format that can be shown in 3D space, with two sets of points. The first set includes 20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10, and the second set has 12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10.", "source": "original", "new_id": 1824}
{"id": 334, "function": "ST_GeoHash", "question": "给我那边坐标是经度-126，纬度48的地方的某种编码吧，听说是Base32的。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48) );", "execution_result": [["c0w3hf1s70w3hf1s70w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you give me some kind of code for the spot with coordinates longitude -126 and latitude 48, I heard it's Base32.", "source": "original", "new_id": 1830}
{"id": 334, "function": "ST_GeoHash", "question": "给出那个坐标为(-126, 48)的小点的特殊编码是什么？", "sql": "SELECT ST_GeoHash( ST_Point(-126,48) );", "execution_result": [["c0w3hf1s70w3hf1s70w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "What is the special code for that little dot with coordinates (-126, 48)?", "source": "original", "new_id": 1831}
{"id": 333, "function": "ST_AsX3D", "question": "把那些由两串3D点构成的线条变成一种可以在三维空间里看到的格式。第一串点是(20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10)，第二串点是(12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10)。", "sql": "SELECT ST_AsX3D( ST_GeomFromEWKT('MULTILINESTRING((20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10))') ) AS x3dfrag;", "execution_result": [["<IndexedLineSet  coordIndex='0 1 2 3 4 5 6 7 0 -1 8 9 10 11 12 13 14 15 8'><Coordinate point='20 0 10 16 -12 10 0 -16 10 -12 -12 10 -20 0 10 -12 16 10 0 24 10 16 16 10 12 0 10 8 8 10 0 12 10 -8 8 10 -8 0 10 -8 -4 10 0 -8 10 8 -4 10 ' /></IndexedLineSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those lines made of two sets of 3D points into a format that can be viewed in three-dimensional space. The first set of points is (20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), and the second set is (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10).", "source": "original", "new_id": 1823}
{"id": 333, "function": "ST_AsX3D", "question": "把那两个三维的线条集合转成一种叫X3D的格式吧。第一个线条有九个点，像是(20 0 10)这样的，第二个线条也是九个点，像(12 0 10)。", "sql": "SELECT ST_AsX3D( ST_GeomFromEWKT('MULTILINESTRING((20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10))') ) AS x3dfrag;", "execution_result": [["<IndexedLineSet  coordIndex='0 1 2 3 4 5 6 7 0 -1 8 9 10 11 12 13 14 15 8'><Coordinate point='20 0 10 16 -12 10 0 -16 10 -12 -12 10 -20 0 10 -12 16 10 0 24 10 16 16 10 12 0 10 8 8 10 0 12 10 -8 8 10 -8 0 10 -8 -4 10 0 -8 10 8 -4 10 ' /></IndexedLineSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn those two sets of 3D lines into something called X3D format. The first line has nine points, like (20 0 10), and the second line also has nine points, like (12 0 10).", "source": "original", "new_id": 1821}
{"id": 333, "function": "ST_AsX3D", "question": "把那个包含两组三维小线条的东西变成一种叫X3D的格式。第一组有九个小点(20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10)，第二组也是九个小点(12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10)。", "sql": "SELECT ST_AsX3D( ST_GeomFromEWKT('MULTILINESTRING((20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10))') ) AS x3dfrag;", "execution_result": [["<IndexedLineSet  coordIndex='0 1 2 3 4 5 6 7 0 -1 8 9 10 11 12 13 14 15 8'><Coordinate point='20 0 10 16 -12 10 0 -16 10 -12 -12 10 -20 0 10 -12 16 10 0 24 10 16 16 10 12 0 10 8 8 10 0 12 10 -8 8 10 -8 0 10 -8 -4 10 0 -8 10 8 -4 10 ' /></IndexedLineSet>"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Turn that thing with two sets of 3D little lines into something called X3D format. The first set has nine little dots (20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10), and the second set also has nine little dots (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10).", "source": "original", "new_id": 1825}
{"id": 335, "function": "ST_GeoHash", "question": "找出一个代表(-126,48)的两个数字位置的5字符长的神秘代码。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48), 5);", "execution_result": [["c0w3h"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find a mysterious 5-character code that represents the location at the two numbers (-126,48).", "source": "original", "new_id": 1832}
{"id": 335, "function": "ST_GeoHash", "question": "对于在-126和48这两个数字交汇的地方，能用5的精确度给它弄个简短代号吗？", "sql": "SELECT ST_GeoHash( ST_Point(-126,48), 5);", "execution_result": [["c0w3h"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For the spot where -126 and 48 meet, can you create a short code with a precision of 5?", "source": "original", "new_id": 1833}
{"id": 335, "function": "ST_GeoHash", "question": "找出那个经度-126和纬度48的点对应的某种编码，长度是5个字符。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48), 5);", "execution_result": [["c0w3h"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find the kind of code associated with the point at longitude -126 and latitude 48, with a length of 5 characters.", "source": "original", "new_id": 1834}
{"id": 336, "function": "ST_GeoHash", "question": "帮我看看从-126到-126.1，再从48到48.1这条线的神秘编码是什么？", "sql": "SELECT ST_GeoHash('LINESTRING(-126 48, -126.1 48.1)'::geometry);", "execution_result": [["c0w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you show me the secret code for the line that goes from -126 to -126.1 and then from 48 to 48.1?", "source": "original", "new_id": 1839}
{"id": 335, "function": "ST_GeoHash", "question": "给我看看那个在(-126,48)位置的小点的5字符长的神秘编号。", "sql": "SELECT ST_GeoHash( ST_Point(-126,48), 5);", "execution_result": [["c0w3h"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me the 5-character long mysterious code for the little dot at location (-126,48).", "source": "original", "new_id": 1835}
{"id": 335, "function": "ST_GeoHash", "question": "给我看看那个在(-126, 48)位置上的小点，它用5个字符来表示的结果是什么？", "sql": "SELECT ST_GeoHash( ST_Point(-126,48), 5);", "execution_result": [["c0w3h"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Show me what the result is for that little dot at location (-126, 48) when it's represented using 5 characters?", "source": "original", "new_id": 1836}
{"id": 335, "function": "ST_GeoHash", "question": "如果你用某种编码方式，可能会得到一个关于坐标-126和48的小点的字符串，精度是5哦，结果会是什么呢？", "sql": "SELECT ST_GeoHash( ST_Point(-126,48), 5);", "execution_result": [["c0w3h"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "If you use some kind of encoding method, you might get a string about the little point at coordinates -126 and 48, with a precision of 5, what would the result be?", "source": "original", "new_id": 1837}
{"id": 336, "function": "ST_GeoHash", "question": "从坐标点(-126 48)到另一个点(-126.1 48.1)画一条线，看看这条线的那个编码是什么。", "sql": "SELECT ST_GeoHash('LINESTRING(-126 48, -126.1 48.1)'::geometry);", "execution_result": [["c0w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a line from the coordinates (-126 48) to another point (-126.1 48.1) and find out what the code for this line is.", "source": "original", "new_id": 1838}
{"id": 336, "function": "ST_GeoHash", "question": "给那条从-126到-126.1之间的小线段，找出它的某种编码方式。", "sql": "SELECT ST_GeoHash('LINESTRING(-126 48, -126.1 48.1)'::geometry);", "execution_result": [["c0w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For that little line segment from -126 to -126.1, find some kind of encoding for it.", "source": "original", "new_id": 1841}
{"id": 336, "function": "ST_GeoHash", "question": "找出由那些位置点(-126 48)到(-126.1 48.1)组成的线的特殊编码是什么。", "sql": "SELECT ST_GeoHash('LINESTRING(-126 48, -126.1 48.1)'::geometry);", "execution_result": [["c0w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Find out what the special code is for the line made by those location points from (-126 48) to (-126.1 48.1).", "source": "original", "new_id": 1840}
{"id": 337, "function": "ST_3DIntersects", "question": "看看那个点在0 0 2和一条从0 0 1到0 2 3的线段之间有没有碰触，分别在立体空间和平面上给两个答案。", "sql": "SELECT ST_3DIntersects(pt, line), ST_Intersects(pt, line) FROM (SELECT 'POINT(0 0 2)'::geometry AS pt, 'LINESTRING (0 0 1, 0 2 3)'::geometry AS line) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if that dot at 0 0 2 touches a line segment from 0 0 1 to 0 2 3, giving two answers for both the 3D space and the flat surface.", "source": "original", "new_id": 1844}
{"id": 336, "function": "ST_GeoHash", "question": "给那条从-126 48到-126.1 48.1的小线找个地理编码，行不？", "sql": "SELECT ST_GeoHash('LINESTRING(-126 48, -126.1 48.1)'::geometry);", "execution_result": [["c0w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you find a geographic code for that little line from -126 48 to -126.1 48.1?", "source": "original", "new_id": 1842}
{"id": 337, "function": "ST_3DIntersects", "question": "看看那个位置在(0,0,2)的点和从(0,0,1)到(0,2,3)的那条线，在立体和平面上有没有交集，结果要两个对错的答案。", "sql": "SELECT ST_3DIntersects(pt, line), ST_Intersects(pt, line) FROM (SELECT 'POINT(0 0 2)'::geometry AS pt, 'LINESTRING (0 0 1, 0 2 3)'::geometry AS line) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if the spot at (0,0,2) and that line from (0,0,1) to (0,2,3) have any overlap in 3D and flat space, and give two true or false answers.", "source": "original", "new_id": 1845}
{"id": 337, "function": "ST_3DIntersects", "question": "看看在三维和二维世界里，那个点(0 0 2)和由两段小线(0 0 1到0 2 3)组成的线有没有碰到一起？需要知道它们在不同空间里是否相遇。", "sql": "SELECT ST_3DIntersects(pt, line), ST_Intersects(pt, line) FROM (SELECT 'POINT(0 0 2)'::geometry AS pt, 'LINESTRING (0 0 1, 0 2 3)'::geometry AS line) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if in the 3D and 2D worlds, that point (0 0 2) and the line made of two small segments (from 0 0 1 to 0 2 3) bump into each other. We need to know if they meet in different spaces.", "source": "original", "new_id": 1846}
{"id": 337, "function": "ST_3DIntersects", "question": "看看在三维和二维的情况下，那颗坐标为(0 0 2)的小点是否会碰到从(0 0 1)到(0 2 3)的那条线，并给出两个结果。", "sql": "SELECT ST_3DIntersects(pt, line), ST_Intersects(pt, line) FROM (SELECT 'POINT(0 0 2)'::geometry AS pt, 'LINESTRING (0 0 1, 0 2 3)'::geometry AS line) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if, in both 3D and 2D cases, that little dot at coordinates (0 0 2) bumps into the line stretching from (0 0 1) to (0 2 3), and give two results.", "source": "original", "new_id": 1848}
{"id": 337, "function": "ST_3DIntersects", "question": "看看在三维和二维的世界里，那个点(0 0 2)和那条线(0 0 1, 0 2 3)有没有碰到，一种是立体的，另一种是平面的，结果是两个对错的答案。", "sql": "SELECT ST_3DIntersects(pt, line), ST_Intersects(pt, line) FROM (SELECT 'POINT(0 0 2)'::geometry AS pt, 'LINESTRING (0 0 1, 0 2 3)'::geometry AS line) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if in the world of 3D and 2D, that point (0 0 2) and that line (0 0 1, 0 2 3) bump into each other, one being in space and the other flat, with results being two true or false answers.", "source": "original", "new_id": 1847}
{"id": 336, "function": "ST_GeoHash", "question": "你能帮忙找一下那个由坐标串成的路径的神秘编码吗？比如从-126 48到-126.1 48.1的那种。", "sql": "SELECT ST_GeoHash('LINESTRING(-126 48, -126.1 48.1)'::geometry);", "execution_result": [["c0w3"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Can you help find the mysterious code for that path made of coordinates? Like the one from -126 48 to -126.1 48.1.", "source": "original", "new_id": 1843}
{"id": 338, "function": "ST_3DIntersects", "question": "看看那个由(0 0 0)、(1 0 0)、(0 1 0)构成的三角形和坐标在(.1 .1 0)的小点有没有碰到一起。", "sql": "SELECT ST_3DIntersects('TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))'::geometry, 'POINT(.1 .1 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if that triangle formed by (0 0 0), (1 0 0), (0 1 0) and the tiny point at (.1 .1 0) bump into each other.", "source": "original", "new_id": 1850}
{"id": 337, "function": "ST_3DIntersects", "question": "看看那个在(0 0 2)的点和那条从(0 0 1)到(0 2 3)的小线，在三维的世界里和二维的平面上有没有碰到，结果要有两个是非题哦。", "sql": "SELECT ST_3DIntersects(pt, line), ST_Intersects(pt, line) FROM (SELECT 'POINT(0 0 2)'::geometry AS pt, 'LINESTRING (0 0 1, 0 2 3)'::geometry AS line) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if the dot at (0 0 2) and that little line from (0 0 1) to (0 2 3) bump into each other in the 3D world and on the 2D plane, and the result should be two true-or-false answers.", "source": "original", "new_id": 1849}
{"id": 338, "function": "ST_3DIntersects", "question": "看看那个由点(0 0 0), (1 0 0), (0 1 0)组成的三角形和小点(.1 .1 0)在立体空间里有没有碰到一起。", "sql": "SELECT ST_3DIntersects('TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))'::geometry, 'POINT(.1 .1 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the triangle made from points (0 0 0), (1 0 0), and (0 1 0) bumps into the little point (.1 .1 0) in 3D space.", "source": "original", "new_id": 1852}
{"id": 338, "function": "ST_3DIntersects", "question": "看看那个形状像三角网的东西(((0 0 0,1 0 0,0 1 0,0 0 0)))和在(.1 .1 0)这个位置的小点在空间上有没有交集。", "sql": "SELECT ST_3DIntersects('TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))'::geometry, 'POINT(.1 .1 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if that shape resembling a triangular net (((0 0 0,1 0 0,0 1 0,0 0 0))) and the little dot at (.1 .1 0) have any overlap in space.", "source": "original", "new_id": 1851}
{"id": 338, "function": "ST_3DIntersects", "question": "看看一个立体的三角形网(((0 0 0,1 0 0,0 1 0,0 0 0)))和一个小点(.1 .1 0)之间有没有交集。", "sql": "SELECT ST_3DIntersects('TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))'::geometry, 'POINT(.1 .1 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if a 3D triangle mesh (((0 0 0,1 0 0,0 1 0,0 0 0))) and a small point (.1 .1 0) have any intersection.", "source": "original", "new_id": 1855}
{"id": 338, "function": "ST_3DIntersects", "question": "看看那三个维度的奇怪三角形网络和某个在(.1 .1 0)的点有没有碰到一起。", "sql": "SELECT ST_3DIntersects('TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))'::geometry, 'POINT(.1 .1 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if that 3D peculiar triangle network and a point at (.1 .1 0) bump into each other.", "source": "original", "new_id": 1854}
{"id": 338, "function": "ST_3DIntersects", "question": "看看那个由(0 0 0,1 0 0,0 1 0,0 0 0)围成的三角形空间，跟小点(.1 .1 0)在三维里的关系，能不能碰到一起？", "sql": "SELECT ST_3DIntersects('TIN(((0 0 0,1 0 0,0 1 0,0 0 0)))'::geometry, 'POINT(.1 .1 0)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the triangle space formed by (0 0 0,1 0 0,0 1 0,0 0 0) and the small dot (.1 .1 0) in 3D can touch each other?", "source": "original", "new_id": 1853}
{"id": 339, "function": "ST_Contains", "question": "在1 2这个点周围画两个圆圈，一个半径是10，一个是22。看看小圈圈是不是把大圈圈包住了，大圈圈是不是把小圈圈包住了，大圈圈是不是把两个圈圈的结合都包住了，还有大圈圈是不是和结合一样。然后看看大圈圈是不是盖住或者包住它的外边缘。", "sql": "SELECT ST_Contains(smallc, bigc) AS smallcontainsbig, ST_Contains(bigc,smallc) AS bigcontainssmall, ST_Contains(bigc, ST_Union(smallc, bigc)) AS bigcontainsunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 22) AS bigc) AS foo;", "execution_result": [[false, true, true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw two circles around the point 1 2, one with radius 10 and another with radius 22. Check if the small circle wraps around the big circle, if the big circle wraps around the small circle, if the big circle wraps around the union of both circles, and if the big circle is the same as the union. Also, see if the big circle covers or wraps around its outer edge.", "source": "original", "new_id": 1856}
{"id": 339, "function": "ST_Contains", "question": "看看这六个问题：1) 半径10的小圈是否把半径20的大圈包在里面；2) 大圈是否把小圈包住；3) 大圈是否把小圈和大圈的组合包住；4) 大圈是否跟小圈和大圈的组合一样；5) 大圈是否盖住自己的外边；6) 大圈是否把自己的外边包在里面。所有圈都围绕着点(1, 2)。", "sql": "SELECT ST_Contains(smallc, bigc) AS smallcontainsbig, ST_Contains(bigc,smallc) AS bigcontainssmall, ST_Contains(bigc, ST_Union(smallc, bigc)) AS bigcontainsunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[false, true, true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Consider these six questions: 1) Does the small circle with radius 10 have the big circle with radius 20 inside it; 2) Does the big circle keep the small circle inside; 3) Does the big circle keep the combination of the small and big circles inside; 4) Is the big circle the same as the combination of the small and big circles; 5) Does the big circle cover its own outer edge; 6) Does the big circle wrap its own outer edge inside. All circles revolve around the point (1, 2).", "source": "original", "new_id": 1860}
{"id": 339, "function": "ST_Contains", "question": "有两个圆圈，一个小的半径是10，另一个大的半径是20，它们都围绕着那个点(1 2)画出来。你能看看小圈是不是把大圈框住了？反过来，大圈是不是把小圈包住了？然后，大圈是不是能把它们俩加起来的形状包进去？大圈本身会不会就是它们俩加起来的形状呢？还有，大圈能不能盖住它自己的外面那圈？最后，大圈能不能把它自己的外面那圈包住？", "sql": "SELECT ST_Contains(smallc, bigc) AS smallcontainsbig, ST_Contains(bigc,smallc) AS bigcontainssmall, ST_Contains(bigc, ST_Union(smallc, bigc)) AS bigcontainsunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[false, true, true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are two circles, one small with a radius of 10 and another big with a radius of 20, both drawn around that point (1 2). Can you check if the small circle frames the big one? Conversely, does the big circle wrap around the small one? Then, can the big circle include the shape that combines both of them? Might the big circle itself be the shape that combines both of them? Also, can the big circle cover its outer ring? Finally, can the big circle enclose its outer ring?", "source": "original", "new_id": 1858}
{"id": 340, "function": "ST_Contains", "question": "看看那些坐标生成的形状是什么，看看它们是不是能包住自己，甚至边界也包住自己。包括从点(1,1)扩展出5的范围、连接点(1,1)到(-1,-1)的线，以及点(1,4)。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,4) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check what shapes are formed by those coordinates and see if they can hold themselves, even covering their boundaries. Including extending from point (1,1) by 5, a line connecting point (1,1) to (-1,-1), and the point (1,4).", "source": "original", "new_id": 1863}
{"id": 339, "function": "ST_Contains", "question": "给出以下6个答案：1) 看看那个小圈子是不是包含了大圈子；2) 看看大圈子是不是包住了小圈子；3) 看看大圈子是不是包住了两个圈子的组合；4) 看看大圈子是不是跟组合的结果一样；5) 看看大圈子是不是盖住了它自己外面的那一圈；6) 看看大圈子是不是包住了它自己外面的那一圈。所有圈子都是围绕点(1 2)画出来的。", "sql": "SELECT ST_Contains(smallc, bigc) AS smallcontainsbig, ST_Contains(bigc,smallc) AS bigcontainssmall, ST_Contains(bigc, ST_Union(smallc, bigc)) AS bigcontainsunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[false, true, true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide the following 6 answers: 1) See if the smaller circle includes the bigger circle; 2) See if the bigger circle envelops the smaller circle; 3) See if the bigger circle envelops the combination of the two circles; 4) See if the bigger circle is the same as the combined result; 5) See if the bigger circle covers the outer ring of itself; 6) See if the bigger circle contains the outer ring of itself. All circles are drawn around the point (1 2).", "source": "original", "new_id": 1861}
{"id": 339, "function": "ST_Contains", "question": "在(1,2)这个地方画个小圆和大圆，一个10个单位，一个20个单位，然后看它们之间的关系。比如说，小圆是不是把大圆包住了，大圆是不是把小圆包住了，还有大圆和它们合在一起的情况什么的，最后看看大圆是不是把外面那圈东西都盖住了。", "sql": "SELECT ST_Contains(smallc, bigc) AS smallcontainsbig, ST_Contains(bigc,smallc) AS bigcontainssmall, ST_Contains(bigc, ST_Union(smallc, bigc)) AS bigcontainsunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 29) AS bigc) AS foo;", "execution_result": [[false, true, true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw a small circle and a big circle at (1,2), one with 10 units and the other with 20 units, then check their relationship. Like, does the small circle cover the big one, or does the big circle cover the small one, and what's up when they are combined, and finally see if the big circle covers that outer ring thing.", "source": "original", "new_id": 1859}
{"id": 340, "function": "ST_Contains", "question": "看看这些图形：一个从(1,1)扩展到半径5的形状，一个连接(1,1)到(-1,-1)的小线段，还有一个在(1,3)的小点。你能说说它们是什么吗？它们能包住自己吗？边缘呢？", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,3) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Take a look at these shapes: one extending from (1,1) with a radius of 5, a small line segment connecting (1,1) to (-1,-1), and a little dot at (1,3). Can you tell what they are? Can they wrap themselves? How about their edges?", "source": "original", "new_id": 1862}
{"id": 339, "function": "ST_Contains", "question": "在(1,2)这个地方，有两个圆圈，一个小的10单位大，一个大的20单位大，要进行一些关系上的比较。看看小圆是不是能把大圆圈包住，大圆圈是不是能把小圆圈包住，大圆圈是不是能把两个圆圈的混合体包住，大圆圈是不是和混合体一样大，大圆圈是不是能盖住它的外边线，还有大圆圈是不是能包住它的外边线。", "sql": "SELECT ST_Contains(smallc, bigc) AS smallcontainsbig, ST_Contains(bigc,smallc) AS bigcontainssmall, ST_Contains(bigc, ST_Union(smallc, bigc)) AS bigcontainsunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 23) AS bigc) AS foo;", "execution_result": [[false, true, true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "At the spot (1,2), there are two circles, one small with a 10-unit size and a large one with a 20-unit size. We need to do some relationship comparisons. Check if the small circle can wrap around the big circle, if the big circle can wrap around the small circle, if the big circle can wrap around the mixture of both circles, if the big circle is the same size as the mixture, if the big circle can cover its outer line, and if the big circle can wrap around its outer line.", "source": "original", "new_id": 1857}
{"id": 340, "function": "ST_Contains", "question": "对于三个形状（一个以(1,1)为中心，半径5的圆形区域；一条从(1,1)到(-1,-1)的线；在(1,9)的独立小点），你能告诉我它们的种类和四种奇妙的真真假假关系吗？", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,9) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "For three shapes (a circular area centered at (1,1) with a radius of 5; a line from (1,1) to (-1,-1); an isolated little dot at (1,9)), can you tell me their types and four curious true-or-false relationships?", "source": "original", "new_id": 1865}
{"id": 340, "function": "ST_Contains", "question": "看一下三个东西的形状吧，一个是从点(1,1)扩展5的范围，还有从(1,1)到(-1,-1)的线，最后一个就是点(1,1)本身。然后看看这些东西有没有把自己、自己的边缘包住，或者是更严格地包住。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba \nFROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Let's check out the shapes of three things: one is something that expands 5 from the point (1,1), another is a line from (1,1) to (-1,-1), and the last one is just the point (1,1) itself. Then see if these things contain themselves, their edges, or strictly contain them.", "source": "original", "new_id": 1866}
{"id": 340, "function": "ST_Contains", "question": "想知道一些几何形状，比如一个从点(1,1)开始扩展的模糊圈圈，连接点(1,1)和点(-1,-1)的那条线，还有点(1,1)这个小点，它们是什么类型的东西，以及它们是不是包含了它们自己，是不是严格地包含自己，还有边界是不是也被它们自己包着，严格地包着呢？这些答案是对还是错呢？", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba \nFROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Curious about some shapes, like a fuzzy circle starting from point (1,1), the line connecting point (1,1) and point (-1,-1), and the little dot at point (1,1), what types are they? And do they contain themselves, strictly contain themselves, and is the boundary also wrapped by them, strictly wrapped? Are these answers true or false?", "source": "original", "new_id": 1867}
{"id": 340, "function": "ST_Contains", "question": "有三个图形：一个是以点(1,1)为中心画个半径5的弯弯的圈；一个是连接点(1,1)和点(-1,-1)的线；还有一个就是点(1,1)自己。问这些图形是什么类型，它们有没有把自己包起来，是不是严格包着自己，或者包着自己的边边，是不是严格包着边边？", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba \nFROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There are three shapes: one is a curved circle with center at (1,1) and radius 5; another is a line connecting the points (1,1) and (-1,-1); and the last one is just the point (1,1) itself. Ask what type these shapes are, whether they wrap themselves, strictly wrap themselves, or wrap their own edges, and whether they strictly wrap the edges?", "source": "original", "new_id": 1864}
{"id": 341, "function": "ST_ContainsProperly", "question": "有一个以1和2为中心的圆形区域，分别有10和20的大小。想知道这两个圆里，小的那个是不是在大的里面，或者大的那个是不是在小的里面。再看看如果把它们结合起来，大的那个是不是能包住这个组合，大的那个是不是就是这个组合本身。还要看看大的那个是不是能覆盖自己边缘的一圈，以及它是不是能把自己边缘的一圈都包起来。", "sql": "SELECT ST_ContainsProperly(smallc, bigc) As smallcontainspropbig, ST_ContainsProperly(bigc,smallc) As bigcontainspropsmall, ST_ContainsProperly(bigc, ST_Union(smallc, bigc)) as bigcontainspropunion, ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) As bigcoversexterior, ST_ContainsProperly(bigc, ST_ExteriorRing(bigc)) As bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo;", "execution_result": [[false, true, false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a circular area centered at 1 and 2, with sizes 10 and 20. We want to know if the smaller one is inside the bigger one, or if the bigger one is inside the smaller one. Also, check if combining them makes the bigger one cover this combination, and if the bigger one is the combination itself. Finally, see if the bigger one can cover the edge around itself and if it can fully enclose its own edge.", "source": "original", "new_id": 1868}
{"id": 341, "function": "ST_ContainsProperly", "question": "想知道围绕点(1, 2)的小圆和大圆之间的几种关系吗？包括小圆是否在大圆内，大圆是否在小圆内，还有它们的合并是否被大圆完全包裹，以及大圆外边界和合并情况的对比。", "sql": "SELECT ST_ContainsProperly(smallc, bigc) As smallcontainspropbig, ST_ContainsProperly(bigc,smallc) As bigcontainspropsmall, ST_ContainsProperly(bigc, ST_Union(smallc, bigc)) as bigcontainspropunion, ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) As bigcoversexterior, ST_ContainsProperly(bigc, ST_ExteriorRing(bigc)) As bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo;", "execution_result": [[false, true, false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Curious about the various relationships between a small circle and a big circle around the point (1, 2)? Including whether the small circle is inside the big one, if the big circle contains the small one, and if their union is fully wrapped by the big circle, as well as a comparison of the big circle's outer boundary and the union.", "source": "original", "new_id": 1872}
{"id": 341, "function": "ST_ContainsProperly", "question": "看看两个圆圈之间的关系，一个是以点(1 2)为中心的小圆，半径是10，另一个是大圆，半径是20。需要知道小圆是否躲在大圆里面，大圆是否把小圆包起来，还有大圆和两个圆一起的形状是什么样的。大圆和它自己是不是重合，或者它自己是不是被它自己完全包住？", "sql": "SELECT ST_ContainsProperly(smallc, bigc) As smallcontainspropbig, ST_ContainsProperly(bigc,smallc) As bigcontainspropsmall, ST_ContainsProperly(bigc, ST_Union(smallc, bigc)) as bigcontainspropunion, ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) As bigcoversexterior, ST_ContainsProperly(bigc, ST_ExteriorRing(bigc)) As bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo;", "execution_result": [[false, true, false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check the relationship between two circles centered at the point (1 2), one small with a radius of 10, and the other larger with a radius of 20. We need to know if the small circle hides inside the big circle, if the big circle wraps around the small one, and what shape they make together. Does the big circle overlap itself, or is it completely enclosed by itself?", "source": "original", "new_id": 1871}
{"id": 341, "function": "ST_ContainsProperly", "question": "看看用那些点(1 2)画出的两个圈，一个小圈半径10，一个大圈半径20，然后看看小圈是不是完全在大圈里，大圈是不是完全在小圈里，大圈是不是把两个圈的组合都包住了，大圈是不是和组合完全一样，大圈能不能把外面那层圈住，大圈是不是把外面那层完全包住。", "sql": "SELECT ST_ContainsProperly(smallc, bigc) As smallcontainspropbig, ST_ContainsProperly(bigc,smallc) As bigcontainspropsmall, ST_ContainsProperly(bigc, ST_Union(smallc, bigc)) as bigcontainspropunion, ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) As bigcoversexterior, ST_ContainsProperly(bigc, ST_ExteriorRing(bigc)) As bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo;", "execution_result": [[false, true, false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Let's see if with those points (1 2) making two circles, a small one with a radius of 10 and a big one with a radius of 20, the small circle is completely inside the big one, the big circle is completely inside the small one, if the big circle covers the combination of both circles, if the big circle is exactly the same as the combination, if the big circle can cover the outer layer, and if the big circle completely wraps the outer layer.", "source": "original", "new_id": 1869}
{"id": 342, "function": "ST_ContainsProperly", "question": "给出三个东西：一个围绕(1,1)点的5大小的圆圈，一个由(1,1)和(-1,-1)连起来的线，还有一个单独的(1,1)小点，然后看看每个东西的类型是什么，以及它们和它们自己的边界是不是互相包含或严格包含的结果表。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide three items: a circle of size 5 around the point (1,1), a line connecting (1,1) and (-1,-1), and a single small dot at (1,1). Then check what type each thing is and whether they and their own boundaries contain or strictly contain each other, and give the results in a table.", "source": "original", "new_id": 1877}
{"id": 341, "function": "ST_ContainsProperly", "question": "想象两个圆，一个小圆半径是10，另一个大圆半径是20，它们围绕在点(1 2)旁边。看看这两个圆之间的关系，比如说，谁包含谁，或者它们的边界有没有覆盖对方，或者它们加起来和大圆是不是一样大。", "sql": "SELECT ST_ContainsProperly(smallc, bigc) As smallcontainspropbig, ST_ContainsProperly(bigc,smallc) As bigcontainspropsmall, ST_ContainsProperly(bigc, ST_Union(smallc, bigc)) as bigcontainspropunion, ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) As bigcoversexterior, ST_ContainsProperly(bigc, ST_ExteriorRing(bigc)) As bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo;", "execution_result": [[false, true, false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine two circles, one smaller with a radius of 10, and another bigger with a radius of 20, both surrounding the point (1 2). Check the relationship between these two circles, like who contains whom, if their edges cover each other, or if they together equal the big circle.", "source": "original", "new_id": 1873}
{"id": 342, "function": "ST_ContainsProperly", "question": "想象一下，有一个以(1,1)为中心的形状，扩展到距离5的地方，顺便还有一个从(1,1)到(-1,-1)的小线段，最后加上一个孤独的点(1,1)。你能告诉我这些形状的类型吗？另外，它们能不能包住自己、严格包住自己、包住自己的边界、或者严格包住自己的边界呢？", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a shape centered at (1,1) stretching out to 5, along with a little line from (1,1) to (-1,-1), and finally a lone point at (1,1). Can you tell me what types these shapes are? Also, can they wrap themselves, strictly wrap themselves, wrap their edges, or strictly wrap their edges?", "source": "original", "new_id": 1874}
{"id": 341, "function": "ST_ContainsProperly", "question": "有个点在(1, 2)，围绕它画两个圆，一个是半径10的，一个是半径20的。看看小圆是不是完全藏在大圆里，大圆是不是完全盖住小圆，还有大圆和它们俩的总面积是不是一样，看看大圆是不是盖住了自己外面的那一圈，以及是不是也完全包住了那一圈。", "sql": "SELECT ST_ContainsProperly(smallc, bigc) As smallcontainspropbig, ST_ContainsProperly(bigc,smallc) As bigcontainspropsmall, ST_ContainsProperly(bigc, ST_Union(smallc, bigc)) as bigcontainspropunion, ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion, ST_Covers(bigc, ST_ExteriorRing(bigc)) As bigcoversexterior, ST_ContainsProperly(bigc, ST_ExteriorRing(bigc)) As bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo;", "execution_result": [[false, true, false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a point at (1, 2), with two circles around it, one with a radius of 10 and another with a radius of 20. Check if the small circle is completely hidden inside the big circle, if the big circle fully covers the small one, if the big circle and their total area are the same, and if the big circle covers its outer ring and also fully encloses that ring.", "source": "original", "new_id": 1870}
{"id": 342, "function": "ST_ContainsProperly", "question": "想象一下有一个圆形区域围绕着一个叫做(1,1)的小点，半径是5，另外有一条线从(1,1)到(-1,-1)，还有一个孤零零的点就是(1,1)。你能不能告诉我这些到底是什么形状，并且看看它们是否能包住自己，包住自己边边，或是更严格地包住自己和边边？", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine there's a round area surrounding a little dot called (1,1) with a radius of 5, then there's a line from (1,1) to (-1,-1), and a lonely point which is just (1,1). Can you tell me what these shapes actually are, and check if they can hold themselves, hold their edges, or more strictly hold themselves and their edges?", "source": "original", "new_id": 1876}
{"id": 342, "function": "ST_ContainsProperly", "question": "用三个不同的形状来填充一个表格，一个是围绕(1,1)点的圆圈，两个点(1,1)和(-1,-1)连成的线，还有一个是孤零零的点(1,1)。然后看看它们是什么类型，还有四种奇怪的包含关系结果。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Fill a table with three different shapes: a circle around the point (1,1), a line connecting the points (1,1) and (-1,-1), and a lonely point (1,1). Then check what types they are and the results of four odd containment relations.", "source": "original", "new_id": 1879}
{"id": 342, "function": "ST_ContainsProperly", "question": "想象三个有趣的形状：一个围绕(1,1)的圆形区域，半径是5；一个从(1,1)到(-1,-1)的直线；还有孤零零的点(1,1)。然后，看看这些形状自己和自己边界的关系，顺便说说它们每个是什么类型。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine three interesting shapes: a circular area around (1,1) with a radius of 5; a straight line from (1,1) to (-1,-1); and the lonely point (1,1). Then, check how these shapes relate to themselves and their boundaries, and mention what each one is.", "source": "original", "new_id": 1878}
{"id": 342, "function": "ST_ContainsProperly", "question": "想象一下有一个点(1,1)周围有个5和1的范围，还有一条线从(1,1)到(-1,-1)，以及那个单独的点(1,1)。你能说出这些形状的类型吗？另外，看看这些形状是否能把自己包住、严密地包住、包住自己的边界，或者严密地包住自己的边界。", "sql": "SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa, ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba FROM (VALUES ( ST_Buffer(ST_Point(1,1), 5,1) ), ( ST_MakeLine(ST_Point(1,1), ST_Point(-1,-1) ) ), ( ST_Point(1,1) ) ) As foo(geomA);", "execution_result": [["ST_Polygon", true, false, false, false], ["ST_LineString", true, false, false, false], ["ST_Point", true, true, false, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine there's a little dot at (1,1) with a range of 5 and 1 around it, a line stretching from (1,1) to (-1,-1), and just the lone dot (1,1). Can you figure out what kind of shapes these are? Also, see if these shapes can wrap themselves up, wrap tightly, wrap their edges, or tightly wrap their edges.", "source": "original", "new_id": 1875}
{"id": 343, "function": "ST_CoveredBy", "question": "有个小圆和大圆，都是从某个点(1 2)出发，看看小圆自己能不能完全罩住自己，也看看小圆能不能被大圆罩住，再看看大圆的边边能不能被大圆罩住，最后看看大圆的边边是不是躲在大圆的肚子里。", "sql": "SELECT ST_CoveredBy(smallc,smallc) AS smallinsmall, ST_CoveredBy(smallc, bigc) AS smallcoveredbybig, ST_CoveredBy(ST_ExteriorRing(bigc), bigc) AS exteriorcoveredbybig, ST_Within(ST_ExteriorRing(bigc),bigc) AS exeriorwithinbig FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a small circle and a big circle, both starting from the point (1 2). Check if the small circle can fully cover itself, if it can get covered by the big circle, if the edge of the big circle can be covered by the big circle, and finally, if this edge is hiding inside the big circle.", "source": "original", "new_id": 1881}
{"id": 343, "function": "ST_CoveredBy", "question": "围绕着坐标(1 2)画两个圆圈，一个大点，一个小点，看看小圈是不是自己完全包住了，接着看看小圈是不是被大圈完全包住了，再看看大圈的外边线是不是被自己包住了，最后看看这条外边线是不是完全在大圈里。", "sql": "SELECT ST_CoveredBy(smallc,smallc) AS smallinsmall, ST_CoveredBy(smallc, bigc) AS smallcoveredbybig, ST_CoveredBy(ST_ExteriorRing(bigc), bigc) AS exteriorcoveredbybig, ST_Within(ST_ExteriorRing(bigc),bigc) AS exeriorwithinbig FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Draw two circles around the coordinates (1 2), one bigger, one smaller, and see if the smaller circle completely encloses itself, then check if the smaller circle is completely enclosed by the bigger one, then see if the outer line of the bigger circle is enclosed by itself, and finally check if this outer line is completely inside the bigger circle.", "source": "original", "new_id": 1880}
{"id": 343, "function": "ST_CoveredBy", "question": "想象在(1,2)的位置画两个圆，一个小的直径10，一个大的直径20。然后看看小圆是不是完全在自己的范围内，小圆是不是被大圆完全包住，大圆外面的边是不是在大圆里面，以及大圆外面的边是不是紧紧贴在大圆里面。", "sql": "SELECT ST_CoveredBy(smallc,smallc) AS smallinsmall, ST_CoveredBy(smallc, bigc) AS smallcoveredbybig, ST_CoveredBy(ST_ExteriorRing(bigc), bigc) AS exteriorcoveredbybig, ST_Within(ST_ExteriorRing(bigc),bigc) AS exeriorwithinbig FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine drawing two circles at location (1,2), a smaller one with a diameter of 10 and a larger one with a diameter of 20. Then check if the small circle is fully within itself, if the small circle is completely covered by the big circle, if the outer edge of the big circle is within the big circle, and if this outer edge is snugly inside the big circle.", "source": "original", "new_id": 1882}
{"id": 343, "function": "ST_CoveredBy", "question": "看看围绕着点(1 2)的小圆圈，它的半径是10，是否被自己完全包住；再看看这个小圆圈是否被围绕同样点、半径为20的更大圆圈包住；然后看看更大圆圈的边界是否被自己完全包住；最后看看这个边界是否完全在那个更大圆圈里面。", "sql": "SELECT ST_CoveredBy(smallc,smallc) AS smallinsmall, ST_CoveredBy(smallc, bigc) AS smallcoveredbybig, ST_CoveredBy(ST_ExteriorRing(bigc), bigc) AS exteriorcoveredbybig, ST_Within(ST_ExteriorRing(bigc),bigc) AS exeriorwithinbig FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the small circle around point (1 2) with a radius of 10 is fully covered by itself; then see if this small circle is covered by a larger circle with a radius of 20 around the same point; next, check if the boundary of the larger circle is fully covered by itself; finally, see if this boundary is entirely within that larger circle.", "source": "original", "new_id": 1883}
{"id": 343, "function": "ST_CoveredBy", "question": "想象一个围绕某个点(1 2)的小圈，半径是10，然后再想象一个更大的圈，半径是20。你需要看看小圈是不是被自己盖住了，然后看看小圈是不是被大圈盖住了。再看看大圈的外边是不是被自己盖住了，最后看看这个外边是不是躲在大圈里面。", "sql": "SELECT ST_CoveredBy(smallc,smallc) AS smallinsmall, ST_CoveredBy(smallc, bigc) AS smallcoveredbybig, ST_CoveredBy(ST_ExteriorRing(bigc), bigc) AS exteriorcoveredbybig, ST_Within(ST_ExteriorRing(bigc),bigc) AS exeriorwithinbig FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a small circle around a point (1 2) with a radius of 10, and then a bigger circle with a radius of 20. You need to see if the small circle is covered by itself, then if the small circle is covered by the big circle. Also, check if the outer edge of the big circle is covered by itself, and finally if this outer edge is hiding inside the big circle.", "source": "original", "new_id": 1884}
{"id": 344, "function": "ST_Covers", "question": "有一个点在(1, 2)那里，以10和20为半径画了两个圈圈，看看小圈是不是自己包住自己，小圈能不能包住大圈，大圈能不能把它自己的外圈罩住，还有大圈能不能把外圈放在里面。", "sql": "SELECT ST_Covers(smallc,smallc) AS smallinsmall, ST_Covers(smallc, bigc) AS smallcoversbig, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a point at (1, 2) with circles drawn having radii of 10 and 20. Check if the smaller circle covers itself, if the smaller circle can cover the bigger circle, if the bigger circle can cover its own outer ring, and if the bigger circle can contain the outer ring.", "source": "original", "new_id": 1888}
{"id": 344, "function": "ST_Covers", "question": "想象一下，以(1, 2)为中心，画一个半径是10的小圈和一个半径是20的大圈。你能告诉我，小圈是不是自己覆盖自己？小圈能不能盖住大圈？大圈能不能盖住它的外边？大圈是不是把外边圈在里面了？", "sql": "SELECT ST_Covers(smallc,smallc) AS smallinsmall, ST_Covers(smallc, bigc) AS smallcoversbig, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine drawing a small circle with a radius of 10 and a big circle with a radius of 20, both centered at (1, 2). Can you tell me if the small circle covers itself? Can the small circle cover the big circle? Does the big circle cover its outer edge? Is the outer edge contained within the big circle?", "source": "original", "new_id": 1890}
{"id": 344, "function": "ST_Covers", "question": "看看这四个问题：一个围着点(1 2)画的小圈圈，自己能不能盖住自己？这个小圈圈能不能盖住一个围着同一点更大的圈圈？大的那个圈圈能不能盖住它的外圈？大的圈圈能不能把它的外圈装进去？", "sql": "SELECT ST_Covers(smallc,smallc) AS smallinsmall, ST_Covers(smallc, bigc) AS smallcoversbig, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Consider these four questions: Can a little circle around the point (1 2) cover itself? Can this little circle cover a bigger circle around the same point? Can the big circle cover its outer loop? Can the big circle fit its outer loop inside it?", "source": "original", "new_id": 1889}
{"id": 345, "function": "ST_Covers", "question": "创建一个结果表，看看一个大约300米的范围是否能包住小点POINT(-99.33 31.483)，还有10米的圈是否能包住它自己的中心点。", "sql": "SELECT ST_Covers(geog_poly, geog_pt) AS poly_covers_pt, ST_Covers(ST_Buffer(geog_pt,10), geog_pt) AS buff_10m_covers_cent FROM (SELECT ST_Buffer(ST_GeogFromText('SRID=4326;POINT(-99.327 31.4821)'), 300) AS geog_poly, ST_GeogFromText('SRID=4326;POINT(-99.33 31.483)') AS geog_pt ) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Create a result table to see if an approximately 300-meter area can encompass the small dot POINT(-99.33 31.483), and if a 10-meter circle can encompass its own center point.", "source": "original", "new_id": 1897}
{"id": 345, "function": "ST_Covers", "question": "有一个从地点(-99.327 31.4821)开始，扩展了300米的形状，看看它是否能把另一个地点(-99.33 31.483)包起来。另外，看看从地点(-99.33 31.483)扩展10米的形状是否能把自己包起来。都用那个常见的地球坐标系统。", "sql": "SELECT ST_Covers(geog_poly, geog_pt) AS poly_covers_pt, ST_Covers(ST_Buffer(geog_pt,10), geog_pt) AS buff_10m_covers_cent FROM (SELECT ST_Buffer(ST_GeogFromText('SRID=4326;POINT(-99.327 31.4821)'), 300) AS geog_poly, ST_GeogFromText('SRID=4326;POINT(-99.33 31.483)') AS geog_pt ) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "There's a shape starting from location (-99.327 31.4821) that stretches 300 meters; see if it can wrap around another location (-99.33 31.483). Also, check if a shape stretching 10 meters from location (-99.33 31.483) can wrap around itself. Use that common earth coordinate system.", "source": "original", "new_id": 1893}
{"id": 345, "function": "ST_Covers", "question": "给出两个判断结果，看看那个以POINT(-99.327 31.4821)为中心的300米圆圈是否把POINT(-99.33 31.483)包在里面，以及POINT(-99.33 31.483)周围10米的小圈是不是也把它的中心点包含在内。", "sql": "SELECT ST_Covers(geog_poly, geog_pt) AS poly_covers_pt, ST_Covers(ST_Buffer(geog_pt,10), geog_pt) AS buff_10m_covers_cent FROM (SELECT ST_Buffer(ST_GeogFromText('SRID=4326;POINT(-99.327 31.4821)'), 300) AS geog_poly, ST_GeogFromText('SRID=4326;POINT(-99.33 31.483)') AS geog_pt ) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide two judgment results to check if the 300-meter circle centered at POINT(-99.327 31.4821) includes POINT(-99.33 31.483), and whether the small 10-meter circle around POINT(-99.33 31.483) also contains its center point.", "source": "original", "new_id": 1896}
{"id": 343, "function": "ST_CoveredBy", "question": "给出四个关于空间关系的判断结果，比如：1) 看看那个围绕点(1, 2)形成的10单位大小的形状是不是被自己完全包住了；2) 看看这个形状是不是被围绕同一点形成的20单位大小的形状完全包住；3) 看看围绕点(1, 2)形成的20单位大小的形状的边界是不是被自己完全包住了；4) 看看这个边界是不是严格在围绕点(1, 2)形成的20单位大小的形状里面。", "sql": "SELECT ST_CoveredBy(smallc,smallc) AS smallinsmall, ST_CoveredBy(smallc, bigc) AS smallcoveredbybig, ST_CoveredBy(ST_ExteriorRing(bigc), bigc) AS exteriorcoveredbybig, ST_Within(ST_ExteriorRing(bigc),bigc) AS exeriorwithinbig FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide four judgments about spatial relations, like: 1) See if the shape formed around point (1, 2) with a size of 10 units is completely enveloped by itself; 2) Check if this shape is completely enveloped by the shape formed around the same point with a size of 20 units; 3) Check if the boundary of the shape formed around point (1, 2) with a size of 20 units is completely enveloped by itself; 4) Check if this boundary is strictly inside the shape formed around point (1, 2) with a size of 20 units.", "source": "original", "new_id": 1885}
{"id": 344, "function": "ST_Covers", "question": "想象在(1, 2)这个地方画两个圆圈，一个小一点，半径10，另一个大一点，半径20。然后试着看看：小圈能不能完全盖住自己？小圈有没有把大圈也盖住？大圈能不能盖住它自己的外边线？大圈有没有把外边线包在里面？", "sql": "SELECT ST_Covers(smallc,smallc) AS smallinsmall, ST_Covers(smallc, bigc) AS smallcoversbig, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine drawing two circles at the spot (1, 2), one smaller with a radius of 10, and another larger with a radius of 20. Then try to see: Can the small circle completely cover itself? Did the small circle also cover the big circle? Can the big circle cover its own outer line? Is the big circle enclosing that outer line inside?", "source": "original", "new_id": 1887}
{"id": 345, "function": "ST_Covers", "question": "看看在坐标系里，那个点(-99.327 31.4821)扩展成的300米范围能不能盖住另一个点(-99.33 31.483)，顺便看看那个点(-99.33 31.483)自己周围10米的范围是不是能包住自己。", "sql": "SELECT ST_Covers(geog_poly, geog_pt) AS poly_covers_pt, ST_Covers(ST_Buffer(geog_pt,10), geog_pt) AS buff_10m_covers_cent FROM (SELECT ST_Buffer(ST_GeogFromText('SRID=4326;POINT(-99.327 31.4821)'), 300) AS geog_poly, ST_GeogFromText('SRID=4326;POINT(-99.33 31.483)') AS geog_pt ) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the area expanded 300 meters around the point (-99.327 31.4821) in the coordinate system can cover another point (-99.33 31.483), and also see if the 10-meter area around the point (-99.33 31.483) can contain itself.", "source": "original", "new_id": 1894}
{"id": 344, "function": "ST_Covers", "question": "想象一下，一个从1 2这个点扩展出去10单位的小圈圈和一个20单位的大圈圈，看看：1) 小圈圈能不能完全包住自己 2) 小圈圈能不能把大圈圈包住 3) 大圈圈能不能把它自己外边的圈圈包住 4) 大圈圈能不能把它自己外边的圈圈装进去。", "sql": "SELECT ST_Covers(smallc,smallc) AS smallinsmall, ST_Covers(smallc, bigc) AS smallcoversbig, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine a small circle extending 10 units from the spot 1 2 and a larger circle of 20 units, and check: 1) Can the small circle fully cover itself 2) Can the small circle cover the big circle 3) Can the big circle wrap around its own outer circle 4) Can the big circle fit its own outer circle inside?", "source": "original", "new_id": 1886}
{"id": 344, "function": "ST_Covers", "question": "看看这几个有趣的问题：1单位2单位点的10距离外扩形状，自身是否能罩住自己？再看看它能不能罩住同样中心却扩到20距离的大家伙？然后，那个大形状罩住外面线条的情况如何？最后，它能把外面线条全包住吗？", "sql": "SELECT ST_Covers(smallc,smallc) AS smallinsmall, ST_Covers(smallc, bigc) AS smallcoversbig, ST_Covers(bigc, ST_ExteriorRing(bigc)) AS bigcoversexterior, ST_Contains(bigc, ST_ExteriorRing(bigc)) AS bigcontainsexterior FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) AS smallc, ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) AS bigc) AS foo;", "execution_result": [[true, false, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Consider these curious questions: Can the shape extending 10 units from the 1, 2 point cover itself? Also, can it cover the bigger one that extends 20 units from the same center? Then, how does the big shape cover the line on the outside? Lastly, can it completely enclose that outside line?", "source": "original", "new_id": 1891}
{"id": 345, "function": "ST_Covers", "question": "想象有个围绕着坐标点(-99.327 31.4821)的300米大圈，看看这个圈圈是不是把另一个坐标点(-99.33 31.483)给圈住了。同时，围绕着点(-99.33 31.483)画个小圈圈，看看这个小圈圈能不能把自己圈住。", "sql": "SELECT ST_Covers(geog_poly, geog_pt) AS poly_covers_pt, ST_Covers(ST_Buffer(geog_pt,10), geog_pt) AS buff_10m_covers_cent FROM (SELECT ST_Buffer(ST_GeogFromText('SRID=4326;POINT(-99.327 31.4821)'), 300) AS geog_poly, ST_GeogFromText('SRID=4326;POINT(-99.33 31.483)') AS geog_pt ) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine there is a big circle around the coordinates (-99.327 31.4821) with a 300-meter radius and check if this circle encloses another coordinate (-99.33 31.483). Also, draw a small circle around the point (-99.33 31.483) and see if this small circle can enclose itself.", "source": "original", "new_id": 1892}
{"id": 345, "function": "ST_Covers", "question": "给出两个答案，第一个是关于一个以点(-99.327 31.4821)为中心的300米范围的大概形状是否把点(-99.33 31.483)包裹住，第二个是看一个以点(-99.33 31.483)为中心的10米范围是否也把它自己的中心点包住。", "sql": "SELECT ST_Covers(geog_poly, geog_pt) AS poly_covers_pt, ST_Covers(ST_Buffer(geog_pt,10), geog_pt) AS buff_10m_covers_cent FROM (SELECT ST_Buffer(ST_GeogFromText('SRID=4326;POINT(-99.327 31.4821)'), 300) AS geog_poly, ST_GeogFromText('SRID=4326;POINT(-99.33 31.483)') AS geog_pt ) AS foo;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Provide two answers: the first checks if a roughly 300-meter shape centered at point (-99.327 31.4821) wraps around point (-99.33 31.483), and the second checks if a 10-meter area centered at point (-99.33 31.483) also encloses its own center.", "source": "original", "new_id": 1895}
{"id": 347, "function": "ST_Disjoint", "question": "看看那个在(0,0)的小点和从(2,0)到(0,2)的线是不是完全不碰面。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little dot at (0,0) and the line stretching from (2,0) to (0,2) don't meet at all.", "source": "original", "new_id": 1899}
{"id": 347, "function": "ST_Disjoint", "question": "看看那个坐标是0 0的小点，是不是和从点2 0到点0 2的那条线完全没有交集。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little dot at coordinates 0 0 has absolutely no overlap with the line going from point 2 0 to point 0 2.", "source": "original", "new_id": 1898}
{"id": 347, "function": "ST_Disjoint", "question": "看看坐标在(0, 0)的小点和从(2, 0)到(0, 2)的那条线，是不是完全不碰面？", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little dot at coordinates (0, 0) and the line from (2, 0) to (0, 2) don't touch at all?", "source": "original", "new_id": 1900}
{"id": 348, "function": "ST_Disjoint", "question": "看看坐标为(0 0)的小点和从(0 0)到(0 2)的那条竖着的线是不是完全不碰面。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the tiny dot at (0 0) and that vertical line from (0 0) to (0 2) don't touch each other at all.", "source": "original", "new_id": 1905}
{"id": 348, "function": "ST_Disjoint", "question": "看看0 0这个地方的点和从0 0到0 2那条直线，是不是完全不碰面，互不相交。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the point at 0 0 and the line from 0 0 to 0 2 completely avoid each other and do not touch at all.", "source": "original", "new_id": 1906}
{"id": 347, "function": "ST_Disjoint", "question": "看看那个点在(0 0)和由(2 0)到(0 2)组成的线之间是否完全分开，用是或不是回答。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the point at (0 0) is completely separate from the line going from (2 0) to (0 2), and answer with yes or no.", "source": "original", "new_id": 1901}
{"id": 347, "function": "ST_Disjoint", "question": "看看那些坐标，像是POINT(0 0)和LINESTRING ( 2 0, 0 2)，有没有完全不碰面，给个是或不是的结果。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if those coordinates, like POINT(0 0) and LINESTRING (2 0, 0 2), don't touch each other at all, and give a yes or no result.", "source": "original", "new_id": 1902}
{"id": 348, "function": "ST_Disjoint", "question": "看看位于原点的那个小点和由两个点(0 0)到(0 2)组成的竖线之间有没有完全不碰面。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little dot at the origin and the vertical line formed by two points from (0 0) to (0 2) completely do not meet.", "source": "original", "new_id": 1904}
{"id": 348, "function": "ST_Disjoint", "question": "看看原点坐标(0 0)和那条从(0 0)到(0 2)的直线有没有完全分开，结果是对还是错？", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the origin coordinates (0 0) and that line stretching from (0 0) to (0 2) are completely apart, is the result true or false?", "source": "original", "new_id": 1907}
{"id": 348, "function": "ST_Disjoint", "question": "看看那个起点在(0,0)和直立的小线段从(0,0)到(0,2)之间有没有互不干扰的关系，结果是对还是错呢？", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the starting spot at (0,0) and the upright little line from (0,0) to (0,2) have a non-interfering relationship, is the result true or false?", "source": "original", "new_id": 1909}
{"id": 349, "function": "ST_Equals", "question": "看看把那条从(0, 0)到(10, 10)的线颠倒顺序后，跟从(0, 0)经过(5, 5)到(10, 10)的线是不是完全一样？", "sql": "SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if reversing the order of that line from (0, 0) to (10, 10) makes it exactly the same as the line that goes from (0, 0) through (5, 5) to (10, 10)?", "source": "original", "new_id": 1913}
{"id": 348, "function": "ST_Disjoint", "question": "看看这两个坐标，(0 0)的小点和从(0 0)到(0 2)的竖线，它们之间有没有互不干扰的空间情况，结果用对错来表示。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there is any non-interfering spatial situation between these coordinates, the little dot at (0 0) and the vertical line from (0 0) to (0 2), and show the result as true or false.", "source": "original", "new_id": 1908}
{"id": 349, "function": "ST_Equals", "question": "看看那个从(0, 0)到(10, 10)的小线条，假如它的点顺序转个方向，再跟另一个从(0, 0)经过(5, 5)到(10, 10)的小线条对比，它们的形状是不是一样呢？", "sql": "SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Imagine the little line from (0, 0) to (10, 10) gets its order of points flipped around, then compare it to another little line that goes from (0, 0) through (5, 5) to (10, 10). Are their shapes the same?", "source": "original", "new_id": 1912}
{"id": 349, "function": "ST_Equals", "question": "看看把那条从0 0到10 10的线反过来后，是不是和那条经过5 5的线在空间上完全一样。", "sql": "SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if flipping the line from 0 0 to 10 10 makes it exactly the same in space as the line that goes through 5 5.", "source": "original", "new_id": 1910}
{"id": 349, "function": "ST_Equals", "question": "看看那个从头到尾反转的小线条(0 0到10 10)和那个中间夹了个点(5 5)的线条(0 0到10 10)是不是同样的形状。", "sql": "SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little line reversed from start to end (0 0 to 10 10) and the line with a point in the middle (5 5) between 0 0 and 10 10 are the same shape.", "source": "original", "new_id": 1911}
{"id": 349, "function": "ST_Equals", "question": "看看把那条从(0, 0)到(10, 10)的线倒过来后，是不是和另一条经过(0, 0)、(5, 5)再到(10, 10)的线一样？结果是对还是错？", "sql": "SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if flipping the line from (0, 0) to (10, 10) makes it the same as the other line that goes through (0, 0), (5, 5), and then to (10, 10). Is the result true or false?", "source": "original", "new_id": 1914}
{"id": 349, "function": "ST_Equals", "question": "试着看看一条从0 0到10 10的线，如果你把它的顺序倒过来，然后和一条从0 0经过5 5再到10 10的线比较，它们是不是一样的？", "sql": "SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Try to see if a line going from 0 0 to 10 10, when you flip its order, is the same as a line going from 0 0 through 5 5 to 10 10?", "source": "original", "new_id": 1915}
{"id": 350, "function": "ST_Equals", "question": "看看从(0 0)到(10 10)的直线和经过(5 5)的那条线是不是在地图上画出来一模一样。", "sql": "SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the straight line from (0 0) to (10 10) and the one that passes through (5 5) look exactly the same on a map.", "source": "original", "new_id": 1918}
{"id": 350, "function": "ST_Equals", "question": "看看连接点(0 0)和(10 10)的那条简单线段，和经过(0 0)、(5 5)、(10 10)的那条折线，是否完全在空间上重合呢？", "sql": "SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the simple line joining the dots at (0 0) and (10 10) perfectly overlaps in space with the zigzag passing through (0 0), (5 5), and (10 10).", "source": "original", "new_id": 1916}
{"id": 350, "function": "ST_Equals", "question": "看看两个由(0 0)到(10 10)和(0 0, 5 5, 10 10)这些点连成的线是不是长得一样，一个是直线，另一个中间多了个点。", "sql": "SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the lines made from points (0 0) to (10 10) and (0 0, 5 5, 10 10) look the same, one is a straight line, the other has an extra point in the middle.", "source": "original", "new_id": 1917}
{"id": 350, "function": "ST_Equals", "question": "看看那条从(0, 0)到(10, 10)的直线和另一条经过(0, 0), (5, 5), (10, 10)的小路是不是一样，给个对或错的答案。", "sql": "SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line from (0, 0) to (10, 10) is the same as the path going through (0, 0), (5, 5), (10, 10), and give a true or false answer.", "source": "original", "new_id": 1919}
{"id": 347, "function": "ST_Disjoint", "question": "看看那些坐标，点(0 0)和线段(2 0到0 2)之间有没有完全没有交集的情况，用对错来表示就行。", "sql": "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check those coordinates, whether the point (0 0) and the line segment from (2 0 to 0 2) have a situation of complete non-overlap, just indicate with true or false.", "source": "original", "new_id": 1903}
{"id": 350, "function": "ST_Equals", "question": "看看这两条线有没有区别，一条是从(0, 0)到(10, 10)的直线，另一条是从(0, 0)经过(5, 5)再到(10, 10)的路线，它们在空间上是不是一样的呢？", "sql": "SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if there's any difference between these two paths: one is a straight line from (0, 0) to (10, 10), and the other goes from (0, 0) through (5, 5) to (10, 10). Are they the same in space?", "source": "original", "new_id": 1920}
{"id": 351, "function": "ST_Intersects", "question": "看看那个在(0 0)的小点是否碰到由两个点(2 0)和(0 2)连起来的那段线。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little dot at (0 0) touches the line made by connecting two points at (2 0) and (0 2).", "source": "original", "new_id": 1922}
{"id": 351, "function": "ST_Intersects", "question": "看看从(0 0)出发的小点是不是会碰到或者经过那条从(2 0)到(0 2)的线。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if the little dot starting at (0 0) will touch or pass through the line going from (2 0) to (0 2).", "source": "original", "new_id": 1923}
{"id": 351, "function": "ST_Intersects", "question": "看看那个小点在(0, 0)和那条线段从(2, 0)到(0, 2)之间有没有碰到一起的情况。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little dot at (0, 0) and the line from (2, 0) to (0, 2) have any situation where they bump into each other.", "source": "original", "new_id": 1924}
{"id": 351, "function": "ST_Intersects", "question": "看看从(2 0)到(0 2)的线，跟(0 0)这个点有没有交集，给个是或不是的答案。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if the line from (2 0) to (0 2) crosses the point at (0 0), and give a yes or no answer.", "source": "original", "new_id": 1926}
{"id": 351, "function": "ST_Intersects", "question": "看看那些点和线在(0 0)和(2 0, 0 2)之间有没有交集，然后告诉我结果是对还是错。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if those dots and lines between (0 0) and (2 0, 0 2) have any overlap, and then tell me if the result is true or false.", "source": "original", "new_id": 1927}
{"id": 350, "function": "ST_Equals", "question": "看看那些点连接成的线有没有完全一样，比如一个是从(0, 0)到(10, 10)，另一个是从(0, 0)经过(5, 5)到(10, 10)。结果是对还是错呢？", "sql": "SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the lines made by connecting those points are exactly the same, like one goes from (0, 0) to (10, 10), and the other goes from (0, 0) through (5, 5) to (10, 10). Is the result true or false?", "source": "original", "new_id": 1921}
{"id": 351, "function": "ST_Intersects", "question": "看看在坐标(0, 0)的小点和那些经过(2, 0)到(0, 2)的线之间有没有交集，结果是个对与错的问题哦。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if the tiny dot at coordinates (0, 0) and the line that goes from (2, 0) to (0, 2) intersect, and the result is a true or false kind of thing.", "source": "original", "new_id": 1925}
{"id": 352, "function": "ST_Intersects", "question": "看看那条由两个点(-43.23456 72.4567)和(-43.23456 72.4568)拉成的线，和另一个点(-43.23456 72.4567772)在地球上有没有交集。", "sql": "SELECT ST_Intersects( 'SRID=4326;LINESTRING(-43.23456 72.4567,-43.23456 72.4568)'::geography, 'SRID=4326;POINT(-43.23456 72.4567772)'::geography );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if the line drawn by two points (-43.23456 72.4567) and (-43.23456 72.4568) has an intersection with another point (-43.23456 72.4567772) on the globe.", "source": "original", "new_id": 1929}
{"id": 352, "function": "ST_Intersects", "question": "看看两个带有坐标的东西，一个是从点(-43.23456 72.4567)到(-43.23456 72.4568)的线，另一个是点(-43.23456 72.4567772)，它们是否在某种地理范围内碰到一起。", "sql": "SELECT ST_Intersects( 'SRID=4326;LINESTRING(-43.23456 72.4567,-43.23456 72.4568)'::geography, 'SRID=4326;POINT(-43.23456 72.4567772)'::geography );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if two things with coordinates, one being a line from point (-43.23456 72.4567) to (-43.23456 72.4568), and the other a point (-43.23456 72.4567772), meet each other within some geographical area.", "source": "original", "new_id": 1928}
{"id": 353, "function": "ST_Intersects", "question": "看看那个小点在(0 0)的位置，会不会碰到从(0 0)到(0 2)的那条线？", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if that little dot at (0 0) bumps into the line that stretches from (0 0) to (0 2)?", "source": "original", "new_id": 1934}
{"id": 352, "function": "ST_Intersects", "question": "看看由点(-43.23456 72.4567)和点(-43.23456 72.4568)拉出的那条线和另外那个点(-43.23456 72.4567772)之间有没有碰上，结果是对还是错。", "sql": "SELECT ST_Intersects( 'SRID=4326;LINESTRING(-43.23456 72.4567,-43.23456 72.4568)'::geography, 'SRID=4326;POINT(-43.23456 72.4567772)'::geography );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if the line drawn between the points (-43.23456 72.4567) and (-43.23456 72.4568) bumps into that other point (-43.23456 72.4567772), and tell if it's yes or no.", "source": "original", "new_id": 1933}
{"id": 352, "function": "ST_Intersects", "question": "在地球的坐标系里，看看从(-43.23456 72.4567)到(-43.23456 72.4568)的那条线和坐标(-43.23456 72.4567772)的点有没有碰到。", "sql": "SELECT ST_Intersects( 'SRID=4326;LINESTRING(-43.23456 72.4567,-43.23456 72.4568)'::geography, 'SRID=4326;POINT(-43.23456 72.4567772)'::geography );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "In the Earth's coordinate system, see if the line from (-43.23456 72.4567) to (-43.23456 72.4568) and the point at (-43.23456 72.4567772) bump into each other.", "source": "original", "new_id": 1930}
{"id": 352, "function": "ST_Intersects", "question": "看看这条连接两个小点的线条，坐标是(-43.23456 72.4567)到(-43.23456 72.4568)，还有一个特别的小点(-43.23456 72.4567772)，它们有没有碰到一起？结果是对还是错呢？", "sql": "SELECT ST_Intersects( 'SRID=4326;LINESTRING(-43.23456 72.4567,-43.23456 72.4568)'::geography, 'SRID=4326;POINT(-43.23456 72.4567772)'::geography );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line connecting two little dots at coordinates (-43.23456 72.4567) to (-43.23456 72.4568) and a special little dot at (-43.23456 72.4567772) bump into each other. Is the result true or false?", "source": "original", "new_id": 1932}
{"id": 353, "function": "ST_Intersects", "question": "看看那个在(0 0)的小点是不是碰到了从(0 0)到(0 2)的那条竖线。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if the little dot at (0 0) touches that vertical line from (0 0) to (0 2).", "source": "original", "new_id": 1935}
{"id": 352, "function": "ST_Intersects", "question": "看看从(-43.23456 72.4567)到(-43.23456 72.4568)拉出的那条线和在(-43.23456 72.4567772)的那个点，它们之间有没有交错的故事。", "sql": "SELECT ST_Intersects( 'SRID=4326;LINESTRING(-43.23456 72.4567,-43.23456 72.4568)'::geography, 'SRID=4326;POINT(-43.23456 72.4567772)'::geography );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the line drawn from (-43.23456 72.4567) to (-43.23456 72.4568) has any overlapping story with the point at (-43.23456 72.4567772).", "source": "original", "new_id": 1931}
{"id": 353, "function": "ST_Intersects", "question": "看看那个在(0 0)的点是不是在从(0 0)到(0 2)的竖直线上，说出是或不是。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the point at (0 0) is on the vertical line from (0 0) to (0 2), and say yes or no.", "source": "original", "new_id": 1938}
{"id": 353, "function": "ST_Intersects", "question": "看看那个点(0 0)是不是碰到了从(0 0)到(0 2)之间的那条线。", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "See if the point (0 0) touches the line that goes from (0 0) to (0 2).", "source": "original", "new_id": 1936}
{"id": 353, "function": "ST_Intersects", "question": "检查那些坐标为(0 0)的小点和连接(0 0)到(0 2)的线段之间是否有交集，结果是对还是错？", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if the little dot at coordinates (0 0) and the line segment connecting (0 0) to (0 2) have an intersection, is the result true or false?", "source": "original", "new_id": 1939}
{"id": 353, "function": "ST_Intersects", "question": "看看那个在零点的地方，它是不是和从零到二的那条线有交集，结果是对还是错？", "sql": "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "question_en": "Check if that point at zero has any intersection with the line stretching from zero to two, is it true or false?", "source": "original", "new_id": 1937}
{"id": 355, "function": "ST_LineCrossingDirection", "question": "看看两条折线，第一条经过25 169到86 43，另一条从171 154到161 53，它们之间是怎么交叉的呢？分别告诉我第一条对第二条的交叉情况和第二条对第一条的交叉情况。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(171 154,20 140,71 74,161 53)') AS lineB ) AS foo;", "execution_result": [[3, -3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1940, "question_en": "Look at the two lines, the first one goes from 25 169 to 86 43, and the other from 171 154 to 161 53. How do they cross each other? Tell me the crossing situation of the first over the second and the second over the first."}
{"id": 355, "function": "ST_LineCrossingDirection", "question": "假设有两条折线，其中一条从(25 169)到(89 114)再到(40 70)然后到(86 43)，另一条从(171 154)到(20 140)接着到(71 74)再到(161 53)。想知道这两条线在交叉时的方向关系，并看看从两个角度看有什么不同。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(171 154,20 140,71 74,161 53)') AS lineB ) AS foo;", "execution_result": [[3, -3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1941, "question_en": "Imagine two zigzag lines, one going from (25 169) to (89 114) to (40 70) and then to (86 43), and the other from (171 154) to (20 140) to (71 74) and then to (161 53). I want to know how they relate directionally when they cross, and see if there's a difference from both perspectives."}
{"id": 355, "function": "ST_LineCrossingDirection", "question": "看看两个线条LINESTRING(25 169,89 114,40 70,86 43)和LINESTRING(171 154,20 140,71 74,161 53)，想知道它们交叉的两种情况，结果要叫A_cross_B和B_cross_A。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(171 154,20 140,71 74,161 53)') AS lineB) AS foo;", "execution_result": [[3, -3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1945, "question_en": "Look at the two lines LINESTRING(25 169,89 114,40 70,86 43) and LINESTRING(171 154,20 140,71 74,161 53), and find out the two crossing situations. The results should be called A_cross_B and B_cross_A."}
{"id": 357, "function": "ST_LineCrossingDirection", "question": "找出那些连起来的点，看看它们交叉的方向，分别用A_cross_B和B_cross_A列出数字结果。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING (20 140, 71 74, 161 53)') AS lineB ) AS foo;", "execution_result": [[-1, 1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1949, "question_en": "Find out the crossing direction of those connected dots and list the numeric results in columns named A_cross_B and B_cross_A."}
{"id": 355, "function": "ST_LineCrossingDirection", "question": "看看这两条由点组成的路径，LINESTRING(25 169,89 114,40 70,86 43)和LINESTRING(171 154,20 140,71 74,161 53)，它们交叉时的方向是什么？然后以A_cross_B和B_cross_A作为名称给出结果。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(171 154,20 140,71 74,161 53)') AS lineB) AS foo;", "execution_result": [[3, -3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1943, "question_en": "Take a look at these two paths made of points, LINESTRING(25 169,89 114,40 70,86 43) and LINESTRING(171 154,20 140,71 74,161 53), what is the direction when they cross? Then give the results with the names A_cross_B and B_cross_A."}
{"id": 355, "function": "ST_LineCrossingDirection", "question": "帮我看看这几条线段(25 169,89 114,40 70,86 43)和(171 154,20 140,71 74,161 53)之间的交叉方向是什么，然后反过来看也一样，结果用两个数字表示出来。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(171 154,20 140,71 74,161 53)') AS lineB) AS foo;", "execution_result": [[3, -3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1944, "question_en": "Help me see what the crossing direction is between these line segments (25 169,89 114,40 70,86 43) and (171 154,20 140,71 74,161 53), and also check it the other way around, showing the results with two numbers."}
{"id": 357, "function": "ST_LineCrossingDirection", "question": "看看那条由25 169、89 114、40 70和86 43组成的曲线，与另一条由20 140、71 74和161 53构成的曲线，它们在交叉时分别是谁优先？", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING (20 140, 71 74, 161 53)') AS lineB ) AS foo;", "execution_result": [[-1, 1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1946, "question_en": "Look at the curve made of 25 169, 89 114, 40 70 and 86 43, and another one made of 20 140, 71 74, and 161 53, and see which one takes precedence when they cross each other?"}
{"id": 355, "function": "ST_LineCrossingDirection", "question": "看看这些坐标连成的两条线，像是(25 169,89 114,40 70,86 43)和(171 154,20 140,71 74,161 53)，然后告诉我它们在交叉时的方向暗号是什么？分别从第一条线看第二条和从第二条线看第一条。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(171 154,20 140,71 74,161 53)') AS lineB ) AS foo;", "execution_result": [[3, -3]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1942, "question_en": "Look at these coordinates forming two lines, like (25 169,89 114,40 70,86 43) and (171 154,20 140,71 74,161 53), then tell me what their crossing direction codes are? From the perspective of the first line looking at the second, and from the second looking at the first."}
{"id": 357, "function": "ST_LineCrossingDirection", "question": "有两条线，像(25 169,89 114,40 70,86 43)和(20 140, 71 74, 161 53)这些点连起来的，你能弄清楚它们互相交叉的方向吗？", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING (20 140, 71 74, 161 53)') AS lineB ) AS foo;", "execution_result": [[-1, 1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1948, "question_en": "There are two lines, like those connected by points (25 169,89 114,40 70,86 43) and (20 140, 71 74, 161 53). Can you figure out the directions in which they cross each other?"}
{"id": 357, "function": "ST_LineCrossingDirection", "question": "看看这几组坐标在一起会怎么互相穿过，结果要有A交B和B交A的方向哦。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING (20 140, 71 74, 161 53)') AS lineB ) AS foo;", "execution_result": [[-1, 1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1947, "question_en": "See how these sets of coordinates cross each other, the result should include the direction of A crossing B and B crossing A."}
{"id": 357, "function": "ST_LineCrossingDirection", "question": "想知道两条路线在某个地方交错的方向吗？第一列是从25 169到86 43的那条线和从20 140到161 53的那条线交错的方向，第二列是反过来的方向。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING (20 140, 71 74, 161 53)') AS lineB ) AS foo;", "execution_result": [[-1, 1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1951, "question_en": "Curious about where two paths cross each other? The first column shows the crossing direction of the line from 25 169 to 86 43 with the line from 20 140 to 161 53, and the second column is the reverse direction."}
{"id": 357, "function": "ST_LineCrossingDirection", "question": "看看这两条折线，一个是从(25 169)到(89 114)再到(40 70)然后到(86 43)，另一个是从(20 140)到(71 74)再到(161 53)，想知道它们之间的交叉情况，还有反过来的情况，结果是两个数字。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING (20 140, 71 74, 161 53)') AS lineB ) AS foo;", "execution_result": [[-1, 1]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1950, "question_en": "Check out these two zigzag lines, one going from (25 169) to (89 114) then to (40 70) and finally to (86 43), and the other from (20 140) to (71 74) then to (161 53). Find out how they cross each other and vice versa, with the result being two numbers."}
{"id": 358, "function": "ST_LineCrossingDirection", "question": "有两条线，一条是从25 169到86 43的曲线，另一条从5 90到171 154。看看当它们交叉时，第一条线穿过另一条线的方式是什么，以及第二条线穿过第一条线的方式是什么。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(5 90, 71 74, 20 140, 171 154)') AS lineB ) AS foo;", "execution_result": [[-2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1953, "question_en": "There are two lines, one curving from 25 169 to 86 43, and the other from 5 90 to 171 154. Check how the first line passes through the other one when they cross, and how the second line passes through the first one."}
{"id": 358, "function": "ST_LineCrossingDirection", "question": "看看这两条由点组成的线，分别是(25 169,89 114,40 70,86 43)和(5 90, 71 74, 20 140, 171 154)，它们是怎么交叉的，能不能告诉我它们交叉的方向是什么？", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(5 90, 71 74, 20 140, 171 154)') AS lineB ) AS foo;", "execution_result": [[-2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1952, "question_en": "Take a look at these two lines made of points, namely (25 169,89 114,40 70,86 43) and (5 90, 71 74, 20 140, 171 154), and tell me how they cross each other and what their crossing directions are?"}
{"id": 358, "function": "ST_LineCrossingDirection", "question": "看看这些小线段的坐标，像是LINESTRING(25 169,89 114,40 70,86 43)和LINESTRING(5 90, 71 74, 20 140, 171 154)，你能找出它们是怎么在空间中彼此穿过的吗？就是说，lineA从lineB的哪边开始穿到另一边，还有lineB从lineA的哪边过来的。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(5 90, 71 74, 20 140, 171 154)') AS lineB ) AS foo;", "execution_result": [[-2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1954, "question_en": "Take a look at these little line coordinates, like LINESTRING(25 169,89 114,40 70,86 43) and LINESTRING(5 90, 71 74, 20 140, 171 154), can you figure out how they cross each other in space? That is, from which side does lineA start crossing to the other side of lineB, and from which side does lineB come from lineA's side."}
{"id": 358, "function": "ST_LineCrossingDirection", "question": "看看那条线从25到169再到89到114，然后到40到70最后到86到43，和另一条从5到90再到71到74，然后到20到140最后到171到154，这两条线之间的交叉方向值是怎么个情况呢？", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(5 90, 71 74, 20 140, 171 154)') AS lineB) AS foo;", "execution_result": [[-2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1955, "question_en": "Can you check how the crossing direction value turns out between the line going from 25 to 169, then 89 to 114, then 40 to 70, finally 86 to 43, and another line going from 5 to 90, then 71 to 74, then 20 to 140, finally 171 to 154?"}
{"id": 358, "function": "ST_LineCrossingDirection", "question": "看看那些连起来的点，想知道它们相互穿过的方向，一个是从25 169到86 43，另一个是从5 90到171 154，你能说说它们怎么穿过的吗？", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(5 90, 71 74, 20 140, 171 154)') AS lineB) AS foo;", "execution_result": [[-2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1956, "question_en": "Look at those connected dots, curious about the direction they cross each other, one goes from 25 169 to 86 43, the other from 5 90 to 171 154. Can you tell how they cross?"}
{"id": 359, "function": "ST_OrderingEquals", "question": "看看从点(0 0)到点(10 10)的线和经过中间点(5 5)的另一条线，这两个线在点的顺序和形状上是不是完全一样。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1958, "question_en": "Check if the line from point (0 0) to point (10 10) and another line that goes through the midpoint (5 5) are completely the same in terms of point order and shape."}
{"id": 359, "function": "ST_OrderingEquals", "question": "看看这两条线是不是走了一样的路线，一个是从(0, 0)到(10, 10)，另一个是从(0, 0)到(5, 5)再到(10, 10)。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1959, "question_en": "See if these two lines follow the same path, one goes from (0, 0) to (10, 10), and the other goes from (0, 0) to (5, 5) and then to (10, 10)."}
{"id": 359, "function": "ST_OrderingEquals", "question": "看看这些两个线的点顺序是不是完全一样，一个是从零到十，另一个中间有个五的点。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1963, "question_en": "Check if the point order of these two lines is exactly the same, one goes from zero to ten, the other has a five in the middle."}
{"id": 359, "function": "ST_OrderingEquals", "question": "看看那条从(0 0)到(10 10)的线，和另一条从(0 0)经过(5 5)到(10 10)的线，是否在点的排列和形状上像是一样的，尽管那个多了个中间点。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1960, "question_en": "Check if the line from (0 0) to (10 10) and the other line from (0 0) through (5 5) to (10 10) appear to have the same point arrangement and shape, even though the latter has an extra middle point."}
{"id": 358, "function": "ST_LineCrossingDirection", "question": "给我一个有两列的表，第一列是这些线：LINESTRING(25 169,89 114,40 70,86 43)和LINESTRING(5 90, 71 74, 20 140, 171 154)之间的交叉方向，第二列是这两条线反过来的交叉方向。", "sql": "SELECT ST_LineCrossingDirection(lineA, lineB) AS A_cross_B, ST_LineCrossingDirection(lineB, lineA) AS B_cross_A FROM (SELECT ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') AS lineA, ST_GeomFromText('LINESTRING(5 90, 71 74, 20 140, 171 154)') AS lineB) AS foo;", "execution_result": [[-2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1957, "question_en": "Give me a table with two columns, the first showing the crossing direction between these lines: LINESTRING(25 169,89 114,40 70,86 43) and LINESTRING(5 90, 71 74, 20 140, 171 154), and the second showing the crossing direction with the lines reversed."}
{"id": 359, "function": "ST_OrderingEquals", "question": "看看两条线LINESTRING(0 0, 10 10)和LINESTRING(0 0, 5 5, 10 10)在顺序上是不是完全一样，结果是对还是错？", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1962, "question_en": "Check if the two lines LINESTRING(0 0, 10 10) and LINESTRING(0 0, 5 5, 10 10) are exactly the same in order, is it true or false?"}
{"id": 360, "function": "ST_OrderingEquals", "question": "看看那两条线从头到尾是不是一样，第一条是从(0 0)到(10 10)，而第二条是从(0 0)经过(0 0)再到(10 10)。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1965, "question_en": "Check if those two lines are the same from start to finish, with the first one going from (0 0) to (10 10), and the second one going from (0 0) through (0 0) to (10 10)."}
{"id": 360, "function": "ST_OrderingEquals", "question": "看看一条从零到十的线，和另一条从零到零再到十的线，它们的顺序是否完全一样，答案是对还是错。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1968, "question_en": "Check if a line from zero to ten and another line from zero to zero then to ten are exactly the same in order, with the answer being true or false."}
{"id": 360, "function": "ST_OrderingEquals", "question": "看看由点(0 0)和(10 10)连起来的线，和用点(0 0)、(0 0)还有(10 10)连起来的线，这两条线在顺序上是不是完全一样呢？", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1964, "question_en": "Check if the line formed by connecting points (0 0) and (10 10) is exactly the same in order as the line formed by connecting points (0 0), (0 0), and (10 10)."}
{"id": 359, "function": "ST_OrderingEquals", "question": "看看这两串坐标：一个从(0 0)到(10 10)，另一个从(0 0)到(5 5)再到(10 10)，它们在点和顺序上是不是完全一样？", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1961, "question_en": "Take a look at these two sets of coordinates: one goes from (0 0) to (10 10), and the other goes from (0 0) to (5 5) and then to (10 10). Are they exactly the same in terms of points and order?"}
{"id": 360, "function": "ST_OrderingEquals", "question": "看看两条线是不是在顺序上差不多，一个是从(0 0)到(10 10)，另一个是从(0 0)经过两次(0 0)再到(10 10)。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1966, "question_en": "Check if these two lines are roughly in the same order, one goes from (0 0) to (10 10), and the other goes from (0 0) through (0 0) twice to (10 10)."}
{"id": 360, "function": "ST_OrderingEquals", "question": "看看这两串坐标的小线条是不是完全按同样的顺序排布：一条是从(0,0)到(10,10)，另一条是从(0,0)经过(0,0)再到(10,10)。结果给我一个是或不是。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1967, "question_en": "Check if these two sets of coordinates in line form are arranged in exactly the same order: one goes from (0,0) to (10,10), and the other goes from (0,0) through (0,0) to (10,10). Give me a yes or no result."}
{"id": 361, "function": "ST_OrderingEquals", "question": "看看把那条从(0 0)到(10 10)的小路反着走，能不能跟从(0 0)经过(0 0)再到(10 10)的路完全一样。", "sql": "SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1970, "question_en": "See if walking backwards on the path from (0 0) to (10 10) matches exactly with the path that goes from (0 0) through (0 0) to (10 10)."}
{"id": 361, "function": "ST_OrderingEquals", "question": "看看倒过来的那条从(0 0)到(10 10)的线，跟带有重复点的线(0 0, 0 0, 10 10)，是不是完全一样的顺序和排列。", "sql": "SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1971, "question_en": "See if the line going from (0 0) to (10 10) when flipped around is exactly the same in order and layout as the one with duplicate points (0 0, 0 0, 10 10)."}
{"id": 360, "function": "ST_OrderingEquals", "question": "看看那些连接点的顺序和位置是不是完全一样，比如说从(0, 0)到(10, 10)和从(0, 0)到(0, 0)再到(10, 10)这样的。结果会告诉你是不是相同的。", "sql": "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1969, "question_en": "Check if the order and placement of those connecting points are exactly the same, like from (0, 0) to (10, 10) and from (0, 0) to (0, 0) then to (10, 10). The result will tell you if they are the same."}
{"id": 361, "function": "ST_OrderingEquals", "question": "看看把这些点(0 0到10 10)倒过来后，跟那些点(0 0, 0 0到10 10)摆放顺序和位置是不是一模一样。", "sql": "SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1972, "question_en": "Check if flipping the points (0 0 to 10 10) around makes them match exactly in order and position with those points (0 0, 0 0 to 10 10)."}
{"id": 361, "function": "ST_OrderingEquals", "question": "看看把从(0 0)到(10 10)的小线条反过来之后，和那个有点重复的小线条(0 0, 0 0, 10 10)是不是完全一样。", "sql": "SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1973, "question_en": "Check if the little line from (0 0) to (10 10), when flipped, is exactly the same as the one with repeated points (0 0, 0 0, 10 10)."}
{"id": 363, "function": "ST_Overlaps", "question": "看看那些坐标组成的形状和连接两个点的线之间有什么关系，像是有没有重合、交叉、碰到或者包住对方的情况，结果是对或错。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(a,b) AS contains FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('LINESTRING(10 10, 190 190)') AS b) AS t;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1983, "question_en": "Check the relationship between the shape made by those coordinates and the line connecting two points, like whether they overlap, cross, touch, or contain each other, with true or false results."}
{"id": 362, "function": "ST_Overlaps", "question": "考虑两个形状，a有这些点：40 170, 90 30, 180 100, 40 170，而b有这些点：110 180, 20 60, 130 90, 110 180。检查它们是否有交集、是否有某种重叠或交叉，以及b是否把a完全包住。同时，给出a和b的尺寸值，还有它们交集的尺寸值。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b, a) AS b_contains_a, ST_Dimension(a) AS dim_a, ST_Dimension(b) AS dim_b, ST_Dimension(ST_Intersection(a,b)) AS dim_int FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('POLYGON ((110 180, 20 60, 130 90, 110 180))') AS b) AS t;", "execution_result": [[true, false, true, false, 2, 2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1978, "question_en": "Consider two shapes, a with these points: 40 170, 90 30, 180 100, 40 170, and b with these points: 110 180, 20 60, 130 90, 110 180. Check if they have any intersection, some kind of overlap or crossing, and if b fully wraps around a. Also, provide the size values of a and b, and the size value of their intersection."}
{"id": 363, "function": "ST_Overlaps", "question": "看看那些坐标组成的形状，像(40 170)、(90 30)、(180 100)、(40 170)围起来的，还有从(10 10)到(190 190)的一条线，之间有没有什么重叠、碰撞或者包在一起的情况？", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(a,b) AS contains FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('LINESTRING(10 10, 190 190)') AS b) AS t;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1982, "question_en": "Check if the shape made by those coordinates, like (40 170), (90 30), (180 100), (40 170) surrounding it, and a line from (10 10) to (190 190), have any overlapping, bumping into, or being wrapped together?"}
{"id": 362, "function": "ST_Overlaps", "question": "有两个形状，一个是由这些点(40 170, 90 30, 180 100, 40 170)形成的，另一个是这些点(110 180, 20 60, 130 90, 110 180)形成的。你能看看它们的关系，比如它们是不是有重叠，或者交叉，或者碰到一起，或许一个在另一个里面？还有，告诉我它们各自和一起的复杂程度。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b, a) AS b_contains_a, ST_Dimension(a) AS dim_a, ST_Dimension(b) AS dim_b, ST_Dimension(ST_Intersection(a,b)) AS dim_int FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('POLYGON ((110 180, 20 60, 130 90, 110 180))') AS b) AS t;", "execution_result": [[true, false, true, false, 2, 2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1976, "question_en": "There are two shapes, one formed by these points (40 170, 90 30, 180 100, 40 170), and another by these points (110 180, 20 60, 130 90, 110 180). Can you check their relationship, like whether they overlap, cross, touch each other, or maybe one is inside the other? Also, tell me about their individual and combined complexity."}
{"id": 361, "function": "ST_OrderingEquals", "question": "看看反过来的那条线(0 0, 10 10)是不是和那条有两个连着(0 0)点的线(0 0, 0 0, 10 10)在顺序上完全一样，结果是对还是错？", "sql": "SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1974, "question_en": "Check if the reversed line (0 0, 10 10) is exactly the same in order as the line with two consecutive (0 0) points (0 0, 0 0, 10 10), is the result true or false?"}
{"id": 362, "function": "ST_Overlaps", "question": "你能用表格给我看一下这两个形状的7个结果吗？一个是从(40 170)出发的多边形，另一个是从(110 180)开始的。想知道它们有没有重叠、交叉、碰到一起或包含对方，还有它们各自的大小和交集的大小。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b, a) AS b_contains_a, ST_Dimension(a) AS dim_a, ST_Dimension(b) AS dim_b, ST_Dimension(ST_Intersection(a,b)) AS dim_int FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('POLYGON ((110 180, 20 60, 130 90, 110 180))') AS b) AS t;", "execution_result": [[true, false, true, false, 2, 2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1980, "question_en": "Can you show me 7 results in a table for these two shapes? One starts from (40 170), and the other from (110 180). Want to know if they overlap, cross, touch, or contain each other, and also their individual sizes and the size of their overlap."}
{"id": 362, "function": "ST_Overlaps", "question": "有两个形状，一个是由(40 170, 90 30, 180 100, 40 170)围成的，另一个是由(110 180, 20 60, 130 90, 110 180)围成的，想要知道它们之间的一些关系和特征，结果要有7个部分。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b, a) AS b_contains_a, ST_Dimension(a) AS dim_a, ST_Dimension(b) AS dim_b, ST_Dimension(ST_Intersection(a,b)) AS dim_int FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('POLYGON ((110 180, 20 60, 130 90, 110 180))') AS b) AS t;", "execution_result": [[true, false, true, false, 2, 2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1981, "question_en": "There are two shapes, one enclosed by (40 170, 90 30, 180 100, 40 170) and another by (110 180, 20 60, 130 90, 110 180), and I'd like to know some of their relationships and features, with results in 7 parts."}
{"id": 361, "function": "ST_OrderingEquals", "question": "看看把那条从(0 0)到(10 10)的小线条翻转后，跟(0 0)到(0 0)再到(10 10)的那些点排法是不是一模一样。", "sql": "SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')), ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1975, "question_en": "See if flipping that little line from (0 0) to (10 10) makes its points line up exactly the same as those from (0 0) to (0 0) then to (10 10)."}
{"id": 362, "function": "ST_Overlaps", "question": "有两个图形，一个是以(40 170, 90 30, 180 100, 40 170)为点的形状，另一个是以(110 180, 20 60, 130 90, 110 180)为点的形状，看看它们有没有重叠、交叉、碰到或互相包含的情况，还得算算它们各自的维度以及它们碰到的地方的维度。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b, a) AS b_contains_a, ST_Dimension(a) AS dim_a, ST_Dimension(b) AS dim_b, ST_Dimension(ST_Intersection(a,b)) AS dim_int FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('POLYGON ((110 180, 20 60, 130 90, 110 180))') AS b) AS t;", "execution_result": [[true, false, true, false, 2, 2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1977, "question_en": "There are two shapes, one with points (40 170, 90 30, 180 100, 40 170) and another with points (110 180, 20 60, 130 90, 110 180). Check if they overlap, cross, touch, or contain each other, and also calculate their individual dimensions and the dimension where they touch."}
{"id": 363, "function": "ST_Overlaps", "question": "看看由坐标40 170、90 30、180 100、40 170勾勒出的那个多边形和从10 10到190 190的那条线之间，能不能找到像重叠、穿过、交汇、包含这样的关系。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(a,b) AS contains FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('LINESTRING(10 10, 190 190)') AS b) AS t;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1984, "question_en": "See if you can find relationships like overlap, crossing, intersection, or containment between the polygon sketched by the coordinates 40 170, 90 30, 180 100, 40 170, and that line from 10 10 to 190 190."}
{"id": 362, "function": "ST_Overlaps", "question": "看看由这些点构成的两个形状之间的关系，像是它们是否有重叠、交叉、相交、或者一个包含另一个，还有它们各自的维度和它们交集的维度。形状由这些点组成：一个是(40 170, 90 30, 180 100, 40 170)，另一个是(110 180, 20 60, 130 90, 110 180)。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b, a) AS b_contains_a, ST_Dimension(a) AS dim_a, ST_Dimension(b) AS dim_b, ST_Dimension(ST_Intersection(a,b)) AS dim_int FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('POLYGON ((110 180, 20 60, 130 90, 110 180))') AS b) AS t;", "execution_result": [[true, false, true, false, 2, 2, 2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1979, "question_en": "Check out the relationship between two shapes made from these points, like whether they overlap, cross, intersect, or if one contains the other, and also their individual dimensions and the dimension of their intersection. The shapes are made from these points: one is (40 170, 90 30, 180 100, 40 170), and the other is (110 180, 20 60, 130 90, 110 180)."}
{"id": 364, "function": "ST_Overlaps", "question": "看看那个点（100 100）和那条弯弯曲曲的线（30 50, 40 160, 160 40, 180 160）之间的关系，像是有没有重合、交错、碰到，或者那条线有没有把点包住。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b,a) AS b_contains_a FROM (SELECT ST_GeomFromText('POINT (100 100)') AS a, ST_GeomFromText('LINESTRING (30 50, 40 160, 160 40, 180 160)') AS b) AS t;", "execution_result": [[false, false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1988, "question_en": "Check out the relationship between that point (100 100) and the wavy line (30 50, 40 160, 160 40, 180 160), like if they overlap, cross, touch, or if the line wraps around the point."}
{"id": 363, "function": "ST_Overlaps", "question": "看看那个由点(40 170), (90 30), (180 100), (40 170)围成的形状和从(10 10)到(190 190)那条线之间的关系，判断它们有没有重叠、交叉、相交，还有那个形状是不是把线包起来了，结果用对或错表示。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(a,b) AS contains FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('LINESTRING(10 10, 190 190)') AS b) AS t;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1985, "question_en": "Check the relationship between the shape formed by the points (40 170), (90 30), (180 100), (40 170) and the line from (10 10) to (190 190). Determine if they overlap, cross, intersect, and whether the shape wraps the line, with results shown as true or false."}
{"id": 363, "function": "ST_Overlaps", "question": "看看那些多边形和线段之间的关系，像是交叉或者包裹，把结果整理在表格里显示出来。多边形的点是(40 170, 90 30, 180 100, 40 170)，线段的点是(10 10, 190 190)。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(a,b) AS contains FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('LINESTRING(10 10, 190 190)') AS b) AS t;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1987, "question_en": "Check the relationship between those polygons and line segments, like crossing or wrapping, and show the results in a table. The polygon points are (40 170, 90 30, 180 100, 40 170), and the line segment points are (10 10, 190 190)."}
{"id": 363, "function": "ST_Overlaps", "question": "看看那些坐标组成的形状，四个问题就像是问它们有没有在一起、穿过、碰到或者包裹住线条从(10 10)到(190 190)的那种关系。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(a,b) AS contains FROM (SELECT ST_GeomFromText('POLYGON ((40 170, 90 30, 180 100, 40 170))') AS a, ST_GeomFromText('LINESTRING(10 10, 190 190)') AS b) AS t;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1986, "question_en": "Consider the shapes formed by those coordinates, and ask four questions like whether they are together, cross through, touch, or wrap around the line from (10 10) to (190 190)."}
{"id": 364, "function": "ST_Overlaps", "question": "你有一个点在(100 100)这儿，还有一条由(30 50, 40 160, 160 40, 180 160)这些位置连起来的线。看看它们之间有没有重叠、交错、碰到一起的地方，或者线是不是把点包在里面了。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b,a) AS b_contains_a FROM (SELECT ST_GeomFromText('POINT (100 100)') AS a, ST_GeomFromText('LINESTRING (30 50, 40 160, 160 40, 180 160)') AS b) AS t;", "execution_result": [[false, false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1989, "question_en": "You have a point at (100 100) over here, and a line joined by these spots: (30 50, 40 160, 160 40, 180 160). Check if they have any overlapping, crossing, meeting places, or if the line wraps around the point."}
{"id": 365, "function": "ST_Relate", "question": "看看在(1,2)的那个小点和围绕它画的半径2的圆圈之间的关系，是否符合'0FFFFF212'的规则。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2), '0FFFFF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1996, "question_en": "See if the relationship between that little dot at (1,2) and the circle drawn around it with a radius of 2 matches the '0FFFFF212' rules."}
{"id": 365, "function": "ST_Relate", "question": "看看那些小坐标(1, 2)在自己周围的扩展区域里，距离2的范围内，是否符合某种复杂的关系模式。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2), '0FFFFF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1995, "question_en": "Check if those little coordinates (1, 2) fit a certain complex relationship pattern within an expanded area around themselves, within a distance of 2."}
{"id": 364, "function": "ST_Overlaps", "question": "看看一个在(100,100)的小点和一串连起来的坐标(30 50, 40 160, 160 40, 180 160)之间，是否有那些空间关系，比如说它们重叠，或者一个穿过另一个，或者它们有交集，或者一个完全包住另一个，然后给出答案。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b,a) AS b_contains_a FROM (SELECT ST_GeomFromText('POINT (100 100)') AS a, ST_GeomFromText('LINESTRING (30 50, 40 160, 160 40, 180 160)') AS b) AS t;", "execution_result": [[false, false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1990, "question_en": "Check if a tiny dot at (100,100) and a series of connected coordinates (30 50, 40 160, 160 40, 180 160) have those spatial relationships, like if they overlap, or if one passes through the other, or they intersect, or if one completely wraps around the other, and then provide the answers."}
{"id": 364, "function": "ST_Overlaps", "question": "想知道在一个点(100 100)和一条线(30 50, 40 160, 160 40, 180 160)之间，看看它们有没有那种重叠、交叉、互相碰到，以及线是不是把点包住的关系。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b,a) AS b_contains_a FROM (SELECT ST_GeomFromText('POINT (100 100)') AS a, ST_GeomFromText('LINESTRING (30 50, 40 160, 160 40, 180 160)') AS b) AS t;", "execution_result": [[false, false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1991, "question_en": "Wondering about a point at (100 100) and a line through (30 50, 40 160, 160 40, 180 160), and whether they have those overlapping, crossing, touching, and if the line wraps around the point kind of relationships."}
{"id": 365, "function": "ST_Relate", "question": "看看小点(1 2)和围绕它的一个半径为2的大圈圈之间的关系，用'0FFFFF212'那个奇怪的方式来检查。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2), '0FFFFF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1997, "question_en": "Check out the relationship between the little dot (1 2) and a big circle around it with a radius of 2, using that strange '0FFFFF212' way to check."}
{"id": 365, "function": "ST_Relate", "question": "看看那个在(1, 2)点上的小点是不是被围在一个半径是2的圆圈里面，然后看看结果是不是和'0FFFFF212'这个模式一致。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2), '0FFFFF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1998, "question_en": "See if the little dot at point (1, 2) is surrounded by a circle with a radius of 2, and then check if the result matches the pattern '0FFFFF212'."}
{"id": 365, "function": "ST_Relate", "question": "看看两个相距2的点（1, 2）和它周围的形状之间有什么奇妙的联系，用一种神秘的编码来表示。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2), '0FFFFF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1999, "question_en": "Check out the curious connection between two points at (1, 2) and the shape around it with a distance of 2, represented in a mysterious code."}
{"id": 364, "function": "ST_Overlaps", "question": "看看那个100 100的小点和围绕着它的折线（30 50, 40 160, 160 40, 180 160）有啥关系，比如是不是像朋友一样重叠、交叉、相遇或者包裹着它，然后列出四个真假的结果。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b,a) AS b_contains_a FROM (SELECT ST_GeomFromText('POINT (100 100)') AS a, ST_GeomFromText('LINESTRING (30 50, 40 160, 160 40, 180 160)') AS b) AS t;", "execution_result": [[false, false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1993, "question_en": "Check if that little dot at 100 100 has any relationship with the line surrounding it (30 50, 40 160, 160 40, 180 160), like whether they overlap, cross, meet, or wrap around it, and list four true or false results."}
{"id": 364, "function": "ST_Overlaps", "question": "假如有个点在100 100的位置，和一串从30 50到180 160连起来的线，你能告诉我这两者之间有没有重叠、交叉、接触或者线把点包起来吗？结果用四个对或错的答案表示就好。", "sql": "SELECT ST_Overlaps(a,b) AS overlaps, ST_Crosses(a,b) AS crosses, ST_Intersects(a, b) AS intersects, ST_Contains(b,a) AS b_contains_a FROM (SELECT ST_GeomFromText('POINT (100 100)') AS a, ST_GeomFromText('LINESTRING (30 50, 40 160, 160 40, 180 160)') AS b) AS t;", "execution_result": [[false, false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1992, "question_en": "Imagine a point at 100 100 and a string of lines connecting from 30 50 to 180 160. Can you tell me if they overlap, cross, touch, or if the line wraps around the point? Just express the results with four true or false answers."}
{"id": 366, "function": "ST_Relate", "question": "看看在坐标(1 2)的地方，有个圆圈半径是2，和那个点有什么联系呢？用个像'*FF*FF212'的复杂图案来验证一下吧。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer('POINT(1 2)', 2), '*FF*FF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2000, "question_en": "Let's see what kind of connection there is between the spot at coordinates (1 2) and a circle with a radius of 2 around it. Use a complex pattern like '*FF*FF212' to check it out."}
{"id": 366, "function": "ST_Relate", "question": "看看在1 2这个地方的点，能不能找个围着它绕2的圈，看看它是不是在里面，按那种模式来。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer('POINT(1 2)', 2), '*FF*FF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2001, "question_en": "See if the dot at 1 2 can have a circle with a radius of 2 around it, and check if it's inside, following that pattern."}
{"id": 366, "function": "ST_Relate", "question": "看看在这些点之间，点(1 2)和以它为中心、半径为2的扩展区域，是不是符合一种叫做'*FF*FF212'的关系。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer('POINT(1 2)', 2), '*FF*FF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2002, "question_en": "Check if between these points, POINT(1 2) and the area expanded around it with a radius of 2, they satisfy a relationship called '*FF*FF212'."}
{"id": 366, "function": "ST_Relate", "question": "看看点(1 2)和一个以它为中心、半径为2的圆圈之间有啥关系，用一种神秘的九宫格方式来展示结果。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer('POINT(1 2)', 2), '*FF*FF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2004, "question_en": "Check out the relationship between the point (1 2) and a circle centered on it with a radius of 2, using a mysterious nine-square method to show the result."}
{"id": 366, "function": "ST_Relate", "question": "看看那个点(1 2)和围绕它画个半径为2的圈之间的联系，用一种特殊的关系模式来描述。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer('POINT(1 2)', 2), '*FF*FF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2003, "question_en": "Check out the relationship between that point (1 2) and a circle drawn around it with a radius of 2, using a special relationship pattern to describe it."}
{"id": 366, "function": "ST_Relate", "question": "在'*FF*FF212'这种关系模式下，看看点(1 2)和它周围2单位距离的那圈区域之间的特殊编码是什么。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer('POINT(1 2)', 2), '*FF*FF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2005, "question_en": "In the '*FF*FF212' relation pattern, find out what the special code is between the point (1 2) and that ring area around it with a 2-unit distance."}
{"id": 367, "function": "ST_Relate", "question": "看看坐标为1 2的小点和围绕它2单位距离的大圈之间有什么关系。", "sql": "SELECT ST_Relate( 'POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2));", "execution_result": [["0FFFFF212"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2007, "question_en": "Look at the relationship between the little dot at coordinates 1 2 and the big circle around it at a distance of 2 units."}
{"id": 367, "function": "ST_Relate", "question": "想知道小点(1 2)周围2单位范围内的联系是怎样的，有没有一种九格图可以表示出来？", "sql": "SELECT ST_Relate( 'POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2));", "execution_result": [["0FFFFF212"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2008, "question_en": "I'd like to know how the little dot (1 2) connects within a 2-unit area around it, is there a nine-box diagram to show it?"}
{"id": 367, "function": "ST_Relate", "question": "看看在1 2这个位置的小点和围绕它画一个半径2的圆圈之间有什么关联吧。", "sql": "SELECT ST_Relate( 'POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2));", "execution_result": [["0FFFFF212"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2009, "question_en": "Let's see what kind of relationship exists between the little dot at 1 2 and a circle drawn around it with a radius of 2."}
{"id": 367, "function": "ST_Relate", "question": "看看1 2这个小点和围绕它2单位的区域，它们之间有啥关系代码？", "sql": "SELECT ST_Relate( 'POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2));", "execution_result": [["0FFFFF212"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2010, "question_en": "Check out what kind of relationship code there is between that little dot at 1 2 and the area that circles around it by 2 units?"}
{"id": 367, "function": "ST_Relate", "question": "找出那个藏着小点POINT(1 2)的2单位范围的秘密关系，用一种特别的九格方式描述它。", "sql": "SELECT ST_Relate( 'POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2));", "execution_result": [["0FFFFF212"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2011, "question_en": "Discover the secret relationship of the tiny dot POINT(1 2) within a 2-unit range, described in a special nine-square way."}
{"id": 368, "function": "ST_Relate", "question": "看看那些线段(1 2到3 4)和(5 6到7 8)之间的联系，想知道它们的交集是什么样子的。", "sql": "SELECT ST_Relate( 'LINESTRING(1 2, 3 4)', 'LINESTRING(5 6, 7 8)' );", "execution_result": [["FF1FF0102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2014, "question_en": "Check out the connection between those line segments from (1 2 to 3 4) and (5 6 to 7 8), and find out what their intersection looks like."}
{"id": 368, "function": "ST_Relate", "question": "看看那些从(1, 2)到(3, 4)和从(5, 6)到(7, 8)的线条之间有什么特别的联系，用一种矩阵来表示。", "sql": "SELECT ST_Relate( 'LINESTRING(1 2, 3 4)', 'LINESTRING(5 6, 7 8)' );", "execution_result": [["FF1FF0102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2012, "question_en": "See what's special about the connection between the lines from (1, 2) to (3, 4) and from (5, 6) to (7, 8), using a kind of matrix to show it."}
{"id": 367, "function": "ST_Relate", "question": "看看二维点(1 2)和围绕它扩展2单位的区域之间的关系是怎样的。", "sql": "SELECT ST_Relate( 'POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2));", "execution_result": [["0FFFFF212"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2006, "question_en": "See what the relationship is between the 2D point (1 2) and the area expanded around it by 2 units."}
{"id": 368, "function": "ST_Relate", "question": "看看那些线段，像从(1, 2)到(3, 4)，还有从(5, 6)到(7, 8)之间，它们怎么彼此关联呢？能不能得到个关系矩阵？", "sql": "SELECT ST_Relate( 'LINESTRING(1 2, 3 4)', 'LINESTRING(5 6, 7 8)' );", "execution_result": [["FF1FF0102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2013, "question_en": "Consider those line segments, like from (1, 2) to (3, 4), and from (5, 6) to (7, 8), how do they relate to each other? Can we get a relationship matrix?"}
{"id": 368, "function": "ST_Relate", "question": "找出从(1, 2)到(3, 4)的那根线和从(5, 6)到(7, 8)的另一根线之间的联系，用9个字符的特别方式表达。", "sql": "SELECT ST_Relate( 'LINESTRING(1 2, 3 4)', 'LINESTRING(5 6, 7 8)' );", "execution_result": [["FF1FF0102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2015, "question_en": "Find the connection between the line from (1, 2) to (3, 4) and the other line from (5, 6) to (7, 8), expressed in a special 9-character way."}
{"id": 368, "function": "ST_Relate", "question": "分析一下那两条线段：一条从(1 2)到(3 4)，另一条从(5 6)到(7 8)，看看它们之间有什么特别的关系，然后给出一个有9个字符的结果。", "sql": "SELECT ST_Relate( 'LINESTRING(1 2, 3 4)', 'LINESTRING(5 6, 7 8)' );", "execution_result": [["FF1FF0102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2017, "question_en": "Take a look at those two line segments: one goes from (1 2) to (3 4), and the other from (5 6) to (7 8). See if there's anything special about their relationship, then give a 9-character result."}
{"id": 368, "function": "ST_Relate", "question": "看看这两条从(1, 2)到(3, 4)和从(5, 6)到(7, 8)的线段之间有什么关系，并用一种特殊的格式来表示结果。", "sql": "SELECT ST_Relate( 'LINESTRING(1 2, 3 4)', 'LINESTRING(5 6, 7 8)' );", "execution_result": [["FF1FF0102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2016, "question_en": "Check what kind of relationship exists between these two line segments from (1, 2) to (3, 4) and from (5, 6) to (7, 8), and express the result in a special format."}
{"id": 369, "function": "ST_Relate", "question": "对于那条从(1 1)到(3 3)的线和那些从(3 3)出发的路径，给我一种模式1和模式2的复杂关系图。", "sql": "WITH data AS (SELECT 'LINESTRING(1 1, 3 3)'::geometry AS a_line, 'MULTILINESTRING((3 3, 3 5), (3 3, 5 3))'::geometry AS b_multiline) SELECT ST_Relate(a_line, b_multiline, 1) AS bnr_mod2, ST_Relate(a_line, b_multiline, 2) AS bnr_endpoint FROM data;", "execution_result": [["FF10F0102", "FF1F00102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2021, "question_en": "For the line going from (1 1) to (3 3) and those paths starting at (3 3), give me a complex relationship chart using mode 1 and mode 2."}
{"id": 369, "function": "ST_Relate", "question": "看看由点(1 1)到(3 3)的线和由(3 3)到(3 5)以及(3 3)到(5 3)的多条线之间的关系，结果要有两种规则，一个是模2边界节点，一个是端点规则，用某种矩阵表示出来。", "sql": "WITH data AS (SELECT 'LINESTRING(1 1, 3 3)'::geometry AS a_line, 'MULTILINESTRING((3 3, 3 5), (3 3, 5 3))'::geometry AS b_multiline) SELECT ST_Relate(a_line, b_multiline, 1) AS bnr_mod2, ST_Relate(a_line, b_multiline, 2) AS bnr_endpoint FROM data;", "execution_result": [["FF10F0102", "FF1F00102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2018, "question_en": "Explore the relationship between the line from point (1 1) to (3 3) and the multiple lines from (3 3) to (3 5) and (3 3) to (5 3), with results using two types of rules: one is the Mod-2 boundary node, and the other is the endpoint rule, shown in some kind of matrix."}
{"id": 369, "function": "ST_Relate", "question": "怎么在PostGIS里弄清楚LINESTRING(1 1, 3 3)和那些MULTILINESTRING线段(3 3, 3 5)以及(3 3, 5 3)之间的两种特殊关系？其中一个用到数字1，另一个用到数字2。", "sql": "WITH data AS (SELECT 'LINESTRING(1 1, 3 3)'::geometry AS a_line, 'MULTILINESTRING((3 3, 3 5), (3 3, 5 3))'::geometry AS b_multiline) SELECT ST_Relate(a_line, b_multiline, 1) AS bnr_mod2, ST_Relate(a_line, b_multiline, 2) AS bnr_endpoint FROM data;", "execution_result": [["FF10F0102", "FF1F00102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2020, "question_en": "How to figure out in PostGIS the two special relationships between LINESTRING(1 1, 3 3) and those MULTILINESTRING segments (3 3, 3 5) and (3 3, 5 3)? One uses the number 1, and the other uses the number 2."}
{"id": 369, "function": "ST_Relate", "question": "请列出两个结果：首先是关于那些坐标线段的奇数边缘关系，接着是它们的起始和结束点的联系。", "sql": "WITH data AS (SELECT 'LINESTRING(1 1, 3 3)'::geometry AS a_line, 'MULTILINESTRING((3 3, 3 5), (3 3, 5 3))'::geometry AS b_multiline) SELECT ST_Relate(a_line, b_multiline, 1) AS bnr_mod2, ST_Relate(a_line, b_multiline, 2) AS bnr_endpoint FROM data;", "execution_result": [["FF10F0102", "FF1F00102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2023, "question_en": "Please list two results: first, the odd boundary connection regarding those coordinate line segments, then their starting and ending point relations."}
{"id": 371, "function": "ST_RelateMatch", "question": "看看那个‘101202FFF’和‘TTTTTTFFF’之间的关系是不是符合某种特定的空间联系。", "sql": "SELECT ST_RelateMatch('101202FFF', 'TTTTTTFFF');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2026, "question_en": "See if the relationship between '101202FFF' and 'TTTTTTFFF' fits a certain type of spatial connection."}
{"id": 371, "function": "ST_RelateMatch", "question": "看看那个复杂的'101202FFF'图案能不能和'TTTTTTFFF'的关系图案对上。", "sql": "SELECT ST_RelateMatch('101202FFF', 'TTTTTTFFF');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2024, "question_en": "See if that complex '101202FFF' pattern can match with the 'TTTTTTFFF' relationship pattern."}
{"id": 371, "function": "ST_RelateMatch", "question": "看看那些奇特的关系数字'101202FFF'是否能对上'TTTTTTFFF'的模式。", "sql": "SELECT ST_RelateMatch('101202FFF', 'TTTTTTFFF');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2025, "question_en": "Check if those peculiar relationship numbers '101202FFF' can match the pattern of 'TTTTTTFFF'."}
{"id": 369, "function": "ST_Relate", "question": "你会看到两列结果：一个是关于1 1到3 3的那条线和3 3到3 5还有3 3到5 3这些线之间的某种关系，另一个是用不同的方式来计算这些线的交互结果。", "sql": "WITH data AS (SELECT 'LINESTRING(1 1, 3 3)'::geometry AS a_line, 'MULTILINESTRING((3 3, 3 5), (3 3, 5 3))'::geometry AS b_multiline) SELECT ST_Relate(a_line, b_multiline, 1) AS bnr_mod2, ST_Relate(a_line, b_multiline, 2) AS bnr_endpoint FROM data;", "execution_result": [["FF10F0102", "FF1F00102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2022, "question_en": "You'll see two columns of results: one is about some kind of relationship between the line from 1 1 to 3 3 and the lines from 3 3 to 3 5 and from 3 3 to 5 3, and the other is the interaction result calculated in another way."}
{"id": 369, "function": "ST_Relate", "question": "看看那些点和线，LINESTRING从(1 1)到(3 3)，还有MULTILINESTRING，里面有(3 3到3 5)和(3 3到5 3)。你能不能用某种方式看看它们之间的关系，像是用什么规则去看边界和端点？", "sql": "WITH data AS (SELECT 'LINESTRING(1 1, 3 3)'::geometry AS a_line, 'MULTILINESTRING((3 3, 3 5), (3 3, 5 3))'::geometry AS b_multiline) SELECT ST_Relate(a_line, b_multiline, 1) AS bnr_mod2, ST_Relate(a_line, b_multiline, 2) AS bnr_endpoint FROM data;", "execution_result": [["FF10F0102", "FF1F00102"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2019, "question_en": "Take a look at those dots and lines, LINESTRING from (1 1) to (3 3), and MULTILINESTRING, which includes (3 3 to 3 5) and (3 3 to 5 3). Can you somehow check their relationship, like using some rule to look at boundaries and endpoints?"}
{"id": 371, "function": "ST_RelateMatch", "question": "看看'101202FFF'这个空间关系的密码是否和'TTTTTTFFF'这个样式完全吻合，答案是对还是错。", "sql": "SELECT ST_RelateMatch('101202FFF', 'TTTTTTFFF');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2028, "question_en": "Check if the code '101202FFF' for spatial relations completely matches the pattern 'TTTTTTFFF', and see if it's right or wrong."}
{"id": 371, "function": "ST_RelateMatch", "question": "看看这两个神秘的编码'101202FFF'和'TTTTTTFFF'之间有没有神奇的匹配结果，答案是简单的对或错。", "sql": "SELECT ST_RelateMatch('101202FFF', 'TTTTTTFFF');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2027, "question_en": "See if there's a magical match between these two mysterious codes '101202FFF' and 'TTTTTTFFF', the answer is simply true or false."}
{"id": 371, "function": "ST_RelateMatch", "question": "看看'101202FFF'这个奇怪的代码和'TTTTTTFFF'这个字符串之间有没有一种特殊的几何关系，然后告诉我是或不是。", "sql": "SELECT ST_RelateMatch('101202FFF', 'TTTTTTFFF');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2029, "question_en": "Check if there's a special geometric relationship between the mysterious code '101202FFF' and the string 'TTTTTTFFF', then tell me yes or no."}
{"id": 365, "function": "ST_Relate", "question": "看看1 2这个点和围绕它画个半径为2的圈，它们的空间关系是不是符合某种特定的模式，那个模式用数字‘0FFFFF212’表示。", "sql": "SELECT ST_Relate('POINT(1 2)', ST_Buffer( 'POINT(1 2)', 2), '0FFFFF212');", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 1994, "question_en": "Check if the spot at 1 2 and the circle drawn around it with a radius of 2 have a spatial relationship that fits a certain pattern, that pattern is shown by the number '0FFFFF212'."}
{"id": 372, "function": "ST_RelateMatch", "question": "想象一下，有一个表格，它展示了一些关系，比如说相等、重叠、包含或者不相交，然后还有另外一些位置描述，比如不相交、重叠、在里面。你能把这些关系和位置组合起来，看看它们是否匹配吗？", "sql": "SELECT pat.name AS relationship, pat.val AS pattern, mat.name AS position, mat.val AS matrix, ST_RelateMatch(mat.val, pat.val) AS match FROM (VALUES ( 'Equality', 'T1FF1FFF1' ), ( 'Overlaps', 'T*T***T**' ), ( 'Within', 'T*F**F***' ), ( 'Disjoint', 'FF*FF****' )) AS pat(name,val) CROSS JOIN (VALUES ('non-intersecting', 'FF1FF0212'), ('overlapping', '1010F0212'), ('inside', '1FF0FF212')) AS mat(name,val);", "execution_result": [["Equality", "T1FF1FFF1", "non-intersecting", "FF1FF0212", false], ["Equality", "T1FF1FFF1", "overlapping", "1010F0212", false], ["Equality", "T1FF1FFF1", "inside", "1FF0FF212", false], ["Overlaps", "T*T***T**", "non-intersecting", "FF1FF0212", false], ["Overlaps", "T*T***T**", "overlapping", "1010F0212", true], ["Overlaps", "T*T***T**", "inside", "1FF0FF212", false], ["Within", "T*F**F***", "non-intersecting", "FF1FF0212", false], ["Within", "T*F**F***", "overlapping", "1010F0212", false], ["Within", "T*F**F***", "inside", "1FF0FF212", true], ["Disjoint", "FF*FF****", "non-intersecting", "FF1FF0212", true], ["Disjoint", "FF*FF****", "overlapping", "1010F0212", false], ["Disjoint", "FF*FF****", "inside", "1FF0FF212", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2033, "question_en": "Imagine a table showing some relationships like equality, overlaps, within, or disjoint, and then some position descriptions like non-intersecting, overlapping, inside. Can you combine these relationships and positions to see if they match?"}
{"id": 372, "function": "ST_RelateMatch", "question": "对于那些四种关系模式和三个位置的组合，看看它们是不是合得来，模式和位置的数值分别是'T1FF1FFF1'、'T*T***T**'、'T*F**F***'、'FF*FF****'以及'FF1FF0212'、'1010F0212'、'1FF0FF212'。", "sql": "SELECT pat.name AS relationship, pat.val AS pattern, mat.name AS position, mat.val AS matrix, ST_RelateMatch(mat.val, pat.val) AS match FROM (VALUES ( 'Equality', 'T1FF1FFF1' ), ( 'Overlaps', 'T*T***T**' ), ( 'Within', 'T*F**F***' ), ( 'Disjoint', 'FF*FF****' )) AS pat(name,val) CROSS JOIN (VALUES ('non-intersecting', 'FF1FF0212'), ('overlapping', '1010F0212'), ('inside', '1FF0FF212')) AS mat(name,val);", "execution_result": [["Equality", "T1FF1FFF1", "non-intersecting", "FF1FF0212", false], ["Equality", "T1FF1FFF1", "overlapping", "1010F0212", false], ["Equality", "T1FF1FFF1", "inside", "1FF0FF212", false], ["Overlaps", "T*T***T**", "non-intersecting", "FF1FF0212", false], ["Overlaps", "T*T***T**", "overlapping", "1010F0212", true], ["Overlaps", "T*T***T**", "inside", "1FF0FF212", false], ["Within", "T*F**F***", "non-intersecting", "FF1FF0212", false], ["Within", "T*F**F***", "overlapping", "1010F0212", false], ["Within", "T*F**F***", "inside", "1FF0FF212", true], ["Disjoint", "FF*FF****", "non-intersecting", "FF1FF0212", true], ["Disjoint", "FF*FF****", "overlapping", "1010F0212", false], ["Disjoint", "FF*FF****", "inside", "1FF0FF212", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2030, "question_en": "For those combinations of four relationship styles and three places, see if they match well, with the styles and places having values 'T1FF1FFF1', 'T*T***T**', 'T*F**F***', 'FF*FF****' and 'FF1FF0212', '1010F0212', '1FF0FF212'."}
{"id": 372, "function": "ST_RelateMatch", "question": "看看这三个奇怪的符号组合（'FF1FF0212'、'1010F0212'、'1FF0FF212'）能不能和那四种神秘的符号模式（'T1FF1FFF1'、'T*T***T**'、'T*F**F***'、'FF*FF****'）一一对应，结果是对还是错呢？", "sql": "SELECT pat.name AS relationship, pat.val AS pattern, mat.name AS position, mat.val AS matrix, ST_RelateMatch(mat.val, pat.val) AS match FROM (VALUES ( 'Equality', 'T1FF1FFF1' ), ( 'Overlaps', 'T*T***T**' ), ( 'Within', 'T*F**F***' ), ( 'Disjoint', 'FF*FF****' )) AS pat(name,val) CROSS JOIN (VALUES ('non-intersecting', 'FF1FF0212'), ('overlapping', '1010F0212'), ('inside', '1FF0FF212')) AS mat(name,val);", "execution_result": [["Equality", "T1FF1FFF1", "non-intersecting", "FF1FF0212", false], ["Equality", "T1FF1FFF1", "overlapping", "1010F0212", false], ["Equality", "T1FF1FFF1", "inside", "1FF0FF212", false], ["Overlaps", "T*T***T**", "non-intersecting", "FF1FF0212", false], ["Overlaps", "T*T***T**", "overlapping", "1010F0212", true], ["Overlaps", "T*T***T**", "inside", "1FF0FF212", false], ["Within", "T*F**F***", "non-intersecting", "FF1FF0212", false], ["Within", "T*F**F***", "overlapping", "1010F0212", false], ["Within", "T*F**F***", "inside", "1FF0FF212", true], ["Disjoint", "FF*FF****", "non-intersecting", "FF1FF0212", true], ["Disjoint", "FF*FF****", "overlapping", "1010F0212", false], ["Disjoint", "FF*FF****", "inside", "1FF0FF212", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2031, "question_en": "See if these three peculiar symbol combinations ('FF1FF0212', '1010F0212', '1FF0FF212') can match with those four mysterious symbol patterns ('T1FF1FFF1', 'T*T***T**', 'T*F**F***', 'FF*FF****'), and find out if the result is true or false?"}
{"id": 373, "function": "ST_Touches", "question": "看看那条连接着(0 0), (1 1), (0 2)的小线和在(1 1)的单个点是否碰到一起。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2036, "question_en": "Check if the little line connecting (0 0), (1 1), (0 2) and the single point at (1 1) touch each other."}
{"id": 372, "function": "ST_RelateMatch", "question": "能不能给我一个表格，里面有relationship、pattern、position、matrix，还有一个叫match的东西，这些都是从pat和mat里拿来的，pat有4个东西（Equality-T1FF1FFF1、Overlaps-T*T***T**、Within-T*F**F***、Disjoint-FF*FF****），mat有3个东西（non-intersecting-FF1FF0212、overlapping-1010F0212、inside-1FF0FF212）。", "sql": "SELECT pat.name AS relationship, pat.val AS pattern, mat.name AS position, mat.val AS matrix, ST_RelateMatch(mat.val, pat.val) AS match FROM (VALUES ( 'Equality', 'T1FF1FFF1' ), ( 'Overlaps', 'T*T***T**' ), ( 'Within', 'T*F**F***' ), ( 'Disjoint', 'FF*FF****' )) AS pat(name,val) CROSS JOIN (VALUES ('non-intersecting', 'FF1FF0212'), ('overlapping', '1010F0212'), ('inside', '1FF0FF212')) AS mat(name,val);", "execution_result": [["Equality", "T1FF1FFF1", "non-intersecting", "FF1FF0212", false], ["Equality", "T1FF1FFF1", "overlapping", "1010F0212", false], ["Equality", "T1FF1FFF1", "inside", "1FF0FF212", false], ["Overlaps", "T*T***T**", "non-intersecting", "FF1FF0212", false], ["Overlaps", "T*T***T**", "overlapping", "1010F0212", true], ["Overlaps", "T*T***T**", "inside", "1FF0FF212", false], ["Within", "T*F**F***", "non-intersecting", "FF1FF0212", false], ["Within", "T*F**F***", "overlapping", "1010F0212", false], ["Within", "T*F**F***", "inside", "1FF0FF212", true], ["Disjoint", "FF*FF****", "non-intersecting", "FF1FF0212", true], ["Disjoint", "FF*FF****", "overlapping", "1010F0212", false], ["Disjoint", "FF*FF****", "inside", "1FF0FF212", false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2032, "question_en": "Can you give me a table with relationship, pattern, position, matrix, and something called match, all taken from pat and mat, where pat has 4 things (Equality-T1FF1FFF1, Overlaps-T*T***T**, Within-T*F**F***, Disjoint-FF*FF****), and mat has 3 things (non-intersecting-FF1FF0212, overlapping-1010F0212, inside-1FF0FF212)."}
{"id": 374, "function": "ST_Touches", "question": "看看那条从(0 0)到(1 1)再到(0 2)的线，最后那个点(0 2)是不是好像碰到了它自己。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(0 2)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2041, "question_en": "See if that line going from (0 0) to (1 1) and then to (0 2) seems like the last point (0 2) touches itself."}
{"id": 374, "function": "ST_Touches", "question": "看看由(0 0)、(1 1)、(0 2)这些小点连成的线是不是碰到了那个特别的点(0 2)。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(0 2)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2040, "question_en": "Check if the line made from those little dots (0 0), (1 1), (0 2) happens to touch that special point (0 2)."}
{"id": 373, "function": "ST_Touches", "question": "看看那条线从(0 0)到(1 1)再到(0 2)跟那个小点(1 1)有没有碰面，给个是或不是的答案。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2037, "question_en": "Check if the line going from (0 0) to (1 1) and then to (0 2) meets the little dot at (1 1), and provide a yes or no answer."}
{"id": 373, "function": "ST_Touches", "question": "看看那些连起来的点(0 0, 1 1, 0 2)和孤独的小点(1 1)有没有在一起碰一下，给我一个是或不是的答案。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2039, "question_en": "See if those connected dots (0 0, 1 1, 0 2) and the lonely little dot (1 1) have touched each other, give me a yes or no answer."}
{"id": 374, "function": "ST_Touches", "question": "看看那些点连起来的线是不是在边界上碰到了最后一个点(0 2)，结果告诉我是不是这样。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(0 2)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2044, "question_en": "Check if the line made by connecting those points touches the last point (0 2) at the boundary, and tell me if that's the case."}
{"id": 373, "function": "ST_Touches", "question": "看看那些连起来的点(0 0)、(1 1)、(0 2)和单独的点(1 1)有没有在空间上碰一下。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2034, "question_en": "See if those connected dots (0 0), (1 1), (0 2) and the single dot (1 1) touch each other in space."}
{"id": 374, "function": "ST_Touches", "question": "看看那些连接的小线段(0 0, 1 1, 0 2)和那个点(0 2)是不是在边缘上碰到但不重叠。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(0 2)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2042, "question_en": "Check if those connected little lines (0 0, 1 1, 0 2) and that point (0 2) touch at the edge without overlapping."}
{"id": 373, "function": "ST_Touches", "question": "看看那些坐标连成的线，里面有个点是(1 1)，它自己是不是碰到自己，给个对或者错的答案。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2038, "question_en": "Look at those coordinates forming a line, there's a point at (1 1) inside, does it touch itself, give a true or false answer."}
{"id": 374, "function": "ST_Touches", "question": "看看从(0 0)到(1 1)再到(0 2)的那条线和在(0 2)的位置上的那个点是不是碰了一下。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(0 2)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2043, "question_en": "Check if the line that goes from (0 0) to (1 1) and then to (0 2) just touches the point sitting at (0 2)."}
{"id": 373, "function": "ST_Touches", "question": "看看那条穿过(0 0), (1 1), (0 2)的小线和在(1 1)的点有没有在边缘碰到的情况。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(1 1)'::geometry);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2035, "question_en": "See if the little line passing through (0 0), (1 1), (0 2) and the point at (1 1) have any edge-touching situation."}
{"id": 374, "function": "ST_Touches", "question": "看看那条经过(0 0), (1 1), 最后到(0 2)的小线的尾巴和一个待在(0 2)的小点儿是不是挨着，给个是非结果。", "sql": "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(0 2)'::geometry);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2045, "question_en": "See if the tail of the little line that goes through (0 0), (1 1), and finally to (0 2) is touching a little dot that stays at (0 2), and give a true or false result."}
{"id": 375, "function": "ST_Within", "question": "看看那些圆圈的关系，一个小的和一个大的，都是同心的。小的半径20，大的半径40。研究它们的交集、包围情况，还有那些几何的相似性。", "sql": "SELECT ST_Within(smallc,smallc) AS smallinsmall, ST_Within(smallc, bigc) AS smallinbig, ST_Within(bigc,smallc) AS biginsmall, ST_Within(ST_Union(smallc, bigc), bigc) AS unioninbig, ST_Within(bigc, ST_Union(smallc, bigc)) AS biginunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion FROM ( SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) AS smallc, ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) AS bigc) AS foo;", "execution_result": [[true, true, false, true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2050, "question_en": "Look at the relationships of those circles, a small one and a big one, both concentric. The small one has a radius of 20, the big one has a radius of 40. Study their intersection, containment scenarios, and those geometric similarities."}
{"id": 375, "function": "ST_Within", "question": "在50 50这个点上画两个圆，像一个小的泡泡和一个大的泡泡，小的是20单位，大的是40单位，看看这些关系：小泡泡是不是在自己的范围内，小泡泡是不是藏在大泡泡里，大泡泡能不能躲进小泡泡，大泡泡和小泡泡合在一起是不是全进了大泡泡，合起来的大泡泡有没有把自己也装进去，还有大泡泡是不是和它俩合起来的一样大。", "sql": "SELECT ST_Within(smallc,smallc) AS smallinsmall, ST_Within(smallc, bigc) AS smallinbig, ST_Within(bigc,smallc) AS biginsmall, ST_Within(ST_Union(smallc, bigc), bigc) AS unioninbig, ST_Within(bigc, ST_Union(smallc, bigc)) AS biginunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion FROM ( SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) AS smallc, ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) AS bigc) AS foo;", "execution_result": [[true, true, false, true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2046, "question_en": "Draw two circles at the point 50 50, like a small bubble and a big bubble, with the small one being 20 units and the big one 40 units, and check these relationships: whether the small bubble is within its own range, whether the small bubble is hidden inside the big bubble, whether the big bubble can hide inside the small bubble, whether the big bubble and small bubble together are completely inside the big bubble, whether the combined big bubble also includes itself, and if the big bubble is the same size as when they are combined."}
{"id": 376, "function": "ST_3DDWithin", "question": "看看那个点在-72.1235 42.3521 4的位置和那条线在-72.1260 42.45 15, -72.123 42.1546 20的位置，在一个叫2163的地方，三维和二维的距离是不是都在126.8以内。", "sql": "SELECT ST_3DDWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_3d,\nST_DWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_5d;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2052, "question_en": "Check if that dot at -72.1235 42.3521 4 and that line at -72.1260 42.45 15, -72.123 42.1546 20, in a place called 2163, have both 3D and 2D distances within 126.8."}
{"id": 376, "function": "ST_3DDWithin", "question": "把那个有点像地球的坐标系里的三维小点和三维小线，换到美国的一个坐标系里，然后看看它们在三维和二维的距离是不是都不超过126.8个单位。", "sql": "SELECT ST_3DDWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_3d,\nST_DWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_6d;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2053, "question_en": "Take that kind of global-like coordinate system's 3D little dot and 3D little line, switch them to an American coordinate system, and then see if their distances in 3D and 2D don't exceed 126.8 units."}
{"id": 375, "function": "ST_Within", "question": "在坐标(50,50)附近画两个圆圈，一个小的半径20，一个大的半径40，看看这几个情况：小圆自己包着自己，小圆在大圆里，大圆在小圆里，两个圆圈合在一起被大圆包着，大圆被合起来的包着，最后大圆和合起来的完全一样吗？", "sql": "SELECT ST_Within(smallc,smallc) AS smallinsmall, ST_Within(smallc, bigc) AS smallinbig, ST_Within(bigc,smallc) AS biginsmall, ST_Within(ST_Union(smallc, bigc), bigc) AS unioninbig, ST_Within(bigc, ST_Union(smallc, bigc)) AS biginunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion FROM ( SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) AS smallc, ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) AS bigc) AS foo;", "execution_result": [[true, true, false, true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2047, "question_en": "Around the point (50,50), draw two circles, a small one with radius 20 and a large one with radius 40, and check these situations: the small circle holds itself, the small circle is inside the large circle, the large circle is inside the small circle, the two circles together are held by the large circle, the large circle is held by the combined one, and finally, are the large circle and the combined one exactly the same?"}
{"id": 375, "function": "ST_Within", "question": "有个点在50和50这两个数上，围绕它画个20和40这么大的圈。然后你得看看这个小圈是不是在它自己和大圈里，两个圈加起来后有什么关系，还有它们是不是一样呢？", "sql": "SELECT ST_Within(smallc,smallc) AS smallinsmall, ST_Within(smallc, bigc) AS smallinbig, ST_Within(bigc,smallc) AS biginsmall, ST_Within(ST_Union(smallc, bigc), bigc) AS unioninbig, ST_Within(bigc, ST_Union(smallc, bigc)) AS biginunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion FROM ( SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) AS smallc, ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) AS bigc) AS foo;", "execution_result": [[true, true, false, true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2051, "question_en": "Imagine a spot at 50 and 50, then draw circles with sizes 20 and 40 around it. You need to check if the small circle is inside itself and the big one, what happens when you combine the two circles, and whether they are the same or not."}
{"id": 375, "function": "ST_Within", "question": "在(50,50)这个地方，先画个20的圈，接着画个40的圈，然后看看这些：1. 小圈在小圈里吗？2. 小圈在大圈里吗？3. 大圈在小圈里吗？4. 两个圈合在一起的形状在大圈里吗？5. 大圈在合在一起的形状里吗？6. 大圈和合在一起的形状是一样的吗？", "sql": "SELECT ST_Within(smallc,smallc) AS smallinsmall, ST_Within(smallc, bigc) AS smallinbig, ST_Within(bigc,smallc) AS biginsmall, ST_Within(ST_Union(smallc, bigc), bigc) AS unioninbig, ST_Within(bigc, ST_Union(smallc, bigc)) AS biginunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion FROM ( SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) AS smallc, ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) AS bigc) AS foo;", "execution_result": [[true, true, false, true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2048, "question_en": "At the spot (50,50), first draw a circle of 20, then a circle of 40, and then check these: 1. Is the small circle inside the small circle? 2. Is the small circle inside the big circle? 3. Is the big circle inside the small circle? 4. Is the shape made by combining the two circles inside the big circle? 5. Is the big circle inside the combined shape? 6. Are the big circle and the combined shape the same?"}
{"id": 376, "function": "ST_3DDWithin", "question": "想知道在一个神秘的坐标世界里，一个小点(-72.1235 42.3521 4)和一条线(-72.1260 42.45 15, -72.123 42.1546 20)之间的距离，是不是小于126.8这个数字。不仅要看它们在三维空间中，还要看看它们在二维平面上的投影距离。", "sql": "SELECT ST_3DDWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_3d,\nST_DWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_17d;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2055, "question_en": "I wonder if in a mysterious coordinate world, the distance between a little point (-72.1235 42.3521 4) and a line (-72.1260 42.45 15, -72.123 42.1546 20) is less than the number 126.8. Not only should we look at them in 3D space, but also at their projected distance in a 2D plane."}
{"id": 376, "function": "ST_3DDWithin", "question": "在美国国家地图里的坐标系中，看看一个在(-72.1235, 42.3521)高度4的点，和从(-72.1260, 42.45, 15)到(-72.123, 42.1546, 20)的小线段之间，两个距离是不是都不超过126.8米？", "sql": "SELECT ST_3DDWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_3d,\nST_DWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_7d;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2054, "question_en": "In the coordinate system of the US National Atlas, see if a point at (-72.1235, 42.3521) with a height of 4, and a little line from (-72.1260, 42.45, 15) to (-72.123, 42.1546, 20), have both distances within 126.8 meters?"}
{"id": 376, "function": "ST_3DDWithin", "question": "有一个三维的小点在-72.1235 42.3521 4的位置，还有一条经过-72.1260 42.45 15到-72.123 42.1546 20的线，把它们从某个地球上的系统换到另一个美国地图的系统，然后看看它们的空间距离和平面距离是不是都不超过126.8的某个单位。", "sql": "SELECT ST_3DDWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_3d,\nST_DWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_18d;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2056, "question_en": "There's a tiny 3D dot at -72.1235 42.3521 4, and a line passing through -72.1260 42.45 15 to -72.123 42.1546 20. Swap them from some earth system to another US map system, and then check if their spatial and flat distances are both not more than 126.8 of some unit."}
{"id": 377, "function": "ST_3DDFullyWithin", "question": "给你一个小点(1 1 2)和一串坐标(1 5 2, 2 7 20, 1 9 100, 14 12 3)，看看这小点是不是在10单位内的某个地方或者完全在这些坐标的范围里，还有在20单位的平面和立体距离里也是一样，告诉我四个结果。", "sql": "SELECT ST_3DDFullyWithin(geom_a, geom_b, 10) as D3DFullyWithin10, ST_3DDWithin(geom_a, geom_b, 10) as D3DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) as D2DFullyWithin20, ST_3DDFullyWithin(geom_a, geom_b, 20) as D3DFullyWithin20 from (select ST_GeomFromEWKT('POINT(1 1 2)') as geom_a, ST_GeomFromEWKT('LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)') as geom_b) t1;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2059, "question_en": "You have a little point (1 1 2) and a series of coordinates (1 5 2, 2 7 20, 1 9 100, 14 12 3), check if this little point is somewhere within 10 units or completely within the range of these coordinates, and also for 20 units in both flat and 3D distances, let me know the four results."}
{"id": 377, "function": "ST_3DDFullyWithin", "question": "看看那个三维小点(1 1 2)跟那条折线(1 5 2, 2 7 20, 1 9 100, 14 12 3)有没有在一些特别的距离范围内，比如说，3D距离是10和20，还有2D距离是20，然后告诉我四个对不对的结果，分别叫D3DFullyWithin10、D3DWithin10、D2DFullyWithin20和D3DFullyWithin20。", "sql": "SELECT ST_3DDFullyWithin(geom_a, geom_b, 10) as D3DFullyWithin10, ST_3DDWithin(geom_a, geom_b, 10) as D3DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) as D2DFullyWithin20, ST_3DDFullyWithin(geom_a, geom_b, 20) as D3DFullyWithin20 from (select ST_GeomFromEWKT('POINT(1 1 2)') as geom_a, ST_GeomFromEWKT('LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)') as geom_b) t1;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2058, "question_en": "Check if that 3D little dot (1 1 2) is within some special distance ranges from that line (1 5 2, 2 7 20, 1 9 100, 14 12 3), like 3D distances of 10 and 20, and a 2D distance of 20, then tell me four true or false results called D3DFullyWithin10, D3DWithin10, D2DFullyWithin20, and D3DFullyWithin20."}
{"id": 377, "function": "ST_3DDFullyWithin", "question": "用那颗小点(1 1 2)和那条带拐弯的线(1 5 2, 2 7 20, 1 9 100, 14 12 3)来看看：1) 在10单位内有没有完全包住，2) 在10单位内有没有部分包住，3) 在20单位的平面距离内有没有完全包住，4) 在20单位的立体距离内有没有完全包住，然后给我四个答案。", "sql": "SELECT ST_3DDFullyWithin(geom_a, geom_b, 10) as D3DFullyWithin10, ST_3DDWithin(geom_a, geom_b, 10) as D3DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) as D2DFullyWithin20, ST_3DDFullyWithin(geom_a, geom_b, 20) as D3DFullyWithin20 from (select ST_GeomFromEWKT('POINT(1 1 2)') as geom_a, ST_GeomFromEWKT('LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)') as geom_b) t1;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2060, "question_en": "With that little dot (1 1 2) and the twisty line (1 5 2, 2 7 20, 1 9 100, 14 12 3), check: 1) if it's completely wrapped within 10 units, 2) if it's partially wrapped within 10 units, 3) if it's completely wrapped within 20 units on a flat plane, 4) if it's completely wrapped within 20 units in a 3D space, and then give me four answers."}
{"id": 375, "function": "ST_Within", "question": "想象一下一个以(50, 50)为中心的小圆圈，它有20的半径。然后还有一个同样中心但半径是40的大圆圈。问：小圆圈是否装得下自己？小圆圈能不能完全进到大圆圈里？大圆圈能不能装下小的？两个圆圈合在一起的形状是不是只在大圆圈里？大圆圈是不是也在合在一起的形状里？最后，大圆圈和合在一起的形状是不是长得一样呢？", "sql": "SELECT ST_Within(smallc,smallc) AS smallinsmall, ST_Within(smallc, bigc) AS smallinbig, ST_Within(bigc,smallc) AS biginsmall, ST_Within(ST_Union(smallc, bigc), bigc) AS unioninbig, ST_Within(bigc, ST_Union(smallc, bigc)) AS biginunion, ST_Equals(bigc, ST_Union(smallc, bigc)) AS bigisunion FROM ( SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) AS smallc, ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) AS bigc) AS foo;", "execution_result": [[true, true, false, true, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2049, "question_en": "Imagine a small circle centered at (50, 50) with a radius of 20. Then there's a bigger circle with the same center but a radius of 40. Now, does the small circle fit itself? Can the small circle completely fit into the big one? Can the big circle contain the small one? Is the shape made by combining the two circles only within the big circle? Is the big circle also within the combined shape? And finally, do the big circle and the combined shape look the same?"}
{"id": 376, "function": "ST_3DDWithin", "question": "给我一个表，里面有两种真假判断：一种是关于一个被转移到神秘坐标系里的点 (-72.1235 42.3521 4) 和一条奇妙线段 [(-72.1260 42.45 15)→(-72.123 42.1546 20)] 在三维世界里是否离得不超过 126.8；另一种是只看它们在平面上的关系。", "sql": "SELECT ST_3DDWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_3d,\nST_DWithin(\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 4)'),2163),\n      ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163),\n      126.8\n    ) As within_dist_19d;", "execution_result": [[false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2057, "question_en": "Give me a table with two true-or-false judgments: one is about a point (-72.1235 42.3521 4) moved to a mysterious coordinate system and a curious line segment [(-72.1260 42.45 15)→(-72.123 42.1546 20)] in the 3D world within 126.8; the other just looks at their relationship on a flat surface."}
{"id": 377, "function": "ST_3DDFullyWithin", "question": "看看小点(1 1 2)是不是完全在10单位范围内被那条线(1 5 2, 2 7 20, 1 9 100, 14 12 3)遮住，以及在20单位范围内是否也被完全盖住，还有在这两个距离内有没有在附近待着。", "sql": "SELECT ST_3DDFullyWithin(geom_a, geom_b, 10) as D3DFullyWithin10, ST_3DDWithin(geom_a, geom_b, 10) as D3DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) as D2DFullyWithin20, ST_3DDFullyWithin(geom_a, geom_b, 20) as D3DFullyWithin20 from (select ST_GeomFromEWKT('POINT(1 1 2)') as geom_a, ST_GeomFromEWKT('LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)') as geom_b) t1;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2061, "question_en": "Check if the little dot (1 1 2) is entirely covered by that line (1 5 2, 2 7 20, 1 9 100, 14 12 3) within 10 units, and also if it's fully covered within 20 units, and whether it's hanging around nearby within these distances."}
{"id": 382, "function": "ST_PointInsideCircle", "question": "这个1 2的小点是不是在以2,3为中心、半径是0.5的圆圈里呢？", "sql": "SELECT ST_PointInsideCircle(ST_Point(1,2), 0.5, 2, 3);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2075, "question_en": "Is this little dot at 1 2 inside the circle centered at 2,3 with a radius of 0.5?"}
{"id": 377, "function": "ST_3DDFullyWithin", "question": "看看这些坐标之间的关系吧：一个小点在(1 1 2)和一串坐标线在(1 5 2, 2 7 20, 1 9 100, 14 12 3)，分析一下它们是否在10或20单位范围内互相包裹或靠近，结果要用表格形式哦。", "sql": "SELECT ST_3DDFullyWithin(geom_a, geom_b, 10) as D3DFullyWithin10, ST_3DDWithin(geom_a, geom_b, 10) as D3DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) as D2DFullyWithin20, ST_3DDFullyWithin(geom_a, geom_b, 20) as D3DFullyWithin20 from (select ST_GeomFromEWKT('POINT(1 1 2)') as geom_a, ST_GeomFromEWKT('LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)') as geom_b) t1;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2063, "question_en": "Check out the relationship between these coordinates: a little dot at (1 1 2) and a string of coordinates at (1 5 2, 2 7 20, 1 9 100, 14 12 3). Analyze whether they are wrapped around or close to each other within 10 or 20 units, and present the results in a table format."}
{"id": 377, "function": "ST_3DDFullyWithin", "question": "看看那个小点(1 1 2)和那条线(1 5 2, 2 7 20, 1 9 100, 14 12 3)之间有什么关系，能不能给我四个答案：比如说，三维里它们在10单位内是不是完全在一起，或者在10单位里有没有碰到，二维里20单位内是不是完全在一起，三维里20单位内是不是完全在一起。", "sql": "SELECT ST_3DDFullyWithin(geom_a, geom_b, 10) as D3DFullyWithin10, ST_3DDWithin(geom_a, geom_b, 10) as D3DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) as D2DFullyWithin20, ST_3DDFullyWithin(geom_a, geom_b, 20) as D3DFullyWithin20 from (select ST_GeomFromEWKT('POINT(1 1 2)') as geom_a, ST_GeomFromEWKT('LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 3)') as geom_b) t1;", "execution_result": [[false, true, true, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2062, "question_en": "Check the relationship between that little dot (1 1 2) and that line (1 5 2, 2 7 20, 1 9 100, 14 12 3), and give me four answers: like, in 3D, are they completely together within 10 units, or do they touch within 10 units, in 2D are they completely together within 20 units, and in 3D are they completely together within 20 units."}
{"id": 378, "function": "ST_DFullyWithin", "question": "看看点在1 1和那些线串(1 5, 2 7, 1 9, 14 12)之间的关系吧：先看看它们是不是完全在10个单位内，再看看有没有在10个单位内碰到，然后再看看它们是不是完全在20个单位内。", "sql": "SELECT ST_DFullyWithin(geom_a, geom_b, 10) AS DFullyWithin10, ST_DWithin(geom_a, geom_b, 10) AS DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) AS DFullyWithin20 FROM (VALUES ('POINT(1 1)', 'LINESTRING(1 5, 2 7, 1 9, 14 12)') ) AS v(geom_a, geom_b)", "execution_result": [[false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2066, "question_en": "Let's check the relationship between the dot at 1 1 and those line strings (1 5, 2 7, 1 9, 14 12): first, see if they are entirely within 10 units, then see if they touch within 10 units, and finally check if they are entirely within 20 units."}
{"id": 382, "function": "ST_PointInsideCircle", "question": "想知道小点(1 2)是不是被从(2,3)扩展出的半径0.5的圆圈包住了？", "sql": "SELECT ST_PointInsideCircle(ST_Point(1,2), 0.5, 2, 3);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2073, "question_en": "Wondering if the little dot at (1 2) is covered by the circle stretching out from (2,3) with a radius of 0.5?"}
{"id": 382, "function": "ST_PointInsideCircle", "question": "看看那个在(1,2)的小点是不是被围在以(2,3)为中心的圈子里，圈子的范围是0.5的距离。", "sql": "SELECT ST_PointInsideCircle(ST_Point(1,2), 0.5, 2, 3);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2070, "question_en": "Check if that little dot at (1,2) is encircled by the area centered at (2,3), with the circle's reach being 0.5."}
{"id": 378, "function": "ST_DFullyWithin", "question": "看看那个点(1 1)和那条线(1 5, 2 7, 1 9, 14 12)之间的距离问题：所有小点是不是都在10个单位的范围内？有没有任何小点在10个单位的范围内？所有小点是不是都在20个单位的范围内？", "sql": "SELECT ST_DFullyWithin(geom_a, geom_b, 10) AS DFullyWithin10, ST_DWithin(geom_a, geom_b, 10) AS DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) AS DFullyWithin20 FROM (VALUES ('POINT(1 1)', 'LINESTRING(1 5, 2 7, 1 9, 14 12)') ) AS v(geom_a, geom_b)", "execution_result": [[false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2064, "question_en": "Check the distance issue between that point (1 1) and the line (1 5, 2 7, 1 9, 14 12): Are all little dots within 10 units? Is any little dot within 10 units? Are all little dots within 20 units?"}
{"id": 382, "function": "ST_PointInsideCircle", "question": "有个圆心在(2,3)的小圆，半径是0.5，看看点(1,2)是不是在这个圆的里面。", "sql": "SELECT ST_PointInsideCircle(ST_Point(1,2), 0.5, 2, 3);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2072, "question_en": "There's a small circle centered at (2,3) with a radius of 0.5, see if the point (1,2) is inside this circle."}
{"id": 382, "function": "ST_PointInsideCircle", "question": "看看那个在(1, 2)的小点，跟半径0.5的圆，圆心在(2, 3)，有没有在一起（是/否）？", "sql": "SELECT ST_PointInsideCircle(ST_Point(1,2), 0.5, 2, 3);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2074, "question_en": "Check if that little point at (1, 2) is together with a circle of radius 0.5, with its center at (2, 3) (yes/no)?"}
{"id": 382, "function": "ST_PointInsideCircle", "question": "看看那个点（1,2）是不是在一个以(2,3)为中心，半径是0.5的小圆圈里面。", "sql": "SELECT ST_PointInsideCircle(ST_Point(1,2), 0.5, 2, 3);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2071, "question_en": "See if that point (1,2) is inside a small circle centered at (2,3) with a radius of 0.5."}
{"id": 378, "function": "ST_DFullyWithin", "question": "看看小点(1 1)和那条由(1 5, 2 7, 1 9, 14 12)组成的线，在10和20这个范围里，能不能好好待在一起，或者保持一定的距离，给个真假的结果。", "sql": "SELECT ST_DFullyWithin(geom_a, geom_b, 10) AS DFullyWithin10, ST_DWithin(geom_a, geom_b, 10) AS DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) AS DFullyWithin20 FROM (VALUES ('POINT(1 1)', 'LINESTRING(1 5, 2 7, 1 9, 14 12)') ) AS v(geom_a, geom_b);", "execution_result": [[false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2067, "question_en": "Check if the little dot (1 1) and the line made of (1 5, 2 7, 1 9, 14 12) can nicely stay together within 10 and 20 units, or just keep a certain distance, and provide true or false outcomes."}
{"id": 378, "function": "ST_DFullyWithin", "question": "看看这些小点和线，能不能在10或20的范围内完全包住它们，或者只是简单在10的距离内靠得比较近？", "sql": "SELECT ST_DFullyWithin(geom_a, geom_b, 10) AS DFullyWithin10, ST_DWithin(geom_a, geom_b, 10) AS DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) AS DFullyWithin20 FROM (VALUES ('POINT(1 1)', 'LINESTRING(1 5, 2 7, 1 9, 14 12)') ) AS v(geom_a, geom_b);", "execution_result": [[false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2069, "question_en": "Check if these little dots and lines can be fully enclosed within 10 or 20 units, or are they just simply close within a distance of 10?"}
{"id": 378, "function": "ST_DFullyWithin", "question": "有一个点在(1 1)的位置，还有一条通过(1 5, 2 7, 1 9, 14 12)这些点连起来的线，看看这个点到这些连起来的点最远是不是不超过10；然后看看这个点跟这条线有没有小于或等于10的距离；最后再看看这个点到这些连起来的点最远是不是不超过20。", "sql": "SELECT ST_DFullyWithin(geom_a, geom_b, 10) AS DFullyWithin10, ST_DWithin(geom_a, geom_b, 10) AS DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) AS DFullyWithin20 FROM (VALUES ('POINT(1 1)', 'LINESTRING(1 5, 2 7, 1 9, 14 12)') ) AS v(geom_a, geom_b)", "execution_result": [[false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2065, "question_en": "There's a point at (1 1) and a line made by connecting points at (1 5, 2 7, 1 9, 14 12). Check if the furthest distance from the point to these connected points is no more than 10; then check if there's any distance from the point to the line that's less than or equal to 10; and finally, see if the furthest distance to those connected points is no more than 20."}
{"id": 378, "function": "ST_DFullyWithin", "question": "想看看一个小点在那些连起来的坐标附近的情况。第一种是小点在一个有10单位大小范围内完全被包围，第二种是小点和那些坐标之间的距离不超过10单位，第三种是小点在一个有20单位范围内被完全包围。", "sql": "SELECT ST_DFullyWithin(geom_a, geom_b, 10) AS DFullyWithin10, ST_DWithin(geom_a, geom_b, 10) AS DWithin10, ST_DFullyWithin(geom_a, geom_b, 20) AS DFullyWithin20 FROM (VALUES ('POINT(1 1)', 'LINESTRING(1 5, 2 7, 1 9, 14 12)') ) AS v(geom_a, geom_b);", "execution_result": [[false, true, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2068, "question_en": "Let's see how a little dot relates to those connected coordinates nearby. First, the dot is fully surrounded within a 10-unit area, second, the dot and those coordinates are no more than 10 units apart, and third, the dot is fully surrounded within a 20-unit area."}
{"id": 383, "function": "ST_Area", "question": "找出一个用这些点画出的形状的面积，先用一种单位算，然后再换成另一种单位。坐标是743238 2967416到743265.625 2967416，结果分别要用平方英尺和平方米表示。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(ST_Transform(geom, 26986)) AS sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27243061337953]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2076, "question_en": "Find the area of a shape drawn with these points, first using one unit and then switching to another. The coordinates range from 743238 2967416 to 743265.625 2967416, and the results should be in square feet and square meters."}
{"id": 383, "function": "ST_Area", "question": "有一个形状，像是由一些点组成的，点的坐标是(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)、(743238 2967416)，在一个叫2249的系统里，算算它的面积，用原来的单位和另一个比较现代的系统26986的单位来看看结果，分别是平方英尺和平方米。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(ST_Transform(geom, 26986)) AS sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27243061337953]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2077, "question_en": "There's a shape, kind of made from some points, with coordinates (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416), (743238 2967416), in a system called 2249, figure out its area, using the original units and another more modern system 26986's units to see the results, in square feet and square meters respectively."}
{"id": 384, "function": "ST_Area", "question": "把那些坐标点组成的形状从一个编号是2249的系统换到4326，然后算出它的三种面积：像地球一样的面积（平方英尺）、像球体一样的面积（平方英尺）、还有像地球一样的面积（平方米）。", "sql": "SELECT ST_Area(geog) / 0.3048 ^ 2 sqft_spheroid, ST_Area(geog, false) / 0.3048 ^ 2 sqft_sphere, ST_Area(geog) sqm_spheroid FROM (SELECT ST_Transform('SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry, 4326)::geography geog) AS subquery;", "execution_result": [[928.6844043358865, 926.6097622511899, 86.27760436339304]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2083, "question_en": "Take the shape made by those coordinates from a system numbered 2249 to 4326, then calculate its three areas: like Earth area (square feet), like sphere area (square feet), and like Earth area (square meters)."}
{"id": 386, "function": "ST_Area", "question": "在编号为2249的坐标系里，有一个由这些点组成的形状：743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416。想知道这个形状的面积，结果要用平方英尺和平方米表示哦。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(geom) * 0.3048 ^ 2 sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27208552]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2088, "question_en": "In a coordinate system numbered 2249, there's a shape made from these points: 743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416. We want to find out the area of this shape, and the result should be in square feet and square meters."}
{"id": 383, "function": "ST_Area", "question": "给我一个形状，它由这些坐标形成：743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416。告诉我这个形状的面积，先用平方英尺，然后换个系统，用平方米表示。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(ST_Transform(geom, 26986)) AS sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27243061337953]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2081, "question_en": "Give me a shape formed by these coordinates: 743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416. Tell me the area of this shape, first in square feet, then switch systems and give it in square meters."}
{"id": 383, "function": "ST_Area", "question": "有一个形状像地上的平面，点坐标是(743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416)，你能算出这个平面在一种坐标方式下的面积（平方英尺）以及在另一种坐标方式下的面积（平方米）吗？", "sql": "SELECT ST_Area(geom) sqft, ST_Area(ST_Transform(geom, 26986)) AS sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27243061337953]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2079, "question_en": "There's a shape like a flat surface on the ground with points at (743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416). Can you find out its area in one coordinate style (square feet) and in another style (square meters)?"}
{"id": 384, "function": "ST_Area", "question": "在一个神奇的转换中，把那些点组成的形状从一个编号为2249的系统变成编号4326的系统，然后找出它在另一种单位下的面积，分别是椭球和球体的平方英尺面积，还有椭球的平方米面积。", "sql": "SELECT ST_Area(geog) / 0.3048 ^ 2 sqft_spheroid, ST_Area(geog, false) / 0.3048 ^ 2 sqft_sphere, ST_Area(geog) sqm_spheroid \nFROM ( \n  SELECT ST_Transform( 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry, 4326) :: geography geog ) AS subquery;", "execution_result": [[928.6844043358865, 926.6097622511899, 86.27760436339304]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2082, "question_en": "In a magical transformation, change the shape made up of those points from a system numbered 2249 to a system numbered 4326, then find its area in another unit, including ellipsoidal and spherical areas in square feet, plus ellipsoidal area in square meters."}
{"id": 384, "function": "ST_Area", "question": "想知道一个在坐标变化后的小区域，它最初是用一些数字定义的像743238 2967416这些，然后变成了另一个坐标系。能不能告诉我三个面积的结果，用不同的方式来算，比如用地球的形状和其他方式，结果单位有平方英尺和平方米。", "sql": "SELECT ST_Area(geog) / 0.3048 ^ 2 sqft_spheroid, ST_Area(geog, false) / 0.3048 ^ 2 sqft_sphere, ST_Area(geog) sqm_spheroid FROM (SELECT ST_Transform('SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry, 4326)::geography geog) AS subquery;", "execution_result": [[928.6844043358865, 926.6097622511899, 86.27760436339304]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2086, "question_en": "I'm curious about a small area after its coordinates change, initially defined with numbers like 743238 2967416, then transformed to another coordinate system. Could you tell me three area results calculated in different ways, like using Earth's shape and other methods, with results in square feet and square meters?"}
{"id": 383, "function": "ST_Area", "question": "想象一个形状，它是由这几个点连起来的：743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416。在一个叫2249的系统里，看看这个形状有多大，单位是平方英尺。然后把这个形状变到另一个叫26986的系统，看看它有多大，单位是平方米。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(ST_Transform(geom, 26986)) AS sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27243061337953]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2078, "question_en": "Imagine a shape made by connecting these points: 743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416. In a system called 2249, see how big this shape is in square feet. Then move this shape to another system called 26986 and see how big it is in square meters."}
{"id": 386, "function": "ST_Area", "question": "你能不能算一下由这些点构成的形状的面积？这些点是(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)。然后把这个面积从平方英尺变成平方米，并告诉我两个单位下的面积是多少。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(geom) * 0.3048 ^ 2 sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27208552]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2089, "question_en": "Could you calculate the area of the shape formed by these points? The points are (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416). Then change this area from square feet to square meters and tell me the area in both units."}
{"id": 384, "function": "ST_Area", "question": "把那些坐标点构成的形状从一个编号为2249的系统转换到WGS84后，算一算它的三个面积，分别是变成平方英尺的椭球面积、球面面积，还有保持平方米的椭球面积。", "sql": "SELECT ST_Area(geog) / 0.3048 ^ 2 sqft_spheroid, ST_Area(geog, false) / 0.3048 ^ 2 sqft_sphere, ST_Area(geog) sqm_spheroid \nFROM ( \n  SELECT ST_Transform( 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry, 4326) :: geography geog ) AS subquery;", "execution_result": [[928.6844043358865, 926.6097622511899, 86.27760436339304]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2087, "question_en": "After shifting those coordinates that form a shape from a system numbered 2249 to WGS84, calculate its three areas: the ellipsoidal area converted to square feet, the spherical area converted to square feet, and the ellipsoidal area kept in square meters."}
{"id": 384, "function": "ST_Area", "question": "对于那些点组成的多边形，先让它们从一个编号2249的系统变到编号4326，然后算算这个形状在椭球和球体里有多大，单位可以是平方英尺或者平方米。分别叫它们sqft_spheroid、sqft_sphere和sqm_spheroid。", "sql": "SELECT ST_Area(geog) / 0.3048 ^ 2 sqft_spheroid, ST_Area(geog, false) / 0.3048 ^ 2 sqft_sphere, ST_Area(geog) sqm_spheroid FROM (SELECT ST_Transform('SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry, 4326)::geography geog) AS subquery;", "execution_result": [[928.6844043358865, 926.6097622511899, 86.27760436339304]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2085, "question_en": "For the polygon made of those points, first shift them from a system numbered 2249 to one numbered 4326, then figure out how big this shape is in ellipsoidal and spherical contexts, with units in square feet or square meters. Name them sqft_spheroid, sqft_sphere, and sqm_spheroid respectively."}
{"id": 386, "function": "ST_Area", "question": "看看那个由这些点组成的闭合形状的面积是多少吧，(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)、(743238 2967416)，先用平方英尺算一下，再用一种转换成平方米的方式看看结果。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(geom) * 0.3048 ^ 2 sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27208552]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2090, "question_en": "Let's see what the area of that closed shape made from these points is, (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416), (743238 2967416), first calculate it in square feet, then convert to square meters to check the result."}
{"id": 384, "function": "ST_Area", "question": "把那些坐标变换一下，从一个编号是2249的系统到4326，然后算算这个形状的面积。想知道三个东西：1) 用一个椭球模型，最后面积是平方英尺，得除以0.3048的平方才行；2) 用一个球模型，也是平方英尺，还是要除以0.3048的平方；3) 原来面积是多少，单位是平方米，用椭球模型来做。", "sql": "SELECT ST_Area(geog) / 0.3048 ^ 2 sqft_spheroid, ST_Area(geog, false) / 0.3048 ^ 2 sqft_sphere, ST_Area(geog) sqm_spheroid \nFROM ( \n  SELECT ST_Transform( 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry, 4326) :: geography geog ) AS subquery;", "execution_result": [[928.6844043358865, 926.6097622511899, 86.27760436339304]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2084, "question_en": "Transform those coordinates from a system numbered 2249 to 4326, then calculate the area of this shape. Want to know three things: 1) Using an ellipsoidal model, ending with the area in square feet, need to divide by the square of 0.3048; 2) Using a spherical model, also in square feet, still need to divide by the square of 0.3048; 3) What the original area is in square meters, using the ellipsoidal model."}
{"id": 383, "function": "ST_Area", "question": "给出一个用那些点围成的形状，它的编号是2249，面积用平方英尺表示，另外，想知道如果换个编号成26986后，面积用平方米是多少。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(ST_Transform(geom, 26986)) AS sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27243061337953]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2080, "question_en": "There’s a shape made from those points, numbered 2249, and its area is in square feet. Also, I want to know what the area is in square meters if you change the number to 26986."}
{"id": 386, "function": "ST_Area", "question": "你能帮我算一下那些点围成的形状的面积吗？像743238 2967416和743265.625 2967416这些点。结果要用平方英尺和平方米给我，平方米得通过平方英尺乘以0.3048的平方来变换。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(geom) * 0.3048 ^ 2 sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27208552]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2093, "question_en": "Can you help me figure out the area of the shape made by those points? Like 743238 2967416 and 743265.625 2967416. Give me the results in square feet and square meters, with square meters converted by multiplying square feet by the square of 0.3048."}
{"id": 387, "function": "ST_Azimuth", "question": "看看从(25,45)到(75,100)以及反方向的角度变化，记得用度数来表示这些变化哦。", "sql": "SELECT degrees(ST_Azimuth( ST_Point(25, 45), ST_Point(75, 100))) AS degA_B, degrees(ST_Azimuth( ST_Point(75, 100), ST_Point(25, 45) )) AS degB_A;", "execution_result": [[42.27368900609371, 222.27368900609372]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2094, "question_en": "Observe the angle change from (25,45) to (75,100) and in the reverse direction, remember to express these changes in degrees."}
{"id": 387, "function": "ST_Azimuth", "question": "从25 45这个点看向75 100的方向角是多少度？反过来又是多少度呢？", "sql": "SELECT degrees(ST_Azimuth( ST_Point(25, 45), ST_Point(75, 100))) AS degA_B, degrees(ST_Azimuth( ST_Point(75, 100), ST_Point(25, 45) )) AS degB_A;", "execution_result": [[42.27368900609371, 222.27368900609372]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2099, "question_en": "What's the directional angle in degrees when looking from the point 25 45 towards 75 100? And what about the other way around?"}
{"id": 386, "function": "ST_Area", "question": "有个坐标系编号2249的形状，包含那些点：743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416。需要知道这个形状面积的两个单位制值，一个像是平方英尺，一个像是平方米，结果分别叫做sqft和sqm。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(geom) * 0.3048 ^ 2 sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27208552]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2092, "question_en": "There's a shape in coordinate system number 2249, covering these points: 743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416. We need to find out the area in two units, something like square feet and something like square meters, and the results are called sqft and sqm."}
{"id": 387, "function": "ST_Azimuth", "question": "从坐标(25, 45)到(75, 100)之间的角度有多大呢？然后从(75, 100)回到(25, 45)又是多少呢？", "sql": "SELECT degrees(ST_Azimuth( ST_Point(25, 45), ST_Point(75, 100))) AS degA_B, degrees(ST_Azimuth( ST_Point(75, 100), ST_Point(25, 45) )) AS degB_A;", "execution_result": [[42.27368900609371, 222.27368900609372]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2095, "question_en": "What's the angle like from the coordinates (25, 45) to (75, 100)? And then, how much is it when going back from (75, 100) to (25, 45)?"}
{"id": 387, "function": "ST_Azimuth", "question": "从小点(25 45)到另一个点(75 100)的角度是多少？反过来呢，从(75 100)到(25 45)又是什么角度？", "sql": "SELECT degrees(ST_Azimuth( ST_Point(25, 45), ST_Point(75, 100))) AS degA_B, degrees(ST_Azimuth( ST_Point(75, 100), ST_Point(25, 45) )) AS degB_A;", "execution_result": [[42.27368900609371, 222.27368900609372]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2098, "question_en": "What's the angle from the little dot at (25 45) to another dot at (75 100)? And what if you look the other way, from (75 100) to (25 45)?"}
{"id": 388, "function": "ST_Angle", "question": "看看那些连接点，像是从(0 0)到(0.3 0.7)再到(1 1)的路径，还有另一条从(0 0)到(0.2 0.5)再到(1 0)，它们之间的夹角是多少呢？", "sql": "SELECT degrees( ST_Angle('LINESTRING(0 0, 0.3 0.7, 1 1)', 'LINESTRING(0 0, 0.2 0.5, 1 0)') );", "execution_result": [[45.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2100, "question_en": "Consider those connecting points, like the path from (0 0) to (0.3 0.7) and then to (1 1), and another one from (0 0) to (0.2 0.5) and then to (1 0), what is the angle between them?"}
{"id": 388, "function": "ST_Angle", "question": "看看那两条由点(0 0, 0.3 0.7, 1 1)和(0 0, 0.2 0.5, 1 0)组成的线之间的夹角是多少，然后把这个角度从弧度变成度数。", "sql": "SELECT degrees( ST_Angle('LINESTRING(0 0, 0.3 0.7, 1 1)', 'LINESTRING(0 0, 0.2 0.5, 1 0)') );", "execution_result": [[45.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2102, "question_en": "Check out the angle between those two lines made by the points (0 0, 0.3 0.7, 1 1) and (0 0, 0.2 0.5, 1 0), then change that angle from radians to degrees."}
{"id": 387, "function": "ST_Azimuth", "question": "从点(25,45)看向点(75,100)会有个角度，然后看看如果反过来又是什么角度呢？", "sql": "SELECT degrees(ST_Azimuth( ST_Point(25, 45), ST_Point(75, 100))) AS degA_B, degrees(ST_Azimuth( ST_Point(75, 100), ST_Point(25, 45) )) AS degB_A;", "execution_result": [[42.27368900609371, 222.27368900609372]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2097, "question_en": "From the spot at (25,45) looking towards (75,100), there's an angle, and what if you look the other way around?"}
{"id": 388, "function": "ST_Angle", "question": "看看在那些坐标上画出的两条线，它们是如何交汇的？具体来说，一条是从(0 0)到(0.3 0.7)再到(1 1)，另一条是从(0 0)到(0.2 0.5)再到(1 0)。它们之间的那个角度是多少度呢？", "sql": "SELECT degrees( ST_Angle('LINESTRING(0 0, 0.3 0.7, 1 1)', 'LINESTRING(0 0, 0.2 0.5, 1 0)') );", "execution_result": [[45.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2101, "question_en": "Take a look at the two lines drawn on those coordinates, how do they meet? Specifically, one goes from (0 0) to (0.3 0.7) and then to (1 1), while the other goes from (0 0) to (0.2 0.5) and then to (1 0). What's the angle between them in degrees?"}
{"id": 386, "function": "ST_Area", "question": "对于那片位于坐标系2249的小区域，看看它的面积，先用平方英尺量，再换算成平方米。", "sql": "SELECT ST_Area(geom) sqft, ST_Area(geom) * 0.3048 ^ 2 sqm FROM (SELECT 'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))'::geometry geom) subquery;", "execution_result": [[928.625, 86.27208552]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2091, "question_en": "For that small area in coordinate system 2249, check its size, first in square feet, then convert to square meters."}
{"id": 388, "function": "ST_Angle", "question": "看看那些坐标点形成的两条路径之间的夹角是多少，并把这个弧度变成我们常用的角度看看。", "sql": "SELECT degrees( ST_Angle('LINESTRING(0 0, 0.3 0.7, 1 1)', 'LINESTRING(0 0, 0.2 0.5, 1 0)') );", "execution_result": [[45.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2104, "question_en": "Check what the angle is between those paths formed by the coordinates, and convert this radian into the usual degrees to see."}
{"id": 387, "function": "ST_Azimuth", "question": "想知道从点(25, 45)到点(75, 100)之间的方向角度怎么说，以及反过来呢，从点(75, 100)到点(25, 45)之间的方向角度又是什么？", "sql": "SELECT degrees(ST_Azimuth( ST_Point(25, 45), ST_Point(75, 100))) AS degA_B, degrees(ST_Azimuth( ST_Point(75, 100), ST_Point(25, 45) )) AS degB_A;", "execution_result": [[42.27368900609371, 222.27368900609372]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2096, "question_en": "I wonder how to describe the directional angle from point (25, 45) to point (75, 100), and vice versa, what is the directional angle from point (75, 100) to point (25, 45)?"}
{"id": 388, "function": "ST_Angle", "question": "找出由这些点组成的两条路径之间的最小角度，用日常的角度单位来表示。路径是这样的：从(0, 0)到(0.3, 0.7)再到(1, 1)；另一条是从(0, 0)到(0.2, 0.5)再到(1, 0)。", "sql": "SELECT degrees( ST_Angle('LINESTRING(0 0, 0.3 0.7, 1 1)', 'LINESTRING(0 0, 0.2 0.5, 1 0)') );", "execution_result": [[45.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2103, "question_en": "Find the smallest angle between two paths made of these points, using everyday angle units. The paths go like this: from (0, 0) to (0.3, 0.7) then to (1, 1); the other one is from (0, 0) to (0.2, 0.5) then to (1, 0)."}
{"id": 388, "function": "ST_Angle", "question": "看看两条小线段，像是从(0 0)到(0.3 0.7)再到(1 1)的，和从(0 0)到(0.2 0.5)再到(1 0)的，它们之间的那个夹缝有多大，能用度数说说吗？", "sql": "SELECT degrees( ST_Angle('LINESTRING(0 0, 0.3 0.7, 1 1)', 'LINESTRING(0 0, 0.2 0.5, 1 0)') );", "execution_result": [[45.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2105, "question_en": "Take a look at these two little lines, like one going from (0 0) to (0.3 0.7) then to (1 1), and the other from (0 0) to (0.2 0.5) then to (1 0). How wide is the gap between them, in degrees?"}
{"id": 389, "function": "ST_Angle", "question": "想知道由这几个点(10 10)、(0 0)、(90 90)、(100 80)连成的两条线之间的夹角是多少度吗？", "sql": "SELECT degrees( ST_Angle('POINT (10 10)', 'POINT (0 0)', 'POINT(90 90)', 'POINT (100 80)') );", "execution_result": [[269.9999999999999]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2108, "question_en": "Curious about what the angle in degrees is between two lines drawn from these points (10 10), (0 0), (90 90), and (100 80)?"}
{"id": 389, "function": "ST_Angle", "question": "想象一下从(10, 10)到(0, 0)以及从(90, 90)到(100, 80)的两条小线，这两条线之间的夹角是多少度？", "sql": "SELECT degrees( ST_Angle('POINT (10 10)', 'POINT (0 0)', 'POINT(90 90)', 'POINT (100 80)') );", "execution_result": [[269.9999999999999]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2107, "question_en": "Imagine two small lines from (10, 10) to (0, 0) and from (90, 90) to (100, 80), what is the angle between them in degrees?"}
{"id": 389, "function": "ST_Angle", "question": "如果有四个小点，分别是(10 10)、(0 0)、(90 90)和(100 80)，你能告诉我它们之间的夹角是多少度吗？", "sql": "SELECT degrees( ST_Angle('POINT (10 10)', 'POINT (0 0)', 'POINT(90 90)', 'POINT (100 80)') );", "execution_result": [[269.9999999999999]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2109, "question_en": "If you have four little dots at (10 10), (0 0), (90 90), and (100 80), can you tell me the angle in degrees between them?"}
{"id": 390, "function": "ST_Angle", "question": "如果你有三个坐标，分别是(0, 0)、(10, 10)、(20, 0)，试着找出它们之间的夹角度数吧。", "sql": "SELECT degrees( ST_Angle('POINT(0 0)', 'POINT(10 10)', 'POINT(20 0)') );", "execution_result": [[270.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2112, "question_en": "Imagine you have three coordinates: (0, 0), (10, 10), and (20, 0). Try to figure out the angle in degrees between them."}
{"id": 389, "function": "ST_Angle", "question": "想知道四个坐标点，像是(10 10)、(0 0)、(90 90)和(100 80)这样排成的三条线之间的角度是多少度？", "sql": "SELECT degrees( ST_Angle('POINT (10 10)', 'POINT (0 0)', 'POINT(90 90)', 'POINT (100 80)') );", "execution_result": [[269.9999999999999]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2110, "question_en": "Curious about the angle in degrees between three lines formed by four coordinates like (10 10), (0 0), (90 90), and (100 80)?"}
{"id": 389, "function": "ST_Angle", "question": "有些点在纸上，像(10, 10)、(0, 0)、(90, 90)和(100, 80)，看看它们之间的两条线怎么拐弯的，然后把那个弧度换成角度告诉我。", "sql": "SELECT degrees( ST_Angle('POINT (10 10)', 'POINT (0 0)', 'POINT(90 90)', 'POINT (100 80)') );", "execution_result": [[269.9999999999999]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2111, "question_en": "There are some dots on paper, like (10, 10), (0, 0), (90, 90), and (100, 80), check how the two lines between them bend, then convert that radian to an angle and tell me."}
{"id": 390, "function": "ST_Angle", "question": "想知道那三个小点：0 0、10 10和20 0，它们之间的夹角是多少呢？把那个弧度结果变成度数看看。", "sql": "SELECT degrees( ST_Angle('POINT(0 0)', 'POINT(10 10)', 'POINT(20 0)') );", "execution_result": [[270.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2113, "question_en": "Curious about the angle between those three little dots: 0 0, 10 10, and 20 0? Turn that radian result into degrees and see."}
{"id": 390, "function": "ST_Angle", "question": "找出由三个小点组成的那个夹角，它们是0 0、10 10和20 0，然后想办法把它转换成度数。", "sql": "SELECT degrees( ST_Angle('POINT(0 0)', 'POINT(10 10)', 'POINT(20 0)') );", "execution_result": [[270.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2114, "question_en": "Find the angle made by those three little dots, which are 0 0, 10 10, and 20 0, then figure out how to convert it into degrees."}
{"id": 390, "function": "ST_Angle", "question": "找出由三个小点构成的夹角的度数，这些小点坐标是(0 0)、(10 10)和(20 0)。", "sql": "SELECT degrees( ST_Angle('POINT(0 0)', 'POINT(10 10)', 'POINT(20 0)') );", "execution_result": [[270.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2117, "question_en": "Find the degree of the angle formed by three little dots, whose coordinates are (0 0), (10 10), and (20 0)."}
{"id": 390, "function": "ST_Angle", "question": "看看这三个小点：从(0, 0)到(10, 10)再到(20, 0)，它们之间的夹角是多少呢？", "sql": "SELECT degrees( ST_Angle('POINT(0 0)', 'POINT(10 10)', 'POINT(20 0)') );", "execution_result": [[270.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2115, "question_en": "Check out these three little dots: from (0, 0) to (10, 10) and then to (20, 0), what's the angle between them?"}
{"id": 390, "function": "ST_Angle", "question": "找出由三个坐标点(0 0)、(10 10)和(20 0)之间形成的角度是多少度。", "sql": "SELECT degrees( ST_Angle('POINT(0 0)', 'POINT(10 10)', 'POINT(20 0)') );", "execution_result": [[270.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2116, "question_en": "Find out the degree of the angle formed between the three coordinate points (0 0), (10 10), and (20 0)."}
{"id": 391, "function": "ST_ClosestPoint", "question": "在那些坐标组成的形状和一个圆圈之间，圆圈是以(80 160)为中心，半径是30，找出离得最近的那个小点，然后用某种格式说出它的坐标。", "sql": "SELECT ST_AsText( ST_ClosestPoint( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) )) AS ptwkt;", "execution_result": [["POINT(131.59149149528952 101.89887534906195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2119, "question_en": "Between the shape made of those coordinates and a circle, where the circle is centered at (80 160) with a radius of 30, find the closest little dot and then tell its coordinates in some format."}
{"id": 389, "function": "ST_Angle", "question": "想一想，从(10, 10)到(0, 0)的那条线，和从(90, 90)到(100, 80)的那条线之间，会形成一个怎样的角度？用度数来表示哦。", "sql": "SELECT degrees( ST_Angle('POINT (10 10)', 'POINT (0 0)', 'POINT(90 90)', 'POINT (100 80)') );", "execution_result": [[269.9999999999999]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2106, "question_en": "Imagine the line from (10, 10) to (0, 0) and the line from (90, 90) to (100, 80), what kind of angle do they form? Express it in degrees."}
{"id": 391, "function": "ST_ClosestPoint", "question": "找找看由(190 150)、(20 10)、(160 70)、(190 150)这些点围成的形状，与一个以(80 160)为中心、半径30的圆形区域之间，哪个地方离得最近，然后用一种特定的格式来告诉我结果。", "sql": "SELECT ST_AsText( ST_ClosestPoint( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) )) AS ptwkt;", "execution_result": [["POINT(131.59149149528952 101.89887534906195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2120, "question_en": "See which spot is closest between a shape made by the points (190 150), (20 10), (160 70), (190 150) and a round area centered at (80 160) with a radius of 30, then tell me the result in a certain format."}
{"id": 391, "function": "ST_ClosestPoint", "question": "找一找那个由顶点(190,150)、(20,10)、(160,70)、(190,150)围成的小形状，看看它上面哪个点靠近以(80,160)为中心的30单位圆圈，然后说出它的样子吧。", "sql": "SELECT ST_AsText( ST_ClosestPoint( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) )) AS ptwkt;", "execution_result": [["POINT(131.59149149528952 101.89887534906195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2118, "question_en": "Find the point on that little shape formed by vertices (190,150), (20,10), (160,70), (190,150) that comes closest to the circle with a 30-unit radius centered at (80,160), and tell us what it looks like."}
{"id": 391, "function": "ST_ClosestPoint", "question": "找出多边形上离某个圆形区域最近的小点，这个多边形由(190,150)、(20,10)、(160,70)、(190,150)这些小点围成。圆心在(80,160)，半径是30。把结果用一种特别的文本形式表示出来。", "sql": "SELECT ST_AsText( ST_ClosestPoint( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) )) AS ptwkt;", "execution_result": [["POINT(131.59149149528952 101.89887534906195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2121, "question_en": "Find the tiny spot on the polygon that is closest to a certain circular area, where the polygon is formed by the tiny spots (190,150), (20,10), (160,70), (190,150). The circle's center is at (80,160) with a radius of 30. Express the result in a special text format."}
{"id": 391, "function": "ST_ClosestPoint", "question": "找出一个在多边形POLYGON ((190 150, 20 10, 160 70, 190 150))和以80 160为中心、半径30的圆圈之间最靠近的点，然后用一种文本格式告诉我。", "sql": "SELECT ST_AsText( ST_ClosestPoint( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) )) AS ptwkt;", "execution_result": [["POINT(131.59149149528952 101.89887534906195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2123, "question_en": "Find a point that is nearest between the polygon POLYGON ((190 150, 20 10, 160 70, 190 150)) and a circle centered at 80 160 with a radius of 30, then tell me in a text format."}
{"id": 391, "function": "ST_ClosestPoint", "question": "找出在围绕着点(80, 160)的30单位范围内，那些点和多边形POLYGON ((190 150, 20 10, 160 70, 190 150))之间最近的那一个，并用一种特别的字符串方式来告诉我。", "sql": "SELECT ST_AsText( ST_ClosestPoint( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) )) AS ptwkt;", "execution_result": [["POINT(131.59149149528952 101.89887534906195)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2122, "question_en": "Find the closest of those points between the polygon POLYGON ((190 150, 20 10, 160 70, 190 150)) and the area stretching 30 units around the point (80, 160), and tell me in a special string way."}
{"id": 392, "function": "ST_ClosestPoint", "question": "找找看，点160 40和那条线10 30, 50 50, 30 110, 70 90, 180 140, 130 190之间的最近距离在哪里，然后把它们的样子写出来。", "sql": "SELECT ST_AsText( ST_ClosestPoint(pt,line)) AS cp_pt_line, ST_AsText( ST_ClosestPoint(line,pt)) AS cp_line_pt FROM (SELECT 'POINT (160 40)'::geometry AS pt, 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)'::geometry AS line ) AS t;", "execution_result": [["POINT(160 40)", "POINT(125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2124, "question_en": "Try to see where the nearest distance is between the point 160 40 and that line with coordinates 10 30, 50 50, 30 110, 70 90, 180 140, 130 190, then write down how they look."}
{"id": 392, "function": "ST_ClosestPoint", "question": "找出那个点160 40和一串点构成的线，像10 30, 50 50, 30 110, 70 90, 180 140, 130 190之间最靠近的地方，然后分别给它们贴上名字，叫做cp_pt_line和cp_line_pt，用一个特别的格式展示出来。", "sql": "SELECT ST_AsText( ST_ClosestPoint(pt,line)) AS cp_pt_line, ST_AsText( ST_ClosestPoint(line,pt)) AS cp_line_pt FROM (SELECT 'POINT (160 40)'::geometry AS pt, 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)'::geometry AS line ) AS t;", "execution_result": [["POINT(160 40)", "POINT(125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2125, "question_en": "Find the nearest spot between the point 160 40 and a string of points forming a line like 10 30, 50 50, 30 110, 70 90, 180 140, 130 190, and label them as cp_pt_line and cp_line_pt, showing them in a special format."}
{"id": 392, "function": "ST_ClosestPoint", "question": "从那个点160 40出发，找一条线上的最邻近点，另外从这条线看回去找那个点的最邻近点，然后用一种标准格式来显示，分别叫做cp_pt_line和cp_line_pt。", "sql": "SELECT ST_AsText( ST_ClosestPoint(pt,line)) AS cp_pt_line, ST_AsText( ST_ClosestPoint(line,pt)) AS cp_line_pt FROM (SELECT 'POINT (160 40)'::geometry AS pt, 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)'::geometry AS line ) AS t;", "execution_result": [["POINT(160 40)", "POINT(125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2126, "question_en": "Starting from that point 160 40, find the nearest spot on a line, and then look back from the line to find the nearest spot to that point, then show them using a standard format, named cp_pt_line and cp_line_pt respectively."}
{"id": 392, "function": "ST_ClosestPoint", "question": "找找看从160 40这个小点到一条线上的那些坐标，哪个最近呢？还有从这条线到那个点，哪个坐标是贴近的？分别叫它们cp_pt_line和cp_line_pt。", "sql": "SELECT ST_AsText( ST_ClosestPoint(pt,line)) AS cp_pt_line, ST_AsText( ST_ClosestPoint(line,pt)) AS cp_line_pt FROM (SELECT 'POINT (160 40)'::geometry AS pt, 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)'::geometry AS line ) AS t;", "execution_result": [["POINT(160 40)", "POINT(125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2129, "question_en": "Let's see which of those coordinates on the line is closest to the little dot at 160 40, and also which coordinate on the line is nearest to the dot. Call them cp_pt_line and cp_line_pt."}
{"id": 393, "function": "ST_3DClosestPoint", "question": "从那些点和线中找出最靠近的点坐标，记得是三维和二维的哦，结果要做成带有编号的字符串。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(50 75)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2133, "question_en": "Find the closest point coordinates from those dots and lines, remember it's 3D and 2D, and make the result into a string with a number."}
{"id": 392, "function": "ST_ClosestPoint", "question": "找出从(160 40)这个位置到那条由(10 30, 50 50, 30 110, 70 90, 180 140, 130 190)串成的线的最近点，然后看看线上的哪个点离(160 40)最近，并把这个点用某种格式表示出来。", "sql": "SELECT ST_AsText( ST_ClosestPoint(pt,line)) AS cp_pt_line, ST_AsText( ST_ClosestPoint(line,pt)) AS cp_line_pt FROM (SELECT 'POINT (160 40)'::geometry AS pt, 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)'::geometry AS line ) AS t;", "execution_result": [["POINT(160 40)", "POINT(125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2127, "question_en": "Find the nearest spot from the location (160 40) to the line made up of (10 30, 50 50, 30 110, 70 90, 180 140, 130 190), then see which point on the line is closest to (160 40) and show that point in some format."}
{"id": 392, "function": "ST_ClosestPoint", "question": "找出从点(160 40)到那些在一条线上排成一列的点(10 30, 50 50, 30 110, 70 90, 180 140, 130 190)中，离得最近的那个点的WKT样子。", "sql": "SELECT ST_AsText( ST_ClosestPoint(pt,line)) FROM (SELECT 'POINT (160 40)'::geometry AS pt, 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)'::geometry AS line ) AS t;", "execution_result": [["POINT(160 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2128, "question_en": "Find the WKT form of the point that is closest from the dot at (160 40) to those points lined up on a line at (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)."}
{"id": 393, "function": "ST_3DClosestPoint", "question": "有一条线在坐标(20 80 20, 98 190 1, 110 180 3, 50 75 900)游走，想看看它离那些点(100 100 30, 50 74 1000)最近的地方在哪里，包括立体和平面距离。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(50 75)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2130, "question_en": "There's a line wandering through coordinates (20 80 20, 98 190 1, 110 180 3, 50 75 900), and you want to see where it gets closest to those points (100 100 30, 50 74 1000), including both 3D and flat distances."}
{"id": 393, "function": "ST_3DClosestPoint", "question": "找出那些点和一条曲线之间在三维和二维上最近的地方，点是(100 100 30)和(50 74 1000)，而曲线是从(20 80 20)到(50 75 900)经过几个弯的那条。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(50 75)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2134, "question_en": "Find the closest spots between those points and a wavy line in both 3D and 2D, where the points are (100 100 30) and (50 74 1000), and the line takes a few turns from (20 80 20) to (50 75 900)."}
{"id": 393, "function": "ST_3DClosestPoint", "question": "找出那些坐标点MULTIPOINT(100 100 30, 50 74 1000)和那条线LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900)之间，最靠近的3D和2D点的特别字符串。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(50 75)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2135, "question_en": "Find the special string for the closest 3D and 2D points between those coordinates MULTIPOINT(100 100 30, 50 74 1000) and that line LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900)."}
{"id": 393, "function": "ST_3DClosestPoint", "question": "有一个包含多个小点的东西，像是(100 100 30, 50 74 1000)，还有一条由几个坐标组成的线，像是(20 80 20, 98 190 1, 110 180 3, 50 75 900)。你能找出这条线上的某个三维小点和二维小点，分别离那些小点最近吗？然后用一种特殊格式输出，分别叫做cp3d_line_pt和cp2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(50 75)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2132, "question_en": "There's a thing with several little dots, like (100 100 30, 50 74 1000), and a line made up of some coordinates, like (20 80 20, 98 190 1, 110 180 3, 50 75 900). Can you find a certain 3D little dot and a 2D little dot on this line that are closest to those dots? Then, output them in a special format, called cp3d_line_pt and cp2d_line_pt."}
{"id": 393, "function": "ST_3DClosestPoint", "question": "找出在那些3D小点(100 100 30, 50 74 1000)和3D长线(20 80 20, 98 190 1, 110 180 3, 50 75 900)之间，哪个3D点和2D点是最近的，然后用EWKT的方式写下来，取个名字叫cp3d_line_pt和cp2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(50 75)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2131, "question_en": "Find out which 3D point and 2D point are the closest between those 3D little dots (100 100 30, 50 74 1000) and the 3D long line (20 80 20, 98 190 1, 110 180 3, 50 75 900), then write it down in EWKT style, naming them cp3d_line_pt and cp2d_line_pt."}
{"id": 394, "function": "ST_3DClosestPoint", "question": "从那条线上某些点到某个点(100 100 30)之间，找找看哪个地方最靠近，无论是用三维的方式还是二维的方式，结果用EWKT的格式展示。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(73.07692307692307 115.38461538461539)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2139, "question_en": "From certain spots on that line to a point at (100 100 30), see which place is closest, whether in a 3D way or a 2D way, and show the result in EWKT format."}
{"id": 394, "function": "ST_3DClosestPoint", "question": "找出那个三维的小点和那条三维长线之间的最近位置，和在二维平面上它们最靠近的地方，然后用一种特别的字符串格式表示出来。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(73.07692307692307 115.38461538461539)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2141, "question_en": "Identify the nearest spot between that tiny 3D dot and the long 3D line, and also find where they are closest on a flat plane, then express it in a special string format."}
{"id": 394, "function": "ST_3DClosestPoint", "question": "找出从那些连成一线的小点到某个特定位置的最近的两个点，一个是在三维空间里，另一个是在平面上，然后用某种格式展示出来。那里的坐标是20 80 20, 98 190 1, 110 180 3, 50 75 1000和100 100 30。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(73.07692307692307 115.38461538461539)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2136, "question_en": "Find the two nearest spots from a line of little dots to a specific location, one in 3D space and the other on a flat surface, and show them in a certain format. The coordinates there are 20 80 20, 98 190 1, 110 180 3, 50 75 1000 and 100 100 30."}
{"id": 394, "function": "ST_3DClosestPoint", "question": "有一个在100 100 30位置的小点，还有一条经过(20 80 20)到(50 75 1000)的线，让我们找找看，这个小点在立体和平面上最靠近这条线的地方，结果用一种特别的格式表示出来，分别叫做cp3d_line_pt和cp2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(73.07692307692307 115.38461538461539)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2137, "question_en": "There's a little point at the position 100 100 30, and a line going from (20 80 20) to (50 75 1000). Let's find where this little point is closest to the line in 3D and 2D, and show the results in a special format, named cp3d_line_pt and cp2d_line_pt."}
{"id": 394, "function": "ST_3DClosestPoint", "question": "有一个三维的点，就在(100 100 30)那里，还有一条神奇的线穿过(20 80 20, 98 190 1, 110 180 3, 50 75 1000)。你能找出这条线在三维和二维上最靠近这个点的小地方吗？结果要用EWKT的方式来表示，分别叫做cp3d_line_pt和cp2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(73.07692307692307 115.38461538461539)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2138, "question_en": "There's a 3D point sitting at (100 100 30), and a magical line passing through (20 80 20, 98 190 1, 110 180 3, 50 75 1000). Can you find the spots on this line that are closest to the point in both 3D and 2D? The results should be shown in that EWKT style, named cp3d_line_pt and cp2d_line_pt respectively."}
{"id": 394, "function": "ST_3DClosestPoint", "question": "从一个在100 100 30的小点到一条穿过(20 80 20,98 190 1,110 180 3,50 75 1000)的线，找出一个覆盖所有维度和一个只看平面最近的点，并给它们取名字。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, ST_AsEWKT(ST_ClosestPoint(line,pt)) AS cp2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["POINT(54.69937988676193 128.93502291722837 11.547586950660556)", "POINT(73.07692307692307 115.38461538461539)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2140, "question_en": "From a small dot at 100 100 30 to a line passing through (20 80 20,98 190 1,110 180 3,50 75 1000), find a point that covers all dimensions and another that only looks at the nearest on the flat surface, and give them names."}
{"id": 395, "function": "ST_3DClosestPoint", "question": "找找那些数字点中，最靠近的地方，看看三维和二维的结果如何，像是从一个多边形到几条线段的距离，数字有175 150 5和175 155 2等等。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) AS cp3d, ST_AsEWKT(ST_ClosestPoint(poly, mline)) AS cp2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["POINT(40.45454545454545 53.63636363636364 5)", "POINT(20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2146, "question_en": "Find the closest spot among those number points and see how the 3D and 2D results look, like the distance from a polygon to several line segments, with numbers like 175 150 5 and 175 155 2, etc."}
{"id": 395, "function": "ST_3DClosestPoint", "question": "对于一个有点像空间里的多边形和那些线段，看看它们在三维和二维的时候，哪个点最靠近。记得用某种格式输出，分别叫做cp3d和cp2d。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) AS cp3d, ST_AsEWKT(ST_ClosestPoint(poly, mline)) AS cp2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["POINT(40.45454545454545 53.63636363636364 5)", "POINT(20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2143, "question_en": "For a polygon that seems to float in space and those lines, find out which points are closest in 3D and 2D. Remember to output them in some format, named cp3d and cp2d."}
{"id": 395, "function": "ST_3DClosestPoint", "question": "找找看那个三维的多边形和三维的多线之间，最靠近的小点在哪里，还有二维的也看看。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) AS cp3d, ST_AsEWKT(ST_ClosestPoint(poly, mline)) AS cp2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["POINT(40.45454545454545 53.63636363636364 5)", "POINT(20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2147, "question_en": "See if you can find the closest little point between that 3D polygon and the 3D multiline, and also check for the 2D one."}
{"id": 395, "function": "ST_3DClosestPoint", "question": "从一个有趣的三维形状POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))到一串三维线MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))之间，找出最靠近的小点，结果包括两个部分：三维和二维的特别格式。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) AS cp3d, ST_AsEWKT(ST_ClosestPoint(poly, mline)) AS cp2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["POINT(40.45454545454545 53.63636363636364 5)", "POINT(20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2145, "question_en": "From an interesting 3D shape POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)) to a string of 3D lines MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)), find the closest little point, with results including a special format for both 3D and 2D."}
{"id": 395, "function": "ST_3DClosestPoint", "question": "有一个立体的多边形和一堆线，像是天上的星星一样分布在空间里，坐标是(175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)和(175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1)。你能帮我找找在三维空间和二维平面上，谁离得最近吗？并用一种特别的格式告诉我，叫做EWKT，名字分别是cp3d和cp2d。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) AS cp3d, ST_AsEWKT(ST_ClosestPoint(poly, mline)) AS cp2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["POINT(40.45454545454545 53.63636363636364 5)", "POINT(20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2144, "question_en": "There's a 3D shape and some lines, like stars in the sky scattered in space, with coordinates (175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5) and (175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1). Can you help me find out who is the closest in the 3D world and on the 2D plane? And tell me in a special format called EWKT, named cp3d and cp2d."}
{"id": 396, "function": "ST_Distance", "question": "给出小点(-72.1235 42.3521)和那条连接线(-72.1260 42.45, -72.123 42.1546)之间的两个距离，一个像地球表面弯曲的，一个像球体表面简单的。", "sql": "SELECT ST_Distance(gg1, gg2) AS spheroid_dist, ST_Distance(gg1, gg2, false) AS sphere_dist FROM (SELECT 'SRID=4326;POINT(-72.1235 42.3521)'::geography AS gg1, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geography AS gg2) AS foo;", "execution_result": [[123.80207675, 123.47573692]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2151, "question_en": "Provide the two distances between the little dot (-72.1235 42.3521) and that connecting line (-72.1260 42.45, -72.123 42.1546), one as if bending over the Earth's surface, another as if on a simple sphere surface."}
{"id": 396, "function": "ST_Distance", "question": "在那个地球仪的坐标体系里，找出点和线之间的距离。点在(-72.1235 42.3521)的位置，而线从(-72.1260 42.45)到(-72.123 42.1546)延伸。要知道两种距离，一种是考虑地球的形状，另一种是忽略它的弯曲度。", "sql": "SELECT ST_Distance(gg1, gg2) AS spheroid_dist, ST_Distance(gg1, gg2, false) AS sphere_dist FROM (SELECT 'SRID=4326;POINT(-72.1235 42.3521)'::geography AS gg1, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geography AS gg2) AS foo;", "execution_result": [[123.80207675, 123.47573692]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2149, "question_en": "In that globe-like coordinate system, find the distance between a point and a line. The point is at (-72.1235 42.3521), and the line stretches from (-72.1260 42.45) to (-72.123 42.1546). You need to know two types of distances: one considering the earth's shape and one ignoring its curvature."}
{"id": 396, "function": "ST_Distance", "question": "在一个地理坐标系里面，看看那个点和那条线之间的距离是多少吧，坐标是点(-72.1235 42.3521)和线(-72.1260 42.45, -72.123 42.1546)。顺便，球体距离计算的时候不用椭球体模型哦。", "sql": "SELECT ST_Distance(gg1, gg2) AS spheroid_dist, ST_Distance(gg1, gg2, false) AS sphere_dist FROM (SELECT 'SRID=4326;POINT(-72.1235 42.3521)'::geography AS gg1, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geography AS gg2) AS foo;", "execution_result": [[123.80207675, 123.47573692]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2150, "question_en": "In a geographic coordinate system, let's see what the distance is between that point and that line, with coordinates being the point (-72.1235 42.3521) and the line (-72.1260 42.45, -72.123 42.1546). By the way, the sphere distance calculation doesn't use the spheroid model."}
{"id": 396, "function": "ST_Distance", "question": "找出在地球坐标系下，点(-72.1235 42.3521)和线(-72.1260 42.45, -72.123 42.1546)之间的两种距离，一个是像椭球那样算，一个是像球那样算，但要把椭球的影响去掉。", "sql": "SELECT ST_Distance(gg1, gg2) AS spheroid_dist, ST_Distance(gg1, gg2, false) AS sphere_dist FROM (SELECT 'SRID=4326;POINT(-72.1235 42.3521)'::geography AS gg1, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geography AS gg2) AS foo;", "execution_result": [[123.80207675, 123.47573692]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2152, "question_en": "Find the two types of distances between the point (-72.1235 42.3521) and the line (-72.1260 42.45, -72.123 42.1546) in the Earth's coordinate system, one calculated like an ellipsoid and the other like a sphere, but remove the ellipsoid's effect."}
{"id": 396, "function": "ST_Distance", "question": "在一个特别的坐标系统中，看看那个点在-72.1235和42.3521的位置，跟那条线从-72.1260到-72.123之间的距离，分别用一种考虑地球形状的方式和一种不考虑地球形状的简单方式。", "sql": "SELECT ST_Distance(gg1, gg2) AS spheroid_dist, ST_Distance(gg1, gg2, false) AS sphere_dist FROM (SELECT 'SRID=4326;POINT(-72.1235 42.3521)'::geography AS gg1, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geography AS gg2) AS foo;", "execution_result": [[123.80207675, 123.47573692]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2153, "question_en": "In a special coordinate system, check the distance between that point at -72.1235 and 42.3521 and that line from -72.1260 to -72.123, using both a method that considers Earth's shape and a simple way that doesn't."}
{"id": 397, "function": "ST_Distance", "question": "找出在这些坐标中，一个点(-72.1235 42.3521)到一条线(-72.1260 42.45, -72.123 42.1546)之间的最近距离是多少。", "sql": "SELECT ST_Distance( 'SRID=4326;POINT(-72.1235 42.3521)'::geometry, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry );", "execution_result": [[0.0015056772638228177]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2154, "question_en": "Find out what the closest distance is between a point (-72.1235 42.3521) and a line (-72.1260 42.45, -72.123 42.1546) among these coordinates."}
{"id": 397, "function": "ST_Distance", "question": "找出从那个点(-72.1235 42.3521)到连着两组坐标的线(-72.1260 42.45, -72.123 42.1546)之间的最短距离是多少。", "sql": "SELECT ST_Distance( 'SRID=4326;POINT(-72.1235 42.3521)'::geometry, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry );", "execution_result": [[0.0015056772638228177]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2157, "question_en": "Find out what the shortest distance is from that point (-72.1235 42.3521) to the line connecting two sets of coordinates (-72.1260 42.45, -72.123 42.1546)."}
{"id": 396, "function": "ST_Distance", "question": "你能帮我看一下从一个小点到一条线段之间的两种不同的地球上距离是多少吗？小点在(-72.1235, 42.3521)，线段有两个点，分别在(-72.1260, 42.45)和(-72.123, 42.1546)。", "sql": "SELECT ST_Distance(gg1, gg2) AS spheroid_dist, ST_Distance(gg1, gg2, false) AS sphere_dist FROM (SELECT 'SRID=4326;POINT(-72.1235 42.3521)'::geography AS gg1, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geography AS gg2) AS foo;", "execution_result": [[123.80207675, 123.47573692]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2148, "question_en": "Can you help me find out two different kinds of distances on the earth from a tiny point to a line segment? The tiny point is at (-72.1235, 42.3521), and the line segment has two points at (-72.1260, 42.45) and (-72.123, 42.1546)."}
{"id": 397, "function": "ST_Distance", "question": "测量一下从那个点在某个系统里的位置到一条连接两组坐标的线之间的距离吧，点的位置是(-72.1235 42.3521)，线上的坐标是(-72.1260 42.45)和(-72.123 42.1546)。", "sql": "SELECT ST_Distance( 'SRID=4326;POINT(-72.1235 42.3521)'::geometry, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry );", "execution_result": [[0.0015056772638228177]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2155, "question_en": "Measure the distance from that point in some system to a line connecting two sets of coordinates. The point is at (-72.1235 42.3521), and the line coordinates are (-72.1260 42.45) and (-72.123 42.1546)."}
{"id": 397, "function": "ST_Distance", "question": "找出在那些坐标里，点(-72.1235 42.3521)和曲线(-72.1260 42.45, -72.123 42.1546)之间的距离是多少。", "sql": "SELECT ST_Distance( 'SRID=4326;POINT(-72.1235 42.3521)'::geometry, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry );", "execution_result": [[0.0015056772638228177]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2156, "question_en": "Find out what the distance is between the point (-72.1235 42.3521) and the curve (-72.1260 42.45, -72.123 42.1546) in those coordinates."}
{"id": 397, "function": "ST_Distance", "question": "找出在WGS84里面的那个点(-72.1235 42.3521)与用那些坐标(-72.1260 42.45, -72.123 42.1546)画出来的线之间的距离，然后告诉我一个小数结果。", "sql": "SELECT ST_Distance( 'SRID=4326;POINT(-72.1235 42.3521)'::geometry, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry );", "execution_result": [[0.0015056772638228177]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2158, "question_en": "Find the distance between that point (-72.1235 42.3521) in WGS84 and the line drawn with those coordinates (-72.1260 42.45, -72.123 42.1546), then tell me the result as a decimal."}
{"id": 397, "function": "ST_Distance", "question": "找出那个位置比较靠近的距离，涉及一个点在(-72.1235 42.3521)和一条线从(-72.1260 42.45)到(-72.123 42.1546)，用小数表示出来。", "sql": "SELECT ST_Distance( 'SRID=4326;POINT(-72.1235 42.3521)'::geometry, 'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry );", "execution_result": [[0.0015056772638228177]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2159, "question_en": "Find the distance that is kind of close between a spot at (-72.1235 42.3521) and a line from (-72.1260 42.45) to (-72.123 42.1546), and show it as a decimal."}
{"id": 398, "function": "ST_Distance", "question": "找出在3857那个转换过的坐标系中，一个小点(-72.1235 42.3521)和一条线(-72.1260 42.45, -72.123 42.1546)之间的最近距离。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) );", "execution_result": [[167.44141006544473]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2160, "question_en": "Find the shortest distance between a little dot (-72.1235 42.3521) and a line (-72.1260 42.45, -72.123 42.1546) in that 3857 transformed coordinate system."}
{"id": 395, "function": "ST_3DClosestPoint", "question": "给定一个由(175 150 5)到(175 150 5)围成的区域，还有一些线段从(175 155 2)到(5 20 1)，找出它们在三维和二维上最近的小点，然后用某种特别的格式来展示。", "sql": "SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) AS cp3d, ST_AsEWKT(ST_ClosestPoint(poly, mline)) AS cp2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["POINT(40.45454545454545 53.63636363636364 5)", "POINT(20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2142, "question_en": "Given a region formed by points from (175 150 5) to (175 150 5), and some line segments from (175 155 2) to (5 20 1), find their closest little points in 3D and 2D, and display them in some special format."}
{"id": 398, "function": "ST_Distance", "question": "在那个投影系统里，看看那点(-72.1235 42.3521)和一串线(-72.1260 42.45, -72.123 42.1546)之间有多近，记得先把它们变成适合的样子哦。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) );", "execution_result": [[167.44141006544473]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2162, "question_en": "In that projection system, see how close that point (-72.1235 42.3521) is to a series of lines (-72.1260 42.45, -72.123 42.1546), remember to change them into the suitable form first."}
{"id": 398, "function": "ST_Distance", "question": "你能找出在某种地图投影下，一个点(-72.1235 42.3521)和一条折线(-72.1260 42.45, -72.123 42.1546)之间的直线距离吗？记得先把它们从原来的坐标系统转到新坐标系统。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) );", "execution_result": [[167.44141006544473]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2161, "question_en": "Can you figure out the straight-line distance between a point (-72.1235 42.3521) and a line (-72.1260 42.45, -72.123 42.1546) in a certain map projection? Remember to shift them from the original coordinate system to a new one first."}
{"id": 398, "function": "ST_Distance", "question": "想知道在那个全球地图的投影下，那个点的位置是(-72.1235 42.3521)，而那些线是(-72.1260 42.45, -72.123 42.1546)，它们之间的最近距离是多少呢？用米来表示哦。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) );", "execution_result": [[167.44141006544473]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2164, "question_en": "I wonder what the closest distance is between that point at (-72.1235 42.3521) and those lines at (-72.1260 42.45, -72.123 42.1546) in that global map projection. Can you show it in meters?"}
{"id": 399, "function": "ST_Distance", "question": "找出在某个不同坐标系下，一个小点和一条小线的距离是多少，然后乘以42.3521这个特殊角度的余弦。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) ) * cosd(42.3521);", "execution_result": [[123.74235125433476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2166, "question_en": "Find out the distance between a little dot and a small line in a different coordinate system, then multiply by the cosine of this special angle, 42.3521."}
{"id": 398, "function": "ST_Distance", "question": "想知道在转换为另一种地图投影后，一个点在(-72.1235 42.3521)和一条线在(-72.1260 42.45, -72.123 42.1546)之间的最短距离是多少？", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) );", "execution_result": [[167.44141006544473]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2165, "question_en": "Curious about the shortest distance between a point at (-72.1235 42.3521) and a line at (-72.1260 42.45, -72.123 42.1546) after switching them to another map projection?"}
{"id": 398, "function": "ST_Distance", "question": "在那个3857的系统里，找一下小点(-72.1235 42.3521)和那条线(-72.1260 42.45, -72.123 42.1546)之间的最短路径有多长，用米来表示。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) );", "execution_result": [[167.44141006544473]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2163, "question_en": "In that 3857 system, find out how long the shortest path is between the little dot (-72.1235 42.3521) and that line (-72.1260 42.45, -72.123 42.1546), expressed in meters."}
{"id": 399, "function": "ST_Distance", "question": "在某个地球仪投影下，看看点(-72.1235 42.3521)和一条折线(-72.1260 42.45, -72.123 42.1546)之间的距离是多少，然后用42.3521这个纬度的某个余弦值来调一下这个结果。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) ) * cosd(42.3521);", "execution_result": [[123.74235125433476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2167, "question_en": "In a kind of globe projection, check how far the point (-72.1235 42.3521) is from a line (-72.1260 42.45, -72.123 42.1546), then adjust this result using some cosine value of latitude 42.3521."}
{"id": 400, "function": "ST_Distance", "question": "在26986这个坐标系统里，那个小点(-72.1235 42.3521)到那条线(-72.1260 42.45, -72.123 42.1546)之间的最小间隔是多少呢？", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 26986), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 26986) );", "execution_result": [[123.79793787846343]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2172, "question_en": "In the 26986 coordinate system, what is the smallest gap between that little dot (-72.1235 42.3521) and that line (-72.1260 42.45, -72.123 42.1546)?"}
{"id": 399, "function": "ST_Distance", "question": "在那个投影系统里，找出从经度-72.1235和纬度42.3521的那个小点，到连接点(-72.1260 42.45)和点(-72.123 42.1546)那条线的距离，然后用42.3521的余弦值调整一下结果。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) ) * cosd(42.3521);", "execution_result": [[123.74235125433476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2171, "question_en": "In that projection system, find out the distance from the little dot at longitude -72.1235 and latitude 42.3521 to the line connecting point (-72.1260 42.45) and point (-72.123 42.1546), then adjust the result with the cosine of 42.3521."}
{"id": 399, "function": "ST_Distance", "question": "计算一下在那个投影坐标系里，从一个特别的点(-72.1235 42.3521)到一条连接两个位置(-72.1260 42.45和-72.123 42.1546)的线之间的距离，然后用42.3521的纬度的余弦值调整一下结果。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) ) * cosd(42.3521);", "execution_result": [[123.74235125433476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2170, "question_en": "Calculate the distance in that projection system from a special point (-72.1235 42.3521) to a line connecting two locations (-72.1260 42.45 and -72.123 42.1546), then adjust the result using the cosine of latitude 42.3521."}
{"id": 399, "function": "ST_Distance", "question": "在地图上，看看从小点(-72.1235 42.3521)到一条连接(-72.1260 42.45)和(-72.123 42.1546)的线，按42.3521这个高度的角度修正后的距离是多少。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) ) * cosd(42.3521);", "execution_result": [[123.74235125433476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2169, "question_en": "On a map, check how far it is from the little dot (-72.1235 42.3521) to a line that connects (-72.1260 42.45) and (-72.123 42.1546), with the distance adjusted for the angle at 42.3521 latitude."}
{"id": 400, "function": "ST_Distance", "question": "在地图上有一个小点，坐标是-72.1235和42.3521，还有一条线从-72.1260到42.45，再到-72.123和42.1546。把它们转到某个新的坐标系，看看它们之间的距离是多少。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 26986), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 26986) );", "execution_result": [[123.79793787846343]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2173, "question_en": "There's a little dot on the map with coordinates -72.1235 and 42.3521, and a line stretching from -72.1260 to 42.45, then to -72.123 and 42.1546. Transform them into a new coordinate system and see what the distance between them is."}
{"id": 399, "function": "ST_Distance", "question": "找出在某种地图投影下，一个小点(-72.1235, 42.3521)和一条折线(-72.1260, 42.45 到 -72.123, 42.1546)之间的弯曲距离，然后用42.3521这个纬度的一个数学值调整一下。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 3857), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 3857) ) * cosd(42.3521);", "execution_result": [[123.74235125433476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2168, "question_en": "Find out the curved distance between a little dot (-72.1235, 42.3521) and a polyline (-72.1260, 42.45 to -72.123, 42.1546) in some kind of map projection, then adjust it with a math value from latitude 42.3521."}
{"id": 400, "function": "ST_Distance", "question": "看看在一个特别的坐标系统中，那两个小点之间最短的距离是多少，一个点在(-72.1235 42.3521)，另一条线从(-72.1260 42.45)到(-72.123 42.1546)。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 26986), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 26986) );", "execution_result": [[123.79793787846343]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2174, "question_en": "In a special coordinate system, find out the shortest distance between those two little dots, with one at (-72.1235 42.3521) and the line going from (-72.1260 42.45) to (-72.123 42.1546)."}
{"id": 400, "function": "ST_Distance", "question": "找出在某种坐标系统下，一个小点(-72.1235 42.3521)和一条线(-72.1260 42.45, -72.123 42.1546)之间的距离，用小数来表示这个距离。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 26986), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 26986) );", "execution_result": [[123.79793787846343]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2176, "question_en": "Find the distance between a little dot (-72.1235 42.3521) and a line (-72.1260 42.45, -72.123 42.1546) in some coordinate system, express this distance as a decimal."}
{"id": 400, "function": "ST_Distance", "question": "找出在UTM 19N坐标系中，那个点的坐标是(-72.1235 42.3521)和一条线从(-72.1260 42.45)到(-72.123 42.1546)之间的实际距离是多少米。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 26986), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 26986) );", "execution_result": [[123.79793787846343]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2175, "question_en": "Find out the actual distance in meters in UTM zone 19N between that point with coordinates (-72.1235 42.3521) and a line going from (-72.1260 42.45) to (-72.123 42.1546)."}
{"id": 400, "function": "ST_Distance", "question": "你能算出在转换成26986坐标系后，那个在-72.1235 42.3521的小点和从-72.1260 42.45到-72.123 42.1546的那些连线之间的间隔是多少吗？结果用小数表示哦。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 26986), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 26986) );", "execution_result": [[123.79793787846343]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2177, "question_en": "Can you figure out the gap between that little spot at -72.1235 42.3521 and those connecting lines from -72.1260 42.45 to -72.123 42.1546 after changing to the 26986 coordinate system? The result should be a decimal number."}
{"id": 401, "function": "ST_Distance", "question": "你能算一下在一个特别的坐标系里，从一个小点在(-72.1235, 42.3521)到一条线从(-72.1260, 42.45)到(-72.123, 42.1546)的距离吗？", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 2163) );", "execution_result": [[126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2178, "question_en": "Can you figure out the distance in a special coordinate system from a little dot at (-72.1235, 42.3521) to a line going from (-72.1260, 42.45) to (-72.123, 42.1546)?"}
{"id": 401, "function": "ST_Distance", "question": "你能算一下在某个特别的坐标系统里，一个小点(-72.1235 42.3521)和一条由两段组成的线(-72.1260 42.45到-72.123 42.1546)之间的距离吗？", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 2163) );", "execution_result": [[126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2180, "question_en": "Can you figure out the distance in a special coordinate system between a little dot (-72.1235 42.3521) and a line made of two parts (-72.1260 42.45 to -72.123 42.1546)?"}
{"id": 401, "function": "ST_Distance", "question": "在那个2163坐标系统里，找出从小点(-72.1235 42.3521)到一串曲线(-72.1260 42.45, -72.123 42.1546)的距离是多少。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 2163) );", "execution_result": [[126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2181, "question_en": "In that 2163 coordinate system, figure out the distance from the little dot (-72.1235 42.3521) to a series of curves (-72.1260 42.45, -72.123 42.1546)."}
{"id": 401, "function": "ST_Distance", "question": "在一个特别的坐标系统下，找出那个点(-72.1235 42.3521)和由两段组成的线(-72.1260 42.45到-72.123 42.1546)之间的直线距离。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 2163) );", "execution_result": [[126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2179, "question_en": "In a special coordinate system, find the straight-line distance between that point (-72.1235 42.3521) and the line made of two segments from (-72.1260 42.45 to -72.123 42.1546)."}
{"id": 401, "function": "ST_Distance", "question": "计算在2163坐标系中，一个小点(-72.1235 42.3521)与一条连接两点的线(-72.1260 42.45, -72.123 42.1546)之间的距离，并以距离为列名。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 2163) ) AS distance_in_meters;", "execution_result": [[126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2182, "question_en": "Calculate the distance between a little dot at (-72.1235 42.3521) and a line connecting two points (-72.1260 42.45, -72.123 42.1546) in the 2163 coordinate system, using the distance as the column name."}
{"id": 401, "function": "ST_Distance", "question": "在一个不同的系统里，测量从小点(-72.1235 42.3521)到一条长长的线(-72.1260 42.45, -72.123 42.1546)的距离，结果要用小数表示哦。", "sql": "SELECT ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry, 2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry, 2163) );", "execution_result": [[126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2183, "question_en": "In a different system, measure the distance from a small dot (-72.1235 42.3521) to a long line (-72.1260 42.45, -72.123 42.1546), and make sure the result is shown as a decimal."}
{"id": 402, "function": "ST_3DDistance", "question": "找出那个多边形和那些线段在三维和二维里的距离是多少，分别叫它们dist3d和dist2d，涉及的点有175 150 5到1 10 2之类的。", "sql": "SELECT ST_3DDistance(poly, mline) AS dist3d, ST_Distance(poly, mline) AS dist2d \nFROM (SELECT 'POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))'::geometry AS poly, 'MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))'::geometry AS mline) AS foo;", "execution_result": [[0.0, 0.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2186, "question_en": "Find out how far that polygon and those line segments are in 3D and 2D, and call them dist3d and dist2d, with points like 175 150 5 to 1 10 2 involved."}
{"id": 402, "function": "ST_3DDistance", "question": "找出由这些坐标点构成的形状和那些线条之间在上下左右以及前后距离的差别。", "sql": "SELECT ST_3DDistance(poly, mline) AS dist3d, ST_Distance(poly, mline) AS dist2d \nFROM (SELECT 'POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))'::geometry AS poly, 'MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))'::geometry AS mline) AS foo;", "execution_result": [[0.0, 0.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2184, "question_en": "Find the difference in distances between the shape formed by these coordinates and those lines, both horizontally and vertically, as well as front and back."}
{"id": 402, "function": "ST_3DDistance", "question": "请找出那个包含了175 150 5和其他坐标的三维形状与一些连接了多个点的三维线之间的距离，分别看看在三维和二维的计算结果。", "sql": "SELECT ST_3DDistance(poly, mline) AS dist3d, ST_Distance(poly, mline) AS dist2d \nFROM (SELECT 'POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))'::geometry AS poly, 'MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))'::geometry AS mline) AS foo;", "execution_result": [[0.0, 0.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2189, "question_en": "Please find the distance between that 3D shape covering 175 150 5 and other coordinates and some lines connecting multiple points, and look at the results in both 3D and 2D."}
{"id": 402, "function": "ST_3DDistance", "question": "对于一个三维的多边形和一组线条，像是这些坐标(175 150 5, 20 40 5...)和(175 155 2, 20 40 20...)，需要找出它们之间的两种距离，分别是空间里的距离和平面上的距离。", "sql": "SELECT ST_3DDistance(poly, mline) AS dist3d, ST_Distance(poly, mline) AS dist2d \nFROM (SELECT 'POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))'::geometry AS poly, 'MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))'::geometry AS mline) AS foo;", "execution_result": [[0.0, 0.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2188, "question_en": "For a 3D shape and a bunch of lines, like these coordinates (175 150 5, 20 40 5...) and (175 155 2, 20 40 20...), you need to find two types of distances between them, one in space and the other on a flat surface."}
{"id": 403, "function": "ST_3DDistance", "question": "在特殊的2163系统中，找出一个三维的点和一条三维的线之间的距离，点和线有些奇特数字，比如(-72.1235 42.3521 4)和(-72.1260 42.45 15, -72.123 42.1546 20)。另外，也计算一个平面上的点和线之间的距离，记得那些数字哦，比如(-72.1235 42.3521)和(-72.1260 42.45, -72.123 42.1546)。", "sql": "SELECT ST_3DDistance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521 4)'::geometry,2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'::geometry,2163) ) AS dist_3d,  ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry,2163),  ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry,2163) ) AS dist_2d;", "execution_result": [[127.29505932513318, 126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2192, "question_en": "In the special 2163 system, find the distance between a 3D point and a 3D line, with some peculiar numbers like (-72.1235 42.3521 4) and (-72.1260 42.45 15, -72.123 42.1546 20). Also, calculate the distance between a point and line on a flat surface, remember those numbers like (-72.1235 42.3521) and (-72.1260 42.45, -72.123 42.1546)."}
{"id": 403, "function": "ST_3DDistance", "question": "试着找出从一个小点到一长串小点的三维间隔，记得是这些坐标：(-72.1235, 42.3521, 4)和(-72.1260, 42.45, 15, -72.123, 42.1546, 20)，叫它dist_3d；然后再看看它们在平面上怎么隔开，(-72.1235, 42.3521)和(-72.1260, 42.45, -72.123, 42.1546)，叫它dist_2d。", "sql": "SELECT ST_3DDistance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521 4)'::geometry,2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'::geometry,2163) ) AS dist_3d,  ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry,2163),  ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry,2163) ) AS dist_2d;", "execution_result": [[127.29505932513318, 126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2191, "question_en": "Try to figure out the 3D gap from a tiny dot to a string of tiny dots, remember these coordinates: (-72.1235, 42.3521, 4) and (-72.1260, 42.45, 15, -72.123, 42.1546, 20), name it dist_3d; then see how they separate on a flat surface, (-72.1235, 42.3521) and (-72.1260, 42.45, -72.123, 42.1546), call it dist_2d."}
{"id": 402, "function": "ST_3DDistance", "question": "请找出由这些点组成的立体形状和那些线段之间的具体远近，分别从三维和二维角度来看。点和线的坐标分别是(175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5)以及(175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1)和(1 10 2, 5 20 1)。", "sql": "SELECT ST_3DDistance(poly, mline) AS dist3d, ST_Distance(poly, mline) AS dist2d \nFROM (SELECT 'POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))'::geometry AS poly, 'MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))'::geometry AS mline) AS foo;", "execution_result": [[0.0, 0.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2187, "question_en": "Please find out how far the 3D shape made of these points and those lines are from each other, both in 3D and 2D perspectives. The points and lines have coordinates (175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5) and (175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1) and (1 10 2, 5 20 1), respectively."}
{"id": 403, "function": "ST_3DDistance", "question": "在2163这个地方，算一下小点(-72.1235 42.3521 4)和那条线(-72.1260 42.45 15, -72.123 42.1546 20)之间的立体距离，还有小点(-72.1235 42.3521)和那条线(-72.1260 42.45, -72.123 42.1546)之间的平面距离，结果叫做dist_3d和dist_2d。", "sql": "SELECT ST_3DDistance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521 4)'::geometry,2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'::geometry,2163) ) AS dist_3d,  ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry,2163),  ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry,2163) ) AS dist_2d;", "execution_result": [[127.29505932513318, 126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2190, "question_en": "In the area of 2163, work out the spatial gap between the little point (-72.1235 42.3521 4) and that line (-72.1260 42.45 15, -72.123 42.1546 20), along with the flat gap between the little point (-72.1235 42.3521) and that line (-72.1260 42.45, -72.123 42.1546), naming the results dist_3d and dist_2d."}
{"id": 402, "function": "ST_3DDistance", "question": "找出那个围住点的形状和那些线条之间的距离是多少，记得从上面看和从侧面看都要算哦。形状和线条有这些坐标：175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5，还有175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1, 1 10 2, 5 20 1。", "sql": "SELECT ST_3DDistance(poly, mline) AS dist3d, ST_Distance(poly, mline) AS dist2d \nFROM (SELECT 'POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))'::geometry AS poly, 'MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))'::geometry AS mline) AS foo;", "execution_result": [[0.0, 0.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2185, "question_en": "Find out the distance between that shape which covers the points and those lines, and remember to calculate both from above and from the side. The shape and lines have these coordinates: 175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5, and 175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1, 1 10 2, 5 20 1."}
{"id": 403, "function": "ST_3DDistance", "question": "求两种距离：一个是立体空间中的距离，涉及到小点(-72.1235 42.3521 4)和一长串线条(-72.1260 42.45 15, -72.123 42.1546 20)在某种坐标环境下的间隔；另一个是平面上的距离，仍然是那个小点(-72.1235 42.3521)和那条线(-72.1260 42.45, -72.123 42.1546)之间的距离。", "sql": "SELECT ST_3DDistance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521 4)'::geometry,2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'::geometry,2163) ) AS dist_3d,  ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry,2163),  ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry,2163) ) AS dist_2d;", "execution_result": [[127.29505932513318, 126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2193, "question_en": "Find two kinds of distances: one is in the 3D space involving the little point (-72.1235 42.3521 4) and a long line (-72.1260 42.45 15, -72.123 42.1546 20) in some coordinate setting; the other is the planar distance between that same point (-72.1235 42.3521) and the line (-72.1260 42.45, -72.123 42.1546)."}
{"id": 403, "function": "ST_3DDistance", "question": "想知道在一个特别的坐标系统里，一个有点高的点(-72.1235 42.3521 4)和一条有点高的线(-72.1260 42.45 15, -72.123 42.1546 20)之间的空间距离吗？还有，同样的平面上，那些数字代表的点和线之间的平面距离是多少呢？", "sql": "SELECT ST_3DDistance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521 4)'::geometry,2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'::geometry,2163) ) AS dist_3d,  ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry,2163),  ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry,2163) ) AS dist_2d;", "execution_result": [[127.29505932513318, 126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2194, "question_en": "Curious about the space between a somewhat elevated dot (-72.1235 42.3521 4) and a slightly raised line (-72.1260 42.45 15, -72.123 42.1546 20) in a special coordinate system? Also, what's the flat distance between those numbers representing a dot and a line on the same plane?"}
{"id": 404, "function": "ST_DistanceSphere", "question": "试着找出那些曲线的中央小点到某个位置(-118 38)之间的多种距离吧，像是球面上的、某个投影下的，还有角度上的距离，再看看这个曲线距离那个点最短的有多远。", "sql": "SELECT round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters, \nround(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters, \nround(CAST(ST_Distance(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)', 4326)) AS numeric),5) AS dist_degrees, \nround(CAST(ST_Distance(ST_Transform(geom,32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS min_dist_line_point_meters\n FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70424.71", "70438.00", "0.72900", "65871.18"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2196, "question_en": "Try to figure out various distances from the central little dot of that curve to a certain spot (-118 38), like on the sphere, under some projection, and also angular distance, then see how short the curve gets to that point."}
{"id": 404, "function": "ST_DistanceSphere", "question": "看看那条连着两个地方的线，找出它的中心点和另一个点(-118 38)之间的四种距离。第一种是地球表面上的距离，第二种是把它们都变成某个特别区域里的坐标后测量的平面距离，第三种是用地球坐标系算出来的角度距离，最后一种是把这条线和那个点都转到同一个区域后测的最短距离。记得保留一些小数位哦。", "sql": "SELECT round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters, \nround(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters, \nround(CAST(ST_Distance(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)', 4326)) AS numeric),5) AS dist_degrees, \nround(CAST(ST_Distance(ST_Transform(geom,32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS min_dist_line_point_meters\n FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70424.71", "70438.00", "0.72900", "65871.18"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2198, "question_en": "Check out the line connecting two spots, find four types of distances between its center and another point (-118 38). The first is the distance on Earth's surface, the second is the planar distance after converting them to a special zone's coordinates, the third is the angular distance using Earth's coordinate system, and the last is the shortest distance after converting the line and point to the same zone. Remember to keep some decimal places."}
{"id": 404, "function": "ST_DistanceSphere", "question": "给出一条从-118.584 38.374到-118.583 38.5的线和一个-118 38的小点之间的四种距离测量结果。线的中心到点的距离有球面和UTM两种，保留2位小数。还有线的中心到点的角度距离，保留5位小数，以及线本身到点的最短距离，保留2位小数。", "sql": "SELECT round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters, \nround(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters, \nround(CAST(ST_Distance(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)', 4326)) AS numeric),5) AS dist_degrees, \nround(CAST(ST_Distance(ST_Transform(geom,32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS min_dist_line_point_meters\n FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70424.71", "70438.00", "0.72900", "65871.18"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2199, "question_en": "Provide four types of distance measurements between a line from -118.584 38.374 to -118.583 38.5 and a little point at -118 38. The distances from the line's center to the point are spherical and UTM, rounded to 2 decimal places. Also, the angular distance from the line's center to the point, rounded to 5 decimal places, and the shortest distance from the line itself to the point, rounded to 2 decimal places."}
{"id": 403, "function": "ST_3DDistance", "question": "看看在2163这个特别的坐标世界里，那个三维小点(-72.1235 42.3521 4)和那条三维小线(-72.1260 42.45 15, -72.123 42.1546 20)之间的空间距离是多少，同时也看看二维小点(-72.1235 42.3521)和二维小线(-72.1260 42.45, -72.123 42.1546)之间的平面距离是多少。", "sql": "SELECT ST_3DDistance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521 4)'::geometry,2163), ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'::geometry,2163) ) AS dist_3d,  ST_Distance( ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::geometry,2163),  ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geometry,2163) ) AS dist_2d;", "execution_result": [[127.29505932513318, 126.66425605743328]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2195, "question_en": "In the special coordinate world of 2163, check how far the 3D little point (-72.1235 42.3521 4) is from the 3D little line (-72.1260 42.45 15, -72.123 42.1546 20) in space, and also see the flat distance between the 2D little point (-72.1235 42.3521) and the 2D little line (-72.1260 42.45, -72.123 42.1546)."}
{"id": 404, "function": "ST_DistanceSphere", "question": "对于那条从(-118.584, 38.374)到(-118.583, 38.5)的小线段，看看它的中心位置和(-118, 38)这个点之间有多远，用三种不同的方法算：一种是地球上的弧度距离（米），一种是用某个神秘区域的平面距离（米），还有一种是原始地方的角度距离（度）。最后再看看整个小线段到这个点之间最短的直线距离是多少（米）。", "sql": "SELECT round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters, \nround(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters, \nround(CAST(ST_Distance(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)', 4326)) AS numeric),5) AS dist_degrees, \nround(CAST(ST_Distance(ST_Transform(geom,32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS min_dist_line_point_meters\n FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70424.71", "70438.00", "0.72900", "65871.18"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2197, "question_en": "For that little line from (-118.584, 38.374) to (-118.583, 38.5), see how far its middle spot is from the point (-118, 38) using three different ways: one is the curved distance on the globe (meters), another is some mysterious area's flat distance (meters), and the last one is the angle distance from the original place (degrees). Finally, find out the shortest straight line distance from the whole little line to this point (meters)."}
{"id": 404, "function": "ST_DistanceSphere", "question": "对于那条从(-118.584 38.374)到(-118.583 38.5)的线和那个点(-118 38)，你能给我算出四种距离吗？包括像球形距离、投影距离、角度距离，还有线到点的最短距离，记得用2位或5位小数哦。", "sql": "SELECT round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters, \nround(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters, \nround(CAST(ST_Distance(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)', 4326)) AS numeric),5) AS dist_degrees, \nround(CAST(ST_Distance(ST_Transform(geom,32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS min_dist_line_point_meters\n FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70424.71", "70438.00", "0.72900", "65871.18"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2200, "question_en": "For that line from (-118.584 38.374) to (-118.583 38.5) and that point (-118 38), can you figure out four types of distances? Including things like spherical distance, projected distance, angular distance, and the shortest distance from the line to the point, remember to use 2 or 5 decimal places."}
{"id": 405, "function": "ST_DistanceSpheroid", "question": "对于从一条小线的中心靠近到一个小点(-118 38)，你能找到三种不同的距离吗？就像用地球的形状、地球模型，还有一种平面投影方法计算出来的距离，记得保留两位小数。", "sql": "SELECT round(CAST( ST_DistanceSpheroid(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326), 'SPHEROID[\"WGS 84\",6378137,298.257223563]') AS numeric),2) AS dist_meters_spheroid, round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters_sphere, round(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70454.92", "70424.71", "70438.00"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2202, "question_en": "For getting closer from the center of a little line to a small point (-118 38), can you find three different distances? Like those calculated using the shape of the Earth, a spherical model, and a kind of flat projection method, remember to keep two decimal places."}
{"id": 405, "function": "ST_DistanceSpheroid", "question": "给那条从(-118.584, 38.374)到(-118.583, 38.5)的小线，找它的中间点，看看它到(-118, 38)这个点的距离有多长，用三个不同的方法，一个是有些复杂的地球模型，一个是简单的圆球，还有一个是11号区域的平面方式。", "sql": "SELECT round(CAST( ST_DistanceSpheroid(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326), 'SPHEROID[\"WGS 84\",6378137,298.257223563]') AS numeric),2) AS dist_meters_spheroid, round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters_sphere, round(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70454.92", "70424.71", "70438.00"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2203, "question_en": "For that little line stretching from (-118.584, 38.374) to (-118.583, 38.5), find its middle spot and see how far it is from the point (-118, 38) using three different ways: one is a somewhat complex earth model, another is a simple sphere, and the last one is a flat method for area 11."}
{"id": 406, "function": "ST_FrechetDistance", "question": "找出那两条线LINESTRING (0 0, 100 0)和LINESTRING (0 0, 50 50, 100 0)，用一个中间点比例为0.5的小技巧来看看它们之间的距离有多远。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry, 0.5);", "execution_result": [[50.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2208, "question_en": "Find out how far apart those two lines, LINESTRING (0 0, 100 0) and LINESTRING (0 0, 50 50, 100 0), are using a little trick with a middle point ratio of 0.5."}
{"id": 405, "function": "ST_DistanceSpheroid", "question": "给我从那条连接点(-118.584 38.374)到(-118.583 38.5)的线的中心，量到点(-118 38)的三个不同距离值，记得要保留两位小数哦！", "sql": "SELECT round(CAST( ST_DistanceSpheroid(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326), 'SPHEROID[\"WGS 84\",6378137,298.257223563]') AS numeric),2) AS dist_meters_spheroid, round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters_sphere, round(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70454.92", "70424.71", "70438.00"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2206, "question_en": "Give me the three different distance values from the center of the line connecting points (-118.584 38.374) to (-118.583 38.5) to the point (-118 38), and remember to keep two decimal places!"}
{"id": 405, "function": "ST_DistanceSpheroid", "question": "计算一下从那些坐标的中心到点(-118 38)的三种距离吧，记得用两个小数点哦，包括用地球模型的距离，还有大概的球形距离，还有在某个平面系统下的距离，分别叫做dist_meters_spheroid、dist_meters_sphere和dist_utm11_meters。", "sql": "SELECT round(CAST( ST_DistanceSpheroid(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326), 'SPHEROID[\"WGS 84\",6378137,298.257223563]') AS numeric),2) AS dist_meters_spheroid, round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters_sphere, round(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70454.92", "70424.71", "70438.00"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2207, "question_en": "Calculate three types of distances from the center of those coordinates to point (-118 38), remember to use two decimal points, including using the earth model distance, the approximate spherical distance, and the distance in a certain flat system, named dist_meters_spheroid, dist_meters_sphere, and dist_utm11_meters."}
{"id": 405, "function": "ST_DistanceSpheroid", "question": "从一条连接小点的中心出发，想知道它到另一个点(-118 38)的几种走法的长度，比如用一个特别的地球模型量的长度、用普通球体量的长度，还有一种地图上的平面长度。记得这些长度要有两个小数点哦。", "sql": "SELECT round(CAST( ST_DistanceSpheroid(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326), 'SPHEROID[\"WGS 84\",6378137,298.257223563]') AS numeric),2) AS dist_meters_spheroid, round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters_sphere, round(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70454.92", "70424.71", "70438.00"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2205, "question_en": "Starting from the center of a line connecting little dots, find out the lengths of different paths to another point (-118 38), like the length using a special earth model, the length using an ordinary sphere, and a flat map length. Remember, these lengths should have two decimal places."}
{"id": 406, "function": "ST_FrechetDistance", "question": "想知道两条弯弯的线，一个是从(0 0)到(100 0)，另一个是从(0 0)到(50 50)再到(100 0)，它们之间的距离是多少，记得用0.5的那个参数哦。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry, 0.5);", "execution_result": [[50.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2209, "question_en": "Wonder what the distance is between two wavy lines, one from (0 0) to (100 0), the other from (0 0) to (50 50) to (100 0), and don't forget to use that 0.5 parameter."}
{"id": 404, "function": "ST_DistanceSphere", "question": "帮我找出一些距离，这里有一条从(-118.584, 38.374)到(-118.583, 38.5)的线和一个点(-118, 38)。需要知道它们的球面距离、平面距离、角度距离和最短距离，分别保留两位或五位小数。", "sql": "SELECT round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters, \nround(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters, \nround(CAST(ST_Distance(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)', 4326)) AS numeric),5) AS dist_degrees, \nround(CAST(ST_Distance(ST_Transform(geom,32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS min_dist_line_point_meters\n FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70424.71", "70438.00", "0.72900", "65871.18"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2201, "question_en": "Help me figure out some distances. There's a line running from (-118.584, 38.374) to (-118.583, 38.5) and a point at (-118, 38). I need to know their spherical distance, planar distance, angular distance, and shortest distance, keeping two or five decimal places."}
{"id": 406, "function": "ST_FrechetDistance", "question": "找出两条路径之间的距离吧，一条是从(0 0)到(100 0)的直线，另一条从(0 0)经过(50 50)再到(100 0)。还有个参数是0.5哦，不要忘记它。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry, 0.5);", "execution_result": [[50.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2210, "question_en": "Find the distance between two paths, one is a straight line from (0 0) to (100 0), and the other goes from (0 0) through (50 50) to (100 0). There's also a parameter 0.5, don't forget it."}
{"id": 407, "function": "ST_FrechetDistance", "question": "找出那两条从(0, 0)到(100, 0)和从(0, 0)经过(50, 50)到(100, 0)的折线之间的某种距离。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry);", "execution_result": [[70.71067811865476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2214, "question_en": "Find some kind of distance between those two lines, one going from (0, 0) to (100, 0) and another from (0, 0) through (50, 50) to (100, 0)."}
{"id": 407, "function": "ST_FrechetDistance", "question": "看看从(0 0)到(100 0)的那条线，与从(0 0)经过(50 50)到(100 0)的那条线，它们之间的走法差异有多大？", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry);", "execution_result": [[70.71067811865476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2215, "question_en": "Check how different the paths are between the line from (0 0) to (100 0) and the one from (0 0) passing through (50 50) to (100 0)?"}
{"id": 406, "function": "ST_FrechetDistance", "question": "求出两条弯曲的线，LINESTRING (0 0, 100 0)和LINESTRING (0 0, 50 50, 100 0)，在某种程度的密集度0.5下，它们之间的那个特别的距离值。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry, 0.5);", "execution_result": [[50.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2211, "question_en": "Find the special distance value between two curvy lines, LINESTRING (0 0, 100 0) and LINESTRING (0 0, 50 50, 100 0), under a certain level of density, 0.5."}
{"id": 407, "function": "ST_FrechetDistance", "question": "看看从点(0 0)到点(100 0)的一条直线和从点(0 0)经过点(50 50)再到点(100 0)的一条折线，它们之间的距离有多远。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry);", "execution_result": [[70.71067811865476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2216, "question_en": "Check how far apart a straight line from point (0 0) to point (100 0) and a zigzag line from point (0 0) through point (50 50) to point (100 0) are."}
{"id": 407, "function": "ST_FrechetDistance", "question": "找一下两条线的距离，就是从(0, 0)到(100, 0)那条线，还有从(0, 0)到(50, 50)再到(100, 0)那条线之间的特殊数值是什么。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry);", "execution_result": [[70.71067811865476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2217, "question_en": "Find the special value of distance between two lines, one going from (0, 0) to (100, 0), and the other going from (0, 0) to (50, 50) and then to (100, 0)."}
{"id": 406, "function": "ST_FrechetDistance", "question": "计算两条折线之间的那种距离，第一条从(0, 0)到(100, 0)，第二条从(0, 0)到(50, 50)再到(100, 0)，记得用0.5来处理那些段落的间隔。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry, 0.5);", "execution_result": [[50.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2213, "question_en": "Calculate the kind of distance between two lines, the first one goes from (0, 0) to (100, 0), and the second one from (0, 0) to (50, 50) then to (100, 0), remember to use 0.5 for handling those segment gaps."}
{"id": 407, "function": "ST_FrechetDistance", "question": "找一下两条曲线，第一条从(0 0)到(100 0)，第二条从(0 0)经过(50 50)到(100 0)，它们之间的某种距离是多少？", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry);", "execution_result": [[70.71067811865476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2219, "question_en": "Find out some kind of distance between two curves, the first one going from (0 0) to (100 0), and the second one from (0 0) passing through (50 50) to (100 0)."}
{"id": 407, "function": "ST_FrechetDistance", "question": "找出从(0 0)到(100 0)的那条线和从(0 0)经过(50 50)再到(100 0)的那条线之间的某种距离的数值。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry);", "execution_result": [[70.71067811865476]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2218, "question_en": "Find the numerical value of some kind of distance between the line from (0 0) to (100 0) and the line from (0 0) through (50 50) to (100 0)."}
{"id": 406, "function": "ST_FrechetDistance", "question": "在两条线之间找一种距离感，让它们像手牵手那样走，坐标是(0 0, 100 0)和(0 0, 50 50, 100 0)，并考虑一种细腻程度为0.5的方式。最后，给我一个数字结果。", "sql": "SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING (0 0, 50 50, 100 0)'::geometry, 0.5);", "execution_result": [[50.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2212, "question_en": "Find a sense of distance between two lines, as if they were walking hand in hand, with coordinates (0 0, 100 0) and (0 0, 50 50, 100 0), and consider a delicacy level of 0.5. Finally, give me a numeric result."}
{"id": 408, "function": "ST_HausdorffDistance", "question": "找出那两条由点组成的长线之间的最大离开程度，记得用0.5来调节它的密度。", "sql": "SELECT ST_HausdorffDistance( 'LINESTRING (130 0, 0 0, 0 150)'::geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);", "execution_result": [[70.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2220, "question_en": "Find out the greatest extent of separation between those two long lines made of points, and remember to adjust its density with 0.5."}
{"id": 408, "function": "ST_HausdorffDistance", "question": "找出那两条线段，一个从(130 0)到(0 0)再到(0 150)，另一个从(10 10)到(10 150)再到(130 10)，它们之间有多远，如果你考虑到0.5的那种靠近程度。", "sql": "SELECT ST_HausdorffDistance( 'LINESTRING (130 0, 0 0, 0 150)'::geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);", "execution_result": [[70.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2222, "question_en": "Find out how far apart those two lines are, one going from (130 0) to (0 0) to (0 150) and the other from (10 10) to (10 150) to (130 10), if you think about closeness at a level of 0.5."}
{"id": 408, "function": "ST_HausdorffDistance", "question": "在用0.5这个密度测量时，找出两条曲线(130 0, 0 0, 0 150)和(10 10, 10 150, 130 10)之间最远的距离是多少。", "sql": "SELECT ST_HausdorffDistance( 'LINESTRING (130 0, 0 0, 0 150)'::geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);", "execution_result": [[70.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2223, "question_en": "When measuring with a density of 0.5, find out what the furthest distance is between the two curves (130 0, 0 0, 0 150) and (10 10, 10 150, 130 10)."}
{"id": 408, "function": "ST_HausdorffDistance", "question": "你能看看那些由点(130,0)、(0,0)、(0,150)和点(10,10)、(10,150)、(130,10)组成的两条线，找出它们之间的最远距离吗？记得用那个0.5的密度哦。", "sql": "SELECT ST_HausdorffDistance( 'LINESTRING (130 0, 0 0, 0 150)'::geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);", "execution_result": [[70.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2221, "question_en": "Could you take a look at those lines made from points (130,0), (0,0), (0,150) and points (10,10), (10,150), (130,10), and find the farthest distance between them? Remember to use the 0.5 density."}
{"id": 408, "function": "ST_HausdorffDistance", "question": "想知道两条线之间的最大接近距离是多少？一条是从(130 0)到(0 150)的弯弯曲曲的线，另一条从(10 10)到(130 10)也是弯的，密度好像是0.5，结果是个小数。", "sql": "SELECT ST_HausdorffDistance( 'LINESTRING (130 0, 0 0, 0 150)'::geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);", "execution_result": [[70.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2224, "question_en": "Curious about the greatest closeness between two wiggly lines? One stretches from (130 0) to (0 150), and the other from (10 10) to (130 10), with a density of 0.5, and the answer is a decimal number."}
{"id": 409, "function": "ST_HausdorffDistance", "question": "看看这两条折线，第一条从(20 70)到(170 70)，而另一条从(20 90)到(190 100)，想知道它们之间的最大和最小距离是多少。", "sql": "SELECT ST_HausdorffDistance(geomA, geomB), ST_Distance(geomA, geomB) FROM (SELECT 'LINESTRING (20 70, 70 60, 110 70, 170 70)'::geometry AS geomA, 'LINESTRING (20 90, 130 90, 60 100, 190 100)'::geometry AS geomB) AS t;", "execution_result": [[37.26206567625497, 20.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2226, "question_en": "Take a look at these two zigzag lines, the first one goes from (20 70) to (170 70), and the other from (20 90) to (190 100). What are the biggest and smallest distances between them?"}
{"id": 409, "function": "ST_HausdorffDistance", "question": "找出由这些点(20 70,70 60,110 70,170 70)和(20 90,130 90,60 100,190 100)组成的两条线之间的最远和最近的距离。", "sql": "SELECT ST_HausdorffDistance(geomA, geomB), ST_Distance(geomA, geomB) FROM (SELECT 'LINESTRING (20 70, 70 60, 110 70, 170 70)'::geometry AS geomA, 'LINESTRING (20 90, 130 90, 60 100, 190 100)'::geometry AS geomB) AS t;", "execution_result": [[37.26206567625497, 20.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2227, "question_en": "Find the farthest and nearest distance between the two lines made by these points (20 70,70 60,110 70,170 70) and (20 90,130 90,60 100,190 100)."}
{"id": 409, "function": "ST_HausdorffDistance", "question": "想象一下两条由这些点串成的线：一个是从(20, 70)到(170, 70)，另一个是从(20, 90)到(190, 100)。你能找出这两条线之间的最大距离和直接距离吗？", "sql": "SELECT ST_HausdorffDistance(geomA, geomB), ST_Distance(geomA, geomB) FROM (SELECT 'LINESTRING (20 70, 70 60, 110 70, 170 70)'::geometry AS geomA, 'LINESTRING (20 90, 130 90, 60 100, 190 100)'::geometry AS geomB) AS t;", "execution_result": [[37.26206567625497, 20.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2228, "question_en": "Imagine two lines made from these points: one goes from (20, 70) to (170, 70), and the other from (20, 90) to (190, 100). Can you figure out the maximum distance and the direct distance between these two lines?"}
{"id": 408, "function": "ST_HausdorffDistance", "question": "想知道在那些连接了(130 0), (0 0), (0 150)和(10 10), (10 150), (130 10)的小路中，最远的两点之间距离是多少？用0.5作为密度来算哦，结果要用双精度数表示。", "sql": "SELECT ST_HausdorffDistance( 'LINESTRING (130 0, 0 0, 0 150)'::geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);", "execution_result": [[70.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2225, "question_en": "I’m curious about the longest distance between two points on those paths connecting (130 0), (0 0), (0 150) and (10 10), (10 150), (130 10). Use 0.5 as the density for calculation, and the result should be a double-precision number."}
{"id": 409, "function": "ST_HausdorffDistance", "question": "找出连接点串(20 70,70 60,110 70,170 70)和另一串(20 90,130 90,60 100,190 100)之间的最大和最小距离。", "sql": "SELECT ST_HausdorffDistance(geomA, geomB), ST_Distance(geomA, geomB) FROM (SELECT 'LINESTRING (20 70, 70 60, 110 70, 170 70)'::geometry AS geomA, 'LINESTRING (20 90, 130 90, 60 100, 190 100)'::geometry AS geomB) AS t;", "execution_result": [[37.26206567625497, 20.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2229, "question_en": "Find the biggest and smallest distance between the chain of points (20 70,70 60,110 70,170 70) and another set (20 90,130 90,60 100,190 100)."}
{"id": 409, "function": "ST_HausdorffDistance", "question": "看看那两条有点曲折的线，像是(20 70, 70 60, 110 70, 170 70)和(20 90, 130 90, 60 100, 190 100)，它们之间的距离有多远呢？尤其是最大和最小的那两种距离。", "sql": "SELECT ST_HausdorffDistance(geomA, geomB), ST_Distance(geomA, geomB) FROM (SELECT 'LINESTRING (20 70, 70 60, 110 70, 170 70)'::geometry AS geomA, 'LINESTRING (20 90, 130 90, 60 100, 190 100)'::geometry AS geomB) AS t;", "execution_result": [[37.26206567625497, 20.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2230, "question_en": "Take a look at those two somewhat winding lines, like (20 70, 70 60, 110 70, 170 70) and (20 90, 130 90, 60 100, 190 100), how far apart are they? Especially the biggest and smallest kinds of distance."}
{"id": 411, "function": "ST_Length", "question": "想知道由这些点(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)和(743238 2967416)连成的一圈在某个2249的坐标系统下有多长吗？", "sql": "SELECT ST_Length(ST_GeomFromText('LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)',2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2232, "question_en": "Curious about how long the loop made by these points (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416), and (743238 2967416) is in some 2249 coordinate system?"}
{"id": 409, "function": "ST_HausdorffDistance", "question": "在20 70到170 70的那些点和20 90到190 100的那些点之间，找出一个最远的距离和一个直线的距离，看看它们是多少。", "sql": "SELECT ST_HausdorffDistance(geomA, geomB), ST_Distance(geomA, geomB) FROM (SELECT 'LINESTRING (20 70, 70 60, 110 70, 170 70)'::geometry AS geomA, 'LINESTRING (20 90, 130 90, 60 100, 190 100)'::geometry AS geomB) AS t;", "execution_result": [[37.26206567625497, 20.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2231, "question_en": "Between those points from 20 70 to 170 70 and from 20 90 to 190 100, find the farthest distance and a straight-line distance, and see what they are."}
{"id": 411, "function": "ST_Length", "question": "求一下从743238 2967416到743238 2967450，再到743265 2967450，然后到743265.625 2967416，最后回到743238 2967416的那条线有多长。", "sql": "SELECT ST_Length(ST_GeomFromText('LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)',2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2235, "question_en": "Find out how long the line is that starts at 743238 2967416, goes to 743238 2967450, then to 743265 2967450, continues to 743265.625 2967416, and finally returns to 743238 2967416."}
{"id": 411, "function": "ST_Length", "question": "想象一个由几个点连成的线段，点分别是743238 2967416、743238 2967450、743265 2967450、743265.625 2967416和743238 2967416，看看在编号2249的地图上，这条线有多长。", "sql": "SELECT ST_Length(ST_GeomFromText('LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)',2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2234, "question_en": "Imagine a line made by connecting several points, the points being 743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, and 743238 2967416, and see how long this line is on map number 2249."}
{"id": 411, "function": "ST_Length", "question": "从一个地方出发，经过一些点，最后回到起点，算算这段路径的长度，起点是(743238,2967416)，中间经过了(743238,2967450)、(743265,2967450)、(743265.625,2967416)。", "sql": "SELECT ST_Length(ST_GeomFromText('LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)',2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2233, "question_en": "Starting from a place, passing through some points, and finally returning to the starting point, calculate the length of this path. The starting point is (743238,2967416), and it goes through (743238,2967450), (743265,2967450), (743265.625,2967416) along the way."}
{"id": 412, "function": "ST_Length", "question": "你能算算那条从-72.1260 42.45到-72.123 42.1546的线在地球模型和地球仪模型下有多长吗？", "sql": "SELECT ST_Length(the_geog) AS length_spheroid, ST_Length(the_geog,false) AS length_sphere FROM \n(SELECT ST_GeographyFromText( 'SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)') AS the_geog) AS foo;", "execution_result": [[34310.570362728045, 34346.20609607416]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2238, "question_en": "Can you figure out how long that line from -72.1260 42.45 to -72.123 42.1546 is on both the Earth model and globe model?"}
{"id": 411, "function": "ST_Length", "question": "你能告诉我由点(743238 2967416)到(743238 2967450)，然后到(743265 2967450)，再到(743265.625 2967416)，最后回到(743238 2967416)的那条线在编号为2249的地图上有多长吗？", "sql": "SELECT ST_Length(ST_GeomFromText('LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)',2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2237, "question_en": "Can you tell me how long the line that starts at (743238 2967416), goes to (743238 2967450), then to (743265 2967450), next to (743265.625 2967416), and finally returns to (743238 2967416) is on the map with the number 2249?"}
{"id": 405, "function": "ST_DistanceSpheroid", "question": "你能帮我算算从那条连接了两个点的线（-118.584 38.374 到 -118.583 38.5）的中心到某个点（-118 38）的距离吗？我想知道用三种方式测量的结果：一种是用WGS84那种地球模型，另一种是用普通的球体，还有就是把它们放到UTM 11N这个地图上测平面距离。记得结果要保留两位小数哦，分别叫它们dist_meters_spheroid、dist_meters_sphere和dist_utm11_meters。", "sql": "SELECT round(CAST( ST_DistanceSpheroid(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326), 'SPHEROID[\"WGS 84\",6378137,298.257223563]') AS numeric),2) AS dist_meters_spheroid, round(CAST(ST_DistanceSphere(ST_Centroid(geom), ST_GeomFromText('POINT(-118 38)',4326)) AS numeric),2) AS dist_meters_sphere, round(CAST(ST_Distance(ST_Transform(ST_Centroid(geom),32611), ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) AS numeric),2) AS dist_utm11_meters FROM (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', 4326) AS geom) AS foo;", "execution_result": [["70454.92", "70424.71", "70438.00"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "decimal_to_str", "source": "original", "new_id": 2204, "question_en": "Can you help me figure out the distance from the middle of a line connecting two points (-118.584 38.374 to -118.583 38.5) to a certain point (-118 38)? I want to know the results using three ways: one using that WGS84 earth model, another with a regular sphere, and also by putting them on the UTM 11N map to measure the flat distance. Remember to keep the results to two decimal places, and call them dist_meters_spheroid, dist_meters_sphere, and dist_utm11_meters."}
{"id": 412, "function": "ST_Length", "question": "看看由三个小点组成的线段长度，点的位置是(-72.1260 42.45)、(-72.1240 42.45666)、(-72.123 42.1546)，用两种不同的方式来测量：一个是椭球体，一个是球体。", "sql": "SELECT ST_Length(the_geog) AS length_spheroid, ST_Length(the_geog,false) AS length_sphere FROM (SELECT ST_GeographyFromText( 'SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)') AS the_geog) AS foo;", "execution_result": [[34310.570362728045, 34346.20609607416]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2239, "question_en": "Check the length of the line segment formed by three little dots, with positions at (-72.1260 42.45), (-72.1240 42.45666), (-72.123 42.1546), using two different methods to measure: one with a spheroid and one with a sphere."}
{"id": 412, "function": "ST_Length", "question": "找出由三个小点构成的长条形的长度，这些点在某个地方是(-72.1260 42.45)、(-72.1240 42.45666)、和(-72.123 42.1546)。看看这个长条在椭圆形和球形下分别有多长。", "sql": "SELECT ST_Length(the_geog) AS length_spheroid, ST_Length(the_geog,false) AS length_sphere FROM (SELECT ST_GeographyFromText( 'SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)') AS the_geog) AS foo;", "execution_result": [[34310.570362728045, 34346.20609607416]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2240, "question_en": "Find out the length of a long shape made by three little dots located somewhere at (-72.1260 42.45), (-72.1240 42.45666), and (-72.123 42.1546). Check how long this shape is under an oval and a round model."}
{"id": 411, "function": "ST_Length", "question": "求一条由五个坐标点组成的那个长长的线段的准确长度，坐标是743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416。", "sql": "SELECT ST_Length(ST_GeomFromText('LINESTRING(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)',2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2236, "question_en": "Find the exact length of that long line made up of five coordinate points, the coordinates are 743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416."}
{"id": 412, "function": "ST_Length", "question": "看看那条从-72.1260 42.45到-72.123 42.1546的线，在一个像椭圆和球形的两个模型下，可以说它有多长，分别叫做length_spheroid和length_sphere。", "sql": "SELECT ST_Length(the_geog) AS length_spheroid, ST_Length(the_geog,false) AS length_sphere FROM (SELECT ST_GeographyFromText( 'SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)') AS the_geog) AS foo;", "execution_result": [[34310.570362728045, 34346.20609607416]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2241, "question_en": "Check out the line from -72.1260 42.45 to -72.123 42.1546, and see how long it might be under two models, like an oval and a ball shape, called length_spheroid and length_sphere respectively."}
{"id": 413, "function": "ST_Length", "question": "看看由这些小点(-72.1260 42.45)、(-72.1240 42.45666)和(-72.123 42.1546)连接起来的线，在某个特别的坐标系下能拉多长？", "sql": "SELECT ST_Length(ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)'),26986));", "execution_result": [[34309.45635761903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2244, "question_en": "Check how long the line connecting these little dots (-72.1260 42.45), (-72.1240 42.45666), and (-72.123 42.1546) can stretch in a certain special coordinate system?"}
{"id": 412, "function": "ST_Length", "question": "看看那条连接了三个点的线段，在这些坐标：(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)，它有两种测量方式：一种是考虑地球像个扁扁的球体，另一种是就当地球是个圆圆的球来量长度。", "sql": "SELECT ST_Length(the_geog) AS length_spheroid, ST_Length(the_geog,false) AS length_sphere FROM (SELECT ST_GeographyFromText( 'SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)') AS the_geog) AS foo;", "execution_result": [[34310.570362728045, 34346.20609607416]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2243, "question_en": "Take a look at the line connecting three points at these coordinates: (-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546), and it has two ways to measure: one is considering the Earth as a squashed sphere, and the other is measuring as if the Earth is a round sphere."}
{"id": 412, "function": "ST_Length", "question": "可以告诉我那个由几个点组成的线段在地球上大概有多长吗？就像一根绳子在椭球和球体上拉长了，从-72.1260 42.45到-72.1240 42.45666，再到-72.123 42.1546，这些数字都在SRID=4326范围内。", "sql": "SELECT ST_Length(the_geog) AS length_spheroid, ST_Length(the_geog,false) AS length_sphere FROM (SELECT ST_GeographyFromText( 'SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)') AS the_geog) AS foo;", "execution_result": [[34310.570362728045, 34346.20609607416]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2242, "question_en": "Could you tell me roughly how long that line made of several little dots is on Earth? It's like a string stretched over an ellipsoid and a sphere, from -72.1260 42.45 to -72.1240 42.45666, and then to -72.123 42.1546, all within SRID=4326."}
{"id": 413, "function": "ST_Length", "question": "在某个特别的坐标体系下，看看由这些点 (-72.1260 42.45)、(-72.1240 42.45666)、(-72.123 42.1546) 画出来的那条线有多长吧。", "sql": "SELECT ST_Length(ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)'),26986));", "execution_result": [[34309.45635761903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2247, "question_en": "In a certain special coordinate system, see how long that line drawn by these points (-72.1260 42.45), (-72.1240 42.45666), (-72.123 42.1546) is."}
{"id": 413, "function": "ST_Length", "question": "如果有一条由三个小点连接而成的线，点的位置分别是-72.1260、42.45，-72.1240、42.45666和-72.123、42.1546，看看当这些点被放在一个不同的框架里时，这条线有多长。", "sql": "SELECT ST_Length(ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)'),26986));", "execution_result": [[34309.45635761903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2246, "question_en": "Imagine a line formed by three small dots, located at -72.1260, 42.45, -72.1240, 42.45666, and -72.123, 42.1546. See how long this line is when these dots are placed in a different framework."}
{"id": 413, "function": "ST_Length", "question": "看看由三个小点构成的线，先在一个常见的地球坐标里，然后变成另一个编号为26986的坐标后，它有多长。点的具体位置是：第一个在-72.1260和42.45，第二个在-72.1240和42.45666，第三个在-72.123和42.1546。", "sql": "SELECT ST_Length(ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)'),26986));", "execution_result": [[34309.45635761903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2245, "question_en": "Check how long the line made of three little dots is, first in a usual earth coordinate, then after changing it to another one numbered 26986. The specific spots are: first at -72.1260 and 42.45, second at -72.1240 and 42.45666, third at -72.123 and 42.1546."}
{"id": 413, "function": "ST_Length", "question": "看看由那些点串成的线，带着这些数字：-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546，在某个特别坐标系里，能有多长呢？给出具体的长度吧。", "sql": "SELECT ST_Length(ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)'),26986));", "execution_result": [[34309.45635761903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2248, "question_en": "Check out the line formed by those points, with these numbers: -72.1260 42.45, -72.1240 42.45666, -72.123 42.1546, and see how long it is in a particular coordinate system. Provide the specific length."}
{"id": 413, "function": "ST_Length", "question": "有一个由小点连成的线，坐标是(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)，它原本是在某个4326的框架里。想知道把它变到另一个26986的框架后，它有多长，用小数告诉我。", "sql": "SELECT ST_Length(ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)'),26986));", "execution_result": [[34309.45635761903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2249, "question_en": "There's a line made of little dots with coordinates (-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546), originally in some 4326 framework. I'd like to know how long it is after moving to another 26986 framework, and tell me using decimals."}
{"id": 414, "function": "ST_3DLength", "question": "看看那些坐标点，像是(743238,2967416,1)、(743238,2967450,1)、(743265,2967450,3)、(743265.625,2967416,3)和(743238,2967416,3)，它们连成了一条三维的线，想知道它的长度是多少？", "sql": "SELECT ST_3DLength(ST_GeomFromText('LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)',2249));", "execution_result": [[122.70471674145682]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2251, "question_en": "Look at those coordinates, like (743238,2967416,1), (743238,2967450,1), (743265,2967450,3), (743265.625,2967416,3), and (743238,2967416,3), they form a 3D line, what's its length?"}
{"id": 414, "function": "ST_3DLength", "question": "在那个叫2249的地方，看看由这些神秘坐标(743238 2967416 1)、(743238 2967450 1)、(743265 2967450 3)、(743265.625 2967416 3)、(743238 2967416 3)串成的三维小线有多长。", "sql": "SELECT ST_3DLength(ST_GeomFromText('LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)',2249));", "execution_result": [[122.70471674145682]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2250, "question_en": "In that place called 2249, check how long the mysterious 3D little line formed by these coordinates (743238 2967416 1), (743238 2967450 1), (743265 2967450 3), (743265.625 2967416 3), (743238 2967416 3) is."}
{"id": 414, "function": "ST_3DLength", "question": "请告诉我由五个立体小点组成的线，像这样排列的(743238 2967416 1, 743238 2967450 1, 743265 2967450 3, 743265.625 2967416 3, 743238 2967416 3)，在编号为2249的环境里，它有多长？", "sql": "SELECT ST_3DLength(ST_GeomFromText('LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)',2249));", "execution_result": [[122.70471674145682]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2253, "question_en": "Can you tell me how long the line made of five 3D little dots arranged like this (743238 2967416 1, 743238 2967450 1, 743265 2967450 3, 743265.625 2967416 3, 743238 2967416 3) is, in the setting numbered 2249?"}
{"id": 415, "function": "ST_LengthSpheroid", "question": "在那个GRS_1980的地球模型上，看看由这些线段组成的形状有多长，分别有一个从(-118.584 38.374,-118.583 38.5)到另一个从(-71.05957 42.3589 , -71.061 43)。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) AS tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) AS len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) AS len_line2 \nFROM (SELECT ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))') AS geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' AS spheroid) AS sph_m) AS foo;", "execution_result": [[85204.52077118107, 13986.872528244732, 71217.64824293634]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2256, "question_en": "On that GRS_1980 Earth model, see how long the shape made by these segments is, with one going from (-118.584 38.374,-118.583 38.5) and another from (-71.05957 42.3589 , -71.061 43)."}
{"id": 414, "function": "ST_3DLength", "question": "想知道一个由五个三维小点连成的线有多长吗？这些点的坐标是这样排的：第一个是(743238, 2967416, 高度1)，然后是(743238, 2967450, 高度1)，接着是(743265, 2967450, 高度3)，再来是(743265.625, 2967416, 高度3)，最后回到(743238, 2967416, 高度3)。这条线用一种能算出三维长度的方法测量。", "sql": "SELECT ST_3DLength(ST_GeomFromText('LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)',2249));", "execution_result": [[122.70471674145682]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2252, "question_en": "Curious about how long a line made of five little 3D dots is? Here's how the coordinates go: the first one is (743238, 2967416, height1), then (743238, 2967450, height1), next (743265, 2967450, height3), then (743265.625, 2967416, height3), and finally back to (743238, 2967416, height3). This line is measured using a way that figures out 3D length."}
{"id": 414, "function": "ST_3DLength", "question": "找出由那些点组成的三维线的长度，这些点是743238 2967416 1, 743238 2967450 1, 743265 2967450 3, 743265.625 2967416 3, 743238 2967416 3，数值要是浮动的哦，记得是在2249这个空间里哦。", "sql": "SELECT ST_3DLength(ST_GeomFromText('LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)',2249));", "execution_result": [[122.70471674145682]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2255, "question_en": "Find the length of a 3D line made from those points: 743238 2967416 1, 743238 2967450 1, 743265 2967450 3, 743265.625 2967416 3, 743238 2967416 3. The value should be floating, and remember, it's in the 2249 space."}
{"id": 414, "function": "ST_3DLength", "question": "看看一个由这些点(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)组成的三维形状在某个2249系统下有多长，用小数形式表示结果。", "sql": "SELECT ST_3DLength(ST_GeomFromText('LINESTRING(743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3)',2249));", "execution_result": [[122.70471674145682]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2254, "question_en": "Check how long a three-dimensional shape made of these points (743238 2967416 1,743238 2967450 1,743265 2967450 3,743265.625 2967416 3,743238 2967416 3) is in some 2249 system, expressing the result as a decimal."}
{"id": 415, "function": "ST_LengthSpheroid", "question": "找出一个结果：从那些坐标的总体长度开始，经过第一个小段(-118.584 38.374,-118.583 38.5)和第二个小段(-71.05957 42.3589, -71.061 43)的长度，都是在某个大的椭球体下。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) AS tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) AS len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) AS len_line2 \nFROM (SELECT ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))') AS geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' AS spheroid) AS sph_m) AS foo;", "execution_result": [[85204.52077118107, 13986.872528244732, 71217.64824293634]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2260, "question_en": "Figure out a result: starting with the overall length of those coordinates, then going through the length of the first little segment (-118.584 38.374,-118.583 38.5) and the second little segment (-71.05957 42.3589, -71.061 43), all under some big ellipsoid."}
{"id": 415, "function": "ST_LengthSpheroid", "question": "对于包含两段小线段的集合，想知道它们在一个特殊地球模型上的总长度和每一段的长度，坐标是(-118.584 38.374,-118.583 38.5)和(-71.05957 42.3589 , -71.061 43)。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) AS tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) AS len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) AS len_line2 \nFROM (SELECT ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))') AS geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' AS spheroid) AS sph_m) AS foo;", "execution_result": [[85204.52077118107, 13986.872528244732, 71217.64824293634]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2259, "question_en": "For a collection containing two little line segments, I'd like to know their total length and each segment's length on a special earth model, with coordinates (-118.584 38.374,-118.583 38.5) and (-71.05957 42.3589 , -71.061 43)."}
{"id": 417, "function": "ST_LengthSpheroid", "question": "你能帮我看看从这些坐标(-118.584 38.374 20)到(-118.583 38.5 30)和(-71.05957 42.3589 75)到(-71.061 43 90)之间的线在某个大圆球上的总长度和每段长度吗？", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) As tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) As len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) As len_line2 FROM (SELECT ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))') As geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As sph_m) as foo;", "execution_result": [[85204.52592562579, 13986.876103024835, 71217.64982260094]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2262, "question_en": "Can you help me look at the total length and each segment length between these coordinates (-118.584 38.374 20) to (-118.583 38.5 30) and (-71.05957 42.3589 75) to (-71.061 43 90) on some big round sphere?"}
{"id": 415, "function": "ST_LengthSpheroid", "question": "想知道有两条线段的形状，在那个叫GRS_1980的球体上，看看从(-118.584 38.374到-118.583 38.5)和(-71.05957 42.3589到-71.061 43)的长度，还有它们加起来的总长度，这些都要分别给个名字。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) AS tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) AS len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) AS len_line2 \nFROM (SELECT ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))') AS geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' AS spheroid) AS sph_m) AS foo;", "execution_result": [[85204.52077118107, 13986.872528244732, 71217.64824293634]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2258, "question_en": "Wondering about a shape with two segments, on that GRS_1980 sphere thing, see the lengths from (-118.584 38.374 to -118.583 38.5) and (-71.05957 42.3589 to -71.061 43), and their total length, all these should have separate names."}
{"id": 415, "function": "ST_LengthSpheroid", "question": "看看这些线段组成的形状，分别是(-118.584 38.374,-118.583 38.5)和(-71.05957 42.3589 , -71.061 43)，它们在某个大圆球上的总长度是多少？还有每条小线段的长度是多少呢？结果应该有总长度、第一段的长度和第二段的长度。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) AS tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) AS len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) AS len_line2 \nFROM (SELECT ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))') AS geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' AS spheroid) AS sph_m) AS foo;", "execution_result": [[85204.52077118107, 13986.872528244732, 71217.64824293634]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2261, "question_en": "Let's look at these line segments making a shape, which are (-118.584 38.374,-118.583 38.5) and (-71.05957 42.3589 , -71.061 43). What is their total length on a certain big sphere? Also, what is the length of each little line segment? The result should include the total length, the length of the first segment, and the length of the second segment."}
{"id": 415, "function": "ST_LengthSpheroid", "question": "用那个叫GRS_1980的地球模型，算算这些小线段的总长度和各自长度吧，坐标是(-118.584 38.374到-118.583 38.5)还有(-71.05957 42.3589到-71.061 43)。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) AS tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) AS len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) AS len_line2 \nFROM (SELECT ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5), (-71.05957 42.3589 , -71.061 43))') AS geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' AS spheroid) AS sph_m) AS foo;", "execution_result": [[85204.52077118107, 13986.872528244732, 71217.64824293634]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2257, "question_en": "Using that earth model called GRS_1980, figure out the total length and each part's length of these little line segments, with coordinates (-118.584 38.374 to -118.583 38.5) and (-71.05957 42.3589 to -71.061 43)."}
{"id": 417, "function": "ST_LengthSpheroid", "question": "找一下那些在GRS_1980的椭圆体上，长得像线的东西的总长度，还有从-118.584 38.374 20到-118.583 38.5 30的那一段，和从-71.05957 42.3589 75到-71.061 43 90的另一段的长度。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) As tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) As len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) As len_line2 \nFROM (SELECT ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))') As geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As sph_m) as foo;", "execution_result": [[85204.52592562579, 13986.876103024835, 71217.64982260094]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2263, "question_en": "Find the total length of those line-like things on the GRS_1980 ellipsoid, and also the length of the bit from -118.584 38.374 20 to -118.583 38.5 30, as well as the other bit from -71.05957 42.3589 75 to -71.061 43 90."}
{"id": 417, "function": "ST_LengthSpheroid", "question": "对由那些坐标和高度构成的曲线进行测量，看看它们在一个特殊的地球形状上有多长，特别是从-118.584 38.374 20到-118.583 38.5 30以及从-71.05957 42.3589 75到-71.061 43 90这两段分别有多长。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) As tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) As len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) As len_line2 \nFROM (SELECT ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))') As geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As sph_m) as foo;", "execution_result": [[85204.52592562579, 13986.876103024835, 71217.64982260094]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2264, "question_en": "Measure the length of curves made up of those coordinates and heights, to see how long they are on a special Earth shape, especially the lengths from -118.584 38.374 20 to -118.583 38.5 30 and from -71.05957 42.3589 75 to -71.061 43 90."}
{"id": 418, "function": "ST_LongestLine", "question": "看着这个多边形，想象一下两个小点之间的最长距离，那条线的形状是什么？还有这条最长线的长度是多少呢？另外，里面两点间最远的距离是多少？", "sql": "SELECT ST_AsText( ST_LongestLine( geom, geom)) AS llinewkt, ST_MaxDistance( geom, geom) AS max_dist, ST_Length( ST_LongestLine(geom, geom)) AS lenll \nFROM (SELECT 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(20 50,180 180)", 206.15528128088303, 206.15528128088303]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2270, "question_en": "Looking at this polygon, imagine the longest distance between two little dots, what does that line look like? Also, what is the length of this longest line? And what's the farthest distance between two points inside?"}
{"id": 417, "function": "ST_LengthSpheroid", "question": "在那个GRS_1980的圆形地球模型上，看看这两条小线段的总长度，还有每一条的长度是多少？这些小线段位置是(-118.584 38.374 20,-118.583 38.5 30)和(-71.05957 42.3589 75, -71.061 43 90)。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) As tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) As len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) As len_line2 FROM (SELECT ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))') As geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As sph_m) as foo;", "execution_result": [[85204.52592562579, 13986.876103024835, 71217.64982260094]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2265, "question_en": "On that GRS_1980 round earth model, check the total length of these two little lines and the length of each one? These lines are located at (-118.584 38.374 20,-118.583 38.5 30) and (-71.05957 42.3589 75, -71.061 43 90)."}
{"id": 417, "function": "ST_LengthSpheroid", "question": "用一种大球体的概念来算一串奇怪的三维线段的总长度，看看从(-118.584 38.374 20到-118.583 38.5 30)和从(-71.05957 42.3589 75到-71.061 43 90)的长度分别是多少，给它们起个名字叫tot_len、len_line1和len_line2吧。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) As tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) As len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) As len_line2 \nFROM (SELECT ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))') As geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As sph_m) as foo;", "execution_result": [[85204.52592562579, 13986.876103024835, 71217.64982260094]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2267, "question_en": "Using a big sphere idea, calculate the total length of a strange 3D line collection, and see what the lengths are from (-118.584 38.374 20 to -118.583 38.5 30) and from (-71.05957 42.3589 75 to -71.061 43 90), naming them tot_len, len_line1, and len_line2."}
{"id": 418, "function": "ST_LongestLine", "question": "如果你有一些点，比如(40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180)和(60 140, 99 77.5, 90 140, 60 140)，想知道那个形状里最长的那条斜线是什么样子，还有那个形状里最远的距离和最长的那条斜线有多长。", "sql": "SELECT ST_AsText( ST_LongestLine( geom, geom)) AS llinewkt, ST_MaxDistance( geom, geom) AS max_dist, ST_Length( ST_LongestLine(geom, geom)) AS lenll \nFROM (SELECT 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(20 50,180 180)", 206.15528128088303, 206.15528128088303]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2268, "question_en": "If you have some points like (40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180) and (60 140, 99 77.5, 90 140, 60 140), and you want to know what the longest slanty line in that shape looks like, as well as the farthest distance in that shape and how long the longest slanty line is."}
{"id": 418, "function": "ST_LongestLine", "question": "对于那个形状，看看最长的线条是什么样子，还有它的最大距离值和长度是多少？形状的点是这样的：40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180，里面还有个小环：60 140, 99 77.5, 90 140, 60 140。", "sql": "SELECT ST_AsText(ST_LongestLine(geom, geom)) AS llinewkt, ST_MaxDistance(geom, geom) AS max_dist, ST_Length(ST_LongestLine(geom, geom)) AS lenll FROM (SELECT 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(20 50,180 180)", 206.15528128088303, 206.15528128088303]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2271, "question_en": "For that shape, what does the longest line look like, and what are its maximum distance and length? The shape's points are like this: 40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180, and there's a little loop inside: 60 140, 99 77.5, 90 140, 60 140."}
{"id": 418, "function": "ST_LongestLine", "question": "有一个由外边和里边组成的图形，外边经过这些点：40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180，而里边走过这些点：60 140, 99 77.5, 90 140, 60 140。可以帮我找出这个图形里最长的那条线吗？我还想知道那条线的文字描述、最远的顶点间隔以及它的长度。", "sql": "SELECT ST_AsText( ST_LongestLine( geom, geom)) AS llinewkt, ST_MaxDistance( geom, geom) AS max_dist, ST_Length( ST_LongestLine(geom, geom)) AS lenll FROM (SELECT 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(20 50,180 180)", 206.15528128088303, 206.15528128088303]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2269, "question_en": "There's a shape made of an outer and inner path, the outer going through these spots: 40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180, and the inner passing through these locations: 60 140, 99 77.5, 90 140, 60 140. Could you help me find the longest line in this shape? I also want its text description, the farthest vertex gap, and how long it is."}
{"id": 419, "function": "ST_LongestLine", "question": "找出从那个点(160 40)到一串坐标(10 30,50 50,30 110,70 90,180 140,130 190)之间，最长的那条线是什么样子，然后用某种格式来描述它，叫做lline。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)' ) ) AS lline;", "execution_result": [["LINESTRING(160 40,130 190)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2275, "question_en": "Find out what the longest line looks like from that point (160 40) to a series of coordinates (10 30,50 50,30 110,70 90,180 140,130 190), and then describe it in a certain format called lline."}
{"id": 419, "function": "ST_LongestLine", "question": "找出一个从坐标(160 40)到一串坐标(10 30, 50 50, 30 110, 70 90, 180 140, 130 190)之间最长的连线，并给我它的形状描述。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)' ) ) AS lline;", "execution_result": [["LINESTRING(160 40,130 190)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2277, "question_en": "Find the longest connection from the coordinates (160 40) to a series of coordinates (10 30, 50 50, 30 110, 70 90, 180 140, 130 190), and give me its shape description."}
{"id": 418, "function": "ST_LongestLine", "question": "能不能给我那个形状的最长对角线，顺便告诉我最大距离和最长对角线的长度，形状是从这些点来的：40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180；还有另一个圈：60 140, 99 77.5, 90 140, 60 140。", "sql": "SELECT ST_AsText(ST_LongestLine(geom, geom)) AS llinewkt, ST_MaxDistance(geom, geom) AS max_dist, ST_Length(ST_LongestLine(geom, geom)) AS lenll FROM (SELECT 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(20 50,180 180)", 206.15528128088303, 206.15528128088303]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2272, "question_en": "Could you get me the longest diagonal of that shape, and also tell me the maximum distance and length of the longest diagonal? The shape comes from these spots: 40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180; and another loop: 60 140, 99 77.5, 90 140, 60 140."}
{"id": 419, "function": "ST_LongestLine", "question": "找出从那个160 40的小点到那条由(10 30, 50 50, 30 110, 70 90, 180 140, 130 190)构成的长长的线中，最长的那根连接线，然后说说它的样子。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)' ) ) AS lline;", "execution_result": [["LINESTRING(160 40,130 190)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2279, "question_en": "Find the longest connection from that little point at 160 40 to the long line made of (10 30, 50 50, 30 110, 70 90, 180 140, 130 190), and then describe what it looks like."}
{"id": 419, "function": "ST_LongestLine", "question": "看看从那个点160 40到一串坐标线中最长的连线是什么样子，并用一种常见的格式来描述它。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)' ) ) AS lline;", "execution_result": [["LINESTRING(160 40,130 190)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2278, "question_en": "Check what the longest connection looks like from that point 160 40 to a series of coordinate lines, and describe it using a common format."}
{"id": 419, "function": "ST_LongestLine", "question": "找出从那个点(160 40)到那条折线(10 30, 50 50, 30 110, 70 90, 180 140, 130 190)之间最长的那条线，用一种文字格式来展示它，叫做lline。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)' ) ) AS lline;", "execution_result": [["LINESTRING(160 40,130 190)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2276, "question_en": "Find the longest line from that point (160 40) to that squiggly path (10 30, 50 50, 30 110, 70 90, 180 140, 130 190), and show it in a text format called lline."}
{"id": 419, "function": "ST_LongestLine", "question": "找出从160 40这个小点到那些一串串的数字之间最长的那条线，然后告诉我它长什么样子。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)' ) ) AS lline;", "execution_result": [["LINESTRING(160 40,130 190)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2274, "question_en": "Find the longest line from that little point at 160 40 to those strings of numbers, and then tell me what it looks like."}
{"id": 418, "function": "ST_LongestLine", "question": "给定一个由点组成的多边形，比如像这样：40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180，以及一个小环：60 140, 99 77.5, 90 140, 60 140。请找出这个图形里最长的连线并说出它的长度，还要告诉我这个图形里最远的距离是多少。结果要用llinewkt、max_dist和lenll作为名字来呈现。", "sql": "SELECT ST_AsText( ST_LongestLine( geom, geom)) AS llinewkt, ST_MaxDistance( geom, geom) AS max_dist, ST_Length( ST_LongestLine(geom, geom)) AS lenll \nFROM (SELECT 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 99 77.5, 90 140, 60 140))'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(20 50,180 180)", 206.15528128088303, 206.15528128088303]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2273, "question_en": "Given a polygon made of dots, something like this: 40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180, and a small loop: 60 140, 99 77.5, 90 140, 60 140. Please find the longest line in this shape and tell me its length, also tell me the farthest distance within this shape. The result should be presented with names like llinewkt, max_dist, and lenll."}
{"id": 417, "function": "ST_LengthSpheroid", "question": "用一个大圆球（长半轴6378137米，扁率倒数298.257222101）想象一下这些三维小线段的情况：1) 整个线条组合的总长度是多少，比如说从(-118.584 38.374 20)到(-118.583 38.5 30)再到(-71.05957 42.3589 75)到(-71.061 43 90)；2) 第一段的小线从(-118.584 38.374 20)到(-118.583 38.5 30)有多长；3) 第二段的小线从(-71.05957 42.3589 75)到(-71.061 43 90)有多长，分别用tot_len、len_line1、len_line2来表示结果。", "sql": "SELECT ST_LengthSpheroid( geom, sph_m ) As tot_len, ST_LengthSpheroid(ST_GeometryN(geom,1), sph_m) As len_line1, ST_LengthSpheroid(ST_GeometryN(geom,2), sph_m) As len_line2 \nFROM (SELECT ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30), (-71.05957 42.3589 75, -71.061 43 90))') As geom, CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As sph_m) as foo;", "execution_result": [[85204.52592562579, 13986.876103024835, 71217.64982260094]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2266, "question_en": "Imagine a big round ball (semi-major axis 6378137 meters, inverse flattening 298.257222101) and think about these 3D little lines: 1) What's the total length of the whole line set, like from (-118.584 38.374 20) to (-118.583 38.5 30) then to (-71.05957 42.3589 75) to (-71.061 43 90); 2) How long is the first little line from (-118.584 38.374 20) to (-118.583 38.5 30); 3) How long is the second little line from (-71.05957 42.3589 75) to (-71.061 43 90), with results shown as tot_len, len_line1, and len_line2."}
{"id": 420, "function": "ST_LongestLine", "question": "找出由这些点围成的形状和一个以(80 160)为核心、半径为30的小圆圈之间最长的线，并用某种格式来表示结果。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(20 10,91.4805029709527 187.7163859753386)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2281, "question_en": "Find the longest line between the shape formed by these points and a small circle centered at (80 160) with a radius of 30, and represent the result in some format."}
{"id": 420, "function": "ST_LongestLine", "question": "看看由点(190,150)、(20,10)、(160,70)围成的图形和一个以(80,160)为中心、30为大小的圆形之间的最长距离是什么，并给出那个图形的WKT表现。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(20 10,91.4805029709527 187.7163859753386)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2280, "question_en": "Check what the longest distance is between the shape formed by points (190,150), (20,10), (160,70) and a circle with a center at (80,160) and size 30, and provide the WKT representation of that shape."}
{"id": 420, "function": "ST_LongestLine", "question": "看看那个由点(80 160)为中心的30单位大圆和多边形(190 150, 20 10, 160 70, 190 150)之间，能够拉出最长的线是什么，然后用一种特别的字符串方式告诉我。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(20 10,91.4805029709527 187.7163859753386)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2284, "question_en": "See what the longest line you can pull out between that big 30-unit circle centered at point (80 160) and the polygon (190 150, 20 10, 160 70, 190 150) is, then tell me using a special string format."}
{"id": 420, "function": "ST_LongestLine", "question": "找出由这些点(190 150)、(20 10)、(160 70)围成的形状和一个圆圈，圆心是(80 160)，半径30，这两者之间最长的那条线，然后用某种格式来写出来，叫做llinewkt。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(20 10,91.4805029709527 187.7163859753386)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2282, "question_en": "Find the longest line between the shape made by these points (190 150), (20 10), (160 70) and a circle with center at (80 160) and radius 30, then write it out in a certain format called llinewkt."}
{"id": 420, "function": "ST_LongestLine", "question": "找出那个围绕中心点在(80 160)位置的圆形区域，它扩展了30个单位，然后看看这个圆和一个由点(190 150, 20 10, 160 70, 190 150)围成的形状之间最长的连接线段是什么，并用某种文本格式表示出来。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(20 10,91.4805029709527 187.7163859753386)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2283, "question_en": "Identify the circular area centered at the point (80 160) which extends 30 units, then explore the longest connecting line between this circle and a shape formed by the points (190 150, 20 10, 160 70, 190 150), and represent it in some text format."}
{"id": 421, "function": "ST_3DLongestLine", "question": "找出在这些点形成的形状和那些线之间最长的线段，无论是三维还是二维，都要用某种格式输出。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) AS lol3d, ST_AsEWKT(ST_LongestLine(poly, mline)) AS lol2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(175 150 5,1 10 2)", "LINESTRING(175 150,1 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2286, "question_en": "Find the longest segment between the shape formed by those points and the lines, whether in 3D or 2D, and output them in some format."}
{"id": 422, "function": "ST_3DLongestLine", "question": "找出那些坐标点和连起来的线段之间最长的三维和二维线段，记得用EWKT形式展示哦。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(98 190 1,50 74 1000)", "LINESTRING(98 190,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2292, "question_en": "Find the longest 3D and 2D lines between those coordinate points and the connected line segments, make sure to display them in EWKT format."}
{"id": 421, "function": "ST_3DLongestLine", "question": "看看那些点组成的立体形状和一些线条之间，谁能拉出最长的线？记得用一种特别的方式写下来，分别叫做lol3d和lol2d。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) AS lol3d, ST_AsEWKT(ST_LongestLine(poly, mline)) AS lol2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(175 150 5,1 10 2)", "LINESTRING(175 150,1 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2288, "question_en": "See between those points forming a 3D shape and some lines, who can pull out the longest line? Remember to write it down in a special way, calling them lol3d and lol2d respectively."}
{"id": 420, "function": "ST_LongestLine", "question": "找出那个多边形和一个以(80, 160)为中心、半径30的小圆之间的最长连线，然后用某种格式来描述它。", "sql": "SELECT ST_AsText( ST_LongestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(20 10,91.4805029709527 187.7163859753386)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2285, "question_en": "Find the longest line between that polygon and a small circle centered at (80, 160) with a radius of 30, then describe it in some format."}
{"id": 421, "function": "ST_3DLongestLine", "question": "找出那种能把三维多边形和三维多线段之间的距离拉得最长的线，给个特别名字叫lol3d，还有就是它们之间在平面上伸得最长的线，也要有个特别名字叫lol2d。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) AS lol3d, ST_AsEWKT(ST_LongestLine(poly, mline)) AS lol2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(175 150 5,1 10 2)", "LINESTRING(175 150,1 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2291, "question_en": "Find the line that stretches the longest distance between the 3D polygon and the 3D multilinestring, give it a special name lol3d, and also the line that stretches the longest on a plane between them, which should also have a special name lol2d."}
{"id": 423, "function": "ST_3DLongestLine", "question": "看看在那些坐标点间，3D和2D的最长距离是怎么画出来的，然后用EWKT样子告诉我。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(50 75 1000,100 100 30)", "LINESTRING(98 190,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2298, "question_en": "See how the longest distance in 3D and 2D is drawn between those coordinate points, then tell me with the EWKT format."}
{"id": 422, "function": "ST_3DLongestLine", "question": "找出在那些点和线之间，三维空间里最长的连接，并用特别的格式输出作为lol3d_line_pt；同时在平面上，这些点和线的最长连接也要用同样的格式输出为lol2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(98 190 1,50 74 1000)", "LINESTRING(98 190,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2293, "question_en": "Find the longest link in 3D space between those dots and lines, and output it in a special format as lol3d_line_pt; also, on a flat surface, the longest link between these dots and lines should be output in the same format as lol2d_line_pt."}
{"id": 421, "function": "ST_3DLongestLine", "question": "找出在这些点之间最长的两条线，一条是三维的，一条是二维的，分别叫做lol3d和lol2d，坐标有175 150 5到20 40 5，等等，还有175 155 2到1 10 2，等等，给它们一个特别的字符串形式。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) AS lol3d, ST_AsEWKT(ST_LongestLine(poly, mline)) AS lol2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(175 150 5,1 10 2)", "LINESTRING(175 150,1 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2289, "question_en": "Identify the longest lines between these points, one in 3D and one in 2D, named lol3d and lol2d, with coordinates like 175 150 5 to 20 40 5, etc., and 175 155 2 to 1 10 2, etc., and give them a special string format."}
{"id": 422, "function": "ST_3DLongestLine", "question": "找出那两个三维点和那条三维线之间最长的线段的描述，还有它们在平面上最长的线段的描述。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(98 190 1,50 74 1000)", "LINESTRING(98 190,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2297, "question_en": "Find the description of the longest segment between those two 3D dots and that 3D line, and also the description of their longest segment on a flat surface."}
{"id": 422, "function": "ST_3DLongestLine", "question": "给我看看从那些小点MULTIPOINT(100 100 30, 50 74 1000)到一条三维曲线LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900)之间最长的那根3D线段的EWKT，还有它们之间最长的2D线段的EWKT。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(98 190 1,50 74 1000)", "LINESTRING(98 190,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2296, "question_en": "Show me the EWKT of the longest 3D line from those little dots MULTIPOINT(100 100 30, 50 74 1000) to a 3D curve LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900), and also the EWKT of the longest 2D line between them."}
{"id": 422, "function": "ST_3DLongestLine", "question": "给两个由小点组成的集合和一条穿过几处的线段，看看它们之间在三维和二维中最远的距离是什么，并用某种格式来表示这些最远的连接。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(98 190 1,50 74 1000)", "LINESTRING(98 190,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2295, "question_en": "For a collection of little dots and a line passing through several places, find out the farthest distance between them in 3D and 2D, and express these farthest connections in some format."}
{"id": 421, "function": "ST_3DLongestLine", "question": "在空间中有两个奇妙的形状，一个是有点立体感的多边形，另一个是由几条线组成的形状。你能找到在三维和二维中连接这两个形状的最长线吗？这里的坐标包括像175 150 5这样的数字。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) AS lol3d, ST_AsEWKT(ST_LongestLine(poly, mline)) AS lol2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(175 150 5,1 10 2)", "LINESTRING(175 150,1 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2287, "question_en": "There are two intriguing shapes in space, one is a somewhat three-dimensional polygon, and the other is a shape made of several lines. Can you find the longest line that connects these two shapes in both 3D and 2D? The coordinates include numbers like 175 150 5."}
{"id": 421, "function": "ST_3DLongestLine", "question": "找出那个3D多边形和那些线条之间拉得最远的3D和2D线段的特别描述，分别叫做lol3d和lol2d。3D多边形有这些点：175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5。而那些线有这些点：175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1, 1 10 2, 5 20 1。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) AS lol3d, ST_AsEWKT(ST_LongestLine(poly, mline)) AS lol2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(175 150 5,1 10 2)", "LINESTRING(175 150,1 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2290, "question_en": "Find the special description for the longest 3D and 2D lines stretched between that 3D shape and those lines, known as lol3d and lol2d. The 3D shape has these points: 175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5. And those lines have these points: 175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1, 1 10 2, 5 20 1."}
{"id": 423, "function": "ST_3DLongestLine", "question": "找出在一个点和一条线之间最长的空间连线，还有平面上的最长连线，用一种特别的格式来表示，包含点(100 100 30)和线(20 80 20,98 190 1,110 180 3,50 75 1000)。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(50 75 1000,100 100 30)", "LINESTRING(98 190,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2299, "question_en": "Find the longest space connection between a point and a line, and also the longest connection on a plane, using a special format, involving point (100 100 30) and line (20 80 20, 98 190 1, 110 180 3, 50 75 1000)."}
{"id": 423, "function": "ST_3DLongestLine", "question": "找出(100 100 30)这个点和那些连起来的线之间，最长的连线在三维和二维里的特别描述。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(50 75 1000,100 100 30)", "LINESTRING(98 190,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2301, "question_en": "Find the special descriptions of the longest line between the point (100 100 30) and those connected lines in both 3D and 2D."}
{"id": 424, "function": "ST_MaxDistance", "question": "看看从起点零零到那条在二二重复的线之间能拉开的最远距离是多少。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 2, 2 2 )'::geometry);", "execution_result": [[2.8284271247461903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2304, "question_en": "Check how far you can stretch from the starting point at zero zero to that line repeating at two two."}
{"id": 424, "function": "ST_MaxDistance", "question": "找出从(0, 0)的小点到(2, 2)那条小线的最远距离是多少，并用小数来表示。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 2, 2 2 )'::geometry);", "execution_result": [[2.8284271247461903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2308, "question_en": "Find out what the farthest distance is from the little dot at (0, 0) to that little line at (2, 2), and show it as a decimal."}
{"id": 424, "function": "ST_MaxDistance", "question": "找出从那个起点在(0 0)到由两个在(2 2)重复的小点组成的线段之间，能拉到的最远距离。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 2, 2 2 )'::geometry);", "execution_result": [[2.8284271247461903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2305, "question_en": "Find the farthest distance you can stretch from that starting point at (0 0) to the line segment made of two repeated little dots at (2 2)."}
{"id": 422, "function": "ST_3DLongestLine", "question": "找出那些坐标集合中，多个小点和一条折线在三维空间里最远的那根线段，还有在平面上的最远线段，然后用某种格式标记出来。小点坐标有(100 100 30)和(50 74 1000)，折线经过(20 80 20)、(98 190 1)、(110 180 3)、(50 75 900)。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(98 190 1,50 74 1000)", "LINESTRING(98 190,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2294, "question_en": "Find the farthest line segment in 3D space between those sets of coordinates, some little dots and a zigzag line, and also the farthest segment on a flat surface, then mark them in some format. The little dots are at (100 100 30) and (50 74 1000), while the zigzag line passes through (20 80 20), (98 190 1), (110 180 3), (50 75 900)."}
{"id": 425, "function": "ST_MaxDistance", "question": "找出由那些点(10 10, 10 0, 0 0, 10 10)组成的两个一模一样的图形之间最远的距离。", "sql": "SELECT ST_MaxDistance('POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry, 'POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry);", "execution_result": [[14.142135623730951]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2310, "question_en": "Find out the farthest distance between two identical shapes made by those points (10 10, 10 0, 0 0, 10 10)."}
{"id": 425, "function": "ST_MaxDistance", "question": "找出那两个形状完全一样的图形之间最远的距离，它们的顶点是(10 10, 10 0, 0 0, 10 10)。", "sql": "SELECT ST_MaxDistance('POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry, 'POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry);", "execution_result": [[14.142135623730951]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2313, "question_en": "Find the longest distance between those two shapes that are exactly the same, with corners at (10 10, 10 0, 0 0, 10 10)."}
{"id": 425, "function": "ST_MaxDistance", "question": "找出两个一模一样的三角形之间最远的那段距离，这些小点的坐标是(10 10)、(10 0)、(0 0)、(10 10)。", "sql": "SELECT ST_MaxDistance('POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry, 'POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry);", "execution_result": [[14.142135623730951]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2311, "question_en": "Find the farthest stretch between two identical triangles, with these little dots having coordinates (10 10), (10 0), (0 0), (10 10)."}
{"id": 423, "function": "ST_3DLongestLine", "question": "找出那个点(100 100 30)和那串线(20 80 20,98 190 1,110 180 3,50 75 1000)之间最长的三维距离和二维距离，给我它们的特殊字符串。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(50 75 1000,100 100 30)", "LINESTRING(98 190,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2302, "question_en": "Find the longest 3D and 2D distance between that point (100 100 30) and that string of line (20 80 20,98 190 1,110 180 3,50 75 1000), and give me their special strings."}
{"id": 424, "function": "ST_MaxDistance", "question": "找出从那个在(0 0)的小点到由相同地方(2 2)开始和结束的线条之间最远的距离。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 2, 2 2 )'::geometry);", "execution_result": [[2.8284271247461903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2306, "question_en": "Find the farthest distance from that little dot at (0 0) to the line that starts and ends at the same spot (2 2)."}
{"id": 425, "function": "ST_MaxDistance", "question": "想知道两个一模一样的奇怪三角形，它们的顶点是(10 10)、(10 0)、(0 0)，之间最远能隔多远？", "sql": "SELECT ST_MaxDistance('POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry, 'POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry);", "execution_result": [[14.142135623730951]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2312, "question_en": "Wonder about how far apart two identical strange triangles, with corners at (10 10), (10 0), and (0 0), can be at most?"}
{"id": 424, "function": "ST_MaxDistance", "question": "找出从那个点(0 0)到那条线(2 2, 2 2)的最远离开的距离是多少。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 2, 2 2 )'::geometry);", "execution_result": [[2.8284271247461903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2307, "question_en": "Find out the furthest distance from that point (0 0) to that line (2 2, 2 2)."}
{"id": 424, "function": "ST_MaxDistance", "question": "找出(0 0)这个点和(2 2, 2 2)这条线之间最远的距离，结果要是个小数哦。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 2, 2 2 )'::geometry);", "execution_result": [[2.8284271247461903]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2309, "question_en": "Find the furthest distance between the point (0 0) and the line (2 2, 2 2), and the result should be a decimal."}
{"id": 423, "function": "ST_3DLongestLine", "question": "想知道从某个三维地方(100 100 30)到一条弯弯曲曲的三维路径(20 80 20, 98 190 1, 110 180 3, 50 75 1000)之间的最长那段，还有它们在平面上投影的最长部分，能用一种特别的格式给出来吗？", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(50 75 1000,100 100 30)", "LINESTRING(98 190,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2300, "question_en": "Can you find out the longest stretch from a 3D spot (100 100 30) to a winding 3D path (20 80 20, 98 190 1, 110 180 3, 50 75 1000), and also their longest part when projected on a flat surface, and give them in a special format?"}
{"id": 425, "function": "ST_MaxDistance", "question": "找出两个完全一样的形状，它们有这些点：10 10, 10 0, 0 0, 10 10，看看它们之间最远的两个点距离是多少。记得用小数来表示答案哦。", "sql": "SELECT ST_MaxDistance('POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry, 'POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry);", "execution_result": [[14.142135623730951]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2314, "question_en": "Find out the farthest distance between two identical shapes with these points: 10 10, 10 0, 0 0, 10 10. Make sure to express the answer as a decimal."}
{"id": 426, "function": "ST_MaxDistance", "question": "你能找出从这里的原点到那条连接(2 0)和(0 2)的线段，最远会有多远吗？", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2318, "question_en": "Can you find out how far it gets from the origin here to that line connecting (2 0) and (0 2)?"}
{"id": 425, "function": "ST_MaxDistance", "question": "找出两个完全一样的三角形之间最远的那段距离是多少，给我一个小数就好。形状是POLYGON ((10 10, 10 0, 0 0, 10 10)。", "sql": "SELECT ST_MaxDistance('POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry, 'POLYGON ((10 10, 10 0, 0 0, 10 10))'::geometry);", "execution_result": [[14.142135623730951]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2315, "question_en": "Figure out what the farthest distance between two identical triangles is, just give me a decimal number. The shape is POLYGON ((10 10, 10 0, 0 0, 10 10))."}
{"id": 426, "function": "ST_MaxDistance", "question": "找出从某个原点出发到一条从(2 0)到(0 2)的线段之间的最远距离是多少。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2319, "question_en": "Find out the farthest distance from a certain origin to a line segment running from (2 0) to (0 2)."}
{"id": 426, "function": "ST_MaxDistance", "question": "找出小点(0 0)和由(2 0)到(0 2)连成的路径之间最远的距离。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2317, "question_en": "Find the farthest distance between the little dot (0 0) and the path formed by connecting (2 0) to (0 2)."}
{"id": 426, "function": "ST_MaxDistance", "question": "你能告诉我从那个在0,0的小点到那条经过2,0和0,2的弯曲线的最远走法有多长吗？", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2316, "question_en": "Can you tell me how long the farthest path is from that little dot at 0,0 to the wavy line passing through 2,0 and 0,2?"}
{"id": 426, "function": "ST_MaxDistance", "question": "找出那个从点(0 0)到一条由(2 0)和(0 2)连接而成的线之间最远的距离是多少，用小数表示这个结果。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2321, "question_en": "Find out what the farthest distance is from the point (0 0) to a line connecting (2 0) and (0 2), and express this result as a decimal."}
{"id": 428, "function": "ST_MinimumClearance", "question": "看看由这些点(0 0)、(1 0)、(1 1)、(0.5 0.00032)、(0 0)连起来的那个形状，找出它们之间最小的间隙有多大。", "sql": "SELECT ST_MinimumClearance('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))');", "execution_result": [[0.00032]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2328, "question_en": "Take a look at the shape formed by these points (0 0), (1 0), (1 1), (0.5 0.00032), (0 0), and find out how small the gap between them is."}
{"id": 426, "function": "ST_MaxDistance", "question": "找出从那个在(0, 0)的小点到由(2, 0)和(0, 2)构成的线之间最远的距离是多少，结果是个小数。", "sql": "SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2320, "question_en": "Find out what the farthest distance is from that little dot at (0, 0) to the line made up of (2, 0) and (0, 2), and the result is a decimal."}
{"id": 427, "function": "ST_3DMaxDistance", "question": "计算一下在2163坐标系下，那些坐标点和曲线之间最远的三维和二维距离，点是(-72.1235 42.3521 10000)，曲线是(-72.1260 42.45 15, -72.123 42.1546 20)。", "sql": "SELECT ST_3DMaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_3d, ST_MaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_2d;", "execution_result": [[24383.746748844314, 22247.84721072526]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2326, "question_en": "Figure out the furthest 3D and 2D distances between those coordinates and the line in the 2163 coordinate system, where the point is (-72.1235 42.3521 10000) and the line is (-72.1260 42.45 15, -72.123 42.1546 20)."}
{"id": 427, "function": "ST_3DMaxDistance", "question": "算一下在一个特殊的坐标环境下，那颗在-72.1235和42.3521高10000的点和一条从-72.1260到-72.123之间的线段之间，三维空间和二维平面的最远距离是多少。", "sql": "SELECT ST_3DMaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_3d, ST_MaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_2d;", "execution_result": [[24383.746748844314, 22247.84721072526]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2327, "question_en": "Calculate in a special coordinate setting, the farthest distances in three-dimensional space and two-dimensional plane between a point at -72.1235, 42.3521 with a height of 10000 and a line segment stretching from -72.1260 to -72.123."}
{"id": 427, "function": "ST_3DMaxDistance", "question": "找出在2163这个特别的坐标系中，一个特别高的点(-72.1235 42.3521 10000)和一条由(-72.1260 42.45 15)到(-72.123 42.1546 20)的小线之间的三维和二维最遥远的距离，是什么呢？", "sql": "SELECT ST_3DMaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_3d, ST_MaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_2d;", "execution_result": [[24383.746748844314, 22247.84721072526]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2325, "question_en": "Find out the furthest distances, both 3D and 2D, between a very high point (-72.1235 42.3521 10000) and a tiny line connecting (-72.1260 42.45 15) to (-72.123 42.1546 20) in the special 2163 coordinate system."}
{"id": 427, "function": "ST_3DMaxDistance", "question": "找出那个高高的点和长长的线段之间，在某个转换后，两种距离的最大值，别忘了这个点在-72.1235 42.3521 10000，而线段经过-72.1260 42.45 15和-72.123 42.1546 20，最后结果叫dist_3d和dist_2d。", "sql": "SELECT ST_3DMaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_3d, ST_MaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_2d;", "execution_result": [[24383.746748844314, 22247.84721072526]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2324, "question_en": "Find the biggest distance between that tall point and the long line segment after some transformation, don't forget the point is at -72.1235 42.3521 10000, and the line goes through -72.1260 42.45 15 and -72.123 42.1546 20, with the final results named dist_3d and dist_2d."}
{"id": 427, "function": "ST_3DMaxDistance", "question": "找出一个在-72.1235经度、42.3521纬度、高度10000米的地方的小点，和由两个地方连成的线，一个在-72.1260经度、42.45纬度、高15米，另一个在-72.123经度、42.1546纬度、高20米的线之间，最大可能的三维和二维的距离，使用一种美国国家地图投影方式。", "sql": "SELECT ST_3DMaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_3d, ST_MaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_2d;", "execution_result": [[24383.746748844314, 22247.84721072526]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2323, "question_en": "Find out the maximum possible 3D and 2D distances between a tiny spot located at longitude -72.1235, latitude 42.3521, height 10,000 meters, and a line joining two places, one at longitude -72.1260, latitude 42.45, height 15 meters, and the other at longitude -72.123, latitude 42.1546, height 20 meters, using a kind of US national map projection way."}
{"id": 427, "function": "ST_3DMaxDistance", "question": "在某个投影坐标系里，看看那个高高的点(-72.1235 42.3521 10000)和那条线(-72.1260 42.45 15, -72.123 42.1546 20)之间，最大的三维和二维距离是多少呢？", "sql": "SELECT ST_3DMaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_3d, ST_MaxDistance( ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(-72.1235 42.3521 10000)'),2163), ST_Transform(ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163) ) AS dist_2d;", "execution_result": [[24383.746748844314, 22247.84721072526]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2322, "question_en": "In some projected coordinate system, find out the biggest 3D and 2D distance between that tall point (-72.1235 42.3521 10000) and that line (-72.1260 42.45 15, -72.123 42.1546 20)."}
{"id": 428, "function": "ST_MinimumClearance", "question": "找出那些点(0 0)、(1 0)、(1 1)、(0.5 0.00032)、(0 0)围成的封闭图形的最小间隙是多少。", "sql": "SELECT ST_MinimumClearance('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))');", "execution_result": [[0.00032]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2329, "question_en": "Find out what the smallest gap is for the closed shape made by those points (0 0), (1 0), (1 1), (0.5 0.00032), (0 0)."}
{"id": 423, "function": "ST_3DLongestLine", "question": "找出从点(100 100 30)到那条由(20 80 20, 98 190 1, 110 180 3, 50 75 1000)组成的线，最长的三维和二维的连接线是什么样子的，给我它们的那个特别长的描述方式。", "sql": "SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, ST_AsEWKT(ST_LongestLine(line,pt)) AS lol2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(50 75 1000,100 100 30)", "LINESTRING(98 190,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2303, "question_en": "Find out what the longest 3D and 2D connecting lines look like from the point (100 100 30) to the line made up of (20 80 20, 98 190 1, 110 180 3, 50 75 1000), and give me their particularly long description."}
{"id": 428, "function": "ST_MinimumClearance", "question": "看看由这些点构成的形状，像是(0 0)、(1 0)、(1 1)、(0.5 0.00032)、(0 0)，它最小能安全通过的距离是多少？", "sql": "SELECT ST_MinimumClearance('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))');", "execution_result": [[0.00032]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2331, "question_en": "Consider the shape formed by these points, like (0 0), (1 0), (1 1), (0.5 0.00032), (0 0). What is the smallest distance it can safely pass through?"}
{"id": 428, "function": "ST_MinimumClearance", "question": "找出由这些点(0 0)、(1 0)、(1 1)、(0.5 0.00032)、(0 0)围成的图形中，边与边之间最难挤进去的那个小距离。", "sql": "SELECT ST_MinimumClearance('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))');", "execution_result": [[0.00032]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2330, "question_en": "Find the trickiest small gap between the sides of the shape made by these points (0 0), (1 0), (1 1), (0.5 0.00032), (0 0)."}
{"id": 428, "function": "ST_MinimumClearance", "question": "找出那个多边形的最小距离值，形状是像这样围成的：0 0, 1 0, 1 1, 0.5 0.00032, 0 0。记得要用小数结果哦。", "sql": "SELECT ST_MinimumClearance('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))');", "execution_result": [[0.00032]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2333, "question_en": "Find the smallest distance value for that shape formed like this: 0 0, 1 0, 1 1, 0.5 0.00032, 0 0. Remember to use a decimal result."}
{"id": 429, "function": "ST_MinimumClearanceLine", "question": "对于那些连接点(0 0)、(1 0)、(1 1)、(0.5 0.00032)、(0 0)围成的形状，找出最小的间隔线，然后用某种格式显示结果。", "sql": "SELECT ST_AsText(ST_MinimumClearanceLine('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))'));", "execution_result": [["LINESTRING(0.5 0.00032,0.5 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2335, "question_en": "For the shape made by joining the dots (0 0), (1 0), (1 1), (0.5 0.00032), (0 0), find the smallest spacing line and show the result in some format."}
{"id": 429, "function": "ST_MinimumClearanceLine", "question": "给出一个形状，它是由这些点(0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0)围起来的，找出最小的那条安全线的WKT是什么？", "sql": "SELECT ST_AsText(ST_MinimumClearanceLine('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))'));", "execution_result": [["LINESTRING(0.5 0.00032,0.5 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2337, "question_en": "For a shape surrounded by these points (0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0), what is the WKT of the smallest safe line?"}
{"id": 430, "function": "ST_Perimeter", "question": "看看一个由这些坐标围成的形状，它的边有多长？先告诉我米数，然后换算成英尺。记得英尺是米数除以0.3048。", "sql": "SELECT ST_Perimeter(geog) AS per_meters, ST_Perimeter(geog)/0.3048 AS per_ft \nFROM ST_GeogFromText('POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))') AS geog;", "execution_result": [[37.379046253787024, 122.63466618696529]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2342, "question_en": "Check out the length of the sides of a shape formed by these coordinates. First, tell me in meters, then convert to feet. Remember, feet are meters divided by 0.3048."}
{"id": 429, "function": "ST_MinimumClearanceLine", "question": "想知道那个由点(0 0), (1 0), (1 1), (0.5 0.00032), (0 0)围成的形状，它里面的两个点之间最小的距离是什么样子，用那个特别的文本方式表示出来。", "sql": "SELECT ST_AsText(ST_MinimumClearanceLine('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))'));", "execution_result": [["LINESTRING(0.5 0.00032,0.5 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2338, "question_en": "I wonder what the smallest distance inside the shape formed by the points (0 0), (1 0), (1 1), (0.5 0.00032), (0 0) looks like, represented in that special text way."}
{"id": 429, "function": "ST_MinimumClearanceLine", "question": "对于那个有点像方形的区域，看看最小的空隙用一条什么样的线连起来，然后用一种文本格式告诉我。", "sql": "SELECT ST_AsText(ST_MinimumClearanceLine('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))'));", "execution_result": [["LINESTRING(0.5 0.00032,0.5 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2336, "question_en": "For that somewhat square-like area, see what kind of line connects the smallest gap, and then tell me in some text format."}
{"id": 430, "function": "ST_Perimeter", "question": "对于由那些坐标点组成的形状，找出它绕着边的总长度，给出一个是米的数值，还有一个是转换成英尺的数值。", "sql": "SELECT ST_Perimeter(geog) AS per_meters, ST_Perimeter(geog)/0.3048 AS per_ft FROM ST_GeogFromText('POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))') AS geog;", "execution_result": [[37.379046253787024, 122.63466618696529]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2343, "question_en": "For the shape made of those coordinate points, find the total length around the edges, providing one value in meters and another converted to feet."}
{"id": 429, "function": "ST_MinimumClearanceLine", "question": "给那个不规则形状的图形找出两点之间的最短连接线，记得把0.5 3.2e-4变成0.5 0.00032，然后告诉我它的文字描述。", "sql": "SELECT ST_AsText(ST_MinimumClearanceLine('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))'));", "execution_result": [["LINESTRING(0.5 0.00032,0.5 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2339, "question_en": "For that irregular shape, find the shortest connecting line between two points, remember to change 0.5 3.2e-4 to 0.5 0.00032, and then tell me its text description."}
{"id": 429, "function": "ST_MinimumClearanceLine", "question": "对于那些点组成的图形，像是(0,0)、(1,0)、(1,1)、(0.5,0.00032)、(0,0)，找出它们之间最小的那条线，然后用一种特定的文字格式来表示吧。", "sql": "SELECT ST_AsText(ST_MinimumClearanceLine('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))'));", "execution_result": [["LINESTRING(0.5 0.00032,0.5 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2334, "question_en": "For that shape made of points like (0,0), (1,0), (1,1), (0.5,0.00032), (0,0), find the smallest line between them and express it in a certain text format."}
{"id": 428, "function": "ST_MinimumClearance", "question": "求那个围起来的形状的最小间距是多少，记得要浮点数哦，形状是由这些点组成：0 0, 1 0, 1 1, 0.5 0.00032, 0 0。", "sql": "SELECT ST_MinimumClearance('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))');", "execution_result": [[0.00032]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2332, "question_en": "Find out what the smallest spacing is for that enclosed shape, and make sure it's a floating-point number. The shape is made from these points: 0 0, 1 0, 1 1, 0.5 0.00032, 0 0."}
{"id": 430, "function": "ST_Perimeter", "question": "能告诉我关于那个由点组成的小形状的边界长度吗？就是(-71.1776848522251 42.3902896512902, -71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917, -71.1775825927231 42.3902893647987, -71.1776848522251 42.3902896512902)这几个点围起来的那个形状，用英尺来量哦。", "sql": "SELECT ST_Perimeter(geog)/0.3048 AS perimeter_feet FROM ST_GeogFromText('POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))') AS geog;", "execution_result": [[122.63466618696529]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2344, "question_en": "Can you tell me the boundary length of that little shape made up of points? You know, the one surrounded by the points (-71.1776848522251 42.3902896512902, -71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917, -71.1775825927231 42.3902893647987, -71.1776848522251 42.3902896512902), measured in feet."}
{"id": 430, "function": "ST_Perimeter", "question": "看看用这些点(-71.1776848522251 42.3902896512902)、(-71.1776843766326 42.3903829478009)、(-71.1775844305465 42.3903826677917)、(-71.1775825927231 42.3902893647987)围成的小圈圈有多长，并告诉我用米和英尺计算的结果。", "sql": "SELECT ST_Perimeter(geog) AS per_meters, ST_Perimeter(geog)/0.3048 AS per_ft FROM ST_GeogFromText('POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))') AS geog;", "execution_result": [[37.379046253787024, 122.63466618696529]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2340, "question_en": "Check how long the little loop made by these points (-71.1776848522251 42.3902896512902), (-71.1776843766326 42.3903829478009), (-71.1775844305465 42.3903826677917), (-71.1775825927231 42.3902893647987) is, and let me know the results in meters and feet."}
{"id": 430, "function": "ST_Perimeter", "question": "计算一个形状的外边缘长度，用那些坐标点来画出来。结果要有两个单位，一个是米，另一个是英尺，米的数值要除以0.3048来得到英尺的数值。", "sql": "SELECT ST_Perimeter(geog) AS per_meters, ST_Perimeter(geog)/0.3048 AS per_ft \nFROM ST_GeogFromText('POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))') AS geog;", "execution_result": [[37.379046253787024, 122.63466618696529]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2345, "question_en": "Calculate the outer edge length of a shape drawn using those coordinates. The result should be in two units, one in meters and the other in feet, where the meter value is divided by 0.3048 to get the feet value."}
{"id": 430, "function": "ST_Perimeter", "question": "想知道这些点连起来的形状有多长吗？用米和英尺两种方式来看看结果吧，这些点是(-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902)哦。顺便，英尺和米的转换是1英尺等于0.3048米。", "sql": "SELECT ST_Perimeter(geog) AS per_meters, ST_Perimeter(geog)/0.3048 AS per_ft \nFROM ST_GeogFromText('POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902))') AS geog;", "execution_result": [[37.379046253787024, 122.63466618696529]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2341, "question_en": "Curious about how long the shape made by these points is? Let's see the result in both meters and feet. The points are (-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009, -71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902). By the way, the conversion is 1 foot equals 0.3048 meters."}
{"id": 431, "function": "ST_Perimeter", "question": "找出一个特别的多边形，顶点坐标是那些数字：743238 2967416、743238 2967450、743265 2967450、743265.625 2967416，然后又回到开头那个点，看看它的周边长是多少。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450, 743265.625 2967416,743238 2967416))', 2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2347, "question_en": "Identify a special shape with corners at those numbers: 743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, and then return to the starting point, and see how long its border is."}
{"id": 431, "function": "ST_Perimeter", "question": "找出由这些点(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)围成的形状在某个特别地图框架下的边长总和。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450, 743265.625 2967416,743238 2967416))', 2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2346, "question_en": "Find the total length of the sides for the shape enclosed by these points (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416) in a specific map framework."}
{"id": 431, "function": "ST_Perimeter", "question": "能不能告诉我一个四边形的外圈长度？它的角是这样的，(743238 2967416)、(743238 2967450)、(743265 2967450)、(743265.625 2967416)，最后再回到第一个点。这个图形好像和编号2249有关。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450, 743265.625 2967416,743238 2967416))', 2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2348, "question_en": "Could you tell me the outer length of a four-cornered shape? Its corners are like this, (743238 2967416), (743238 2967450), (743265 2967450), (743265.625 2967416), and then it goes back to the first point. This shape seems to be related to number 2249."}
{"id": 431, "function": "ST_Perimeter", "question": "给定一些坐标点，比如743238 2967416到743265.625 2967416，想知道这些点围成的图形在某种地图框架下有多长的边界。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450, 743265.625 2967416,743238 2967416))', 2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2349, "question_en": "Given some coordinate points like 743238 2967416 to 743265.625 2967416, want to know how long the boundary of the shape they form is in a certain map framework."}
{"id": 431, "function": "ST_Perimeter", "question": "求一个由这些点(743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)组成的闭合形状在某个2249参考系下围起来的边长是多少。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450, 743265.625 2967416,743238 2967416))', 2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2350, "question_en": "Find out the length of the edges that a closed shape made by these points (743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416) wraps around in some 2249 reference framework."}
{"id": 431, "function": "ST_Perimeter", "question": "给我一个用这些点围成的形状的周长是多少？它们是743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416，记得用浮点数来表示哦。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450, 743265.625 2967416,743238 2967416))', 2249));", "execution_result": [[122.63074400009504]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2351, "question_en": "What's the perimeter of a shape made with these points: 743238 2967416, 743238 2967450, 743265 2967450, 743265.625 2967416, 743238 2967416? Remember to express it as a floating-point number."}
{"id": 432, "function": "ST_Perimeter", "question": "能告诉我那些坐标点构成的形状在2249这个系统里的周围边长是多少吗？坐标点有763104.471273676 2949418.44119003，763104.477769673 2949418.42538203，还有其他一些点。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003)))', 2249));", "execution_result": [[845.2277133668246]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2355, "question_en": "Can you tell me the length around the shape made by those coordinates in system 2249? The coordinates include 763104.471273676 2949418.44119003, 763104.477769673 2949418.42538203, and some other points."}
{"id": 432, "function": "ST_Perimeter", "question": "想象有两个由小点组成的形状，它们的坐标是763104.471273676 2949418.44119003和其他一大串数字。找出这两个形状的边界线长度，并以小数形式呈现结果。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003)))', 2249));", "execution_result": [[845.2277133668246]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2357, "question_en": "Imagine there are two shapes made of little dots, with coordinates starting at 763104.471273676 2949418.44119003 and a long list of others. Find the length of the boundary lines of these shapes and present the result as a decimal."}
{"id": 433, "function": "ST_Perimeter", "question": "对于那个由很多小点组成的奇怪形状，我想知道它的三个边界长度：一个以米为单位的普通长度，一个以米为单位的球形长度，还有一个长度是用英尺来计算的。", "sql": "SELECT ST_Perimeter(geog) As per_meters, ST_Perimeter(geog,false) As per_sphere_meters, ST_Perimeter(geog)/0.3048 As per_ft \nFROM ST_GeogFromText('MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))') As geog;", "execution_result": [[257.6342836842405, 257.41231144633684, 845.2568362343848]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2362, "question_en": "For that odd shape made up of many little dots, I want to know its three boundary lengths: one is the regular length in meters, another is the spherical length in meters, and the last one is the length calculated in feet."}
{"id": 433, "function": "ST_Perimeter", "question": "看看由这些坐标点(-71.1044543107478 42.340674480411)、(-71.1044542869917 42.3406744369506)、(-71.1044553562977 42.340673886454)等组成的形状，能不能用米、球面米和英尺来描述它绕一圈的长度呢？", "sql": "SELECT ST_Perimeter(geog) As per_meters, ST_Perimeter(geog,false) As per_sphere_meters, ST_Perimeter(geog)/0.3048 As per_ft \nFROM ST_GeogFromText('MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))') As geog;", "execution_result": [[257.6342836842405, 257.41231144633684, 845.2568362343848]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2358, "question_en": "Can we figure out the length around the shape made from these coordinates (-71.1044543107478 42.340674480411), (-71.1044542869917 42.3406744369506), (-71.1044553562977 42.340673886454), etc., using meters, spherical meters, and feet?"}
{"id": 433, "function": "ST_Perimeter", "question": "给定一组坐标形成的复杂形状，计算三个不同的长度值：一个是平面上的长度，另一个是地球表面的长度，最后一个是转换成英尺的长度。坐标包括(-71.1044543107478 42.340674480411)等等。", "sql": "SELECT ST_Perimeter(geog) As per_meters, ST_Perimeter(geog,false) As per_sphere_meters, ST_Perimeter(geog)/0.3048 As per_ft \nFROM ST_GeogFromText('MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))') As geog;", "execution_result": [[257.6342836842405, 257.41231144633684, 845.2568362343848]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2361, "question_en": "Given a complex shape formed by a set of coordinates, calculate three different length values: one on a flat surface, another on the Earth's surface, and the last converted to feet. The coordinates include (-71.1044543107478 42.340674480411) and others."}
{"id": 433, "function": "ST_Perimeter", "question": "看看那些坐标构成的形状，想知道它的边有多长吗？可以用这些小点算出它在平面上和地球上的长度，分别用米和英尺来表示。", "sql": "SELECT ST_Perimeter(geog) As per_meters, ST_Perimeter(geog,false) As per_sphere_meters, ST_Perimeter(geog)/0.3048 As per_ft \nFROM ST_GeogFromText('MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))') As geog;", "execution_result": [[257.6342836842405, 257.41231144633684, 845.2568362343848]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2360, "question_en": "Looking at the shape formed by those coordinates, do you want to know how long its edges are? You can use these little dots to calculate its length on a plane and on the globe, expressed in meters and feet respectively."}
{"id": 434, "function": "ST_3DPerimeter", "question": "在2249这个编号的坐标系统里，找出覆盖点(743238, 2967416, 2)、(743238, 2967450, 1)、(743265.625, 2967416, 1)、(743238, 2967416, 2)的形状的几种不同长度。", "sql": "SELECT ST_3DPerimeter(geom), ST_Perimeter2d(geom), ST_Perimeter(geom) FROM (SELECT ST_GeomFromEWKT('SRID=2249;POLYGON((743238 2967416 2,743238 2967450 1, 743265.625 2967416 1,743238 2967416 2))') AS geom) AS foo;", "execution_result": [[105.46579359767418, 105.43299727218763, 105.43299727218763]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2364, "question_en": "In the coordinate system numbered 2249, find the different lengths of the shape covering the points (743238, 2967416, 2), (743238, 2967450, 1), (743265.625, 2967416, 1), (743238, 2967416, 2)."}
{"id": 434, "function": "ST_3DPerimeter", "question": "有个三维的形状，它用四个点围成一个圈，点在(743238 2967416 2)、(743238 2967450 1)、(743265.625 2967416 1)和(743238 2967416 2)这些地方。你能算出这个形状的三维周长、平面上看起来的周长，还有默认情况下的周长吗？", "sql": "SELECT ST_3DPerimeter(geom), ST_Perimeter2d(geom), ST_Perimeter(geom) \nFROM (SELECT ST_GeomFromEWKT('SRID=2249;POLYGON((743238 2967416 2,743238 2967450 1, 743265.625 2967416 1,743238 2967416 2))') AS geom) AS foo;", "execution_result": [[105.46579359767418, 105.43299727218763, 105.43299727218763]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2365, "question_en": "There's a 3D shape made by four points forming a loop, with points at (743238 2967416 2), (743238 2967450 1), (743265.625 2967416 1), and (743238 2967416 2). Can you figure out its 3D perimeter, how long it looks on a flat surface, and its usual perimeter?"}
{"id": 435, "function": "ST_ShortestLine", "question": "找出从点160 40到那些连接的坐标串之间的最短路径，并用某种格式展示。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)') ) AS sline;", "execution_result": [["LINESTRING(160 40,125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2370, "question_en": "Find the shortest path from the point 160 40 to that series of connected coordinates, and display it in some format."}
{"id": 435, "function": "ST_ShortestLine", "question": "找出在那些坐标间，点160 40和一串连起来的线之间最近的连接线，用一种特殊格式来描述它。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)') ) AS sline;", "execution_result": [["LINESTRING(160 40,125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2371, "question_en": "Find the closest link between the point 160 40 and a series of connected lines among those coordinates, and describe it in a special format."}
{"id": 432, "function": "ST_Perimeter", "question": "想象一下有一个复杂的几何形状，由两个图形组成。第一个图形是一个小形状，有四个点，这些点的坐标是(763104.471273676 2949418.44119003)、(763104.477769673 2949418.42538203)、(763104.189609677 2949418.22343004)、(763104.471273676 2949418.44119003)。第二个图形有更多的点，有十五个，坐标从(763104.471273676 2949418.44119003)开始，最后回到同一个点。现在，想知道这个大形状的周围一圈有多长。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003)))', 2249));", "execution_result": [[845.2277133668246]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2354, "question_en": "Imagine a complex shape made up of two figures. The first figure is a small shape with four points, having coordinates (763104.471273676 2949418.44119003), (763104.477769673 2949418.42538203), (763104.189609677 2949418.22343004), (763104.471273676 2949418.44119003). The second figure has more points, fifteen in total, starting at (763104.471273676 2949418.44119003) and ending back at the same point. Now, figure out how long it is all around this big shape."}
{"id": 434, "function": "ST_3DPerimeter", "question": "看看那个由点(743238 2967416 2), (743238 2967450 1), (743265.625 2967416 1), (743238 2967416 2)围成的立体形状，在某个2249的坐标环境下，能产生什么样的长度呢？有三种，像是立体的、平面的，还有一种一般的。", "sql": "SELECT ST_3DPerimeter(geom), ST_Perimeter2d(geom), ST_Perimeter(geom) FROM (SELECT ST_GeomFromEWKT('SRID=2249;POLYGON((743238 2967416 2,743238 2967450 1, 743265.625 2967416 1,743238 2967416 2))') AS geom) AS foo;", "execution_result": [[105.46579359767418, 105.43299727218763, 105.43299727218763]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2367, "question_en": "Imagine that 3D shape made from the points (743238 2967416 2), (743238 2967450 1), (743265.625 2967416 1), (743238 2967416 2) in some kind of 2249 coordinate setting, what kinds of lengths can it produce? There are three, like one for 3D, one for flat surfaces, and another general one."}
{"id": 434, "function": "ST_3DPerimeter", "question": "对于那些在EWKT格式里用编号2249画出的三维小多边形，想知道从(743238,2967416,2)到(743238,2967450,1)再到(743265.625,2967416,1)然后回到最初的点(743238,2967416,2)的路径长度有多长，分别从三维看、二维看和一般的看法。", "sql": "SELECT ST_3DPerimeter(geom), ST_Perimeter2d(geom), ST_Perimeter(geom) \nFROM (SELECT ST_GeomFromEWKT('SRID=2249;POLYGON((743238 2967416 2,743238 2967450 1, 743265.625 2967416 1,743238 2967416 2))') AS geom) AS foo;", "execution_result": [[105.46579359767418, 105.43299727218763, 105.43299727218763]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2366, "question_en": "For the little 3D polygon drawn in EWKT format with the number 2249, I want to know the path length from (743238,2967416,2) to (743238,2967450,1) to (743265.625,2967416,1) and then back to the starting point (743238,2967416,2), looking from a 3D, 2D, and general perspective."}
{"id": 432, "function": "ST_Perimeter", "question": "有两个形状，一个由几个点围起来，另一个像一条长长的链子。它们是用编号2249的坐标系标记的，你能帮我算一下它们的边缘长度吗？第一个形状的点是(763104.471273676 2949418.44119003)、(763104.477769673 2949418.42538203)、(763104.189609677 2949418.22343004)、(763104.471273676 2949418.44119003)。第二个形状的点是(763104.471273676 2949418.44119003)、(763095.804579742 2949436.33850239)、(763086.132105649 2949451.46730207)、(763078.452329651 2949462.11549407)、(763075.354136904 2949466.17407812)、(763064.362142565 2949477.64291974)、(763059.953961626 2949481.28983009)、(762994.637609571 2949532.04103014)、(762990.568508415 2949535.06640477)、(762986.710889563 2949539.61421415)、(763117.237897679 2949709.50493431)、(763235.236617789 2949617.95619822)、(763287.718121842 2949562.20592617)、(763111.553321674 2949423.91664605)、(763104.471273676 2949418.44119003)。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003)))', 2249));", "execution_result": [[845.2277133668246]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2353, "question_en": "There are two shapes, one surrounded by several dots, and the other like a long chain. They are marked using coordinate system number 2249. Can you help me figure out the length around them? The first shape's dots are (763104.471273676 2949418.44119003), (763104.477769673 2949418.42538203), (763104.189609677 2949418.22343004), (763104.471273676 2949418.44119003). The second shape's dots are (763104.471273676 2949418.44119003), (763095.804579742 2949436.33850239), (763086.132105649 2949451.46730207), (763078.452329651 2949462.11549407), (763075.354136904 2949466.17407812), (763064.362142565 2949477.64291974), (763059.953961626 2949481.28983009), (762994.637609571 2949532.04103014), (762990.568508415 2949535.06640477), (762986.710889563 2949539.61421415), (763117.237897679 2949709.50493431), (763235.236617789 2949617.95619822), (763287.718121842 2949562.20592617), (763111.553321674 2949423.91664605), (763104.471273676 2949418.44119003)."}
{"id": 434, "function": "ST_3DPerimeter", "question": "有一个形状是POLYGON((743238 2967416 2,743238 2967450 1,743265.625 2967416 1,743238 2967416 2))，你能告诉我这个形状在不同维度下的周长是多少吗？请提供三个数字，别忘了这个形状跟编号2249有关系。", "sql": "SELECT ST_3DPerimeter(geom), ST_Perimeter2d(geom), ST_Perimeter(geom) \nFROM (SELECT ST_GeomFromEWKT('SRID=2249;POLYGON((743238 2967416 2,743238 2967450 1, 743265.625 2967416 1,743238 2967416 2))') AS geom) AS foo;", "execution_result": [[105.46579359767418, 105.43299727218763, 105.43299727218763]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2368, "question_en": "There's a shape like POLYGON((743238 2967416 2,743238 2967450 1,743265.625 2967416 1,743238 2967416 2)), can you tell me how long its perimeter is in different dimensions? Please give me three numbers, and don't forget this shape is related to the number 2249."}
{"id": 432, "function": "ST_Perimeter", "question": "能不能帮我看看那个由两个小形状组成的东西，它有一堆数字像763104.471273676 2949418.44119003这些，看看它周围的距离是多少？", "sql": "SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003)))', 2249));", "execution_result": [[845.2277133668246]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2356, "question_en": "Could you help me figure out the distance around that thing made of two little shapes, with numbers like 763104.471273676 2949418.44119003, to see how far it goes around?"}
{"id": 434, "function": "ST_3DPerimeter", "question": "给出一个编号2249的小图形，它由一些点组成，比如(743238 2967416 2), (743238 2967450 1)等等。你能告诉我这个形状在三维空间和二维平面里绕一圈有多长吗？另外，自动算的那个长度是多少呢？要三个数字哦。", "sql": "SELECT ST_3DPerimeter(geom), ST_Perimeter2d(geom), ST_Perimeter(geom) \nFROM (SELECT ST_GeomFromEWKT('SRID=2249;POLYGON((743238 2967416 2,743238 2967450 1, 743265.625 2967416 1,743238 2967416 2))') AS geom) AS foo;", "execution_result": [[105.46579359767418, 105.43299727218763, 105.43299727218763]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2369, "question_en": "Here's a shape labeled 2249, made of points like (743238 2967416 2), (743238 2967450 1), and so on. Can you tell me how long it is if you walk around it in 3D space and in a flat plane? Also, what's the automatically calculated length? I need three numbers."}
{"id": 435, "function": "ST_ShortestLine", "question": "找出从小点(160 40)到那串线(10 30,50 50,30 110,70 90,180 140,130 190)之间的最短路径，并用某种文本方式表达。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)') ) AS sline;", "execution_result": [["LINESTRING(160 40,125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2373, "question_en": "Find the shortest path from the little dot (160 40) to that string of lines (10 30,50 50,30 110,70 90,180 140,130 190), and express it in some text form."}
{"id": 435, "function": "ST_ShortestLine", "question": "找出从那个点160 40到由这些坐标组成的线10 30, 50 50, 30 110, 70 90, 180 140, 130 190之间的最短路径，然后用某种格式来表示结果。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)') ) AS sline;", "execution_result": [["LINESTRING(160 40,125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2372, "question_en": "Find the shortest path from that point 160 40 to the line made by these coordinates 10 30, 50 50, 30 110, 70 90, 180 140, 130 190, and then represent the result in some format."}
{"id": 432, "function": "ST_Perimeter", "question": "看看这些点：763104.471273676 2949418.44119003, 763104.477769673 2949418.42538203, 763104.189609677 2949418.22343004, 763104.471273676 2949418.44119003，还有763104.471273676 2949418.44119003, 763095.804579742 2949436.33850239, 763086.132105649 2949451.46730207, 763078.452329651 2949462.11549407, 763075.354136904 2949466.17407812, 763064.362142565 2949477.64291974, 763059.953961626 2949481.28983009, 762994.637609571 2949532.04103014, 762990.568508415 2949535.06640477, 762986.710889563 2949539.61421415, 763117.237897679 2949709.50493431, 763235.236617789 2949617.95619822, 763287.718121842 2949562.20592617, 763111.553321674 2949423.91664605, 763104.471273676 2949418.44119003，想象它们围成一个大形状。我们需要知道这个大形状在某个特别的空间里绕了一圈有多长。这个空间标记为2249。", "sql": "SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 2949418.44119003,763104.477769673 2949418.42538203,763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,763104.471273676 2949418.44119003)))', 2249));", "execution_result": [[845.2277133668246]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2352, "question_en": "Consider these points: 763104.471273676 2949418.44119003, 763104.477769673 2949418.42538203, 763104.189609677 2949418.22343004, 763104.471273676 2949418.44119003, and 763104.471273676 2949418.44119003, 763095.804579742 2949436.33850239, 763086.132105649 2949451.46730207, 763078.452329651 2949462.11549407, 763075.354136904 2949466.17407812, 763064.362142565 2949477.64291974, 763059.953961626 2949481.28983009, 762994.637609571 2949532.04103014, 762990.568508415 2949535.06640477, 762986.710889563 2949539.61421415, 763117.237897679 2949709.50493431, 763235.236617789 2949617.95619822, 763287.718121842 2949562.20592617, 763111.553321674 2949423.91664605, 763104.471273676 2949418.44119003. Imagine them forming a big shape. We need to know how long it goes around this big shape in a special space marked as 2249."}
{"id": 433, "function": "ST_Perimeter", "question": "你能帮我算一下由那些坐标点组成的大形状的长度吗？我想知道它在地球上的距离、椭球体模式下的距离，还有如果用英尺来表示的话会是多少。这个大形状包含两个部分：一个有四个点，像这样((-71.1044543107478 42.340674480411), (-71.1044542869917 42.3406744369506), (-71.1044553562977 42.340673886454), (-71.1044543107478 42.340674480411))，另一个有十五个点，像这样((-71.1044543107478 42.340674480411), (-71.1044860600303 42.3407237015564), (-71.1045215770124 42.3407653385914), (-71.1045498002983 42.3407946553165), (-71.1045611902745 42.3408058316308), (-71.1046016507427 42.340837442371), (-71.104617893173 42.3408475056957), (-71.1048586153981 42.3409875993595), (-71.1048736143677 42.3409959528211), (-71.1048878050242 42.3410084812078), (-71.1044020965803 42.3414730072048), (-71.1039672113619 42.3412202916693), (-71.1037740497748 42.3410666421308), (-71.1044280218456 42.3406894151355), (-71.1044543107478 42.340674480411))。", "sql": "SELECT ST_Perimeter(geog) As per_meters, ST_Perimeter(geog,false) As per_sphere_meters, ST_Perimeter(geog)/0.3048 As per_ft \nFROM ST_GeogFromText('MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))') As geog;", "execution_result": [[257.6342836842405, 257.41231144633684, 845.2568362343848]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2359, "question_en": "Could you help me figure out the length of that big shape made up of those coordinates? I want to know its distance on Earth, its distance under the ellipsoid model, and how much it would be if expressed in feet. This big shape includes two parts: one with four points, like this ((-71.1044543107478 42.340674480411), (-71.1044542869917 42.3406744369506), (-71.1044553562977 42.340673886454), (-71.1044543107478 42.340674480411)), and another with fifteen points, like this ((-71.1044543107478 42.340674480411), (-71.1044860600303 42.3407237015564), (-71.1045215770124 42.3407653385914), (-71.1045498002983 42.3407946553165), (-71.1045611902745 42.3408058316308), (-71.1046016507427 42.340837442371), (-71.104617893173 42.3408475056957), (-71.1048586153981 42.3409875993595), (-71.1048736143677 42.3409959528211), (-71.1048878050242 42.3410084812078), (-71.1044020965803 42.3414730072048), (-71.1039672113619 42.3412202916693), (-71.1037740497748 42.3410666421308), (-71.1044280218456 42.3406894151355), (-71.1044543107478 42.340674480411))."}
{"id": 435, "function": "ST_ShortestLine", "question": "找出在(160 40)这个位置的小点和连接着(10 30), (50 50), (30 110), (70 90), (180 140), (130 190)那些点的线之间的最短路径，然后用某种文本格式告诉我。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)') ) AS sline;", "execution_result": [["LINESTRING(160 40,125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2374, "question_en": "Find the shortest path between the small dot at (160 40) and the line connecting those points at (10 30), (50 50), (30 110), (70 90), (180 140), (130 190), then tell me in some kind of text format."}
{"id": 433, "function": "ST_Perimeter", "question": "给出那些复杂图形的三个长度值，一个是平面的米数，一个是球面的米数，还有一个是转换成英尺的。坐标是((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))。", "sql": "SELECT ST_Perimeter(geog) As per_meters, ST_Perimeter(geog,false) As per_sphere_meters, ST_Perimeter(geog)/0.3048 As per_ft \nFROM ST_GeogFromText('MULTIPOLYGON(((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))') As geog;", "execution_result": [[257.6342836842405, 257.41231144633684, 845.2568362343848]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2363, "question_en": "Give the three length values for those complex shapes, one in meters for the flat surface, one in meters for the spherical surface, and one converted to feet. The coordinates are ((-71.1044543107478 42.340674480411,-71.1044542869917 42.3406744369506,-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),((-71.1044543107478 42.340674480411,-71.1044860600303 42.3407237015564,-71.1045215770124 42.3407653385914,-71.1045498002983 42.3407946553165,-71.1045611902745 42.3408058316308,-71.1046016507427 42.340837442371,-71.104617893173 42.3408475056957,-71.1048586153981 42.3409875993595,-71.1048736143677 42.3409959528211,-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))."}
{"id": 435, "function": "ST_ShortestLine", "question": "找出从160 40这个点到那条穿过(10 30), (50 50), (30 110), (70 90), (180 140), (130 190)这些位置的线的最短路径，然后告诉我它的形状是什么。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POINT (160 40)', 'LINESTRING (10 30, 50 50, 30 110, 70 90, 180 140, 130 190)') ) AS sline;", "execution_result": [["LINESTRING(160 40,125.75342465753425 115.34246575342466)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2375, "question_en": "Find the shortest path from the point at 160 40 to that line passing through these spots: (10 30), (50 50), (30 110), (70 90), (180 140), (130 190), then tell me what its shape looks like."}
{"id": 436, "function": "ST_ShortestLine", "question": "找出连接那三个点形成的形状和围绕(80,160)点的圆圈的最短路径，然后用某种格式说出来。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(131.59149149528952 101.89887534906195,101.21320343559643 138.78679656440357)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2376, "question_en": "Find the shortest path linking the shape formed by those three points and the circle around the point (80,160), then state it in some format."}
{"id": 436, "function": "ST_ShortestLine", "question": "找出由这些点(190 150)、(20 10)、(160 70)围成的图形和一个围绕点(80 160)、像30大小的圆圈之间的最短连接线，然后用某种格式显示这条线。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(131.59149149528952 101.89887534906195,101.21320343559643 138.78679656440357)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2378, "question_en": "Find the shortest connection between the shape formed by these points (190 150), (20 10), (160 70) and a circle around point (80 160) with a size like 30, then show this line in some format."}
{"id": 437, "function": "ST_3DShortestLine", "question": "找出从那个在(100 100 30)的小点到那些连起来的点(20 80 20,98 190 1,110 180 3,50 75 1000)之间的最短路径，不管是高高的还是平平的，然后用某种标准格式说出来。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(73.07692307692307 115.38461538461539,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2382, "question_en": "Figure out the shortest path from that little dot at (100 100 30) to those connected points (20 80 20,98 190 1,110 180 3,50 75 1000), whether it's high up or flat, and then describe it in some standard format."}
{"id": 436, "function": "ST_ShortestLine", "question": "找到从那些点组成的多边形到围绕着点(80 160)的圆形区域之间的最短路径，圆的大小是30个单位，把结果用某种文本格式表示。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(131.59149149528952 101.89887534906195,101.21320343559643 138.78679656440357)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2381, "question_en": "Find the shortest path from the polygon made of those points to the circular area around the point (80 160), where the circle is 30 units in size, and show the result in some text format."}
{"id": 436, "function": "ST_ShortestLine", "question": "给我看看从那个由(190,150)、(20,10)、(160,70)这些点围成的形状到一个圆圈的最短路径，这个圆圈围着(80,160)这个点，半径是30。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(131.59149149528952 101.89887534906195,101.21320343559643 138.78679656440357)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2379, "question_en": "Show me the shortest path from the shape formed by points (190,150), (20,10), (160,70) to a circle around the point (80,160), where the circle has a radius of 30."}
{"id": 436, "function": "ST_ShortestLine", "question": "找出一个形状，它从那些点组成的图形，像是(190 150, 20 10, 160 70, 190 150)的样子，连接到一个圆圈，这个圆圈的中心在(80 160)并且半径是30单位，然后把这个连接的线变成一种特别的字符串格式。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(131.59149149528952 101.89887534906195,101.21320343559643 138.78679656440357)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2380, "question_en": "Find a shape that connects the figure made of those points, like (190 150, 20 10, 160 70, 190 150), to a circle whose center is at (80 160) and has a radius of 30 units, then turn this connecting line into a special string format."}
{"id": 436, "function": "ST_ShortestLine", "question": "想象一个由这些点组成的形状：(190 150)、(20 10)、(160 70)、(190 150)，然后再想一个以(80 160)为中心、半径为30的小圆。请找出这两个之间的最短距离，并用某种格式描述。", "sql": "SELECT ST_AsText( ST_ShortestLine( 'POLYGON ((190 150, 20 10, 160 70, 190 150))', ST_Buffer('POINT(80 160)', 30) ) ) AS llinewkt;", "execution_result": [["LINESTRING(131.59149149528952 101.89887534906195,101.21320343559643 138.78679656440357)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2377, "question_en": "Imagine a shape made from these points: (190 150), (20 10), (160 70), (190 150), and then think of a small circle centered at (80 160) with a radius of 30. Please find the shortest distance between these two and describe it in some format."}
{"id": 437, "function": "ST_3DShortestLine", "question": "找出那颗三维小点(100 100 30)和一条弯弯曲曲的三维路径(20 80 20, 98 190 1, 110 180 3, 50 75 1000)之间在三维和二维空间里最近的路，并把结果用EWKT格式分别叫做shl3d_line_pt和shl2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(73.07692307692307 115.38461538461539,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2383, "question_en": "Find the shortest path between that little 3D dot (100 100 30) and a winding 3D path (20 80 20, 98 190 1, 110 180 3, 50 75 1000) in both 3D and 2D spaces, and call the results shl3d_line_pt and shl2d_line_pt in EWKT format."}
{"id": 437, "function": "ST_3DShortestLine", "question": "找出在空中漂浮的那个点和一条曲线之间，它们在三维世界里和二维平面上的最短路径，记得用那些神奇的坐标：100 100 30 和一串20 80 20, 98 190 1, 110 180 3, 50 75 1000。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(73.07692307692307 115.38461538461539,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2386, "question_en": "Identify the shortest path in both the 3D realm and the 2D plane between that floating point and a curve, using those magical coordinates: 100 100 30 and a series of 20 80 20, 98 190 1, 110 180 3, 50 75 1000."}
{"id": 437, "function": "ST_3DShortestLine", "question": "给出在(100 100 30)这个点和一条从(20 80 20)经过(98 190 1)、(110 180 3)、到(50 75 1000)的线之间，三维和二维最短的那条线的神秘代码。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(73.07692307692307 115.38461538461539,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2387, "question_en": "Provide the mysterious code for the shortest line in both 3D and 2D between the point at (100 100 30) and a line passing through (20 80 20), (98 190 1), (110 180 3), to (50 75 1000)."}
{"id": 438, "function": "ST_3DShortestLine", "question": "找出从那些点画成的形状到另一组线条之间的两种最短连线，一种考虑高低，一种是平面上的。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(poly, mline)) AS shl3d, ST_AsEWKT(ST_ShortestLine(poly, mline)) AS shl2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(40.45454545454545 53.63636363636364 5,40.45454545454545 53.63636363636364 5)", "LINESTRING(20 40,20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2388, "question_en": "Find the two types of shortest connections from the shape made by those points to another set of line segments, one considering height and the other on a flat surface."}
{"id": 437, "function": "ST_3DShortestLine", "question": "给出从POINT(100 100 30)到LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)之间，那条在三维和二维里最短的那段线的EWKT字符串。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt FROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(73.07692307692307 115.38461538461539,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2385, "question_en": "Provide the EWKT string of that line which is the shortest in 3D and 2D from POINT(100 100 30) to LINESTRING(20 80 20,98 190 1,110 180 3,50 75 1000)."}
{"id": 437, "function": "ST_3DShortestLine", "question": "找出那个点(100 100 30)和一条线(20 80 20,98 190 1,110 180 3,50 75 1000)在三维空间中最短的连线，还有它们在平面上的最短连接，然后用某种格式显示结果，并给它们起个名字。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'POINT(100 100 30)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 1000)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(73.07692307692307 115.38461538461539,100 100)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2384, "question_en": "Find the shortest connection between the point (100 100 30) and a line (20 80 20,98 190 1,110 180 3,50 75 1000) in 3D space, also their shortest connection on a plane, then show the results in some format and give them names."}
{"id": 438, "function": "ST_3DShortestLine", "question": "找出从一个形状到另一个形状之间的最短小路，分别在三维和二维的世界中，使用那些有趣的点，比如(175 150 5)和(175 155 2)，然后以一种特别的格式展示结果。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(poly, mline)) AS shl3d, ST_AsEWKT(ST_ShortestLine(poly, mline)) AS shl2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(40.45454545454545 53.63636363636364 5,40.45454545454545 53.63636363636364 5)", "LINESTRING(20 40,20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2390, "question_en": "Find the shortest little path from one shape to another in both the 3D and 2D worlds, using those interesting points like (175 150 5) and (175 155 2), then show the results in a special format."}
{"id": 438, "function": "ST_3DShortestLine", "question": "请找出那些坐标点组成的立体形状和多个线条之间的最短连线，并用某种格式给出结果。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(poly, mline)) AS shl3d, ST_AsEWKT(ST_ShortestLine(poly, mline)) AS shl2d FROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(40.45454545454545 53.63636363636364 5,40.45454545454545 53.63636363636364 5)", "LINESTRING(20 40,20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2391, "question_en": "Please find the shortest connection between the 3D shape made of those coordinate points and multiple lines, and provide the result in a certain format."}
{"id": 439, "function": "ST_3DShortestLine", "question": "找出那些点和那条线之间的离得最近的两条线，一条是三维的，另一条是平面的，然后用一种特别的格式来表示。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(50 75,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2394, "question_en": "Find the closest lines between those points and that line, one in 3D and the other in a flat way, then express them in a special format."}
{"id": 439, "function": "ST_3DShortestLine", "question": "看看那些在空中漂浮的小点和一条蜿蜒的线之间，哪条线会最短地连接它们三维和二维的方式？然后用一种特别的格式显示出来，分别叫做shl3d_line_pt和shl2d_line_pt。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(50 75,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2395, "question_en": "Consider those floating little dots and a winding line, what's the shortest way to connect them in 3D and 2D? Then show it in a special format, called shl3d_line_pt and shl2d_line_pt respectively."}
{"id": 441, "function": "ST_Difference", "question": "找出两个线条之间的差异，用一种文字方式表达。第一条线从(50 100)到(50 200)，第二条线从(50 50)到(50 150)。", "sql": "SELECT ST_AsText( ST_Difference( 'LINESTRING(50 100, 50 200)'::geometry, 'LINESTRING(50 50, 50 150)'::geometry ) );", "execution_result": [["LINESTRING(50 150,50 200)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2401, "question_en": "Figure out the difference between two lines, and express it in a written manner. The first line goes from (50 100) to (50 200), and the second line goes from (50 50) to (50 150)."}
{"id": 438, "function": "ST_3DShortestLine", "question": "找出一个能从多边形175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5到多线175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1, 1 10 2, 5 20 1之间的最短路径，考虑一下高度和没有高度的情况，结果用一种特别的格式表示，并叫它们shl3d和shl2d。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(poly, mline)) AS shl3d, ST_AsEWKT(ST_ShortestLine(poly, mline)) AS shl2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(40.45454545454545 53.63636363636364 5,40.45454545454545 53.63636363636364 5)", "LINESTRING(20 40,20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2389, "question_en": "Find a shortest path from the polygon 175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5 to the multiline 175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1, 1 10 2, 5 20 1, considering both with and without height, and show the result in a special format, naming them shl3d and shl2d."}
{"id": 441, "function": "ST_Difference", "question": "找出两条线段，分别是从(50, 100)到(50, 200)和从(50, 50)到(50, 150)的不同之处，然后用一种常见格式来展示结果。", "sql": "SELECT ST_AsText( ST_Difference( 'LINESTRING(50 100, 50 200)'::geometry, 'LINESTRING(50 50, 50 150)'::geometry ) );", "execution_result": [["LINESTRING(50 150,50 200)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2400, "question_en": "Find the differences between two lines, one going from (50, 100) to (50, 200) and the other from (50, 50) to (50, 150), then show the result in a common format."}
{"id": 441, "function": "ST_Difference", "question": "找出那些从一条穿过50 100到50 200的线段上被另一条从50 50到50 150的线段剔除掉的部分，并用一些特殊的格式描述它。", "sql": "SELECT ST_AsText( ST_Difference( 'LINESTRING(50 100, 50 200)'::geometry, 'LINESTRING(50 50, 50 150)'::geometry ) );", "execution_result": [["LINESTRING(50 150,50 200)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2402, "question_en": "Identify the parts removed from a line stretching from 50 100 to 50 200 by another line going from 50 50 to 50 150, and describe it using some special format."}
{"id": 439, "function": "ST_3DShortestLine", "question": "找出那些漂浮在空中的点(100 100 30, 50 74 1000)和那条在空间中蜿蜒的线(20 80 20, 98 190 1, 110 180 3, 50 75 900)之间的最短小径，还有它们在平面上的最短小径。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(50 75,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2399, "question_en": "Find the shortest little path between those floating points (100 100 30, 50 74 1000) and the line winding through space (20 80 20, 98 190 1, 110 180 3, 50 75 900), and also their shortest path on the flat plane."}
{"id": 439, "function": "ST_3DShortestLine", "question": "看看在有这么一串小点(100 100 30, 50 74 1000)和一条线(20 80 20, 98 190 1, 110 180 3, 50 75 900)的情况下，怎么画出最短的连接线，既要考虑空间的，也要平面的，然后用一种特别的格式来写下来。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(50 75,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2396, "question_en": "See how to draw the shortest connecting line when you have this bunch of little dots (100 100 30, 50 74 1000) and a line (20 80 20, 98 190 1, 110 180 3, 50 75 900), considering both the spatial and the flat one, and then write it down in a special format."}
{"id": 439, "function": "ST_3DShortestLine", "question": "给出从那些位置的点MULTIPOINT(100 100 30, 50 74 1000)到一条弯曲路径LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900)之间的最短连接，分别在三维和二维空间里是什么样的线条。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt \nFROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(50 75,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2398, "question_en": "Provide the shortest connection from those point locations MULTIPOINT(100 100 30, 50 74 1000) to a winding path LINESTRING(20 80 20, 98 190 1, 110 180 3, 50 75 900), what would the line look like in both 3D and 2D space?"}
{"id": 439, "function": "ST_3DShortestLine", "question": "找出包含小点(100 100 30, 50 74 1000)和路径(20 80 20, 98 190 1, 110 180 3, 50 75 900)之间的最近距离的线条，给出它们的EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, ST_AsEWKT(ST_ShortestLine(line,pt)) AS shl2d_line_pt FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry AS pt, 'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 900)'::geometry AS line ) AS foo;", "execution_result": [["LINESTRING(54.69937988676193 128.93502291722837 11.547586950660556,100 100 30)", "LINESTRING(50 75,50 74)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2397, "question_en": "Find the line that represents the shortest distance between the little points (100 100 30, 50 74 1000) and the path (20 80 20, 98 190 1, 110 180 3, 50 75 900), and provide their EWKT format."}
{"id": 441, "function": "ST_Difference", "question": "看看从那些坐标线里，抽掉了另一条线后，剩下的形状是什么，具体的坐标是从50 100到50 200，减去从50 50到50 150的线段。", "sql": "SELECT ST_AsText( ST_Difference( 'LINESTRING(50 100, 50 200)'::geometry, 'LINESTRING(50 50, 50 150)'::geometry ) );", "execution_result": [["LINESTRING(50 150,50 200)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2403, "question_en": "See what shape is left when you take away one line from those coordinates, specifically the line from 50 100 to 50 200, subtracting the segment from 50 50 to 50 150."}
{"id": 438, "function": "ST_3DShortestLine", "question": "想知道那个175 150 5的小形状和那些连起来的点（175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1; 1 10 2, 5 20 1）之间，怎么用最短的方式连起来呢？给我高低起伏和平面上的两种答案吧。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(poly, mline)) AS shl3d, ST_AsEWKT(ST_ShortestLine(poly, mline)) AS shl2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(40.45454545454545 53.63636363636364 5,40.45454545454545 53.63636363636364 5)", "LINESTRING(20 40,20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2392, "question_en": "I'm curious about how to connect that little shape at 175 150 5 with those linked dots (175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1; 1 10 2, 5 20 1) in the shortest way possible. Can you give me two answers, one considering ups and downs and the other just flat?"}
{"id": 441, "function": "ST_Difference", "question": "找出两个线段的不同部分，用这些数字坐标来描述：LINESTRING(50 100, 50 200)和LINESTRING(50 50, 50 150)，最后给我一个字符串。", "sql": "SELECT ST_AsText( ST_Difference( 'LINESTRING(50 100, 50 200)'::geometry, 'LINESTRING(50 50, 50 150)'::geometry ) );", "execution_result": [["LINESTRING(50 150,50 200)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2404, "question_en": "Find the different parts between two lines using these number coordinates: LINESTRING(50 100, 50 200) and LINESTRING(50 50, 50 150), and give me a string in the end."}
{"id": 438, "function": "ST_3DShortestLine", "question": "找出那种特别短的线，它连着一个形状，还有一堆线段，坐标是像175 150 5到20 40 5这样的。我们需要知道二维和三维的连接方式。", "sql": "SELECT ST_AsEWKT(ST_3DShortestLine(poly, mline)) AS shl3d, ST_AsEWKT(ST_ShortestLine(poly, mline)) AS shl2d \nFROM (SELECT ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 100 5, 175 150 5))') AS poly, ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, 175 155 1), (1 10 2, 5 20 1))') AS mline ) AS foo;", "execution_result": [["LINESTRING(40.45454545454545 53.63636363636364 5,40.45454545454545 53.63636363636364 5)", "LINESTRING(20 40,20 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2393, "question_en": "Find that special short line connecting a shape and a bunch of segments, with coordinates like 175 150 5 to 20 40 5. We need to know the 2D and 3D connection methods."}
{"id": 441, "function": "ST_Difference", "question": "找出那两条从50 100到50 200和从50 50到50 150的线之间的不同之处，并用某种文本格式表达出来。", "sql": "SELECT ST_AsText( ST_Difference( 'LINESTRING(50 100, 50 200)'::geometry, 'LINESTRING(50 50, 50 150)'::geometry ) );", "execution_result": [["LINESTRING(50 150,50 200)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2405, "question_en": "Find the differences between those two lines from 50 100 to 50 200 and from 50 50 to 50 150, and express it in some text format."}
{"id": 442, "function": "ST_Difference", "question": "看看那些小点和一个特别的点在一起后，剩下的样子，用一种特别格式来描述。", "sql": "SELECT ST_AsEWKT( ST_Difference( 'MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)' :: geometry, 'POINT(-118.614 38.281 5)' :: geometry ) );", "execution_result": [["MULTIPOINT(-118.6 38.329 6,-118.58 38.38 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2411, "question_en": "See what it looks like when those little dots and a specific point come together, and describe what's left in a special format."}
{"id": 443, "function": "ST_Intersection", "question": "把那个点和那条线碰一碰，看看它们交集的样子是什么？用文本来表示哦。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry));", "execution_result": [["POINT EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2414, "question_en": "Let that point and that line touch each other and see what their intersection looks like. Represent it with text, please."}
{"id": 442, "function": "ST_Difference", "question": "从一组坐标中去掉一个小点，看看能得到什么样的结果，记得那组坐标是(-118.58 38.38 5, -118.60 38.329 6, -118.614 38.281 7)，而要去掉的点是(-118.614 38.281 5)，结果应该是特殊格式的哦。", "sql": "SELECT ST_AsEWKT( ST_Difference( 'MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)' :: geometry, 'POINT(-118.614 38.281 5)' :: geometry ) );", "execution_result": [["MULTIPOINT(-118.6 38.329 6,-118.58 38.38 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2406, "question_en": "Remove a little dot from a set of coordinates and see what kind of result you get. Remember, the set is (-118.58 38.38 5, -118.60 38.329 6, -118.614 38.281 7), and the dot to remove is (-118.614 38.281 5). The result should be in a special format."}
{"id": 443, "function": "ST_Intersection", "question": "看看(0 0)这个点和一条从(2 0)到(0 2)的线之间会有什么交集，用那种文本格式来写。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry));", "execution_result": [["POINT EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2415, "question_en": "See what kind of intersection there might be between the point (0 0) and a line from (2 0) to (0 2), and write it in that text format."}
{"id": 443, "function": "ST_Intersection", "question": "怎么找出在(0,0)这个位置的小点和连着(2,0)到(0,2)那条线之间的交集，并把结果用文字形式表示出来呢？", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry));", "execution_result": [["POINT EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2413, "question_en": "How can you find the overlap between a tiny dot at (0,0) and the line connecting (2,0) to (0,2), and show the result as words?"}
{"id": 443, "function": "ST_Intersection", "question": "把那个两个坐标的交点，像0 0这样的点和那条从2 0到0 2的线，变成某种文本格式吧。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry));", "execution_result": [["POINT EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2416, "question_en": "Turn the intersection of those two coordinates, like the point at 0 0 and the line going from 2 0 to 0 2, into some sort of text format."}
{"id": 443, "function": "ST_Intersection", "question": "找出点(0 0)和那条由(2 0)到(0 2)连起来的线之间的重合部分，然后用某种格式说出来。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry));", "execution_result": [["POINT EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2412, "question_en": "Find the overlapping part between the point (0 0) and that line connecting (2 0) to (0 2), then describe it in some format."}
{"id": 442, "function": "ST_Difference", "question": "找出那些小点里不包括一个特别点的那些，然后用一种格式把它们展示出来。特别点是(-118.614 38.281 5)，而那些小点是(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)。", "sql": "SELECT ST_AsEWKT( ST_Difference( 'MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)' :: geometry, 'POINT(-118.614 38.281 5)' :: geometry ) );", "execution_result": [["MULTIPOINT(-118.6 38.329 6,-118.58 38.38 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2407, "question_en": "Identify which of those little dots don't include a specific one, and then show them in a certain format. The specific point is (-118.614 38.281 5), while those little dots are (-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)."}
{"id": 443, "function": "ST_Intersection", "question": "找出小点(0 0)和线段(2 0到0 2)之间交叉的地方，用某种字符串表达出来。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry));", "execution_result": [["POINT EMPTY"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2417, "question_en": "Find the crossing part between the little dot (0 0) and the line segment from (2 0 to 0 2), expressed in some kind of string."}
{"id": 442, "function": "ST_Difference", "question": "找出那组有三个特别位置的小点和一个特定位置的小点之间的不同之处，然后用一种特别的格式说出来。那组小点有一个在(-118.58 38.38)高5的地方，一个在(-118.60 38.329)高6的地方，还有一个在(-118.614 38.281)高7的地方。", "sql": "SELECT ST_AsEWKT( ST_Difference( 'MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)' :: geometry, 'POINT(-118.614 38.281 5)' :: geometry ) );", "execution_result": [["MULTIPOINT(-118.6 38.329 6,-118.58 38.38 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2408, "question_en": "Identify the differences between a set of three special location dots and one specific location dot, then express it in a special format. The set of dots includes one at (-118.58, 38.38) with height 5, one at (-118.60, 38.329) with height 6, and another at (-118.614, 38.281) with height 7."}
{"id": 442, "function": "ST_Difference", "question": "给你一些小点在三维空间里，比如有几个：(-118.58 38.38 5)，(-118.60 38.329 6)，(-118.614 38.281 7)。还有一个特别的点在(-118.614 38.281 5)。想知道去掉这个特别点后，剩下的那些点会是什么样的？用一种特别的格式来表示。", "sql": "SELECT ST_AsEWKT( ST_Difference( 'MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)' :: geometry, 'POINT(-118.614 38.281 5)' :: geometry ) );", "execution_result": [["MULTIPOINT(-118.6 38.329 6,-118.58 38.38 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2410, "question_en": "You have some little dots in 3D space, like these: (-118.58 38.38 5), (-118.60 38.329 6), (-118.614 38.281 7). And there's a special point at (-118.614 38.281 5). What will the remaining dots look like after removing this special point? Use a special format to show it."}
{"id": 446, "function": "ST_Intersection", "question": "找找看，从(2 2 6)到(0 0 10)的那条线和在(0 0 8)到(1 1 8)的那个面，它们相交的地方长啥样？结果要用那种大家都懂的文字格式哦。", "sql": "SELECT ST_AsText(ST_Intersection(linestring, polygon)) AS wkt \nFROM ST_GeomFromText('LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)') AS linestring CROSS JOIN ST_GeomFromText('POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))') AS polygon;", "execution_result": [["LINESTRING Z (1 1 8,0.5 0.5 8,0 0 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2420, "question_en": "Can you see where the line from (2 2 6) to (0 0 10) crosses that flat thing from (0 0 8) to (1 1 8)? Show the result in that format everyone recognizes."}
{"id": 446, "function": "ST_Intersection", "question": "想象一条穿过五个点的小线，它的坐标是(2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)，以及一个用(0 0 8,0 1 8,1 1 8,1 0 8)这些点构成的立体面，看看它们重叠的部分是什么，并用某种文本形式表达出来。", "sql": "SELECT ST_AsText(ST_Intersection(linestring, polygon)) AS wkt FROM ST_GeomFromText('LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)') AS linestring CROSS JOIN ST_GeomFromText('POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))') AS polygon;", "execution_result": [["LINESTRING Z (1 1 8,0.5 0.5 8,0 0 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2419, "question_en": "Imagine a small line passing through five points with coordinates (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10), and a 3D surface made from points like (0 0 8,0 1 8,1 1 8,1 0 8). See what part they overlap and express it in some text form."}
{"id": 442, "function": "ST_Difference", "question": "给出一个描述，把那些坐标点集合里的某个点拿掉后，用一种特别的格式呈现出来，包含坐标：(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)和(-118.614 38.281 5)。", "sql": "SELECT ST_AsEWKT( ST_Difference( 'MULTIPOINT(-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7)' :: geometry, 'POINT(-118.614 38.281 5)' :: geometry ) );", "execution_result": [["MULTIPOINT(-118.6 38.329 6,-118.58 38.38 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2409, "question_en": "Provide a description, where after removing one of those coordinate points from the collection, it's shown in a special format, including coordinates: (-118.58 38.38 5,-118.60 38.329 6,-118.614 38.281 7) and (-118.614 38.281 5)."}
{"id": 447, "function": "ST_Intersection", "question": "找出在小点(0 0)和从(0 0)到(0 2)的那个长线之间共有的部分，用一种特别的字符串方式表达出来。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2427, "question_en": "Find the shared part between the little dot at (0 0) and that long line from (0 0) to (0 2) and express it in a special string format."}
{"id": 447, "function": "ST_Intersection", "question": "怎么用一种方法找到在(0,0)的小点和从(0,0)到(0,2)的那条线之间的交集，并用文字形式表达出来？", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2425, "question_en": "How can you find a way to determine the overlap between a little dot at (0,0) and that line from (0,0) to (0,2), and express it in words?"}
{"id": 447, "function": "ST_Intersection", "question": "找出那个点和那条从0到2的竖线之间的交点，然后变成一种文字格式。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2428, "question_en": "Find the intersection between that point and the vertical line going from 0 to 2, then turn it into some kind of text format."}
{"id": 446, "function": "ST_Intersection", "question": "可以描述一下那些点和那个平面碰到一起的地方，特别是关于这条线LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)和那个平面POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))的一些相交情况吗？", "sql": "SELECT ST_AsText(ST_Intersection(linestring, polygon)) AS wkt FROM ST_GeomFromText('LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)') AS linestring CROSS JOIN ST_GeomFromText('POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))') AS polygon;", "execution_result": [["LINESTRING Z (1 1 8,0.5 0.5 8,0 0 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2421, "question_en": "Could you describe the place where those points and that surface meet, especially about the intersection between this line LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10) and that surface POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))?"}
{"id": 447, "function": "ST_Intersection", "question": "找出坐标在(0 0)的小点和从(0 0)到(0 2)的线条之间的重叠部分，然后用特别的格式告诉我。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2424, "question_en": "Find the overlap between the little dot at coordinates (0 0) and the line that goes from (0 0) to (0 2), then let me know in a special format."}
{"id": 446, "function": "ST_Intersection", "question": "有个立体的线，像从(2 2 6)跑到(0 0 10)这种，还有个平面的形状在(0 0 8)到(1 0 8)之间，找出它们碰到的地方，并告诉我它的样子。", "sql": "SELECT ST_AsText(ST_Intersection(linestring, polygon)) AS wkt FROM ST_GeomFromText('LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)') AS linestring CROSS JOIN ST_GeomFromText('POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))') AS polygon;", "execution_result": [["LINESTRING Z (1 1 8,0.5 0.5 8,0 0 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2423, "question_en": "There's a 3D line running from (2 2 6) to (0 0 10), and a flat shape stretching from (0 0 8) to (1 0 8). Find where they meet and describe it to me."}
{"id": 447, "function": "ST_Intersection", "question": "给我看看那些坐标点和线段经过的地方，尤其是0 0和0到2之间交叉的部分，用特别格式展示一下。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2429, "question_en": "Show me where those coordinates and line segment pass through, especially the crossing part between 0 0 and 0 to 2, in a special format."}
{"id": 446, "function": "ST_Intersection", "question": "把那些三维小线和三维小面相交的部分，用一种文本格式来表达，数字是(2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)和(0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8)。", "sql": "SELECT ST_AsText(ST_Intersection(linestring, polygon)) AS wkt FROM ST_GeomFromText('LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)') AS linestring CROSS JOIN ST_GeomFromText('POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))') AS polygon;", "execution_result": [["LINESTRING Z (1 1 8,0.5 0.5 8,0 0 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2422, "question_en": "Express the part where those 3D little lines and 3D little surfaces meet using a text format, with numbers (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10) and (0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8)."}
{"id": 449, "function": "ST_Node", "question": "给出那些线段串中的小点处理后的结果，看看它们的WKT样子。", "sql": "SELECT ST_AsText( ST_Node('MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING((2 5,2 3),(2 3,2 1,4 1),(4 1,2 3),(4 1,6 1),(6 1,7 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2433, "question_en": "Provide the result after handling the little dots in those line segments, and see their WKT appearance."}
{"id": 449, "function": "ST_Node", "question": "有两条线走过这些点：(2 5)、(2 1)、(7 1)和(6 1)、(4 1)、(2 3)、(2 5)，你能把它们在交汇的地方分开，然后告诉我那些分开的样子吗？", "sql": "SELECT ST_AsText( ST_Node('MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING((2 5,2 3),(2 3,2 1,4 1),(4 1,2 3),(4 1,6 1),(6 1,7 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2431, "question_en": "There are two lines going through these points: (2 5), (2 1), (7 1) and (6 1), (4 1), (2 3), (2 5). Can you separate them at the places they meet and tell me what the separated parts look like?"}
{"id": 446, "function": "ST_Intersection", "question": "找出那些漂浮在空中的线段和一个平面之间的重叠部分，线段有点像这样：从(2 2 6)开始，经过(1.5 1.5 7)、(1 1 8)、(0.5 0.5 8)，到达(0 0 10)。而那个平面就像是一个框架，由(0 0 8)、(0 1 8)、(1 1 8)、(1 0 8)和回到(0 0 8)组成。然后用一种特殊的格式来表达这个相交的结果。", "sql": "SELECT ST_AsText(ST_Intersection(linestring, polygon)) AS wkt FROM ST_GeomFromText('LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 10)') AS linestring CROSS JOIN ST_GeomFromText('POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))') AS polygon;", "execution_result": [["LINESTRING Z (1 1 8,0.5 0.5 8,0 0 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2418, "question_en": "Find the overlap between those floating segments and a flat surface, where the segments start at (2 2 6), pass through (1.5 1.5 7), (1 1 8), (0.5 0.5 8), and reach (0 0 10). The surface is like a framework, formed by (0 0 8), (0 1 8), (1 1 8), (1 0 8), and returning to (0 0 8). Then express this intersection result in a special format."}
{"id": 449, "function": "ST_Node", "question": "处理一个有两条线的图形，第一条线的点是2 5到2 1到7 1，第二条线的点是6 1到4 1到2 3到2 5，把它们变成一些小块，然后看看它们变成了什么样子。", "sql": "SELECT ST_AsText( ST_Node('MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING((2 5,2 3),(2 3,2 1,4 1),(4 1,2 3),(4 1,6 1),(6 1,7 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2432, "question_en": "Handle a shape with two lines, where the first line goes from 2 5 to 2 1 to 7 1, and the second line goes from 6 1 to 4 1 to 2 3 to 2 5, break them into smaller pieces, and see what they turn into."}
{"id": 449, "function": "ST_Node", "question": "处理由两条线组成的一个大图形，它们的点在(2 5, 2 1, 7 1)和(6 1, 4 1, 2 3, 2 5)，看看它们交叉的地方，然后用一种文本格式来说说结果。", "sql": "SELECT ST_AsText( ST_Node('MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING((2 5,2 3),(2 3,2 1,4 1),(4 1,2 3),(4 1,6 1),(6 1,7 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2430, "question_en": "Handle a big shape made of two lines, with their points at (2 5, 2 1, 7 1) and (6 1, 4 1, 2 3, 2 5), check where they cross, and then describe the result in a text format."}
{"id": 450, "function": "ST_Node", "question": "把那些连接四个三维小点(0 0 0)、(10 10 10)、(0 10 5)、(10 0 3)的线条整理一下，看看它们的文字描述结果。", "sql": "SELECT ST_AsText( ST_Node('LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING Z ((0 0 0,5 5 4.5),(5 5 4.5,10 10 10,0 10 5,5 5 4.5),(5 5 4.5,10 0 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2437, "question_en": "Tidy up the lines connecting those four little 3D dots (0 0 0), (10 10 10), (0 10 5), (10 0 3), and see their text description result."}
{"id": 450, "function": "ST_Node", "question": "对那条从(0 0 0)开始经过(10 10 10)、(0 10 5)到(10 0 3)的三维折线做一些处理，看看能不能用某种格式描述出来。", "sql": "SELECT ST_AsText( ST_Node('LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING Z ((0 0 0,5 5 4.5),(5 5 4.5,10 10 10,0 10 5,5 5 4.5),(5 5 4.5,10 0 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2436, "question_en": "Do something to that 3D zigzag line starting at (0 0 0), passing through (10 10 10), (0 10 5), and ending at (10 0 3), and see if it can be described in some format."}
{"id": 450, "function": "ST_Node", "question": "把那条通过四个点(0 0 0)、(10 10 10)、(0 10 5)、(10 0 3)连起来的线，搞清楚那些自相交的地方，然后看看结果的文本格式。", "sql": "SELECT ST_AsText( ST_Node('LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING Z ((0 0 0,5 5 4.5),(5 5 4.5,10 10 10,0 10 5,5 5 4.5),(5 5 4.5,10 0 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2440, "question_en": "Take that line connecting the four points (0 0 0), (10 10 10), (0 10 5), (10 0 3), figure out where it crosses itself, and then see the result in text format."}
{"id": 449, "function": "ST_Node", "question": "把那些线段组合在一起，然后看看结果是什么样子，记得用WKT方式表达，涉及点有(2 5, 2 1, 7 1)和(6 1, 4 1, 2 3, 2 5)。", "sql": "SELECT ST_AsText( ST_Node('MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING((2 5,2 3),(2 3,2 1,4 1),(4 1,2 3),(4 1,6 1),(6 1,7 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2434, "question_en": "Combine those line segments and see what the result looks like, remember to express it in WKT format, involving points like (2 5, 2 1, 7 1) and (6 1, 4 1, 2 3, 2 5)."}
{"id": 450, "function": "ST_Node", "question": "对于那些三维空间里的连线，从(0 0 0)到(10 10 10)再到(0 10 5)以及(10 0 3)，处理一下后，想看看结果是什么样子，用文本方式展现出来。", "sql": "SELECT ST_AsText( ST_Node('LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING Z ((0 0 0,5 5 4.5),(5 5 4.5,10 10 10,0 10 5,5 5 4.5),(5 5 4.5,10 0 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2441, "question_en": "For those connecting lines in the three-dimensional space, from (0 0 0) to (10 10 10) and then to (0 10 5) and (10 0 3), after some processing, I want to see what the result looks like, displayed in text format."}
{"id": 450, "function": "ST_Node", "question": "请告诉我当那些点在空间里连成一条线后，会变成什么样子，特别是涉及到0 0 0, 10 10 10, 0 10 5, 10 0 3这些位置时，用一种特别的格式来表达。", "sql": "SELECT ST_AsText( ST_Node('LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING Z ((0 0 0,5 5 4.5),(5 5 4.5,10 10 10,0 10 5,5 5 4.5),(5 5 4.5,10 0 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2439, "question_en": "Can you tell me what it looks like when those points form a line in space, especially involving the positions 0 0 0, 10 10 10, 0 10 5, 10 0 3, expressed in a special format?"}
{"id": 450, "function": "ST_Node", "question": "处理一下那个三维线串，像是从(0 0 0)到(10 10 10)再到(0 10 5)然后到(10 0 3)的样子，把它在交叉点分成小段，然后用某种文本格式给我结果。", "sql": "SELECT ST_AsText( ST_Node('LINESTRINGZ(0 0 0, 10 10 10, 0 10 5, 10 0 3)'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING Z ((0 0 0,5 5 4.5),(5 5 4.5,10 10 10,0 10 5,5 5 4.5),(5 5 4.5,10 0 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2438, "question_en": "Handle that three-dimensional line, starting from something like (0 0 0) to (10 10 10) then to (0 10 5) and finally to (10 0 3), split it at the crossing points into smaller pieces, and give me the result in some kind of text format."}
{"id": 449, "function": "ST_Node", "question": "请给出两个折线组成的那个复杂线条的文字描述，第一组是那些点(2 5, 2 1, 7 1)，而第二组是(6 1, 4 1, 2 3, 2 5)，在它们经过节点处理之后。", "sql": "SELECT ST_AsText( ST_Node('MULTILINESTRING ((2 5, 2 1, 7 1), (6 1, 4 1, 2 3, 2 5))'::geometry) ) AS output;", "execution_result": [["MULTILINESTRING((2 5,2 3),(2 3,2 1,4 1),(4 1,2 3),(4 1,6 1),(6 1,7 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2435, "question_en": "Please provide the text description of that complex line made up of two polylines, the first set being those points (2 5, 2 1, 7 1), and the second set being (6 1, 4 1, 2 3, 2 5), after they have undergone node processing."}
{"id": 447, "function": "ST_Intersection", "question": "看看这两个坐标点和那条竖直线之间有没有交集，然后告诉我它们交集的样子。", "sql": "SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry));", "execution_result": [["POINT(0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2426, "question_en": "See if there's an overlap between these two coordinates and that vertical line, then tell me what their overlap looks like."}
{"id": 451, "function": "ST_Split", "question": "在坐标100 90处画一个半径50的圆，然后用从10 10到190 190之间的直线把这个圆切开，最后用某种格式显示切开的结果。", "sql": "SELECT ST_AsText( ST_Split( ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50), ST_MakeLine(ST_Point(10, 10),ST_Point(190, 190)) ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((150 90,149.0392640201615 80.24548389919359,146.19397662556435 70.86582838174552,141.57348061512727 62.22148834901989,135.35533905932738 54.64466094067263,127.77851165098011 48.42651938487274,119.1341716182545 43.80602337443566,109.75451610080641 40.960735979838475,100 40,90.24548389919359 40.960735979838475,80.86582838174552 43.80602337443566,72.2214883490199 48.42651938487273,64.64466094067262 54.64466094067262,60.13711795745844 60.13711795745844,129.86288204254154 129.86288204254154,135.35533905932738 125.35533905932738,141.57348061512727 117.77851165098011,146.19397662556432 109.13417161825453,149.0392640201615 99.75451610080644,150 90)),POLYGON((60.13711795745844 60.13711795745844,58.426519384872734 62.22148834901989,53.80602337443566 70.8658283817455,50.960735979838475 80.24548389919357,50 90,50.960735979838475 99.75451610080641,53.80602337443566 109.13417161825448,58.42651938487273 117.7785116509801,64.64466094067262 125.35533905932738,72.22148834901989 131.57348061512727,80.86582838174549 136.19397662556432,90.24548389919357 139.0392640201615,100 140,109.75451610080641 139.0392640201615,119.1341716182545 136.19397662556435,127.7785116509801 131.57348061512727,129.86288204254154 129.86288204254154,60.13711795745844 60.13711795745844)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2442, "question_en": "Draw a circle with a radius of 50 at coordinates 100 90, then use the line between 10 10 and 190 190 to slice the circle, and finally display the sliced result in some format."}
{"id": 451, "function": "ST_Split", "question": "从中心点在100 90的小圆形出发，想象一个半径为50的区域，它被一条从10 10到190 190的线切开后，是什么样子？", "sql": "SELECT ST_AsText( ST_Split( ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50), ST_MakeLine(ST_Point(10, 10),ST_Point(190, 190)) ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((150 90,149.0392640201615 80.24548389919359,146.19397662556435 70.86582838174552,141.57348061512727 62.22148834901989,135.35533905932738 54.64466094067263,127.77851165098011 48.42651938487274,119.1341716182545 43.80602337443566,109.75451610080641 40.960735979838475,100 40,90.24548389919359 40.960735979838475,80.86582838174552 43.80602337443566,72.2214883490199 48.42651938487273,64.64466094067262 54.64466094067262,60.13711795745844 60.13711795745844,129.86288204254154 129.86288204254154,135.35533905932738 125.35533905932738,141.57348061512727 117.77851165098011,146.19397662556432 109.13417161825453,149.0392640201615 99.75451610080644,150 90)),POLYGON((60.13711795745844 60.13711795745844,58.426519384872734 62.22148834901989,53.80602337443566 70.8658283817455,50.960735979838475 80.24548389919357,50 90,50.960735979838475 99.75451610080641,53.80602337443566 109.13417161825448,58.42651938487273 117.7785116509801,64.64466094067262 125.35533905932738,72.22148834901989 131.57348061512727,80.86582838174549 136.19397662556432,90.24548389919357 139.0392640201615,100 140,109.75451610080641 139.0392640201615,119.1341716182545 136.19397662556435,127.7785116509801 131.57348061512727,129.86288204254154 129.86288204254154,60.13711795745844 60.13711795745844)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2445, "question_en": "Starting from a small circular center at 100 90, imagine an area with a radius of 50 that is cut by a line from 10 10 to 190 190, what does it look like?"}
{"id": 451, "function": "ST_Split", "question": "在100和90这两个数字的位置上画一个50大小的圆圈，然后用从10,10到190,190的一条线把它切开，最后告诉我切开后的形状是什么样子。", "sql": "SELECT ST_AsText( ST_Split( ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50), ST_MakeLine(ST_Point(10, 10),ST_Point(190, 190)) ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((150 90,149.0392640201615 80.24548389919359,146.19397662556435 70.86582838174552,141.57348061512727 62.22148834901989,135.35533905932738 54.64466094067263,127.77851165098011 48.42651938487274,119.1341716182545 43.80602337443566,109.75451610080641 40.960735979838475,100 40,90.24548389919359 40.960735979838475,80.86582838174552 43.80602337443566,72.2214883490199 48.42651938487273,64.64466094067262 54.64466094067262,60.13711795745844 60.13711795745844,129.86288204254154 129.86288204254154,135.35533905932738 125.35533905932738,141.57348061512727 117.77851165098011,146.19397662556432 109.13417161825453,149.0392640201615 99.75451610080644,150 90)),POLYGON((60.13711795745844 60.13711795745844,58.426519384872734 62.22148834901989,53.80602337443566 70.8658283817455,50.960735979838475 80.24548389919357,50 90,50.960735979838475 99.75451610080641,53.80602337443566 109.13417161825448,58.42651938487273 117.7785116509801,64.64466094067262 125.35533905932738,72.22148834901989 131.57348061512727,80.86582838174549 136.19397662556432,90.24548389919357 139.0392640201615,100 140,109.75451610080641 139.0392640201615,119.1341716182545 136.19397662556435,127.7785116509801 131.57348061512727,129.86288204254154 129.86288204254154,60.13711795745844 60.13711795745844)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2444, "question_en": "Draw a circle of size 50 at the spot with the numbers 100 and 90, then use a line from 10,10 to 190,190 to cut it, and finally tell me what the shapes look like after being cut."}
{"id": 451, "function": "ST_Split", "question": "看看那条从(10, 10)到(190, 190)的线，想象它切过一个以(100, 90)为中心、半径50的圆，告诉我切出来的形状是什么样子。", "sql": "SELECT ST_AsText( ST_Split( ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50), ST_MakeLine(ST_Point(10, 10),ST_Point(190, 190)) ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((150 90,149.0392640201615 80.24548389919359,146.19397662556435 70.86582838174552,141.57348061512727 62.22148834901989,135.35533905932738 54.64466094067263,127.77851165098011 48.42651938487274,119.1341716182545 43.80602337443566,109.75451610080641 40.960735979838475,100 40,90.24548389919359 40.960735979838475,80.86582838174552 43.80602337443566,72.2214883490199 48.42651938487273,64.64466094067262 54.64466094067262,60.13711795745844 60.13711795745844,129.86288204254154 129.86288204254154,135.35533905932738 125.35533905932738,141.57348061512727 117.77851165098011,146.19397662556432 109.13417161825453,149.0392640201615 99.75451610080644,150 90)),POLYGON((60.13711795745844 60.13711795745844,58.426519384872734 62.22148834901989,53.80602337443566 70.8658283817455,50.960735979838475 80.24548389919357,50 90,50.960735979838475 99.75451610080641,53.80602337443566 109.13417161825448,58.42651938487273 117.7785116509801,64.64466094067262 125.35533905932738,72.22148834901989 131.57348061512727,80.86582838174549 136.19397662556432,90.24548389919357 139.0392640201615,100 140,109.75451610080641 139.0392640201615,119.1341716182545 136.19397662556435,127.7785116509801 131.57348061512727,129.86288204254154 129.86288204254154,60.13711795745844 60.13711795745844)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2447, "question_en": "Imagine a line from (10, 10) to (190, 190) slicing through a circle centered at (100, 90) with a radius of 50, and tell me what the resulting shape looks like."}
{"id": 452, "function": "ST_Split", "question": "怎么用那个点(30,30)在那些连起来的线(10 10, 190 190)和(15 15, 30 30, 100 90)上做个切割，然后用一种常见的文本格式告诉我结果？", "sql": "SELECT ST_AsText(ST_Split( 'MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))', ST_Point(30,30))) AS split;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(10 10,30 30),LINESTRING(30 30,190 190),LINESTRING(15 15,30 30),LINESTRING(30 30,100 90))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2449, "question_en": "How can you use that dot at (30,30) to make a cut on those connected lines (10 10, 190 190) and (15 15, 30 30, 100 90), then tell me the result in a common text format?"}
{"id": 452, "function": "ST_Split", "question": "在那些线条上，用30,30这个位置的某个点来做个分割，然后看看会得到什么样的文本结果。", "sql": "SELECT ST_AsText(ST_Split( 'MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))', ST_Point(30,30))) AS split;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(10 10,30 30),LINESTRING(30 30,190 190),LINESTRING(15 15,30 30),LINESTRING(30 30,100 90))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2451, "question_en": "On those lines, use a point at the position 30,30 to make a split, and then see what kind of text result you get."}
{"id": 451, "function": "ST_Split", "question": "有个地方像圆圈，中心是100和90，扩展50的范围。然后有条线连接着10, 10和190, 190，把这个圆圈切成两半。你能告诉我分割后的形状吗？", "sql": "SELECT ST_AsText( ST_Split( ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50), ST_MakeLine(ST_Point(10, 10),ST_Point(190, 190)) ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((150 90,149.0392640201615 80.24548389919359,146.19397662556435 70.86582838174552,141.57348061512727 62.22148834901989,135.35533905932738 54.64466094067263,127.77851165098011 48.42651938487274,119.1341716182545 43.80602337443566,109.75451610080641 40.960735979838475,100 40,90.24548389919359 40.960735979838475,80.86582838174552 43.80602337443566,72.2214883490199 48.42651938487273,64.64466094067262 54.64466094067262,60.13711795745844 60.13711795745844,129.86288204254154 129.86288204254154,135.35533905932738 125.35533905932738,141.57348061512727 117.77851165098011,146.19397662556432 109.13417161825453,149.0392640201615 99.75451610080644,150 90)),POLYGON((60.13711795745844 60.13711795745844,58.426519384872734 62.22148834901989,53.80602337443566 70.8658283817455,50.960735979838475 80.24548389919357,50 90,50.960735979838475 99.75451610080641,53.80602337443566 109.13417161825448,58.42651938487273 117.7785116509801,64.64466094067262 125.35533905932738,72.22148834901989 131.57348061512727,80.86582838174549 136.19397662556432,90.24548389919357 139.0392640201615,100 140,109.75451610080641 139.0392640201615,119.1341716182545 136.19397662556435,127.7785116509801 131.57348061512727,129.86288204254154 129.86288204254154,60.13711795745844 60.13711795745844)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2446, "question_en": "There's a place like a circle, centered at 100 and 90, expanded by 50. Then there's a line connecting 10, 10 and 190, 190 that cuts this circle into two halves. Can you tell me the shape after the split?"}
{"id": 452, "function": "ST_Split", "question": "有一个由两条线组成的形状，第一条线从(10 10)到(190 190)，第二条线经过(15 15), (30 30), (100 90)。用(30, 30)这个点来分开它们，看看分开后的样子是什么。", "sql": "SELECT ST_AsText(ST_Split( 'MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))', ST_Point(30,30))) AS split;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(10 10,30 30),LINESTRING(30 30,190 190),LINESTRING(15 15,30 30),LINESTRING(30 30,100 90))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2448, "question_en": "There's a shape made of two lines, the first goes from (10 10) to (190 190), and the second passes through (15 15), (30 30), (100 90). Use the point (30, 30) to separate them and see what they look like after splitting."}
{"id": 451, "function": "ST_Split", "question": "把在100 90这个地方的小点变成一个半径是50的圆，然后用一条从10 10到190 190的线去切一切，看看结果是什么文字。", "sql": "SELECT ST_AsText( ST_Split( ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50), ST_MakeLine(ST_Point(10, 10),ST_Point(190, 190)) ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((150 90,149.0392640201615 80.24548389919359,146.19397662556435 70.86582838174552,141.57348061512727 62.22148834901989,135.35533905932738 54.64466094067263,127.77851165098011 48.42651938487274,119.1341716182545 43.80602337443566,109.75451610080641 40.960735979838475,100 40,90.24548389919359 40.960735979838475,80.86582838174552 43.80602337443566,72.2214883490199 48.42651938487273,64.64466094067262 54.64466094067262,60.13711795745844 60.13711795745844,129.86288204254154 129.86288204254154,135.35533905932738 125.35533905932738,141.57348061512727 117.77851165098011,146.19397662556432 109.13417161825453,149.0392640201615 99.75451610080644,150 90)),POLYGON((60.13711795745844 60.13711795745844,58.426519384872734 62.22148834901989,53.80602337443566 70.8658283817455,50.960735979838475 80.24548389919357,50 90,50.960735979838475 99.75451610080641,53.80602337443566 109.13417161825448,58.42651938487273 117.7785116509801,64.64466094067262 125.35533905932738,72.22148834901989 131.57348061512727,80.86582838174549 136.19397662556432,90.24548389919357 139.0392640201615,100 140,109.75451610080641 139.0392640201615,119.1341716182545 136.19397662556435,127.7785116509801 131.57348061512727,129.86288204254154 129.86288204254154,60.13711795745844 60.13711795745844)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2443, "question_en": "Turn the small dot at 100 90 into a circle with a radius of 50, then use a line from 10 10 to 190 190 to slice it, and see what the result is in words."}
{"id": 452, "function": "ST_Split", "question": "有两个线条，一个从(10,10)到(190,190)，另一个经过(15,15)、(30,30)、(100,90)。你能在(30,30)这个地方把它们分开，然后告诉我分开后的样子吗？", "sql": "SELECT ST_AsText(ST_Split( 'MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))', ST_Point(30,30))) AS split;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(10 10,30 30),LINESTRING(30 30,190 190),LINESTRING(15 15,30 30),LINESTRING(30 30,100 90))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2450, "question_en": "There are two lines, one goes from (10,10) to (190,190), and the other passes through (15,15), (30,30), (100,90). Can you separate them at the point (30,30) and then tell me what they look like afterwards?"}
{"id": 452, "function": "ST_Split", "question": "有两条折线，它们的坐标是(10 10, 190 190)和(15 15, 30 30, 100 90)，想象一下在(30,30)这个地方把它们切开，然后看看它们变成了什么样的形状。", "sql": "SELECT ST_AsText(ST_Split( 'MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))', ST_Point(30,30))) AS split;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(10 10,30 30),LINESTRING(30 30,190 190),LINESTRING(15 15,30 30),LINESTRING(30 30,100 90))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2453, "question_en": "Imagine there are two squiggly lines with coordinates (10 10, 190 190) and (15 15, 30 30, 100 90), and you slice them at the spot (30,30) to see what kind of shape they turn into."}
{"id": 452, "function": "ST_Split", "question": "如果有一条线从(10 10)经过(190 190)，还有另一段从(15 15)走到(30 30)再到(100 90)，然后用(30,30)这个点去切一下，能得到什么样的形状？用那种常见的文本格式说说看。", "sql": "SELECT ST_AsText(ST_Split( 'MULTILINESTRING((10 10, 190 190), (15 15, 30 30, 100 90))', ST_Point(30,30))) AS split;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(10 10,30 30),LINESTRING(30 30,190 190),LINESTRING(15 15,30 30),LINESTRING(30 30,100 90))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2452, "question_en": "If there's a line from (10 10) passing through (190 190), and another segment from (15 15) to (30 30) and then to (100 90), and you use the point (30,30) to make a cut, what kind of shape would you get? Describe it in that common text format."}
{"id": 453, "function": "ST_Split", "question": "有一条线从(0, 0)到(100, 100)，还有一个点在(51, 50)，如果用1单位的距离把线靠到点上，然后在那个点把线切开，结果会是什么样子？同时看看如果直接在点上切开而不先靠近会怎样。", "sql": "WITH data AS (SELECT 'LINESTRING(0 0, 100 100)'::geometry AS line, 'POINT(51 50)':: geometry AS point ) SELECT ST_AsText( ST_Split( ST_Snap(line, point, 1), point)) AS snapped_split, ST_AsText( ST_Split(line, point)) AS not_snapped_not_split FROM data;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,51 50),LINESTRING(51 50,100 100))", "GEOMETRYCOLLECTION(LINESTRING(0 0,100 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2455, "question_en": "There's a line from (0, 0) to (100, 100) and a point at (51, 50). What happens if you nudge the line to the point with a 1-unit distance and then cut it at that spot? Also, see what happens if you cut directly at the point without nudging first."}
{"id": 453, "function": "ST_Split", "question": "想象一下有一条线从(0 0)到(100 100)，有两种方法可以在(51 50)这个点附近处理它：一种是先轻轻地把它拉到这个点附近再切开，另一种是直接在这个点切开。想知道它们分别会变成什么样子吗？", "sql": "WITH data AS (SELECT 'LINESTRING(0 0, 100 100)'::geometry AS line, 'POINT(51 50)':: geometry AS point ) SELECT ST_AsText( ST_Split( ST_Snap(line, point, 1), point)) AS snapped_split, ST_AsText( ST_Split(line, point)) AS not_snapped_not_split FROM data;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,51 50),LINESTRING(51 50,100 100))", "GEOMETRYCOLLECTION(LINESTRING(0 0,100 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2456, "question_en": "Imagine a line going from (0 0) to (100 100), and there are two ways to handle it near the point (51 50): one gently nudges it near this point before cutting, and the other simply cuts it at this point. Curious about how they each turn out?"}
{"id": 455, "function": "ST_Subdivide", "question": "把那个多边形用不超过10个顶点的小块分开，然后给出每块的样子和编号。", "sql": "SELECT row_number() OVER() AS rn, ST_AsText(geom) AS wkt FROM (SELECT ST_SubDivide( 'POLYGON((132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150, 57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122, 190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10))'::geometry,10)) AS f(geom);", "execution_result": [[1, "POLYGON((85 35,68 29,66 28,32 56,22 64,29.82608695652174 100,119 100,119 23,85 35))"], [2, "POLYGON((186 52,178 34,168 18,147 13,132 10,119 23,119 56,186 56,186 52))"], [3, "POLYGON((185 79,186 56,119 56,119 100,190 100,185 79))"], [4, "POLYGON((40 119,36 150,57 158,75 171,92 182,114 184,114 100,29.82608695652174 100,32 110,40 119))"], [5, "POLYGON((132 186,146 178,176 184,179 162,184 141,190 122,190 100,114 100,114 184,132 186))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2460, "question_en": "Break that polygon into smaller pieces with no more than 10 corners, then provide the look and number for each piece."}
{"id": 453, "function": "ST_Split", "question": "对于从(0,0)到(100,100)的这根线和在(51,50)的小点，先用1的范围把线吸到点上，然后在点上切开线，并看看结果长啥样；同时直接在(51,50)的地方试着切一下(0,0)到(100,100)的线，看看会发生什么。", "sql": "WITH data AS (SELECT 'LINESTRING(0 0, 100 100)'::geometry AS line, 'POINT(51 50)':: geometry AS point ) SELECT ST_AsText( ST_Split( ST_Snap(line, point, 1), point)) AS snapped_split, ST_AsText( ST_Split(line, point)) AS not_snapped_not_split FROM data;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,51 50),LINESTRING(51 50,100 100))", "GEOMETRYCOLLECTION(LINESTRING(0 0,100 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2454, "question_en": "For the line from (0,0) to (100,100) and the small dot at (51,50), first bring the line to the dot within a range of 1, then cut the line at the dot and see what the result looks like; also try cutting the line from (0,0) to (100,100) directly at (51,50) to see what happens."}
{"id": 453, "function": "ST_Split", "question": "看看如果把那条从(0 0)到(100 100)的线靠近(51 50)的小点调整一下（容差是1）再去分开，和直接在那个小点分开的结果，会有什么不同。", "sql": "WITH data AS (SELECT 'LINESTRING(0 0, 100 100)'::geometry AS line, 'POINT(51 50)':: geometry AS point ) SELECT ST_AsText( ST_Split( ST_Snap(line, point, 1), point)) AS snapped_split, ST_AsText( ST_Split(line, point)) AS not_snapped_not_split FROM data;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,51 50),LINESTRING(51 50,100 100))", "GEOMETRYCOLLECTION(LINESTRING(0 0,100 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2457, "question_en": "See what difference it makes if you adjust that line from (0 0) to (100 100) near the little dot at (51 50) with a tolerance of 1 before splitting it, compared to just splitting it directly at that little dot."}
{"id": 453, "function": "ST_Split", "question": "看看这条走过(0 0, 100 100)的线，在靠近(51 50)的地方，经过某种调整（用1做个参考）和不调整时分成了什么样子？", "sql": "WITH data AS (SELECT 'LINESTRING(0 0, 100 100)'::geometry AS line, 'POINT(51 50)':: geometry AS point ) SELECT ST_AsText( ST_Split( ST_Snap(line, point, 1), point)) AS snapped_split, ST_AsText( ST_Split(line, point)) AS not_snapped_not_split FROM data;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,51 50),LINESTRING(51 50,100 100))", "GEOMETRYCOLLECTION(LINESTRING(0 0,100 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2459, "question_en": "Take a look at the line passing through (0 0, 100 100), and see what it looks like when split near (51 50) after some adjustment (using 1 as a reference) and without adjustment."}
{"id": 453, "function": "ST_Split", "question": "给出两个结果，都是那些线和点的故事：一个是线从(0 0)到(100 100)，在距离点(51 50)一单位的地方有个小动作后分开，另一个是这线直接在同样的点分开而没有那个动作。", "sql": "WITH data AS (SELECT 'LINESTRING(0 0, 100 100)'::geometry AS line, 'POINT(51 50)':: geometry AS point ) SELECT ST_AsText( ST_Split( ST_Snap(line, point, 1), point)) AS snapped_split, ST_AsText( ST_Split(line, point)) AS not_snapped_not_split FROM data;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,51 50),LINESTRING(51 50,100 100))", "GEOMETRYCOLLECTION(LINESTRING(0 0,100 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2458, "question_en": "Provide two results, both involving those lines and points: one is the line from (0 0) to (100 100) with a little adjustment at a 1-unit distance from point (51 50) before splitting, the other is the line splitting directly at the same point without that adjustment."}
{"id": 456, "function": "ST_Subdivide", "question": "从一条连接了(0 0)和(85 85)的线出发，先用最多1200000米的间距把它分成几个段，然后再将这些段进一步拆分成最多8个小点的线段，并以某种格式显示出来。", "sql": "SELECT ST_AsText( ST_Subdivide( ST_Segmentize('LINESTRING(0 0, 85 85)'::geography, 1200000)::geometry, 8));", "execution_result": [["LINESTRING(0 0,0.487578359029357 5.576590567461958,0.984542144675897 11.152772115509297,1.501010596397223 16.728103548357065,1.945321136303313 21.25)"], ["LINESTRING(1.945321136303313 21.25,2.048695380627787 22.30207413873394,2.642046419676733 27.874053354515492,3.299940624127865 33.44321680294103,4.048367194897422 39.008428252023904,4.598904684206937 42.5)"], ["LINESTRING(4.598904684206937 42.5,4.924985039227316 44.56803892063212,5.987374093906392 50.11952292447013,7.329091976767396 55.65876468790251,8.796387499384128 60.19695059949241)"], ["LINESTRING(8.796387499384128 60.19695059949241,9.113755795337793 61.17853631776249,11.65581666913683 66.66485041602019,15.642041247655008 72.08676906017453,22.871662720021188 77.36096281168942,24.699178513155204 77.89390119898482)"], ["LINESTRING(24.699178513155204 77.89390119898482,39.40460966227439 82.18228480176364,44.79945234210347 82.51567662270111)"], ["LINESTRING(44.79945234210347 82.51567662270111,85 85)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2463, "question_en": "Starting from a line connecting (0 0) and (85 85), first break it into several parts with up to 1,200,000 meters spacing, then further split these parts into lines with up to 8 tiny dots, and show them in a certain format."}
{"id": 456, "function": "ST_Subdivide", "question": "把那个从(0,0)到(85,85)的长条形状，按一百二十万米的距离切成片，然后再切成最多八个小点的形状，看看它们的样子是什么样的。", "sql": "SELECT ST_AsText( ST_Subdivide( ST_Segmentize('LINESTRING(0 0, 85 85)'::geography, 1200000)::geometry, 8));", "execution_result": [["LINESTRING(0 0,0.487578359029357 5.576590567461958,0.984542144675897 11.152772115509297,1.501010596397223 16.728103548357065,1.945321136303313 21.25)"], ["LINESTRING(1.945321136303313 21.25,2.048695380627787 22.30207413873394,2.642046419676733 27.874053354515492,3.299940624127865 33.44321680294103,4.048367194897422 39.008428252023904,4.598904684206937 42.5)"], ["LINESTRING(4.598904684206937 42.5,4.924985039227316 44.56803892063212,5.987374093906392 50.11952292447013,7.329091976767396 55.65876468790251,8.796387499384128 60.19695059949241)"], ["LINESTRING(8.796387499384128 60.19695059949241,9.113755795337793 61.17853631776249,11.65581666913683 66.66485041602019,15.642041247655008 72.08676906017453,22.871662720021188 77.36096281168942,24.699178513155204 77.89390119898482)"], ["LINESTRING(24.699178513155204 77.89390119898482,39.40460966227439 82.18228480176364,44.79945234210347 82.51567662270111)"], ["LINESTRING(44.79945234210347 82.51567662270111,85 85)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2466, "question_en": "Take that long shape from (0,0) to (85,85), cut it into pieces at a distance of 1,200,000 meters, and then cut those pieces into shapes with no more than eight little points. Show what they look like."}
{"id": 456, "function": "ST_Subdivide", "question": "在处理从(0 0)到(85 85)的长线时，先确保每个小段不超过1200000米，然后把它们分成最多8个小段，最后以某种文本格式呈现。", "sql": "SELECT ST_AsText( ST_Subdivide( ST_Segmentize('LINESTRING(0 0, 85 85)'::geography, 1200000)::geometry, 8));", "execution_result": [["LINESTRING(0 0,0.487578359029357 5.576590567461958,0.984542144675897 11.152772115509297,1.501010596397223 16.728103548357065,1.945321136303313 21.25)"], ["LINESTRING(1.945321136303313 21.25,2.048695380627787 22.30207413873394,2.642046419676733 27.874053354515492,3.299940624127865 33.44321680294103,4.048367194897422 39.008428252023904,4.598904684206937 42.5)"], ["LINESTRING(4.598904684206937 42.5,4.924985039227316 44.56803892063212,5.987374093906392 50.11952292447013,7.329091976767396 55.65876468790251,8.796387499384128 60.19695059949241)"], ["LINESTRING(8.796387499384128 60.19695059949241,9.113755795337793 61.17853631776249,11.65581666913683 66.66485041602019,15.642041247655008 72.08676906017453,22.871662720021188 77.36096281168942,24.699178513155204 77.89390119898482)"], ["LINESTRING(24.699178513155204 77.89390119898482,39.40460966227439 82.18228480176364,44.79945234210347 82.51567662270111)"], ["LINESTRING(44.79945234210347 82.51567662270111,85 85)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2465, "question_en": "When dealing with the long line from (0 0) to (85 85), first ensure each small segment is no more than 1,200,000 meters, then split them into up to 8 smaller segments, and finally present it in some text format."}
{"id": 456, "function": "ST_Subdivide", "question": "把从(0 0)到(85 85)的那条线，根据1200000米的距离切成小段，每段最多有8个点，然后用一种文本方式把它们描述出来。", "sql": "SELECT ST_AsText( ST_Subdivide( ST_Segmentize('LINESTRING(0 0, 85 85)'::geography, 1200000)::geometry, 8));", "execution_result": [["LINESTRING(0 0,0.487578359029357 5.576590567461958,0.984542144675897 11.152772115509297,1.501010596397223 16.728103548357065,1.945321136303313 21.25)"], ["LINESTRING(1.945321136303313 21.25,2.048695380627787 22.30207413873394,2.642046419676733 27.874053354515492,3.299940624127865 33.44321680294103,4.048367194897422 39.008428252023904,4.598904684206937 42.5)"], ["LINESTRING(4.598904684206937 42.5,4.924985039227316 44.56803892063212,5.987374093906392 50.11952292447013,7.329091976767396 55.65876468790251,8.796387499384128 60.19695059949241)"], ["LINESTRING(8.796387499384128 60.19695059949241,9.113755795337793 61.17853631776249,11.65581666913683 66.66485041602019,15.642041247655008 72.08676906017453,22.871662720021188 77.36096281168942,24.699178513155204 77.89390119898482)"], ["LINESTRING(24.699178513155204 77.89390119898482,39.40460966227439 82.18228480176364,44.79945234210347 82.51567662270111)"], ["LINESTRING(44.79945234210347 82.51567662270111,85 85)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2467, "question_en": "Take that line from (0 0) to (85 85), slice it into short sections based on a 1,200,000-meter distance, each with up to 8 points, and then describe them using a kind of text format."}
{"id": 456, "function": "ST_Subdivide", "question": "从(0 0)到(85 85)的那条线，走个1200000米的分段，化成几何样子，再分成最多8个小段，最后告诉我它的WKT长什么样。", "sql": "SELECT ST_AsText( ST_Subdivide( ST_Segmentize('LINESTRING(0 0, 85 85)'::geography, 1200000)::geometry, 8));", "execution_result": [["LINESTRING(0 0,0.487578359029357 5.576590567461958,0.984542144675897 11.152772115509297,1.501010596397223 16.728103548357065,1.945321136303313 21.25)"], ["LINESTRING(1.945321136303313 21.25,2.048695380627787 22.30207413873394,2.642046419676733 27.874053354515492,3.299940624127865 33.44321680294103,4.048367194897422 39.008428252023904,4.598904684206937 42.5)"], ["LINESTRING(4.598904684206937 42.5,4.924985039227316 44.56803892063212,5.987374093906392 50.11952292447013,7.329091976767396 55.65876468790251,8.796387499384128 60.19695059949241)"], ["LINESTRING(8.796387499384128 60.19695059949241,9.113755795337793 61.17853631776249,11.65581666913683 66.66485041602019,15.642041247655008 72.08676906017453,22.871662720021188 77.36096281168942,24.699178513155204 77.89390119898482)"], ["LINESTRING(24.699178513155204 77.89390119898482,39.40460966227439 82.18228480176364,44.79945234210347 82.51567662270111)"], ["LINESTRING(44.79945234210347 82.51567662270111,85 85)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2464, "question_en": "For that line from (0 0) to (85 85), do a 1,200,000-meter segmentation, turn it into a geometry shape, then split it into at most 8 little parts, and finally tell me what its WKT looks like."}
{"id": 455, "function": "ST_Subdivide", "question": "请列出那些由形状POLYGON((132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150,57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122,190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10))被分割成最大包含10个小点的子形状后的编号和那些子形状的样子。", "sql": "SELECT row_number() OVER() AS rn, ST_AsText(geom) AS wkt FROM (SELECT ST_SubDivide( 'POLYGON((132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150, 57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122, 190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10))'::geometry,10)) AS f(geom);", "execution_result": [[1, "POLYGON((85 35,68 29,66 28,32 56,22 64,29.82608695652174 100,119 100,119 23,85 35))"], [2, "POLYGON((186 52,178 34,168 18,147 13,132 10,119 23,119 56,186 56,186 52))"], [3, "POLYGON((185 79,186 56,119 56,119 100,190 100,185 79))"], [4, "POLYGON((40 119,36 150,57 158,75 171,92 182,114 184,114 100,29.82608695652174 100,32 110,40 119))"], [5, "POLYGON((132 186,146 178,176 184,179 162,184 141,190 122,190 100,114 100,114 184,132 186))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2461, "question_en": "Please list the numbers and appearances of those sub-shapes after the shape POLYGON((132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150,57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122,190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10)) is divided into sub-shapes each with a maximum of 10 little dots."}
{"id": 456, "function": "ST_Subdivide", "question": "把那些从起点0 0到终点85 85的连线，经过1200000米的间距分成几段，再细分成最多8个小点的部分，最后看看它的文字描述是什么。", "sql": "SELECT ST_AsText( ST_Subdivide( ST_Segmentize('LINESTRING(0 0, 85 85)'::geography, 1200000)::geometry, 8));", "execution_result": [["LINESTRING(0 0,0.487578359029357 5.576590567461958,0.984542144675897 11.152772115509297,1.501010596397223 16.728103548357065,1.945321136303313 21.25)"], ["LINESTRING(1.945321136303313 21.25,2.048695380627787 22.30207413873394,2.642046419676733 27.874053354515492,3.299940624127865 33.44321680294103,4.048367194897422 39.008428252023904,4.598904684206937 42.5)"], ["LINESTRING(4.598904684206937 42.5,4.924985039227316 44.56803892063212,5.987374093906392 50.11952292447013,7.329091976767396 55.65876468790251,8.796387499384128 60.19695059949241)"], ["LINESTRING(8.796387499384128 60.19695059949241,9.113755795337793 61.17853631776249,11.65581666913683 66.66485041602019,15.642041247655008 72.08676906017453,22.871662720021188 77.36096281168942,24.699178513155204 77.89390119898482)"], ["LINESTRING(24.699178513155204 77.89390119898482,39.40460966227439 82.18228480176364,44.79945234210347 82.51567662270111)"], ["LINESTRING(44.79945234210347 82.51567662270111,85 85)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2468, "question_en": "Take the line from the starting point 0 0 to the endpoint 85 85, split it into segments with a spacing of 1,200,000 meters, then further divide into parts with up to 8 small dots, and finally see what its text description is."}
{"id": 458, "function": "ST_SymDifference", "question": "看看那两段直线，分别从(50 100)到(50 200)和从(50 50)到(50 150)，找出它们之间那些不重叠的部分，用一种简单的文本方式描述出来。", "sql": "SELECT ST_AsText( ST_SymDifference( ST_GeomFromText('LINESTRING(50 100, 50 200)'), ST_GeomFromText('LINESTRING(50 50, 50 150)') ) );", "execution_result": [["MULTILINESTRING((50 150,50 200),(50 50,50 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2469, "question_en": "Look at those two line segments, one from (50 100) to (50 200) and the other from (50 50) to (50 150), and find the parts where they don't overlap, describing it in a simple text way."}
{"id": 455, "function": "ST_Subdivide", "question": "给一个带有很多点的形状，像是(132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150,57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122,190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10)，把它拆成几个小块，每块最多有10个点，然后告诉我每块的编号和形状是什么样子的。", "sql": "SELECT row_number() OVER() AS rn, ST_AsText(geom) AS wkt FROM (SELECT ST_SubDivide( 'POLYGON((132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150, 57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122, 190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10))'::geometry,10)) AS f(geom);", "execution_result": [[1, "POLYGON((85 35,68 29,66 28,32 56,22 64,29.82608695652174 100,119 100,119 23,85 35))"], [2, "POLYGON((186 52,178 34,168 18,147 13,132 10,119 23,119 56,186 56,186 52))"], [3, "POLYGON((185 79,186 56,119 56,119 100,190 100,185 79))"], [4, "POLYGON((40 119,36 150,57 158,75 171,92 182,114 184,114 100,29.82608695652174 100,32 110,40 119))"], [5, "POLYGON((132 186,146 178,176 184,179 162,184 141,190 122,190 100,114 100,114 184,132 186))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2462, "question_en": "Given a shape with many little dots, like (132 10,119 23,85 35,68 29,66 28,49 42,32 56,22 64,32 110,40 119,36 150,57 158,75 171,92 182,114 184,132 186,146 178,176 184,179 162,184 141,190 122,190 100,185 79,186 56,186 52,178 34,168 18,147 13,132 10), break it into several small pieces, each with no more than 10 dots, and then tell me the number and what each piece looks like."}
{"id": 458, "function": "ST_SymDifference", "question": "请把两条竖着的线，分别从(50, 100)到(50, 200)和(50, 50)到(50, 150)，做一种奇怪的组合，看看结果是什么样子，用一些格式来描述它。", "sql": "SELECT ST_AsText( ST_SymDifference( ST_GeomFromText('LINESTRING(50 100, 50 200)'), ST_GeomFromText('LINESTRING(50 50, 50 150)') ) );", "execution_result": [["MULTILINESTRING((50 150,50 200),(50 50,50 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2470, "question_en": "Please take two vertical lines, one from (50, 100) to (50, 200) and another from (50, 50) to (50, 150), and do some kind of strange combination to see what the result looks like, describing it in some format."}
{"id": 458, "function": "ST_SymDifference", "question": "看看这些在50这个横坐标上竖着的两条线段，分别从(50 100)到(50 200)和从(50 50)到(50 150)，它们之间有什么独特的交集或区别，然后把结果用WKT格式告诉我。", "sql": "SELECT ST_AsText( ST_SymDifference( ST_GeomFromText('LINESTRING(50 100, 50 200)'), ST_GeomFromText('LINESTRING(50 50, 50 150)') ) );", "execution_result": [["MULTILINESTRING((50 150,50 200),(50 50,50 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2471, "question_en": "Take a look at these two vertical lines at the 50 horizontal coordinate, one going from (50 100) to (50 200) and the other from (50 50) to (50 150). Find out their unique overlap or difference, and tell me the result in WKT format."}
{"id": 458, "function": "ST_SymDifference", "question": "能不能告诉我，那些从50到100和从50到200延伸的线，还有从50到50以及从50到150的线，它们之间有什么不同之处？用一种特别的字符串来表示就好。", "sql": "SELECT ST_AsText( ST_SymDifference( ST_GeomFromText('LINESTRING(50 100, 50 200)'), ST_GeomFromText('LINESTRING(50 50, 50 150)') ) );", "execution_result": [["MULTILINESTRING((50 150,50 200),(50 50,50 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2472, "question_en": "Could you tell me, what are the differences between the lines extending from 50 to 100 and from 50 to 200, and the lines from 50 to 50 and from 50 to 150? Just represent it with a special string."}
{"id": 458, "function": "ST_SymDifference", "question": "找出那些从50 100到50 200和从50 50到50 150的两条直线的不同之处，然后用某种文本方式展示出来。", "sql": "SELECT ST_AsText( ST_SymDifference( ST_GeomFromText('LINESTRING(50 100, 50 200)'), ST_GeomFromText('LINESTRING(50 50, 50 150)') ) );", "execution_result": [["MULTILINESTRING((50 150,50 200),(50 50,50 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2473, "question_en": "Find the differences between the two lines from 50 100 to 50 200 and from 50 50 to 50 150, and then display them in some kind of text format."}
{"id": 458, "function": "ST_SymDifference", "question": "看看这两条从50垂直伸出的线段，它们分别是从100到200和从50到150，能不能找出它们的奇妙组合并用奇特的方式表达出来？", "sql": "SELECT ST_AsText( ST_SymDifference( ST_GeomFromText('LINESTRING(50 100, 50 200)'), ST_GeomFromText('LINESTRING(50 50, 50 150)') ) );", "execution_result": [["MULTILINESTRING((50 150,50 200),(50 50,50 100))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2474, "question_en": "Look at these two lines stretching vertically from 50; one goes from 100 to 200 and the other from 50 to 150. Can you find their intriguing combination and express it in a peculiar way?"}
{"id": 459, "function": "ST_SymDifference", "question": "对于那些包含Z坐标的小线段，像是LINESTRING(1 2 1, 1 4 2)和LINESTRING(1 1 3, 1 3 4)，你能不能找出它们之间的独特部分，然后用EWKT的方式告诉我？", "sql": "SELECT ST_AsEWKT(ST_SymDifference(ST_GeomFromEWKT('LINESTRING(1 2 1, 1 4 2)'), ST_GeomFromEWKT('LINESTRING(1 1 3, 1 3 4)')));", "execution_result": [["MULTILINESTRING((1 3 4,1 4 2),(1 1 3,1 2 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2476, "question_en": "For those little segments with Z coordinates, like LINESTRING(1 2 1, 1 4 2) and LINESTRING(1 1 3, 1 3 4), can you find the unique parts between them and tell me in EWKT format?"}
{"id": 459, "function": "ST_SymDifference", "question": "看看这两条三维线段，LINESTRING(1 2 1, 1 4 2)和LINESTRING(1 1 3, 1 3 4)，它们之间有什么不一样的地方，然后用一种特别的格式来展示结果。", "sql": "SELECT ST_AsEWKT(ST_SymDifference(ST_GeomFromEWKT('LINESTRING(1 2 1, 1 4 2)'), ST_GeomFromEWKT('LINESTRING(1 1 3, 1 3 4)')));", "execution_result": [["MULTILINESTRING((1 3 4,1 4 2),(1 1 3,1 2 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2475, "question_en": "Take a look at these two 3D lines, LINESTRING(1 2 1, 1 4 2) and LINESTRING(1 1 3, 1 3 4), find what's different between them, and show the result in a special format."}
{"id": 459, "function": "ST_SymDifference", "question": "把那些有点像线的形状拿来做个不一样的组合，包含1 2 1和1 4 2，还有1 1 3和1 3 4，然后用一种特定的格式看看结果是什么样的。", "sql": "SELECT ST_AsEWKT(ST_SymDifference(ST_GeomFromEWKT('LINESTRING(1 2 1, 1 4 2)'), ST_GeomFromEWKT('LINESTRING(1 1 3, 1 3 4)')));", "execution_result": [["MULTILINESTRING((1 3 4,1 4 2),(1 1 3,1 2 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2477, "question_en": "Take those shapes that are kind of like lines and make a different combination with 1 2 1 and 1 4 2, and also 1 1 3 and 1 3 4, then use a special format to see what the result looks like."}
{"id": 459, "function": "ST_SymDifference", "question": "找出那两条三维小线段LINESTRING(1 2 1, 1 4 2)和LINESTRING(1 1 3, 1 3 4)之间的那些不重合的部分，然后用一种特殊字符串方式告诉我。", "sql": "SELECT ST_AsEWKT(ST_SymDifference(ST_GeomFromEWKT('LINESTRING(1 2 1, 1 4 2)'), ST_GeomFromEWKT('LINESTRING(1 1 3, 1 3 4)')));", "execution_result": [["MULTILINESTRING((1 3 4,1 4 2),(1 1 3,1 2 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2478, "question_en": "Find the non-overlapping parts between those two little 3D lines LINESTRING(1 2 1, 1 4 2) and LINESTRING(1 1 3, 1 3 4), and tell me using a special string format."}
{"id": 461, "function": "ST_Union", "question": "把那个三角形的东西，还有那两个小点和一条线，放在一起，看看它们变成了什么样子，用EWKT这种格式告诉我。", "sql": "SELECT ST_AsEWKT(ST_Union(geom)) FROM ( SELECT 'POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))'::geometry geom UNION ALL SELECT 'POINT(5 5 5)'::geometry geom UNION ALL SELECT 'POINT(-2 3 1)'::geometry geom UNION ALL SELECT 'LINESTRING(5 5 5, 10 10 10)'::geometry geom ) AS foo;", "execution_result": [["GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,-7 4.2 2)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2484, "question_en": "Put that triangular thing, those two little dots, and a line together, and see what they become, tell me in that EWKT format."}
{"id": 459, "function": "ST_SymDifference", "question": "用一条从1到2的Z坐标的三维线和另一条从3到4的三维线做个有趣的比较，结果要用一种能显示位置的格式，还要带上那些神秘的数字信息。", "sql": "SELECT ST_AsEWKT(ST_SymDifference(ST_GeomFromEWKT('LINESTRING(1 2 1, 1 4 2)'), ST_GeomFromEWKT('LINESTRING(1 1 3, 1 3 4)')));", "execution_result": [["MULTILINESTRING((1 3 4,1 4 2),(1 1 3,1 2 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2479, "question_en": "Take one 3D line with Z going from 1 to 2 and another from 3 to 4, do an interesting comparison, and show the result in a format that shows location, including those mysterious number details."}
{"id": 460, "function": "ST_Union", "question": "把那些连接的小线段，像1 2到3 4，还有3 4到4 5，合在一起，想看看合成后的样子，用一种文本方式。", "sql": "SELECT ST_AsText(ST_Union(ARRAY[ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)')])) AS wktunion;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2481, "question_en": "Combine those connecting little lines, like 1 2 to 3 4, and 3 4 to 4 5, into one, and see what it looks like in a text form."}
{"id": 460, "function": "ST_Union", "question": "怎么把从(1,2)到(3,4)的小线段和从(3,4)到(4,5)的小线段组合成一个整体，然后用一种文字格式来表示这个整体？", "sql": "SELECT ST_AsText(ST_Union(ARRAY[ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)')])) AS wktunion;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2483, "question_en": "How to combine the little line segment from (1,2) to (3,4) with the little line segment from (3,4) to (4,5) into one whole, and then represent this whole using a text format?"}
{"id": 461, "function": "ST_Union", "question": "在地理数据处理中，把一个闭合的三角形样子，两个小点，和一条直线合在一起，最后用一种特别的格式显示。具体数字有：(-7 4.2 2)、(5 5 5)、(-2 3 1)、(10 10 10)。", "sql": "SELECT ST_AsEWKT(ST_Union(geom)) FROM ( SELECT 'POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))'::geometry geom UNION ALL SELECT 'POINT(5 5 5)'::geometry geom UNION ALL SELECT 'POINT(-2 3 1)'::geometry geom UNION ALL SELECT 'LINESTRING(5 5 5, 10 10 10)'::geometry geom ) AS foo;", "execution_result": [["GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,-7 4.2 2)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2486, "question_en": "In handling geographic data, merge a closed triangle shape, two small dots, and a straight line together, then display in a special format. The specific numbers involved are: (-7 4.2 2), (5 5 5), (-2 3 1), (10 10 10)."}
{"id": 461, "function": "ST_Union", "question": "把一个围住这些坐标的小形状、两个小点和一条线合在一起，看看它们变成了啥样的长字符串。", "sql": "SELECT ST_AsEWKT(ST_Union(geom)) FROM ( SELECT 'POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))'::geometry geom UNION ALL SELECT 'POINT(5 5 5)'::geometry geom UNION ALL SELECT 'POINT(-2 3 1)'::geometry geom UNION ALL SELECT 'LINESTRING(5 5 5, 10 10 10)'::geometry geom ) AS foo;", "execution_result": [["GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,-7 4.2 2)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2489, "question_en": "Combine a shape that surrounds these coordinates, two little dots, and a line, and see what kind of long string they turn into."}
{"id": 460, "function": "ST_Union", "question": "把那些由(1 2到3 4)和(3 4到4 5)构成的两条线，想办法合成一个整体，然后看看它的文字长啥样。", "sql": "SELECT ST_AsText(ST_Union(ARRAY[ST_GeomFromText('LINESTRING(1 2, 3 4)'), ST_GeomFromText('LINESTRING(3 4, 4 5)')])) AS wktunion;", "execution_result": [["MULTILINESTRING((1 2,3 4),(3 4,4 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2482, "question_en": "Take those two lines made from (1 2 to 3 4) and (3 4 to 4 5), somehow make them into one whole, and then see what it looks like in text."}
{"id": 459, "function": "ST_SymDifference", "question": "在空间中有两条小线段，一个从(1 2 1)到(1 4 2)，另一个从(1 1 3)到(1 3 4)，它们之间的特别不同之处是什么？请用一种特别的文本格式来描述。", "sql": "SELECT ST_AsEWKT(ST_SymDifference(ST_GeomFromEWKT('LINESTRING(1 2 1, 1 4 2)'), ST_GeomFromEWKT('LINESTRING(1 1 3, 1 3 4)')));", "execution_result": [["MULTILINESTRING((1 3 4,1 4 2),(1 1 3,1 2 1))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2480, "question_en": "In space, there are two little line segments, one from (1 2 1) to (1 4 2), the other from (1 1 3) to (1 3 4). What is the special difference between them? Please describe it in a special text format."}
{"id": 461, "function": "ST_Union", "question": "把那些有高度的小形状和线条合在一起，比如一个有点复杂的四边形，两个小点，还有一条从(5 5 5)到(10 10 10)的线，结果要用一种特别的格式来写出来。", "sql": "SELECT ST_AsEWKT(ST_Union(geom)) FROM ( SELECT 'POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))'::geometry geom UNION ALL SELECT 'POINT(5 5 5)'::geometry geom UNION ALL SELECT 'POINT(-2 3 1)'::geometry geom UNION ALL SELECT 'LINESTRING(5 5 5, 10 10 10)'::geometry geom ) AS foo;", "execution_result": [["GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,-7 4.2 2)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2488, "question_en": "Combine those little shapes with heights and lines, like a somewhat complex quadrilateral, two small dots, and a line from (5 5 5) to (10 10 10), and the result should be written in a special format."}
{"id": 464, "function": "ST_Union", "question": "把那些坐标是(1,2)的小点和坐标是(-2,3)的小点合在一起，看看它们整体的文字样子是什么。", "sql": "SELECT ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(-2 3)' :: geometry));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2491, "question_en": "Combine those little dots with coordinates (1,2) and (-2,3) and see what their overall text representation looks like."}
{"id": 461, "function": "ST_Union", "question": "把那个有三维小点、线和形状的集合弄成一个整体，看它们合在一起后的EWKT样子，坐标是(-7 4.2 2)、(5 5 5)、(-2 3 1)和(5 5 5, 10 10 10)。", "sql": "SELECT ST_AsEWKT(ST_Union(geom)) FROM ( SELECT 'POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))'::geometry geom UNION ALL SELECT 'POINT(5 5 5)'::geometry geom UNION ALL SELECT 'POINT(-2 3 1)'::geometry geom UNION ALL SELECT 'LINESTRING(5 5 5, 10 10 10)'::geometry geom ) AS foo;", "execution_result": [["GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,-7 4.2 2)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2487, "question_en": "Combine the collection with 3D little dots, lines, and shapes into one whole, and see their EWKT form when together, with coordinates (-7 4.2 2), (5 5 5), (-2 3 1), and (5 5 5, 10 10 10)."}
{"id": 464, "function": "ST_Union", "question": "给我看看把那些坐标点(1 2)和(-2 3)合在一起后的样子，用那种文本格式。", "sql": "SELECT ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(-2 3)' :: geometry));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2493, "question_en": "Show me what it looks like when you combine those coordinates (1 2) and (-2 3) into a single shape, using that text format."}
{"id": 461, "function": "ST_Union", "question": "怎么把一个有Z坐标的3D多边形和两个3D小点，还有一条3D线段，像拼图一样组合在一起，然后用一种特别的格式展示？多边形是((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))，两个点是(5 5 5)和(-2 3 1)，线段是(5 5 5, 10 10 10)。", "sql": "SELECT ST_AsEWKT(ST_Union(geom)) FROM ( SELECT 'POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2))'::geometry geom UNION ALL SELECT 'POINT(5 5 5)'::geometry geom UNION ALL SELECT 'POINT(-2 3 1)'::geometry geom UNION ALL SELECT 'LINESTRING(5 5 5, 10 10 10)'::geometry geom ) AS foo;", "execution_result": [["GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,-7 4.2 2)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2485, "question_en": "How can you piece together a 3D polygon with Z coordinates, two little 3D points, and a 3D line like a puzzle, and then show it in a special format? The polygon is ((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2, -7 4.2 2)), the two points are (5 5 5) and (-2 3 1), and the line is (5 5 5, 10 10 10)."}
{"id": 465, "function": "ST_Union", "question": "把两个一模一样的小点(1 2)合在一起，看看会得到什么样的文字描述。", "sql": "select ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(1 2)' :: geometry));", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2497, "question_en": "Combine two identical little dots at (1 2) and see what kind of text description you get."}
{"id": 465, "function": "ST_Union", "question": "把这两个在同一个位置的小点(1 2)合成一个，然后用一种常见的文本方式告诉我结果。", "sql": "select ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(1 2)' :: geometry));", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2496, "question_en": "Combine these two tiny spots at the same place (1 2) into one, then tell me the result in a common text format."}
{"id": 465, "function": "ST_Union", "question": "把两个坐标都是(1,2)的小点合在一起，看看它们合成后是什么样子。", "sql": "select ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(1 2)' :: geometry));", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2498, "question_en": "Combine two little dots both at (1,2) and see what they look like after merging."}
{"id": 464, "function": "ST_Union", "question": "把那个1 2的小点和-2 3的小点合在一起，然后看看它们变成了什么样子，用那种文本格式来表示。", "sql": "SELECT ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(-2 3)' :: geometry));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2494, "question_en": "Combine the little dot at 1 2 with the one at -2 3, and see what they become, shown in that text format."}
{"id": 464, "function": "ST_Union", "question": "把坐标为1 2和-2 3的两个位置合在一起，看看它们会变成什么样子，用文字表达出来。", "sql": "SELECT ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(-2 3)' :: geometry));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2495, "question_en": "Combine the two locations with coordinates 1 2 and -2 3, and see what they become, expressed in words."}
{"id": 465, "function": "ST_Union", "question": "给我看看两个位置在1 2这个地方的点合起来会是什么样子的，用那种描述形状的字符串格式。", "sql": "select ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(1 2)' :: geometry))", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2499, "question_en": "Show me what it looks like when two spots at the location 1 2 are combined, using that string format that describes shapes."}
{"id": 465, "function": "ST_Union", "question": "把两个位置都是(1,2)的小点放在一起，看看它们合并后变成什么样子。", "sql": "select ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(1 2)' :: geometry))", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2501, "question_en": "Combine two little dots both sitting at (1,2) and see what they look like after merging."}
{"id": 465, "function": "ST_Union", "question": "把两个一模一样的小点(1 2)放在一起，看看它们的合体是什么样子，并用某种文本形式说出来。", "sql": "select ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(1 2)' :: geometry))", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2500, "question_en": "Put two identical little dots (1 2) together, see what their combination looks like, and describe it in some text form."}
{"id": 467, "function": "ST_Buffer", "question": "想象一个以100 90为中心的圆形区域，半径是50单位。计算这个区域的顶点数，如果它是用比较精致的弧线（默认8段）画出来的，和用普通的弧线（只有2段）画出来的，分别叫做promisingcircle_pcount和lamecircle_pcount。", "sql": "SELECT ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) AS promisingcircle_pcount, ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50, 2)) AS lamecircle_pcount;", "execution_result": [[33, 9]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2502, "question_en": "Imagine a circular area centered at 100 90, with a radius of 50 units. Calculate the number of vertices for this area if drawn with more refined arcs (default 8 segments) and with simpler arcs (only 2 segments), named promisingcircle_pcount and lamecircle_pcount respectively."}
{"id": 467, "function": "ST_Buffer", "question": "对于那个在100和90位置的小点，想象一下用50单位的距离围绕它画两个圆，一个是普通的圆，一个是简单的圆，然后告诉我这两个圆的边上有多少个小点作为promisingcircle_pcount和lamecircle_pcount。", "sql": "SELECT ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) AS promisingcircle_pcount, ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50, 2)) AS lamecircle_pcount;", "execution_result": [[33, 9]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2503, "question_en": "For that little dot at the 100 and 90 position, imagine drawing two circles around it with a 50-unit distance, one as a regular circle and the other a simple circle, then tell me how many little dots are on the edges of these two circles as promisingcircle_pcount and lamecircle_pcount."}
{"id": 464, "function": "ST_Union", "question": "把那些小点，比如(1 2)和(-2 3)，放在一起，看它们合并成什么样子，然后用某种格式写出来。", "sql": "SELECT ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(-2 3)' :: geometry));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2490, "question_en": "Put those little dots, like (1 2) and (-2 3), together to see what they look like combined, then write it out in some format."}
{"id": 467, "function": "ST_Buffer", "question": "给那个在(100, 90)位置的小点画两个圈：一个是用普通方式画的50单位大圈，另一个是用特别方式画的同样大的圈，看看每个圈有多少个角，并叫它们一个有趣的圈角数，另一个无趣的圈角数。", "sql": "SELECT ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) AS promisingcircle_pcount, ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50, 2)) AS lamecircle_pcount;", "execution_result": [[33, 9]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2504, "question_en": "Draw two circles around that little dot at (100, 90): one is a big 50-unit circle drawn in the usual way, and the other is the same size but drawn in a special way. See how many corners each has and call one the interesting circle's corner count and the other the boring circle's corner count."}
{"id": 467, "function": "ST_Buffer", "question": "看看那个点在100, 90那里，做两个不同的圆圈，一个是比较细致的8段，一个是简单的2段，都是半径50。数数看每个圈圈的角有多少个，分别叫做promisingcircle_pcount和lamecircle_pcount。", "sql": "SELECT ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) AS promisingcircle_pcount, ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50, 2)) AS lamecircle_pcount;", "execution_result": [[33, 9]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2506, "question_en": "Look at that dot at 100, 90, make two different circles, one is a more detailed 8-part one, and the other is a simple 2-part, both with a radius of 50. Count how many corners each circle has, named promisingcircle_pcount and lamecircle_pcount."}
{"id": 467, "function": "ST_Buffer", "question": "看看坐标是100和90的小点，围绕它画一个半径50的圈，比较一下用默认方式和简单方式画出来的圈圈上有多少个小点，结果叫做promisingcircle_pcount和lamecircle_pcount。", "sql": "SELECT ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) AS promisingcircle_pcount, ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50, 2)) AS lamecircle_pcount;", "execution_result": [[33, 9]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2507, "question_en": "Check out the little dot at coordinates 100 and 90, draw a circle around it with a radius of 50, and compare how many little dots are on the circles drawn in the default and simple ways, with results called promisingcircle_pcount and lamecircle_pcount."}
{"id": 468, "function": "ST_Buffer", "question": "把那个有50 50到150 50这样围起来的形状，变成一条线，顺着一个特定的方向转转，然后在这条线的左边弄个20的安全边。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))), 20, 'side=left');", "execution_result": [["010300000001000000050000000000000000004940000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000C06240000000000000494000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2509, "question_en": "Take that shape going from 50 50 to 150 50 and back, turn it into a line, spin it in a certain way, and then make a 20-unit safety edge on the left of this line."}
{"id": 468, "function": "ST_Buffer", "question": "把那种四边形的边界调整一下，好像要遵循某个手法，然后在它左边加个20单位宽的空间。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))), 20, 'side=left');", "execution_result": [["010300000001000000050000000000000000004940000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000C06240000000000000494000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2508, "question_en": "Adjust the boundary of that quadrilateral, like it needs to follow some kind of rule, then add a 20-unit wide space on its left side."}
{"id": 467, "function": "ST_Buffer", "question": "你能告诉我有一个中心在点(100 90)的圆形，它的半径是50单位。一个圆用很多小段来模拟，另一个圆只用两段。它们各自有多少个顶点呢？可以叫它们比较好的圆和普通的圆。", "sql": "SELECT ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) AS promisingcircle_pcount, ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50, 2)) AS lamecircle_pcount;", "execution_result": [[33, 9]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2505, "question_en": "Can you tell me about a circle centered at point (100 90) with a radius of 50 units? One circle is simulated with many small segments, and the other with just two. How many vertices do they each have? You can call them the promising circle and the regular circle."}
{"id": 468, "function": "ST_Buffer", "question": "对于那些小点连成的形状，经过某种规则调整后，想象在它的左边扩展出20个单位的空间是什么样子。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))), 20, 'side=left');", "execution_result": [["010300000001000000050000000000000000004940000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000C06240000000000000494000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2511, "question_en": "For that shape made by connecting little dots, after adjusting by some rule, imagine what it looks like when expanding 20 units of space on its left side."}
{"id": 464, "function": "ST_Union", "question": "将两个小点坐标分别是1,2和-2,3，用一种方式组合成一个形状，然后看看那个形状是什么样子。", "sql": "SELECT ST_AsText(ST_Union('POINT(1 2)' :: geometry, 'POINT(-2 3)' :: geometry));", "execution_result": [["MULTIPOINT((1 2),(-2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2492, "question_en": "Take two little dots with coordinates 1,2 and -2,3, combine them in some way to form a shape, and then see what that shape looks like."}
{"id": 468, "function": "ST_Buffer", "question": "从这些点组成的线条，按照惯常右手法则绕一圈，想象在左边扩展出20单位宽的形状，看看它是什么样子？", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))), 20, 'side=left');", "execution_result": [["010300000001000000050000000000000000004940000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000C06240000000000000494000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2513, "question_en": "From the line formed by these points, following the usual right-hand rule, imagine expanding a shape 20 units wide on the left side, and see what it looks like?"}
{"id": 469, "function": "ST_Buffer", "question": "围绕坐标(100 90)画一个圈，半径是50，用两条线来画每个四分之一的圆。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=2');", "execution_result": [["010300000001000000090000000000000000C062400000000000805640AED904F05EEB60404999EC3F84524B4000000000000059400000000000004440A44CF61F422950404899EC3F84524B4000000000000049400000000000805640A44CF61F422950405CB309E0BD565F4000000000000059400000000000806140AED904F05EEB60405CB309E0BD565F400000000000C062400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2514, "question_en": "Draw a circle around the coordinates (100 90) with a radius of 50, using two lines for each quarter of the circle."}
{"id": 468, "function": "ST_Buffer", "question": "把那个围着点的图形从50 50到150 150变成它的外边线，然后用某种右手规则处理，再看看左边延伸20单位的形状会怎么样。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))), 20, 'side=left');", "execution_result": [["010300000001000000050000000000000000004940000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000C06240000000000000494000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2512, "question_en": "Take that shape surrounding points from 50 50 to 150 150 and turn it into its outer line, then handle it with some right-hand rule, and see what the shape looks like when it stretches 20 units to the left."}
{"id": 468, "function": "ST_Buffer", "question": "想象一个用点(50 50),(50 150),(150 150),(150 50)围成的形状，调整它的走向后，只在它的左边做一个20宽的缓冲区域。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))), 20, 'side=left');", "execution_result": [["010300000001000000050000000000000000004940000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000C06240000000000000494000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2510, "question_en": "Imagine a shape formed by the points (50 50), (50 150), (150 150), (150 50), and after adjusting its direction, make a 20-wide buffer area only on its left side."}
{"id": 469, "function": "ST_Buffer", "question": "拿着这个点，100和90，看它周围50单位的范围，试着让圆弧有点粗糙，用数字2来调整一下。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=2');", "execution_result": [["010300000001000000090000000000000000C062400000000000805640AED904F05EEB60404999EC3F84524B4000000000000059400000000000004440A44CF61F422950404899EC3F84524B4000000000000049400000000000805640A44CF61F422950405CB309E0BD565F4000000000000059400000000000806140AED904F05EEB60405CB309E0BD565F400000000000C062400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2515, "question_en": "Take this point, 100 and 90, and see the area around it within 50 units, trying to make the arc a bit rough using the number 2 to adjust it."}
{"id": 469, "function": "ST_Buffer", "question": "围绕100和90这两个点，画一个半径是50的小圆，四个方向用两条线凑合一下。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=2');", "execution_result": [["010300000001000000090000000000000000C062400000000000805640AED904F05EEB60404999EC3F84524B4000000000000059400000000000004440A44CF61F422950404899EC3F84524B4000000000000049400000000000805640A44CF61F422950405CB309E0BD565F4000000000000059400000000000806140AED904F05EEB60405CB309E0BD565F400000000000C062400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2517, "question_en": "Around the points 100 and 90, draw a small circle with a radius of 50, using two lines to approximate in four directions."}
{"id": 469, "function": "ST_Buffer", "question": "把那个在(100, 90)位置的小点弄得胖一点，半径是50，还要让圆的边缘有点粗糙，大概每四分之一圆有两个小段。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=2');", "execution_result": [["010300000001000000090000000000000000C062400000000000805640AED904F05EEB60404999EC3F84524B4000000000000059400000000000004440A44CF61F422950404899EC3F84524B4000000000000049400000000000805640A44CF61F422950405CB309E0BD565F4000000000000059400000000000806140AED904F05EEB60405CB309E0BD565F400000000000C062400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2516, "question_en": "Make that little dot at position (100, 90) a bit fatter, with a radius of 50, and let the circle's edge be somewhat rough, about two small segments per quarter circle."}
{"id": 469, "function": "ST_Buffer", "question": "给那个点在100 90的地方做个圈，距离是50，四分之一的圆分两段。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=2');", "execution_result": [["010300000001000000090000000000000000C062400000000000805640AED904F05EEB60404999EC3F84524B4000000000000059400000000000004440A44CF61F422950404899EC3F84524B4000000000000049400000000000805640A44CF61F422950405CB309E0BD565F4000000000000059400000000000806140AED904F05EEB60405CB309E0BD565F400000000000C062400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2518, "question_en": "Make a circle around that point at 100 90, with a distance of 50, and the quarter-circle is split into two parts."}
{"id": 469, "function": "ST_Buffer", "question": "在坐标100 90那里，画个圆圈，半径是50，用两个小线段来模拟每个圆角的部分。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=2');", "execution_result": [["010300000001000000090000000000000000C062400000000000805640AED904F05EEB60404999EC3F84524B4000000000000059400000000000004440A44CF61F422950404899EC3F84524B4000000000000049400000000000805640A44CF61F422950405CB309E0BD565F4000000000000059400000000000806140AED904F05EEB60405CB309E0BD565F400000000000C062400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2519, "question_en": "At coordinates 100 90, draw a circle with a radius of 50, using two small line segments to approximate each curved part."}
{"id": 470, "function": "ST_Buffer", "question": "给那个由(50 50,150 150,150 50)构成的线，想象一下在右边有个宽度是10的小区域。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=right');", "execution_result": [["01030000000100000007000000000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000004940000000000080614000000000000049400000000000806140A81EFC3FE7765F4058E103C018894C40A81EFC3FE776454000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2520, "question_en": "For that line made of (50 50,150 150,150 50), imagine a small area on the right side with a width of 10."}
{"id": 470, "function": "ST_Buffer", "question": "看看LINESTRING(50 50,150 150,150 50)右边长出10个单位厚的那片区域。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=right');", "execution_result": [["01030000000100000007000000000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000004940000000000080614000000000000049400000000000806140A81EFC3FE7765F4058E103C018894C40A81EFC3FE776454000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2523, "question_en": "Check out the area that grows 10 units thick on the right side of LINESTRING(50 50,150 150,150 50)."}
{"id": 470, "function": "ST_Buffer", "question": "给那条从(50 50)到(150 150)再到(150 50)的小线加个右边的保护层，距离是10个单位。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=right');", "execution_result": [["01030000000100000007000000000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000004940000000000080614000000000000049400000000000806140A81EFC3FE7765F4058E103C018894C40A81EFC3FE776454000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2522, "question_en": "Add a protective layer on the right side of the little line going from (50 50) to (150 150) and then to (150 50), with a distance of 10 units."}
{"id": 470, "function": "ST_Buffer", "question": "用这些点连接成的线，像是50 50到150 150再到150 50，做个宽是10的形状，只在右边扩展。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=right');", "execution_result": [["01030000000100000007000000000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000004940000000000080614000000000000049400000000000806140A81EFC3FE7765F4058E103C018894C40A81EFC3FE776454000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2521, "question_en": "With these points forming a line, like from 50 50 to 150 150 and then to 150 50, make a shape with width 10, extending only on the right side."}
{"id": 470, "function": "ST_Buffer", "question": "用那些点连成的线，像从右边扩展出一个宽度是10的区域，看看结果是什么样子。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=right');", "execution_result": [["01030000000100000007000000000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000004940000000000080614000000000000049400000000000806140A81EFC3FE7765F4058E103C018894C40A81EFC3FE776454000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2525, "question_en": "With those points forming a line, imagine extending a 10-width area from the right side, and see what it looks like."}
{"id": 470, "function": "ST_Buffer", "question": "对于一条从(50, 50)到(150, 150)再到(150, 50)的线，想象一下在它的右边给它加上一个宽度为10的小区域，会是什么样子？", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=right');", "execution_result": [["01030000000100000007000000000000000000494000000000000049400000000000C062400000000000C062400000000000C062400000000000004940000000000080614000000000000049400000000000806140A81EFC3FE7765F4058E103C018894C40A81EFC3FE776454000000000000049400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2524, "question_en": "For a line going from (50, 50) to (150, 150) and then to (150, 50), imagine adding a small area on its right side with a width of 10. What would it look like?"}
{"id": 474, "function": "ST_Buffer", "question": "把那个有点像坐标的东西 (-71.063526, 42.35785) 按照某个系统处理一下，然后换个系统，再画个大概半径100单位的圈，每个小圆弧用两条线来凑，最后弄成某种文本格式看看。", "sql": "SELECT ST_AsText(ST_Buffer( ST_Transform( ST_SetSRID(ST_Point(-71.063526, 42.35785),4269), 26986) ,100,2)) AS octagon;", "execution_result": [["POLYGON((236057.5905746494 900908.7599186979,236028.30125276805 900838.0492405792,235957.5905746494 900808.7599186979,235886.87989653074 900838.0492405792,235857.5905746494 900908.7599186979,235886.87989653074 900979.4705968165,235957.5905746494 901008.7599186979,236028.30125276805 900979.4705968165,236057.5905746494 900908.7599186979))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2526, "question_en": "Take those coordinates that look like (-71.063526, 42.35785), handle them with some system, then switch to another system, draw a circle with roughly 100 units radius using two lines for each little arc, and finally turn it into some text format to see."}
{"id": 474, "function": "ST_Buffer", "question": "把那个在经度-71.063526和纬度42.35785的点，换个坐标系后，想象它周围有个100单位的圆圈，用8段线段围成的样子，结果是什么样的呢？", "sql": "SELECT ST_AsText(ST_Buffer( ST_Transform( ST_SetSRID(ST_Point(-71.063526, 42.35785),4269), 26986) ,100,2)) AS octagon;", "execution_result": [["POLYGON((236057.5905746494 900908.7599186979,236028.30125276805 900838.0492405792,235957.5905746494 900808.7599186979,235886.87989653074 900838.0492405792,235857.5905746494 900908.7599186979,235886.87989653074 900979.4705968165,235957.5905746494 901008.7599186979,236028.30125276805 900979.4705968165,236057.5905746494 900908.7599186979))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2529, "question_en": "For that point at longitude -71.063526 and latitude 42.35785, after switching to another coordinate system, imagine a circle around it with a 100-unit radius, made up of 8 segments. What does that look like?"}
{"id": 474, "function": "ST_Buffer", "question": "对于那个在经度-71.063526和纬度42.35785的小点，先用一种叫4269的方式定位，然后换个叫26986的平面方式，再给它画个100单位大小的圈，每个弯曲的地方用两条线来凑，最后告诉我它的样子。", "sql": "SELECT ST_AsText(ST_Buffer( ST_Transform( ST_SetSRID(ST_Point(-71.063526, 42.35785),4269), 26986) ,100,2)) AS octagon;", "execution_result": [["POLYGON((236057.5905746494 900908.7599186979,236028.30125276805 900838.0492405792,235957.5905746494 900808.7599186979,235886.87989653074 900838.0492405792,235857.5905746494 900908.7599186979,235886.87989653074 900979.4705968165,235957.5905746494 901008.7599186979,236028.30125276805 900979.4705968165,236057.5905746494 900908.7599186979))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2528, "question_en": "For that little dot at longitude -71.063526 and latitude 42.35785, first locate it using something called 4269, then switch to a flat method called 26986, draw a circle 100 units big around it with two lines for each curve, and finally tell me how it looks."}
{"id": 474, "function": "ST_Buffer", "question": "有一个点在(-71.063526, 42.35785)那儿，先用一种叫NAD83的方式给它定位，然后再看看它在马萨诸塞州的米制图上长啥样，最后围着它画一个100米远的八边形圈圈，能把这个圈圈的样子写出来吗？", "sql": "SELECT ST_AsText(ST_Buffer( ST_Transform( ST_SetSRID(ST_Point(-71.063526, 42.35785),4269), 26986) ,100,2)) AS octagon;", "execution_result": [["POLYGON((236057.5905746494 900908.7599186979,236028.30125276805 900838.0492405792,235957.5905746494 900808.7599186979,235886.87989653074 900838.0492405792,235857.5905746494 900908.7599186979,235886.87989653074 900979.4705968165,235957.5905746494 901008.7599186979,236028.30125276805 900979.4705968165,236057.5905746494 900908.7599186979))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2527, "question_en": "There's a point at (-71.063526, 42.35785), first locate it using something called NAD83, then see how it looks on a Massachusetts meter map, and finally draw an octagon circle 100 meters away around it. Can you write out what this circle looks like?"}
{"id": 474, "function": "ST_Buffer", "question": "把那个位置在(-71.063526, 42.35785)的小点，经过某种坐标转换后，扩展成一个距离是100的形状，用2段来画每个弯曲的小部分，结果是啥？", "sql": "SELECT ST_AsText(ST_Buffer( ST_Transform( ST_SetSRID(ST_Point(-71.063526, 42.35785),4269), 26986) ,100,2)) AS octagon;", "execution_result": [["POLYGON((236057.5905746494 900908.7599186979,236028.30125276805 900838.0492405792,235957.5905746494 900808.7599186979,235886.87989653074 900838.0492405792,235857.5905746494 900908.7599186979,235886.87989653074 900979.4705968165,235957.5905746494 901008.7599186979,236028.30125276805 900979.4705968165,236057.5905746494 900908.7599186979))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2531, "question_en": "What happens if you take that little dot at (-71.063526, 42.35785), change its coordinates a bit, stretch it out by 100, and use 2 segments to draw each curvy part?"}
{"id": 476, "function": "ST_Buffer", "question": "给那个坐标点(100 90)画个圈，半径是50，记得每个弯弯处要有8段哦。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=8');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2536, "question_en": "Draw a circle around that coordinate point (100 90), with a radius of 50, and make sure each curved part has 8 segments."}
{"id": 476, "function": "ST_Buffer", "question": "围绕着坐标100, 90的那个点，画一个半径为50的圆形保护壳，每个弯曲处用8个小线段来凑成。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=8');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2532, "question_en": "Around the point at coordinates 100, 90, draw a circular protective shell with a radius of 50, using 8 little line segments to form each curve."}
{"id": 476, "function": "ST_Buffer", "question": "给那个在100和90位置的小点画一个边长50的保护圈，记得用8段线来画每个小弧弯。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=8');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2533, "question_en": "Draw a protective circle with a length of 50 around the small dot at position 100 and 90, and remember to use 8 segments for each little arc bend."}
{"id": 476, "function": "ST_Buffer", "question": "找一个以坐标(100 90)为中心，距离是50的范围，像画圆一样但用8段线条画每个小弯的区域。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=8');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2535, "question_en": "Find an area centered around the coordinates (100 90), with a span of 50, like drawing a circle but using 8 line pieces for each little curve."}
{"id": 476, "function": "ST_Buffer", "question": "对于坐标是(100, 90)的那个点，想象一个半径为50的圆圈，把它画出来，记得让圆圈看起来有8个小段的那种圆滑。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=8');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2534, "question_en": "For that point with coordinates (100, 90), imagine drawing a circle with a radius of 50, and make sure it looks smooth with 8 little segments."}
{"id": 474, "function": "ST_Buffer", "question": "把那个在-71.063526, 42.35785位置的小点，从一个编号4269的地图换到编号26986的地图上，然后围着它画个半径100的八边形，边上每个方向画两条线，看看它长什么样子。", "sql": "SELECT ST_AsText(ST_Buffer( ST_Transform( ST_SetSRID(ST_Point(-71.063526, 42.35785),4269), 26986) ,100,2)) AS octagon;", "execution_result": [["POLYGON((236057.5905746494 900908.7599186979,236028.30125276805 900838.0492405792,235957.5905746494 900808.7599186979,235886.87989653074 900838.0492405792,235857.5905746494 900908.7599186979,235886.87989653074 900979.4705968165,235957.5905746494 901008.7599186979,236028.30125276805 900979.4705968165,236057.5905746494 900908.7599186979))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2530, "question_en": "Take that little dot at the spot -71.063526, 42.35785, move it from map number 4269 to map number 26986, then draw an octagon around it with a radius of 100, with two lines per direction, and see what it looks like."}
{"id": 476, "function": "ST_Buffer", "question": "对那个在(100 90)的小点做一下50单位的扩展，就像画个圆，四分之一圆用8段线来凑合一下。", "sql": "SELECT ST_Buffer( ST_GeomFromText('POINT(100 90)'), 50, 'quad_segs=8');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2537, "question_en": "For that little dot at (100 90), do a 50-unit expansion, like drawing a circle, with a quarter circle approximated using 8 segments."}
{"id": 477, "function": "ST_Buffer", "question": "把那个四边形的轮廓调成右手方向，然后在它右边弄个20距离的区域。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))')) ), 20,'side=right');", "execution_result": [["01030000000200000007000000000000000000494000000000000049400000000000004940000000000080514000000000000049400000000000C062400000000000C062400000000000C062400000000000C0624000000000000049400000000000805140000000000000494000000000000049400000000000004940050000000000000000805140000000000080514000000000004060400000000000805140000000000040604000000000004060400000000000805140000000000040604000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2538, "question_en": "Take that four-sided shape and adjust its outline to the right-hand direction, then make an area 20 units away on its right side."}
{"id": 477, "function": "ST_Buffer", "question": "对于一个边界是从50到150的四个点组成的形状，先把方向调整得更顺手，然后在它的右边加点空间，宽度是20个单位。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))')) ), 20,'side=right');", "execution_result": [["01030000000200000007000000000000000000494000000000000049400000000000004940000000000080514000000000000049400000000000C062400000000000C062400000000000C062400000000000C0624000000000000049400000000000805140000000000000494000000000000049400000000000004940050000000000000000805140000000000080514000000000004060400000000000805140000000000040604000000000004060400000000000805140000000000040604000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2540, "question_en": "For a shape with a boundary made of four points going from 50 to 150, first make the direction more handy, then add some space on its right side, with a width of 20 units."}
{"id": 477, "function": "ST_Buffer", "question": "把那个围成四边形的点连成边界线，调整成右手方向，然后在右边做个20单位宽的缓冲，结果是什么样的形状呢？", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))')) ), 20,'side=right');", "execution_result": [["01030000000200000007000000000000000000494000000000000049400000000000004940000000000080514000000000000049400000000000C062400000000000C062400000000000C062400000000000C0624000000000000049400000000000805140000000000000494000000000000049400000000000004940050000000000000000805140000000000080514000000000004060400000000000805140000000000040604000000000004060400000000000805140000000000040604000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2542, "question_en": "Connect those corner points into a boundary line, adjust to the right-hand direction, then make a 20-unit wide buffer on the right side. What does the resulting shape look like?"}
{"id": 477, "function": "ST_Buffer", "question": "从那些点形成的形状中，拿出边边，把它调整成某个方向，然后在右边加上一个20单位宽的区域。", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))')) ), 20,'side=right');", "execution_result": [["01030000000200000007000000000000000000494000000000000049400000000000004940000000000080514000000000000049400000000000C062400000000000C062400000000000C062400000000000C0624000000000000049400000000000805140000000000000494000000000000049400000000000004940050000000000000000805140000000000080514000000000004060400000000000805140000000000040604000000000004060400000000000805140000000000040604000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2539, "question_en": "From the shape formed by those points, take out the edges, adjust it to a certain direction, and then add a 20-unit wide area on the right side."}
{"id": 477, "function": "ST_Buffer", "question": "从形状的边界线出发，把那些点(50 50, 50 150, 150 150, 150 50, 50 50)用一种右手的方式处理后，看看右边的地方能生成一个20单位的空间吗？", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))')) ), 20,'side=right');", "execution_result": [["01030000000200000007000000000000000000494000000000000049400000000000004940000000000080514000000000000049400000000000C062400000000000C062400000000000C062400000000000C0624000000000000049400000000000805140000000000000494000000000000049400000000000004940050000000000000000805140000000000080514000000000004060400000000000805140000000000040604000000000004060400000000000805140000000000040604000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2541, "question_en": "Starting from the boundary of the shape, after handling those points (50 50, 50 150, 150 150, 150 50, 50 50) in a way that involves the right hand, can a space 20 units wide be created on the right side?"}
{"id": 481, "function": "ST_Buffer", "question": "以一条从50,50到150,150再到150,50的线为基础，在它的左边扩展出一个宽度为10的小区域。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=left');", "execution_result": [["010300000001000000130000000000000000C0624000000000000049400000000000C062400000000000C0624000000000000049400000000000004940A81EFC3FE776454058E103C018894C40AA07FFCFB9DD614056F8003046A26340E82FBFAF370E624050929AFD11CA6340B196BE928A45624085F91736A4E76340E1F76833928162409FA91FEED9F963400000000000C0624000000000000064401F0897CC6DFE62409FA91FEED9F963404F69416D753A634085F91736A4E7634018D04050C871634050929AFD11CA634056F8003046A2634056F8003046A2634050929AFD11CA634018D04050C871634085F91736A4E763404F69416D753A63409FA91FEED9F963401F0897CC6DFE624000000000000064400000000000C06240000000000000644000000000000049400000000000C062400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2544, "question_en": "Based on a line starting at 50,50 to 150,150 and then to 150,50, extend a small area with a width of 10 on its left side."}
{"id": 477, "function": "ST_Buffer", "question": "有一个多边形，像是从(50 50)开始画个方框到(150 150)，你能先让它的边边按照某种手的方向排列，然后想象在它的右边膨胀出20的距离，最后告诉我那个膨胀出来的形状吗？", "sql": "SELECT ST_Buffer( ST_ForceRHR( ST_Boundary( ST_GeomFromText( 'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))')) ), 20,'side=right');", "execution_result": [["01030000000200000007000000000000000000494000000000000049400000000000004940000000000080514000000000000049400000000000C062400000000000C062400000000000C062400000000000C0624000000000000049400000000000805140000000000000494000000000000049400000000000004940050000000000000000805140000000000080514000000000004060400000000000805140000000000040604000000000004060400000000000805140000000000040604000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2543, "question_en": "There's a polygon, sort of like drawing a box from (50 50) to (150 150). Can you first arrange its edges in some hand direction, then imagine it expanding 20 units to the right, and finally tell me about the shape that expands out?"}
{"id": 481, "function": "ST_Buffer", "question": "对于一串坐标(50 50,150 150,150 50)，想象一下在这条线的一边扩展出一个像面包皮一样的区域，宽度是10个单位，但只在左边哦。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=left');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2546, "question_en": "For a series of coordinates (50 50,150 150,150 50), imagine extending an area like a crust on one side of the line, with a width of 10 units, but only on the left side."}
{"id": 481, "function": "ST_Buffer", "question": "有一条通过点(50 50)、(150 150)、(150 50)连起来的线，你能不能在左边留出10的空间来看看效果？", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=left');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2545, "question_en": "There's a line connecting the points (50 50), (150 150), (150 50), can you leave a space of 10 on the left side to see the effect?"}
{"id": 481, "function": "ST_Buffer", "question": "给那条从50 50到150 150再到150 50的线加上一点左边的空间，宽度是10单位。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=left');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2549, "question_en": "Add a bit of space on the left side of the line going from 50 50 to 150 150 then to 150 50, with a width of 10 units."}
{"id": 481, "function": "ST_Buffer", "question": "看看由50 50到150 150再到150 50的那些点画成的线，往左边扩展10单位的结果是什么？", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=left');", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2548, "question_en": "What happens if you take the line drawn from those points 50 50 to 150 150 and then to 150 50, and stretch it 10 units to the left?"}
{"id": 481, "function": "ST_Buffer", "question": "看看那条从(50, 50)到(150, 150)再到(150, 50)的线，想象在它左边铺开10个单位的宽度。", "sql": "SELECT ST_Buffer( ST_GeomFromText( 'LINESTRING(50 50,150 150,150 50)' ), 10, 'side=left');", "execution_result": [["010300000001000000130000000000000000C0624000000000000049400000000000C062400000000000C0624000000000000049400000000000004940A81EFC3FE776454058E103C018894C40AA07FFCFB9DD614056F8003046A26340E82FBFAF370E624050929AFD11CA6340B196BE928A45624085F91736A4E76340E1F76833928162409FA91FEED9F963400000000000C0624000000000000064401F0897CC6DFE62409FA91FEED9F963404F69416D753A634085F91736A4E7634018D04050C871634050929AFD11CA634056F8003046A2634056F8003046A2634050929AFD11CA634018D04050C871634085F91736A4E763404F69416D753A63409FA91FEED9F963401F0897CC6DFE624000000000000064400000000000C06240000000000000644000000000000049400000000000C062400000000000004940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2547, "question_en": "Imagine that line going from (50, 50) to (150, 150) and then to (150, 50), and think about a 10-unit width spread to its left."}
{"id": 482, "function": "ST_BuildArea", "question": "有五条小线段，像(180 40, 30 20, 20 90)这样的，把它们组合成一个大块面，然后用某种格式来描述这个面。", "sql": "WITH data(geom) AS (VALUES ('LINESTRING (180 40, 30 20, 20 90)'::geometry), ('LINESTRING (180 40, 160 160)'::geometry), ('LINESTRING (160 160, 80 190, 80 120, 20 90)'::geometry), ('LINESTRING (80 60, 120 130, 150 80)'::geometry), ('LINESTRING (80 60, 150 80)'::geometry)) SELECT ST_AsText(ST_BuildArea(ST_Collect(geom))) FROM data;", "execution_result": [["POLYGON((180 40,30 20,20 90,80 120,80 190,160 160,180 40),(150 80,120 130,80 60,150 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2552, "question_en": "There are five little line pieces, like (180 40, 30 20, 20 90), combine them into one big area and describe this area in some format."}
{"id": 482, "function": "ST_BuildArea", "question": "把这几条线，像是LINESTRING (180 40, 30 20, 20 90)，LINESTRING (180 40, 160 160)，还有其他三条，想象成一个覆盖它们的形状，然后告诉我这个形状的文字描述。", "sql": "WITH data(geom) AS (VALUES ('LINESTRING (180 40, 30 20, 20 90)'::geometry) ,('LINESTRING (180 40, 160 160)'::geometry) ,('LINESTRING (160 160, 80 190, 80 120, 20 90)'::geometry) ,('LINESTRING (80 60, 120 130, 150 80)'::geometry) ,('LINESTRING (80 60, 150 80)'::geometry) ) SELECT ST_AsText( ST_BuildArea( ST_Collect( geom ))) FROM data;", "execution_result": [["POLYGON((180 40,30 20,20 90,80 120,80 190,160 160,180 40),(150 80,120 130,80 60,150 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2554, "question_en": "Imagine these lines, like LINESTRING (180 40, 30 20, 20 90), LINESTRING (180 40, 160 160), and three others, as forming a shape that covers them all, and then tell me the text description of this shape."}
{"id": 482, "function": "ST_BuildArea", "question": "把这几条由(180 40, 30 20, 20 90)和(80 60, 150 80)等点串起来的线连成一个面，然后用一种文字格式展示出来。", "sql": "WITH data(geom) AS (VALUES ('LINESTRING (180 40, 30 20, 20 90)'::geometry), ('LINESTRING (180 40, 160 160)'::geometry), ('LINESTRING (160 160, 80 190, 80 120, 20 90)'::geometry), ('LINESTRING (80 60, 120 130, 150 80)'::geometry), ('LINESTRING (80 60, 150 80)'::geometry)) SELECT ST_AsText(ST_BuildArea(ST_Collect(geom))) FROM data;", "execution_result": [["POLYGON((180 40,30 20,20 90,80 120,80 190,160 160,180 40),(150 80,120 130,80 60,150 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2550, "question_en": "Connect these lines that string points like (180 40, 30 20, 20 90) and (80 60, 150 80) into a shape, then show it in some kind of text format."}
{"id": 482, "function": "ST_BuildArea", "question": "把这些线段连成一个完整的形状，然后告诉我那个形状的特别表达方式，数字要和这些：180 40, 30 20, 20 90, 160 160, 80 190, 80 120, 80 60, 120 130, 150 80一样哦。", "sql": "WITH data(geom) AS (VALUES ('LINESTRING (180 40, 30 20, 20 90)'::geometry) ,('LINESTRING (180 40, 160 160)'::geometry) ,('LINESTRING (160 160, 80 190, 80 120, 20 90)'::geometry) ,('LINESTRING (80 60, 120 130, 150 80)'::geometry) ,('LINESTRING (80 60, 150 80)'::geometry) ) SELECT ST_AsText( ST_BuildArea( ST_Collect( geom ))) FROM data;", "execution_result": [["POLYGON((180 40,30 20,20 90,80 120,80 190,160 160,180 40),(150 80,120 130,80 60,150 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2553, "question_en": "Connect these lines into a complete shape, then tell me the special way to express that shape, with numbers like these: 180 40, 30 20, 20 90, 160 160, 80 190, 80 120, 80 60, 120 130, 150 80."}
{"id": 482, "function": "ST_BuildArea", "question": "你能找出那五条线串的共同区域吗？它们的坐标是：180 40, 30 20, 20 90，还有其他几组。然后，告诉我它们合并后形成的那个形状的WKT是什么。", "sql": "WITH data(geom) AS (VALUES ('LINESTRING (180 40, 30 20, 20 90)'::geometry) ,('LINESTRING (180 40, 160 160)'::geometry) ,('LINESTRING (160 160, 80 190, 80 120, 20 90)'::geometry) ,('LINESTRING (80 60, 120 130, 150 80)'::geometry) ,('LINESTRING (80 60, 150 80)'::geometry) ) SELECT ST_AsText( ST_BuildArea( ST_Collect( geom ))) FROM data;", "execution_result": [["POLYGON((180 40,30 20,20 90,80 120,80 190,160 160,180 40),(150 80,120 130,80 60,150 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2555, "question_en": "Can you find the common area of those five linestrings? Their coordinates include: 180 40, 30 20, 20 90, and a few others. Then, tell me the WKT of the shape they form when combined."}
{"id": 482, "function": "ST_BuildArea", "question": "把那些由线条组成的图形集合，比如像180 40, 30 20,然后还有20 90这样的，变成一个能把它们都包住的形状，并用某种文本方式展示出来。", "sql": "WITH data(geom) AS (VALUES ('LINESTRING (180 40, 30 20, 20 90)'::geometry), ('LINESTRING (180 40, 160 160)'::geometry), ('LINESTRING (160 160, 80 190, 80 120, 20 90)'::geometry), ('LINESTRING (80 60, 120 130, 150 80)'::geometry), ('LINESTRING (80 60, 150 80)'::geometry)) SELECT ST_AsText(ST_BuildArea(ST_Collect(geom))) \nFROM data;", "execution_result": [["POLYGON((180 40,30 20,20 90,80 120,80 190,160 160,180 40),(150 80,120 130,80 60,150 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2551, "question_en": "Take those shapes made of lines, like 180 40, 30 20, and also 20 90, and turn them into a shape that can cover them all, then show it in some kind of text format."}
{"id": 483, "function": "ST_BuildArea", "question": "想象一个点在100和90的位置，围绕它画两个圆圈，一个小点的圈有25的距离，还有一个更大的圈有50的距离，然后把这两个圈组合成一个大区域。", "sql": "SELECT ST_BuildArea(ST_Collect(inring,outring)) FROM (SELECT ST_Buffer('POINT(100 90)', 25) AS inring, ST_Buffer('POINT(100 90)', 50) AS outring) AS t;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2556, "question_en": "Imagine a dot at 100 and 90, draw two circles around it, one smaller circle with a distance of 25, and a bigger one with a distance of 50, then combine these two circles into a large area."}
{"id": 483, "function": "ST_BuildArea", "question": "从一个坐标是100和90的小点出发，先画一个半径为25的圈和一个半径为50的圈，把这两个圈放在一起，然后形成一个由这两个圈围起来的区域。", "sql": "SELECT ST_BuildArea(ST_Collect(inring,outring)) FROM (SELECT ST_Buffer('POINT(100 90)', 25) AS inring, ST_Buffer('POINT(100 90)', 50) AS outring) AS t;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2558, "question_en": "Starting from a little point at coordinates 100 and 90, first draw a circle with a radius of 25 and another with a radius of 50, put these two circles together, and then form an area enclosed by these circles."}
{"id": 483, "function": "ST_BuildArea", "question": "找出围绕中心点(100 90)画的两个圆圈，一个半径是25，另一个是50，把它们合在一起后的形状是什么样子的？", "sql": "SELECT ST_BuildArea(ST_Collect(inring,outring)) FROM (SELECT ST_Buffer('POINT(100 90)', 25) AS inring, ST_Buffer('POINT(100 90)', 50) AS outring) AS t;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2559, "question_en": "Find out what the shape looks like when you combine two circles drawn around the center point (100 90), one with a radius of 25 and the other with a radius of 50."}
{"id": 483, "function": "ST_BuildArea", "question": "给那个点(100 90)画两个圈，一个25单位宽，一个50单位宽，然后看看它们合成的区域是什么样子。", "sql": "SELECT ST_BuildArea(ST_Collect(inring,outring)) FROM (SELECT ST_Buffer('POINT(100 90)', 25) AS inring, ST_Buffer('POINT(100 90)', 50) AS outring) AS t;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2561, "question_en": "Draw two circles around that point (100 90), one with a width of 25 units and another with 50 units, then see what area they form together."}
{"id": 483, "function": "ST_BuildArea", "question": "对坐标(100, 90)的小点，先画一个25的圈圈和一个50的圈圈，然后把它们聚在一起，最后形成一个包住它们的区域。", "sql": "SELECT ST_BuildArea(ST_Collect(inring,outring)) FROM (SELECT ST_Buffer('POINT(100 90)', 25) AS inring, ST_Buffer('POINT(100 90)', 50) AS outring) AS t;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2557, "question_en": "For the little dot at coordinates (100, 90), first draw a circle with 25 and another with 50, then gather them together, and finally form an area that encloses them."}
{"id": 484, "function": "ST_Centroid", "question": "把那些散落的点，比如(-1 0), (0 1), (10 6)等，找个中心位置，然后用一种常见的文本格式来说说这个中心在哪儿。", "sql": "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));", "execution_result": [["POINT(2.307692307692308 3.307692307692308)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2563, "question_en": "Find a central spot for those scattered points like (-1 0), (0 1), (10 6), and then describe where this center is using a common text format."}
{"id": 484, "function": "ST_Centroid", "question": "找出由这些小点组成的集合的中心位置：-1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6，并用一种格式来表达结果。", "sql": "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));", "execution_result": [["POINT(2.307692307692308 3.307692307692308)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2562, "question_en": "Find the central spot of the collection made up of these little dots: -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6, and express the result in a format."}
{"id": 484, "function": "ST_Centroid", "question": "如果你有一堆小点，像这样 (-1 0), (-1 2), (-1 3), (-1 4), (-1 7), (0 1), (0 3), (1 1), (2 0), (6 0), (7 8), (9 8), (10 6)，你能找到它们的中心位置，然后用一种特别的格式告诉我吗？", "sql": "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));", "execution_result": [["POINT(2.307692307692308 3.307692307692308)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2564, "question_en": "If you have a bunch of little dots like these (-1 0), (-1 2), (-1 3), (-1 4), (-1 7), (0 1), (0 3), (1 1), (2 0), (6 0), (7 8), (9 8), (10 6), can you find their center spot and tell me in a special format?"}
{"id": 484, "function": "ST_Centroid", "question": "给我那些坐标点(-1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6)的中心位置，像是在一张纸上标记的那个点，用特别的格式写出来。", "sql": "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));", "execution_result": [["POINT(2.307692307692308 3.307692307692308)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2565, "question_en": "Give me the central spot of those coordinates (-1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6), like marking that point on a piece of paper, and write it in a special format."}
{"id": 485, "function": "ST_Centroid", "question": "把这些点和圆形连起来变成一个整体，然后找出它的中心位置，用一种格式表达出来。", "sql": "SELECT ST_AsText(ST_Centroid(g)) FROM ST_GeomFromText('COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))' ) AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2569, "question_en": "Link these points and circular parts together into a whole, then find its central spot and express it in a certain format."}
{"id": 485, "function": "ST_Centroid", "question": "找出由这些坐标构成的复杂曲线的中心点，并用某种文本格式表示它，坐标包括像(0 2, -1 1,0 0)和(1 2, 0.5 2, 0 2)这样的点。", "sql": "SELECT ST_AsText(ST_Centroid(g)) FROM ST_GeomFromText('COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))' ) AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2568, "question_en": "Identify the central point of the complex curve formed by these coordinates, and express it in some text format, with coordinates like (0 2, -1 1,0 0) and (1 2, 0.5 2, 0 2) among others."}
{"id": 486, "function": "ST_Centroid", "question": "把那些点串起来形成一个圆形的路径，看看中间的那个点在哪儿，用文字表达出来。", "sql": "SELECT ST_AsText(ST_centroid(g)) FROM ST_GeomFromText('CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2575, "question_en": "String together those points to form a circular path and find out where the middle point is, expressing it in words."}
{"id": 485, "function": "ST_Centroid", "question": "把一个包含环形和直线小部分的复杂曲线，像(0 2, -1 1, 0 0)这样的，变成一种能说出中心点坐标的东西，然后用WKT格式写出来。", "sql": "SELECT ST_AsText(ST_Centroid(g)) FROM ST_GeomFromText('COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2573, "question_en": "Change a complicated curve with circular and straight little parts, like (0 2, -1 1, 0 0), into something that can tell the center point's coordinates, then write it out in WKT format."}
{"id": 484, "function": "ST_Centroid", "question": "想象一下有13个小点，像(-1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6)，找出它们的平均位置，并用那种文本格式来表示。", "sql": "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));", "execution_result": [["POINT(2.307692307692308 3.307692307692308)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2566, "question_en": "Imagine 13 little dots, like (-1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6), find their average spot, and show it in that text format."}
{"id": 484, "function": "ST_Centroid", "question": "把那些点的坐标合起来算个平均值，然后看看那个平均点的样子，用文字表示出来。", "sql": "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));", "execution_result": [["POINT(2.307692307692308 3.307692307692308)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2567, "question_en": "Combine the coordinates of those points, calculate an average, and then see what that average point looks like, expressed in words."}
{"id": 486, "function": "ST_Centroid", "question": "找出由那些点(0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)连接成的弯弯的形状的中心位置，然后用某种特别的格式表达出来。", "sql": "SELECT ST_AsText(ST_centroid(g)) FROM ST_GeomFromText('CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2574, "question_en": "Find the center spot of that curvy shape made by joining those points (0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2), and then express it in some special format."}
{"id": 485, "function": "ST_Centroid", "question": "想象一下由一些弯弯曲曲的线段和圆弧组成的形状，像是(0 2, -1 1, 0 0)这样的弯，还有(1 2, 0.5 2, 0 2)这样的直线，求这个形状的中心位置的文字描述。", "sql": "SELECT ST_AsText(ST_Centroid(g)) FROM ST_GeomFromText('COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2572, "question_en": "Imagine a shape made up of some wavy segments and arcs, like the bend (0 2, -1 1, 0 0), and the straight line (1 2, 0.5 2, 0 2). Find the text description of the center position of this shape."}
{"id": 485, "function": "ST_Centroid", "question": "给定一些弯曲的线条和直线组合在一起的形状，像是从0 2到-1 1到0 0的圆弧，还有从0 0到1 0的平直段，再加上从1 0到1 2的圆弧，最后从1 2到0 2的直线。你能找出这个组合形状中间的点，并告诉我它的坐标吗？", "sql": "SELECT ST_AsText(ST_Centroid(g)) FROM ST_GeomFromText('COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2571, "question_en": "Given some curved lines and straight segments combined into a shape, like an arc from 0 2 to -1 1 to 0 0, a straight part from 0 0 to 1 0, then another arc from 1 0 to 1 2, and finally a line from 1 2 to 0 2. Can you find the center point of this combined shape and tell me its coordinates?"}
{"id": 486, "function": "ST_Centroid", "question": "看看那些坐标点(0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)围成的圆形线，找出它的中心位置并用某种格式表达出来。", "sql": "SELECT ST_AsText(ST_centroid(g)) FROM ST_GeomFromText('CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2576, "question_en": "Look at those coordinate points (0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2) forming a circular line, find its central spot and express it in some format."}
{"id": 483, "function": "ST_BuildArea", "question": "在100和90这个点的周围，用25和50这样的数字来画两个圈，然后看看它们一起会形成什么样的封闭图形。", "sql": "SELECT ST_BuildArea(ST_Collect(inring,outring)) FROM (SELECT ST_Buffer('POINT(100 90)', 25) AS inring, ST_Buffer('POINT(100 90)', 50) AS outring) AS t;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2560, "question_en": "Around the point 100 and 90, draw two circles using numbers like 25 and 50, then see what kind of closed shape they form together."}
{"id": 486, "function": "ST_Centroid", "question": "把那个由坐标(0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)组成的圆形串的中心点，用某种方式转成文字格式。", "sql": "SELECT ST_AsText(ST_centroid(g)) FROM ST_GeomFromText('CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2579, "question_en": "Convert the center of that circular string made of coordinates (0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2) into some kind of text format."}
{"id": 487, "function": "ST_ChaikinSmoothing", "question": "对于由(0 0)、(8 8)、(0 16)、(0 0)这些点围成的形状，做个柔和处理，然后用一种能看懂的格式告诉我结果。", "sql": "SELECT ST_AsText(ST_ChaikinSmoothing(geom)) smoothed FROM (SELECT 'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) AS foo;", "execution_result": [["POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2580, "question_en": "For the shape made by the points (0 0), (8 8), (0 16), (0 0), do a gentle processing, then tell me the result in a format I can understand."}
{"id": 486, "function": "ST_Centroid", "question": "找一下被那些点包围的形状的中心位置，用WKT格式显示出来。那些点是(0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)。", "sql": "SELECT ST_AsText(ST_centroid(g)) FROM ST_GeomFromText('CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2577, "question_en": "Find the central spot of the shape surrounded by those points and show it in WKT format. The points are (0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)."}
{"id": 487, "function": "ST_ChaikinSmoothing", "question": "对那些坐标组成的形状进行一种让它更圆滑的处理，看看它变成了什么样子，记得保留数字。", "sql": "SELECT ST_AsText(ST_ChaikinSmoothing(geom)) smoothed FROM (SELECT 'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) AS foo;", "execution_result": [["POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2581, "question_en": "Do a kind of smoothing on that shape made of coordinates to see how it changes, and make sure to keep the numbers."}
{"id": 485, "function": "ST_Centroid", "question": "有一个由几个弯弯曲曲的小段拼成的路径，像是圆弧从(0 2)到(-1 1)再到(0 0)，然后一条直线从(0 0)走到(1 0)，再一个圆弧从(1 0)到(2 1)再回到(1 2)，最后一条直线回到起点(0 2)。你能找出这个形状的中心位置，用WKT格式来描述吗？", "sql": "SELECT ST_AsText(ST_Centroid(g)) FROM ST_GeomFromText('COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, 0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))' ) AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2570, "question_en": "Imagine a path made up of some bendy and straight little segments, like an arc from (0 2) to (-1 1) to (0 0), then a straight line from (0 0) to (1 0), another arc from (1 0) to (2 1) back to (1 2), and finally a straight line going back to the start (0 2). Can you find the center of this shape and describe it in WKT format?"}
{"id": 487, "function": "ST_ChaikinSmoothing", "question": "把那个用点(0 0), (8 8), (0 16)围成的形状，用一种让它看起来更圆滑的方法处理，然后告诉我它变成了什么样子。", "sql": "SELECT ST_AsText(ST_ChaikinSmoothing(geom)) smoothed FROM (SELECT 'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) AS foo;", "execution_result": [["POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2582, "question_en": "Take that shape made from dots (0 0), (8 8), (0 16), use some way to make it look smoother, and then tell me what it turns into."}
{"id": 487, "function": "ST_ChaikinSmoothing", "question": "想象一下，把那些坐标点(0 0, 8 8, 0 16, 0 0)连起来的图形，经过一种柔和处理后，它的形状会是什么样子，用文字描述出来。", "sql": "SELECT ST_AsText(ST_ChaikinSmoothing(geom)) smoothed FROM (SELECT 'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) AS foo;", "execution_result": [["POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2583, "question_en": "Imagine what the shape made by connecting those points (0 0, 8 8, 0 16, 0 0) would look like after a gentle smoothing process, and describe it in words."}
{"id": 487, "function": "ST_ChaikinSmoothing", "question": "把那个形状，像是从0到8再到16这样的一些坐标，经过一种处理后，变成文字格式的样子。", "sql": "SELECT ST_AsText(ST_ChaikinSmoothing(geom)) smoothed FROM (SELECT 'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) AS foo;", "execution_result": [["POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2584, "question_en": "Take that shape, like coordinates from 0 to 8 to 16, and after some kind of processing, turn it into a text format appearance."}
{"id": 487, "function": "ST_ChaikinSmoothing", "question": "能不能给我看看那个形状的WKT字符串版本，它经过一种让边变得圆滑的处理，原始形状是那些点组成的POLYGON((0 0, 8 8, 0 16, 0 0))。", "sql": "SELECT ST_AsText(ST_ChaikinSmoothing(geom)) smoothed FROM (SELECT 'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) AS foo;", "execution_result": [["POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2585, "question_en": "Could you show me the WKT string version of that shape, which went through a process that makes the edges smoother, originally formed by those points in POLYGON((0 0, 8 8, 0 16, 0 0))."}
{"id": 488, "function": "ST_ChaikinSmoothing", "question": "对一个由这些点围成的形状(20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20)进行一种逐步变圆润的处理，看看它经过第1、2、3次变化后是什么样子。", "sql": "SELECT ST_ChaikinSmoothing( 'POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2586, "question_en": "Take a shape surrounded by these points (20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20) and apply a step-by-step smoothing process to see how it looks after 1st, 2nd, and 3rd changes."}
{"id": 488, "function": "ST_ChaikinSmoothing", "question": "看看那个由20 20, 60 90, 10 150, 100 190等坐标组成的多边形，经过1次、2次和3次的平滑处理后，会变成什么样呢？", "sql": "SELECT ST_ChaikinSmoothing( 'POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2589, "question_en": "Let's see what happens to the shape made of coordinates like 20 20, 60 90, 10 150, 100 190 after smoothing it 1, 2, and 3 times."}
{"id": 488, "function": "ST_ChaikinSmoothing", "question": "给一个形状，它有这些点：20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20。让它变得更圆滑，试着做一次、两次和三次，看结果会怎样。", "sql": "SELECT ST_ChaikinSmoothing( 'POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2588, "question_en": "Take a shape with these points: 20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20. Make it smoother, try once, twice, and three times, and see how the results turn out."}
{"id": 489, "function": "ST_ChaikinSmoothing", "question": "用那些坐标点画出的线，从简单到复杂变得更圆滑，看看经过1、2、3次处理后的样子。", "sql": "SELECT ST_ChaikinSmoothing('LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)', generate_series(1, 3));", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2596, "question_en": "Take the line drawn with those coordinates and see how it becomes smoother from simple to complex after 1, 2, and 3 rounds of processing."}
{"id": 488, "function": "ST_ChaikinSmoothing", "question": "对那些点组成的封闭形状，用一种让它变得更圆滑的方法，分别试一遍、两遍和三遍，看看最后的形状是什么样子。点的位置是：20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20。", "sql": "SELECT ST_ChaikinSmoothing( 'POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2587, "question_en": "For the closed shape made by those specific points, try a method to make it smoother once, twice, and thrice, and see what the final shape looks like. The points are located at: 20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20."}
{"id": 489, "function": "ST_ChaikinSmoothing", "question": "看看那串坐标(10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)，经过一次、两次和三次的平滑处理后会变成什么样子？", "sql": "SELECT ST_ChaikinSmoothing('LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)', generate_series(1, 3));", "execution_result": [["01020000000E000000000000000000244000000000008061400000000000404F400000000000906040000000000040554000000000002062400000000000C057400000000000E065400000000000A05E4000000000008066400000000000F06440000000000000644000000000003066400000000000605D4000000000001063400000000000404A400000000000E0604000000000008046400000000000405F400000000000C057400000000000A0594000000000006058400000000000E050400000000000404A4000000000008046400000000000C047400000000000003E400000000000005940"], ["01020000001A000000000000000000244000000000008061400000000000B048400000000000CC604000000000000851400000000000F460400000000000D853400000000000BC61400000000000E05540000000000010634000000000002057400000000000F06440000000000078594000000000000866400000000000E85C4000000000005866400000000000B860400000000000E0654000000000008863400000000000A0644000000000004065400000000000AC62400000000000E065400000000000046040000000000068654000000000005059400000000000D8634000000000003051400000000000846240000000000050494000000000006C6140000000000070474000000000009060400000000000C04C400000000000E05F400000000000A054400000000000D85D400000000000E857400000000000085B4000000000003858400000000000705740000000000090554000000000001053400000000000E04F400000000000F04E400000000000A04940000000000050494000000000006048400000000000A044400000000000504E400000000000003E400000000000005940"], ["010200000032000000000000000000244000000000008061400000000000C443400000000000F960400000000000084B400000000000D660400000000000B84F400000000000EA60400000000000BC51400000000000266140000000000024534000000000008A614000000000005A5440000000000011624000000000005E55400000000000BB6240000000000030564000000000008863400000000000D0564000000000007864400000000000B6574000000000003665400000000000E258400000000000C265400000000000545A4000000000001C664000000000000C5C40000000000044664000000000000A5E4000000000003A664000000000002760400000000000FE654000000000006C614000000000009065400000000000D462400000000000F064400000000000F6634000000000002364400000000000D264400000000000296340000000000068654000000000000262400000000000B865400000000000AE60400000000000C2654000000000005A5E4000000000008665400000000000FE5A400000000000046540000000000048574000000000003C64400000000000385340000000000083634000000000000E50400000000000D962400000000000944B4000000000003E62400000000000D848400000000000B261400000000000E8474000000000003561400000000000C448400000000000C7604000000000006C4B4000000000006860400000000000E04F400000000000186040000000000010534000000000005E5F40000000000072554000000000005A5E4000000000001657400000000000245D400000000000FC57400000000000BC5B4000000000002458400000000000225A4000000000008E5740000000000056584000000000003A5640000000000058564000000000002854400000000000285440000000000058514000000000002A52400000000000504E4000000000005E50400000000000304B400000000000884D4000000000005049400000000000B84A400000000000B0484000000000002448400000000000DC49400000000000CC45400000000000D44C40000000000038434000000000009E51400000000000003E400000000000005940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2595, "question_en": "Let's see what happens to that sequence of coordinates (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100) after one, two, and three rounds of smoothing."}
{"id": 488, "function": "ST_ChaikinSmoothing", "question": "给那个像是围住点的形状，做一到三次那种让它更圆滑的处理，看看它变成什么样子。", "sql": "SELECT ST_ChaikinSmoothing( 'POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2590, "question_en": "Take that shape that seems to encircle points, do one to three rounds of that kind of smoothing process to make it rounder, and see what it turns into."}
{"id": 486, "function": "ST_Centroid", "question": "找出那个由这些点(0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)围成的圆弧形状的中心点，并用一种格式来表示它的坐标。", "sql": "SELECT ST_AsText(ST_centroid(g)) FROM ST_GeomFromText('CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2)') AS g;", "execution_result": [["POINT(0.5 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2578, "question_en": "Find the center point of the arc shape formed by these points (0 2, -1 1, 0 0, 0.5 0, 1 0, 2 1, 1 2, 0.5 2, 0 2) and represent its coordinates in a certain format."}
{"id": 489, "function": "ST_ChaikinSmoothing", "question": "对那条由(10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)这些点组成的折线，用一种让它变得更顺滑的方法，试着做1到3次，然后看看会变成什么样子。", "sql": "SELECT ST_ChaikinSmoothing( 'LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2592, "question_en": "For the line made up of these points (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100), use a method to make it smoother, try doing it 1 to 3 times, and see what it becomes."}
{"id": 489, "function": "ST_ChaikinSmoothing", "question": "把由8个坐标点连成的线条，像是(10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)的那种，进行1到3次的柔化处理。", "sql": "SELECT ST_ChaikinSmoothing( 'LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)', generate_series(1, 3) );", "execution_result": [["01020000000E000000000000000000244000000000008061400000000000404F400000000000906040000000000040554000000000002062400000000000C057400000000000E065400000000000A05E4000000000008066400000000000F06440000000000000644000000000003066400000000000605D4000000000001063400000000000404A400000000000E0604000000000008046400000000000405F400000000000C057400000000000A0594000000000006058400000000000E050400000000000404A4000000000008046400000000000C047400000000000003E400000000000005940"], ["01020000001A000000000000000000244000000000008061400000000000B048400000000000CC604000000000000851400000000000F460400000000000D853400000000000BC61400000000000E05540000000000010634000000000002057400000000000F06440000000000078594000000000000866400000000000E85C4000000000005866400000000000B860400000000000E0654000000000008863400000000000A0644000000000004065400000000000AC62400000000000E065400000000000046040000000000068654000000000005059400000000000D8634000000000003051400000000000846240000000000050494000000000006C6140000000000070474000000000009060400000000000C04C400000000000E05F400000000000A054400000000000D85D400000000000E857400000000000085B4000000000003858400000000000705740000000000090554000000000001053400000000000E04F400000000000F04E400000000000A04940000000000050494000000000006048400000000000A044400000000000504E400000000000003E400000000000005940"], ["010200000032000000000000000000244000000000008061400000000000C443400000000000F960400000000000084B400000000000D660400000000000B84F400000000000EA60400000000000BC51400000000000266140000000000024534000000000008A614000000000005A5440000000000011624000000000005E55400000000000BB6240000000000030564000000000008863400000000000D0564000000000007864400000000000B6574000000000003665400000000000E258400000000000C265400000000000545A4000000000001C664000000000000C5C40000000000044664000000000000A5E4000000000003A664000000000002760400000000000FE654000000000006C614000000000009065400000000000D462400000000000F064400000000000F6634000000000002364400000000000D264400000000000296340000000000068654000000000000262400000000000B865400000000000AE60400000000000C2654000000000005A5E4000000000008665400000000000FE5A400000000000046540000000000048574000000000003C64400000000000385340000000000083634000000000000E50400000000000D962400000000000944B4000000000003E62400000000000D848400000000000B261400000000000E8474000000000003561400000000000C448400000000000C7604000000000006C4B4000000000006860400000000000E04F400000000000186040000000000010534000000000005E5F40000000000072554000000000005A5E4000000000001657400000000000245D400000000000FC57400000000000BC5B4000000000002458400000000000225A4000000000008E5740000000000056584000000000003A5640000000000058564000000000002854400000000000285440000000000058514000000000002A52400000000000504E4000000000005E50400000000000304B400000000000884D4000000000005049400000000000B84A400000000000B0484000000000002448400000000000DC49400000000000CC45400000000000D44C40000000000038434000000000009E51400000000000003E400000000000005940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2593, "question_en": "Take a line made up of 8 coordinate points, like (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100), and apply a softening process 1 to 3 times."}
{"id": 488, "function": "ST_ChaikinSmoothing", "question": "想象一下有个形状是由这些点连成的：20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20。用一种让它们更圆润的方式处理下，看看经过1次、2次和3次后，会变成什么样子？", "sql": "SELECT ST_ChaikinSmoothing( 'POLYGON ((20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20))', generate_series(1, 3) );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2591, "question_en": "Imagine a shape made by connecting these dots: 20 20, 60 90, 10 150, 100 190, 190 160, 130 120, 190 50, 140 70, 120 10, 90 60, 20 20. Use a way to make them smoother, and see what it looks like after 1, 2, and 3 times?"}
{"id": 489, "function": "ST_ChaikinSmoothing", "question": "有8个坐标点，比如(10 140)、(80 130)、(100 190)这些，你知道吗？它们构成了一条线。你能做一些像用橡皮擦轻柔擦拭的事情吗？就做1、2、3次这样的处理，然后告诉我结果。", "sql": "SELECT ST_ChaikinSmoothing( 'LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)', generate_series(1, 3) );", "execution_result": [["01020000000E000000000000000000244000000000008061400000000000404F400000000000906040000000000040554000000000002062400000000000C057400000000000E065400000000000A05E4000000000008066400000000000F06440000000000000644000000000003066400000000000605D4000000000001063400000000000404A400000000000E0604000000000008046400000000000405F400000000000C057400000000000A0594000000000006058400000000000E050400000000000404A4000000000008046400000000000C047400000000000003E400000000000005940"], ["01020000001A000000000000000000244000000000008061400000000000B048400000000000CC604000000000000851400000000000F460400000000000D853400000000000BC61400000000000E05540000000000010634000000000002057400000000000F06440000000000078594000000000000866400000000000E85C4000000000005866400000000000B860400000000000E0654000000000008863400000000000A0644000000000004065400000000000AC62400000000000E065400000000000046040000000000068654000000000005059400000000000D8634000000000003051400000000000846240000000000050494000000000006C6140000000000070474000000000009060400000000000C04C400000000000E05F400000000000A054400000000000D85D400000000000E857400000000000085B4000000000003858400000000000705740000000000090554000000000001053400000000000E04F400000000000F04E400000000000A04940000000000050494000000000006048400000000000A044400000000000504E400000000000003E400000000000005940"], ["010200000032000000000000000000244000000000008061400000000000C443400000000000F960400000000000084B400000000000D660400000000000B84F400000000000EA60400000000000BC51400000000000266140000000000024534000000000008A614000000000005A5440000000000011624000000000005E55400000000000BB6240000000000030564000000000008863400000000000D0564000000000007864400000000000B6574000000000003665400000000000E258400000000000C265400000000000545A4000000000001C664000000000000C5C40000000000044664000000000000A5E4000000000003A664000000000002760400000000000FE654000000000006C614000000000009065400000000000D462400000000000F064400000000000F6634000000000002364400000000000D264400000000000296340000000000068654000000000000262400000000000B865400000000000AE60400000000000C2654000000000005A5E4000000000008665400000000000FE5A400000000000046540000000000048574000000000003C64400000000000385340000000000083634000000000000E50400000000000D962400000000000944B4000000000003E62400000000000D848400000000000B261400000000000E8474000000000003561400000000000C448400000000000C7604000000000006C4B4000000000006860400000000000E04F400000000000186040000000000010534000000000005E5F40000000000072554000000000005A5E4000000000001657400000000000245D400000000000FC57400000000000BC5B4000000000002458400000000000225A4000000000008E5740000000000056584000000000003A5640000000000058564000000000002854400000000000285440000000000058514000000000002A52400000000000504E4000000000005E50400000000000304B400000000000884D4000000000005049400000000000B84A400000000000B0484000000000002448400000000000DC49400000000000CC45400000000000D44C40000000000038434000000000009E51400000000000003E400000000000005940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2594, "question_en": "There are 8 coordinate points, like (10 140), (80 130), (100 190), you know? They form a line. Can you do something like gently erasing with a rubber eraser? Just do this 1, 2, 3 times and let me know the result."}
{"id": 490, "function": "ST_ConcaveHull", "question": "把那些小点连起来，看看能用一种特别的方法生成一个形状，形状的松紧度设为0.1，然后告诉我它的WKT样子。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))', 0.1 ) );", "execution_result": [["POLYGON((21 151,27 160,35 167,44 172,54 175,64 178,74 180,84 181,94 181,104 181,114 181,124 181,134 179,144 177,153 173,162 168,171 162,177 154,182 145,184 135,173 134,161 134,150 133,139 132,136 142,128 149,119 153,109 155,99 155,89 155,79 153,69 150,61 144,63 134,72 128,82 125,92 123,102 121,112 119,122 118,132 116,142 113,151 110,161 106,170 102,178 96,185 88,189 78,190 68,189 58,185 49,179 41,171 34,162 29,153 25,143 23,133 21,123 19,113 19,102 19,92 19,82 19,72 21,62 22,52 25,43 29,33 34,25 41,19 49,14 58,10 72,21 73,31 74,42 74,53 76,56 66,63 58,71 51,81 48,91 46,101 45,111 46,121 47,131 50,140 55,145 64,144 74,135 80,125 83,115 85,105 87,95 89,85 91,75 93,65 95,55 98,45 102,37 107,29 114,22 122,19 132,18 142,21 151))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2601, "question_en": "Connect those little dots to create a shape using a special method, with the looseness set to 0.1, and then tell me what its WKT representation looks like."}
{"id": 490, "function": "ST_ConcaveHull", "question": "用那些坐标小点，像是(10 72)啊，(53 76)之类的，弄个能包住它们的形状，记得允许它有点凹进去，设个0.1就行，最后把这个形状弄成文字的样子。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))', 0.1 ) );", "execution_result": [["POLYGON((21 151,27 160,35 167,44 172,54 175,64 178,74 180,84 181,94 181,104 181,114 181,124 181,134 179,144 177,153 173,162 168,171 162,177 154,182 145,184 135,173 134,161 134,150 133,139 132,136 142,128 149,119 153,109 155,99 155,89 155,79 153,69 150,61 144,63 134,72 128,82 125,92 123,102 121,112 119,122 118,132 116,142 113,151 110,161 106,170 102,178 96,185 88,189 78,190 68,189 58,185 49,179 41,171 34,162 29,153 25,143 23,133 21,123 19,113 19,102 19,92 19,82 19,72 21,62 22,52 25,43 29,33 34,25 41,19 49,14 58,10 72,21 73,31 74,42 74,53 76,56 66,63 58,71 51,81 48,91 46,101 45,111 46,121 47,131 50,140 55,145 64,144 74,135 80,125 83,115 85,105 87,95 89,85 91,75 93,65 95,55 98,45 102,37 107,29 114,22 122,19 132,18 142,21 151))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2599, "question_en": "With those little coordinate dots, like (10 72) and (53 76), create a shape that can wrap around them, allowing it to have a bit of concavity, set to 0.1, and finally turn this shape into a text format."}
{"id": 490, "function": "ST_ConcaveHull", "question": "假设有一堆坐标点，比如 (10 72), (53 76), (56 66), (63 58) 等等，你能不能用某种方式来描绘出一个能包围它们的形状，但要稍微凹一点，凹度大概是 0.1，然后用一种特定的格式表达出来？", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))', 0.1 ) );", "execution_result": [["POLYGON((21 151,27 160,35 167,44 172,54 175,64 178,74 180,84 181,94 181,104 181,114 181,124 181,134 179,144 177,153 173,162 168,171 162,177 154,182 145,184 135,173 134,161 134,150 133,139 132,136 142,128 149,119 153,109 155,99 155,89 155,79 153,69 150,61 144,63 134,72 128,82 125,92 123,102 121,112 119,122 118,132 116,142 113,151 110,161 106,170 102,178 96,185 88,189 78,190 68,189 58,185 49,179 41,171 34,162 29,153 25,143 23,133 21,123 19,113 19,102 19,92 19,82 19,72 21,62 22,52 25,43 29,33 34,25 41,19 49,14 58,10 72,21 73,31 74,42 74,53 76,56 66,63 58,71 51,81 48,91 46,101 45,111 46,121 47,131 50,140 55,145 64,144 74,135 80,125 83,115 85,105 87,95 89,85 91,75 93,65 95,55 98,45 102,37 107,29 114,22 122,19 132,18 142,21 151))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2600, "question_en": "Imagine you have a bunch of coordinates, like (10 72), (53 76), (56 66), (63 58), etc. Can you somehow draw a shape that surrounds them, but make it a bit concave, with the concavity around 0.1, and express it in a specific format?"}
{"id": 490, "function": "ST_ConcaveHull", "question": "对于这些坐标点，比如(10 72)和(53 76)，还有很多其他点，想象一个形状微微凹进去包住它们，使用一个小数0.1来调整这个形状，然后用一种特别的文字格式来描述这个形状。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))', 0.1 ) );", "execution_result": [["POLYGON((21 151,27 160,35 167,44 172,54 175,64 178,74 180,84 181,94 181,104 181,114 181,124 181,134 179,144 177,153 173,162 168,171 162,177 154,182 145,184 135,173 134,161 134,150 133,139 132,136 142,128 149,119 153,109 155,99 155,89 155,79 153,69 150,61 144,63 134,72 128,82 125,92 123,102 121,112 119,122 118,132 116,142 113,151 110,161 106,170 102,178 96,185 88,189 78,190 68,189 58,185 49,179 41,171 34,162 29,153 25,143 23,133 21,123 19,113 19,102 19,92 19,82 19,72 21,62 22,52 25,43 29,33 34,25 41,19 49,14 58,10 72,21 73,31 74,42 74,53 76,56 66,63 58,71 51,81 48,91 46,101 45,111 46,121 47,131 50,140 55,145 64,144 74,135 80,125 83,115 85,105 87,95 89,85 91,75 93,65 95,55 98,45 102,37 107,29 114,22 122,19 132,18 142,21 151))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2598, "question_en": "For these coordinate points, like (10 72) and (53 76), and many others, imagine a shape slightly going inwards to enclose them, using a small number 0.1 to tweak this shape, then describe this shape in a special text format."}
{"id": 491, "function": "ST_ConcaveHull", "question": "给出由这些小点围成的形状的WKT文本，参数是0.15，允许形状中有空洞。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))', 0.15, true ) );", "execution_result": [["POLYGON((88 180,101 180,112 180,119 164,126 149,132 131,139 113,143 100,150 84,157 69,163 51,168 36,174 20,163 20,150 20,143 36,139 49,132 64,114 64,99 64,81 64,63 64,57 49,52 36,46 20,37 20,26 20,32 36,35 45,39 55,43 69,50 84,57 100,63 118,68 133,74 149,81 164,88 180),(92 138,88 124,81 109,74 93,83 82,99 82,112 82,121 96,114 109,110 122,103 138,92 138))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2608, "question_en": "Provide the WKT text of the shape formed by these little dots, with a parameter of 0.15, allowing for holes in the shape."}
{"id": 491, "function": "ST_ConcaveHull", "question": "从那些坐标点，比如(132 64), (114 64), (99 64)等等，找出一个包住它们的形状。这个形状有点凹，像是有洞的那种，参数好像是0.15。输出它的WKT格式吧。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))', 0.15, true ) );", "execution_result": [["POLYGON((88 180,101 180,112 180,119 164,126 149,132 131,139 113,143 100,150 84,157 69,163 51,168 36,174 20,163 20,150 20,143 36,139 49,132 64,114 64,99 64,81 64,63 64,57 49,52 36,46 20,37 20,26 20,32 36,35 45,39 55,43 69,50 84,57 100,63 118,68 133,74 149,81 164,88 180),(92 138,88 124,81 109,74 93,83 82,99 82,112 82,121 96,114 109,110 122,103 138,92 138))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2607, "question_en": "From those coordinates, like (132 64), (114 64), (99 64), etc., find a shape that covers them. This shape is somewhat concave, like the kind with holes, and the parameter seems to be 0.15. Output its WKT format."}
{"id": 492, "function": "ST_ConcaveHull", "question": "对于那些坐标组成的多边形，用0.1这个数，画出一个包住这个多边形的形状，还有一个包住所有小点的形状。", "sql": "WITH data(geom) AS (VALUES ('POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))'::geometry) ) SELECT ST_ConcaveHull( geom, 0.1) AS polygon_hull, ST_ConcaveHull( ST_Points(geom), 0.1) AS points_hull FROM data;", "execution_result": [["0103000000010000000D0000000000000000004E40000000000000244000000000000049400000000000003E4000000000008045400000000000003B400000000000003E40000000000000244000000000000034400000000000003440000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E400000000000002440", "0103000000010000001000000000000000000039400000000000004E40000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E4000000000000024400000000000003E4000000000000024400000000000003440000000000000344000000000008045400000000000003B4000000000000049400000000000003E400000000000804F4000000000000043400000000000804E400000000000C0534000000000000039400000000000004E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2611, "question_en": "For that shape made of coordinates, use the number 0.1 to draw a shape that wraps around the polygon and another one that wraps around all the little dots."}
{"id": 491, "function": "ST_ConcaveHull", "question": "对于那些坐标点，想要弄出一个包围它们的形状，凹度可以有0.15的松弛，还允许有空隙，最后用一种常见的文本格式展示出来。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))', 0.15, true ) );", "execution_result": [["POLYGON((88 180,101 180,112 180,119 164,126 149,132 131,139 113,143 100,150 84,157 69,163 51,168 36,174 20,163 20,150 20,143 36,139 49,132 64,114 64,99 64,81 64,63 64,57 49,52 36,46 20,37 20,26 20,32 36,35 45,39 55,43 69,50 84,57 100,63 118,68 133,74 149,81 164,88 180),(92 138,88 124,81 109,74 93,83 82,99 82,112 82,121 96,114 109,110 122,103 138,92 138))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2604, "question_en": "For those coordinate points, we want to create a shape that surrounds them, allowing a concavity of 0.15 relaxation, and holes are okay. Finally, display it in a common text format."}
{"id": 491, "function": "ST_ConcaveHull", "question": "想象有一组小点，比如(132 64), (114 64), 和其他很多，围绕这些点画个不太紧的外壳，允许它有15%的凹陷，而且可以有洞，然后把这个形状变成一种文本形式。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))', 0.15, true ) );", "execution_result": [["POLYGON((88 180,101 180,112 180,119 164,126 149,132 131,139 113,143 100,150 84,157 69,163 51,168 36,174 20,163 20,150 20,143 36,139 49,132 64,114 64,99 64,81 64,63 64,57 49,52 36,46 20,37 20,26 20,32 36,35 45,39 55,43 69,50 84,57 100,63 118,68 133,74 149,81 164,88 180),(92 138,88 124,81 109,74 93,83 82,99 82,112 82,121 96,114 109,110 122,103 138,92 138))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2606, "question_en": "Imagine a bunch of little dots, like (132 64), (114 64), and many others, draw a not-so-tight shell around them, allowing it to have 15% dents and with holes, then turn this shape into a kind of text form."}
{"id": 492, "function": "ST_ConcaveHull", "question": "有一个形状是由这些点（10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90）围成的，试着想象一下，要用一种方式来包住这个形状，还有这些点本身，需要怎么做呢？凹度参数是0.1。", "sql": "WITH data(geom) AS (VALUES ('POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))'::geometry) ) SELECT ST_ConcaveHull( geom, 0.1) AS polygon_hull, ST_ConcaveHull( ST_Points(geom), 0.1) AS points_hull FROM data;", "execution_result": [["0103000000010000000D0000000000000000004E40000000000000244000000000000049400000000000003E4000000000008045400000000000003B400000000000003E40000000000000244000000000000034400000000000003440000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E400000000000002440", "0103000000010000001000000000000000000039400000000000004E40000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E4000000000000024400000000000003E4000000000000024400000000000003440000000000000344000000000008045400000000000003B4000000000000049400000000000003E400000000000804F4000000000000043400000000000804E400000000000C0534000000000000039400000000000004E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2610, "question_en": "There's a shape made up of these points (10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90), try to imagine how you might wrap this shape and also just the points themselves, with a twist of concavity parameter set at 0.1."}
{"id": 491, "function": "ST_ConcaveHull", "question": "有一堆坐标点比如(132 64), (114 64), (99 64)，想要做出一个能包住这些点的形状，允许它有些凹进去的地方，凹的程度大概是15%，并且可以有洞，最后想看看这个形状的文字描述。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))', 0.15, true ) );", "execution_result": [["POLYGON((88 180,101 180,112 180,119 164,126 149,132 131,139 113,143 100,150 84,157 69,163 51,168 36,174 20,163 20,150 20,143 36,139 49,132 64,114 64,99 64,81 64,63 64,57 49,52 36,46 20,37 20,26 20,32 36,35 45,39 55,43 69,50 84,57 100,63 118,68 133,74 149,81 164,88 180),(92 138,88 124,81 109,74 93,83 82,99 82,112 82,121 96,114 109,110 122,103 138,92 138))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2605, "question_en": "There's a bunch of coordinates like (132 64), (114 64), (99 64), and we want to create a shape that can cover these points, allowing some indents with about 15% depth, and it can have holes. Finally, we want to see the text description of this shape."}
{"id": 490, "function": "ST_ConcaveHull", "question": "对于那些很多的小点，比如(10 72), (53 76), (56 66)一直到(144 167)，试着用一种方法把它们围起来，允许有点小凹进去的地方，记得这个凹度是0.1，然后看看能不能得到一种文本格式的形状描述。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))', 0.1 ) );", "execution_result": [["POLYGON((21 151,27 160,35 167,44 172,54 175,64 178,74 180,84 181,94 181,104 181,114 181,124 181,134 179,144 177,153 173,162 168,171 162,177 154,182 145,184 135,173 134,161 134,150 133,139 132,136 142,128 149,119 153,109 155,99 155,89 155,79 153,69 150,61 144,63 134,72 128,82 125,92 123,102 121,112 119,122 118,132 116,142 113,151 110,161 106,170 102,178 96,185 88,189 78,190 68,189 58,185 49,179 41,171 34,162 29,153 25,143 23,133 21,123 19,113 19,102 19,92 19,82 19,72 21,62 22,52 25,43 29,33 34,25 41,19 49,14 58,10 72,21 73,31 74,42 74,53 76,56 66,63 58,71 51,81 48,91 46,101 45,111 46,121 47,131 50,140 55,145 64,144 74,135 80,125 83,115 85,105 87,95 89,85 91,75 93,65 95,55 98,45 102,37 107,29 114,22 122,19 132,18 142,21 151))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2602, "question_en": "For all those little dots like (10 72), (53 76), (56 66) up to (144 167), try to wrap them up using a method that allows for slightly going inwards, remember the inward-ness is 0.1, and see if you can get a shape description in text format."}
{"id": 491, "function": "ST_ConcaveHull", "question": "想象一下很多小点的位置，比如 (132 64), (114 64), (99 64) 和其他一堆点。在某种神奇的处理下，用一个凹度大约是 0.15 的参数，允许有小洞的情况下，把这些点变成一个包围它们的形状，然后告诉我这个形状的样子。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((132 64), (114 64), (99 64), (81 64), (63 64), (57 49), (52 36), (46 20), (37 20), (26 20), (32 36), (39 55), (43 69), (50 84), (57 100), (63 118), (68 133), (74 149), (81 164), (88 180), (101 180), (112 180), (119 164), (126 149), (132 131), (139 113), (143 100), (150 84), (157 69), (163 51), (168 36), (174 20), (163 20), (150 20), (143 36), (139 49), (132 64), (99 151), (92 138), (88 124), (81 109), (74 93), (70 82), (83 82), (99 82), (112 82), (126 82), (121 96), (114 109), (110 122), (103 138), (99 151), (34 27), (43 31), (48 44), (46 58), (52 73), (63 73), (61 84), (72 71), (90 69), (101 76), (123 71), (141 62), (166 27), (150 33), (159 36), (146 44), (154 53), (152 62), (146 73), (134 76), (143 82), (141 91), (130 98), (126 104), (132 113), (128 127), (117 122), (112 133), (119 144), (108 147), (119 153), (110 171), (103 164), (92 171), (86 160), (88 142), (79 140), (72 124), (83 131), (79 118), (68 113), (63 102), (68 93), (35 45))', 0.15, true ) );", "execution_result": [["POLYGON((88 180,101 180,112 180,119 164,126 149,132 131,139 113,143 100,150 84,157 69,163 51,168 36,174 20,163 20,150 20,143 36,139 49,132 64,114 64,99 64,81 64,63 64,57 49,52 36,46 20,37 20,26 20,32 36,35 45,39 55,43 69,50 84,57 100,63 118,68 133,74 149,81 164,88 180),(92 138,88 124,81 109,74 93,83 82,99 82,112 82,121 96,114 109,110 122,103 138,92 138))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2609, "question_en": "Imagine a bunch of little dots at places like (132 64), (114 64), (99 64), and a bunch more. With some magical processing, using a parameter for concavity around 0.15, and allowing small holes, turn these dots into a shape that wraps around them, then tell me what this shape looks like."}
{"id": 492, "function": "ST_ConcaveHull", "question": "找出那个形状，用那些点（比如10 90, 39 85, 61 79等）做个大概的轮廓，凹度是0.1，然后也用这些点再画个轮廓，凹度还是0.1。", "sql": "WITH data(geom) AS (VALUES ('POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))'::geometry) ) SELECT ST_ConcaveHull( geom, 0.1) AS polygon_hull, ST_ConcaveHull( ST_Points(geom), 0.1) AS points_hull FROM data;", "execution_result": [["0103000000010000000D0000000000000000004E40000000000000244000000000000049400000000000003E4000000000008045400000000000003B400000000000003E40000000000000244000000000000034400000000000003440000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E400000000000002440", "0103000000010000001000000000000000000039400000000000004E40000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E4000000000000024400000000000003E4000000000000024400000000000003440000000000000344000000000008045400000000000003B4000000000000049400000000000003E400000000000804F4000000000000043400000000000804E400000000000C0534000000000000039400000000000004E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2615, "question_en": "Identify that shape, using those points (like 10 90, 39 85, 61 79, etc.) to make a rough outline with concavity 0.1, then also draw another outline with these points, keeping concavity at 0.1."}
{"id": 494, "function": "ST_ConvexHull", "question": "试着把这些线条和点点的集合合在一起，找出一个能包住它们的最小外圈，然后用WKT的方式展示出来。", "sql": "SELECT ST_AsText(ST_ConvexHull( ST_Collect( ST_GeomFromText('MULTILINESTRING((100 190,10 8),(150 10, 20 30))'), ST_GeomFromText('MULTIPOINT(50 5, 150 30, 50 10, 10 10)') )) );", "execution_result": [["POLYGON((50 5,10 8,10 10,100 190,150 30,150 10,50 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2616, "question_en": "Try to combine these lines and little dots, find the smallest outer loop that can enclose them, and show it in WKT style."}
{"id": 492, "function": "ST_ConcaveHull", "question": "想象一下一个有16个角的形状，坐标是(10 90), (39 85), (61 79), (50 90), (80 80), (95 55), (25 60), (90 45), (70 16), (63 38), (60 10), (50 30), (43 27), (30 10), (20 20), (10 90)。我们需要找到两种方式来让这个形状变得有点凹，一个是直接用这个形状本身，另一个是用那些角点来试试，凹度都是0.1。", "sql": "WITH data(geom) AS (VALUES ('POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))'::geometry) ) SELECT ST_ConcaveHull( geom, 0.1) AS polygon_hull, ST_ConcaveHull( ST_Points(geom), 0.1) AS points_hull FROM data;", "execution_result": [["0103000000010000000D0000000000000000004E40000000000000244000000000000049400000000000003E4000000000008045400000000000003B400000000000003E40000000000000244000000000000034400000000000003440000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E400000000000002440", "0103000000010000001000000000000000000039400000000000004E40000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E4000000000000024400000000000003E4000000000000024400000000000003440000000000000344000000000008045400000000000003B4000000000000049400000000000003E400000000000804F4000000000000043400000000000804E400000000000C0534000000000000039400000000000004E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2612, "question_en": "Imagine a shape with 16 corners, and the coordinates are (10 90), (39 85), (61 79), (50 90), (80 80), (95 55), (25 60), (90 45), (70 16), (63 38), (60 10), (50 30), (43 27), (30 10), (20 20), (10 90). We need to find two ways to make this shape a bit concave, one by using the shape itself directly, and the other by using those corner points, with a concavity of 0.1."}
{"id": 492, "function": "ST_ConcaveHull", "question": "看看那个多边形和它的顶点集合，试着用一种包裹的方式处理一下，凹度用0.1，然后给我看看这两个结果。", "sql": "WITH data(geom) AS (VALUES ('POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))'::geometry) ) SELECT ST_ConcaveHull( geom, 0.1) AS polygon_hull, ST_ConcaveHull( ST_Points(geom), 0.1) AS points_hull FROM data;", "execution_result": [["0103000000010000000D0000000000000000004E40000000000000244000000000000049400000000000003E4000000000008045400000000000003B400000000000003E40000000000000244000000000000034400000000000003440000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E400000000000002440", "0103000000010000001000000000000000000039400000000000004E40000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E4000000000000024400000000000003E4000000000000024400000000000003440000000000000344000000000008045400000000000003B4000000000000049400000000000003E400000000000804F4000000000000043400000000000804E400000000000C0534000000000000039400000000000004E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2614, "question_en": "Take a look at that polygon and its vertex group, try to wrap them in a certain way using 0.1 concavity, and then show me both results."}
{"id": 492, "function": "ST_ConcaveHull", "question": "有一个多边形，像是用这些坐标画出来的：10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90。你能看一下通过某种方式处理这个形状和它的顶点集合，会得到什么样子的两个结果吗？里面有个参数是0.1。", "sql": "WITH data(geom) AS (VALUES ('POLYGON ((10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90))'::geometry) ) SELECT ST_ConcaveHull( geom, 0.1) AS polygon_hull, ST_ConcaveHull( ST_Points(geom), 0.1) AS points_hull FROM data;", "execution_result": [["0103000000010000000D0000000000000000004E40000000000000244000000000000049400000000000003E4000000000008045400000000000003B400000000000003E40000000000000244000000000000034400000000000003440000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E400000000000002440", "0103000000010000001000000000000000000039400000000000004E40000000000000244000000000008056400000000000804340000000000040554000000000000049400000000000805640000000000000544000000000000054400000000000C057400000000000804B4000000000008056400000000000804640000000000080514000000000000030400000000000004E4000000000000024400000000000003E4000000000000024400000000000003440000000000000344000000000008045400000000000003B4000000000000049400000000000003E400000000000804F4000000000000043400000000000804E400000000000C0534000000000000039400000000000004E40"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2613, "question_en": "There's a polygon, kind of drawn with these coordinates: 10 90, 39 85, 61 79, 50 90, 80 80, 95 55, 25 60, 90 45, 70 16, 63 38, 60 10, 50 30, 43 27, 30 10, 20 20, 10 90. Can you check what kind of two results we get by processing this shape and its vertex set in some way? There's a parameter of 0.1 involved."}
{"id": 494, "function": "ST_ConvexHull", "question": "把那些线和点放在一起，然后找出包住它们的最小形状，用一种特别的格式来表达结果。", "sql": "SELECT ST_AsText(ST_ConvexHull( ST_Collect( ST_GeomFromText('MULTILINESTRING((100 190,10 8),(150 10, 20 30))'), ST_GeomFromText('MULTIPOINT(50 5, 150 30, 50 10, 10 10)') )) );", "execution_result": [["POLYGON((50 5,10 8,10 10,100 190,150 30,150 10,50 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2620, "question_en": "Put those lines and points together, then find the smallest shape that covers them, and express the result in a special format."}
{"id": 489, "function": "ST_ChaikinSmoothing", "question": "对于那些点串（10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100），用一种平滑手法处理一下，接着再来两次，看下三种不一样的平滑效果。", "sql": "SELECT ST_ChaikinSmoothing('LINESTRING (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100)', generate_series(1, 3));", "execution_result": [["01020000000E000000000000000000244000000000008061400000000000404F400000000000906040000000000040554000000000002062400000000000C057400000000000E065400000000000A05E4000000000008066400000000000F06440000000000000644000000000003066400000000000605D4000000000001063400000000000404A400000000000E0604000000000008046400000000000405F400000000000C057400000000000A0594000000000006058400000000000E050400000000000404A4000000000008046400000000000C047400000000000003E400000000000005940"], ["01020000001A000000000000000000244000000000008061400000000000B048400000000000CC604000000000000851400000000000F460400000000000D853400000000000BC61400000000000E05540000000000010634000000000002057400000000000F06440000000000078594000000000000866400000000000E85C4000000000005866400000000000B860400000000000E0654000000000008863400000000000A0644000000000004065400000000000AC62400000000000E065400000000000046040000000000068654000000000005059400000000000D8634000000000003051400000000000846240000000000050494000000000006C6140000000000070474000000000009060400000000000C04C400000000000E05F400000000000A054400000000000D85D400000000000E857400000000000085B4000000000003858400000000000705740000000000090554000000000001053400000000000E04F400000000000F04E400000000000A04940000000000050494000000000006048400000000000A044400000000000504E400000000000003E400000000000005940"], ["010200000032000000000000000000244000000000008061400000000000C443400000000000F960400000000000084B400000000000D660400000000000B84F400000000000EA60400000000000BC51400000000000266140000000000024534000000000008A614000000000005A5440000000000011624000000000005E55400000000000BB6240000000000030564000000000008863400000000000D0564000000000007864400000000000B6574000000000003665400000000000E258400000000000C265400000000000545A4000000000001C664000000000000C5C40000000000044664000000000000A5E4000000000003A664000000000002760400000000000FE654000000000006C614000000000009065400000000000D462400000000000F064400000000000F6634000000000002364400000000000D264400000000000296340000000000068654000000000000262400000000000B865400000000000AE60400000000000C2654000000000005A5E4000000000008665400000000000FE5A400000000000046540000000000048574000000000003C64400000000000385340000000000083634000000000000E50400000000000D962400000000000944B4000000000003E62400000000000D848400000000000B261400000000000E8474000000000003561400000000000C448400000000000C7604000000000006C4B4000000000006860400000000000E04F400000000000186040000000000010534000000000005E5F40000000000072554000000000005A5E4000000000001657400000000000245D400000000000FC57400000000000BC5B4000000000002458400000000000225A4000000000008E5740000000000056584000000000003A5640000000000058564000000000002854400000000000285440000000000058514000000000002A52400000000000504E4000000000005E50400000000000304B400000000000884D4000000000005049400000000000B84A400000000000B0484000000000002448400000000000DC49400000000000CC45400000000000D44C40000000000038434000000000009E51400000000000003E400000000000005940"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2597, "question_en": "For those point sequences (10 140, 80 130, 100 190, 190 150, 140 20, 120 120, 50 30, 30 100), use some smoothing technique once, then do it two more times to see the three different smoothed outcomes."}
{"id": 496, "function": "ST_DelaunayTriangles", "question": "把那个围起来的形状和在110 170这个点周围画个圈的结果放在一起，看看它们能组成怎样的三角形网络，用0.001和1这两个奇怪的数字来处理。", "sql": "SELECT ST_DelaunayTriangles( ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20) ),0.001,1) AS dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2625, "question_en": "Combine that enclosed shape with the result of drawing a circle around the point at 110 170, and see what kind of triangle network they form, using the odd numbers 0.001 and 1 to handle it."}
{"id": 494, "function": "ST_ConvexHull", "question": "想象一下两条长长的折线，分别经过(100 190,10 8)和(150 10,20 30)，还有四个孤零零的小点在(50 5)、(150 30)、(50 10)、(10 10)。如果把这些形状都放在一起，能画出一个最小的包住它们的边界吗？结果要用那种特别的格式显示哦。", "sql": "SELECT ST_AsText(ST_ConvexHull( ST_Collect( ST_GeomFromText('MULTILINESTRING((100 190,10 8),(150 10, 20 30))'), ST_GeomFromText('MULTIPOINT(50 5, 150 30, 50 10, 10 10)') )) );", "execution_result": [["POLYGON((50 5,10 8,10 10,100 190,150 30,150 10,50 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2618, "question_en": "Imagine two long zigzag lines passing through (100 190,10 8) and (150 10,20 30), along with four lonely little dots at (50 5), (150 30), (50 10), and (10 10). If you put all these shapes together, can you draw the smallest boundary that covers them all? The result should be shown in that special format."}
{"id": 494, "function": "ST_ConvexHull", "question": "把两条线从(100 190到10 8)和(150 10到20 30)拉到一起，再加上一些小点(50 5)、(150 30)、(50 10)、(10 10)，然后找出一个可以包住它们的最小形状，并用一种常见的文字描述方式输出。", "sql": "SELECT ST_AsText(ST_ConvexHull( ST_Collect( ST_GeomFromText('MULTILINESTRING((100 190,10 8),(150 10, 20 30))'), ST_GeomFromText('MULTIPOINT(50 5, 150 30, 50 10, 10 10)') )) );", "execution_result": [["POLYGON((50 5,10 8,10 10,100 190,150 30,150 10,50 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2617, "question_en": "Bring together two lines from (100 190 to 10 8) and (150 10 to 20 30), then add some little dots at (50 5), (150 30), (50 10), (10 10), and then find the smallest shape that can cover them all, and output it in a common text description format."}
{"id": 494, "function": "ST_ConvexHull", "question": "想象一下用这些路径和点连起来，看看能围成一个什么样的形状，然后告诉我那个形状的WKT字符串：路径有(100 190,10 8)和(150 10, 20 30)，点有50 5, 150 30, 50 10, 10 10。", "sql": "SELECT ST_AsText(ST_ConvexHull( ST_Collect( ST_GeomFromText('MULTILINESTRING((100 190,10 8),(150 10, 20 30))'), ST_GeomFromText('MULTIPOINT(50 5, 150 30, 50 10, 10 10)') )) );", "execution_result": [["POLYGON((50 5,10 8,10 10,100 190,150 30,150 10,50 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2619, "question_en": "Imagine connecting these paths and points to see what kind of shape can be formed, then tell me the WKT string of that shape: paths are (100 190,10 8) and (150 10, 20 30), points are 50 5, 150 30, 50 10, 10 10."}
{"id": 496, "function": "ST_DelaunayTriangles", "question": "在一个由这些坐标围成的形状和一个小点（110 170）加上20的范围形成的图形中，进行一种三角形网格操作，参数是0.001和1。", "sql": "SELECT ST_DelaunayTriangles( ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20) ),0.001,1) AS dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2624, "question_en": "Perform some kind of triangle grid operation on a shape made from these coordinates and a small dot (110 170) with a range of 20, using parameters 0.001 and 1."}
{"id": 494, "function": "ST_ConvexHull", "question": "请找出包含这些线条和点的最小外包形状，并用文字格式显示它的形状，线条是(100 190,10 8),(150 10, 20 30)，点是(50 5, 150 30, 50 10, 10 10)。", "sql": "SELECT ST_AsText(ST_ConvexHull( ST_Collect( ST_GeomFromText('MULTILINESTRING((100 190,10 8),(150 10, 20 30))'), ST_GeomFromText('MULTIPOINT(50 5, 150 30, 50 10, 10 10)') )) );", "execution_result": [["POLYGON((50 5,10 8,10 10,100 190,150 30,150 10,50 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2621, "question_en": "Please find the smallest enclosing shape that covers these lines and dots, and show its shape in text format. The lines are (100 190,10 8),(150 10, 20 30), and the dots are (50 5, 150 30, 50 10, 10 10)."}
{"id": 496, "function": "ST_DelaunayTriangles", "question": "把那些点聚在一起，像个大圈圈，从110 170出发，半径20，然后看看它们和那些坐标175 150, 20 40, 50 60, 125 100, 175 150组成的图形能不能拼成一些三角形，记得用0.001和1来调整一下细节。", "sql": "SELECT ST_DelaunayTriangles( ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20) ),0.001,1) AS dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2622, "question_en": "Gather those points together, like a big circle, starting from 110 170 with a radius of 20, then see if they and the coordinates 175 150, 20 40, 50 60, 125 100, 175 150 can form some triangles, remember to adjust details with 0.001 and 1."}
{"id": 496, "function": "ST_DelaunayTriangles", "question": "把那些点围成的形状和一个点在(110 170)附近画个20单位大的圈，合起来后做点网格化的事情，耐心设为0.001，边缘有个记号。", "sql": "SELECT ST_DelaunayTriangles( ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20) ),0.001,1) AS dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2626, "question_en": "Take the shape formed by those points and draw a 20-unit circle around a point near (110 170), then combine them and do some mesh work, with patience set to 0.001 and a mark at the edge."}
{"id": 496, "function": "ST_DelaunayTriangles", "question": "把那些围绕点(110 170)20单位的范围和形状(175 150, 20 40, 50 60, 125 100, 175 150)结合起来，然后用一种很小的0.001容差和某种边界处理方式做成三角形吧。", "sql": "SELECT ST_DelaunayTriangles( ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20) ),0.001,1) AS dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2627, "question_en": "Combine the area around the point (110 170) with a 20-unit buffer and the shape (175 150, 20 40, 50 60, 125 100, 175 150), then make triangles with a very small tolerance of 0.001 and some boundary treatment."}
{"id": 497, "function": "ST_DelaunayTriangles", "question": "对一个由那些点围成的形状和一个围绕点(110 170)扩展出20距离的圆圈结合后，做那种分成小三角形的处理，结果叫做dtriag。", "sql": "SELECT ST_DelaunayTriangles(ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20))) As dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2628, "question_en": "On a shape formed by those coordinates and a circle stretching 20 around the point (110 170), do that thing that splits it into tiny triangles, and call the result dtriag."}
{"id": 496, "function": "ST_DelaunayTriangles", "question": "把有个小点在(110 170)，周围有20单位的圆圈，和那些点围成的形状(175 150, 20 40, 50 60, 125 100, 175 150)放在一起，然后算算怎么能用小三角形拼成这个形状，记得用0.001的精度和边界标志为1。", "sql": "SELECT ST_DelaunayTriangles( ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20) ),0.001,1) AS dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2623, "question_en": "Take a little dot at (110 170) with a 20-unit circle around it, and mix it with the shape formed by those points (175 150, 20 40, 50 60, 125 100, 175 150). Then figure out how to piece it together with small triangles, using a precision of 0.001 and a boundary flag of 1."}
{"id": 497, "function": "ST_DelaunayTriangles", "question": "把那些坐标组成的形状和一个小圆圈（半径是20）在110 170附近融合，然后用一种方式切成三角形，最后叫它dtriag。", "sql": "SELECT ST_DelaunayTriangles(ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20))) As dtriag;", "execution_result": [[""]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2629, "question_en": "Combine that shape made of coordinates with a small circle (radius is 20) near 110 170, then use a way to cut it into triangles, and finally call it dtriag."}
{"id": 497, "function": "ST_DelaunayTriangles", "question": "看看那些在(175 150)、(20 40)、(50 60)、(125 100)、(175 150)围成的形状，还有一个在(110 170)周围20距离的圆，想知道它们合起来后会有什么样的三角形结果，放在dtriag里。", "sql": "SELECT ST_DelaunayTriangles(ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20))) As dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2630, "question_en": "Consider the shape formed by those points at (175 150), (20 40), (50 60), (125 100), (175 150), and a circle around (110 170) with a distance of 20; curious about the triangle result when they are combined, put it in dtriag."}
{"id": 499, "function": "ST_DelaunayTriangles", "question": "看看那些空间点，14 14 10，150 14 100，34 6 25，还有20 10 150，想想怎么用一种方法把它们连起来，形成一种三角形的网络，然后给我一个能读的字符串。", "sql": "SELECT ST_AsText(ST_DelaunayTriangles(ST_GeomFromText('MULTIPOINT Z(14 14 10, 150 14 100,34 6 25, 20 10 150)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION Z (POLYGON Z ((14 14 10,20 10 150,34 6 25,14 14 10)),POLYGON Z ((14 14 10,34 6 25,150 14 100,14 14 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2636, "question_en": "Consider those spatial points: 14 14 10, 150 14 100, 34 6 25, and 20 10 150. Think about a way to link them up, forming a triangular network, and then give me a readable string."}
{"id": 497, "function": "ST_DelaunayTriangles", "question": "想象一下一个形状，它是由几个点连起来的，像是(175 150, 20 40, 50 60, 125 100)，然后有一个圆圈，它的中心在(110 170)，半径是20。把它们合在一起，看看会形成什么样的三角形网格。", "sql": "SELECT ST_DelaunayTriangles(ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20))) As dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2631, "question_en": "Imagine a shape made by connecting some points like (175 150, 20 40, 50 60, 125 100), then there's a circle centered at (110 170) with a radius of 20. Combine them and see what kind of triangulated mesh they create."}
{"id": 500, "function": "ST_FilterByM", "question": "看看这串坐标线，先找出它的实际覆盖范围，然后挑出那些M值超过30的点，最后用某种格式来展示简化后的形状。", "sql": "SELECT ST_AsText(ST_FilterByM(geom,30)) simplified FROM (SELECT ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry) geom) AS foo;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2640, "question_en": "Take a look at this line of coordinates, first find out its actual coverage area, then pick out the points with M-values over 30, and finally display the simplified shape in some format."}
{"id": 499, "function": "ST_DelaunayTriangles", "question": "用那些小坐标点(14 14 10, 150 14 100, 34 6 25, 20 10 150)拼成的三角形网，能不能给我它的那种文本描述？", "sql": "SELECT ST_AsText(ST_DelaunayTriangles(ST_GeomFromText('MULTIPOINT Z(14 14 10, 150 14 100,34 6 25, 20 10 150)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION Z (POLYGON Z ((14 14 10,20 10 150,34 6 25,14 14 10)),POLYGON Z ((14 14 10,34 6 25,150 14 100,14 14 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2637, "question_en": "With those little coordinate points (14 14 10, 150 14 100, 34 6 25, 20 10 150), can you provide me with that kind of text description of the triangle mesh they form?"}
{"id": 500, "function": "ST_FilterByM", "question": "把那条折线LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)经过一个处理步骤，然后筛选出那些M值至少是30的小点，最后看看结果的WKT长什么样子。", "sql": "SELECT ST_AsText(ST_FilterByM(geom,30)) simplified FROM (SELECT ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry) geom) AS foo;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2644, "question_en": "Take that linestring LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10), put it through a processing step, then pick out those little dots with an M value of at least 30, and finally see what the WKT of the result looks like."}
{"id": 490, "function": "ST_ConcaveHull", "question": "对MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))执行ST_ConcaveHull运算（凹度参数设为0.1），并以WKT文本格式输出结果多边形。", "sql": "SELECT ST_AsText( ST_ConcaveHull( 'MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167))', 0.1 ) );", "execution_result": [["POLYGON((21 151,27 160,35 167,44 172,54 175,64 178,74 180,84 181,94 181,104 181,114 181,124 181,134 179,144 177,153 173,162 168,171 162,177 154,182 145,184 135,173 134,161 134,150 133,139 132,136 142,128 149,119 153,109 155,99 155,89 155,79 153,69 150,61 144,63 134,72 128,82 125,92 123,102 121,112 119,122 118,132 116,142 113,151 110,161 106,170 102,178 96,185 88,189 78,190 68,189 58,185 49,179 41,171 34,162 29,153 25,143 23,133 21,123 19,113 19,102 19,92 19,82 19,72 21,62 22,52 25,43 29,33 34,25 41,19 49,14 58,10 72,21 73,31 74,42 74,53 76,56 66,63 58,71 51,81 48,91 46,101 45,111 46,121 47,131 50,140 55,145 64,144 74,135 80,125 83,115 85,105 87,95 89,85 91,75 93,65 95,55 98,45 102,37 107,29 114,22 122,19 132,18 142,21 151))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2603, "question_en": "Perform the ST_ConcaveHull operation on the MULTIPOINT ((10 72), (53 76), (56 66), (63 58), (71 51), (81 48), (91 46), (101 45), (111 46), (121 47), (131 50), (140 55), (145 64), (144 74), (135 80), (125 83), (115 85), (105 87), (95 89), (85 91), (75 93), (65 95), (55 98), (45 102), (37 107), (29 114), (22 122), (19 132), (18 142), (21 151), (27 160), (35 167), (44 172), (54 175), (64 178), (74 180), (84 181), (94 181), (104 181), (114 181), (124 181), (134 179), (144 177), (153 173), (162 168), (171 162), (177 154), (182 145), (184 135), (139 132), (136 142), (128 149), (119 153), (109 155), (99 155), (89 155), (79 153), (69 150), (61 144), (63 134), (72 128), (82 125), (92 123), (102 121), (112 119), (122 118), (132 116), (142 113), (151 110), (161 106), (170 102), (178 96), (185 88), (189 78), (190 68), (189 58), (185 49), (179 41), (171 34), (162 29), (153 25), (143 23), (133 21), (123 19), (113 19), (102 19), (92 19), (82 19), (72 21), (62 22), (52 25), (43 29), (33 34), (25 41), (19 49), (14 58), (21 73), (31 74), (42 74), (173 134), (161 134), (150 133), (97 104), (52 117), (157 156), (94 171), (112 106), (169 73), (58 165), (149 40), (70 33), (147 157), (48 153), (140 96), (47 129), (173 55), (144 86), (159 67), (150 146), (38 136), (111 170), (124 94), (26 59), (60 41), (71 162), (41 64), (88 110), (122 34), (151 97), (157 56), (39 146), (88 33), (159 45), (47 56), (138 40), (129 165), (33 48), (106 31), (169 147), (37 122), (71 109), (163 89), (37 156), (82 170), (180 72), (29 142), (46 41), (59 155), (124 106), (157 80), (175 82), (56 50), (62 116), (113 95), (144 167)) with a concavity parameter of 0.1, and output the resulting polygon in WKT text format."}
{"id": 497, "function": "ST_DelaunayTriangles", "question": "看看那些由多边形(175 150, 20 40, 50 60, 125 100, 175 150)和在点(110 170)周围画个20单位的圆合并后，做了某种三角形切割的结果几何是什么。", "sql": "SELECT ST_DelaunayTriangles(ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20))) As dtriag;", "execution_result": [[""]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2633, "question_en": "Check out what the resulting shapes look like after combining the shape with corners at (175 150, 20 40, 50 60, 125 100, 175 150) and a 20-unit circle drawn around the spot at (110 170), followed by some kind of triangular slicing."}
{"id": 499, "function": "ST_DelaunayTriangles", "question": "把那些有高度的点，比如(14 14 10), (150 14 100), (34 6 25), (20 10 150)，弄成一种三角形网格，然后看看结果是什么样的文字格式。", "sql": "SELECT ST_AsText(ST_DelaunayTriangles(ST_GeomFromText('MULTIPOINT Z(14 14 10, 150 14 100,34 6 25, 20 10 150)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION Z (POLYGON Z ((14 14 10,20 10 150,34 6 25,14 14 10)),POLYGON Z ((14 14 10,34 6 25,150 14 100,14 14 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2638, "question_en": "Take those elevated points, like (14 14 10), (150 14 100), (34 6 25), (20 10 150), and turn them into some kind of triangle mesh, then see what the result looks like in text format."}
{"id": 499, "function": "ST_DelaunayTriangles", "question": "给那些点吧，14 14 10、150 14 100、34 6 25和20 10 150，做个三角形拼图，然后告诉我拼图的样子，用一种字符串形式。", "sql": "SELECT ST_AsText(ST_DelaunayTriangles(ST_GeomFromText('MULTIPOINT Z(14 14 10, 150 14 100,34 6 25, 20 10 150)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION Z (POLYGON Z ((14 14 10,20 10 150,34 6 25,14 14 10)),POLYGON Z ((14 14 10,34 6 25,150 14 100,14 14 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2639, "question_en": "For those points, 14 14 10, 150 14 100, 34 6 25, and 20 10 150, make a triangle puzzle and then tell me what the puzzle looks like, using some kind of string form."}
{"id": 500, "function": "ST_FilterByM", "question": "把那条穿过(5 2), (3 8), (6 20), (7 25), (10 10)的小线，先弄一下让它变得有效，再看看哪些点的M值超过30，然后告诉我结果。", "sql": "SELECT ST_AsText(ST_FilterByM(geom,30)) simplified FROM (SELECT ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry) geom) AS foo;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2643, "question_en": "Take that line passing through (5 2), (3 8), (6 20), (7 25), (10 10), make it effective first, then see which points have M values over 30, and let me know the result."}
{"id": 499, "function": "ST_DelaunayTriangles", "question": "把那些点(14 14 10, 150 14 100, 34 6 25, 20 10 150)弄成一种全都连起来的三角形网，然后告诉我它的形状是什么。", "sql": "SELECT ST_AsText(ST_DelaunayTriangles(ST_GeomFromText('MULTIPOINT Z(14 14 10, 150 14 100,34 6 25, 20 10 150)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION Z (POLYGON Z ((14 14 10,20 10 150,34 6 25,14 14 10)),POLYGON Z ((14 14 10,34 6 25,150 14 100,14 14 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2635, "question_en": "Take those points (14 14 10, 150 14 100, 34 6 25, 20 10 150) and make them into a kind of triangle mesh that connects them all, then tell me what its shape is."}
{"id": 500, "function": "ST_FilterByM", "question": "对于那些坐标点，像是5 2、3 8、6 20、7 25、10 10，先给它们一个特殊区域属性，然后用30这个神秘值筛选一下，把那些不够大的点去掉，最后看看剩下的点的样子。", "sql": "SELECT ST_AsText(ST_FilterByM(geom,30)) simplified FROM (SELECT ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry) geom) AS foo;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2642, "question_en": "For those coordinate points, like 5 2, 3 8, 6 20, 7 25, 10 10, first give them a special area attribute, then use the mysterious value of 30 to filter them, removing those that aren't big enough, and finally see how the remaining points look."}
{"id": 497, "function": "ST_DelaunayTriangles", "question": "把一个形状盖住POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))和以POINT(110 170)为中心、20单位为半径的小圆，然后看看三角化之后会变成什么样子。", "sql": "SELECT ST_DelaunayTriangles(ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'), ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20))) As dtriag;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2632, "question_en": "Cover the shape of POLYGON((175 150, 20 40, 50 60, 125 100, 175 150)) and a small circle centered at POINT(110 170) with a radius of 20 units, then see what it looks like after triangulation."}
{"id": 499, "function": "ST_DelaunayTriangles", "question": "用一种方法连起那些3D小点，像是14 14 10, 150 14 100, 34 6 25, 20 10 150，然后把结果变成一种文本形式。", "sql": "SELECT ST_AsText(ST_DelaunayTriangles(ST_GeomFromText('MULTIPOINT Z(14 14 10, 150 14 100,34 6 25, 20 10 150)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION Z (POLYGON Z ((14 14 10,20 10 150,34 6 25,14 14 10)),POLYGON Z ((14 14 10,34 6 25,150 14 100,14 14 10)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2634, "question_en": "Use a way to connect those 3D little dots, like 14 14 10, 150 14 100, 34 6 25, 20 10 150, and then turn the result into some text form."}
{"id": 500, "function": "ST_FilterByM", "question": "把那些坐标点(5 2, 3 8, 6 20, 7 25, 10 10)经过一种处理方式后，再去掉某些值不够30的小点，最后得到一个简化的文本形式。", "sql": "SELECT ST_AsText(ST_FilterByM(geom,30)) simplified FROM (SELECT ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry) geom) AS foo;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2641, "question_en": "Take those coordinate points (5 2, 3 8, 6 20, 7 25, 10 10), process them in a certain way, then remove some small points with values not reaching 30, and finally get a simplified text form."}
{"id": 503, "function": "ST_GeometricMedian", "question": "找出由这些点(10 10)、(10 40)、(40 10)和(190 190)构成的形状的中心和一个代表性的中间点，然后用某种格式展示出来。", "sql": "WITH test AS ( SELECT 'MULTIPOINT((10 10), (10 40), (40 10), (190 190))'::geometry geom) SELECT ST_AsText(ST_Centroid(geom)) centroid, ST_AsText(ST_GeometricMedian(geom)) median FROM test;", "execution_result": [["POINT(62.5 62.5)", "POINT(25.01778421249728 25.01778421249728)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2646, "question_en": "Find the center and a representative middle point of the shape made by these points (10 10), (10 40), (40 10), and (190 190), then show them in some format."}
{"id": 500, "function": "ST_FilterByM", "question": "给我一个字符串，代表一条线，像是连接了5 2到3 8再到6 20，然后7 25和10 10这样的点。在这些点上给点赋予一些面积属性，之后用某种方式过滤掉那些M值低于30的部分。", "sql": "SELECT ST_AsText(ST_FilterByM(geom,30)) simplified FROM (SELECT ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry) geom) AS foo;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2645, "question_en": "Give me a string that represents a line, like it connects points from 5 2 to 3 8, then to 6 20, and 7 25 and 10 10. Assign some area attributes to these points, and then filter out parts where the M-value is below 30 in some way."}
{"id": 503, "function": "ST_GeometricMedian", "question": "找出那些点的中心地方和中间位置，用一种特别的坐标方式显示出来，看看这些地方的样子。", "sql": "WITH test AS ( SELECT 'MULTIPOINT((10 10), (10 40), (40 10), (190 190))'::geometry geom) SELECT ST_AsText(ST_Centroid(geom)) centroid, ST_AsText(ST_GeometricMedian(geom)) median FROM test;", "execution_result": [["POINT(62.5 62.5)", "POINT(25.01778421249728 25.01778421249728)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2649, "question_en": "Find the central spot and middle position of those points, and show them in a special coordinate format to see what these places look like."}
{"id": 504, "function": "ST_LineMerge", "question": "把那些连起来的线条组合成一条长线后，用文字描述出来会是什么样子呢？", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))' ));", "execution_result": [["LINESTRING(10 160,60 120,120 140,180 120)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2655, "question_en": "What would it look like in words after connecting those lines into one long line?"}
{"id": 503, "function": "ST_GeometricMedian", "question": "找出那些点在一起的中心位置和中间位置，点包括(10 10)、(10 40)、(40 10)和(190 190)，并用特殊格式表示。", "sql": "WITH test AS ( SELECT 'MULTIPOINT((10 10), (10 40), (40 10), (190 190))'::geometry geom) SELECT ST_AsText(ST_Centroid(geom)) centroid, ST_AsText(ST_GeometricMedian(geom)) median FROM test;", "execution_result": [["POINT(62.5 62.5)", "POINT(25.01778421249728 25.01778421249728)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2650, "question_en": "Find the central spot and the middle spot for those points together, including (10 10), (10 40), (40 10), and (190 190), and express them in a special format."}
{"id": 503, "function": "ST_GeometricMedian", "question": "想象一下有一些小点，像是(10 10)、(10 40)、(40 10)和(190 190)，你能找到它们的中心点和那个特别的中间点吗？然后用某种文本格式告诉我。", "sql": "WITH test AS ( SELECT 'MULTIPOINT((10 10), (10 40), (40 10), (190 190))'::geometry geom) SELECT ST_AsText(ST_Centroid(geom)) centroid, ST_AsText(ST_GeometricMedian(geom)) median FROM test;", "execution_result": [["POINT(62.5 62.5)", "POINT(25.01778421249728 25.01778421249728)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2648, "question_en": "Imagine there are some little dots, like (10 10), (10 40), (40 10), and (190 190), can you find their center point and that special middle point? Then tell me in some text format."}
{"id": 504, "function": "ST_LineMerge", "question": "把那些连着的线段，像(10 160, 60 120)、(120 140, 60 120)和(120 140, 180 120)，弄成一条完整的线，并用某种文本格式说出来。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))' ));", "execution_result": [["LINESTRING(10 160,60 120,120 140,180 120)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2653, "question_en": "Turn those connected line pieces, like (10 160, 60 120), (120 140, 60 120) and (120 140, 180 120), into one complete line, and express it in some kind of text format."}
{"id": 503, "function": "ST_GeometricMedian", "question": "对于那些点在(10 10), (10 40), (40 10), (190 190)位置的集合，想知道那个中心点和几何中间点的样子，用一种可以读出来的格式告诉我。", "sql": "WITH test AS ( SELECT 'MULTIPOINT((10 10), (10 40), (40 10), (190 190))'::geometry geom) SELECT ST_AsText(ST_Centroid(geom)) centroid, ST_AsText(ST_GeometricMedian(geom)) median FROM test;", "execution_result": [["POINT(62.5 62.5)", "POINT(25.01778421249728 25.01778421249728)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2651, "question_en": "For the collection of dots at positions (10 10), (10 40), (40 10), (190 190), I want to know what the center and the geometric middle look like, using a format that can be read out loud."}
{"id": 504, "function": "ST_LineMerge", "question": "把这些小线段(10 160,60 120)、(120 140,60 120)和(120 140,180 120)变成一条完整的线，结果用一种常见的格式展示出来。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))' ));", "execution_result": [["LINESTRING(10 160,60 120,120 140,180 120)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2657, "question_en": "Turn these little segments (10 160,60 120), (120 140,60 120), and (120 140,180 120) into one complete line, and show the result in a common format."}
{"id": 504, "function": "ST_LineMerge", "question": "把这些线段，像那种连接起来的故事一样，变成一条完整的线，然后用一种特别的格式来展示。它们的坐标是(10 160, 60 120)，(120 140, 60 120)，(120 140, 180 120)。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))' ));", "execution_result": [["LINESTRING(10 160,60 120,120 140,180 120)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2652, "question_en": "Transform these line segments, like connecting them into a continuous story, into one complete line, and show it in a special format. Their coordinates are (10 160, 60 120), (120 140, 60 120), (120 140, 180 120)."}
{"id": 504, "function": "ST_LineMerge", "question": "把那些线段的三个部分结合起来，像拼图一样变成一条完整的线，然后用一种格式显示结果，这些线段是(10 160, 60 120), (120 140, 60 120), (120 140, 180 120)。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))' ));", "execution_result": [["LINESTRING(10 160,60 120,120 140,180 120)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2654, "question_en": "Combine the three parts of those line segments, like a puzzle, into one complete line, then display the result in a certain format. The segments are (10 160, 60 120), (120 140, 60 120), (120 140, 180 120)."}
{"id": 503, "function": "ST_GeometricMedian", "question": "有一个由四个小点组成的形状，坐标是(10 10)、(10 40)、(40 10)和(190 190)，找出这个形状的两个不同的中心位置，用一种文本方式来展示结果。", "sql": "WITH test AS ( SELECT 'MULTIPOINT((10 10), (10 40), (40 10), (190 190))'::geometry geom) SELECT ST_AsText(ST_Centroid(geom)) centroid, ST_AsText(ST_GeometricMedian(geom)) median FROM test;", "execution_result": [["POINT(62.5 62.5)", "POINT(25.01778421249728 25.01778421249728)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2647, "question_en": "There is a shape made up of four little dots, with coordinates (10 10), (10 40), (40 10), and (190 190). Find two different center spots for this shape and show the results in a text format."}
{"id": 505, "function": "ST_LineMerge", "question": "把这几段三维的小线段串成一整条线看看，结果要用WKT的方式告诉我。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))' ));", "execution_result": [["LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 -32 11)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2659, "question_en": "String these few 3D little lines into one whole line and let me know the result in a WKT way."}
{"id": 504, "function": "ST_LineMerge", "question": "把那些点连起来，像是从(10 160)到(60 120)，然后从(120 140)到(60 120)，再从(120 140)到(180 120)，看看它们合并成一个线段的样子，用什么方式展示呢？", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120))' ));", "execution_result": [["LINESTRING(10 160,60 120,120 140,180 120)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2656, "question_en": "Connect those points, like from (10 160) to (60 120), then from (120 140) to (60 120), and again from (120 140) to (180 120), and see how they merge into a single line segment, how would you show it?"}
{"id": 505, "function": "ST_LineMerge", "question": "看看能不能把这些三维的线条组合成最少的线，然后用那些常见的格式来描述它们，包含像(-29 -27 11)这样的点。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))' ));", "execution_result": [["LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 -32 11)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2658, "question_en": "See if you can combine these 3D lines into the fewest lines possible, then describe them using that common format, including points like (-29 -27 11)."}
{"id": 505, "function": "ST_LineMerge", "question": "处理由那些坐标线段组成的MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))，看看它们合并成什么样子，并用文字描述出来。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))' ));", "execution_result": [["LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 -32 11)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2660, "question_en": "Handle the MULTILINESTRING made of those coordinate lines ((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11)) to see how they merge together, and describe it in words."}
{"id": 505, "function": "ST_LineMerge", "question": "把那些线条合并后，看看像(-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6)、(-29 -27 12,-30 -29.7 5)和(-45 -33 1,-46 -32 11)这样的坐标，最后变成什么样的文本格式。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))' ));", "execution_result": [["LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 -32 11)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2662, "question_en": "After merging those lines, check what the text format looks like for coordinates like (-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), and (-45 -33 1,-46 -32 11)."}
{"id": 506, "function": "ST_LineMerge", "question": "看看那些线段，像60 30到10 70，还有120 50到60 30，再加上120 50到180 30的，能不能把它们合在一起，注意方向不要搞反，然后用某种格式写出来。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))', TRUE));", "execution_result": [["MULTILINESTRING((120 50,60 30,10 70),(120 50,180 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2664, "question_en": "Look at those line pieces, like from 60 30 to 10 70, and from 120 50 to 60 30, plus from 120 50 to 180 30, see if you can join them up, but don't mix up the directions, and write it out in some format."}
{"id": 506, "function": "ST_LineMerge", "question": "把那些坐标连成一条线，坐标是(60 30, 10 70), (120 50, 60 30), (120 50, 180 30)，但不要把方向相反的线连在一起，然后告诉我它的WKT格式。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))', TRUE));", "execution_result": [["MULTILINESTRING((120 50,60 30,10 70),(120 50,180 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2667, "question_en": "Join those coordinates into a line, the coordinates are (60 30, 10 70), (120 50, 60 30), (120 50, 180 30), but don't connect lines that go in opposite directions, then tell me its WKT format."}
{"id": 507, "function": "ST_LineMerge", "question": "把那些线段连起来，像串珠子一样，有一段从(-29 -27)到(-45 -33)，另一段从(-45.2 -33.2)到(-46 -32)，然后变成一种文本格式。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))' ));", "execution_result": [["MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2670, "question_en": "Join those segments like threading beads, with one part from (-29 -27) to (-45 -33) and another from (-45.2 -33.2) to (-46 -32), then turn it into a kind of text format."}
{"id": 506, "function": "ST_LineMerge", "question": "看看这些线段，像是60 30到10 70，还有120 50到60 30，最后120 50到180 30，试着让它们变成一个更简单的路径，不要搞反方向，然后告诉我它们最后的样子吧。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))', TRUE));", "execution_result": [["MULTILINESTRING((120 50,60 30,10 70),(120 50,180 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2665, "question_en": "Take a look at these line segments, like from 60 30 to 10 70, then 120 50 to 60 30, and finally 120 50 to 180 30, try to make them into a simpler path without mixing up directions, and let me know how they end up looking."}
{"id": 507, "function": "ST_LineMerge", "question": "看看那两条小线，一个穿过(-29 -27), (-30 -29.7), (-36 -31), (-45 -33)，另一个从(-45.2 -33.2)到(-46 -32)，把它们合成一个更完整的形状，然后说说它的样子。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))' ));", "execution_result": [["MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2672, "question_en": "Take a look at those two little lines, one goes through (-29 -27), (-30 -29.7), (-36 -31), (-45 -33), and the other from (-45.2 -33.2) to (-46 -32). Merge them into a more complete shape and describe how it looks."}
{"id": 506, "function": "ST_LineMerge", "question": "有三段线，像(60 30到10 70)、(120 50到60 30)和(120 50到180 30)这样，想看看它们合成一个整体时的样子，不过要小心，别把那些方向不对的也合在一起哦。结果用那种常见的格式来表示。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))', TRUE));", "execution_result": [["MULTILINESTRING((120 50,60 30,10 70),(120 50,180 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2668, "question_en": "There are three lines, like (60 30 to 10 70), (120 50 to 60 30), and (120 50 to 180 30), and we want to see what they look like when combined into one whole. But be careful not to include those with the wrong direction. Show the result in that common format."}
{"id": 507, "function": "ST_LineMerge", "question": "把包含两段小路的多线段合在一起，第一段从(-29 -27)出发到(-45 -33)，第二段从(-45.2 -33.2)走到(-46 -32)，然后用某种文本格式来看看结果。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))' ));", "execution_result": [["MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2674, "question_en": "Combine the multi-path containing two small paths together, the first journey starting from (-29 -27) to (-45 -33), and the second one from (-45.2 -33.2) to (-46 -32), then see the result in some kind of text format."}
{"id": 506, "function": "ST_LineMerge", "question": "试着想象一下，把这些连接的线段组合成一个整体，注意方向不要弄反，然后用某种方式变成文本格式，看看结果是什么。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))', TRUE));", "execution_result": [["MULTILINESTRING((120 50,60 30,10 70),(120 50,180 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2666, "question_en": "Try to imagine combining these connected line segments into a whole, being careful not to reverse the directions, then somehow turn it into text format to see the result."}
{"id": 507, "function": "ST_LineMerge", "question": "想象一个有两条线段的小路，第一条从点(-29 -27)到(-30 -29.7)再到(-36 -31)然后到(-45 -33)，第二条从点(-45.2 -33.2)到(-46 -32)，试着把这些线段合成一条整体的路径，并用某种格式来描述这条新路径。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))' ));", "execution_result": [["MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2671, "question_en": "Imagine a small path with two segments, the first going from point (-29 -27) to (-30 -29.7) then to (-36 -31) and then to (-45 -33), and the second from point (-45.2 -33.2) to (-46 -32). Try to combine these segments into one whole path and describe this new path in some format."}
{"id": 507, "function": "ST_LineMerge", "question": "对由线段组成的那种几何图形，包含像[(-29 -27),(-30 -29.7),(-36 -31),(-45 -33)]和[(-45.2 -33.2),(-46 -32)]这样的连接点，试着让它们连在一起，然后告诉我它的文本格式是什么。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))' ));", "execution_result": [["MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2675, "question_en": "For that geometry made of lines, with connection points like [(-29 -27),(-30 -29.7),(-36 -31),(-45 -33)] and [(-45.2 -33.2),(-46 -32)], try to make them connect into one, and then tell me what its text format is."}
{"id": 505, "function": "ST_LineMerge", "question": "请把这些三维线条组合起来，看看它们连接后的样子，用那个文本格式来表示，坐标是这些：(-29 -27 11, -30 -29.7 10, -36 -31 5, -45 -33 6), (-29 -27 12, -30 -29.7 5), (-45 -33 1, -46 -32 11)。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))' ));", "execution_result": [["LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 -32 11)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2663, "question_en": "Could you put these 3D lines together and show what they look like when connected, using that text format? The coordinates are: (-29 -27 11, -30 -29.7 10, -36 -31 5, -45 -33 6), (-29 -27 12, -30 -29.7 5), (-45 -33 1, -46 -32 11)."}
{"id": 508, "function": "ST_LineMerge", "question": "有一串小线条，像是从(10 160)到(60 120)，(120 140)到(60 120)，还有一些别的连接。把它们合成一条，看它们的最终形状是什么。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140))' ));", "execution_result": [["MULTILINESTRING((10 160,60 120,120 140),(100 180,120 140),(120 140,180 120))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2677, "question_en": "There are some little lines, like from (10 160) to (60 120), (120 140) to (60 120), and a few other connections. Combine them into one and see what their final shape is."}
{"id": 508, "function": "ST_LineMerge", "question": "把那几条线段连成一条完整的线，然后用一种标准的描述方式来表达，记得那些点坐标是：(10 160, 60 120)、(120 140, 60 120)、(120 140, 180 120)、(100 180, 120 140)。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140))' ));", "execution_result": [["MULTILINESTRING((10 160,60 120,120 140),(100 180,120 140),(120 140,180 120))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2676, "question_en": "Connect those line segments into one complete line, then express it using a standard description method. Remember the point coordinates are: (10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140)."}
{"id": 508, "function": "ST_LineMerge", "question": "请把由那些线段构成的图形合并后，告诉我它的样子，用一些特别的格式，比如WKT。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140))' ));", "execution_result": [["MULTILINESTRING((10 160,60 120,120 140),(100 180,120 140),(120 140,180 120))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2679, "question_en": "Please merge the shape made of those line segments and tell me what it looks like, using some special format like WKT."}
{"id": 505, "function": "ST_LineMerge", "question": "把那些3D曲线的点串起来，看看最后变成什么样子的文字格式，记得用这些坐标：(-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11)。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))' ));", "execution_result": [["LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 -32 11)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2661, "question_en": "String those 3D curve points together and see what it looks like in text format, remember to use these coordinates: (-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11)."}
{"id": 506, "function": "ST_LineMerge", "question": "想象一下有三条二维的小线段，它们分别从(60 30)到(10 70)，(120 50)到(60 30)，还有从(120 50)到(180 30)连起来，看看能不能把它们合并成一个形状，不包括那些相反方向的线，然后告诉我它的WKT格式是什么。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((60 30, 10 70), (120 50, 60 30), (120 50, 180 30))', TRUE));", "execution_result": [["MULTILINESTRING((120 50,60 30,10 70),(120 50,180 30))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2669, "question_en": "Imagine there are three small 2D line segments connecting (60 30) to (10 70), (120 50) to (60 30), and (120 50) to (180 30). See if you can merge them into one shape without including lines in opposite directions, and then tell me what its WKT format is."}
{"id": 508, "function": "ST_LineMerge", "question": "把那些线段，比如(10 160到60 120)、(120 140到60 120)等等，想象成连成一条长线，结果用文本方式告诉我。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140))' ));", "execution_result": [["MULTILINESTRING((10 160,60 120,120 140),(100 180,120 140),(120 140,180 120))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2680, "question_en": "Imagine those segments like (10 160 to 60 120), (120 140 to 60 120), and so on, as forming one long line, and tell me the result in text form."}
{"id": 508, "function": "ST_LineMerge", "question": "把那几个2D线段的集合，像(10 160,60 120)还有(120 140,60 120)这些，想象成一个整体的线条，然后看看它用WKT的特殊格式是啥样。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140))' ));", "execution_result": [["MULTILINESTRING((10 160,60 120,120 140),(100 180,120 140),(120 140,180 120))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2678, "question_en": "Take those 2D line segments, like (10 160,60 120) and (120 140,60 120), and imagine them as a single line, then see what it looks like in that special WKT format."}
{"id": 508, "function": "ST_LineMerge", "question": "看看那些连起来的线段，像是(10 160, 60 120)、(120 140, 60 120)、(120 140, 180 120)、(100 180, 120 140)，最后变成什么样的形状，用一种特别的格式描述出来。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140))' ));", "execution_result": [["MULTILINESTRING((10 160,60 120,120 140),(100 180,120 140),(120 140,180 120))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2681, "question_en": "Observe how those connected lines, like (10 160, 60 120), (120 140, 60 120), (120 140, 180 120), (100 180, 120 140), finally turn into what kind of shape, described in a special format."}
{"id": 509, "function": "ST_MaximumInscribedCircle", "question": "找出那个复杂形状的最大圆，看看它的半径是多少，还有圆心和靠近边界的点，都用那些坐标格式来写。", "sql": "SELECT radius, ST_AsText(center) AS center, ST_AsText(nearest) AS nearest FROM ST_MaximumInscribedCircle('POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))');", "execution_result": [[45.18896951053177, "POINT(96.9287109375 76.3232421875)", "POINT(61.64205411585366 104.55256764481707)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2687, "question_en": "Identify the biggest circle inside that complex shape, check its radius, and find the center and closest point to the edge, using those coordinate formats."}
{"id": 510, "function": "ST_LargestEmptyCircle", "question": "在那些连起来的点组成的复杂线里，找出能画的最大空心圆的半径、圆心位置和离它最近的地方。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( 'MULTILINESTRING ( (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), (160 30, 100 100, 180 100))');", "execution_result": [[39.26054532232516, "010100000000000000C0CB4E400000000060165B40", "010100000000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2688, "question_en": "In those connected points forming a complex line, find the radius of the largest empty circle you can draw, its center position, and the place closest to it."}
{"id": 509, "function": "ST_MaximumInscribedCircle", "question": "对于那些坐标点组合成的形状，找出能放入的最大圆，告诉我圆心在哪个位置，圆心到边界最近的地方在哪里，还有这个圆有多大。", "sql": "SELECT radius, ST_AsText(center) AS center, ST_AsText(nearest) AS nearest FROM ST_MaximumInscribedCircle('POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))');", "execution_result": [[45.18896951053177, "POINT(96.9287109375 76.3232421875)", "POINT(61.64205411585366 104.55256764481707)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2686, "question_en": "For that shape made by those coordinates, find the biggest circle you can fit inside, tell me where the center is, where the nearest point on the boundary from the center is, and how big the circle is."}
{"id": 509, "function": "ST_MaximumInscribedCircle", "question": "对于那种复杂的多边形形状，像是由点(40 180)到(110 160)再到(180 180)这样的，想知道里面能画的最大圆有多大，还有圆的中心在哪里，以及中心到边缘最近的地方在哪儿。", "sql": "SELECT radius, ST_AsText(center) AS center, ST_AsText(nearest) AS nearest FROM ST_MaximumInscribedCircle( 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))');", "execution_result": [[45.18896951053177, "POINT(96.9287109375 76.3232421875)", "POINT(61.64205411585366 104.55256764481707)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2683, "question_en": "For that kind of complex polygon shape, like the one formed by points from (40 180) to (110 160) to (180 180), I want to know how big the largest circle inside can be, where the center of the circle is, and where the closest point from the center to the edge is."}
{"id": 509, "function": "ST_MaximumInscribedCircle", "question": "给你一个形状，看看它里面能放下的最大的圆有多大，圆心在哪儿，还有圆心到形状边缘最近的那个点的位置，都用WKT格式写出来。", "sql": "SELECT radius, ST_AsText(center) AS center, ST_AsText(nearest) AS nearest FROM ST_MaximumInscribedCircle('POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))');", "execution_result": [[45.18896951053177, "POINT(96.9287109375 76.3232421875)", "POINT(61.64205411585366 104.55256764481707)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2685, "question_en": "For a given shape, find out how big the largest circle that can fit inside is, where the center is, and the location of the closest point from the center to the shape's edge, all in WKT format."}
{"id": 509, "function": "ST_MaximumInscribedCircle", "question": "在那种有大圈圈和小圈圈（外面是40 180→110 160→180 180→180 120→140 90→160 40→80 10→70 40→20 50→40 180，里面有个60 140→50 90→90 140→60 140）的形状里，找个最大圆，看看圆的半径是多少，还有圆心和那个离边界最近的点的样子。", "sql": "SELECT radius, ST_AsText(center) AS center, ST_AsText(nearest) AS nearest FROM ST_MaximumInscribedCircle( 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))');", "execution_result": [[45.18896951053177, "POINT(96.9287109375 76.3232421875)", "POINT(61.64205411585366 104.55256764481707)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2684, "question_en": "In that shape with big loops and small loops (outside is 40 180→110 160→180 180→180 120→140 90→160 40→80 10→70 40→20 50→40 180, inside has 60 140→50 90→90 140→60 140), find the biggest circle, see what's the radius, and how the center and the point closest to the boundary look like."}
{"id": 511, "function": "ST_LargestEmptyCircle", "question": "在由一些点和一个形状组合而成的几何集合中，用这个形状作为外框，找出最大圆圈的半径、圆心在哪里，以及哪个点最近。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( ST_Collect( 'MULTIPOINT ((70 50), (60 130), (130 150), (80 90))'::geometry, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry), 0, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry );", "execution_result": [[19.903875992225455, "010100000055555555554F5840ABAAAAAAAAFC5840", "010100000000000000000054400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2694, "question_en": "In a geometry collection made of some points and a shape, use this shape as the outer frame to find the largest circle's radius, where the center is, and which point is closest."}
{"id": 509, "function": "ST_MaximumInscribedCircle", "question": "看看有个大圈能放进这个特别的形状里，它的圆心在什么位置，离边界最近的点又在哪里呢？形状是由这些坐标组成的：外环有(40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180)，内环有(60 140, 50 90, 90 140, 60 140)。", "sql": "SELECT radius, ST_AsText(center) AS center, ST_AsText(nearest) AS nearest FROM ST_MaximumInscribedCircle( 'POLYGON ((40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), (60 140, 50 90, 90 140, 60 140))');", "execution_result": [[45.18896951053177, "POINT(96.9287109375 76.3232421875)", "POINT(61.64205411585366 104.55256764481707)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2682, "question_en": "Let's see if there's a big circle that can fit inside this special shape, where is its center, and where is the nearest point to the boundary? The shape is made up of these coordinates: outer ring has (40 180, 110 160, 180 180, 180 120, 140 90, 160 40, 80 10, 70 40, 20 50, 40 180), inner ring has (60 140, 50 90, 90 140, 60 140)."}
{"id": 507, "function": "ST_LineMerge", "question": "把这些线段串起来，看看它们合并后变成什么样的文本格式，坐标是((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))。", "sql": "SELECT ST_AsText(ST_LineMerge( 'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))' ));", "execution_result": [["MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2673, "question_en": "String these line segments together and see what they become in text format after merging, with coordinates at ((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))."}
{"id": 510, "function": "ST_LargestEmptyCircle", "question": "有一个由三段小线构成的复杂形状，每段都用几个点表示，比如像(10 100)到(60 180)这样的点。想知道在这个形状里可以放下的最大空圆，它有多大，在哪里，还有哪个点离它最近。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( 'MULTILINESTRING ( (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), (160 30, 100 100, 180 100))');", "execution_result": [[39.26054532232516, "010100000000000000C0CB4E400000000060165B40", "010100000000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2690, "question_en": "There's a complex shape made of three little lines, each defined by points like (10 100) to (60 180). We want to find the biggest empty circle that can fit inside, how big it is, where it is, and which point is closest to it."}
{"id": 511, "function": "ST_LargestEmptyCircle", "question": "有一堆点和一个形状，点在这些位置：70 50, 60 130, 130 150, 80 90。形状是个围着的区域：90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190。想知道在这片区域里，最大的那个空圈的大小、中心和离边界最近的地方。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( ST_Collect( 'MULTIPOINT ((70 50), (60 130), (130 150), (80 90))'::geometry, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry), 0, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry );", "execution_result": [[19.903875992225455, "010100000055555555554F5840ABAAAAAAAAFC5840", "010100000000000000000054400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2695, "question_en": "There's a bunch of dots and a shape, with dots at these spots: 70 50, 60 130, 130 150, 80 90. The shape is an enclosing area: 90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190. Want to find out the size, center, and nearest point to the boundary of the biggest empty circle in this area."}
{"id": 510, "function": "ST_LargestEmptyCircle", "question": "在由三条路线构成的形状里，找找最大的那个没东西的圆，它的圆心在哪里，半径是多大，还有离边界最近的是哪个点？路线是这样的：第一条从10 100到60 180再到130 150最后到190 160，第二条从20 50到70 70再到90 20最后到110 40，第三条从160 30到100 100再到180 100。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle('MULTILINESTRING ( (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), (160 30, 100 100, 180 100))');", "execution_result": [[39.26054532232516, "010100000000000000C0CB4E400000000060165B40", "010100000000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2693, "question_en": "In the shape made by three paths, find the biggest circle that has nothing inside it, where its center is, how big the radius is, and which point is nearest to the edge? The paths are like this: first one goes from 10 100 to 60 180 then to 130 150 and finally to 190 160, the second one from 20 50 to 70 70 then to 90 20 and finally to 110 40, the third one from 160 30 to 100 100 then to 180 100."}
{"id": 510, "function": "ST_LargestEmptyCircle", "question": "看看这三条线段：有一条从10到100到60到180再到130到150再到190到160，还有一条从20到50到70到70再到90到20再到110到40，最后一条从160到30到100到100再到180到100。能不能找出一个最大的空圆，它的半径、圆心和离这些线最近的点是什么？", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle('MULTILINESTRING ( (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), (160 30, 100 100, 180 100))');", "execution_result": [[39.26054532232516, "010100000000000000C0CB4E400000000060165B40", "010100000000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2691, "question_en": "Consider these three lines: one goes from 10 to 100 to 60 to 180 then to 130 to 150 then to 190 to 160, another goes from 20 to 50 to 70 to 70 then to 90 to 20 then to 110 to 40, and the last one goes from 160 to 30 to 100 to 100 then to 180 to 100. Can you find the largest empty circle, and what are its radius, center, and the point nearest to these lines?"}
{"id": 510, "function": "ST_LargestEmptyCircle", "question": "在由三条弯弯曲曲的线组成的区域里，找出那个最大空圆的大小、圆心位置，还有那个离边界最近的小点。线的路径是这样的：它们分别经过(10 100)到(60 180)到(130 150)到(190 160)，然后是(20 50)到(70 70)到(90 20)到(110 40)，最后是(160 30)到(100 100)到(180 100)。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( 'MULTILINESTRING ( (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), (160 30, 100 100, 180 100))');", "execution_result": [[39.26054532232516, "010100000000000000C0CB4E400000000060165B40", "010100000000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2689, "question_en": "In the area formed by three winding lines, find the size of that largest empty circle, the center position, and the little point closest to the boundary. The paths of the lines are as follows: they pass through (10 100) to (60 180) to (130 150) to (190 160), then (20 50) to (70 70) to (90 20) to (110 40), and finally (160 30) to (100 100) to (180 100)."}
{"id": 510, "function": "ST_LargestEmptyCircle", "question": "对于由这些折线组成的图形，比如(10 100, 60 180, 130 150, 190 160)，还有(20 50, 70 70, 90 20, 110 40)，以及(160 30, 100 100, 180 100)，能不能找出一个最大的空圆？结果要有圆的大小、中心点和离边界最近的点。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle('MULTILINESTRING ( (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), (160 30, 100 100, 180 100))');", "execution_result": [[39.26054532232516, "010100000000000000C0CB4E400000000060165B40", "010100000000000000008051400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2692, "question_en": "For the shape made up of these lines, like (10 100, 60 180, 130 150, 190 160), (20 50, 70 70, 90 20, 110 40), and (160 30, 100 100, 180 100), can you figure out the largest empty circle? The result should include the size of the circle, its center, and the point closest to the boundary."}
{"id": 513, "function": "ST_MinimumBoundingCircle", "question": "有一条线从(55,75)到(125,150)，还有一个在(20,80)的小点，把它们放在一起，想象一下它们的最小圆形外套，用8段小线段来画出四分之一的弧，然后用WKT的方式告诉我这个圆。", "sql": "SELECT ST_AsText(ST_MinimumBoundingCircle( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)), 8 )) AS wktmbc;", "execution_result": [["POLYGON((72.5 178.4024474346694,84.86920388664029 177.18418718546332,96.76306620464646 173.57622349601382,107.72451249529237 167.71720838753708,117.33230052487836 159.83230052487838,125.21720838753708 150.22451249529237,131.07622349601382 139.26306620464646,134.68418718546332 127.3692038866403,135.9024474346694 115,134.68418718546332 102.63079611335971,131.07622349601382 90.73693379535354,125.21720838753708 79.77548750470766,117.33230052487838 70.16769947512164,107.72451249529237 62.282791612462916,96.76306620464648 56.42377650398619,84.86920388664032 52.815812814536685,72.50000000000001 51.59755256533059,60.13079611335969 52.815812814536685,48.236933795353536 56.42377650398618,37.27548750470765 62.28279161246291,27.667699475121637 70.16769947512162,19.782791612462923 79.77548750470763,13.923776503986204 90.7369337953535,10.315812814536692 102.63079611335968,9.097552565330588 114.99999999999999,10.315812814536685 127.3692038866403,13.923776503986197 139.2630662046465,19.78279161246291 150.22451249529234,27.667699475121623 159.83230052487835,37.275487504707634 167.71720838753708,48.236933795353494 173.5762234960138,60.13079611335967 177.18418718546332,72.49999999999999 178.4024474346694))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2702, "question_en": "There's a line from (55,75) to (125,150), and a little dot at (20,80). Combine them and imagine their smallest circular cover, using 8 small segments to draw a quarter arc, then tell me this circle in WKT."}
{"id": 513, "function": "ST_MinimumBoundingCircle", "question": "有一个线条从(55, 75)到(125, 150)和一个小点在(20, 80)，把这些东西放在一起，看看能不能用一个圆圈把它们罩住，记得用8段线来表示一部分圆，然后用某种方式输出它。", "sql": "SELECT ST_AsText(ST_MinimumBoundingCircle( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)), 8 )) AS wktmbc;", "execution_result": [["POLYGON((72.5 178.4024474346694,84.86920388664029 177.18418718546332,96.76306620464646 173.57622349601382,107.72451249529237 167.71720838753708,117.33230052487836 159.83230052487838,125.21720838753708 150.22451249529237,131.07622349601382 139.26306620464646,134.68418718546332 127.3692038866403,135.9024474346694 115,134.68418718546332 102.63079611335971,131.07622349601382 90.73693379535354,125.21720838753708 79.77548750470766,117.33230052487838 70.16769947512164,107.72451249529237 62.282791612462916,96.76306620464648 56.42377650398619,84.86920388664032 52.815812814536685,72.50000000000001 51.59755256533059,60.13079611335969 52.815812814536685,48.236933795353536 56.42377650398618,37.27548750470765 62.28279161246291,27.667699475121637 70.16769947512162,19.782791612462923 79.77548750470763,13.923776503986204 90.7369337953535,10.315812814536692 102.63079611335968,9.097552565330588 114.99999999999999,10.315812814536685 127.3692038866403,13.923776503986197 139.2630662046465,19.78279161246291 150.22451249529234,27.667699475121623 159.83230052487835,37.275487504707634 167.71720838753708,48.236933795353494 173.5762234960138,60.13079611335967 177.18418718546332,72.49999999999999 178.4024474346694))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2701, "question_en": "There's a line from (55, 75) to (125, 150) and a small dot at (20, 80), try putting them together and see if you can cover them with a circle, remember to use 8 segments to represent part of the circle, and then output it in some format."}
{"id": 511, "function": "ST_LargestEmptyCircle", "question": "在一个由多个小点和一个大形状组成的图中，看看那个大形状里面能放下的最大空心圆，它的大小、中心和离边缘最近的点都是什么呢？这些点和形状的坐标分别是(70 50), (60 130), (130 150), (80 90)和(90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190)。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( ST_Collect( 'MULTIPOINT ((70 50), (60 130), (130 150), (80 90))'::geometry, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry), 0, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry );", "execution_result": [[19.903875992225455, "010100000055555555554F5840ABAAAAAAAAFC5840", "010100000000000000000054400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2697, "question_en": "In a picture made of several small dots and one big shape, find out the largest hollow circle that fits inside the big shape. What are its size, center, and the point closest to the edge? The coordinates of these dots and shape are (70 50), (60 130), (130 150), (80 90) and (90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190)."}
{"id": 513, "function": "ST_MinimumBoundingCircle", "question": "把由线和点组成的集合，包括线上的(55 75)到(125 150)以及点在(20 80)，变成一个圈的覆盖形状，用8个小段来表示那个圆的四分之一，然后转换成一种文字格式。", "sql": "SELECT ST_AsText(ST_MinimumBoundingCircle( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)), 8 )) AS wktmbc;", "execution_result": [["POLYGON((72.5 178.4024474346694,84.86920388664029 177.18418718546332,96.76306620464646 173.57622349601382,107.72451249529237 167.71720838753708,117.33230052487836 159.83230052487838,125.21720838753708 150.22451249529237,131.07622349601382 139.26306620464646,134.68418718546332 127.3692038866403,135.9024474346694 115,134.68418718546332 102.63079611335971,131.07622349601382 90.73693379535354,125.21720838753708 79.77548750470766,117.33230052487838 70.16769947512164,107.72451249529237 62.282791612462916,96.76306620464648 56.42377650398619,84.86920388664032 52.815812814536685,72.50000000000001 51.59755256533059,60.13079611335969 52.815812814536685,48.236933795353536 56.42377650398618,37.27548750470765 62.28279161246291,27.667699475121637 70.16769947512162,19.782791612462923 79.77548750470763,13.923776503986204 90.7369337953535,10.315812814536692 102.63079611335968,9.097552565330588 114.99999999999999,10.315812814536685 127.3692038866403,13.923776503986197 139.2630662046465,19.78279161246291 150.22451249529234,27.667699475121623 159.83230052487835,37.275487504707634 167.71720838753708,48.236933795353494 173.5762234960138,60.13079611335967 177.18418718546332,72.49999999999999 178.4024474346694))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2704, "question_en": "Take the collection made of a line from (55 75) to (125 150) and a point at (20 80), and make a covering shape like a circle, using 8 little segments for a quarter of the circle, then turn it into a text format."}
{"id": 513, "function": "ST_MinimumBoundingCircle", "question": "把那条连接着(55 75)和(125 150)的小线和在(20 80)的点放在一起后，找出一个能包住它们的最小圆，用8段线段来表示圆的四分之一，结果是什么呢？", "sql": "SELECT ST_AsText(ST_MinimumBoundingCircle( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)), 8 )) AS wktmbc;", "execution_result": [["POLYGON((72.5 178.4024474346694,84.86920388664029 177.18418718546332,96.76306620464646 173.57622349601382,107.72451249529237 167.71720838753708,117.33230052487836 159.83230052487838,125.21720838753708 150.22451249529237,131.07622349601382 139.26306620464646,134.68418718546332 127.3692038866403,135.9024474346694 115,134.68418718546332 102.63079611335971,131.07622349601382 90.73693379535354,125.21720838753708 79.77548750470766,117.33230052487838 70.16769947512164,107.72451249529237 62.282791612462916,96.76306620464648 56.42377650398619,84.86920388664032 52.815812814536685,72.50000000000001 51.59755256533059,60.13079611335969 52.815812814536685,48.236933795353536 56.42377650398618,37.27548750470765 62.28279161246291,27.667699475121637 70.16769947512162,19.782791612462923 79.77548750470763,13.923776503986204 90.7369337953535,10.315812814536692 102.63079611335968,9.097552565330588 114.99999999999999,10.315812814536685 127.3692038866403,13.923776503986197 139.2630662046465,19.78279161246291 150.22451249529234,27.667699475121623 159.83230052487835,37.275487504707634 167.71720838753708,48.236933795353494 173.5762234960138,60.13079611335967 177.18418718546332,72.49999999999999 178.4024474346694))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2703, "question_en": "After putting together the little line connecting (55 75) and (125 150) with the point at (20 80), find the smallest circle that can cover them, using 8 segments to show a quarter of the circle, what is the result?"}
{"id": 513, "function": "ST_MinimumBoundingCircle", "question": "能不能给我一个圆形的边缘，这个圆形要能包住那条从55 75到125 150的线和那个20 80的小点，用8条线段来大概表示这个圆的四分之一，然后告诉我这个圆的样子是什么？", "sql": "SELECT ST_AsText(ST_MinimumBoundingCircle( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)), 8 )) AS wktmbc;", "execution_result": [["POLYGON((72.5 178.4024474346694,84.86920388664029 177.18418718546332,96.76306620464646 173.57622349601382,107.72451249529237 167.71720838753708,117.33230052487836 159.83230052487838,125.21720838753708 150.22451249529237,131.07622349601382 139.26306620464646,134.68418718546332 127.3692038866403,135.9024474346694 115,134.68418718546332 102.63079611335971,131.07622349601382 90.73693379535354,125.21720838753708 79.77548750470766,117.33230052487838 70.16769947512164,107.72451249529237 62.282791612462916,96.76306620464648 56.42377650398619,84.86920388664032 52.815812814536685,72.50000000000001 51.59755256533059,60.13079611335969 52.815812814536685,48.236933795353536 56.42377650398618,37.27548750470765 62.28279161246291,27.667699475121637 70.16769947512162,19.782791612462923 79.77548750470763,13.923776503986204 90.7369337953535,10.315812814536692 102.63079611335968,9.097552565330588 114.99999999999999,10.315812814536685 127.3692038866403,13.923776503986197 139.2630662046465,19.78279161246291 150.22451249529234,27.667699475121623 159.83230052487835,37.275487504707634 167.71720838753708,48.236933795353494 173.5762234960138,60.13079611335967 177.18418718546332,72.49999999999999 178.4024474346694))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2705, "question_en": "Could you give me the edge of a circle that can cover the line from 55 75 to 125 150 and that little dot at 20 80, using 8 line segments to roughly show a quarter of the circle, and then tell me what this circle looks like?"}
{"id": 511, "function": "ST_LargestEmptyCircle", "question": "在那些小点和一个形状组成的集合里，用一个特别的边界去找最大的空圆，然后告诉我这个圆的大小、那个中心的地方，还有哪个边界是最近的。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( ST_Collect( 'MULTIPOINT ((70 50), (60 130), (130 150), (80 90))'::geometry, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry), 0, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry );", "execution_result": [[19.903875992225455, "010100000055555555554F5840ABAAAAAAAAFC5840", "010100000000000000000054400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2698, "question_en": "In a collection made of those little dots and a shape, use a special boundary to find the largest empty circle, then let me know the size of this circle, the place of that center, and which boundary is the nearest."}
{"id": 513, "function": "ST_MinimumBoundingCircle", "question": "把那些从(55 75)到(125 150)连成的线和在(20, 80)的小点放在一起，找出一个能把它们都圈住的最小圆，然后用那种格式输出，记得用8个小段来画四分之一的圆。", "sql": "SELECT ST_AsText(ST_MinimumBoundingCircle( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)), 8 )) AS wktmbc;", "execution_result": [["POLYGON((72.5 178.4024474346694,84.86920388664029 177.18418718546332,96.76306620464646 173.57622349601382,107.72451249529237 167.71720838753708,117.33230052487836 159.83230052487838,125.21720838753708 150.22451249529237,131.07622349601382 139.26306620464646,134.68418718546332 127.3692038866403,135.9024474346694 115,134.68418718546332 102.63079611335971,131.07622349601382 90.73693379535354,125.21720838753708 79.77548750470766,117.33230052487838 70.16769947512164,107.72451249529237 62.282791612462916,96.76306620464648 56.42377650398619,84.86920388664032 52.815812814536685,72.50000000000001 51.59755256533059,60.13079611335969 52.815812814536685,48.236933795353536 56.42377650398618,37.27548750470765 62.28279161246291,27.667699475121637 70.16769947512162,19.782791612462923 79.77548750470763,13.923776503986204 90.7369337953535,10.315812814536692 102.63079611335968,9.097552565330588 114.99999999999999,10.315812814536685 127.3692038866403,13.923776503986197 139.2630662046465,19.78279161246291 150.22451249529234,27.667699475121623 159.83230052487835,37.275487504707634 167.71720838753708,48.236933795353494 173.5762234960138,60.13079611335967 177.18418718546332,72.49999999999999 178.4024474346694))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2700, "question_en": "Put together the line connecting from (55 75) to (125 150) and the little dot at (20, 80), find the smallest circle that can enclose them all, and output it in that format, remembering to use 8 small segments to draw a quarter of a circle."}
{"id": 511, "function": "ST_LargestEmptyCircle", "question": "在由一些小点和一个多边形组成的图形里，用那个多边形当作边界，找出最大空圆的半径是多少，圆心在哪里，还有哪个点是离边界最近的。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( ST_Collect( 'MULTIPOINT ((70 50), (60 130), (130 150), (80 90))'::geometry, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry), 0, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry );", "execution_result": [[19.903875992225455, "010100000055555555554F5840ABAAAAAAAAFC5840", "010100000000000000000054400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2699, "question_en": "Within a shape made of some little dots and a polygon, using that polygon as the boundary, find out how big the largest empty circle is, where its center is, and which point is closest to the boundary."}
{"id": 514, "function": "ST_MinimumBoundingRadius", "question": "对于由这些点组成的封闭形状：26426 65078、26531 65242、26075 65136、26096 65427，还有第一个点再次出现，找出能把它们圈起来的最小圆的中心在哪里，以及这个圆有多大。", "sql": "SELECT ST_AsText(center), radius FROM ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))');", "execution_result": [["POINT(26284.84180271327 65267.114509082545)", 247.43604559140658]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2706, "question_en": "For the closed shape made by these points: 26426 65078, 26531 65242, 26075 65136, 26096 65427, and the first point appearing again, find out where the center of the smallest circle that can encircle them is, and how big this circle is."}
{"id": 511, "function": "ST_LargestEmptyCircle", "question": "在包含点(70 50)、(60 130)、(130 150)、(80 90)以及一个边界是(90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190)的多边形的区域里，找一个最大的空圆，并告诉我这个圆的半径、圆心在哪里，还有它最近碰到的边界在哪里。", "sql": "SELECT radius, center, nearest FROM ST_LargestEmptyCircle( ST_Collect( 'MULTIPOINT ((70 50), (60 130), (130 150), (80 90))'::geometry, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry), 0, 'POLYGON ((90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190))'::geometry );", "execution_result": [[19.903875992225455, "010100000055555555554F5840ABAAAAAAAAFC5840", "010100000000000000000054400000000000805640"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2696, "question_en": "Within an area that includes points (70 50), (60 130), (130 150), (80 90) and a polygon with boundaries (90 190, 10 100, 60 10, 190 40, 120 100, 190 180, 90 190), find the largest empty circle and let me know its radius, where its center is, and which boundary it touches closest."}
{"id": 514, "function": "ST_MinimumBoundingRadius", "question": "对于那些坐标点组成的形状，找个最小圆圈，告诉我它的圆心在哪里和它的圆有多大。", "sql": "SELECT ST_AsText(center), radius FROM ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))');", "execution_result": [["POINT(26284.84180271327 65267.114509082545)", 247.43604559140658]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2709, "question_en": "For the shape made by those coordinate points, find the smallest circle, tell me where its center is and how big the circle is."}
{"id": 514, "function": "ST_MinimumBoundingRadius", "question": "找一下围住这些点(26426 65078)、(26531 65242)、(26075 65136)、(26096 65427)的最小圆的中心位置和半径是多少，用那种文本方式表达。", "sql": "SELECT ST_AsText(center), radius FROM ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))');", "execution_result": [["POINT(26284.84180271327 65267.114509082545)", 247.43604559140658]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2711, "question_en": "Find the center location and radius of the smallest circle that encloses these points (26426 65078), (26531 65242), (26075 65136), (26096 65427), and express it in that text way."}
{"id": 514, "function": "ST_MinimumBoundingRadius", "question": "怎么能找到由那些点组成的形状的最小圆圈的中心位置和圆圈的大小？点是26426 65078、26531 65242、26075 65136、26096 65427、还有26426 65078。", "sql": "SELECT ST_AsText(center), radius FROM ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))');", "execution_result": [["POINT(26284.84180271327 65267.114509082545)", 247.43604559140658]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2708, "question_en": "How can you find the center location and size of the smallest circle that covers the shape made by those points? The points are 26426 65078, 26531 65242, 26075 65136, 26096 65427, and 26426 65078."}
{"id": 514, "function": "ST_MinimumBoundingRadius", "question": "给一个形状，它是由坐标点26426 65078、26531 65242、26075 65136、26096 65427和26426 65078连接起来的，你能说说把它围起来的最小圆的中心在哪里，还有那个圆的大小吗？", "sql": "SELECT ST_AsText(center), radius FROM ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))');", "execution_result": [["POINT(26284.84180271327 65267.114509082545)", 247.43604559140658]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2707, "question_en": "There's a shape formed by connecting points 26426 65078, 26531 65242, 26075 65136, 26096 65427, and 26426 65078. Can you tell where the center of the smallest circle that surrounds it is, and how big that circle is?"}
{"id": 514, "function": "ST_MinimumBoundingRadius", "question": "给一个形状，它是由这些点连接起来的：26426 65078, 26531 65242, 26075 65136, 26096 65427, 26426 65078。找出能够完全包住这个形状的圆，并以文字形式告诉我圆心在哪里，还要告诉我圆有多大。", "sql": "SELECT ST_AsText(center), radius FROM ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))');", "execution_result": [["POINT(26284.84180271327 65267.114509082545)", 247.43604559140658]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2710, "question_en": "There's a shape made by connecting these points: 26426 65078, 26531 65242, 26075 65136, 26096 65427, 26426 65078. Discover the circle that can completely cover this shape, and tell me where the center of the circle is in text form, also let me know how big the circle is."}
{"id": 516, "function": "ST_OrientedEnvelope", "question": "把由小点(0 0)、(-1 -1)和(3 2)组成的形状变成一个面积最小的包围它们的四边形，然后以某种文字格式展示这个四边形。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 2))'));", "execution_result": [["POLYGON((3 2,-1 -1,-1.12 -0.84,2.88 2.16,3 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2720, "question_en": "Transform the shape made of little dots (0 0), (-1 -1), and (3 2) into a rectangle that snugly fits around them with the smallest area, and show this rectangle in some text format."}
{"id": 515, "function": "ST_OrientedEnvelope", "question": "看看由那些坐标线55 75到125 150和一个点在20 80组成的形状，找出一个最小面积的长方形来包住它们，并用一种特殊格式输出。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 80,125 150,138.0769230769241 130.38461538461573,33.07692307692291 60.384615384615195,20 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2712, "question_en": "Look at the shape formed by those coordinates from 55 75 to 125 150 and a point at 20 80, find the smallest area rectangle that can cover them, and output it in a special format."}
{"id": 515, "function": "ST_OrientedEnvelope", "question": "把那条线LINESTRING(55 75,125 150)和那个点POINT(20 80)放在一起，看看它们合起来后能套住它们的最小倾斜矩形的样子，用文字描述出来。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 80,125 150,138.0769230769241 130.38461538461573,33.07692307692291 60.384615384615195,20 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2715, "question_en": "Combine that line LINESTRING(55 75,125 150) and the point POINT(20 80), and see what the smallest tilted rectangle that can enclose them looks like, described in text."}
{"id": 515, "function": "ST_OrientedEnvelope", "question": "对于包含那些像线条(55 75,125 150)和一个小点(20, 80)的几何集合，找出一个最小面积的包围形状，然后以某种文本格式展示结果。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 80,125 150,138.0769230769241 130.38461538461573,33.07692307692291 60.384615384615195,20 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2714, "question_en": "For a geometry collection with those like a line (55 75,125 150) and a small dot (20, 80), find a shape that covers them with the smallest area, then show the result in some text format."}
{"id": 515, "function": "ST_OrientedEnvelope", "question": "把那条从(55, 75)到(125, 150)的线，还有(20, 80)这个点，合起来看看它们能被包在什么样的最小矩形里，然后用一种文字方式表示出来。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 80,125 150,138.0769230769241 130.38461538461573,33.07692307692291 60.384615384615195,20 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2713, "question_en": "Take that line from (55, 75) to (125, 150), and the point at (20, 80), combine them to see what kind of smallest rectangle can enclose them, then express it in a text format."}
{"id": 516, "function": "ST_OrientedEnvelope", "question": "你能告诉我包含(0 0)、(-1 -1)和(3 2)这些点的那个集合，它们的最小容纳长方形的样子吗？", "sql": "SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 2))'));", "execution_result": [["POLYGON((3 2,-1 -1,-1.12 -0.84,2.88 2.16,3 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2719, "question_en": "Can you tell me what the smallest rectangle that fits around the collection of points (0 0), (-1 -1), and (3 2) looks like?"}
{"id": 515, "function": "ST_OrientedEnvelope", "question": "把那条从(55 75)到(125 150)的线和小点(20 80)放在一起，看看能画出怎样的最小矩形，然后以文字形式告诉我。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 80,125 150,138.0769230769241 130.38461538461573,33.07692307692291 60.384615384615195,20 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2716, "question_en": "Put the line from (55 75) to (125 150) together with the little dot (20 80) and see what the smallest rectangle you can draw around them looks like, then tell me in words."}
{"id": 516, "function": "ST_OrientedEnvelope", "question": "找出由这些坐标点(0 0)、(-1 -1)、(3 2)所围成的最小面积的长方形，并用某种文本格式表达。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 2))'));", "execution_result": [["POLYGON((3 2,-1 -1,-1.12 -0.84,2.88 2.16,3 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2718, "question_en": "Find the smallest rectangle that covers these coordinate points (0 0), (-1 -1), (3 2) and express it in some text format."}
{"id": 516, "function": "ST_OrientedEnvelope", "question": "假设有三个点，分别是(0 0)、(-1 -1)和(3 2)，能不能找到一个最小的长方形把它们包起来，并用某种文本形式表示出来？", "sql": "SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 2))'));", "execution_result": [["POLYGON((3 2,-1 -1,-1.12 -0.84,2.88 2.16,3 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2722, "question_en": "Imagine there are three points, (0 0), (-1 -1), and (3 2). Can you find the smallest rectangle to enclose them and represent it in some kind of text format?"}
{"id": 516, "function": "ST_OrientedEnvelope", "question": "给出一个能刚好盖住小点集合(0 0), (-1 -1), (3 2)的最小斜方形的描述是什么？", "sql": "SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 2))'));", "execution_result": [["POLYGON((3 2,-1 -1,-1.12 -0.84,2.88 2.16,3 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2721, "question_en": "What is the description of the smallest tilted rectangle that can just cover the collection of little dots (0 0), (-1 -1), (3 2)?"}
{"id": 515, "function": "ST_OrientedEnvelope", "question": "怎么用字符串来描述LINESTRING(55 75,125 150)和点(20, 80)合起来的那个最小包围框？", "sql": "SELECT ST_AsText(ST_OrientedEnvelope( ST_Collect( ST_GeomFromText('LINESTRING(55 75,125 150)'), ST_Point(20, 80)) )) AS wktenv;", "execution_result": [["POLYGON((20 80,125 150,138.0769230769241 130.38461538461573,33.07692307692291 60.384615384615195,20 80))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2717, "question_en": "How can you describe with a string the smallest box that wraps around the combo of LINESTRING(55 75,125 150) and the point (20, 80)?"}
{"id": 516, "function": "ST_OrientedEnvelope", "question": "找出包含那些点(0 0), (-1 -1), (3 2)最小的旋转长方形的文本表示。", "sql": "SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 2))'));", "execution_result": [["POLYGON((3 2,-1 -1,-1.12 -0.84,2.88 2.16,3 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2723, "question_en": "Find the text representation for the smallest rotated rectangle covering those points (0 0), (-1 -1), (3 2)."}
{"id": 518, "function": "ST_OffsetCurve", "question": "有一串小点连成的线，像164 16到195这样的，需要做一些调整。先往外推15个单位，然后往内缩先是30，再15。过程中用一些圆滑的分段方式，最后看看两次操作后的合并效果，以某种文字格式展现。", "sql": "SELECT ST_AsText(ST_Collect(\n    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=round'),\n    ST_OffsetCurve(ST_OffsetCurve(geom,\n    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')\n    )\n) As parallel_curves\n    FROM ST_GeomFromText(\n'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n    44 16,24 16,20 16,18 16,17 17,\n    16 18,16 20,16 40,16 60,16 80,16 100,\n    16 120,16 140,16 160,16 180,16 195)') As geom;", "execution_result": [["MULTILINESTRING((164 1,18 1,15.073645169758077 1.288220793951544,12.259748514523654 2.141807012330698,9.66644650470597 3.527955815461818,7.393398282201788 5.393398282201788,5.393398282201788 7.393398282201788,3.527955815461818 9.66644650470597,2.141807012330696 12.259748514523654,1.288220793951544 15.073645169758075,1 18,1 195),(164 61,61 61,61 195))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2726, "question_en": "There's a line formed by little dots, like from 164 16 to 195, that needs some adjustments. First, push it out by 15 units, then pull it in by 30 and then 15 units. Use some smooth segmentation method, and finally, check the combined result of both operations in some text format."}
{"id": 518, "function": "ST_OffsetCurve", "question": "想象一条从(164 16)到(195)的线，用一些方法让它先往外扩15个单位，再让它往内缩30个单位然后15个单位，最后把这些变化结合起来，给我一个文本形式的结果。", "sql": "SELECT ST_AsText(ST_Collect(\n    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=round'),\n    ST_OffsetCurve(ST_OffsetCurve(geom,\n    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')\n    )\n) As parallel_curves\n    FROM ST_GeomFromText(\n'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n    44 16,24 16,20 16,18 16,17 17,\n    16 18,16 20,16 40,16 60,16 80,16 100,\n    16 120,16 140,16 160,16 180,16 195)') As geom;", "execution_result": [["MULTILINESTRING((164 1,18 1,15.073645169758077 1.288220793951544,12.259748514523654 2.141807012330698,9.66644650470597 3.527955815461818,7.393398282201788 5.393398282201788,5.393398282201788 7.393398282201788,3.527955815461818 9.66644650470597,2.141807012330696 12.259748514523654,1.288220793951544 15.073645169758075,1 18,1 195),(164 61,61 61,61 195))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2725, "question_en": "Imagine a line from (164 16) to (195), use some ways to first extend it outward by 15 units, then shrink it inward by 30 units and then by 15 units, and finally combine these changes to give me a text form result."}
{"id": 518, "function": "ST_OffsetCurve", "question": "对于那条从(164 16)到(195)的线，你能先在右边挪15个单位，再在左边先挪-30再挪-15，然后把这些挪动后的线放在一起，最后用一种特别的格式表达出来吗？", "sql": "SELECT ST_AsText(ST_Collect(\n    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=round'),\n    ST_OffsetCurve(ST_OffsetCurve(geom,\n    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')\n    )\n) As parallel_curves\n    FROM ST_GeomFromText(\n'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n    44 16,24 16,20 16,18 16,17 17,\n    16 18,16 20,16 40,16 60,16 80,16 100,\n    16 120,16 140,16 160,16 180,16 195)') As geom;", "execution_result": [["MULTILINESTRING((164 1,18 1,15.073645169758077 1.288220793951544,12.259748514523654 2.141807012330698,9.66644650470597 3.527955815461818,7.393398282201788 5.393398282201788,5.393398282201788 7.393398282201788,3.527955815461818 9.66644650470597,2.141807012330696 12.259748514523654,1.288220793951544 15.073645169758075,1 18,1 195),(164 61,61 61,61 195))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2724, "question_en": "For that line from (164 16) to (195), can you first move it 15 units to the right, then on the left move it -30 and then -15, and finally put these moved lines together and express it in a special format?"}
{"id": 524, "function": "ST_PointOnSurface", "question": "找出那个点在坐标(0 5)表面上的具体位置，然后用一种特别的文字格式来描述它。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2735, "question_en": "Find the specific location of that point on the surface at coordinates (0 5), then describe it using a special text format."}
{"id": 524, "function": "ST_PointOnSurface", "question": "给我看看那些在0和5之间的小点的中心点是怎样的，用简单的文字描述一下。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2733, "question_en": "Show me how the center point of those little dots between 0 and 5 looks, using simple words."}
{"id": 518, "function": "ST_OffsetCurve", "question": "有一串小点从164 16到195，想知道它变成一个集合后是什么样子。先让这串点往外扩15个单位，再让它往内缩30个单位，然后再缩15个单位，最后把这些变化合在一起。能描述一下这个组合的样子吗？", "sql": "SELECT ST_AsText(ST_Collect(\n    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=round'),\n    ST_OffsetCurve(ST_OffsetCurve(geom,\n    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')\n    )\n) As parallel_curves\n    FROM ST_GeomFromText(\n'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n    44 16,24 16,20 16,18 16,17 17,\n    16 18,16 20,16 40,16 60,16 80,16 100,\n    16 120,16 140,16 160,16 180,16 195)') As geom;", "execution_result": [["MULTILINESTRING((164 1,18 1,15.073645169758077 1.288220793951544,12.259748514523654 2.141807012330698,9.66644650470597 3.527955815461818,7.393398282201788 5.393398282201788,5.393398282201788 7.393398282201788,3.527955815461818 9.66644650470597,2.141807012330696 12.259748514523654,1.288220793951544 15.073645169758075,1 18,1 195),(164 61,61 61,61 195))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2727, "question_en": "There's a series of little dots from 164 16 to 195, and I'm curious about its look after becoming a collection. First, it stretches out 15 units, then it shrinks in 30 units, and then shrinks another 15 units. Finally, combine these changes together. Can you describe what this combination looks like?"}
{"id": 524, "function": "ST_PointOnSurface", "question": "把那个坐标点0和5变成一个在表面上的点，然后告诉我它的文字样子是什么。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2734, "question_en": "Turn that coordinate point 0 and 5 into a point on the surface, then tell me what its text form looks like."}
{"id": 518, "function": "ST_OffsetCurve", "question": "对一条从164 16到195的多个小点连成的线，先挪15个单位，然后再试着先挪-30再挪-15个单位，两种挪动都用某种圆滑的方式，看看它们最终以某种文本格式的样子是什么。", "sql": "SELECT ST_AsText(ST_Collect(\n    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=round'),\n    ST_OffsetCurve(ST_OffsetCurve(geom,\n    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')\n    )\n) As parallel_curves\n    FROM ST_GeomFromText(\n'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n    44 16,24 16,20 16,18 16,17 17,\n    16 18,16 20,16 40,16 60,16 80,16 100,\n    16 120,16 140,16 160,16 180,16 195)') As geom;", "execution_result": [["MULTILINESTRING((164 1,18 1,15.073645169758077 1.288220793951544,12.259748514523654 2.141807012330698,9.66644650470597 3.527955815461818,7.393398282201788 5.393398282201788,5.393398282201788 7.393398282201788,3.527955815461818 9.66644650470597,2.141807012330696 12.259748514523654,1.288220793951544 15.073645169758075,1 18,1 195),(164 61,61 61,61 195))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2728, "question_en": "For a line formed by several little dots from 164 16 to 195, first move it by 15 units, then try moving it by -30 and then -15 units. Both movements use some kind of smooth method. See what they look like in some kind of text format at the end."}
{"id": 525, "function": "ST_PointOnSurface", "question": "在那条三维的曲线中找一个特别的点，看看它的坐标在扩展格式下会是什么样子。", "sql": "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 1, 0 10 2)')));", "execution_result": [["POINT(0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2741, "question_en": "Find a special point on that 3D curve and see what its coordinates look like in extended format."}
{"id": 525, "function": "ST_PointOnSurface", "question": "给出那条三维折线LINESTRING(0 5 1, 0 0 1, 0 10 2)中某个特别点的EWKT格式，看它在表面上的位置。", "sql": "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 1, 0 10 2)')));", "execution_result": [["POINT(0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2739, "question_en": "Provide the EWKT format of a special point on the surface of that 3D linestring LINESTRING(0 5 1, 0 0 1, 0 10 2)."}
{"id": 524, "function": "ST_PointOnSurface", "question": "给那个在0和5之间的小点，找出它自己的一个点，然后用某种格式来描述它。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2730, "question_en": "For that little dot between 0 and 5, find a point of itself and describe it in some format."}
{"id": 524, "function": "ST_PointOnSurface", "question": "把那个在0和5位置的小点拿来，找出它的表面点，然后告诉我结果是什么。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2731, "question_en": "Take that little dot at position 0 and 5, find out its surface point, and then tell me what the result is."}
{"id": 525, "function": "ST_PointOnSurface", "question": "想象一条经过三个点(0 5 1)、(0 0 1)和(0 10 2)的线，找出它某个位置的特别点，然后用一种特殊的格式来表示。", "sql": "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 1, 0 10 2)')));", "execution_result": [["POINT(0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2737, "question_en": "Imagine a line passing through three points (0 5 1), (0 0 1), and (0 10 2), find a special point on it and express it in a special format."}
{"id": 525, "function": "ST_PointOnSurface", "question": "给那条经过(0 5 1), (0 0 1), (0 10 2)的小线，找个在上面的点，然后用某种特殊格式告诉我。", "sql": "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 1, 0 10 2)')));", "execution_result": [["POINT(0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2736, "question_en": "For that little line going through (0 5 1), (0 0 1), (0 10 2), find a point on it and tell me in some special format."}
{"id": 525, "function": "ST_PointOnSurface", "question": "把那条在空间中有些上下起伏的线段用几何的眼光看，然后找找它表面上的一个有代表性的小点，最后用一种特别的格式把这个点的坐标写出来。", "sql": "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 1, 0 10 2)')));", "execution_result": [["POINT(0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2738, "question_en": "Look at that wavy line in space with a geometric perspective, then find a representative little point on its surface, and finally write down the coordinates of this point in a special format."}
{"id": 525, "function": "ST_PointOnSurface", "question": "把包含那些三维坐标(0 5 1)、(0 0 1)、(0 10 2)的线变成一个几何形状，找出它表面上的某个点，然后用EWKT格式告诉我。", "sql": "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 1, 0 10 2)')));", "execution_result": [["POINT(0 0 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2740, "question_en": "Take the line with those 3D coordinates (0 5 1), (0 0 1), (0 10 2), turn it into a geometric shape, find a point on its surface, and then tell me in EWKT format."}
{"id": 518, "function": "ST_OffsetCurve", "question": "有个线啊，像是从164 16开始，然后一路到195。先给它来个15单位的偏移，记得用圆滑的连接方式。接着，不是先30单位再15单位的偏移吗？最后把这两种偏移结果放在一起，看看它们变成什么样子。", "sql": "SELECT ST_AsText(ST_Collect(\n    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=round'),\n    ST_OffsetCurve(ST_OffsetCurve(geom,\n    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')\n    )\n) As parallel_curves\n    FROM ST_GeomFromText(\n'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n    44 16,24 16,20 16,18 16,17 17,\n    16 18,16 20,16 40,16 60,16 80,16 100,\n    16 120,16 140,16 160,16 180,16 195)') As geom;", "execution_result": [["MULTILINESTRING((164 1,18 1,15.073645169758077 1.288220793951544,12.259748514523654 2.141807012330698,9.66644650470597 3.527955815461818,7.393398282201788 5.393398282201788,5.393398282201788 7.393398282201788,3.527955815461818 9.66644650470597,2.141807012330696 12.259748514523654,1.288220793951544 15.073645169758075,1 18,1 195),(164 61,61 61,61 195))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2729, "question_en": "There's a line, starting at 164 16 and going all the way to 195. First, give it a 15-unit shift, using a smooth round join. Then, you do a -30-unit shift followed by a -15-unit shift, right? Finally, put these two shifted results together and see what they become."}
{"id": 526, "function": "ST_PointOnSurface", "question": "想象一下由这些点组成的形状：130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120，找出一个在这个形状内部的随意点和一个好像是中心的点，然后用某种文本格式描述它们。", "sql": "SELECT ST_AsText(ST_PointOnSurface(geom)) AS pt_on_surf, ST_AsText(ST_Centroid(geom)) AS centroid FROM (SELECT 'POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120))'::geometry AS geom) AS t;", "execution_result": [["POINT(62.5 110)", "POINT(100.18264840182648 85.11415525114155)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2742, "question_en": "Imagine a shape formed by these points: 130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120. Find a random point inside this shape and another point that seems like the center, then describe them using some text format."}
{"id": 526, "function": "ST_PointOnSurface", "question": "对于那个由点串(130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120)围成的形状，能不能把它的某个表面小点和中心点变成文本样子？", "sql": "SELECT ST_AsText(ST_PointOnSurface(geom)) AS pt_on_surf, ST_AsText(ST_Centroid(geom)) AS centroid FROM (SELECT 'POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120))'::geometry AS geom) AS t;", "execution_result": [["POINT(62.5 110)", "POINT(100.18264840182648 85.11415525114155)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2746, "question_en": "For that shape made by the string of points (130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120), can you turn one of its surface little dots and its center point into text form?"}
{"id": 526, "function": "ST_PointOnSurface", "question": "给出一个形状，它包含这些坐标：130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120。需要找出这个形状的某个中心点和一个特别的表面点，并用特殊的字符串方式表达出来。", "sql": "SELECT ST_AsText(ST_PointOnSurface(geom)) AS pt_on_surf, ST_AsText(ST_Centroid(geom)) AS centroid FROM (SELECT 'POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120))'::geometry AS geom) AS t;", "execution_result": [["POINT(62.5 110)", "POINT(100.18264840182648 85.11415525114155)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2745, "question_en": "There's a shape that covers these coordinates: 130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120. Find a certain center point and a special surface point for this shape, and express them using a special string format."}
{"id": 527, "function": "ST_PointOnSurface", "question": "在由点(0 5)和(0 10)连起来的那条线段上，找一个肯定会落在这条线上的点，并把它写成一种文字描述的形式。", "sql": "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2748, "question_en": "On the line segment connecting points (0 5) and (0 10), find a point that is guaranteed to be on the line, and write it in some kind of textual description format."}
{"id": 526, "function": "ST_PointOnSurface", "question": "在由这些坐标（130,120）、(120,190)、(30,140)、(50,20)、(190,20)、(170,100)、(90,60)、(90,130)、(130,120)构成的复杂形状中，找一个代表性的点在里面，再找一个形状的中心点，然后以某种格式给出它们。", "sql": "SELECT ST_AsText(ST_PointOnSurface(geom)) AS pt_on_surf, ST_AsText(ST_Centroid(geom)) AS centroid FROM (SELECT 'POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120))'::geometry AS geom) AS t;", "execution_result": [["POINT(62.5 110)", "POINT(100.18264840182648 85.11415525114155)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2744, "question_en": "In the complex shape made by these coordinates (130,120), (120,190), (30,140), (50,20), (190,20), (170,100), (90,60), (90,130), (130,120), find a representative point inside, then find a center point of the shape, and give them in some format."}
{"id": 526, "function": "ST_PointOnSurface", "question": "有个由这些坐标串起来的形状：130 120→120 190→30 140→50 20→190 20→170 100→90 60→90 130→130 120，能不能找到这个形状的那个在表面上的点和它的中心点，用那种文本方式表现出来？", "sql": "SELECT ST_AsText(ST_PointOnSurface(geom)) AS pt_on_surf, ST_AsText(ST_Centroid(geom)) AS centroid FROM (SELECT 'POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120))'::geometry AS geom) AS t;", "execution_result": [["POINT(62.5 110)", "POINT(100.18264840182648 85.11415525114155)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2743, "question_en": "There's a shape connected by these coordinates: 130 120→120 190→30 140→50 20→190 20→170 100→90 60→90 130→130 120. Can you find the point on its surface and its center point, and show them in that text format?"}
{"id": 527, "function": "ST_PointOnSurface", "question": "找出LINESTRING(0 5, 0 10)这条线上的一个点，用一种特别的字母组合来表示它。", "sql": "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2751, "question_en": "Find a point on the LINESTRING(0 5, 0 10) and represent it with a special combination of letters."}
{"id": 527, "function": "ST_PointOnSurface", "question": "找出在LINESTRING(0 5, 0 10)这段线上某个特别的点，然后把它用一种特定格式表示出来。", "sql": "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2753, "question_en": "Find a special point on the LINESTRING(0 5, 0 10), and then express it in a specific format."}
{"id": 527, "function": "ST_PointOnSurface", "question": "把那条从(0, 5)到(0, 10)的小线段上的某个点变成一种文字形式。", "sql": "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2752, "question_en": "Turn a point from that little line from (0, 5) to (0, 10) into some kind of text form."}
{"id": 527, "function": "ST_PointOnSurface", "question": "把从(0 5)到(0 10)这条线上的某个点变成WKT的文字形式，确保这个点确实是在那条线段上。", "sql": "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2750, "question_en": "Turn a point from the line between (0 5) and (0 10) into WKT text form, making sure this point is indeed on that line segment."}
{"id": 528, "function": "ST_PointOnSurface", "question": "对于用这些点(0 0)、(0 5)、(5 5)、(5 0)围成的图形，找找里面的某个点，然后以某种格式展示出来。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::geometry));", "execution_result": [["POINT(2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2754, "question_en": "For the shape made by these points (0 0), (0 5), (5 5), (5 0), find a point inside and show it in some format."}
{"id": 524, "function": "ST_PointOnSurface", "question": "看看那个在0和5位置的小点，想象一下它的样子，然后用一种文本方式描述出来。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2732, "question_en": "Look at that little dot at position 0 and 5, imagine what it looks like, and then describe it in a text form."}
{"id": 527, "function": "ST_PointOnSurface", "question": "对于从(0 5)到(0 10)的那条直线，找出它表面上的一个点，并用一种文本格式来表示这个点。", "sql": "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));", "execution_result": [["POINT(0 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2749, "question_en": "For that line stretching from (0 5) to (0 10), find a point on its surface and express this point in some text format."}
{"id": 526, "function": "ST_PointOnSurface", "question": "找出和展示一个在那片由这些点(130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120)围成的形状上的任意位置，以及那个形状的“重心”在哪里。", "sql": "SELECT ST_AsText(ST_PointOnSurface(geom)) AS pt_on_surf, ST_AsText(ST_Centroid(geom)) AS centroid FROM (SELECT 'POLYGON ((130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120))'::geometry AS geom) AS t;", "execution_result": [["POINT(62.5 110)", "POINT(100.18264840182648 85.11415525114155)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2747, "question_en": "Find and show a random spot on that shape made by these points (130 120, 120 190, 30 140, 50 20, 190 20, 170 100, 90 60, 90 130, 130 120) and where the 'center of mass' of that shape is."}
{"id": 528, "function": "ST_PointOnSurface", "question": "把四个点连起来的那个形状，像是POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))，找出在这个形状里面的一个点，结果用一种描述坐标的方式给出来。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::geometry));", "execution_result": [["POINT(2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2755, "question_en": "Take the shape made by connecting four points, like POLYGON((0 0, 0 5, 5 5, 5 0, 0 0)), and find a point inside this shape, giving the result in a way that describes coordinates."}
{"id": 528, "function": "ST_PointOnSurface", "question": "给定一个由(0 0)、(0 5)、(5 5)、(5 0)这些坐标构成的矩形，找出它里面某个地方的点，并告诉我那个点的样子。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::geometry));", "execution_result": [["POINT(2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2756, "question_en": "Given a rectangle made from the coordinates (0 0), (0 5), (5 5), (5 0), find a point somewhere inside it and tell me what that point looks like."}
{"id": 528, "function": "ST_PointOnSurface", "question": "你能找到一个在那个围起来的区域里面的小点，并告诉我它的WKT是什么吗？那个区域是由这些坐标围成的：0 0, 0 5, 5 5, 5 0, 0 0。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::geometry));", "execution_result": [["POINT(2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2757, "question_en": "Can you find a little dot inside that enclosed area and tell me its WKT? The area is enclosed by these coordinates: 0 0, 0 5, 5 5, 5 0, 0 0."}
{"id": 529, "function": "ST_Polygonize", "question": "要处理一下这些坐标点和线段：180 40, 30 20, 20 90等等，看能不能把它们变成一个整体的形状，然后把这个结果用一种特定格式显示出来。", "sql": "WITH data(geom) AS (VALUES\n   ('LINESTRING (180 40, 30 20, 20 90)'::geometry)\n  ,('LINESTRING (180 40, 160 160)'::geometry)\n  ,('LINESTRING (80 60, 120 130, 150 80)'::geometry)\n  ,('LINESTRING (80 60, 150 80)'::geometry)\n  ,('LINESTRING (20 90, 70 70, 80 130)'::geometry)\n  ,('LINESTRING (80 130, 160 160)'::geometry)\n  ,('LINESTRING (20 90, 20 160, 70 190)'::geometry)\n  ,('LINESTRING (70 190, 80 130)'::geometry)\n  ,('LINESTRING (70 190, 160 165)'::geometry)\n)\nSELECT ST_AsText( ST_Polygonize( geom ))\n    FROM data;\n", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((180 40,30 20,20 90,70 70,80 130,160 160,180 40),(150 80,120 130,80 60,150 80)),POLYGON((80 60,120 130,150 80,80 60)),POLYGON((80 130,70 70,20 90,20 160,70 190,80 130)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2762, "question_en": "Take a look at these coordinates and lines: 180 40, 30 20, 20 90, etc., and see if they can be turned into a unified shape, then display the result in a specific format."}
{"id": 529, "function": "ST_Polygonize", "question": "把这些坐标串起来的线段，像180 40到30 20再到20 90这样的，弄成一个整体的形状，你能给我那个形状的文本描述吗？", "sql": "WITH data(geom) AS (VALUES\n   ('LINESTRING (180 40, 30 20, 20 90)'::geometry)\n  ,('LINESTRING (180 40, 160 160)'::geometry)\n  ,('LINESTRING (80 60, 120 130, 150 80)'::geometry)\n  ,('LINESTRING (80 60, 150 80)'::geometry)\n  ,('LINESTRING (20 90, 70 70, 80 130)'::geometry)\n  ,('LINESTRING (80 130, 160 160)'::geometry)\n  ,('LINESTRING (20 90, 20 160, 70 190)'::geometry)\n  ,('LINESTRING (70 190, 80 130)'::geometry)\n  ,('LINESTRING (70 190, 160 175)'::geometry)\n)\nSELECT ST_AsText( ST_Polygonize( geom ))\n    FROM data;\n", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((180 40,30 20,20 90,70 70,80 130,160 160,180 40),(150 80,120 130,80 60,150 80)),POLYGON((80 60,120 130,150 80,80 60)),POLYGON((80 130,70 70,20 90,20 160,70 190,80 130)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2763, "question_en": "Can you give me the text description of the overall shape formed by connecting these line segments, like from 180 40 to 30 20 and then to 20 90?"}
{"id": 532, "function": "ST_ReducePrecision", "question": "给那些小点连成的线，像10 10, 19.6 30.1, 20 30这样的，弄得简单点，只保留一位小数，然后看看它们的样子。", "sql": "SELECT ST_AsText(ST_ReducePrecision('LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)', 1));", "execution_result": [["LINESTRING(10 10,20 30,40 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2766, "question_en": "For those little dots connected into a line, like 10 10, 19.6 30.1, 20 30, make it simpler by keeping only one decimal, and then see how they look."}
{"id": 529, "function": "ST_Polygonize", "question": "看看那些坐标点，像是180 40, 30 20, 20 90，还有其他几个，能变成什么样的多边形？", "sql": "WITH data(geom) AS (VALUES\n   ('LINESTRING (180 40, 30 20, 20 90)'::geometry)\n  ,('LINESTRING (180 40, 160 160)'::geometry)\n  ,('LINESTRING (80 60, 120 130, 150 80)'::geometry)\n  ,('LINESTRING (80 60, 150 80)'::geometry)\n  ,('LINESTRING (20 90, 70 70, 80 130)'::geometry)\n  ,('LINESTRING (80 130, 160 160)'::geometry)\n  ,('LINESTRING (20 90, 20 160, 70 190)'::geometry)\n  ,('LINESTRING (70 190, 80 130)'::geometry)\n  ,('LINESTRING (70 190, 160 177)'::geometry)\n)\nSELECT ST_AsText( ST_Polygonize( geom ))\n    FROM data;\n", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((180 40,30 20,20 90,70 70,80 130,160 160,180 40),(150 80,120 130,80 60,150 80)),POLYGON((80 60,120 130,150 80,80 60)),POLYGON((80 130,70 70,20 90,20 160,70 190,80 130)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2765, "question_en": "Take a look at those coordinates, like 180 40, 30 20, 20 90, and a few others, and see what kind of polygon they can form?"}
{"id": 528, "function": "ST_PointOnSurface", "question": "把那个由0 0, 0 5, 5 5, 5 0, 0 0围起来的形状变成一个在里面的小点的文本格式。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::geometry));", "execution_result": [["POINT(2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2758, "question_en": "Turn that shape surrounded by 0 0, 0 5, 5 5, 5 0, 0 0 into a text format of a small dot inside it."}
{"id": 528, "function": "ST_PointOnSurface", "question": "找找那些在(0 0, 0 5, 5 5, 5 0, 0 0)这些点围起来的区域里的某个小点，然后用一种文字格式来描述它。", "sql": "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::geometry));", "execution_result": [["POINT(2.5 2.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2759, "question_en": "Find a little dot somewhere inside the area surrounded by these points (0 0, 0 5, 5 5, 5 0, 0 0), and describe it in a text format."}
{"id": 529, "function": "ST_Polygonize", "question": "把那些由坐标点(180 40, 30 20, 20 90)、(180 40, 160 160)等组成的9条线，变成一个包围它们的形状，然后告诉我这个形状的样子。", "sql": "WITH data(geom) AS (VALUES\n   ('LINESTRING (180 40, 30 20, 20 90)'::geometry)\n  ,('LINESTRING (180 40, 160 160)'::geometry)\n  ,('LINESTRING (80 60, 120 130, 150 80)'::geometry)\n  ,('LINESTRING (80 60, 150 80)'::geometry)\n  ,('LINESTRING (20 90, 70 70, 80 130)'::geometry)\n  ,('LINESTRING (80 130, 160 160)'::geometry)\n  ,('LINESTRING (20 90, 20 160, 70 190)'::geometry)\n  ,('LINESTRING (70 190, 80 130)'::geometry)\n  ,('LINESTRING (70 190, 160 176)'::geometry)\n)\nSELECT ST_AsText( ST_Polygonize( geom ))\n    FROM data;\n", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((180 40,30 20,20 90,70 70,80 130,160 160,180 40),(150 80,120 130,80 60,150 80)),POLYGON((80 60,120 130,150 80,80 60)),POLYGON((80 130,70 70,20 90,20 160,70 190,80 130)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2764, "question_en": "Take those 9 lines made up of points like (180 40, 30 20, 20 90), (180 40, 160 160), and turn them into a shape that covers them, then tell me what this shape looks like."}
{"id": 529, "function": "ST_Polygonize", "question": "试着把这些九条线串：180 40到30 20再到20 90，180 40到160 160，还有80 60到120 130再到150 80等等，变成一个包围它们的形状，然后用某种文本格式把这个形状展示出来。", "sql": "WITH data(geom) AS (VALUES\n   ('LINESTRING (180 40, 30 20, 20 90)'::geometry)\n  ,('LINESTRING (180 40, 160 160)'::geometry)\n  ,('LINESTRING (80 60, 120 130, 150 80)'::geometry)\n  ,('LINESTRING (80 60, 150 80)'::geometry)\n  ,('LINESTRING (20 90, 70 70, 80 130)'::geometry)\n  ,('LINESTRING (80 130, 160 160)'::geometry)\n  ,('LINESTRING (20 90, 20 160, 70 190)'::geometry)\n  ,('LINESTRING (70 190, 80 130)'::geometry)\n  ,('LINESTRING (70 190, 160 164)'::geometry)\n)\nSELECT ST_AsText( ST_Polygonize( geom ))\n    FROM data;\n", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((180 40,30 20,20 90,70 70,80 130,160 160,180 40),(150 80,120 130,80 60,150 80)),POLYGON((80 60,120 130,150 80,80 60)),POLYGON((80 130,70 70,20 90,20 160,70 190,80 130)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2761, "question_en": "Try to turn these nine strings of lines: from 180 40 to 30 20 then to 20 90, from 180 40 to 160 160, and from 80 60 to 120 130 then to 150 80, etc., into a shape that covers them all, and display this shape in some kind of text format."}
{"id": 532, "function": "ST_ReducePrecision", "question": "想象一条由这些点(10 10)、(19.6 30.1)、(20 30)、(20.3 30)、(40 40)连接成的曲线，把它的精细度稍微降低到只有小数点后一位，然后用一种常见的文本方式描述出来。", "sql": "SELECT ST_AsText(ST_ReducePrecision('LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)', 1));", "execution_result": [["LINESTRING(10 10,20 30,40 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2767, "question_en": "Imagine a curve made by connecting these points (10 10), (19.6 30.1), (20 30), (20.3 30), (40 40), reduce its detail level to just one decimal place, and then describe it in a common text format."}
{"id": 533, "function": "ST_ReducePrecision", "question": "把那个点在1.412和19.323这两个数字上的精细程度变粗一些，大概到1.0的那种，然后看看它会变成什么样子。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 1.0));", "execution_result": [["POINT(1 19)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2772, "question_en": "Make that point with 1.412 and 19.323 a bit less precise, roughly to 1.0, and see what it looks like."}
{"id": 533, "function": "ST_ReducePrecision", "question": "把那个在(1.412, 19.323)的小点做个简单处理，精度用1.0，看看它变成什么文字样子。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 1.0));", "execution_result": [["POINT(1 19)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2773, "question_en": "Take that little dot at (1.412, 19.323) and do a simple tweak with a precision of 1.0, see what text it turns into."}
{"id": 529, "function": "ST_Polygonize", "question": "假设有9条由点串成的线：LINESTRING (180 40, 30 20, 20 90)、LINESTRING (180 40, 160 160)、LINESTRING (80 60, 120 130, 150 80)、LINESTRING (80 60, 150 80)、LINESTRING (20 90, 70 70, 80 130)、LINESTRING (80 130, 160 160)、LINESTRING (20 90, 20 160, 70 190)、LINESTRING (70 190, 80 130)、LINESTRING (70 190, 160 160)，想知道这些线能拼成怎样的图形，并用WKT格式描述出来。", "sql": "WITH data(geom) AS (VALUES\n   ('LINESTRING (180 40, 30 20, 20 90)'::geometry)\n  ,('LINESTRING (180 40, 160 160)'::geometry)\n  ,('LINESTRING (80 60, 120 130, 150 80)'::geometry)\n  ,('LINESTRING (80 60, 150 80)'::geometry)\n  ,('LINESTRING (20 90, 70 70, 80 130)'::geometry)\n  ,('LINESTRING (80 130, 160 160)'::geometry)\n  ,('LINESTRING (20 90, 20 160, 70 190)'::geometry)\n  ,('LINESTRING (70 190, 80 130)'::geometry)\n  ,('LINESTRING (70 190, 160 163)'::geometry)\n)\nSELECT ST_AsText( ST_Polygonize( geom ))\n    FROM data;\n", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((180 40,30 20,20 90,70 70,80 130,160 160,180 40),(150 80,120 130,80 60,150 80)),POLYGON((80 60,120 130,150 80,80 60)),POLYGON((80 130,70 70,20 90,20 160,70 190,80 130)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2760, "question_en": "Imagine there are 9 lines made of dots: LINESTRING (180 40, 30 20, 20 90), LINESTRING (180 40, 160 160), LINESTRING (80 60, 120 130, 150 80), LINESTRING (80 60, 150 80), LINESTRING (20 90, 70 70, 80 130), LINESTRING (80 130, 160 160), LINESTRING (20 90, 20 160, 70 190), LINESTRING (70 190, 80 130), LINESTRING (70 190, 160 160), curious to know what shape they can form together and describe it in WKT format."}
{"id": 532, "function": "ST_ReducePrecision", "question": "把那条由点组成的线段，用1的精度来处理一下，然后看看它的WKT样子。", "sql": "SELECT ST_AsText(ST_ReducePrecision('LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)', 1));", "execution_result": [["LINESTRING(10 10,20 30,40 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2770, "question_en": "Take that line made of points, give it a precision of 1, and then see how it looks in WKT."}
{"id": 532, "function": "ST_ReducePrecision", "question": "处理那条线，像是连着这些点：10 10, 19.6 30.1, 20 30, 20.3 30, 40 40，用一种方式让它变得不那么精细，精细度设为1，然后看看它的文本样子。", "sql": "SELECT ST_AsText(ST_ReducePrecision('LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)', 1));", "execution_result": [["LINESTRING(10 10,20 30,40 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2768, "question_en": "Handle that line, kind of connecting these dots: 10 10, 19.6 30.1, 20 30, 20.3 30, 40 40, using a way to make it less precise, precision set to 1, and then see what it looks like in text."}
{"id": 532, "function": "ST_ReducePrecision", "question": "给那条连接了(10 10), (19.6 30.1), (20 30), (20.3 30), (40 40)的小线条，经过某种精细度为1的处理后，输出它的某种描述方式。", "sql": "SELECT ST_AsText(ST_ReducePrecision('LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)', 1));", "execution_result": [["LINESTRING(10 10,20 30,40 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2771, "question_en": "For that little line connecting (10 10), (19.6 30.1), (20 30), (20.3 30), (40 40), after some kind of processing with a fineness of 1, output its certain descriptive form."}
{"id": 532, "function": "ST_ReducePrecision", "question": "找出由一些坐标点组合成的线条，经过数字1的精确处理后，看看它变成了什么样子，用那种文本格式展示出来。坐标是(10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)。", "sql": "SELECT ST_AsText(ST_ReducePrecision('LINESTRING (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)', 1));", "execution_result": [["LINESTRING(10 10,20 30,40 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2769, "question_en": "Find out what a line made of some coordinate points looks like after being precisely processed with the number 1, and show it using that text format. The coordinates are (10 10, 19.6 30.1, 20 30, 20.3 30, 40 40)."}
{"id": 533, "function": "ST_ReducePrecision", "question": "看看那个坐标点(1.412 19.323)在网格大小1.0下会变成什么样子的文字描述。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 1.0));", "execution_result": [["POINT(1 19)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2774, "question_en": "See what the coordinate point (1.412 19.323) turns into as a text description with a grid size of 1.0."}
{"id": 533, "function": "ST_ReducePrecision", "question": "给那个位置在1.412和19.323的小点做个简单的处理，让它看起来只有一个小数位，然后告诉我它变成什么样子。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 1.0));", "execution_result": [["POINT(1 19)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2776, "question_en": "Do a simple tweak on the little dot located at 1.412 and 19.323, making it look like it has just one decimal place, and then tell me what it turns into."}
{"id": 534, "function": "ST_ReducePrecision", "question": "把那个由这些点组成的形状，像(10 10), (60 60.1), (70 30), (40 40), (50 10), (10 10)，用10的单位来做个简单处理，然后用一种常见的文字格式来看看结果。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))', 10));", "execution_result": [["MULTIPOLYGON(((40 40,50 10,10 10,40 40)),((60 60,70 30,40 40,60 60)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2778, "question_en": "Take that shape made of points like (10 10), (60 60.1), (70 30), (40 40), (50 10), (10 10), give it a simple treatment with units of 10, and then see the result in a common text format."}
{"id": 535, "function": "ST_ReducePrecision", "question": "把那个带小数的点POINT(1.412 19.323)处理一下，让它的小数位数变成10位，然后看看结果是什么样子的。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 10));", "execution_result": [["POINT(0 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2786, "question_en": "Take that point with decimals POINT(1.412 19.323), adjust it so it has 10 decimal places, and see what the result looks like."}
{"id": 534, "function": "ST_ReducePrecision", "question": "拿那个形状，有点像五边形，坐标是(10 10), (60 60.1), (70 30), (40 40), (50 10), (10 10)，用点不太精确的方式处理，精度是10，然后看看它变成什么文字样子。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))', 10));", "execution_result": [["MULTIPOLYGON(((40 40,50 10,10 10,40 40)),((60 60,70 30,40 40,60 60)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2780, "question_en": "Take that shape, kind of like a pentagon, with coordinates (10 10), (60 60.1), (70 30), (40 40), (50 10), (10 10), handle it in a less precise way with precision 10, then see what it looks like as text."}
{"id": 533, "function": "ST_ReducePrecision", "question": "找出经过一种处理后，那个点的文本形式，点的坐标是1.412和19.323，处理时用了1.0作为一个重要参数。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 1.0));", "execution_result": [["POINT(1 19)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2777, "question_en": "Find the text form of that point after some kind of processing, where the point's coordinates are 1.412 and 19.323, using 1.0 as an important parameter."}
{"id": 535, "function": "ST_ReducePrecision", "question": "把那个点在1.412和19.323的位置上，弄成小数点后只留10位的那种描述方式是什么？", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 10));", "execution_result": [["POINT(0 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2787, "question_en": "What’s the way to describe that point at 1.412 and 19.323 with only 10 decimal places left?"}
{"id": 534, "function": "ST_ReducePrecision", "question": "可以用一种方式来看看那些点组成的图形，当它们都在一个10单位的小格子里被简化时，是什么样子？", "sql": "SELECT ST_AsText(ST_ReducePrecision('POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))', 10));", "execution_result": [["MULTIPOLYGON(((40 40,50 10,10 10,40 40)),((60 60,70 30,40 40,60 60)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2782, "question_en": "Can you find a way to look at the shape made up of those points when they are all simplified into a 10-unit small grid, and see what it looks like?"}
{"id": 534, "function": "ST_ReducePrecision", "question": "看看那个由点(10 10)、(60 60.1)、(70 30)、(40 40)、(50 10)围成的图形，试着用10这个数字来简单化它，然后告诉我它的样子。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))', 10));", "execution_result": [["MULTIPOLYGON(((40 40,50 10,10 10,40 40)),((60 60,70 30,40 40,60 60)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2779, "question_en": "Take a look at the shape surrounded by the points (10 10), (60 60.1), (70 30), (40 40), (50 10), try to simplify it using the number 10, and then tell me how it looks."}
{"id": 534, "function": "ST_ReducePrecision", "question": "给出一个多边形，它有几个点，比如10 10到60 60.1，还有其他位置，用10的单位来简化后是什么样子？", "sql": "SELECT ST_AsText(ST_ReducePrecision('POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))', 10));", "execution_result": [["MULTIPOLYGON(((40 40,50 10,10 10,40 40)),((60 60,70 30,40 40,60 60)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2781, "question_en": "What does a shape with several points, like from 10 10 to 60 60.1 and other spots, look like when simplified with units of 10?"}
{"id": 535, "function": "ST_ReducePrecision", "question": "把那个坐标是1.412和19.323的小点的精确度降低到小数点后10位，然后用某种格式看看结果是什么样子。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 10));", "execution_result": [["POINT(0 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2784, "question_en": "Take that little dot with coordinates 1.412 and 19.323, reduce its precision to 10 decimal places, and then see what it looks like in some format."}
{"id": 535, "function": "ST_ReducePrecision", "question": "对于坐标是(1.412, 19.323)的那个小点，想办法让它的精度变得只有10位数，然后看看它的文字模样是什么。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 10));", "execution_result": [["POINT(0 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2785, "question_en": "For that little dot with coordinates (1.412, 19.323), try to make its precision only 10 digits and see what its text form looks like."}
{"id": 533, "function": "ST_ReducePrecision", "question": "对于那个两位小数的点，能不能给我个只有一位小数的文本版本？坐标是1.412和19.323。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 1.0));", "execution_result": [["POINT(1 19)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2775, "question_en": "For that point with two decimal places, can you give me a text version with only one decimal place? The coordinates are 1.412 and 19.323."}
{"id": 534, "function": "ST_ReducePrecision", "question": "你能帮我看看这个形状，像是连接了点(10 10), (60 60.1), (70 30), (40 40), (50 10)又回到(10 10)的形状，经过一种处理让它不那么精细，用10这种方式，然后告诉我它的样子吗？", "sql": "SELECT ST_AsText(ST_ReducePrecision('POLYGON ((10 10, 60 60.1, 70 30, 40 40, 50 10, 10 10))', 10));", "execution_result": [["MULTIPOLYGON(((40 40,50 10,10 10,40 40)),((60 60,70 30,40 40,60 60)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2783, "question_en": "Can you help me look at this shape, like a connection of points (10 10), (60 60.1), (70 30), (40 40), (50 10) and back to (10 10), processed in a way that makes it less detailed, using something like 10, and then tell me what it looks like?"}
{"id": 535, "function": "ST_ReducePrecision", "question": "把小点的坐标像用尺子量一样精确到小数点后10位，然后告诉我它的标准文本形式。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 10));", "execution_result": [["POINT(0 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2789, "question_en": "Make the coordinates of the little dot as precise as measuring with a ruler to 10 decimal places, then tell me its standard text form."}
{"id": 536, "function": "ST_ReducePrecision", "question": "把那个点的坐标数字稍微简化一下，像是把1.412和19.323处理成简单的样子，然后告诉我这些数字的形状是什么。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 0.1));", "execution_result": [["POINT(1.4 19.3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2793, "question_en": "Simplify the numbers of that point a bit, like turning 1.412 and 19.323 into a simpler form, and then tell me what the shape of these numbers is."}
{"id": 536, "function": "ST_ReducePrecision", "question": "把那个点坐标1.412和19.323稍微调整一下，精度大概是0.1，然后看看它变成什么样的标准格式文字。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 0.1));", "execution_result": [["POINT(1.4 19.3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2795, "question_en": "Adjust the coordinates 1.412 and 19.323 a little, with a precision around 0.1, and see what it looks like in standard format text."}
{"id": 536, "function": "ST_ReducePrecision", "question": "对于那些在(1.412, 19.323)地方的小点，试着让它们变得不那么精细，用0.1这个数，然后告诉我它是什么样子。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 0.1));", "execution_result": [["POINT(1.4 19.3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2791, "question_en": "For those tiny dots at the location (1.412, 19.323), try to make them less detailed using the number 0.1, and then tell me what they look like."}
{"id": 536, "function": "ST_ReducePrecision", "question": "能不能给我看一下那些点1.412和19.323的样子，用某种格式，经过一点细微调整，比如0.1的精度？", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 0.1));", "execution_result": [["POINT(1.4 19.3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2794, "question_en": "Could you show me what those points 1.412 and 19.323 look like, in some kind of format, after a little adjustment, like a precision of 0.1?"}
{"id": 535, "function": "ST_ReducePrecision", "question": "请给我那个点POINT(1.412 19.323)的文本，但要让它的细节减少到只剩下10位数字的准确度，用一种大家都能看懂的格式。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 10));", "execution_result": [["POINT(0 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2788, "question_en": "Please give me the text of that point POINT(1.412 19.323), but reduce its details to just 10 digits of accuracy, using a format that everyone can understand."}
{"id": 537, "function": "ST_SharedPaths", "question": "看看那两串点之间有没有相同的路径，点的顺序是这样：一个是(26 125到26 200再到126 200再到126 125再回到26 125)，还有(51 150到101 150再到76 175再回到51 150)，另一个是(151 100到126 156.25再到126 125再到90 161再到76 175)，然后用某种格式展示出来。", "sql": "SELECT ST_AsText(ST_SharedPaths(ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))'),ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161,76 175)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),(101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2796, "question_en": "Check if there's a path shared between those two sets of points, with one going like this: (26 125 to 26 200 to 126 200 to 126 125 back to 26 125), and (51 150 to 101 150 to 76 175 back to 51 150), and the other one from (151 100 to 126 156.25 to 126 125 to 90 161 to 76 175), then show it in some format."}
{"id": 537, "function": "ST_SharedPaths", "question": "看看由这两组点组成的那些线条，MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))和LINESTRING(151 100,126 156.25,126 125,90 161,76 175)，它们有没有重合的部分，然后把结果用WKT写出来。", "sql": "SELECT ST_AsText(ST_SharedPaths(ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))'),ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161,76 175)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),(101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2798, "question_en": "Take a look at the lines formed by these sets of points, MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)) and LINESTRING(151 100,126 156.25,126 125,90 161,76 175), check if they have any overlapping parts, and write the result in WKT."}
{"id": 536, "function": "ST_ReducePrecision", "question": "把那个点的位置稍微简化一下，只留小数点后一位，然后用一种标准格式来显示它。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 0.1));", "execution_result": [["POINT(1.4 19.3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2790, "question_en": "Simplify the position of that point a bit, keeping only one decimal place, and display it using a standard format."}
{"id": 537, "function": "ST_SharedPaths", "question": "有一些线段和路径，比如那些点：(26 125,26 200,126 200,126 125,26 125)还有(51 150,101 150,76 175,51 150)，再加上另一条线过这些点(151 100,126 156.25,126 125,90 161,76 175)，想看看它们有没有共同走过的部分，然后告诉我结果是什么样子。", "sql": "SELECT ST_AsText(ST_SharedPaths(ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))'),ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161,76 175)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),(101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2800, "question_en": "There are some segments and paths, like those dots: (26 125,26 200,126 200,126 125,26 125) and (51 150,101 150,76 175,51 150), plus another line crossing these points (151 100,126 156.25,126 125,90 161,76 175), I want to see if they have any shared parts, then tell me what the result looks like."}
{"id": 538, "function": "ST_SharedPaths", "question": "找找那些连接的路径，看看它们怎么一起走吧，LINESTRING(76 175,90 161,126 125,126 156.25,151 100)和MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))之间的。然后用一种特别的格式把结果展示出来。", "sql": "SELECT ST_AsText(\n  ST_SharedPaths(\n   ST_GeomFromText('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),\n   ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),\n       (51 150,101 150,76 175,51 150))')\n    )\n  ) As wkt", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,MULTILINESTRING((76 175,90 161),(90 161,101 150),(126 125,126 156.25)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2802, "question_en": "Let's find the paths where they connect and see how they walk together, between LINESTRING(76 175,90 161,126 125,126 156.25,151 100) and MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)). Then show the result in a special format."}
{"id": 537, "function": "ST_SharedPaths", "question": "找出这两条路径中那些共同的小路段，并给出它们的WKT格式。路径分别是这样绕着来：第一条是从(26 125)出发，经过(26 200)，再到(126 200)，然后返回(126 125)和起点(26 125)，还有一段从(51 150)到(101 150)再到(76 175)再回到(51 150)；第二条是从(151 100)到(126 156.25)，再到(126 125)，然后到(90 161)和(76 175)。", "sql": "SELECT ST_AsText(ST_SharedPaths(ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))'),ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161,76 175)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),(101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2799, "question_en": "Find those shared little segments between these two paths and give their WKT format. The paths go like this: the first one starts at (26 125), goes through (26 200), then to (126 200), returns to (126 125) and back to the start (26 125), with another segment from (51 150) to (101 150), then to (76 175), and back to (51 150); the second one goes from (151 100) to (126 156.25), then to (126 125), and then to (90 161) and (76 175)."}
{"id": 538, "function": "ST_SharedPaths", "question": "看看那些由点76 175, 90 161, 126 125, 126 156.25, 151 100排成的折线和由(26 125, 26 200, 126 200, 126 125, 26 125)还有(51 150, 101 150, 76 175, 51 150)连成的多折线之间，有没有相同的路径，结果用WKT的方式来表示。", "sql": "SELECT ST_AsText(\n  ST_SharedPaths(\n   ST_GeomFromText('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),\n   ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),\n       (51 150,101 150,76 175,51 150))')\n    )\n  ) As wkt", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,MULTILINESTRING((76 175,90 161),(90 161,101 150),(126 125,126 156.25)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2803, "question_en": "Check if there's a shared path between the line made from points 76 175, 90 161, 126 125, 126 156.25, 151 100 and the multiline formed by (26 125, 26 200, 126 200, 126 125, 26 125) and (51 150, 101 150, 76 175, 51 150), and show the result in WKT style."}
{"id": 537, "function": "ST_SharedPaths", "question": "找出两个奇妙的线状图形之间的交集，一个是由一堆坐标点连成的两条线组成的图形((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))，另一个是由五个小点串起来的线(151 100,126 156.25,126 125,90 161,76 175)，然后用某种格式返回它们的交集。", "sql": "SELECT ST_AsText(ST_SharedPaths(ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))'),ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161,76 175)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),(101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2797, "question_en": "Find the intersection between two intriguing line-like figures, one is a shape made of two lines connected by a bunch of coordinate points ((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)), and the other is a line linked by five little dots (151 100,126 156.25,126 125,90 161,76 175), and then return their intersection in some format."}
{"id": 538, "function": "ST_SharedPaths", "question": "看看这条线LINESTRING(76 175,90 161,126 125,126 156.25,151 100)和那些多重线MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))之间有没有相同的部分，然后用一种文字格式来展示结果。", "sql": "SELECT ST_AsText(\n  ST_SharedPaths(\n   ST_GeomFromText('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),\n   ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),\n       (51 150,101 150,76 175,51 150))')\n    )\n  ) As wkt", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,MULTILINESTRING((76 175,90 161),(90 161,101 150),(126 125,126 156.25)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2804, "question_en": "Check if this line LINESTRING(76 175,90 161,126 125,126 156.25,151 100) and those multiple lines MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)) have any common segments, and display the result in some text format."}
{"id": 538, "function": "ST_SharedPaths", "question": "看看那条线从76 175到151 100，还有一个由两个圈组成的图，像是从26 125到126 125，再从51 150到76 175。找出它们之间的共同路径，然后用某种格式表示出来。", "sql": "SELECT ST_AsText(\n  ST_SharedPaths(\n   ST_GeomFromText('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),\n   ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),\n       (51 150,101 150,76 175,51 150))')\n    )\n  ) As wkt", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,MULTILINESTRING((76 175,90 161),(90 161,101 150),(126 125,126 156.25)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2806, "question_en": "Look at that line from 76 175 to 151 100, and a shape made of two loops, like from 26 125 to 126 125, and from 51 150 to 76 175. Find their shared path and express it in some format."}
{"id": 539, "function": "ST_Simplify", "question": "用1 3这个小点为中间，画一个半径10的小圈圈，圈圈有12个小块。然后数一下原来的那些小点，以及在不同的0.1、0.5、1、10、100下变得简单的小点数，再看看100的时候是不是圈圈变没了。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_Simplify(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_Simplify(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_Simplify(geom, 1)) AS np1_octagon, ST_NPoints(ST_Simplify(geom, 10)) AS np10_triangle, (ST_Simplify(geom, 100) IS NULL) AS np100_geometrygoesaway FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, null, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2808, "question_en": "Using the little dot at 1 3 as the center, draw a small circle with a radius of 10, having 12 little segments. Then count the original little dots and the simplified dots at different levels of 0.1, 0.5, 1, 10, and 100, and see if the circle disappears at 100."}
{"id": 538, "function": "ST_SharedPaths", "question": "找出那些点连接的线和另一组线中相互重叠的部分，然后把它们的样子用某种格式表达出来，涉及到的坐标是76 175, 90 161, 126 125, 126 156.25, 151 100和26 125, 26 200, 126 200, 126 125, 26 125, 51 150, 101 150, 76 175, 51 150。", "sql": "SELECT ST_AsText(\n  ST_SharedPaths(\n   ST_GeomFromText('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),\n   ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),\n       (51 150,101 150,76 175,51 150))')\n    )\n  ) As wkt", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,MULTILINESTRING((76 175,90 161),(90 161,101 150),(126 125,126 156.25)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2805, "question_en": "Identify the overlapping segments between one set of linked points and another group of lines, and express their appearance in a certain format. The involved coordinates are 76 175, 90 161, 126 125, 126 156.25, 151 100 and 26 125, 26 200, 126 200, 126 125, 26 125, 51 150, 101 150, 76 175, 51 150."}
{"id": 539, "function": "ST_Simplify", "question": "看看从‘1 3’那个点扩展出一个10的形状，数数最初的点有多少个，然后在不同的模糊度下看看点数会变成多少，比如0.1、0.5、1和10，最后再看看如果模糊到100，会不会什么都不剩。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_Simplify(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_Simplify(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_Simplify(geom, 1)) AS np1_octagon, ST_NPoints(ST_Simplify(geom, 10)) AS np10_triangle, (ST_Simplify(geom, 100) IS NULL) AS np100_geometrygoesaway FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, null, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2809, "question_en": "Take a look at the shape expanding 10 from the '1 3' point, count how many points there are at first, then see how the number of points changes with different fuzziness like 0.1, 0.5, 1, and 10, and finally check if nothing is left when fuzziness reaches 100."}
{"id": 537, "function": "ST_SharedPaths", "question": "找出那些从两个路径的组合中产生的共享路径，包含一些点从26 125到26 200到126 200到126 125到26 125的环形，还有一些从51 150到101 150到76 175到51 150的三角形，和从151 100到126 156.25到126 125到90 161到76 175的线段。", "sql": "SELECT ST_AsText(ST_SharedPaths(ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))'),ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161,76 175)'))) As wkt;", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),(101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2801, "question_en": "Find the shared path that emerges from the combination of two paths, including some points from a circle going from 26 125 to 26 200 to 126 200 to 126 125 to 26 125, and some from a triangle going from 51 150 to 101 150 to 76 175 to 51 150, along with a segment from 151 100 to 126 156.25 to 126 125 to 90 161 to 76 175."}
{"id": 538, "function": "ST_SharedPaths", "question": "找出一条线，像是一串坐标(76 175,90 161,126 125,126 156.25,151 100)和一些形状，包括一个五个点的多边形(26 125,26 200,126 200,126 125,26 125)及三个点的三角形(51 150,101 150,76 175,51 150)，看看它们有没有共同的路径，然后用某种格式输出。", "sql": "SELECT ST_AsText(\n  ST_SharedPaths(\n   ST_GeomFromText('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),\n   ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),\n       (51 150,101 150,76 175,51 150))')\n    )\n  ) As wkt", "execution_result": [["GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,MULTILINESTRING((76 175,90 161),(90 161,101 150),(126 125,126 156.25)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2807, "question_en": "Find a line that resembles a series of coordinates (76 175,90 161,126 125,126 156.25,151 100) and some shapes, including a five-point polygon (26 125,26 200,126 200,126 125,26 125) and a three-point triangle (51 150,101 150,76 175,51 150), and check if they have a shared path, then output it in some format."}
{"id": 540, "function": "ST_Simplify", "question": "将那些复杂的多边形用40的模糊度处理一下，看看会变成什么样的简单形状，结果以文字格式展示出来。", "sql": "SELECT ST_Simplify( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2817, "question_en": "Take those intricate polygons and simplify them with a blur level of 40, then see what simpler shape they turn into and display the result in text format."}
{"id": 539, "function": "ST_Simplify", "question": "试着想象一下，从一个点(1, 3)扩展出一个形状，半径是10，然后看看它原本的顶点数，再试着用0.1、0.5、1、10和100这样的数字让它变得更简单，数一数顶点还剩多少，最后想想用100时这个形状是不是消失了。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_Simplify(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_Simplify(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_Simplify(geom, 1)) AS np1_octagon, ST_NPoints(ST_Simplify(geom, 10)) AS np10_triangle, (ST_Simplify(geom, 100) IS NULL) AS np100_geometrygoesaway FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, null, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2813, "question_en": "Imagine starting from a point at (1, 3) and expanding it into a shape with a radius of 10. Check how many vertices it originally has, then simplify it with numbers like 0.1, 0.5, 1, 10, and 100, counting how many vertices remain. Finally, think about whether the shape disappears when using 100."}
{"id": 539, "function": "ST_Simplify", "question": "看看那些围绕着点(1 3)的形状，先让它长得大一点，然后再用一些不同的数字，比如0.1、0.5、1、10、100，来看看它的角落会不会变少，尤其是当用100时，它是不是就消失了。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_Simplify(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_Simplify(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_Simplify(geom, 1)) AS np1_octagon, ST_NPoints(ST_Simplify(geom, 10)) AS np10_triangle, (ST_Simplify(geom, 100) IS NULL) AS np100_geometrygoesaway FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, null, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2812, "question_en": "Check out the shapes surrounding the point (1 3), first making it a bit larger, then using some different numbers like 0.1, 0.5, 1, 10, 100 to see if its corners become fewer, especially whether it disappears when using 100."}
{"id": 539, "function": "ST_Simplify", "question": "想象一个以(1, 3)为中心，半径是10的小弧线，用12段线拼成。问问它本来的点数是多少，然后用0.1、0.5、1、10、100这样的小数来调整一下，看看点数会怎么变，尤其是用100的时候，那形状还在不在？", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_Simplify(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_Simplify(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_Simplify(geom, 1)) AS np1_octagon, ST_NPoints(ST_Simplify(geom, 10)) AS np10_triangle, (ST_Simplify(geom, 100) IS NULL) AS np100_geometrygoesaway FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, null, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2811, "question_en": "Imagine a small arc centered at (1, 3) with a radius of 10, made up of 12 segments. How many points does it originally have, and how do the point counts change if you tweak it with 0.1, 0.5, 1, 10, and 100? Especially with 100, is the shape still there?"}
{"id": 540, "function": "ST_Simplify", "question": "以40的宽松尺度来处理那些多边形：第一个小形状的点是(90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)；第二个大点集合有个外边框(40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80)和一个内部的空心区域(180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)。", "sql": "SELECT ST_Simplify( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2816, "question_en": "Handle those polygons with a relaxed measure of 40: the first small shape has points (90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110); the second large point collection has an outer frame (40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80) and an internal hollow area (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)."}
{"id": 540, "function": "ST_Simplify", "question": "对于有两个形状的多边形，第一个形状有些点在(90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)，而第二个形状在外面绕一圈(40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80)，还有里面的小圈(180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)。让它们变得稍微简单点，用40这个数字来做个参考吧。", "sql": "SELECT ST_Simplify( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000500000000000000008056400000000000805B40000000000000544000000000008066400000000000002440000000000040654000000000000034400000000000805B4000000000008056400000000000805B40010300000002000000040000000000000000004440000000000000544000000000004065400000000000806640000000000080614000000000000024400000000000004440000000000000544004000000000000000080664000000000008051400000000000D06140000000000010604000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2814, "question_en": "For a polygon with two shapes, the first shape has some points at (90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110), and the second shape goes around the outside (40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), with a smaller circle inside (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70). Make them a bit simpler, using 40 as a reference number."}
{"id": 540, "function": "ST_Simplify", "question": "想象一下有一个由两部分组成的图形，第一部分是一个闭合的线条，坐标是(90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)，第二部分是一个外面有环绕的形状，外面是(40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80)，里面有个小圈圈(180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)。用一种能让图形变简单的方式处理它们，容差为40。", "sql": "SELECT ST_Simplify( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2815, "question_en": "Imagine a shape made of two parts, the first being a closed line with coordinates (90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110), and the second part is a shape with a surrounding outer part (40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80) and a little circle inside (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70). Use a way to make these shapes simpler, with a tolerance of 40."}
{"id": 539, "function": "ST_Simplify", "question": "从那个1和3的小点出发，画一个12段的圆圈，然后看看如果我们把它弄得不那么详细，会有什么变化。尝试不同的细微程度，比如0.1、0.5、1、10、100，看看它们对那些组成这个圆圈的小点数量有什么影响。最开始的数量叫np_before，0.1的结果叫np01_notbadcircle，0.5的叫np05_notquitecircle，1的叫np1_octagon，10的叫np10_triangle，100的时候看看形状还在不在（np100_geometrygoesaway）。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_Simplify(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_Simplify(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_Simplify(geom, 1)) AS np1_octagon, ST_NPoints(ST_Simplify(geom, 10)) AS np10_triangle, (ST_Simplify(geom, 100) IS NULL) AS np100_geometrygoesaway FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, null, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2810, "question_en": "Starting from that little dot at 1 and 3, draw a 12-segment circle, and then see what happens if we make it less detailed. Try different levels of subtlety like 0.1, 0.5, 1, 10, 100, and see how they affect the number of those little dots making up the circle. The initial count is called np_before, the 0.1 result is called np01_notbadcircle, 0.5 is np05_notquitecircle, 1 is np1_octagon, 10 is np10_triangle, and at 100, check if the shape is still there (np100_geometrygoesaway)."}
{"id": 541, "function": "ST_Simplify", "question": "把那些线段用40的松弛度处理一下，看看得到的WKT是什么。", "sql": "SELECT ST_Simplify( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["010500000005000000010200000003000000000000000000344000000000008066400000000000004940000000000000594000000000004065400000000000005E400102000000020000000000000000003440000000000000244000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000400000000000000004060400000000000406040000000000000644000000000000044400000000000806640000000000080564000000000008061400000000000005440010200000003000000000000000000494000000000000044400000000000005440000000000080514000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2823, "question_en": "Handle those line segments with a looseness of 40 and see what WKT you get."}
{"id": 541, "function": "ST_Simplify", "question": "如果你用40这个数字来让那些连在一起的小线段变得简单，结果会是什么样子？", "sql": "SELECT ST_Simplify( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["010500000005000000010200000003000000000000000000344000000000008066400000000000004940000000000000594000000000004065400000000000005E400102000000020000000000000000003440000000000000244000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000400000000000000004060400000000000406040000000000000644000000000000044400000000000806640000000000080564000000000008061400000000000005440010200000003000000000000000000494000000000000044400000000000005440000000000080514000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2824, "question_en": "If you use the number 40 to make those connected little lines simpler, what would the result look like?"}
{"id": 540, "function": "ST_Simplify", "question": "给我看看这些坐标的形状，经过一种算法处理后，容差是40，结果是什么样子呢？", "sql": "SELECT ST_Simplify( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2819, "question_en": "Show me what the shape of these coordinates looks like after being processed by some algorithm, with a tolerance of 40, what does the result look like?"}
{"id": 541, "function": "ST_Simplify", "question": "把那些线段集合变得简单些，记得用40单位的模糊度来处理哦，里面有些坐标，比如(20 180, 20 150, 50 150)之类的。", "sql": "SELECT ST_Simplify( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["010500000005000000010200000003000000000000000000344000000000008066400000000000004940000000000000594000000000004065400000000000005E400102000000020000000000000000003440000000000000244000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000400000000000000004060400000000000406040000000000000644000000000000044400000000000806640000000000080564000000000008061400000000000005440010200000003000000000000000000494000000000000044400000000000005440000000000080514000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2821, "question_en": "Make those line segments a bit simpler, using 40 units of fuzziness. There are coordinates like (20 180, 20 150, 50 150) and so on."}
{"id": 541, "function": "ST_Simplify", "question": "假如有五组线段，它们的坐标是20 180、170 120、20 10、90 120、90 120、130 130、130 130、140 80、50 40到50 40闭合成环，你能用40作为一种松弛的标准来让它们变得简单些吗？", "sql": "SELECT ST_Simplify( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["010500000005000000010200000003000000000000000000344000000000008066400000000000004940000000000000594000000000004065400000000000005E400102000000020000000000000000003440000000000000244000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000400000000000000004060400000000000406040000000000000644000000000000044400000000000806640000000000080564000000000008061400000000000005440010200000003000000000000000000494000000000000044400000000000005440000000000080514000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2822, "question_en": "Imagine there are five sets of lines with coordinates like 20 180, 170 120, 20 10, 90 120, 90 120, 130 130, 130 130, 140 80, and 50 40 to 50 40 forming a loop. Can you use 40 as a kind of relaxation standard to make them simpler?"}
{"id": 540, "function": "ST_Simplify", "question": "给我看看一个有两个外边和一个内边的那种多边形，经过某种简化处理后，结果是什么样子的？简化时用的数字是40。那些坐标点是这样排的：(((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))。", "sql": "SELECT ST_Simplify( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2818, "question_en": "Show me what happens to a shape with two outer edges and one inner edge after some kind of simplification. The number used for simplifying is 40. The coordinates are arranged like this: (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))."}
{"id": 541, "function": "ST_Simplify", "question": "对由这些坐标组成的多条线，想象一个40的容差，看看它们会变成什么样的简单形状？", "sql": "SELECT ST_Simplify( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["010500000005000000010200000003000000000000000000344000000000008066400000000000004940000000000000594000000000004065400000000000005E400102000000020000000000000000003440000000000000244000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000400000000000000004060400000000000406040000000000000644000000000000044400000000000806640000000000080564000000000008061400000000000005440010200000003000000000000000000494000000000000044400000000000005440000000000080514000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2825, "question_en": "For these lines made of coordinates, imagine a tolerance of 40—what simple shape might they become?"}
{"id": 536, "function": "ST_ReducePrecision", "question": "把那个二维的小点，坐标是1.412和19.323，弄得不那么精确，精度差不多是0.1，然后看看它变成了什么文字样子。", "sql": "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 0.1));", "execution_result": [["POINT(1.4 19.3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2792, "question_en": "Take that 2D little dot, with coordinates 1.412 and 19.323, make it less precise, with precision around 0.1, and then see what it looks like in text."}
{"id": 542, "function": "ST_SimplifyPreserveTopology", "question": "如果你把容差调到40，看看那些复杂的多边形组成的图形，包含了一些小圈圈和大圈圈，经过一种简化处理后，最终图形的样子是什么？", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000500000000000000008056400000000000805B40000000000000544000000000008066400000000000002440000000000040654000000000000034400000000000805B4000000000008056400000000000805B40010300000002000000060000000000000000004440000000000000544000000000000059400000000000005940000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000004440000000000000544004000000000000000080664000000000008051400000000000D06140000000000010604000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2830, "question_en": "If you set the tolerance to 40, observe the shape composed of complex polygons, including some small circles and big circles, and find out what the final shape looks like after some simplification process."}
{"id": 541, "function": "ST_Simplify", "question": "对那种由五组小线段组成的图形，包含这些坐标：(20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120)、(20 10, 80 30, 90 120)、(90 120, 130 130)、(130 130, 130 70, 160 40, 180 60, 180 90, 140 80)、(50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40)，进行一种简化，使用40作为宽松的数字。", "sql": "SELECT ST_Simplify( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["010500000005000000010200000003000000000000000000344000000000008066400000000000004940000000000000594000000000004065400000000000005E400102000000020000000000000000003440000000000000244000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000400000000000000004060400000000000406040000000000000644000000000000044400000000000806640000000000080564000000000008061400000000000005440010200000003000000000000000000494000000000000044400000000000005440000000000080514000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2820, "question_en": "Take that shape made of five sets of little lines, with these coordinates: (20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40), and do a kind of simplification using 40 as a lenient number."}
{"id": 542, "function": "ST_SimplifyPreserveTopology", "question": "把那个由两个部分组成的多边形图形，第一部分是简单闭合的形状，第二部分有个小缺口，用40单位的距离来处理一下，然后告诉我它的标准写法。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000500000000000000008056400000000000805B40000000000000544000000000008066400000000000002440000000000040654000000000000034400000000000805B4000000000008056400000000000805B40010300000002000000060000000000000000004440000000000000544000000000000059400000000000005940000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000004440000000000000544004000000000000000080664000000000008051400000000000D06140000000000010604000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2831, "question_en": "Take that shape made of two parts, the first part is a simple closed shape, and the second part has a small gap, and handle it with a 40-unit distance, then tell me its standard writing."}
{"id": 543, "function": "ST_SimplifyPreserveTopology", "question": "对于由五条折线组成的那些线条，比如从(20 180)开始到(50 40)结束，试着用40来调整一下，让它们保持原来的样子但又简化一点。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["01050000000500000001020000000400000000000000000034400000000000806640000000000000494000000000000059400000000000805B400000000000C0624000000000004065400000000000005E400102000000030000000000000000003440000000000000244000000000000054400000000000003E4000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000500000000000000004060400000000000406040000000000040604000000000008051400000000000006440000000000000444000000000008066400000000000805640000000000080614000000000000054400102000000050000000000000000004940000000000000444000000000008051400000000000004440000000000000544000000000008051400000000000004E400000000000004E4000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2832, "question_en": "For those lines made up of five segments, like starting from (20 180) to (50 40), try using 40 to adjust them so they keep their original form but are a bit simpler."}
{"id": 542, "function": "ST_SimplifyPreserveTopology", "question": "对那种包含两个形状的集合进行一种保持原样的简化吧，其中一个形状的点是90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110，而另一个形状的外边那些点是40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80，还有一个内部的小圈圈是180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70，记得用40这个数字哦。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000500000000000000008056400000000000805B40000000000000544000000000008066400000000000002440000000000040654000000000000034400000000000805B4000000000008056400000000000805B40010300000002000000060000000000000000004440000000000000544000000000000059400000000000005940000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000004440000000000000544004000000000000000080664000000000008051400000000000D06140000000000010604000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2828, "question_en": "Do a kind of simplification that keeps things as they are on a set with two shapes, where one shape has points like 90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110, and the other shape has its outer points at 40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80, and a little inner circle at 180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70. Remember to use the number 40."}
{"id": 542, "function": "ST_SimplifyPreserveTopology", "question": "有个多边形组合，其中一个有顶点90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110，另一个有两个边界，外面一圈是40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80，里面一圈是180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70。能否在不改变大致形状的情况下，用40这个数字来让它们简单一点？", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000500000000000000008056400000000000805B40000000000000544000000000008066400000000000002440000000000040654000000000000034400000000000805B4000000000008056400000000000805B40010300000002000000060000000000000000004440000000000000544000000000000059400000000000005940000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000004440000000000000544004000000000000000080664000000000008051400000000000D06140000000000010604000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2826, "question_en": "There's a group of shapes, one has corners at 90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110, and the other has two boundaries, with the outer loop at 40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80, and the inner loop at 180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70. Can you make them a bit simpler using the number 40 without changing their overall shape?"}
{"id": 542, "function": "ST_SimplifyPreserveTopology", "question": "你能帮我看看那个有两个多边形的小图形吗？一个多边形的点是90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110，另一个有一个外圈和一个内圈，外圈的点是40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80，内圈的点是180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70。用40这个数字来让它们保持形状地变简单一点，结果是什么样的呢？", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000500000000000000008056400000000000805B40000000000000544000000000008066400000000000002440000000000040654000000000000034400000000000805B4000000000008056400000000000805B40010300000002000000060000000000000000004440000000000000544000000000000059400000000000005940000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000004440000000000000544004000000000000000080664000000000008051400000000000D06140000000000010604000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2829, "question_en": "Can you help me look at that little shape with two polygons? One polygon has points at 90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110, and the other has an outer loop and an inner loop, with the outer points being 40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80, and the inner points are 180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70. Using the number 40 to make them a little simpler while keeping their shape, what does it look like?"}
{"id": 543, "function": "ST_SimplifyPreserveTopology", "question": "把由五条线组成的那些小路径，用40的距离当作简单化的标准，保持它们的大致形状，最后给我那个结果的WKT样子。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["01050000000500000001020000000400000000000000000034400000000000806640000000000000494000000000000059400000000000805B400000000000C0624000000000004065400000000000005E400102000000030000000000000000003440000000000000244000000000000054400000000000003E4000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000500000000000000004060400000000000406040000000000040604000000000008051400000000000006440000000000000444000000000008066400000000000805640000000000080614000000000000054400102000000050000000000000000004940000000000000444000000000008051400000000000004440000000000000544000000000008051400000000000004E400000000000004E4000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2836, "question_en": "Take those small paths made of five lines, use 40 as the simplification standard, keep their general shape, and finally give me the WKT form of the result."}
{"id": 542, "function": "ST_SimplifyPreserveTopology", "question": "有一个由两个奇妙的多边形组成的图形，第一组小点是90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110；第二组有外圈是40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80，内圈是180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70。用40这个数字来做个处理，让它们变得简单些，但保持原来的样子。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000500000000000000008056400000000000805B40000000000000544000000000008066400000000000002440000000000040654000000000000034400000000000805B4000000000008056400000000000805B40010300000002000000060000000000000000004440000000000000544000000000000059400000000000005940000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000004440000000000000544004000000000000000080664000000000008051400000000000D06140000000000010604000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2827, "question_en": "There's a shape made up of two curious polygons, the first set of little dots is 90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110; the second set has an outer loop of 40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80, and an inner loop of 180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70. Use the number 40 to process them, making them simpler but keeping their original form."}
{"id": 543, "function": "ST_SimplifyPreserveTopology", "question": "当你把简化的力度调整到40的时候，试着让那些多条线的点阵变得简单一点，看看最后能得到什么样的形状，用WKT的方式展现出来。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["01050000000500000001020000000400000000000000000034400000000000806640000000000000494000000000000059400000000000805B400000000000C0624000000000004065400000000000005E400102000000030000000000000000003440000000000000244000000000000054400000000000003E4000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000500000000000000004060400000000000406040000000000040604000000000008051400000000000006440000000000000444000000000008066400000000000805640000000000080614000000000000054400102000000050000000000000000004940000000000000444000000000008051400000000000004440000000000000544000000000008051400000000000004E400000000000004E4000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2837, "question_en": "When you adjust the simplification strength to 40, try to make those sets of lines simpler and see what kind of shape you end up with, showing it in WKT format."}
{"id": 543, "function": "ST_SimplifyPreserveTopology", "question": "处理一下那些线段吧，有好多小点连在一起，比如有些有7个点，有些有3个、2个、6个点，等等。记得用40来衡量精度哦。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["01050000000500000001020000000400000000000000000034400000000000806640000000000000494000000000000059400000000000805B400000000000C0624000000000004065400000000000005E400102000000030000000000000000003440000000000000244000000000000054400000000000003E4000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000500000000000000004060400000000000406040000000000040604000000000008051400000000000006440000000000000444000000000008066400000000000805640000000000080614000000000000054400102000000050000000000000000004940000000000000444000000000008051400000000000004440000000000000544000000000008051400000000000004E400000000000004E4000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2833, "question_en": "Let's handle those line segments, there are many little dots connected together, like some have 7 dots, some have 3, 2, 6 dots, and so on. Remember to use 40 to gauge the precision."}
{"id": 543, "function": "ST_SimplifyPreserveTopology", "question": "给一堆坐标串联成的线，比如这些：((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))，用一个40的宽松程度来处理一下，然后告诉我最后的样子。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["01050000000500000001020000000400000000000000000034400000000000806640000000000000494000000000000059400000000000805B400000000000C0624000000000004065400000000000005E400102000000030000000000000000003440000000000000244000000000000054400000000000003E4000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000500000000000000004060400000000000406040000000000040604000000000008051400000000000006440000000000000444000000000008066400000000000805640000000000080614000000000000054400102000000050000000000000000004940000000000000444000000000008051400000000000004440000000000000544000000000008051400000000000004E400000000000004E4000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2835, "question_en": "Imagine a bunch of coordinates connecting like lines, such as these: ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40)). Use a looseness factor of 40 to process them, and then let me know what it looks like in the end."}
{"id": 543, "function": "ST_SimplifyPreserveTopology", "question": "用40这个数字来调整一下由五条小线段组成的复杂图形：第一条从(20 180)经过几个点到(170 120)；第二条从(20 10)经过一个点到(90 120)；第三条是(90 120)到(130 130)之间的直线；第四条从(130 130)经过一些点到(140 80)；最后一条是从(50 40)开始绕一圈回到起点的闭合路线。", "sql": "SELECT ST_SimplifyPreserveTopology( 'MULTILINESTRING ((20 180, 20 150, 50 150, 50 100, 110 150, 150 140, 170 120), (20 10, 80 30, 90 120), (90 120, 130 130), (130 130, 130 70, 160 40, 180 60, 180 90, 140 80), (50 40, 70 40, 80 70, 70 60, 60 60, 50 50, 50 40))', 40);", "execution_result": [["01050000000500000001020000000400000000000000000034400000000000806640000000000000494000000000000059400000000000805B400000000000C0624000000000004065400000000000005E400102000000030000000000000000003440000000000000244000000000000054400000000000003E4000000000008056400000000000005E4001020000000200000000000000008056400000000000005E400000000000406040000000000040604001020000000500000000000000004060400000000000406040000000000040604000000000008051400000000000006440000000000000444000000000008066400000000000805640000000000080614000000000000054400102000000050000000000000000004940000000000000444000000000008051400000000000004440000000000000544000000000008051400000000000004E400000000000004E4000000000000049400000000000004440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2834, "question_en": "Use the number 40 to tweak a complex shape made of five small line pieces: the first one goes from (20 180) through a few spots to (170 120); the second one from (20 10) through a spot to (90 120); the third is a straight line between (90 120) and (130 130); the fourth goes from (130 130) through some points to (140 80); the last one is a loop starting at (50 40) and ending back at the start point."}
{"id": 544, "function": "ST_SimplifyPreserveTopology", "question": "有一个中心在(1, 3)的小圆圈，半径是10，想知道经过一些处理后，顶点会变成多少。处理的粗糙程度是0.1、0.5、1、10和100。我们需要列出原始和每次处理后的顶点数量。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 1)) AS np1_octagon, ST_NPoints(ST_SimplifyPreserveTopology(geom, 10)) AS np10_square, ST_NPoints(ST_SimplifyPreserveTopology(geom, 100)) AS np100_stillsquare FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, 4, 4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2842, "question_en": "There's a small circle centered at (1, 3) with a radius of 10, and we want to know how many vertices it will have after some processing. The roughness levels are 0.1, 0.5, 1, 10, and 100. We need to list the original and each processed vertex count."}
{"id": 544, "function": "ST_SimplifyPreserveTopology", "question": "看看围绕那些小坐标点（1, 3）的形状，先是个12边的圆，然后经过不同的调整，看看每个阶段有多少个顶点。调整的大小有点像0.1、0.5、1、10、100，名字要能体现形状特征，比如1的时候变成像八边形的样子。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 1)) AS np1_octagon, ST_NPoints(ST_SimplifyPreserveTopology(geom, 10)) AS np10_square, ST_NPoints(ST_SimplifyPreserveTopology(geom, 100)) AS np100_stillsquare FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, 4, 4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2843, "question_en": "Look at the shape around those little coordinates (1, 3), first it's a 12-sided circle, then see how many vertices there are at each stage after different adjustments. The adjustments are kind of like 0.1, 0.5, 1, 10, 100, and the names should reflect shape features, like when it's 1, it turns into something like an octagon."}
{"id": 544, "function": "ST_SimplifyPreserveTopology", "question": "有个点在(1, 3)，围绕它画个半径10的圆，圆边上有12个小段。然后用0.1、0.5、1、10、100这些数字做些调整，看看这些形状有多少个角。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 1)) AS np1_octagon, ST_NPoints(ST_SimplifyPreserveTopology(geom, 10)) AS np10_square, ST_NPoints(ST_SimplifyPreserveTopology(geom, 100)) AS np100_stillsquare FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, 4, 4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2839, "question_en": "There's a dot at (1, 3), draw a circle around it with a radius of 10, and the circle's edge has 12 little segments. Then, tweak it with these numbers: 0.1, 0.5, 1, 10, 100, and see how many corners these shapes have."}
{"id": 544, "function": "ST_SimplifyPreserveTopology", "question": "有个以那些1和3的小点为中心的圆形区域，半径是10，用了12条线段去模拟四分之一的形状。你能告诉我这个形状在原始状态下和经过不同程度的简化后有多少个顶点吗？简化的程度分别是0.1、0.5、1、10和100。结果的列名是np_before、np01_notbadcircle、np05_notquitecircle、np1_octagon、np10_square和np100_stillsquare。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 1)) AS np1_octagon, ST_NPoints(ST_SimplifyPreserveTopology(geom, 10)) AS np10_square, ST_NPoints(ST_SimplifyPreserveTopology(geom, 100)) AS np100_stillsquare FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, 4, 4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2841, "question_en": "There's a circular area centered around those little 1 and 3 coordinates, with a radius of 10, using 12 line segments to mimic a quarter shape. Can you tell me how many vertices this shape has in its original state and after simplification at different levels? The simplification levels are 0.1, 0.5, 1, 10, and 100. The result column names are np_before, np01_notbadcircle, np05_notquitecircle, np1_octagon, np10_square, and np100_stillsquare."}
{"id": 544, "function": "ST_SimplifyPreserveTopology", "question": "看看在1 3这个小点周围画出的形状，当它变成圆、接近圆、像八边形或方形时，边角数量有什么变化？特别关注0.1、0.5、1、10和100这些数字带来的效果。", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 1)) AS np1_octagon, ST_NPoints(ST_SimplifyPreserveTopology(geom, 10)) AS np10_square, ST_NPoints(ST_SimplifyPreserveTopology(geom, 100)) AS np100_stillsquare FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, 4, 4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2840, "question_en": "Observe the changes in the number of corners for the shape drawn around the little dot at 1 3, as it turns into a circle, approaches a circle, resembles an octagon, or appears square. Pay special attention to the effects of the numbers 0.1, 0.5, 1, 10, and 100."}
{"id": 545, "function": "ST_SimplifyPolygonHull", "question": "用0.3这个数字，处理一下那些坐标形成的多边形，看看能不能让外面的形状简单些，同时也整出个里面的框架。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3, false);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2844, "question_en": "With the number 0.3, handle the coordinates making up the polygon to see if the outer shape can be simpler, and also create a framework inside."}
{"id": 546, "function": "ST_SimplifyPolygonHull", "question": "对于由这些点构成的闭合形状，像131 158, 136 163, 161 165, 173 156, 179 148等，使用一个数0.3来让形状变得简单一点。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2850, "question_en": "For this closed shape made of points like 131 158, 136 163, 161 165, 173 156, 179 148, etc., use a number 0.3 to make the shape a bit simpler."}
{"id": 544, "function": "ST_SimplifyPreserveTopology", "question": "如果有一个以1 3这个点为中心，半径是10，并且用12条边画出四分之一圆的形状，你能数一数它最初的顶点数量，以及在用0.1、0.5、1、10和100这些值来让它变得更简单时的顶点数量吗？", "sql": "SELECT ST_Npoints(geom) AS np_before, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.1)) AS np01_notbadcircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 0.5)) AS np05_notquitecircle, ST_NPoints(ST_SimplifyPreserveTopology(geom, 1)) AS np1_octagon, ST_NPoints(ST_SimplifyPreserveTopology(geom, 10)) AS np10_square, ST_NPoints(ST_SimplifyPreserveTopology(geom, 100)) AS np100_stillsquare FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) AS geom) AS t;", "execution_result": [[49, 33, 17, 9, 4, 4]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2838, "question_en": "If there's a shape centered at the point 1 3, with a radius of 10, and drawn with 12 edges to approximate a quarter-circle, can you count how many vertices it has originally and how many it has when simplified using values like 0.1, 0.5, 1, 10, and 100?"}
{"id": 545, "function": "ST_SimplifyPolygonHull", "question": "看看这个一堆坐标组成的形状，用0.3和false这些东西来做一个简单的包裹，然后告诉我这个新形状是什么。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3, false);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2847, "question_en": "Take a look at this shape made of a bunch of coordinates, use 0.3 and false to make a simple wrap around it, and then tell me what the new shape is."}
{"id": 545, "function": "ST_SimplifyPolygonHull", "question": "把那个非常复杂的图形，里面有很多坐标点，比如131 158到134 164，弄得简单点吧。大概保留个百分之三十的点就行，而且是从内部来简化。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3, false);", "execution_result": [["0103000000010000001A00000000000000006060400000000000C063400000000000005D400000000000C063400000000000C05840000000000040644000000000004056400000000000206140000000000000534000000000004060400000000000804D400000000000C05F400000000000003C40000000000060604000000000000047400000000000005D4000000000000042400000000000005940000000000000504000000000008057400000000000C0524000000000000052400000000000804440000000000000514000000000008040400000000000004B4000000000000051400000000000004040000000000080564000000000000048400000000000005C400000000000804A4000000000002062400000000000804C400000000000C063400000000000804C40000000000020644000000000004058400000000000C063400000000000C05C400000000000C063400000000000405E400000000000C067400000000000206140000000000020654000000000008061400000000000606640000000000080624000000000002064400000000000A0644000000000006060400000000000C06340"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2846, "question_en": "Make that very complex shape, with many coordinate points like from 131 158 to 134 164, simpler. Keep about thirty percent of the points, and simplify it from the inside."}
{"id": 545, "function": "ST_SimplifyPolygonHull", "question": "对于那些坐标点，试着用0.3和false做个简化，看看能得出什么样的外包形状。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3, false);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2849, "question_en": "For those coordinate points, try simplifying with 0.3 and false to see what kind of enclosing shape you get."}
{"id": 547, "function": "ST_SimplifyPolygonHull", "question": "先把字母'x'和't'变成那些点点，然后想象用2.0的距离插入小节点，再把多边形简化到只剩0.1的顶点。", "sql": "SELECT ST_SimplifyPolygonHull( ST_Segmentize(ST_Letters('xt'), 2.0), 0.1);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2857, "question_en": "First turn the letters 'x' and 't' into those little dots, then imagine inserting small nodes with a distance of 2.0, and finally simplify the polygon to keep only 0.1 of the vertices."}
{"id": 546, "function": "ST_SimplifyPolygonHull", "question": "对于那个由很多顶点组成的复杂形状，假如你用0.3来简单化，让它变得像包裹住所有点的形状，结果会是什么？", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2854, "question_en": "For that complex shape made of many points, if you use 0.3 to simplify it, making it look like a shape that wraps around all the points, what would the result be?"}
{"id": 546, "function": "ST_SimplifyPolygonHull", "question": "如果你有一个多边形，像很多小点组成的那种，试着用0.3这个数字让它变得简单点，看看它会变成什么样。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2853, "question_en": "If you have a polygon, like one made of lots of little dots, try using the number 0.3 to simplify it and see what it turns into."}
{"id": 547, "function": "ST_SimplifyPolygonHull", "question": "把字母'xt'变成图形后，用2.0的长度来分段，再用0.1的比例来简化那个包住它们的形状，结果会是什么样的图形呢？", "sql": "SELECT ST_SimplifyPolygonHull( ST_Segmentize(ST_Letters('xt'), 2.0), 0.1);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2859, "question_en": "After turning the letters 'xt' into some shape, use a length of 2.0 to break it up, then simplify the shape that wraps around them with a ratio of 0.1, what kind of shape will that result in?"}
{"id": 547, "function": "ST_SimplifyPolygonHull", "question": "对于那些看起来像字母“x”和“t”的形状，先用每隔2.0的方式做点处理，然后用0.1的标准来让它们的外壳变得简单一点。", "sql": "SELECT ST_SimplifyPolygonHull( ST_Segmentize(ST_Letters('xt'), 2.0), 0.1);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2856, "question_en": "For those shapes resembling the letters 'x' and 't', first do some point processing every 2.0, then use a 0.1 standard to make their shells a bit simpler."}
{"id": 547, "function": "ST_SimplifyPolygonHull", "question": "给字符串“xt”画出那些字母的形状，然后确保每段的点不超过2.0的距离，再用0.1的标准来看看能不能画出一个简单的包围形状。", "sql": "SELECT ST_SimplifyPolygonHull( ST_Segmentize(ST_Letters('xt'), 2.0), 0.1);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2858, "question_en": "Draw the shapes of the letters from the string 'xt', then make sure each segment's points are no more than 2.0 apart, and use a 0.1 standard to see if a simple enclosing shape can be drawn."}
{"id": 547, "function": "ST_SimplifyPolygonHull", "question": "先把用'xt'生成的二维字母图形用2.0的长度切成小段，然后用一种只留下0.1单位比例顶点的方式，让它变成一个包住它们的形状，最后得到的那个多边形是什么样的？", "sql": "SELECT ST_SimplifyPolygonHull( ST_Segmentize(ST_Letters('xt'), 2.0), 0.1);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2861, "question_en": "First, take the 2D letter shape made with 'xt' and cut it into little pieces of length 2.0, then use a method that keeps only 0.1 unit of the points to form a shape that covers them all. What does the resulting polygon look like?"}
{"id": 548, "function": "ST_SimplifyVW", "question": "对于那些坐标点，例如像5 2和7 25这样的一串，试着用某种方法让它变得更简单，记得用30这个数字，然后看看结果是什么样子。", "sql": "SELECT ST_AsText(ST_SimplifyVW(geom,30)) simplified FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2862, "question_en": "For those coordinate points, like the series including 5 2 and 7 25, try to make it simpler using some method, remember the number 30, and see what the result looks like."}
{"id": 545, "function": "ST_SimplifyPolygonHull", "question": "有一个由这些小点构成的形状：131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158。怎么用0.3的比例让它的外边缘变得简单点，然后搞出一个里面的壳？", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3, false);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2845, "question_en": "There’s a shape made from these little dots: 131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158. How can you make its outer edge simpler using a ratio of 0.3, and then create an inner shell?"}
{"id": 548, "function": "ST_SimplifyVW", "question": "用一种方法把LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)这条折线变得简单些，考虑面积差不超过30，然后告诉我它简化后的样子。", "sql": "SELECT ST_AsText(ST_SimplifyVW(geom,30)) simplified FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2863, "question_en": "Use a way to make the LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10) a bit simpler, keeping the area difference within 30, and let me know how it looks after simplification."}
{"id": 548, "function": "ST_SimplifyVW", "question": "把那些点(5 2)、(3 8)、(6 20)、(7 25)、(10 10)连成的线稍微简化一下，记得面积差不多是30，然后以某种文本方式给我看看结果。", "sql": "SELECT ST_AsText(ST_SimplifyVW(geom,30)) simplified FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2864, "question_en": "Take those dots at (5 2), (3 8), (6 20), (7 25), (10 10) that form a line and simplify it a bit, keeping in mind the area is about 30, then show me the result in some text format."}
{"id": 548, "function": "ST_SimplifyVW", "question": "有一串小点连接成的路径，其中包括5 2、3 8、6 20、7 25、10 10这些位置，用某种方法简化一下，给个大概30的范围，看最后是什么样子。", "sql": "SELECT ST_AsText(ST_SimplifyVW(geom,30)) simplified FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2865, "question_en": "There's a path made of little dots including 5 2, 3 8, 6 20, 7 25, 10 10. Simplify it using some method with a rough range of 30, and see what it looks like in the end."}
{"id": 547, "function": "ST_SimplifyPolygonHull", "question": "生成'xt'的图形后，分成最多2.0单位长度的段，再把这些段变成一个覆盖它们的简化形状，保留0.1的顶点比例，最后得到的多边形是什么样的？", "sql": "SELECT ST_SimplifyPolygonHull( ST_Segmentize(ST_Letters('xt'), 2.0), 0.1);", "execution_result": [["0106000000020000000103000000010000000E0000003433333333B34640CDCCCCCCCCCC4C40CECCCCCCCC5046406766666666E64B403433333333EF40409A99999999993E40CDCCCCCCCC4C474000000000000000000000000000803D400000000000000000CDCCCCCCCCCC33403433333333331940343333333373324034333333333309409A999999991931400000000000000000000000000000000000000000000000000000000000F02540676666666666374000000000006023406666666666E6424000000000008000406666666666E64B40CDCCCCCCCCCCF43FCDCCCCCCCCCC4C403433333333B34640CDCCCCCCCCCC4C40010300000001000000190000008988888888E0544000000000000030408988888888E05440CDCCCCCCCCCCECBF89888888882052400000000000000000EFEEEEEEEEC651409A9999999999C93F23222222229A5140343333333333D33F8988888888405140343333333333E33F5655555555ED50409A9999999999F13F8988888888C05040676666666666F63F56555555556D5040000000000000004023222222221A504067666666666606407877777777E74F409A99999999990940DFDDDDDDDD4D4F4067666666666610401211111111C14E40CDCCCCCCCCCC14401211111111414E409A999999999919401211111111C14D403433333333331F40DFDDDDDDDD8D4D4033333333333321407877777777274D40CDCCCCCCCCCC24404544444444F44C409A99999999992640DFDDDDDDDDCD4C409A99999999992840DEDDDDDDDD8D49406766666666E64440DEDDDDDDDD8D49403433333333734D401211111111414C409A99999999D9524023222222229A52409A99999999D952408988888888A054403433333333734D408988888888E054400000000000003040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2860, "question_en": "After making shapes for 'xt', split them into parts with a maximum length of 2.0 units, then transform these parts into a simplified shape that covers them, keeping 0.1 of the points. What does the final polygon look like?"}
{"id": 545, "function": "ST_SimplifyPolygonHull", "question": "给定这些小坐标点(131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158)，想象一个涵盖它们的形状，然后只保留0.3的比例，不用生成里面的壳，看看结果会是什么。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3, false);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2848, "question_en": "Given these little coordinates (131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158), imagine a shape that covers them, then keep 0.3 of it, without making an inner shell, and see what the result would be."}
{"id": 548, "function": "ST_SimplifyVW", "question": "把那些连接着5 2, 3 8, 6 20, 7 25, 10 10的小点做个简单的处理，差不多用30这个数字来衡量，然后看看它变成了啥样子。", "sql": "SELECT ST_AsText(ST_SimplifyVW(geom,30)) simplified FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2866, "question_en": "Make a simple adjustment to those connecting little dots at 5 2, 3 8, 6 20, 7 25, 10 10, using something like the number 30 to gauge it, and see what it turns into."}
{"id": 548, "function": "ST_SimplifyVW", "question": "看看那些连接了点(5 2), (3 8), (6 20), (7 25), (10 10)的线，如果把它们稍微简化一下，就像用30这个数字来放松要求，结果会是什么样子？", "sql": "SELECT ST_AsText(ST_SimplifyVW(geom,30)) simplified FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry AS geom) AS t;", "execution_result": [["LINESTRING(5 2,7 25,10 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2867, "question_en": "Imagine a line connecting the points (5 2), (3 8), (6 20), (7 25), (10 10), and if you were to simplify it a bit, like using the number 30 to relax the criteria, what would the result look like?"}
{"id": 549, "function": "ST_SimplifyVW", "question": "看看这个由两个部分组成的大形状，点在这些地方：90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110，还有另一个圈，外面一圈点是40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80，里面一圈点是180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70，然后看看面积40的那个规则之后变成啥样。", "sql": "SELECT ST_SimplifyVW( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000700000000000000008056400000000000805B400000000000005440000000000080664000000000000049400000000000006440000000000000244000000000004065400000000000002440000000000080614000000000000034400000000000805B4000000000008056400000000000805B400103000000020000000900000000000000000044400000000000005440000000000000594000000000000059400000000000005E400000000000006440000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000805B4000000000000044400000000000004E40000000000000444000000000000044400000000000005440060000000000000000806640000000000080514000000000004065400000000000805B400000000000D0614000000000001060400000000000106040000000000060534000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2872, "question_en": "Take a look at this big shape with two parts, with dots at these places: 90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110, and another loop with outside dots 40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80, and inside dots 180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70, then see what it turns into after applying that rule of area 40."}
{"id": 546, "function": "ST_SimplifyPolygonHull", "question": "如果输出给你0.3，看看这个有很多点的多边形会变成什么样子：POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2855, "question_en": "If the output gives you 0.3, see what happens to this polygon with many points: POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))."}
{"id": 549, "function": "ST_SimplifyVW", "question": "对一个由两组多边形组成的形状，试着用某种方法把它简化一下，容差的参数是40，看看简化后的形状会变成什么。具体的点坐标包括比如(90 110, 80 180, 50 160, 10 170...)这些。", "sql": "SELECT ST_SimplifyVW( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000700000000000000008056400000000000805B400000000000005440000000000080664000000000000049400000000000006440000000000000244000000000004065400000000000002440000000000080614000000000000034400000000000805B4000000000008056400000000000805B400103000000020000000900000000000000000044400000000000005440000000000000594000000000000059400000000000005E400000000000006440000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000805B4000000000000044400000000000004E40000000000000444000000000000044400000000000005440060000000000000000806640000000000080514000000000004065400000000000805B400000000000D0614000000000001060400000000000106040000000000060534000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2871, "question_en": "For a shape made up of two groups of polygons, try simplifying it in some way with a tolerance parameter of 40, and see what the simplified shape looks like. The specific coordinates include points like (90 110, 80 180, 50 160, 10 170...), and so on."}
{"id": 549, "function": "ST_SimplifyVW", "question": "有两个形状，一个是由点(90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)围成的，另一个有个外圈和内圈，外圈的点是(40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80)，内圈的点是(180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)。用40这个数字来看看怎么能让这些形状变得简单些。", "sql": "SELECT ST_SimplifyVW( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000700000000000000008056400000000000805B400000000000005440000000000080664000000000000049400000000000006440000000000000244000000000004065400000000000002440000000000080614000000000000034400000000000805B4000000000008056400000000000805B400103000000020000000900000000000000000044400000000000005440000000000000594000000000000059400000000000005E400000000000006440000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000805B4000000000000044400000000000004E40000000000000444000000000000044400000000000005440060000000000000000806640000000000080514000000000004065400000000000805B400000000000D0614000000000001060400000000000106040000000000060534000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2870, "question_en": "There are two shapes, one made from dots (90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110), and another with an outer loop and inner loop, where the outer loop has points (40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80) and the inner loop has points (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70). Use the number 40 to see how these shapes can become simpler."}
{"id": 550, "function": "ST_SimplifyVW", "question": "试着让那条从10 10开始到150 20结束的折线更简单些，记得考虑1600平方单位的面积哦。", "sql": "SELECT ST_SimplifyVW( 'LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)', 1600);", "execution_result": [["0102000000060000000000000000002440000000000000244000000000000059400000000000005940000000000000594000000000008066400000000000C0624000000000004065400000000000C0674000000000008056400000000000C062400000000000003440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2875, "question_en": "Try to make that line starting from 10 10 and ending at 150 20 simpler, remember to consider the area of 1600 square units."}
{"id": 550, "function": "ST_SimplifyVW", "question": "把那条从(10 10)到(150 20)的曲折线，用一种方法弄简单点，记住用1600这个数字作为参考。", "sql": "SELECT ST_SimplifyVW( 'LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)', 1600);", "execution_result": [["0102000000060000000000000000002440000000000000244000000000000059400000000000005940000000000000594000000000008066400000000000C0624000000000004065400000000000C0674000000000008056400000000000C062400000000000003440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2874, "question_en": "Make that winding line from (10 10) to (150 20) simpler using a method, keeping 1600 in mind as a reference."}
{"id": 549, "function": "ST_SimplifyVW", "question": "有两个多边形，一个有点像蝴蝶的形状，另一个有点像星星的形状。用一种方法让它们变得简单一些，记得用40这个数字来帮忙，然后告诉我它们变简单后的样子。", "sql": "SELECT ST_SimplifyVW( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000700000000000000008056400000000000805B400000000000005440000000000080664000000000000049400000000000006440000000000000244000000000004065400000000000002440000000000080614000000000000034400000000000805B4000000000008056400000000000805B400103000000020000000900000000000000000044400000000000005440000000000000594000000000000059400000000000005E400000000000006440000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000805B4000000000000044400000000000004E40000000000000444000000000000044400000000000005440060000000000000000806640000000000080514000000000004065400000000000805B400000000000D0614000000000001060400000000000106040000000000060534000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2873, "question_en": "There are two polygons, one kind of shaped like a butterfly and the other like a star. Use a way to make them simpler, remember to use the number 40 to help, then tell me how they look after becoming simpler."}
{"id": 549, "function": "ST_SimplifyVW", "question": "有一个包含两个图形的多边形集合，想用某种方式让它们变简单一点，什么方法呢？第一个小图形是由(90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)这些点围成的，另一个有外圈(40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80)和内圈(180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)，而简化的程度是40。", "sql": "SELECT ST_SimplifyVW( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000700000000000000008056400000000000805B400000000000005440000000000080664000000000000049400000000000006440000000000000244000000000004065400000000000002440000000000080614000000000000034400000000000805B4000000000008056400000000000805B400103000000020000000900000000000000000044400000000000005440000000000000594000000000000059400000000000005E400000000000006440000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000805B4000000000000044400000000000004E40000000000000444000000000000044400000000000005440060000000000000000806640000000000080514000000000004065400000000000805B400000000000D0614000000000001060400000000000106040000000000060534000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2869, "question_en": "There's a collection of two shapes, and we want to make them a bit simpler somehow. What method should we use? The first little shape is surrounded by these points: (90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110). The other one has an outer loop (40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80) and an inner loop (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70), and the simplification level is 40."}
{"id": 550, "function": "ST_SimplifyVW", "question": "用某种方法处理后，把那些小点连成的线(10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)变得简单点，记得用1600的面积容差哦。", "sql": "SELECT ST_SimplifyVW( 'LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)', 1600);", "execution_result": [["0102000000060000000000000000002440000000000000244000000000000059400000000000005940000000000000594000000000008066400000000000C0624000000000004065400000000000C0674000000000008056400000000000C062400000000000003440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2879, "question_en": "After using some method, make the line formed by those little dots (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20) a bit simpler, remember to use an area tolerance of 1600."}
{"id": 550, "function": "ST_SimplifyVW", "question": "看看那串点(10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)，如果用一种方式让它变简单些，给它1600的空间余地，结果会怎样？", "sql": "SELECT ST_SimplifyVW( 'LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)', 1600);", "execution_result": [["0102000000060000000000000000002440000000000000244000000000000059400000000000005940000000000000594000000000008066400000000000C0624000000000004065400000000000C0674000000000008056400000000000C062400000000000003440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2878, "question_en": "Take a look at that string of points (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20), and if you simplify it a bit with a 1600 space leeway, what would the result be?"}
{"id": 550, "function": "ST_SimplifyVW", "question": "请把那串坐标线 (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20) 用一种让形状变简单的方法处理一下，注意面积的变化不要超过1600。", "sql": "SELECT ST_SimplifyVW( 'LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)', 1600);", "execution_result": [["0102000000060000000000000000002440000000000000244000000000000059400000000000005940000000000000594000000000008066400000000000C0624000000000004065400000000000C0674000000000008056400000000000C062400000000000003440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2877, "question_en": "Could you simplify that series of coordinates (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20) using a method that makes the shape simpler, while keeping the area change within 1600?"}
{"id": 550, "function": "ST_SimplifyVW", "question": "有个折线串，包含(10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)这些点，试着去掉对面积贡献小于1600的小点来让它更简单。", "sql": "SELECT ST_SimplifyVW( 'LINESTRING (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20)', 1600);", "execution_result": [["0102000000060000000000000000002440000000000000244000000000000059400000000000005940000000000000594000000000008066400000000000C0624000000000004065400000000000C0674000000000008056400000000000C062400000000000003440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2876, "question_en": "There's a line made of points like (10 10, 50 40, 30 70, 50 60, 70 80, 50 110, 100 100, 90 140, 100 180, 150 170, 170 140, 190 90, 180 40, 110 40, 150 20), try to make it simpler by removing little dots that contribute less than 1600 to the area."}
{"id": 551, "function": "ST_SetEffectiveArea", "question": "对于那条由5 2到10 10的曲线，找出常规和有点特殊情况下的面积，用某种格式输出为两列，分别叫做all_pts和thrshld_30。", "sql": "SELECT ST_AsText(ST_SetEffectiveArea(geom)) all_pts, ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30 FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) AS foo;", "execution_result": [["LINESTRING M (5 2 3.402823466385289e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 3.402823466385289e+38)", "LINESTRING M (5 2 3.402823466385289e+38,7 25 49.5,10 10 3.402823466385289e+38)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2880, "question_en": "For that curve from 5 2 to 10 10, find out the area in regular and somewhat special cases, output in some format as two columns named all_pts and thrshld_30."}
{"id": 549, "function": "ST_SimplifyVW", "question": "有一个由两个形状组成的复杂图案，第一个形状有这些点(90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)，第二个形状有一个外层和一个内层，外层是(40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80)，内层是(180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)。你能用一种方法让它不那么复杂吗？容差是40。", "sql": "SELECT ST_SimplifyVW( 'MULTIPOLYGON (((90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110)), ((40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70)))', 40);", "execution_result": [["0106000000020000000103000000010000000700000000000000008056400000000000805B400000000000005440000000000080664000000000000049400000000000006440000000000000244000000000004065400000000000002440000000000080614000000000000034400000000000805B4000000000008056400000000000805B400103000000020000000900000000000000000044400000000000005440000000000000594000000000000059400000000000005E400000000000006440000000000040654000000000008066400000000000C067400000000000805140000000000080614000000000000024400000000000805B4000000000000044400000000000004E40000000000000444000000000000044400000000000005440060000000000000000806640000000000080514000000000004065400000000000805B400000000000D0614000000000001060400000000000106040000000000060534000000000008056400000000000004E4000000000008066400000000000805140"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2868, "question_en": "There is a complex pattern made up of two shapes, the first shape has these points (90 110, 80 180, 50 160, 10 170, 10 140, 20 110, 90 110), and the second shape has an outer layer and an inner layer, the outer layer is (40 80, 100 100, 120 160, 170 180, 190 70, 140 10, 110 40, 60 40, 40 80), and the inner layer is (180 70, 170 110, 142.5 128.5, 128.5 77.5, 90 60, 180 70). Can you use a method to make it less complicated? The tolerance is 40."}
{"id": 552, "function": "ST_TriangulatePolygon", "question": "把那个围起来的形状，用点(0 0), (0 1), (1 1), (1 0), (0 0)画出来，分成几个小三角形，然后用一种特别的格式来描述这些小三角形。", "sql": "SELECT ST_AsText( ST_TriangulatePolygon('POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0,0 1,1 1,0 0)),POLYGON((1 1,1 0,0 0,1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2886, "question_en": "Take that enclosed shape drawn with points (0 0), (0 1), (1 1), (1 0), (0 0), divide it into several small triangles, and then describe these triangles in a special format."}
{"id": 551, "function": "ST_SetEffectiveArea", "question": "用那些坐标连成的线来看看两个结果：一个是默认情况下所有点的情况，另一个是当那个神秘数字30出现时的变化，都变成某种文本格式。", "sql": "SELECT ST_AsText(ST_SetEffectiveArea(geom)) all_pts, ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30 FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) AS foo;", "execution_result": [["LINESTRING M (5 2 3.402823466385289e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 3.402823466385289e+38)", "LINESTRING M (5 2 3.402823466385289e+38,7 25 49.5,10 10 3.402823466385289e+38)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2881, "question_en": "With those coordinates making a line, look at two results: one showing all points in the default case, and another showing what happens when that mysterious number 30 comes into play, both turned into some kind of text format."}
{"id": 552, "function": "ST_TriangulatePolygon", "question": "把由(0 0)、(0 1)、(1 1)、(1 0)这些点围成的形状，转成一些小三角形，然后用文字方式看结果。", "sql": "SELECT ST_AsText( ST_TriangulatePolygon('POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0,0 1,1 1,0 0)),POLYGON((1 1,1 0,0 0,1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2887, "question_en": "Take the shape made by the points (0 0), (0 1), (1 1), (1 0), turn it into some small triangles, and then see the result in words."}
{"id": 551, "function": "ST_SetEffectiveArea", "question": "把那条由(5 2), (3 8), (6 20), (7 25), (10 10)组成的线弄一下，看看用默认方式和30这个数字时，会有什么样的文本结果，分别叫它们all_pts和thrshld_30。", "sql": "SELECT ST_AsText(ST_SetEffectiveArea(geom)) all_pts, ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30 FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) AS foo;", "execution_result": [["LINESTRING M (5 2 3.402823466385289e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 3.402823466385289e+38)", "LINESTRING M (5 2 3.402823466385289e+38,7 25 49.5,10 10 3.402823466385289e+38)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2885, "question_en": "Tweak that line made up of (5 2), (3 8), (6 20), (7 25), (10 10) and see what kind of text result it produces with the default way and with the number 30, naming them all_pts and thrshld_30 respectively."}
{"id": 546, "function": "ST_SimplifyPolygonHull", "question": "有一个由点串接起来的形状，点是这些：131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158。要用一种方式让它变得简单些，保留差不多三成的顶点。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3);", "execution_result": [["0103000000010000001A00000000000000002064400000000000A064400000000000A065400000000000806340000000000040674000000000000062400000000000C067400000000000206140000000000020674000000000006060400000000000C065400000000000005F400000000000C064400000000000C05D400000000000C064400000000000C053400000000000C063400000000000804C400000000000005140000000000000404000000000000044400000000000003F4000000000000039400000000000004140000000000000314000000000008044400000000000002C40000000000000474000000000000026400000000000804C400000000000004C400000000000C05640000000000080404000000000004058400000000000003740000000000000594000000000000036400000000000C05A400000000000003C40000000000060604000000000000054400000000000E060400000000000405240000000000020624000000000004055400000000000A063400000000000C0584000000000004064400000000000805E40000000000040654000000000002064400000000000A06440"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2852, "question_en": "There's a shape made by connecting dots, here are the dots: 131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158. Use a method to make it simpler, keeping about 30% of the points."}
{"id": 551, "function": "ST_SetEffectiveArea", "question": "看看从5 2到3 8，再到6 20, 7 25, 最后到10 10的这些点，找出在默认情况下和当某个参数设为30时，分别能包住这些点的形状的字符串。", "sql": "SELECT ST_AsText(ST_SetEffectiveArea(geom)) all_pts, ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30 FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) AS foo;", "execution_result": [["LINESTRING M (5 2 3.402823466385289e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 3.402823466385289e+38)", "LINESTRING M (5 2 3.402823466385289e+38,7 25 49.5,10 10 3.402823466385289e+38)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2883, "question_en": "Look at these points from 5 2 to 3 8, then to 6 20, 7 25, and finally to 10 10, and find the shape strings that can cover these points under default conditions and when a certain parameter is set to 30."}
{"id": 552, "function": "ST_TriangulatePolygon", "question": "把那些围成(0 0), (0 1), (1 1), (1 0), (0 0)的四个点的形状变成几个小三角形，然后用一种文本方式表示出来。", "sql": "SELECT ST_AsText( ST_TriangulatePolygon('POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0,0 1,1 1,0 0)),POLYGON((1 1,1 0,0 0,1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2888, "question_en": "Take the shape made by those four points at (0 0), (0 1), (1 1), (1 0), (0 0) and turn it into a few little triangles, then express it in some kind of text format."}
{"id": 551, "function": "ST_SetEffectiveArea", "question": "对于那些连在一起的点(5 2, 3 8, 6 20, 7 25, 10 10)，你能给我两种方式的面积计算结果吗？一种是直接算出来的，另一种是当那个限制条件是30的时候。", "sql": "SELECT ST_AsText(ST_SetEffectiveArea(geom)) all_pts, ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30 FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) AS foo;", "execution_result": [["LINESTRING M (5 2 3.402823466385289e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 3.402823466385289e+38)", "LINESTRING M (5 2 3.402823466385289e+38,7 25 49.5,10 10 3.402823466385289e+38)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2884, "question_en": "For those connected dots (5 2, 3 8, 6 20, 7 25, 10 10), could you give me the area calculation results in two ways? One is calculated directly, and the other is when that limit condition is 30."}
{"id": 552, "function": "ST_TriangulatePolygon", "question": "把那四个点围起来的形状拆开成几个小三角，看看它们的样子用什么标准方式表达出来。", "sql": "SELECT ST_AsText( ST_TriangulatePolygon('POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0,0 1,1 1,0 0)),POLYGON((1 1,1 0,0 0,1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2891, "question_en": "Break apart the shape formed by those four points into smaller triangles and see how they are expressed in a standard way."}
{"id": 551, "function": "ST_SetEffectiveArea", "question": "想象一下有一个由这些点组成的线条: (5 2, 3 8, 6 20, 7 25, 10 10)。如何用一种方式得到两个结果？一个是所有点的完整面积，另一个是当面积被设置为30时的简化版本，这些结果以某种格式展示出来。", "sql": "SELECT ST_AsText(ST_SetEffectiveArea(geom)) all_pts, ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30 FROM (SELECT 'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) AS foo;", "execution_result": [["LINESTRING M (5 2 3.402823466385289e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 3.402823466385289e+38)", "LINESTRING M (5 2 3.402823466385289e+38,7 25 49.5,10 10 3.402823466385289e+38)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2882, "question_en": "Imagine a line made from these points: (5 2, 3 8, 6 20, 7 25, 10 10). How can you get two results in a way? One is the full area for all points, and the other is a simplified version when the area is set to 30, shown in some format."}
{"id": 552, "function": "ST_TriangulatePolygon", "question": "给我看看由那些点(0 0)、(0 1)、(1 1)、(1 0)围成的形状，怎么能分成小三角形，用一种文本方式来表达结果。", "sql": "SELECT ST_AsText( ST_TriangulatePolygon('POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0,0 1,1 1,0 0)),POLYGON((1 1,1 0,0 0,1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2890, "question_en": "Show me how the shape surrounded by those points (0 0), (0 1), (1 1), (1 0) can be divided into small triangles, and express the result in a text format."}
{"id": 546, "function": "ST_SimplifyPolygonHull", "question": "如何对这个复杂形状进行处理，让它的外面包起来的边界变得简单一些，参数用0.3，形状是POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))。", "sql": "SELECT ST_SimplifyPolygonHull( 'POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))', 0.3);", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2851, "question_en": "How to handle this complex shape to make the boundary that wraps around it simpler, using a parameter of 0.3, the shape being POLYGON ((131 158, 136 163, 161 165, 173 156, 179 148, 169 140, 186 144, 190 137, 185 131, 174 128, 174 124, 166 119, 158 121, 158 115, 165 107, 161 97, 166 88, 166 79, 158 57, 145 57, 112 53, 111 47, 93 43, 90 48, 88 40, 80 39, 68 32, 51 33, 40 31, 39 34, 49 38, 34 38, 25 34, 28 39, 36 40, 44 46, 24 41, 17 41, 14 46, 19 50, 33 54, 21 55, 13 52, 11 57, 22 60, 34 59, 41 68, 75 72, 62 77, 56 70, 46 72, 31 69, 46 76, 52 82, 47 84, 56 90, 66 90, 64 94, 56 91, 33 97, 36 100, 23 100, 22 107, 29 106, 31 112, 46 116, 36 118, 28 131, 53 132, 59 127, 62 131, 76 130, 80 135, 89 137, 87 143, 73 145, 80 150, 88 150, 85 157, 99 162, 116 158, 115 165, 123 165, 122 170, 134 164, 131 158))."}
{"id": 553, "function": "ST_TriangulatePolygon", "question": "把那些外面的点和里面的点连起来，形成一个多边形，然后切成小三角形，用一种文本格式告诉我结果。", "sql": "SELECT ST_AsText(ST_TriangulatePolygon( 'POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147))' ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((25 183,10 185,10 190,25 183)),POLYGON((126 175,121 189,139 187,126 175)),POLYGON((137 169,139 187,154 182,137 169)),POLYGON((149 157,167 177,177 169,149 157)),POLYGON((153 141,189 152,190 141,153 141)),POLYGON((153 141,188 128,186 123,153 141)),POLYGON((186 123,184 117,180 113,186 123)),POLYGON((149 123,176 108,170 104,149 123)),POLYGON((147 118,164 101,151 96,147 118)),POLYGON((121 102,136 92,119 89,121 102)),POLYGON((85 99,73 89,73 100,85 99)),POLYGON((89 17,106 15,106 10,89 17)),POLYGON((26 17,10 10,10 15,26 17)),POLYGON((100 190,25 183,10 190,100 190)),POLYGON((121 189,109 179,100 190,121 189)),POLYGON((189 152,152 147,184 161,189 152)),POLYGON((153 141,190 141,188 128,153 141)),POLYGON((147 118,170 104,164 101,147 118)),POLYGON((139 110,151 96,136 92,139 110)),POLYGON((73 89,85 99,86 89,73 89)),POLYGON((83 18,89 17,106 10,83 18)),POLYGON((83 18,10 10,26 17,83 18)),POLYGON((100 190,30 181,25 183,100 190)),POLYGON((189 152,153 141,152 147,189 152)),POLYGON((176 108,151 128,180 113,176 108)),POLYGON((91 99,86 89,85 99,91 99)),POLYGON((10 10,83 18,106 10,10 10)),POLYGON((76 178,100 190,80 179,76 178)),POLYGON((86 89,91 99,100 89,86 89)),POLYGON((31 19,83 18,26 17,31 19)),POLYGON((102 99,100 89,91 99,102 99)),POLYGON((83 18,31 19,79 20,83 18)),POLYGON((112 100,100 89,102 99,112 100)),POLYGON((34 21,79 20,31 19,34 21)),POLYGON((100 89,112 100,119 89,100 89)),POLYGON((37 24,79 20,34 21,37 24)),POLYGON((119 89,112 100,121 102,119 89)),POLYGON((79 20,37 24,77 23,79 20)),POLYGON((136 92,121 102,128 104,136 92)),POLYGON((77 23,37 24,75 27,77 23)),POLYGON((134 107,136 92,128 104,134 107)),POLYGON((38 29,75 27,37 24,38 29)),POLYGON((139 110,136 92,134 107,139 110)),POLYGON((75 27,38 29,74 32,75 27)),POLYGON((151 96,139 110,143 114,151 96)),POLYGON((74 32,38 29,73 39,74 32)),POLYGON((151 96,143 114,147 118,151 96)),POLYGON((39 43,73 39,38 29,39 43)),POLYGON((170 104,147 118,149 123,170 104)),POLYGON((73 39,39 43,73 89,73 39)),POLYGON((176 108,149 123,151 128,176 108)),POLYGON((73 89,39 43,73 100,73 89)),POLYGON((180 113,151 128,186 123,180 113)),POLYGON((39 161,73 100,39 43,39 161)),POLYGON((186 123,151 128,153 141,186 123)),POLYGON((73 100,39 161,73 171,73 100)),POLYGON((151 152,184 161,152 147,151 152)),POLYGON((38 172,73 171,39 161,38 172)),POLYGON((184 161,151 152,177 169,184 161)),POLYGON((73 171,38 172,74 176,73 171)),POLYGON((149 157,177 169,151 152,149 157)),POLYGON((36 176,74 176,38 172,36 176)),POLYGON((146 162,167 177,149 157,146 162)),POLYGON((34 179,74 176,36 176,34 179)),POLYGON((167 177,146 162,154 182,167 177)),POLYGON((74 176,34 179,76 178,74 176)),POLYGON((154 182,146 162,142 166,154 182)),POLYGON((30 181,76 178,34 179,30 181)),POLYGON((154 182,142 166,137 169,154 182)),POLYGON((100 190,76 178,30 181,100 190)),POLYGON((139 187,137 169,132 172,139 187)),POLYGON((80 179,100 190,89 180,80 179)),POLYGON((139 187,132 172,126 175,139 187)),POLYGON((100 190,99 180,89 180,100 190)),POLYGON((121 189,126 175,118 177,121 189)),POLYGON((100 190,109 179,99 180,100 190)),POLYGON((121 189,118 177,109 179,121 189)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2892, "question_en": "Connect those outer dots with the inner ones to make a polygon, then cut it into small triangles and tell me the result in some text format."}
{"id": 553, "function": "ST_TriangulatePolygon", "question": "想知道那些坐标围成的一个大形状，经过某种处理后，会变成什么样的字符串格式？", "sql": "SELECT ST_AsText(ST_TriangulatePolygon( 'POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147))' ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((25 183,10 185,10 190,25 183)),POLYGON((126 175,121 189,139 187,126 175)),POLYGON((137 169,139 187,154 182,137 169)),POLYGON((149 157,167 177,177 169,149 157)),POLYGON((153 141,189 152,190 141,153 141)),POLYGON((153 141,188 128,186 123,153 141)),POLYGON((186 123,184 117,180 113,186 123)),POLYGON((149 123,176 108,170 104,149 123)),POLYGON((147 118,164 101,151 96,147 118)),POLYGON((121 102,136 92,119 89,121 102)),POLYGON((85 99,73 89,73 100,85 99)),POLYGON((89 17,106 15,106 10,89 17)),POLYGON((26 17,10 10,10 15,26 17)),POLYGON((100 190,25 183,10 190,100 190)),POLYGON((121 189,109 179,100 190,121 189)),POLYGON((189 152,152 147,184 161,189 152)),POLYGON((153 141,190 141,188 128,153 141)),POLYGON((147 118,170 104,164 101,147 118)),POLYGON((139 110,151 96,136 92,139 110)),POLYGON((73 89,85 99,86 89,73 89)),POLYGON((83 18,89 17,106 10,83 18)),POLYGON((83 18,10 10,26 17,83 18)),POLYGON((100 190,30 181,25 183,100 190)),POLYGON((189 152,153 141,152 147,189 152)),POLYGON((176 108,151 128,180 113,176 108)),POLYGON((91 99,86 89,85 99,91 99)),POLYGON((10 10,83 18,106 10,10 10)),POLYGON((76 178,100 190,80 179,76 178)),POLYGON((86 89,91 99,100 89,86 89)),POLYGON((31 19,83 18,26 17,31 19)),POLYGON((102 99,100 89,91 99,102 99)),POLYGON((83 18,31 19,79 20,83 18)),POLYGON((112 100,100 89,102 99,112 100)),POLYGON((34 21,79 20,31 19,34 21)),POLYGON((100 89,112 100,119 89,100 89)),POLYGON((37 24,79 20,34 21,37 24)),POLYGON((119 89,112 100,121 102,119 89)),POLYGON((79 20,37 24,77 23,79 20)),POLYGON((136 92,121 102,128 104,136 92)),POLYGON((77 23,37 24,75 27,77 23)),POLYGON((134 107,136 92,128 104,134 107)),POLYGON((38 29,75 27,37 24,38 29)),POLYGON((139 110,136 92,134 107,139 110)),POLYGON((75 27,38 29,74 32,75 27)),POLYGON((151 96,139 110,143 114,151 96)),POLYGON((74 32,38 29,73 39,74 32)),POLYGON((151 96,143 114,147 118,151 96)),POLYGON((39 43,73 39,38 29,39 43)),POLYGON((170 104,147 118,149 123,170 104)),POLYGON((73 39,39 43,73 89,73 39)),POLYGON((176 108,149 123,151 128,176 108)),POLYGON((73 89,39 43,73 100,73 89)),POLYGON((180 113,151 128,186 123,180 113)),POLYGON((39 161,73 100,39 43,39 161)),POLYGON((186 123,151 128,153 141,186 123)),POLYGON((73 100,39 161,73 171,73 100)),POLYGON((151 152,184 161,152 147,151 152)),POLYGON((38 172,73 171,39 161,38 172)),POLYGON((184 161,151 152,177 169,184 161)),POLYGON((73 171,38 172,74 176,73 171)),POLYGON((149 157,177 169,151 152,149 157)),POLYGON((36 176,74 176,38 172,36 176)),POLYGON((146 162,167 177,149 157,146 162)),POLYGON((34 179,74 176,36 176,34 179)),POLYGON((167 177,146 162,154 182,167 177)),POLYGON((74 176,34 179,76 178,74 176)),POLYGON((154 182,146 162,142 166,154 182)),POLYGON((30 181,76 178,34 179,30 181)),POLYGON((154 182,142 166,137 169,154 182)),POLYGON((100 190,76 178,30 181,100 190)),POLYGON((139 187,137 169,132 172,139 187)),POLYGON((80 179,100 190,89 180,80 179)),POLYGON((139 187,132 172,126 175,139 187)),POLYGON((100 190,99 180,89 180,100 190)),POLYGON((121 189,126 175,118 177,121 189)),POLYGON((100 190,109 179,99 180,100 190)),POLYGON((121 189,118 177,109 179,121 189)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2897, "question_en": "What would the string format look like after some sort of processing on that big shape formed by those coordinates?"}
{"id": 554, "function": "ST_TriangulatePolygon", "question": "看看那些点(10 190)、(10 70)、(80 70)、(80 130)、(50 160)、(120 160)、(120 190)组成的形状，能不能用一些小三角形覆盖起来。", "sql": "SELECT ST_TriangulatePolygon( 'POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))'::geometry );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2898, "question_en": "Take a look at the shape formed by those points (10 190), (10 70), (80 70), (80 130), (50 160), (120 160), (120 190), and see if you can cover it with some small triangles."}
{"id": 554, "function": "ST_TriangulatePolygon", "question": "把那些坐标点围起来的形状变成一堆小三角形，像拼图一样的效果。", "sql": "SELECT ST_TriangulatePolygon( 'POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))'::geometry );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2899, "question_en": "Turn the shape surrounded by those coordinate points into a bunch of small triangles, like a puzzle effect."}
{"id": 552, "function": "ST_TriangulatePolygon", "question": "能不能告诉我那个由小点连成的形状，经过切割后得到的结果，用一种文字描述的方式？这些小点是(0 0, 0 1, 1 1, 1 0, 0 0)。", "sql": "SELECT ST_AsText( ST_TriangulatePolygon('POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))'));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((0 0,0 1,1 1,0 0)),POLYGON((1 1,1 0,0 0,1 1)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2889, "question_en": "Can you tell me the result of the shape made by little dots, after it's been sliced up, using a text-based description? These little dots are (0 0, 0 1, 1 1, 1 0, 0 0)."}
{"id": 553, "function": "ST_TriangulatePolygon", "question": "有个形状，它的外面和里面都有一串点，比如(26 17, 31 19, 34 21, ...)和(152 147, 151 152, 149 157, ...)，试着给它们弄成三角形的样子，然后用一种常见的文本格式展示出来。", "sql": "SELECT ST_AsText(ST_TriangulatePolygon( 'POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147))' ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((25 183,10 185,10 190,25 183)),POLYGON((126 175,121 189,139 187,126 175)),POLYGON((137 169,139 187,154 182,137 169)),POLYGON((149 157,167 177,177 169,149 157)),POLYGON((153 141,189 152,190 141,153 141)),POLYGON((153 141,188 128,186 123,153 141)),POLYGON((186 123,184 117,180 113,186 123)),POLYGON((149 123,176 108,170 104,149 123)),POLYGON((147 118,164 101,151 96,147 118)),POLYGON((121 102,136 92,119 89,121 102)),POLYGON((85 99,73 89,73 100,85 99)),POLYGON((89 17,106 15,106 10,89 17)),POLYGON((26 17,10 10,10 15,26 17)),POLYGON((100 190,25 183,10 190,100 190)),POLYGON((121 189,109 179,100 190,121 189)),POLYGON((189 152,152 147,184 161,189 152)),POLYGON((153 141,190 141,188 128,153 141)),POLYGON((147 118,170 104,164 101,147 118)),POLYGON((139 110,151 96,136 92,139 110)),POLYGON((73 89,85 99,86 89,73 89)),POLYGON((83 18,89 17,106 10,83 18)),POLYGON((83 18,10 10,26 17,83 18)),POLYGON((100 190,30 181,25 183,100 190)),POLYGON((189 152,153 141,152 147,189 152)),POLYGON((176 108,151 128,180 113,176 108)),POLYGON((91 99,86 89,85 99,91 99)),POLYGON((10 10,83 18,106 10,10 10)),POLYGON((76 178,100 190,80 179,76 178)),POLYGON((86 89,91 99,100 89,86 89)),POLYGON((31 19,83 18,26 17,31 19)),POLYGON((102 99,100 89,91 99,102 99)),POLYGON((83 18,31 19,79 20,83 18)),POLYGON((112 100,100 89,102 99,112 100)),POLYGON((34 21,79 20,31 19,34 21)),POLYGON((100 89,112 100,119 89,100 89)),POLYGON((37 24,79 20,34 21,37 24)),POLYGON((119 89,112 100,121 102,119 89)),POLYGON((79 20,37 24,77 23,79 20)),POLYGON((136 92,121 102,128 104,136 92)),POLYGON((77 23,37 24,75 27,77 23)),POLYGON((134 107,136 92,128 104,134 107)),POLYGON((38 29,75 27,37 24,38 29)),POLYGON((139 110,136 92,134 107,139 110)),POLYGON((75 27,38 29,74 32,75 27)),POLYGON((151 96,139 110,143 114,151 96)),POLYGON((74 32,38 29,73 39,74 32)),POLYGON((151 96,143 114,147 118,151 96)),POLYGON((39 43,73 39,38 29,39 43)),POLYGON((170 104,147 118,149 123,170 104)),POLYGON((73 39,39 43,73 89,73 39)),POLYGON((176 108,149 123,151 128,176 108)),POLYGON((73 89,39 43,73 100,73 89)),POLYGON((180 113,151 128,186 123,180 113)),POLYGON((39 161,73 100,39 43,39 161)),POLYGON((186 123,151 128,153 141,186 123)),POLYGON((73 100,39 161,73 171,73 100)),POLYGON((151 152,184 161,152 147,151 152)),POLYGON((38 172,73 171,39 161,38 172)),POLYGON((184 161,151 152,177 169,184 161)),POLYGON((73 171,38 172,74 176,73 171)),POLYGON((149 157,177 169,151 152,149 157)),POLYGON((36 176,74 176,38 172,36 176)),POLYGON((146 162,167 177,149 157,146 162)),POLYGON((34 179,74 176,36 176,34 179)),POLYGON((167 177,146 162,154 182,167 177)),POLYGON((74 176,34 179,76 178,74 176)),POLYGON((154 182,146 162,142 166,154 182)),POLYGON((30 181,76 178,34 179,30 181)),POLYGON((154 182,142 166,137 169,154 182)),POLYGON((100 190,76 178,30 181,100 190)),POLYGON((139 187,137 169,132 172,139 187)),POLYGON((80 179,100 190,89 180,80 179)),POLYGON((139 187,132 172,126 175,139 187)),POLYGON((100 190,99 180,89 180,100 190)),POLYGON((121 189,126 175,118 177,121 189)),POLYGON((100 190,109 179,99 180,100 190)),POLYGON((121 189,118 177,109 179,121 189)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2894, "question_en": "There's a shape with a series of points on the outside and inside, like (26 17, 31 19, 34 21, ...) and (152 147, 151 152, 149 157, ...). Try to make them look like triangles and show it in a common text format."}
{"id": 554, "function": "ST_TriangulatePolygon", "question": "试着找出经过处理后的一些小三角形，这些三角形是由一个形状覆盖的区域内的点（10, 190），（10, 70），（80, 70），（80, 130），（50, 160），（120, 160），（120, 190）构成的。", "sql": "SELECT ST_TriangulatePolygon( 'POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))'::geometry );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2903, "question_en": "Try to find some small triangles formed by points within a shape-covered area, using coordinates (10, 190), (10, 70), (80, 70), (80, 130), (50, 160), (120, 160), (120, 190)."}
{"id": 555, "function": "ST_VoronoiLines", "question": "有五个坐标点，分别是(50 30)、(60 30)、(100 100)、(10 150)、(110 120)，用30这个数字来处理一下，看看能不能弄出个图形边界来。", "sql": "SELECT ST_VoronoiLines( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_result": [["0105000000030000000102000000020000001DC7711CC7F160400000000000E07040E9A28B2EBA684240D145175D74115740010200000002000000E9A28B2EBA684240D145175D741157400000000000805BC0A9AAAAAAAAAA45400102000000020000000000000000C06C40BA6DDBB66DDB46C0E9A28B2EBA684240D145175D74115740"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2904, "question_en": "There are five coordinate points: (50 30), (60 30), (100 100), (10 150), and (110 120). Use the number 30 to see if a shape boundary can be made."}
{"id": 554, "function": "ST_TriangulatePolygon", "question": "找出由这些点组成的大形状中，能分成的小三角形是什么？这些点是：10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 然后回到起点。", "sql": "SELECT ST_TriangulatePolygon( 'POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))'::geometry );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2901, "question_en": "What are the small triangles you can get from the big shape made by these points: 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, and then back to the start?"}
{"id": 553, "function": "ST_TriangulatePolygon", "question": "把那个复杂的多边形，里面有很多点，比如26 17到106 10，再到10 15之类的，弄成一些小三角形，然后把这些结果用一种可以读的方式写出来。", "sql": "SELECT ST_AsText(ST_TriangulatePolygon( 'POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147))' ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((25 183,10 185,10 190,25 183)),POLYGON((126 175,121 189,139 187,126 175)),POLYGON((137 169,139 187,154 182,137 169)),POLYGON((149 157,167 177,177 169,149 157)),POLYGON((153 141,189 152,190 141,153 141)),POLYGON((153 141,188 128,186 123,153 141)),POLYGON((186 123,184 117,180 113,186 123)),POLYGON((149 123,176 108,170 104,149 123)),POLYGON((147 118,164 101,151 96,147 118)),POLYGON((121 102,136 92,119 89,121 102)),POLYGON((85 99,73 89,73 100,85 99)),POLYGON((89 17,106 15,106 10,89 17)),POLYGON((26 17,10 10,10 15,26 17)),POLYGON((100 190,25 183,10 190,100 190)),POLYGON((121 189,109 179,100 190,121 189)),POLYGON((189 152,152 147,184 161,189 152)),POLYGON((153 141,190 141,188 128,153 141)),POLYGON((147 118,170 104,164 101,147 118)),POLYGON((139 110,151 96,136 92,139 110)),POLYGON((73 89,85 99,86 89,73 89)),POLYGON((83 18,89 17,106 10,83 18)),POLYGON((83 18,10 10,26 17,83 18)),POLYGON((100 190,30 181,25 183,100 190)),POLYGON((189 152,153 141,152 147,189 152)),POLYGON((176 108,151 128,180 113,176 108)),POLYGON((91 99,86 89,85 99,91 99)),POLYGON((10 10,83 18,106 10,10 10)),POLYGON((76 178,100 190,80 179,76 178)),POLYGON((86 89,91 99,100 89,86 89)),POLYGON((31 19,83 18,26 17,31 19)),POLYGON((102 99,100 89,91 99,102 99)),POLYGON((83 18,31 19,79 20,83 18)),POLYGON((112 100,100 89,102 99,112 100)),POLYGON((34 21,79 20,31 19,34 21)),POLYGON((100 89,112 100,119 89,100 89)),POLYGON((37 24,79 20,34 21,37 24)),POLYGON((119 89,112 100,121 102,119 89)),POLYGON((79 20,37 24,77 23,79 20)),POLYGON((136 92,121 102,128 104,136 92)),POLYGON((77 23,37 24,75 27,77 23)),POLYGON((134 107,136 92,128 104,134 107)),POLYGON((38 29,75 27,37 24,38 29)),POLYGON((139 110,136 92,134 107,139 110)),POLYGON((75 27,38 29,74 32,75 27)),POLYGON((151 96,139 110,143 114,151 96)),POLYGON((74 32,38 29,73 39,74 32)),POLYGON((151 96,143 114,147 118,151 96)),POLYGON((39 43,73 39,38 29,39 43)),POLYGON((170 104,147 118,149 123,170 104)),POLYGON((73 39,39 43,73 89,73 39)),POLYGON((176 108,149 123,151 128,176 108)),POLYGON((73 89,39 43,73 100,73 89)),POLYGON((180 113,151 128,186 123,180 113)),POLYGON((39 161,73 100,39 43,39 161)),POLYGON((186 123,151 128,153 141,186 123)),POLYGON((73 100,39 161,73 171,73 100)),POLYGON((151 152,184 161,152 147,151 152)),POLYGON((38 172,73 171,39 161,38 172)),POLYGON((184 161,151 152,177 169,184 161)),POLYGON((73 171,38 172,74 176,73 171)),POLYGON((149 157,177 169,151 152,149 157)),POLYGON((36 176,74 176,38 172,36 176)),POLYGON((146 162,167 177,149 157,146 162)),POLYGON((34 179,74 176,36 176,34 179)),POLYGON((167 177,146 162,154 182,167 177)),POLYGON((74 176,34 179,76 178,74 176)),POLYGON((154 182,146 162,142 166,154 182)),POLYGON((30 181,76 178,34 179,30 181)),POLYGON((154 182,142 166,137 169,154 182)),POLYGON((100 190,76 178,30 181,100 190)),POLYGON((139 187,137 169,132 172,139 187)),POLYGON((80 179,100 190,89 180,80 179)),POLYGON((139 187,132 172,126 175,139 187)),POLYGON((100 190,99 180,89 180,100 190)),POLYGON((121 189,126 175,118 177,121 189)),POLYGON((100 190,109 179,99 180,100 190)),POLYGON((121 189,118 177,109 179,121 189)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2896, "question_en": "Take that complex shape with many points, like from 26 17 to 106 10, and then to 10 15, and turn it into some small triangles, then write out the results in a readable way."}
{"id": 554, "function": "ST_TriangulatePolygon", "question": "尝试处理一个复杂的形状，它有很多个小点，依次连接起来形成路径：从10 190到10 70，再到80 70，继续到80 130，经过50 160，接着到120 160，再到120 190，最后回到起点10 190，看看它能变成什么样子。", "sql": "SELECT ST_TriangulatePolygon( 'POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))'::geometry );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2900, "question_en": "Try to handle a complex shape with many little dots, connecting in a path: from 10 190 to 10 70, then to 80 70, continuing to 80 130, passing through 50 160, then to 120 160, next to 120 190, and finally back to the start at 10 190, and see what it can become."}
{"id": 554, "function": "ST_TriangulatePolygon", "question": "看看那些点(10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190)围成的奇怪形状，想象一下把它切成小三角形后的样子。", "sql": "SELECT ST_TriangulatePolygon( 'POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190 ))'::geometry );", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2902, "question_en": "Look at those points (10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, 10 190) forming a peculiar shape, and imagine what it looks like after slicing it into small triangles."}
{"id": 555, "function": "ST_VoronoiLines", "question": "在那些点(50 30)、(60 30)、(100 100)、(10 150)、(110 120)周围，用一个30的距离去描绘分割线，看看能形成什么样的边界。", "sql": "SELECT ST_VoronoiLines( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_result": [["0105000000030000000102000000020000001DC7711CC7F160400000000000E07040E9A28B2EBA684240D145175D74115740010200000002000000E9A28B2EBA684240D145175D741157400000000000805BC0A9AAAAAAAAAA45400102000000020000000000000000C06C40BA6DDBB66DDB46C0E9A28B2EBA684240D145175D74115740"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2905, "question_en": "Around those points (50 30), (60 30), (100 100), (10 150), (110 120), draw dividing lines using a distance of 30 and see what kind of boundary is formed."}
{"id": 555, "function": "ST_VoronoiLines", "question": "用那些点(50 30)、(60 30)、(100 100)、(10 150)、(110 120)做个特别的划分，考虑一个30的模糊范围，看看能得到什么样的分界线。", "sql": "SELECT ST_VoronoiLines( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_result": [["0105000000030000000102000000020000001DC7711CC7F160400000000000E07040E9A28B2EBA684240D145175D74115740010200000002000000E9A28B2EBA684240D145175D741157400000000000805BC0A9AAAAAAAAAA45400102000000020000000000000000C06C40BA6DDBB66DDB46C0E9A28B2EBA684240D145175D74115740"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2906, "question_en": "With those points (50 30), (60 30), (100 100), (10 150), (110 120), make a special kind of division, considering a fuzziness of 30, and see what kind of boundary lines you get."}
{"id": 555, "function": "ST_VoronoiLines", "question": "看看那些点，像是(50 30), (60 30), (100 100), (10 150), (110 120)，如果把它们围起来形成一种特别的线条图形，考虑到一个30的距离，会是什么样子？", "sql": "SELECT ST_VoronoiLines( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_result": [["0105000000030000000102000000020000001DC7711CC7F160400000000000E07040E9A28B2EBA684240D145175D74115740010200000002000000E9A28B2EBA684240D145175D741157400000000000805BC0A9AAAAAAAAAA45400102000000020000000000000000C06C40BA6DDBB66DDB46C0E9A28B2EBA684240D145175D74115740"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2909, "question_en": "Look at those dots, like (50 30), (60 30), (100 100), (10 150), (110 120), if you wrap them up to form a special line pattern, considering a distance of 30, what would it look like?"}
{"id": 555, "function": "ST_VoronoiLines", "question": "给我看看由那些点(50 30, 60 30, 100 100, 10 150, 110 120)生成的形状边界，记得用30来调整一下，结果要是几何模样的。", "sql": "SELECT ST_VoronoiLines( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_result": [["0105000000030000000102000000020000001DC7711CC7F160400000000000E07040E9A28B2EBA684240D145175D74115740010200000002000000E9A28B2EBA684240D145175D741157400000000000805BC0A9AAAAAAAAAA45400102000000020000000000000000C06C40BA6DDBB66DDB46C0E9A28B2EBA684240D145175D74115740"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2907, "question_en": "Show me the shape boundaries made from those points (50 30, 60 30, 100 100, 10 150, 110 120), remember to adjust with 30, and the result should be in a geometric form."}
{"id": 556, "function": "ST_VoronoiPolygons", "question": "从这些坐标点 (50 30, 60 30, 100 100, 10 150, 110 120) 想象一下生成的那些形状，能把这些形状提取出来吗？", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry ) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2913, "question_en": "Imagine the shapes created from these coordinates (50 30, 60 30, 100 100, 10 150, 110 120); can you extract those shapes?"}
{"id": 556, "function": "ST_VoronoiPolygons", "question": "如何对那些点(50,30)、(60,30)、(100,100)、(10,150)、(110,120)进行一种分割，使得每个小区域都离其中一个点最近？", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry ) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2911, "question_en": "How can you partition those points (50,30), (60,30), (100,100), (10,150), (110,120) in a way that each small area is closest to one of the points?"}
{"id": 556, "function": "ST_VoronoiPolygons", "question": "有一堆点，像50 30，60 30，100 100，10 150，110 120这样的，帮我找出一种方式把这些点包围起来，结果给它取个名字叫geom。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry ) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2910, "question_en": "There's a bunch of spots like 50 30, 60 30, 100 100, 10 150, 110 120, can you find a way to surround these points and name the result geom?"}
{"id": 556, "function": "ST_VoronoiPolygons", "question": "用这些小点(50 30, 60 30, 100 100, 10 150, 110 120)来画出一种能把它们分开的图形，最后结果叫做geom。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry ) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2912, "question_en": "Use these little dots (50 30, 60 30, 100 100, 10 150, 110 120) to draw a kind of shape that separates them, and the final result is called geom."}
{"id": 556, "function": "ST_VoronoiPolygons", "question": "给我看看那种用这几个点(50 30, 60 30, 100 100, 10 150, 110 120)围起来的形状，想要那种能装下它们的小片片的集合。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry ) AS geom;", "execution_result": [["010700000005000000010300000001000000060000000000000000805BC00000000000E0704000000000002059400000000000E070404316B29085AC4D4038BDE94D6F9A6040E9A28B2EBA684240D145175D741157400000000000805BC0A9AAAAAAAAAA45400000000000805BC00000000000E07040010300000001000000060000000000000000805BC000000000008056C00000000000805BC0A9AAAAAAAAAA4540E9A28B2EBA684240D145175D741157400000000000804B402549922449D253400000000000804B4000000000008056C00000000000805BC000000000008056C0010300000001000000060000000000000000C06C406FDBB66DDBB634C00000000000804B402549922449D25340E9A28B2EBA684240D145175D741157404316B29085AC4D4038BDE94D6F9A60400000000000C06C400100000000C047400000000000C06C406FDBB66DDBB634C0010300000001000000050000000000000000C06C4000000000008056C00000000000804B4000000000008056C00000000000804B402549922449D253400000000000C06C406FDBB66DDBB634C00000000000C06C4000000000008056C0010300000001000000050000000000000000C06C400000000000E070400000000000C06C400100000000C047404316B29085AC4D4038BDE94D6F9A604000000000002059400000000000E070400000000000C06C400000000000E07040"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2915, "question_en": "Show me the kind of shape formed around these points (50 30, 60 30, 100 100, 10 150, 110 120), looking for the collection of small pieces that can cover them."}
{"id": 556, "function": "ST_VoronoiPolygons", "question": "有一些小点，像50 30，60 30，100 100，10 150，110 120，帮我看一下这些点的分布图，想知道每个点周围的区域是怎样的。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry ) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2914, "question_en": "There are some little dots, like 50 30, 60 30, 100 100, 10 150, 110 120. Help me see the distribution map of these dots. I want to know what the area around each dot looks like."}
{"id": 557, "function": "ST_VoronoiPolygons", "question": "有五个小点，坐标是(50 30)、(60 30)、(100 100)、(10 150)、(110 120)，想要用一种距离为30的方式把这些点圈起来，结果叫做geom。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2916, "question_en": "There are five little dots with coordinates (50 30), (60 30), (100 100), (10 150), and (110 120). Try to wrap these dots with a method that uses a distance of 30, and call the result geom."}
{"id": 557, "function": "ST_VoronoiPolygons", "question": "对那些点(50 30, 60 30, 100 100, 10 150, 110 120)做个图形分析，设定个30单位的距离，然后把结果叫做geom。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2918, "question_en": "Do some shape analysis on those points (50 30, 60 30, 100 100, 10 150, 110 120), set a distance of 30 units, and then call the result geom."}
{"id": 557, "function": "ST_VoronoiPolygons", "question": "根据这些小点的位置(50 30, 60 30, 100 100, 10 150, 110 120)，想象一下生成的那些区域形状，考虑一个30的距离，让我们看看结果是什么样的。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2919, "question_en": "Based on the locations of these little dots (50 30, 60 30, 100 100, 10 150, 110 120), imagine the generated areas, considering a distance of 30, let's see what the result looks like."}
{"id": 557, "function": "ST_VoronoiPolygons", "question": "把这些点 (50 30, 60 30, 100 100, 10 150, 110 120)放在一起，想象一下可以画出的那些区域，考虑一个30的距离，然后看看最后的图形是啥样的。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2920, "question_en": "Put these points (50 30, 60 30, 100 100, 10 150, 110 120) together, imagine the areas you could draw considering a distance of 30, then see what the final shape looks like."}
{"id": 555, "function": "ST_VoronoiLines", "question": "给定一些点，像50 30, 60 30这些，看看它们之间的边界线吧，记得用30这个数字来调整一下。", "sql": "SELECT ST_VoronoiLines( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_result": [["0105000000030000000102000000020000001DC7711CC7F160400000000000E07040E9A28B2EBA684240D145175D74115740010200000002000000E9A28B2EBA684240D145175D741157400000000000805BC0A9AAAAAAAAAA45400102000000020000000000000000C06C40BA6DDBB66DDB46C0E9A28B2EBA684240D145175D74115740"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2908, "question_en": "Given some points like 50 30, 60 30, let's check out the boundary lines between them, remember to adjust with the number 30."}
{"id": 559, "function": "ST_CoverageInvalidEdges", "question": "有四个形状由那些特别的点构成，像ID=1的那些(10,190),(30,160),(40,110),(100,70),(120,10),(10,10),(10,190)等等。你怎么找出它们的边缘问题，并把每个形状的编号和它的问题边缘的描述给我？", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))'::geometry),\n  (2, 'POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))'::geometry),\n  (3, 'POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))'::geometry),\n  (4, 'POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageInvalidEdges(geom) OVER ())\n  FROM coverage;", "execution_result": [[1, "LINESTRING(40 110,100 70)"], [2, "MULTILINESTRING((100 130,140 120,140 160,100 190),(40 110,50 80,74 110.5))"], [3, "LINESTRING(140 80,140 190)"], [4, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2924, "question_en": "There are four shapes made up of those special points, like ID=1 with those (10,190),(30,160),(40,110),(100,70),(120,10),(10,10),(10,190), and so on. How do you find their edge problems and give me each shape's number and a description of its problematic edges?"}
{"id": 560, "function": "ST_CoverageSimplify", "question": "有四个多边形，里面有很多点，像是(160 150)和(110 130)这样的。你能用一种方式让这些多边形变得简单一些吗？30是个关键数字哦，最后希望能看到那些变简单的形状。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))'::geometry),\n  (2, 'POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))'::geometry),\n  (3, 'POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))'::geometry),\n  (4, 'POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageSimplify(geom, 30) OVER ())\n  FROM coverage;", "execution_result": [[1, "POLYGON((160 150,110 130,50 10,10 60,20 170,90 190,160 150),(40 160,66 125,90 170,40 160))"], [2, "POLYGON((40 160,66 125,90 170,40 160))"], [3, "POLYGON((110 130,160 50,50 10,110 130))"], [4, "POLYGON((160 150,160 50,110 130,160 150))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2930, "question_en": "There are four polygons with lots of dots, like (160 150) and (110 130). Can you simplify these polygons in some way? 30 is an important number, and in the end, we’d like to see those simplified shapes."}
{"id": 560, "function": "ST_CoverageSimplify", "question": "有一些形状，像四个多边形，里面有些点，比如说第一个多边形有点在160 150和110 130这些地方。你能不能用一个30的数来让这些形状变得简单些，然后告诉我它们变成了什么样子？", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))'::geometry),\n  (2, 'POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))'::geometry),\n  (3, 'POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))'::geometry),\n  (4, 'POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageSimplify(geom, 30) OVER ())\n  FROM coverage;", "execution_result": [[1, "POLYGON((160 150,110 130,50 10,10 60,20 170,90 190,160 150),(40 160,66 125,90 170,40 160))"], [2, "POLYGON((40 160,66 125,90 170,40 160))"], [3, "POLYGON((110 130,160 50,50 10,110 130))"], [4, "POLYGON((160 150,160 50,110 130,160 150))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2928, "question_en": "There are some shapes, like four polygons, with points in places like 160 150 and 110 130 for the first polygon. Can you use a number like 30 to make these shapes simpler and tell me what they become?"}
{"id": 559, "function": "ST_CoverageInvalidEdges", "question": "看看那四个多边形里，哪条边有点小问题。我们需要知道每个多边形的编号，还有那些不太对劲的边的形状，记得用WKT的方式说出来哦。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))'::geometry),\n  (2, 'POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))'::geometry),\n  (3, 'POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))'::geometry),\n  (4, 'POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageInvalidEdges(geom) OVER ())\n  FROM coverage;", "execution_result": [[1, "LINESTRING(40 110,100 70)"], [2, "MULTILINESTRING((100 130,140 120,140 160,100 190),(40 110,50 80,74 110.5))"], [3, "LINESTRING(140 80,140 190)"], [4, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2927, "question_en": "Check which edges have a bit of an issue in those four polygons. We need to know each polygon's number and the shape of those slightly off edges, remember to describe them in WKT format."}
{"id": 559, "function": "ST_CoverageInvalidEdges", "question": "看看这些图形，像是POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))和其他三个类似的，能不能找到它们各自的编号以及那些不太对劲的边线的描述？", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))'::geometry),\n  (2, 'POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))'::geometry),\n  (3, 'POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))'::geometry),\n  (4, 'POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageInvalidEdges(geom) OVER ())\n  FROM coverage;", "execution_result": [[1, "LINESTRING(40 110,100 70)"], [2, "MULTILINESTRING((100 130,140 120,140 160,100 190),(40 110,50 80,74 110.5))"], [3, "LINESTRING(140 80,140 190)"], [4, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2926, "question_en": "Take a look at these shapes, like POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190)) and three others like it, can you find their individual numbers and a description of any edges that seem a bit off?"}
{"id": 559, "function": "ST_CoverageInvalidEdges", "question": "看看这些有点像连线游戏的形状吧，分别是由一些点连接而成的四个区域，每个都有自己的编号。我们要找出哪些边缘有点问题，并把它们的编号和问题边缘以某种字符串格式说出来。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))'::geometry),\n  (2, 'POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))'::geometry),\n  (3, 'POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))'::geometry),\n  (4, 'POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageInvalidEdges(geom) OVER ())\n  FROM coverage;", "execution_result": [[1, "LINESTRING(40 110,100 70)"], [2, "MULTILINESTRING((100 130,140 120,140 160,100 190),(40 110,50 80,74 110.5))"], [3, "LINESTRING(140 80,140 190)"], [4, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2925, "question_en": "Take a look at these shapes that resemble a connect-the-dots game, each made from a series of points forming four areas, each with its own number. We need to identify which edges have slight issues and state their numbers and problematic edges in some kind of string format."}
{"id": 559, "function": "ST_CoverageInvalidEdges", "question": "有四个形状，它们是用一些点连起来的。看看这些形状（ID=1是(10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190)，ID=2是(100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190)，ID=3是(140 190, 190 190, 190 80, 140 80, 140 190)，ID=4是(180 40, 120 10, 100 70, 140 80, 190 80, 180 40)）能不能合在一起变成一个完整的图形，然后找出那些不太对劲的边，用一种叫WKT的方式来表示。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))'::geometry),\n  (2, 'POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))'::geometry),\n  (3, 'POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))'::geometry),\n  (4, 'POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageInvalidEdges(geom) OVER ())\n  FROM coverage;", "execution_result": [[1, "LINESTRING(40 110,100 70)"], [2, "MULTILINESTRING((100 130,140 120,140 160,100 190),(40 110,50 80,74 110.5))"], [3, "LINESTRING(140 80,140 190)"], [4, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2922, "question_en": "There are four shapes made by connecting some dots. Check if these shapes (ID=1 is (10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190), ID=2 is (100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190), ID=3 is (140 190, 190 190, 190 80, 140 80, 140 190), ID=4 is (180 40, 120 10, 100 70, 140 80, 190 80, 180 40)) can come together to form a complete picture, then find those edges that seem off, and show them in a way called WKT."}
{"id": 560, "function": "ST_CoverageSimplify", "question": "用一种简化的方法来处理四个奇形怪状的围绕点点的图形，宽容度是30，然后把它们变成一种可读的格式。坐标是那些像(160 150, 110 130, 90 100...)的数字。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))'::geometry),\n  (2, 'POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))'::geometry),\n  (3, 'POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))'::geometry),\n  (4, 'POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageSimplify(geom, 30) OVER ())\n  FROM coverage;", "execution_result": [[1, "POLYGON((160 150,110 130,50 10,10 60,20 170,90 190,160 150),(40 160,66 125,90 170,40 160))"], [2, "POLYGON((40 160,66 125,90 170,40 160))"], [3, "POLYGON((110 130,160 50,50 10,110 130))"], [4, "POLYGON((160 150,160 50,110 130,160 150))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2932, "question_en": "Use a way to simplify four oddly-shaped figures surrounding little dots, with a tolerance of 30, and then turn them into a readable format. The coordinates are those numbers like (160 150, 110 130, 90 100...)."}
{"id": 553, "function": "ST_TriangulatePolygon", "question": "能不能找到一个形状，它由外面一圈和里面一圈的小点组成，然后想看看这种形状被分成三角形后的样子，能用文字描述出来吗？外面一圈的小点是(26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17)，而里面一圈的小点是(152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147)。", "sql": "SELECT ST_AsText(ST_TriangulatePolygon( 'POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147))' ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((25 183,10 185,10 190,25 183)),POLYGON((126 175,121 189,139 187,126 175)),POLYGON((137 169,139 187,154 182,137 169)),POLYGON((149 157,167 177,177 169,149 157)),POLYGON((153 141,189 152,190 141,153 141)),POLYGON((153 141,188 128,186 123,153 141)),POLYGON((186 123,184 117,180 113,186 123)),POLYGON((149 123,176 108,170 104,149 123)),POLYGON((147 118,164 101,151 96,147 118)),POLYGON((121 102,136 92,119 89,121 102)),POLYGON((85 99,73 89,73 100,85 99)),POLYGON((89 17,106 15,106 10,89 17)),POLYGON((26 17,10 10,10 15,26 17)),POLYGON((100 190,25 183,10 190,100 190)),POLYGON((121 189,109 179,100 190,121 189)),POLYGON((189 152,152 147,184 161,189 152)),POLYGON((153 141,190 141,188 128,153 141)),POLYGON((147 118,170 104,164 101,147 118)),POLYGON((139 110,151 96,136 92,139 110)),POLYGON((73 89,85 99,86 89,73 89)),POLYGON((83 18,89 17,106 10,83 18)),POLYGON((83 18,10 10,26 17,83 18)),POLYGON((100 190,30 181,25 183,100 190)),POLYGON((189 152,153 141,152 147,189 152)),POLYGON((176 108,151 128,180 113,176 108)),POLYGON((91 99,86 89,85 99,91 99)),POLYGON((10 10,83 18,106 10,10 10)),POLYGON((76 178,100 190,80 179,76 178)),POLYGON((86 89,91 99,100 89,86 89)),POLYGON((31 19,83 18,26 17,31 19)),POLYGON((102 99,100 89,91 99,102 99)),POLYGON((83 18,31 19,79 20,83 18)),POLYGON((112 100,100 89,102 99,112 100)),POLYGON((34 21,79 20,31 19,34 21)),POLYGON((100 89,112 100,119 89,100 89)),POLYGON((37 24,79 20,34 21,37 24)),POLYGON((119 89,112 100,121 102,119 89)),POLYGON((79 20,37 24,77 23,79 20)),POLYGON((136 92,121 102,128 104,136 92)),POLYGON((77 23,37 24,75 27,77 23)),POLYGON((134 107,136 92,128 104,134 107)),POLYGON((38 29,75 27,37 24,38 29)),POLYGON((139 110,136 92,134 107,139 110)),POLYGON((75 27,38 29,74 32,75 27)),POLYGON((151 96,139 110,143 114,151 96)),POLYGON((74 32,38 29,73 39,74 32)),POLYGON((151 96,143 114,147 118,151 96)),POLYGON((39 43,73 39,38 29,39 43)),POLYGON((170 104,147 118,149 123,170 104)),POLYGON((73 39,39 43,73 89,73 39)),POLYGON((176 108,149 123,151 128,176 108)),POLYGON((73 89,39 43,73 100,73 89)),POLYGON((180 113,151 128,186 123,180 113)),POLYGON((39 161,73 100,39 43,39 161)),POLYGON((186 123,151 128,153 141,186 123)),POLYGON((73 100,39 161,73 171,73 100)),POLYGON((151 152,184 161,152 147,151 152)),POLYGON((38 172,73 171,39 161,38 172)),POLYGON((184 161,151 152,177 169,184 161)),POLYGON((73 171,38 172,74 176,73 171)),POLYGON((149 157,177 169,151 152,149 157)),POLYGON((36 176,74 176,38 172,36 176)),POLYGON((146 162,167 177,149 157,146 162)),POLYGON((34 179,74 176,36 176,34 179)),POLYGON((167 177,146 162,154 182,167 177)),POLYGON((74 176,34 179,76 178,74 176)),POLYGON((154 182,146 162,142 166,154 182)),POLYGON((30 181,76 178,34 179,30 181)),POLYGON((154 182,142 166,137 169,154 182)),POLYGON((100 190,76 178,30 181,100 190)),POLYGON((139 187,137 169,132 172,139 187)),POLYGON((80 179,100 190,89 180,80 179)),POLYGON((139 187,132 172,126 175,139 187)),POLYGON((100 190,99 180,89 180,100 190)),POLYGON((121 189,126 175,118 177,121 189)),POLYGON((100 190,109 179,99 180,100 190)),POLYGON((121 189,118 177,109 179,121 189)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2895, "question_en": "Can you find a shape made by a bunch of little dots forming an outer circle and an inner circle, and then see what it looks like when split into triangles? Could you describe it in words? The outer circle's dots are (26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), and the inner circle's dots are (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147)."}
{"id": 560, "function": "ST_CoverageSimplify", "question": "对于那些编号为1到4的形状，想象一下一个神奇的过程可以让它们变得简单，特别是那些坐标，比如160 150和110 130，还有40 160到60 160的路径，然后告诉我这个过程后的结果，记得那个30的神奇数字。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))'::geometry),\n  (2, 'POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))'::geometry),\n  (3, 'POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))'::geometry),\n  (4, 'POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageSimplify(geom, 30) OVER ())\n  FROM coverage;", "execution_result": [[1, "POLYGON((160 150,110 130,50 10,10 60,20 170,90 190,160 150),(40 160,66 125,90 170,40 160))"], [2, "POLYGON((40 160,66 125,90 170,40 160))"], [3, "POLYGON((110 130,160 50,50 10,110 130))"], [4, "POLYGON((160 150,160 50,110 130,160 150))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2931, "question_en": "For those shapes numbered 1 to 4, imagine a magical process that can simplify them, especially those coordinates like 160 150 and 110 130, and the path from 40 160 to 60 160, then tell me the result after this process, remembering that magical number 30."}
{"id": 559, "function": "ST_CoverageInvalidEdges", "question": "有几块地，它们的坐标分别是：一块是10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190；另一块是100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190；第三块是140 190, 190 190, 190 80, 140 80, 140 190；还有一块是180 40, 120 10, 100 70, 140 80, 190 80, 180 40。怎么找到它们之间那些不太对劲的边，用一种叫做WKT的格式告诉我？", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190))'::geometry),\n  (2, 'POLYGON ((100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190))'::geometry),\n  (3, 'POLYGON ((140 190, 190 190, 190 80, 140 80, 140 190))'::geometry),\n  (4, 'POLYGON ((180 40, 120 10, 100 70, 140 80, 190 80, 180 40))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageInvalidEdges(geom) OVER ())\n  FROM coverage;", "execution_result": [[1, "LINESTRING(40 110,100 70)"], [2, "MULTILINESTRING((100 130,140 120,140 160,100 190),(40 110,50 80,74 110.5))"], [3, "LINESTRING(140 80,140 190)"], [4, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2923, "question_en": "There are some plots of land with coordinates: one is 10 190, 30 160, 40 110, 100 70, 120 10, 10 10, 10 190; another is 100 190, 10 190, 30 160, 40 110, 50 80, 74 110.5, 100 130, 140 120, 140 160, 100 190; the third one is 140 190, 190 190, 190 80, 140 80, 140 190; and another is 180 40, 120 10, 100 70, 140 80, 190 80, 180 40. How can I find those edges that seem a bit off and tell me in a format called WKT?"}
{"id": 560, "function": "ST_CoverageSimplify", "question": "有一些形状，像是四个拼图块，分别有这些坐标：160 150到110 130再到90 100，还有其他一些点。用一种方式让它们变得简单一些，数字30在这里很重要，然后把它们变成一种特殊的文本格式，并且记下它们的初始编号。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))'::geometry),\n  (2, 'POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))'::geometry),\n  (3, 'POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))'::geometry),\n  (4, 'POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageSimplify(geom, 30) OVER ())\n  FROM coverage;", "execution_result": [[1, "POLYGON((160 150,110 130,50 10,10 60,20 170,90 190,160 150),(40 160,66 125,90 170,40 160))"], [2, "POLYGON((40 160,66 125,90 170,40 160))"], [3, "POLYGON((110 130,160 50,50 10,110 130))"], [4, "POLYGON((160 150,160 50,110 130,160 150))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2933, "question_en": "There are some shapes, like four puzzle pieces, with coordinates such as from 160 150 to 110 130 to 90 100, and some other points. Use a method to make them a bit simpler, the number 30 is important here, then convert them into a special text format and note their original IDs."}
{"id": 557, "function": "ST_VoronoiPolygons", "question": "考虑一些坐标，比如50 30, 60 30, 100 100, 10 150, 110 120，还有个30的间隔距离，求一个可以把这些小点包起来的形状。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2917, "question_en": "Consider some coordinates like 50 30, 60 30, 100 100, 10 150, 110 120, and a spacing distance of 30, find a shape that can wrap around these little dots."}
{"id": 553, "function": "ST_TriangulatePolygon", "question": "对一块复杂的地形进行切割，外边有个大圈，坐标像是(26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17)，里面还有个小圈，坐标是(152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147)，然后看结果长啥样。", "sql": "SELECT ST_AsText(ST_TriangulatePolygon( 'POLYGON ((26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147))' ));", "execution_result": [["GEOMETRYCOLLECTION(POLYGON((25 183,10 185,10 190,25 183)),POLYGON((126 175,121 189,139 187,126 175)),POLYGON((137 169,139 187,154 182,137 169)),POLYGON((149 157,167 177,177 169,149 157)),POLYGON((153 141,189 152,190 141,153 141)),POLYGON((153 141,188 128,186 123,153 141)),POLYGON((186 123,184 117,180 113,186 123)),POLYGON((149 123,176 108,170 104,149 123)),POLYGON((147 118,164 101,151 96,147 118)),POLYGON((121 102,136 92,119 89,121 102)),POLYGON((85 99,73 89,73 100,85 99)),POLYGON((89 17,106 15,106 10,89 17)),POLYGON((26 17,10 10,10 15,26 17)),POLYGON((100 190,25 183,10 190,100 190)),POLYGON((121 189,109 179,100 190,121 189)),POLYGON((189 152,152 147,184 161,189 152)),POLYGON((153 141,190 141,188 128,153 141)),POLYGON((147 118,170 104,164 101,147 118)),POLYGON((139 110,151 96,136 92,139 110)),POLYGON((73 89,85 99,86 89,73 89)),POLYGON((83 18,89 17,106 10,83 18)),POLYGON((83 18,10 10,26 17,83 18)),POLYGON((100 190,30 181,25 183,100 190)),POLYGON((189 152,153 141,152 147,189 152)),POLYGON((176 108,151 128,180 113,176 108)),POLYGON((91 99,86 89,85 99,91 99)),POLYGON((10 10,83 18,106 10,10 10)),POLYGON((76 178,100 190,80 179,76 178)),POLYGON((86 89,91 99,100 89,86 89)),POLYGON((31 19,83 18,26 17,31 19)),POLYGON((102 99,100 89,91 99,102 99)),POLYGON((83 18,31 19,79 20,83 18)),POLYGON((112 100,100 89,102 99,112 100)),POLYGON((34 21,79 20,31 19,34 21)),POLYGON((100 89,112 100,119 89,100 89)),POLYGON((37 24,79 20,34 21,37 24)),POLYGON((119 89,112 100,121 102,119 89)),POLYGON((79 20,37 24,77 23,79 20)),POLYGON((136 92,121 102,128 104,136 92)),POLYGON((77 23,37 24,75 27,77 23)),POLYGON((134 107,136 92,128 104,134 107)),POLYGON((38 29,75 27,37 24,38 29)),POLYGON((139 110,136 92,134 107,139 110)),POLYGON((75 27,38 29,74 32,75 27)),POLYGON((151 96,139 110,143 114,151 96)),POLYGON((74 32,38 29,73 39,74 32)),POLYGON((151 96,143 114,147 118,151 96)),POLYGON((39 43,73 39,38 29,39 43)),POLYGON((170 104,147 118,149 123,170 104)),POLYGON((73 39,39 43,73 89,73 39)),POLYGON((176 108,149 123,151 128,176 108)),POLYGON((73 89,39 43,73 100,73 89)),POLYGON((180 113,151 128,186 123,180 113)),POLYGON((39 161,73 100,39 43,39 161)),POLYGON((186 123,151 128,153 141,186 123)),POLYGON((73 100,39 161,73 171,73 100)),POLYGON((151 152,184 161,152 147,151 152)),POLYGON((38 172,73 171,39 161,38 172)),POLYGON((184 161,151 152,177 169,184 161)),POLYGON((73 171,38 172,74 176,73 171)),POLYGON((149 157,177 169,151 152,149 157)),POLYGON((36 176,74 176,38 172,36 176)),POLYGON((146 162,167 177,149 157,146 162)),POLYGON((34 179,74 176,36 176,34 179)),POLYGON((167 177,146 162,154 182,167 177)),POLYGON((74 176,34 179,76 178,74 176)),POLYGON((154 182,146 162,142 166,154 182)),POLYGON((30 181,76 178,34 179,30 181)),POLYGON((154 182,142 166,137 169,154 182)),POLYGON((100 190,76 178,30 181,100 190)),POLYGON((139 187,137 169,132 172,139 187)),POLYGON((80 179,100 190,89 180,80 179)),POLYGON((139 187,132 172,126 175,139 187)),POLYGON((100 190,99 180,89 180,100 190)),POLYGON((121 189,126 175,118 177,121 189)),POLYGON((100 190,109 179,99 180,100 190)),POLYGON((121 189,118 177,109 179,121 189)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2893, "question_en": "Cut up a complex terrain with a big outer loop, coordinates like (26 17, 31 19, 34 21, 37 24, 38 29, 39 43, 39 161, 38 172, 36 176, 34 179, 30 181, 25 183, 10 185, 10 190, 100 190, 121 189, 139 187, 154 182, 167 177, 177 169, 184 161, 189 152, 190 141, 188 128, 186 123, 184 117, 180 113, 176 108, 170 104, 164 101, 151 96, 136 92, 119 89, 100 89, 86 89, 73 89, 73 39, 74 32, 75 27, 77 23, 79 20, 83 18, 89 17, 106 15, 106 10, 10 10, 10 15, 26 17), and a small loop inside, coordinates are (152 147, 151 152, 149 157, 146 162, 142 166, 137 169, 132 172, 126 175, 118 177, 109 179, 99 180, 89 180, 80 179, 76 178, 74 176, 73 171, 73 100, 85 99, 91 99, 102 99, 112 100, 121 102, 128 104, 134 107, 139 110, 143 114, 147 118, 149 123, 151 128, 153 141, 152 147), then see how the result looks."}
{"id": 561, "function": "ST_CoverageUnion", "question": "把那些五个形状连在一起，像拼图一样，它们的编号是1到5，坐标有10 10、10 150、120 10等等，然后看看结果是什么样子，用某种格式表达出来。", "sql": "WITH coverage(id, geom) AS (VALUES (1, 'POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))'::geometry), (2, 'POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))'::geometry), (3, 'POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))'::geometry), (4, 'POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))'::geometry), (5, 'POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))'::geometry) ) SELECT ST_AsText(ST_CoverageUnion(geom)) FROM coverage;", "execution_result": [["MULTIPOLYGON(((10 150,80 190,110 150,140 80,120 10,10 10,10 150),(50 60,100 70,40 110,50 60)),((120 170,140 190,180 160,170 140,140 130,120 170)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2935, "question_en": "Join those five shapes together, like a puzzle, their IDs are from 1 to 5, with coordinates like 10 10, 10 150, 120 10, etc., and then see what the result looks like, expressed in some format."}
{"id": 561, "function": "ST_CoverageUnion", "question": "有五个图形，像是那些点连接起来的区域：从(10 10)开始，到(10 150)，再到(80 190)，以及其他点，最后回到起点。你需要找出一个能够把这些图形都包住的合并结果，并用某种格式显示出来。", "sql": "WITH coverage(id, geom) AS (VALUES (1, 'POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))'::geometry), (2, 'POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))'::geometry), (3, 'POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))'::geometry), (4, 'POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))'::geometry), (5, 'POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))'::geometry) ) SELECT ST_AsText(ST_CoverageUnion(geom)) FROM coverage;", "execution_result": [["MULTIPOLYGON(((10 150,80 190,110 150,140 80,120 10,10 10,10 150),(50 60,100 70,40 110,50 60)),((120 170,140 190,180 160,170 140,140 130,120 170)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2936, "question_en": "There are five shapes, like those areas formed by connecting points: starting at (10 10), going to (10 150), then to (80 190), and other points, finally returning to the start. You need to find a result that can encompass all these shapes and display it in some format."}
{"id": 561, "function": "ST_CoverageUnion", "question": "把那些编号从1到5的形状都放在一起，看看它们最后变成了什么样子，尤其是那个坐标的组合：10 10到10 150再到80 190等等，最后以一种文字格式呈现。", "sql": "WITH coverage(id, geom) AS (VALUES (1, 'POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))'::geometry), (2, 'POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))'::geometry), (3, 'POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))'::geometry), (4, 'POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))'::geometry), (5, 'POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))'::geometry) ) SELECT ST_AsText(ST_CoverageUnion(geom)) FROM coverage;", "execution_result": [["MULTIPOLYGON(((10 150,80 190,110 150,140 80,120 10,10 10,10 150),(50 60,100 70,40 110,50 60)),((120 170,140 190,180 160,170 140,140 130,120 170)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2938, "question_en": "Combine those shapes numbered 1 to 5 and see what they turn into, especially the coordinate mix like from 10 10 to 10 150 to 80 190 and so on, and present it in a text format."}
{"id": 561, "function": "ST_CoverageUnion", "question": "如果把五个多边形（像是ID 1的那些点：10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10；ID 2的：120 10, 10 10, 50 60, 100 70, 120 10；还有其他几个类似的）合起来，最后变成一个形状，用文字形式描述一下会是什么？", "sql": "WITH coverage(id, geom) AS (VALUES (1, 'POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))'::geometry), (2, 'POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))'::geometry), (3, 'POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))'::geometry), (4, 'POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))'::geometry), (5, 'POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))'::geometry) ) SELECT ST_AsText(ST_CoverageUnion(geom)) FROM coverage;", "execution_result": [["MULTIPOLYGON(((10 150,80 190,110 150,140 80,120 10,10 10,10 150),(50 60,100 70,40 110,50 60)),((120 170,140 190,180 160,170 140,140 130,120 170)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2939, "question_en": "If you combine five polygons (like the points in ID 1: 10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10; ID 2: 120 10, 10 10, 50 60, 100 70, 120 10; and a few others like these), what would the resulting shape look like in text form?"}
{"id": 561, "function": "ST_CoverageUnion", "question": "想象一下有五个奇形怪状的区域，分别在坐标(10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10)、(120 10, 10 10, 50 60, 100 70, 120 10)、(140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80)、(140 190, 120 170, 140 130, 160 150, 140 190)、(180 160, 170 140, 140 130, 160 150, 140 190, 180 160)。将它们合并成一个大的形状，然后把结果用某种文本格式展示出来。", "sql": "WITH coverage(id, geom) AS (VALUES (1, 'POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))'::geometry), (2, 'POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))'::geometry), (3, 'POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))'::geometry), (4, 'POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))'::geometry), (5, 'POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))'::geometry) ) SELECT ST_AsText(ST_CoverageUnion(geom)) FROM coverage;", "execution_result": [["MULTIPOLYGON(((10 150,80 190,110 150,140 80,120 10,10 10,10 150),(50 60,100 70,40 110,50 60)),((120 170,140 190,180 160,170 140,140 130,120 170)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2934, "question_en": "Imagine there are five oddly-shaped areas at coordinates (10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10), (120 10, 10 10, 50 60, 100 70, 120 10), (140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80), (140 190, 120 170, 140 130, 160 150, 140 190), (180 160, 170 140, 140 130, 160 150, 140 190, 180 160). Merge them into one big shape and display the result in some text format."}
{"id": 560, "function": "ST_CoverageSimplify", "question": "有四个形状，每个都有它们自己的坐标，比如第一个有外面的点(160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150)和里面的点(40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160)。其他形状也都有自己的点，比如第二个是(40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160)，第三个是(110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130)，第四个是(160 150, 150 120, 160 90, 160 50, 110 130, 160 150)。用某种方式处理这些形状，调整它们的细节，容差为30，然后看看它们变成什么样子。", "sql": "WITH coverage(id, geom) AS (VALUES\n  (1, 'POLYGON ((160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150), (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160))'::geometry),\n  (2, 'POLYGON ((40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160))'::geometry),\n  (3, 'POLYGON ((110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130))'::geometry),\n  (4, 'POLYGON ((160 150, 150 120, 160 90, 160 50, 110 130, 160 150))'::geometry)\n)\nSELECT id, ST_AsText(ST_CoverageSimplify(geom, 30) OVER ())\n  FROM coverage;", "execution_result": [[1, "POLYGON((160 150,110 130,50 10,10 60,20 170,90 190,160 150),(40 160,66 125,90 170,40 160))"], [2, "POLYGON((40 160,66 125,90 170,40 160))"], [3, "POLYGON((110 130,160 50,50 10,110 130))"], [4, "POLYGON((160 150,160 50,110 130,160 150))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2929, "question_en": "There are four shapes, each with its own coordinates, like the first one with outside points (160 150, 110 130, 90 100, 90 70, 60 60, 50 10, 30 30, 40 50, 25 40, 10 60, 30 100, 30 120, 20 170, 60 180, 90 190, 130 180, 130 160, 160 150) and inside points (40 160, 50 140, 66 125, 60 100, 80 140, 90 170, 60 160, 40 160). The other shapes also have their own points, like the second one (40 160, 60 160, 90 170, 80 140, 60 100, 66 125, 50 140, 40 160), the third one (110 130, 160 50, 140 50, 120 33, 90 30, 50 10, 60 60, 90 70, 90 100, 110 130), and the fourth one (160 150, 150 120, 160 90, 160 50, 110 130, 160 150). Somehow process these shapes to adjust their details with a tolerance of 30, and see what they turn into."}
{"id": 561, "function": "ST_CoverageUnion", "question": "找出这些五个形状合并后的一种文本表达方式吧：形状包括像(10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10)这样的，还有(120 10, 10 10, 50 60, 100 70, 120 10)，以及(140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80)，再有(140 190, 120 170, 140 130, 160 150, 140 190)，最后是(180 160, 170 140, 140 130, 160 150, 140 190, 180 160)。", "sql": "WITH coverage(id, geom) AS (VALUES (1, 'POLYGON ((10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10))'::geometry), (2, 'POLYGON ((120 10, 10 10, 50 60, 100 70, 120 10))'::geometry), (3, 'POLYGON ((140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80))'::geometry), (4, 'POLYGON ((140 190, 120 170, 140 130, 160 150, 140 190))'::geometry), (5, 'POLYGON ((180 160, 170 140, 140 130, 160 150, 140 190, 180 160))'::geometry) ) SELECT ST_AsText(ST_CoverageUnion(geom)) FROM coverage;", "execution_result": [["MULTIPOLYGON(((10 150,80 190,110 150,140 80,120 10,10 10,10 150),(50 60,100 70,40 110,50 60)),((120 170,140 190,180 160,170 140,140 130,120 170)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2937, "question_en": "Find a way to express these five shapes in text after combining them: the shapes include ones like (10 10, 10 150, 80 190, 110 150, 90 110, 40 110, 50 60, 10 10), and (120 10, 10 10, 50 60, 100 70, 120 10), as well as (140 80, 120 10, 100 70, 40 110, 90 110, 110 150, 140 80), then (140 190, 120 170, 140 130, 160 150, 140 190), and finally (180 160, 170 140, 140 130, 160 150, 140 190, 180 160)."}
{"id": 562, "function": "ST_Affine", "question": "把那条从(1 2 3)到(1 4 3)的小线，通过一些旋转和变化，看看它们以EWKT格式会变成什么样子。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0, 1, 0, 0, 0)) AS using_affine,    ST_AsEWKT(ST_Rotate(geom, pi())) AS using_rotate FROM (  SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 -2 3,-1 -4 3)", "LINESTRING(-1 -2 3,-1 -4 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2943, "question_en": "Take that little line from (1 2 3) to (1 4 3) and see what it looks like in EWKT format after some rotation and transformation."}
{"id": 563, "function": "ST_Affine", "question": "把那条有点像线的东西，经过某种旋转和移动的处理，包含一些像cos(pi())和-sin(pi())这样的神秘数字，然后告诉我结果是什么样的，格式要特别一点。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0)) FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') As geom) As foo;", "execution_result": [["LINESTRING(-1 -2 -3,-1 -4 -3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2948, "question_en": "Take that thing that resembles a line, apply some sort of twist and shift using mysterious numbers like cos(pi()) and -sin(pi()), then let me know what the result looks like, and make sure the format is a bit special."}
{"id": 562, "function": "ST_Affine", "question": "对三维线条LINESTRING(1 2 3, 1 4 3)做两种不同的旋转：一种是用一种变化方式，涉及到一些像cos(π)和sin(π)这样的数值调整，另一种是绕着某个轴转上π弧度。用某种格式看看它们的结果。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0, 1, 0, 0, 0)) AS using_affine, ST_AsEWKT(ST_Rotate(geom, pi())) AS using_rotate FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 -2 3,-1 -4 3)", "LINESTRING(-1 -2 3,-1 -4 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2940, "question_en": "For the 3D line LINESTRING(1 2 3, 1 4 3), apply two different kinds of spins: one involves some transformation with values like cos(π) and sin(π), and the other spins around some axis by π radians. Check out their results in some format."}
{"id": 563, "function": "ST_Affine", "question": "对于那条三维的线，像是从(1 2 3)到(1 4 3)的，做一些像旋转和移动的操作吧，用那些带有π的角度变换，最后看看结果是什么样子。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0)) FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') As geom) As foo;", "execution_result": [["LINESTRING(-1 -2 -3,-1 -4 -3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2946, "question_en": "For that 3D line, like from (1 2 3) to (1 4 3), do some operations like rotation and shifting using those angles with π, and finally see what the result looks like."}
{"id": 563, "function": "ST_Affine", "question": "对那个有两个点的线形状，使用一个有12个数和三角小数的变换来看看它的完整描述是什么样子。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0)) FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') As geom) As foo;", "execution_result": [["LINESTRING(-1 -2 -3,-1 -4 -3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2950, "question_en": "For that line shape with two points, use a transformation with 12 numbers and trigonometric decimals to see what its full description looks like."}
{"id": 562, "function": "ST_Affine", "question": "给我看看这个三维线段LINESTRING(1 2 3, 1 4 3)在经过两个旋转变化后的样子。第一个变化是用一些数学方法，涉及12个数字，其中某些数字跟圆周上的点有关。第二个变化就像转动这个线段一圈。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0, 1, 0, 0, 0)) AS using_affine,    ST_AsEWKT(ST_Rotate(geom, pi())) AS using_rotate FROM (  SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 -2 3,-1 -4 3)", "LINESTRING(-1 -2 3,-1 -4 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2944, "question_en": "Show me how this 3D line segment LINESTRING(1 2 3, 1 4 3) looks after undergoing two rotation changes. The first change uses some mathematical method involving 12 numbers, where some numbers relate to points on a circle. The second change is like spinning the line segment around."}
{"id": 562, "function": "ST_Affine", "question": "拿着那条三维线LINESTRING(1 2 3, 1 4 3)，用一种有12个参数的方式变换一下，像是用cos(π)和sin(π)来转一转，还有用π弧度来再转一次，然后看看它们的结果长什么样，记得要标出有没有SRID哦，没的话也要说清楚。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0, 1, 0, 0, 0)) AS using_affine,    ST_AsEWKT(ST_Rotate(geom, pi())) AS using_rotate FROM (  SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 -2 3,-1 -4 3)", "LINESTRING(-1 -2 3,-1 -4 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2945, "question_en": "Take that 3D line LINESTRING(1 2 3, 1 4 3) and transform it using a method with 12 parameters, kind of turning it with cos(π) and sin(π), and then turning it again with π radians. Then see what the results look like, remembering to indicate whether there is SRID, and make it clear if there isn't."}
{"id": 563, "function": "ST_Affine", "question": "把那条经过一些旋转和移动的空间线段LINESTRING(1 2 3, 1 4 3)变成一个特别的格式，旋转的参数涉及到π和一些零。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0)) FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') As geom) As foo;", "execution_result": [["LINESTRING(-1 -2 -3,-1 -4 -3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2951, "question_en": "Convert that spatial line LINESTRING(1 2 3, 1 4 3) after some rotation and movement into a special format, where the rotation parameters involve π and some zeros."}
{"id": 563, "function": "ST_Affine", "question": "用这些数字：cos(π)、-sin(π)、0、sin(π)、cos(π)、-sin(π)、0、sin(π)、cos(π)、0、0、0，来变换那条从(1 2 3)到(1 4 3)的小线，结果是什么呢？", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0)) FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') As geom) As foo;", "execution_result": [["LINESTRING(-1 -2 -3,-1 -4 -3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2949, "question_en": "Using these numbers: cos(π), -sin(π), 0, sin(π), cos(π), -sin(π), 0, sin(π), cos(π), 0, 0, 0, to transform that little line from (1 2 3) to (1 4 3), what is the result?"}
{"id": 562, "function": "ST_Affine", "question": "对于由两个点组成的线段，点的坐标是(1 2 3)和(1 4 3)，我们来看看用一种神秘的方式变换它。首先，想象一下用一些三角值来变换它，具体的顺序有点复杂。然后，我们再试着让它在Z轴上转个圈。最后，把这两种变化的结果用一种特别的格式展示出来，要记得包含高度信息哦。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0, 1, 0, 0, 0)) AS using_affine, ST_AsEWKT(ST_Rotate(geom, pi())) AS using_rotate FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 -2 3,-1 -4 3)", "LINESTRING(-1 -2 3,-1 -4 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2942, "question_en": "For the segment formed by two points, with coordinates (1 2 3) and (1 4 3), let's see how it transforms in a mysterious way. First, imagine transforming it using some trigonometric values, with a somewhat complex order. Then, try spinning it around the Z-axis. Finally, show the results of these two transformations in a special format, and remember to include the height information."}
{"id": 557, "function": "ST_VoronoiPolygons", "question": "用一些坐标像是(50 30), (60 30), (100 100), (10 150), (110 120)来生成一种图形，考虑一个30的距离来调整那些边，然后以一种标准方式输出结果。", "sql": "SELECT ST_VoronoiPolygons( 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry, 30) AS geom;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2921, "question_en": "Using some coordinates like (50 30), (60 30), (100 100), (10 150), (110 120) to create a kind of shape, adjusting those edges with a distance of 30, then output the result in a standard way."}
{"id": 564, "function": "ST_Rotate", "question": "把那条由点(50 160, 50 50, 100 50)组成的线，围绕中心点逆着时钟的方向转半圈，然后用某种格式把结果说出来。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()));", "execution_result": [["LINESTRING(-50.00000000000002 -160,-50.00000000000001 -49.99999999999999,-100 -49.999999999999986)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2952, "question_en": "Take that line made of points (50 160, 50 50, 100 50), spin it halfway around the central point counter to the clock, and then describe the result in some format."}
{"id": 564, "function": "ST_Rotate", "question": "能不能用一种特别的格式来描述一下，那条经过π弧度旋转的折线，原本是由这些点构成的：50 160, 50 50, 100 50？", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()));", "execution_result": [["LINESTRING(-50.00000000000002 -160,-50.00000000000001 -49.99999999999999,-100 -49.999999999999986)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2956, "question_en": "Could you describe in a special format, that line which is rotated by π radians, originally made up of these points: 50 160, 50 50, 100 50?"}
{"id": 564, "function": "ST_Rotate", "question": "有一条线跑过(50 160)、(50 50)、(100 50)，绕着中心点转个180度，看看它的完整描述会是什么样子。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()));", "execution_result": [["LINESTRING(-50.00000000000002 -160,-50.00000000000001 -49.99999999999999,-100 -49.999999999999986)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2957, "question_en": "There's a line passing through (50 160), (50 50), (100 50), and if it spins around the center by 180 degrees, what would its complete description look like?"}
{"id": 565, "function": "ST_Rotate", "question": "有一条从(50 160)开始，经过(50 50)到(100 50)的线段，绕着(50,160)那个点逆时针转30度，问转完之后它会变成什么样？", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()/6, 50, 160));", "execution_result": [["LINESTRING(50 160,104.99999999999999 64.73720558371174,148.30127018922192 89.73720558371173)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2960, "question_en": "There's a line starting at (50 160), passing through (50 50) to (100 50), and it rotates counterclockwise by 30 degrees around the point (50, 160). What does it look like after the rotation?"}
{"id": 564, "function": "ST_Rotate", "question": "把那些点(50 160)、(50 50)和(100 50)组成的线，绕着中心转个大角度，最后要看到那个特别的格式。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()));", "execution_result": [["LINESTRING(-50.00000000000002 -160,-50.00000000000001 -49.99999999999999,-100 -49.999999999999986)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2953, "question_en": "Take those points (50 160), (50 50), and (100 50) that form a line, spin it around the center by a large angle, and finally get to see it in that special format."}
{"id": 564, "function": "ST_Rotate", "question": "有个形状连着50 160、50 50和100 50这些小点，试着把它转一下，像转饼一样，转3.14159的弧度，然后看看能不能得到一个带编号的文字描述。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()));", "execution_result": [["LINESTRING(-50.00000000000002 -160,-50.00000000000001 -49.99999999999999,-100 -49.999999999999986)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2954, "question_en": "There's a shape connected by little dots at 50 160, 50 50, and 100 50. Try rotating it, like spinning a pancake, by 3.14159 radians, and see if you can get a text description with a number attached."}
{"id": 565, "function": "ST_Rotate", "question": "把那条由点(50 160, 50 50, 100 50)连成的线，绕着点(50,160)转一转，逆时针大概30度，然后用一种格式说出来。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()/6, 50, 160));", "execution_result": [["LINESTRING(50 160,104.99999999999999 64.73720558371174,148.30127018922192 89.73720558371173)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2958, "question_en": "Take that line made up of points (50 160, 50 50, 100 50), give it a spin around the point (50,160), about 30 degrees counterclockwise, and then express it in some format."}
{"id": 565, "function": "ST_Rotate", "question": "想象一下有一条连接了(50 160)、(50 50)、(100 50)的小线段，把它绕着(50,160)这个点逆时针转个π/6的角度，然后告诉我这个转过后的样子是啥。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()/6, 50, 160));", "execution_result": [["LINESTRING(50 160,104.99999999999999 64.73720558371174,148.30127018922192 89.73720558371173)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2959, "question_en": "Imagine a little line connecting (50 160), (50 50), and (100 50). Spin it counterclockwise around the point (50, 160) by an angle of π/6, and then let me know what it looks like after the spin."}
{"id": 564, "function": "ST_Rotate", "question": "把那条线，像是从(50 160)到(50 50)再到(100 50)的，绕着原点转半圈，结果是什么样的长字符串？", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()));", "execution_result": [["LINESTRING(-50.00000000000002 -160,-50.00000000000001 -49.99999999999999,-100 -49.999999999999986)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2955, "question_en": "What would that line, like going from (50 160) to (50 50) and then to (100 50), look like as a long string after spinning half a circle around the origin?"}
{"id": 565, "function": "ST_Rotate", "question": "你能找出那条由(50 160, 50 50, 100 50)这几个点组成的线，在(50,160)这个点附近绕着逆时针转了π/6弧度后，变成了什么样子吗？用那种EWKT的表达方式告诉我。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()/6, 50, 160));", "execution_result": [["LINESTRING(50 160,104.99999999999999 64.73720558371174,148.30127018922192 89.73720558371173)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2961, "question_en": "Can you figure out what the line made of points (50 160, 50 50, 100 50) looks like after it spins counterclockwise by π/6 radians around the nearby point (50,160)? Let me know in that EWKT way."}
{"id": 563, "function": "ST_Affine", "question": "把一个有点复杂的线条，像LINESTRING(1 2 3, 1 4 3)那样的，绕着某个轴转个π弧度，不过别移动它。那些数值像是cos和sin的组合，最后用一种特别的格式展示出来。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0)) FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') As geom) As foo;", "execution_result": [["LINESTRING(-1 -2 -3,-1 -4 -3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2947, "question_en": "Take a somewhat complex line, like LINESTRING(1 2 3, 1 4 3), and spin it around an axis by π radians, but don't shift it. Those numbers are like a mix of cos and sin, then show it in a special format."}
{"id": 565, "function": "ST_Rotate", "question": "请给我那些点构成的线段，围绕着(50,160)这个点，逆着时钟转了30度后的样子，用某种长得像EWKT的格式写出来。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()/6, 50, 160));", "execution_result": [["LINESTRING(50 160,104.99999999999999 64.73720558371174,148.30127018922192 89.73720558371173)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2962, "question_en": "Could you show me what the line made of those points looks like after it turns 30 degrees around the point (50,160) in a format that resembles EWKT?"}
{"id": 566, "function": "ST_Rotate", "question": "将那些坐标点组成的线段绕它们的中心点逆时针转动60度，然后用某种格式显示出来。", "sql": "SELECT ST_AsEWKT(ST_Rotate(geom, -pi()/3, ST_Centroid(geom))) \nFROM (SELECT 'LINESTRING (50 160, 50 50, 100 50)'::geometry AS geom) AS foo;", "execution_result": [["LINESTRING(116.42245883568916 130.67207346706593,21.15966441940092 75.67207346706593,46.15966441940093 32.370803277844)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2964, "question_en": "Take those points forming a line and spin them 60 degrees counterclockwise around their center, then show it in some format."}
{"id": 566, "function": "ST_Rotate", "question": "想象一下由这些点（50 160, 50 50, 100 50）画出的线，把它绕着它自己的中心逆时针转60度，告诉我它最后的样子，用一种特别的格式。", "sql": "SELECT ST_AsEWKT(ST_Rotate(geom, -pi()/3, ST_Centroid(geom))) \nFROM (SELECT 'LINESTRING (50 160, 50 50, 100 50)'::geometry AS geom) AS foo;", "execution_result": [["LINESTRING(116.42245883568916 130.67207346706593,21.15966441940092 75.67207346706593,46.15966441940093 32.370803277844)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2966, "question_en": "Imagine a line drawn with these points (50 160, 50 50, 100 50), spin it 60 degrees counterclockwise around its own center, and tell me how it looks in a special format."}
{"id": 566, "function": "ST_Rotate", "question": "把那条连接了(50 160), (50 50), (100 50)的小线，以它的中心点为轴心，顺时针转动一点点，看看转完后的样子是啥？", "sql": "SELECT ST_AsEWKT(ST_Rotate(geom, -pi()/3, ST_Centroid(geom))) \nFROM (SELECT 'LINESTRING (50 160, 50 50, 100 50)'::geometry AS geom) AS foo;", "execution_result": [["LINESTRING(116.42245883568916 130.67207346706593,21.15966441940092 75.67207346706593,46.15966441940093 32.370803277844)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2965, "question_en": "Take the little line connecting (50 160), (50 50), (100 50), spin it around its center point in a clockwise direction a bit, and see what it looks like after spinning?"}
{"id": 566, "function": "ST_Rotate", "question": "给出那些点(50 160, 50 50, 100 50)围绕它们的中心转了一圈π/3弧度后的形状的特殊格式。", "sql": "SELECT ST_AsEWKT(ST_Rotate(geom, -pi()/3, ST_Centroid(geom))) \nFROM (SELECT 'LINESTRING (50 160, 50 50, 100 50)'::geometry AS geom) AS foo;", "execution_result": [["LINESTRING(116.42245883568916 130.67207346706593,21.15966441940092 75.67207346706593,46.15966441940093 32.370803277844)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2967, "question_en": "Provide the special format for those points (50 160, 50 50, 100 50) after they've spun around their center by π/3 radians."}
{"id": 565, "function": "ST_Rotate", "question": "有一个由三个小点组成的线段：在(50 160)、(50 50)、(100 50)，以第一个点(50,160)为中心转个30度，想看看它的扩展样子是什么。", "sql": "SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()/6, 50, 160));", "execution_result": [["LINESTRING(50 160,104.99999999999999 64.73720558371174,148.30127018922192 89.73720558371173)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2963, "question_en": "There's a line made of three little dots at (50 160), (50 50), (100 50). Rotate it around the first dot (50,160) by 30 degrees and see what its expanded form looks like."}
{"id": 567, "function": "ST_RotateX", "question": "把那个三维线条(1 2 3, 1 1 1)绕着X轴转个90度，也就是π/2的样子，然后看看转完后的样子。", "sql": "SELECT ST_AsEWKT(ST_RotateX(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(1 -3 2,1 -1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2972, "question_en": "Spin that 3D line (1 2 3, 1 1 1) around the X-axis by 90 degrees, like π/2, and see what it looks like after turning."}
{"id": 566, "function": "ST_Rotate", "question": "想象一下有一些点连接成了一条线，在它们的中心附近逆时针转动1.04719755弧度后，这条线会在哪里？然后以一种包含特殊编号的文本形式告诉我结果。", "sql": "SELECT ST_AsEWKT(ST_Rotate(geom, -pi()/3, ST_Centroid(geom))) \nFROM (SELECT 'LINESTRING (50 160, 50 50, 100 50)'::geometry AS geom) AS foo;", "execution_result": [["LINESTRING(116.42245883568916 130.67207346706593,21.15966441940092 75.67207346706593,46.15966441940093 32.370803277844)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2969, "question_en": "Imagine some points connected into a line, and after rotating counterclockwise by 1.04719755 radians near their center, where would this line be? Then tell me the result in a text format that includes a special number."}
{"id": 567, "function": "ST_RotateX", "question": "把连接点(1 2 3)和点(1 1 1)的线绕着X轴转个角度，大约是π/2的样子，然后看看它变成了什么样子，用一种特殊的格式表达出来吧。", "sql": "SELECT ST_AsEWKT(ST_RotateX(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(1 -3 2,1 -1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2971, "question_en": "Take the line connecting the points (1 2 3) and (1 1 1), spin it around the X-axis by an angle roughly like π/2, and see what it looks like afterwards, expressed in a special format."}
{"id": 567, "function": "ST_RotateX", "question": "把那个3D的线条，就像从1 2 3到1 1 1的，绕着X轴转个90度，然后用特别的方式写出来。", "sql": "SELECT ST_AsEWKT(ST_RotateX(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(1 -3 2,1 -1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2970, "question_en": "Take that 3D line, like from 1 2 3 to 1 1 1, spin it around the X-axis by 90 degrees, and then write it out in a special way."}
{"id": 562, "function": "ST_Affine", "question": "对比一下3D线段LINESTRING(1 2 3, 1 4 3)在两种旋转方式下的结果：一种是用一些参数来微调，像是用cos(π)和sin(π)去影响那些轴的伸缩和倾斜；另一种是直接绕着Z轴转个π弧度。把结果用EWKT的方式展示出来。", "sql": "SELECT ST_AsEWKT(ST_Affine(geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0, 1, 0, 0, 0)) AS using_affine, ST_AsEWKT(ST_Rotate(geom, pi())) AS using_rotate FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') AS geom) AS foo;", "execution_result": [["LINESTRING(-1 -2 3,-1 -4 3)", "LINESTRING(-1 -2 3,-1 -4 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2941, "question_en": "Compare what happens to the 3D line LINESTRING(1 2 3, 1 4 3) when you spin it in two ways: one way uses some numbers to tweak things, like using cos(π) and sin(π) to mess with the stretching and tilting of those axes; the other way just spins around the Z-axis by π radians. Show the results in that EWKT style."}
{"id": 567, "function": "ST_RotateX", "question": "如果你把那些坐标(1 2 3, 1 1 1)绕水平线转了半个圆，能给我它们变化后的那种字符串吗？", "sql": "SELECT ST_AsEWKT(ST_RotateX(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(1 -3 2,1 -1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2973, "question_en": "If you spin those coordinates (1 2 3, 1 1 1) around a horizontal line by half a circle, can you give me the string of what they become?"}
{"id": 567, "function": "ST_RotateX", "question": "把那条三维的线，从点(1 2 3)到(1 1 1)，绕着X轴转个90度，然后看看它的长长的描述是什么。", "sql": "SELECT ST_AsEWKT(ST_RotateX(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(1 -3 2,1 -1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2974, "question_en": "Take that 3D line, from point (1 2 3) to (1 1 1), spin it 90 degrees around the X-axis, and see what its long description is."}
{"id": 567, "function": "ST_RotateX", "question": "想象一下有个连接两个点(1 2 3)和(1 1 1)的线条，绕着那个横着的轴转个角度，大概是π/2吧，然后看看它变成了什么样子，输出结果。", "sql": "SELECT ST_AsEWKT(ST_RotateX(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(1 -3 2,1 -1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2975, "question_en": "Imagine a line connecting two points (1 2 3) and (1 1 1), and it spins around that horizontal axis at an angle, about π/2, then see what it turns into, and output the result."}
{"id": 568, "function": "ST_RotateY", "question": "把那条从1 2 3到1 1 1的线在Y轴上转个90度，然后看看它转完后的样子。", "sql": "SELECT ST_AsEWKT(ST_RotateY(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(3 2 -1,1 1 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2978, "question_en": "Take the line from 1 2 3 to 1 1 1, spin it 90 degrees around the Y-axis, and see how it looks after the spin."}
{"id": 568, "function": "ST_RotateY", "question": "想象一条从(1 2 3)到(1 1 1)的线，绕着垂直方向转个直角，看看它变成什么样子，用另一种格式说出来。", "sql": "SELECT ST_AsEWKT(ST_RotateY(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(3 2 -1,1 1 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2977, "question_en": "Imagine a line from (1 2 3) to (1 1 1), turning around the vertical direction by a right angle, and see what it looks like in another format."}
{"id": 568, "function": "ST_RotateY", "question": "把那条从(1 2 3)到(1 1 1)的线，在Y轴旁边转个90度，看看它变成什么样，记得用一种特别格式来描述。", "sql": "SELECT ST_AsEWKT(ST_RotateY(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(3 2 -1,1 1 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2976, "question_en": "Take that line from (1 2 3) to (1 1 1) and spin it 90 degrees around the Y-axis, then see what it looks like in a special format."}
{"id": 568, "function": "ST_RotateY", "question": "想象有一串数字排成线，像是(1 2 3, 1 1 1)，把它绕着中间的竖线转个90度，然后看看它变成了什么样子，用一种特别的格式来描述。", "sql": "SELECT ST_AsEWKT(ST_RotateY(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(3 2 -1,1 1 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2980, "question_en": "Imagine a sequence of numbers lined up like (1 2 3, 1 1 1), rotate it around the middle vertical line by 90 degrees, and see what it turns into, described in a special format."}
{"id": 566, "function": "ST_Rotate", "question": "把那条线形状，像这样：从(50 160)到(50 50)再到(100 50)，绕着它自己的中心点转个小圈，逆着时针转60度，然后告诉我它的特别格式结果。", "sql": "SELECT ST_AsEWKT(ST_Rotate(geom, -pi()/3, ST_Centroid(geom))) \nFROM (SELECT 'LINESTRING (50 160, 50 50, 100 50)'::geometry AS geom) AS foo;", "execution_result": [["LINESTRING(116.42245883568916 130.67207346706593,21.15966441940092 75.67207346706593,46.15966441940093 32.370803277844)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2968, "question_en": "Take that line shape, like this: going from (50 160) to (50 50) and then to (100 50), spin it a bit around its own center point, turning 60 degrees counterclockwise, and then tell me its special format result."}
{"id": 569, "function": "ST_RotateZ", "question": "把那个由点(1 2 3)和(1 1 1)组成的线在Z轴上转个90度，然后用某种格式来看看结果。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(-2 1 3,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2982, "question_en": "Turn that line made of points (1 2 3) and (1 1 1) around the Z-axis by 90 degrees, then let's see the result in some format."}
{"id": 568, "function": "ST_RotateY", "question": "如果你把那条从(1 2 3)到(1 1 1)的三维线，绕着Y轴转了半圈，能给我它的新样子吗？用那种特别的格式哦。", "sql": "SELECT ST_AsEWKT(ST_RotateY(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(3 2 -1,1 1 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2979, "question_en": "If you take that 3D line from (1 2 3) to (1 1 1) and spin it halfway around the Y-axis, can you tell me what it looks like now? In that special format, please."}
{"id": 570, "function": "ST_RotateZ", "question": "在234和567这两个数字围成的地方，想象一个范围是3的区域，把这个区域变成弯弯曲曲的样子，然后绕着像Z这样的轴转90度，最后用一种特定的方式描述这个形状。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(geom, pi()/2)) \nFROM (SELECT ST_LineToCurve(ST_Buffer(ST_GeomFromText('POINT(234 567)'), 3)) As geom) As foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(-567 237.00000000000003,-567 231.00000000000003,-567 237.00000000000003))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2988, "question_en": "Imagine a space around the numbers 234 and 567 with a range of 3, turn this space into something curvy, then spin it 90 degrees around an axis like Z, and finally describe this shape in a special way."}
{"id": 568, "function": "ST_RotateY", "question": "给出那条从点(1, 2, 3)到点(1, 1, 1)的线，想知道如果它绕着那个竖直的Y轴转了一下，具体是转了π/2，结果会是什么样子，然后用一种带编号的文本格式告诉我。", "sql": "SELECT ST_AsEWKT(ST_RotateY(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(3 2 -1,1 1 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2981, "question_en": "Given the line from point (1, 2, 3) to point (1, 1, 1), I want to know what it looks like if it spins around that upright Y-axis, specifically by π/2, and then tell me the result in a numbered text format."}
{"id": 569, "function": "ST_RotateZ", "question": "把连接点(1,2,3)和(1,1,1)的线绕着Z轴转一下，转个大概π/2的样子，看看它变成什么形状，用那种长得像EWKT的格式告诉我。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(-2 1 3,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2983, "question_en": "Spin the line connecting the points (1,2,3) and (1,1,1) around the Z-axis, about π/2, and see what shape it turns into, telling me in that format that looks like EWKT."}
{"id": 569, "function": "ST_RotateZ", "question": "把那条连接点(1 2 3)和(1 1 1)的三维线，绕着竖直方向转半圈，想知道它的新姿态吗？", "sql": "SELECT ST_AsEWKT(ST_RotateZ(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(-2 1 3,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2985, "question_en": "There's a 3D line connecting (1 2 3) and (1 1 1), spin it halfway around the vertical line and curious about its new stance?"}
{"id": 569, "function": "ST_RotateZ", "question": "有一条连接两个三维小点(1 2 3)和(1 1 1)的线，想象它围绕着Z轴转了个弯，看看这个变化后的样子是什么，给我那个格式的结果。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(-2 1 3,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2986, "question_en": "There's a line connecting two small 3D dots (1 2 3) and (1 1 1), imagine it twists around the Z-axis, show me what it looks like after the turn in that format."}
{"id": 569, "function": "ST_RotateZ", "question": "把那个包括点(1 2 3)和点(1 1 1)的空间线段绕着垂直线转个弧度，看它变成什么样子，然后用一种特别格式告诉我。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(-2 1 3,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2987, "question_en": "Take that spatial line with the points (1 2 3) and (1 1 1), spin it around a vertical line for a radian, see what it turns into, and tell me in a special format."}
{"id": 570, "function": "ST_RotateZ", "question": "在234和567这个点周围画个半径为3的圈，然后把这个圈变成曲线，再围着Z轴转个90度，最后给我看一下它变成啥样子。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(geom, pi()/2)) \nFROM (SELECT ST_LineToCurve(ST_Buffer(ST_GeomFromText('POINT(234 567)'), 3)) As geom) As foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(-567 237.00000000000003,-567 231.00000000000003,-567 237.00000000000003))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2989, "question_en": "Draw a circle with a radius of 3 around the point at 234 and 567, then turn that circle into a curve, spin it 90 degrees around the Z-axis, and show me what it looks like in the end."}
{"id": 570, "function": "ST_RotateZ", "question": "想象在点(234 567)周围画一个圆圈，半径是3，然后把这个圆圈的边缘变成弯弯曲曲的样子，再围绕Z轴转半圈，最后以一种包含某种标识的格式返回结果。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(geom, pi()/2)) \nFROM (SELECT ST_LineToCurve(ST_Buffer(ST_GeomFromText('POINT(234 567)'), 3)) As geom) As foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(-567 237.00000000000003,-567 231.00000000000003,-567 237.00000000000003))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2990, "question_en": "Imagine drawing a circle around the point (234 567) with a radius of 3, then turning the edge of this circle into a curvy form, rotating it half a turn around the Z-axis, and finally returning the result in a format that includes some kind of identifier."}
{"id": 571, "function": "ST_Scale", "question": "把那个三维的线段，像是从(1 2 3)到(1 1 1)这样，分别在X、Y、Z方向上缩小到0.5、0.75和0.8倍，然后看看它用EWKT方式怎么表示。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75, 0.8));", "execution_result": [["LINESTRING(0.5 1.5 2.4,0.5 0.75 0.8)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2994, "question_en": "Take that 3D line, like from (1 2 3) to (1 1 1), and shrink it by 0.5, 0.75, and 0.8 times in the X, Y, and Z directions, then see how it looks in EWKT format."}
{"id": 570, "function": "ST_RotateZ", "question": "把坐标点(234 567)弄成一个周围3单位宽的形状，再让它绕Z轴转个π/2弧度，最后看看结果里都有什么几何内容？", "sql": "SELECT ST_AsEWKT(ST_RotateZ(geom, pi()/2)) \nFROM (SELECT ST_LineToCurve(ST_Buffer(ST_GeomFromText('POINT(234 567)'), 3)) As geom) As foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(-567 237.00000000000003,-567 231.00000000000003,-567 237.00000000000003))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2993, "question_en": "Take the point at (234 567), make a shape around it with a width of 3 units, then spin it π/2 radians around the Z-axis, and check what geometric details are in the result?"}
{"id": 571, "function": "ST_Scale", "question": "有一条空间线从这里到那边，经过一些缩小或拉伸（分别是0.5、0.75、0.8），能给我个结果吗？", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75, 0.8));", "execution_result": [["LINESTRING(0.5 1.5 2.4,0.5 0.75 0.8)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2998, "question_en": "There's a spatial line going from here to there, after some shrinking or stretching (0.5, 0.75, 0.8 respectively), can you give me the result?"}
{"id": 571, "function": "ST_Scale", "question": "把三维的那条线段，像橡皮泥一样捏一捏，X方向缩成0.5倍，Y方向缩成0.75倍，Z方向缩成0.8倍，然后看看它的EWKT样子。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75, 0.8));", "execution_result": [["LINESTRING(0.5 1.5 2.4,0.5 0.75 0.8)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2996, "question_en": "Take that 3D line and squish it like clay, making the X direction 0.5 times, Y direction 0.75 times, Z direction 0.8 times, then see its EWKT form."}
{"id": 570, "function": "ST_RotateZ", "question": "把一个从点(234 567)出发，先画个半径是3的小圈，然后变成曲线，再绕着Z轴转90度的形状，用某种格式写出来。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(geom, pi()/2)) \nFROM (SELECT ST_LineToCurve(ST_Buffer(ST_GeomFromText('POINT(234 567)'), 3)) As geom) As foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(-567 237.00000000000003,-567 231.00000000000003,-567 237.00000000000003))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2992, "question_en": "Write out in some format a shape that starts from point (234 567), first draws a small circle with a radius of 3, then turns into a curve, and finally rotates 90 degrees around the Z-axis."}
{"id": 571, "function": "ST_Scale", "question": "想象一条在空中漂浮的线，从(1 2 3)到(1 1 1)的那种，把它在X上缩小一半，在Y上缩小四分之一，在Z上缩小一点点，结果要用某种格式表达出来。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75, 0.8));", "execution_result": [["LINESTRING(0.5 1.5 2.4,0.5 0.75 0.8)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2997, "question_en": "Imagine a line floating in the air, from (1 2 3) to (1 1 1), shrink it half on X, shrink a quarter on Y, and shrink a little on Z, and express the result in some format."}
{"id": 570, "function": "ST_RotateZ", "question": "把那块从坐标(234 567)出发、半径3的圆形区域，变成弯曲的样子，再绕着Z轴转个90度，最后给出它的EWKT格式。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(geom, pi()/2)) \nFROM (SELECT ST_LineToCurve(ST_Buffer(ST_GeomFromText('POINT(234 567)'), 3)) As geom) As foo;", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(-567 237.00000000000003,-567 231.00000000000003,-567 237.00000000000003))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2991, "question_en": "Take that circular area starting from coordinates (234 567) with a radius of 3, make it curved, then spin it 90 degrees around the Z-axis, and finally give its EWKT format."}
{"id": 572, "function": "ST_Scale", "question": "对于那条从(1 2 3)到(1 1 1)的三维线，做个缩放，把横向的数值减半，竖向的减少四分之一，深度不变，最后用某种格式看看变化后是什么样。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75));", "execution_result": [["LINESTRING(0.5 1.5 3,0.5 0.75 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3001, "question_en": "For that 3D line from (1 2 3) to (1 1 1), do a resizing, cut the sideways number in half, reduce the up-down one by a quarter, leave the depth as is, and finally see what it looks like in some format."}
{"id": 572, "function": "ST_Scale", "question": "想象一个三维的线条，从(1, 2, 3)到(1, 1, 1)，把它横着压缩一半，竖着压缩一点点，保持上下来不动，然后告诉我它变成什么样子。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75));", "execution_result": [["LINESTRING(0.5 1.5 3,0.5 0.75 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3002, "question_en": "Imagine a 3D line from (1, 2, 3) to (1, 1, 1), squish it halfway horizontally, a bit vertically, keep the up-down unchanged, and then tell me what it looks like."}
{"id": 571, "function": "ST_Scale", "question": "拿一个连接点(1 2 3)和点(1 1 1)的长条，在X、Y、Z方向上分别压缩到0.5、0.75、0.8的比例，然后看看它变成什么样子的EWKT形式。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75, 0.8));", "execution_result": [["LINESTRING(0.5 1.5 2.4,0.5 0.75 0.8)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2995, "question_en": "Take a long strip connecting point (1 2 3) and point (1 1 1), compress it in the X, Y, and Z directions to ratios of 0.5, 0.75, and 0.8 respectively, and then see what it looks like in EWKT form."}
{"id": 571, "function": "ST_Scale", "question": "把那条空间线上的X、Y、Z坐标分别缩小一点，X乘0.5，Y乘0.75，Z乘0.8，然后看看它的完整描述是什么样的。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75, 0.8));", "execution_result": [["LINESTRING(0.5 1.5 2.4,0.5 0.75 0.8)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2999, "question_en": "Shrink the X, Y, Z coordinates of that space line a bit, X by 0.5, Y by 0.75, Z by 0.8, then see what its complete description looks like."}
{"id": 572, "function": "ST_Scale", "question": "如果你把那些点连成的线在X方向缩小到一半，Y方向变成四分之三，最后得到的是什么样子的字符串格式？", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75));", "execution_result": [["LINESTRING(0.5 1.5 3,0.5 0.75 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3003, "question_en": "If you shrink the line made of those points to half in the X direction and three-quarters in the Y direction, what kind of string format do you get in the end?"}
{"id": 572, "function": "ST_Scale", "question": "把那个3D的线段，像是从点(1 2 3)到点(1 1 1)的那种，在X方向缩小到一半，Y方向缩小到四分之三，Z方向就别动它，然后用某种格式来输出结果。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75));", "execution_result": [["LINESTRING(0.5 1.5 3,0.5 0.75 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3000, "question_en": "Take that 3D line segment, like the one from point (1 2 3) to point (1 1 1), shrink it to half in the X direction and three-quarters in the Y direction, but don't touch the Z direction, then output the result in some kind of format."}
{"id": 572, "function": "ST_Scale", "question": "把那根从点(1 2 3)到点(1 1 1)的三维线，沿着X方向缩小一半，Y方向缩小到四分之三，然后告诉我它的新样子。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75));", "execution_result": [["LINESTRING(0.5 1.5 3,0.5 0.75 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3004, "question_en": "Take that 3D line from point (1 2 3) to point (1 1 1), shrink it in half along the X direction, and to three-quarters along the Y direction, then tell me what it looks like now."}
{"id": 572, "function": "ST_Scale", "question": "想象一下有两颗星星在太空中漂浮，它们的坐标是(1 2 3)和(1 1 1)，试着把它们的连接线在X方向缩小到一半，在Y方向缩小到四分之三，然后看看它的神秘形状是什么样子吧。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75));", "execution_result": [["LINESTRING(0.5 1.5 3,0.5 0.75 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3005, "question_en": "Imagine two stars floating in space, with coordinates (1 2 3) and (1 1 1). Try to shrink their connecting line to half in the X direction and three-quarters in the Y direction, and then see what its mysterious shape looks like."}
{"id": 573, "function": "ST_Scale", "question": "把那个有XYZM坐标的四维线条，像用0.5、0.75、2、-1这些数字调节大小那样，按照某个点的办法来缩放一下，然后用一种特别的格式展示结果。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)'), ST_MakePoint(0.5, 0.75, 2, -1)));", "execution_result": [["LINESTRING(0.5 1.5 6 -4,0.5 0.75 2 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3006, "question_en": "Take that 4D line with XYZM coordinates and resize it using numbers like 0.5, 0.75, 2, -1, similar to how you would adjust something with a certain point, then show the result in a special format."}
{"id": 573, "function": "ST_Scale", "question": "看看一条从1 2 3 4到1 1 1 1的四维线，经过0.5, 0.75, 2, -1这些奇怪的数值调整后，变成了什么样子，用一种特别的格式告诉我。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)'), ST_MakePoint(0.5, 0.75, 2, -1)));", "execution_result": [["LINESTRING(0.5 1.5 6 -4,0.5 0.75 2 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3010, "question_en": "Check out how a 4D line from 1 2 3 4 to 1 1 1 1 changes after being adjusted by those strange numbers 0.5, 0.75, 2, -1, and tell me in a special format."}
{"id": 569, "function": "ST_RotateZ", "question": "把那条三维线段LINESTRING(1 2 3, 1 1 1)转一转，就像绕着Z轴转个π/2的圈，最后看看它变成了什么样子。", "sql": "SELECT ST_AsEWKT(ST_RotateZ(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));", "execution_result": [["LINESTRING(-2 1 3,-1 1 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 2984, "question_en": "Take that 3D line LINESTRING(1 2 3, 1 1 1) and give it a spin around the Z-axis, like turning it by π/2, and see what it ends up looking like."}
{"id": 573, "function": "ST_Scale", "question": "把那些（1 2 3 4, 1 1 1 1）小点按照这样调整：横着缩小一半，竖着缩小四分之一，深度增加一倍，最后把它们的某个值变成负的，最后告诉我它们的新样子。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)'), ST_MakePoint(0.5, 0.75, 2, -1)));", "execution_result": [["LINESTRING(0.5 1.5 6 -4,0.5 0.75 2 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3009, "question_en": "Take those little points (1 2 3 4, 1 1 1 1) and adjust them like this: shrink them by half horizontally, reduce by a quarter vertically, double the depth, and finally turn one of their values negative. Then tell me their new look."}
{"id": 573, "function": "ST_Scale", "question": "把那条四维线段(1 2 3 4, 1 1 1 1)进行一些变化，像是让X减半，Y缩小到四分之三，Z变成两倍，M翻转，看看最后它变成什么样子。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)'), ST_MakePoint(0.5, 0.75, 2, -1)));", "execution_result": [["LINESTRING(0.5 1.5 6 -4,0.5 0.75 2 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3007, "question_en": "Transform that 4D line (1 2 3 4, 1 1 1 1) a bit, like halving X, shrinking Y to three-quarters, doubling Z, flipping M, and see what it looks like in the end."}
{"id": 574, "function": "ST_Scale", "question": "想象一条从(1 1)到(2 2)的线，把它用(2 2)这个点拉伸一下，以(1 1)这个点为中心，然后告诉我它的新样子。", "sql": "SELECT ST_AsText(ST_Scale('LINESTRING(1 1, 2 2)', 'POINT(2 2)', 'POINT(1 1)'::geometry));", "execution_result": [["LINESTRING(1 1,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3012, "question_en": "Imagine a line going from (1 1) to (2 2), stretch it using the point (2 2) with (1 1) as the center, and then let me know how it looks now."}
{"id": 574, "function": "ST_Scale", "question": "有一条从1 1到2 2的小线，用1 1这个点做参照，按照2 2给出的比例来调整它的大小，最后告诉我它变成了什么样子。", "sql": "SELECT ST_AsText(ST_Scale('LINESTRING(1 1, 2 2)', 'POINT(2 2)', 'POINT(1 1)'::geometry));", "execution_result": [["LINESTRING(1 1,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3013, "question_en": "There's a small line from 1 1 to 2 2. Use the point 1 1 as a reference, adjust its size according to the proportions given by 2 2, and finally tell me what it looks like."}
{"id": 574, "function": "ST_Scale", "question": "拿一个从1到1，再到2到2的线段，围绕着(1 1)这个点，按照(2 2)的比例放大，告诉我它变成什么形状。", "sql": "SELECT ST_AsText(ST_Scale('LINESTRING(1 1, 2 2)', 'POINT(2 2)', 'POINT(1 1)'::geometry));", "execution_result": [["LINESTRING(1 1,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3014, "question_en": "Take a line from 1 to 1, then to 2 to 2, and enlarge it around the point (1 1) by the ratio of (2 2), and tell me what shape it becomes."}
{"id": 573, "function": "ST_Scale", "question": "有一段从(1 2 3 4)到(1 1 1 1)的线，要用(0.5, 0.75, 2, -1)这些数字在各个方向上做个变化，然后告诉我它的样子。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)'), ST_MakePoint(0.5, 0.75, 2, -1)));", "execution_result": [["LINESTRING(0.5 1.5 6 -4,0.5 0.75 2 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3008, "question_en": "There's a line from (1 2 3 4) to (1 1 1 1), and you need to use these numbers (0.5, 0.75, 2, -1) to change it in different directions, then show me what it looks like."}
{"id": 573, "function": "ST_Scale", "question": "用0.5, 0.75, 2, -1这些数值对四维线串(1 2 3 4, 1 1 1 1)进行变形，看看变形后的样子是什么，格式要是EWKT。", "sql": "SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)'), ST_MakePoint(0.5, 0.75, 2, -1)));", "execution_result": [["LINESTRING(0.5 1.5 6 -4,0.5 0.75 2 -1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3011, "question_en": "Use the numbers 0.5, 0.75, 2, -1 to transform the 4D line (1 2 3 4, 1 1 1 1) and see what it looks like after the transformation, the format should be EWKT."}
{"id": 574, "function": "ST_Scale", "question": "把那条从(1 1)到(2 2)的小线，用(2 2)作为中心，按照(1 1)的方式放大或缩小，结果是什么样子？", "sql": "SELECT ST_AsText(ST_Scale('LINESTRING(1 1, 2 2)', 'POINT(2 2)', 'POINT(1 1)'::geometry));", "execution_result": [["LINESTRING(1 1,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3015, "question_en": "What does the result look like if we take that little line from (1 1) to (2 2), use (2 2) as the center, and enlarge or shrink it in the style of (1 1)?"}
{"id": 575, "function": "ST_Translate", "question": "把坐标点(-71.01 42.37)往右挪动一点点，结果用某种文本形式表示出来。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('POINT(-71.01 42.37)',4326),1,0)) AS wgs_transgeomtxt;", "execution_result": [["POINT(-70.01 42.37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3018, "question_en": "Move the coordinate point (-71.01 42.37) a little to the right, and show the result in some kind of text form."}
{"id": 574, "function": "ST_Scale", "question": "想象有一个从(1 1)到(2 2)的线段，用(2 2)作为不变的点，把(1 1)的小数值拿来做个缩放，结果的样子是怎样的？", "sql": "SELECT ST_AsText(ST_Scale('LINESTRING(1 1, 2 2)', 'POINT(2 2)', 'POINT(1 1)'::geometry));", "execution_result": [["LINESTRING(1 1,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3017, "question_en": "Imagine a line from (1 1) to (2 2), using (2 2) as a point that stays the same, apply a scaling using the small numbers from (1 1), how does the result look?"}
{"id": 575, "function": "ST_Translate", "question": "在那个EPSG:4326系统里，把坐标点(-71.01 42.37)稍微往右边挪一下，横着动1，竖着不动，然后告诉我它的新样子是啥样的字符串。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('POINT(-71.01 42.37)',4326),1,0)) AS wgs_transgeomtxt;", "execution_result": [["POINT(-70.01 42.37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3019, "question_en": "In that EPSG:4326 system, nudge the coordinate point (-71.01 42.37) a bit to the right, moving horizontally by 1 and vertically not at all, then tell me what its new appearance looks like as a string."}
{"id": 575, "function": "ST_Translate", "question": "把那个在4326坐标系里的小点(-71.01 42.37)，往右挪动1个单位，竖着不动，看看它变成什么样子。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('POINT(-71.01 42.37)',4326),1,0)) AS wgs_transgeomtxt;", "execution_result": [["POINT(-70.01 42.37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3023, "question_en": "Take that little point at (-71.01 42.37) in the 4326 system, shift it 1 unit to the right, keep it vertically unchanged, and see what it looks like."}
{"id": 575, "function": "ST_Translate", "question": "把那个点坐标(-71.01 42.37)往右挪一下，具体是经度加1，别动纬度，最后给我看它变成什么样子。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('POINT(-71.01 42.37)',4326),1,0)) AS wgs_transgeomtxt;", "execution_result": [["POINT(-70.01 42.37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3020, "question_en": "Move that point coordinate (-71.01 42.37) a bit to the right, specifically add 1 to the longitude, don't touch the latitude, and then show me what it looks like after the change."}
{"id": 575, "function": "ST_Translate", "question": "请告诉我那个在位置-71.01和42.37的小点，往右边移一个单位后，会是什么样的形状描述？", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('POINT(-71.01 42.37)',4326),1,0)) AS wgs_transgeomtxt;", "execution_result": [["POINT(-70.01 42.37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3021, "question_en": "Can you tell me what the description will be for that little dot located at -71.01 and 42.37 after it moves one unit to the right?"}
{"id": 576, "function": "ST_Translate", "question": "把那个连接点的线从位置-71.01 42.37和-71.11 42.38，稍微往右边移动1个单位，往上移动0.5个单位，然后看看它的形状是什么样子。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('LINESTRING(-71.01 42.37,-71.11 42.38)',4326),1,0.5)) AS wgs_transgeomtxt;", "execution_result": [["LINESTRING(-70.01 42.87,-70.11 42.88)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3024, "question_en": "Take that line connecting points from location -71.01 42.37 and -71.11 42.38, shift it a little to the right by 1 unit and up by 0.5 units, then see what its shape looks like."}
{"id": 576, "function": "ST_Translate", "question": "给出那些坐标小点连成的线，经过左右移动1和上下移动0.5后的形状文字是什么？", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('LINESTRING(-71.01 42.37,-71.11 42.38)',4326),1,0.5)) AS wgs_transgeomtxt;", "execution_result": [["LINESTRING(-70.01 42.87,-70.11 42.88)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3028, "question_en": "What is the text shape of those little coordinate points forming a line after moving sideways by 1 and up-down by 0.5?"}
{"id": 575, "function": "ST_Translate", "question": "能不能告诉我，那个在X方向移动了1个单位而Y方向没动的原始坐标点(-71.01 42.37)最后是个什么样子，用WKT那种写法？", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('POINT(-71.01 42.37)',4326),1,0)) AS wgs_transgeomtxt;", "execution_result": [["POINT(-70.01 42.37)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3022, "question_en": "Can you tell me what it looks like when the original coordinate point (-71.01 42.37) is moved 1 unit in the X direction and not moved in the Y direction, using that WKT style of writing?"}
{"id": 576, "function": "ST_Translate", "question": "如果有一个从(-71.01 42.37)到(-71.11 42.38)的小线段，要把它往右边移动1个单位，再往上移0.5个单位，最后想知道它的新样子是什么？", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('LINESTRING(-71.01 42.37,-71.11 42.38)',4326),1,0.5)) AS wgs_transgeomtxt;", "execution_result": [["LINESTRING(-70.01 42.87,-70.11 42.88)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3025, "question_en": "If there's a little line from (-71.01 42.37) to (-71.11 42.38), how would it look if you push it 1 unit to the right and 0.5 units upwards?"}
{"id": 577, "function": "ST_Translate", "question": "把那个在原点的三维小点往右边走5步，往前移动12步，然后往上升3步，再看看它之后的样子是什么。", "sql": "SELECT ST_AsEWKT(ST_Translate(CAST('POINT(0 0 0)' AS geometry), 5, 12, 3));", "execution_result": [["POINT(5 12 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3030, "question_en": "Take that tiny 3D dot at the origin, move it 5 steps to the right, 12 steps forward, and 3 steps upward, then see what it looks like after."}
{"id": 577, "function": "ST_Translate", "question": "把那个写着‘POINT(0 0 0)’的东西变成一个空间的东西，然后让它的X加上5，Y加上12，Z加上3，最后把这个新位置用EWKT的方式告诉我。", "sql": "SELECT ST_AsEWKT(ST_Translate(CAST('POINT(0 0 0)' AS geometry), 5, 12, 3));", "execution_result": [["POINT(5 12 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3031, "question_en": "Take that thing written as 'POINT(0 0 0)' and turn it into a space thing, then make its X go up by 5, Y by 12, and Z by 3, finally tell me the new position in EWKT style."}
{"id": 577, "function": "ST_Translate", "question": "把那个三维点(0 0 0)的各个值稍微挪动一下，X加个5，Y加个12，Z加个3，然后看看它的标记文本。", "sql": "SELECT ST_AsEWKT(ST_Translate(CAST('POINT(0 0 0)' AS geometry), 5, 12, 3));", "execution_result": [["POINT(5 12 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3032, "question_en": "Take that 3D point (0 0 0) and nudge its values a bit, add 5 to X, 12 to Y, and 3 to Z, then see its marked text."}
{"id": 576, "function": "ST_Translate", "question": "把那些连起来的点从(-71.01 42.37)到(-71.11 42.38)，像是往右移1单位，往上挪0.5单位，然后看看最后的样子是什么。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('LINESTRING(-71.01 42.37,-71.11 42.38)',4326),1,0.5)) AS wgs_transgeomtxt;", "execution_result": [["LINESTRING(-70.01 42.87,-70.11 42.88)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3026, "question_en": "Take those connected dots from (-71.01 42.37) to (-71.11 42.38), kind of shift them 1 unit to the right and 0.5 unit up, then see what the end result looks like."}
{"id": 577, "function": "ST_Translate", "question": "如果我们把一个点从原来的位置在横向挪动5个单位，纵向挪动12个单位，然后在垂直方向挪动3个单位，最后变成一个特别格式的字符串，你知道怎么表达吗？", "sql": "SELECT ST_AsEWKT(ST_Translate(CAST('POINT(0 0 0)' AS geometry), 5, 12,3));", "execution_result": [["POINT(5 12 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3033, "question_en": "Imagine if we move a point from its original spot by 5 units sideways, 12 units upwards, and then 3 units vertically, and it turns into a special format string, do you know how to express that?"}
{"id": 577, "function": "ST_Translate", "question": "如果把那个三维的小点从(0, 0, 0)移到某个新地方，比如加了5、12和3的变化后，它的完整描述会是什么样子呢？", "sql": "SELECT ST_AsEWKT(ST_Translate(CAST('POINT(0 0 0)' AS geometry), 5, 12,3));", "execution_result": [["POINT(5 12 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3034, "question_en": "If we take that 3D little dot from (0, 0, 0) and move it to a new place, like adding changes of 5, 12, and 3, what would its complete description look like?"}
{"id": 576, "function": "ST_Translate", "question": "在地理坐标系(4326)里，有一条线从这个地方到那个地方：(-71.01 42.37)到(-71.11 42.38)。如果把它往右挪一点（加1）和往上挪一点（加0.5），那么调整后的形状是什么样子？", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('LINESTRING(-71.01 42.37,-71.11 42.38)',4326),1,0.5)) AS wgs_transgeomtxt;", "execution_result": [["LINESTRING(-70.01 42.87,-70.11 42.88)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3029, "question_en": "In the geographic coordinate system (4326), there's a line from this point to that one: (-71.01 42.37) to (-71.11 42.38). If you nudge it a bit to the right (add 1) and a bit upward (add 0.5), what does the adjusted shape look like?"}
{"id": 578, "function": "ST_Translate", "question": "把一个弯曲的围成的区域和一个孤零零的小点一起放进一个集合，然后想象它们在左右和上下各移动一点距离，把结果用一种常见的描述方式写下来。", "sql": "SELECT ST_AsText(ST_Translate(ST_Collect('CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7, 8 9,4 3))','POINT(1 3)'),1,2));", "execution_result": [["GEOMETRYCOLLECTION(CURVEPOLYGON(CIRCULARSTRING(5 5,4.12 2.878,2 2,-0.121 7.1213,7 9,9 11,5 5)),POINT(2 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3036, "question_en": "Put a curved enclosed area and a lone little dot together in a collection, then imagine them moving a bit left-right and up-down, and write down the result in a common description format."}
{"id": 577, "function": "ST_Translate", "question": "将三维小点从(0, 0, 0)移动到一个新地方，分别向右5，向上12，向高3，然后用某种格式显示出来。", "sql": "SELECT ST_AsEWKT(ST_Translate(CAST('POINT(0 0 0)' AS geometry), 5, 12,3));", "execution_result": [["POINT(5 12 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3035, "question_en": "Move the little 3D point from (0, 0, 0) to a new place, shifting right by 5, up by 12, and higher by 3, then show it in some format."}
{"id": 578, "function": "ST_Translate", "question": "把那个像是围绕着点的曲线图形和小点(1 3)放在一起，然后稍微把它们往右边移动一点，往上移动两点，最后看看它们的样子是什么。", "sql": "SELECT ST_AsText(ST_Translate(ST_Collect('CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7, 8 9,4 3))','POINT(1 3)'),1,2));", "execution_result": [["GEOMETRYCOLLECTION(CURVEPOLYGON(CIRCULARSTRING(5 5,4.12 2.878,2 2,-0.121 7.1213,7 9,9 11,5 5)),POINT(2 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3038, "question_en": "Combine that curve-like shape surrounding points with the little dot (1 3), then shift them a bit to the right and two units up, and finally see what they look like."}
{"id": 576, "function": "ST_Translate", "question": "把那个有两个点的线，坐标是(-71.01 42.37,-71.11 42.38)，在东西方向挪一下1个单位，上下方向挪一下0.5个单位，然后告诉我它的新样子。", "sql": "SELECT ST_AsText(ST_Translate(ST_GeomFromText('LINESTRING(-71.01 42.37,-71.11 42.38)',4326),1,0.5)) AS wgs_transgeomtxt;", "execution_result": [["LINESTRING(-70.01 42.87,-70.11 42.88)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3027, "question_en": "Take that line with two points, coordinates are (-71.01 42.37,-71.11 42.38), shift it a bit by 1 unit east-west and 0.5 units up-down, then tell me its new appearance."}
{"id": 578, "function": "ST_Translate", "question": "把那些点和曲线组合成一个整体，然后顺着横轴移动1个单位，竖轴移动2个单位，最后看看它变成了什么样的文字描述。", "sql": "SELECT ST_AsText(ST_Translate(ST_Collect('CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7, 8 9,4 3))','POINT(1 3)'),1,2));", "execution_result": [["GEOMETRYCOLLECTION(CURVEPOLYGON(CIRCULARSTRING(5 5,4.12 2.878,2 2,-0.121 7.1213,7 9,9 11,5 5)),POINT(2 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3039, "question_en": "Combine those dots and curved lines into one whole, then shift it 1 unit along the horizontal axis and 2 units along the vertical axis, and finally see what kind of text description it turns into."}
{"id": 578, "function": "ST_Translate", "question": "想象一下一个由曲线围成的形状和一个小点组成的集合，经过向右1和向上2的移动后，告诉我它们的文本样子。", "sql": "SELECT ST_AsText(ST_Translate(ST_Collect('CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7, 8 9,4 3))','POINT(1 3)'),1,2));", "execution_result": [["GEOMETRYCOLLECTION(CURVEPOLYGON(CIRCULARSTRING(5 5,4.12 2.878,2 2,-0.121 7.1213,7 9,9 11,5 5)),POINT(2 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3040, "question_en": "Imagine a collection made of a shape outlined by curves and a little dot, and after moving right by 1 and up by 2, tell me what they look like in text."}
{"id": 578, "function": "ST_Translate", "question": "如果把一个弯弯的多边形和某个点（1 3）放在一起，然后把这个组合体往右边挪1格，往上挪2格，该怎么得到它的文本表示？", "sql": "SELECT ST_AsText(ST_Translate(ST_Collect('CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7, 8 9,4 3))','POINT(1 3)'),1,2));", "execution_result": [["GEOMETRYCOLLECTION(CURVEPOLYGON(CIRCULARSTRING(5 5,4.12 2.878,2 2,-0.121 7.1213,7 9,9 11,5 5)),POINT(2 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3037, "question_en": "If you take a curvy polygon and some point (1 3) and put them together, then shift this combo 1 unit to the right and 2 units up, how do you get its text representation?"}
{"id": 574, "function": "ST_Scale", "question": "如果你有一个从(1 1)到(2 2)的小线段，并且以(2 2)为中心按照(1 1)的方式拉伸，结果的文本描述会是什么？", "sql": "SELECT ST_AsText(ST_Scale('LINESTRING(1 1, 2 2)', 'POINT(2 2)', 'POINT(1 1)'::geometry));", "execution_result": [["LINESTRING(1 1,3 3)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3016, "question_en": "If you have a little line from (1 1) to (2 2), and you stretch it around (2 2) in the manner of (1 1), what will the text description of the result be?"}
{"id": 579, "function": "ST_TransScale", "question": "把那个三维的线，从1 2 3到1 1 1，先往右挪0.5，再往上挪1，然后右边的长度保持不变，上面的拉长到2倍，高度不变，最后看看结果是啥。", "sql": "SELECT ST_AsEWKT(ST_TransScale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 1, 1, 2));", "execution_result": [["LINESTRING(1.5 6 3,1.5 4 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3042, "question_en": "Take that 3D line from 1 2 3 to 1 1 1, first move it 0.5 to the right, then 1 up, then keep the right side the same length, stretch the top to twice, and keep the height as is, and finally see what the result is."}
{"id": 579, "function": "ST_TransScale", "question": "对那个三维线，像是从(1 2 3)到(1 1 1)的坐标，试着调整一下：比如让X加上0.5后变一点，Y翻倍再加1，Z保持原样，最后看看带有额外信息的结果是什么。", "sql": "SELECT ST_AsEWKT(ST_TransScale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 1, 1, 2));", "execution_result": [["LINESTRING(1.5 6 3,1.5 4 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3046, "question_en": "For that 3D line, like the one going from (1 2 3) to (1 1 1), try tweaking the coordinates a bit: maybe add 0.5 to X, double Y and add 1, keep Z the same, and then see what the result with extra details looks like."}
{"id": 579, "function": "ST_TransScale", "question": "有一条3D线段，LINESTRING(1 2 3, 1 1 1)，把它在X方向稍微挪动0.5个单位，Y方向挪动1个单位，然后X方向保持原样，Y方向变大一倍，Z方向不动，最后想要看看它变化后的样子，用一种特别的格式呈现出来。", "sql": "SELECT ST_AsEWKT(ST_TransScale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 1, 1, 2));", "execution_result": [["LINESTRING(1.5 6 3,1.5 4 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3044, "question_en": "There's a 3D line, LINESTRING(1 2 3, 1 1 1), move it a bit, 0.5 units in the X direction and 1 unit in the Y direction, then keep the X direction the same, make the Y direction twice as big, and leave the Z direction unchanged. Finally, see what it looks like after the change in a special format."}
{"id": 579, "function": "ST_TransScale", "question": "对那条有点像3D折线的东西，先把它在X上挪动0.5个小步，Y上挪1个小步，然后再把X的长度保持不变，Y上拉长到原来的2倍，而Z就不动，最后给我一个带有那些奇怪编号的描述。", "sql": "SELECT ST_AsEWKT(ST_TransScale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 1, 1, 2));", "execution_result": [["LINESTRING(1.5 6 3,1.5 4 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3043, "question_en": "For that thing resembling a 3D zigzag, first nudge it 0.5 small steps to the right and 1 small step upwards, then keep X's length the same, stretch Y to twice its size, while Z stays put, and finally give me a description with those odd codes."}
{"id": 580, "function": "ST_TransScale", "question": "在小点(234 567)周围画个3单位半径的圈，然后把这个圈变成曲线，再往右挪1单位，往上挪2单位，最后把横向放大3倍，竖向放大4倍，结果是什么形状的文字描述？", "sql": "SELECT ST_AsText(ST_Transscale(ST_LineToCurve(ST_Buffer('POINT(234 567)', 3)),1,2,3,4));", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(714 2276,696 2276,714 2276))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3052, "question_en": "Draw a circle with a 3-unit radius around the little dot (234 567), then turn this circle into a curve, move it 1 unit to the right, 2 units up, and finally stretch it 3 times horizontally and 4 times vertically. What's the text description of the resulting shape?"}
{"id": 580, "function": "ST_TransScale", "question": "给一个点(234 567)，先弄个半径3的圈，再把线条变得弯弯的，然后挪动一下并放大，最后告诉我这个形状的样子。", "sql": "SELECT ST_AsText(ST_Transscale(ST_LineToCurve(ST_Buffer('POINT(234 567)', 3)),1,2,3,4));", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(714 2276,696 2276,714 2276))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3053, "question_en": "For a point at (234 567), first make a circle with a radius of 3, then make the lines curvy, and after shifting and enlarging it, tell me what this shape looks like."}
{"id": 579, "function": "ST_TransScale", "question": "把那个三维的线，像这样(1 2 3, 1 1 1)，先让Y的方向变大两倍，然后整体往右挪一点点（0.5），再往上挪一点（1），Z的高度保持不变，用某种格式说出来。", "sql": "SELECT ST_AsEWKT(ST_TransScale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 1, 1, 2));", "execution_result": [["LINESTRING(1.5 6 3,1.5 4 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3047, "question_en": "Take that 3D line, like this (1 2 3, 1 1 1), first make it stretch twice as much in the Y direction, then move the whole thing a tiny bit to the right (0.5), and a bit up (1), keeping the Z height unchanged, and say it in some format."}
{"id": 583, "function": "ST_ClusterIntersecting", "question": "怎么把这些坐标串起来的小线段和一个围起来的形状进行交叉组合，并把组合结果以某种格式输出呢？", "sql": "WITH testdata AS ( SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, \n         'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterIntersecting(geom))) \nFROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3056, "question_en": "How do you mix these string-like coordinates and a closed shape, then output the mixed results in some format?"}
{"id": 580, "function": "ST_TransScale", "question": "围绕那个点(234 567)弄个3的圆圈，然后让边缘变得滑溜溜的，再往右挪1和往上挪2，最后横着放大3倍竖着放大4倍，看看它变成了啥样。", "sql": "SELECT ST_AsText(ST_Transscale(ST_LineToCurve(ST_Buffer('POINT(234 567)', 3)),1,2,3,4));", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(714 2276,696 2276,714 2276))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3049, "question_en": "Make a circle of 3 around that point (234 567), then make the edge smooth, shift it right by 1 and up by 2, and finally, stretch it 3 times horizontally and 4 times vertically, and see what it looks like."}
{"id": 580, "function": "ST_TransScale", "question": "如果你把小点(234 567)弄得圆润些，扩展3个单位，然后给它一点X方向上的1个单位和Y方向上2个单位的推动，再让它在X方向上放大3倍和Y方向上放大4倍，最后你会得到什么样的形状描述呢？", "sql": "SELECT ST_AsText(ST_Transscale(ST_LineToCurve(ST_Buffer('POINT(234 567)', 3)),1,2,3,4));", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(714 2276,696 2276,714 2276))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3051, "question_en": "If you make the little dot (234 567) rounder, extending it by 3 units, then give it a push of 1 unit in the X direction and 2 units in the Y direction, and finally stretch it 3 times in the X direction and 4 times in the Y direction, what kind of shape description would you get?"}
{"id": 583, "function": "ST_ClusterIntersecting", "question": "有一些线段，比如(0 0到1 1)、(5 5到4 4)、(6 6到7 7)这些，还有个多边形像个框框(0 0, 4 0, 4 4, 0 4, 0 0)，怎么把这些东西根据它们怎么碰到一起的关系分成不同的组，然后用某种格式来写出来？", "sql": "WITH testdata AS ( SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, \n         'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterIntersecting(geom))) \nFROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3054, "question_en": "There are some lines, like (0 0 to 1 1), (5 5 to 4 4), (6 6 to 7 7), and a polygon like a frame (0 0, 4 0, 4 4, 0 4, 0 0). How can we group these based on how they bump into each other and write it out in some format?"}
{"id": 580, "function": "ST_TransScale", "question": "从坐标(234,567)的那个点开始，想象一个半径为3的圆形区域，然后把它的边界线变得有点弯曲。接着，给它一个奇妙的调整，让它移动一点，并变大一点，具体来说是(dx=1, dy=2, xscale=3, yscale=4)。最后，看看这个变化后的形状是什么样子的，用WKT格式表达出来。", "sql": "SELECT ST_AsText(ST_Transscale(ST_LineToCurve(ST_Buffer('POINT(234 567)', 3)),1,2,3,4));", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(714 2276,696 2276,714 2276))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3050, "question_en": "Start with the point at coordinates (234,567), imagine a circular area with a radius of 3, and then make its boundary line a bit curved. Next, give it a magical adjustment to move a bit and get a bit bigger, specifically (dx=1, dy=2, xscale=3, yscale=4). Finally, see what the transformed shape looks like, expressed in WKT format."}
{"id": 583, "function": "ST_ClusterIntersecting", "question": "看看这些几何图形：从(0,0)到(1,1)的线，从(5,5)到(4,4)的线，从(6,6)到(7,7)的线，另一条从(0,0)到(-1,-1)的线，还有一个用点(0,0)、(4,0)、(4,4)、(0,4)围成的形状，能不能分成几组，看看每组是什么样子？", "sql": "WITH testdata AS ( SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, \n         'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterIntersecting(geom))) \nFROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3055, "question_en": "Look at these shapes: a line from (0,0) to (1,1), a line from (5,5) to (4,4), a line from (6,6) to (7,7), another line from (0,0) to (-1,-1), and a shape enclosed by points (0,0), (4,0), (4,4), (0,4). Can you sort them into groups and show what each group looks like?"}
{"id": 584, "function": "ST_ClusterIntersectingWin", "question": "对于那些包含5个小线条和一个形状的测试数据，像(0 0, 1 1)这样的，去看看它们如何聚在一起，并告诉我每个的编号、它们的样子和聚在一起的组号。", "sql": "WITH testdata AS (\n  SELECT id, geom::geometry \n  FROM (\n    VALUES \n      (1, 'LINESTRING (0 0, 1 1)'), \n      (2, 'LINESTRING (5 5, 4 4)'), \n      (3, 'LINESTRING (6 6, 7 7)'), \n      (4, 'LINESTRING (0 0, -1 -1)'), \n      (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')\n  ) AS t(id, geom)\n)\nSELECT id, ST_AsText(geom), ST_ClusterIntersectingWin(geom) OVER () AS cluster\nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3060, "question_en": "For test data with 5 little lines and a shape, like (0 0, 1 1), see how they cluster together and tell me each one's number, what they look like, and their group's number."}
{"id": 583, "function": "ST_ClusterIntersecting", "question": "看看那些由小线条和一个多边形组成的集合，找出它们彼此间有交集的那些，并把这些结果的文本形式告诉我。具体坐标像是(0 0, 1 1)，还有(0 0, 4 0, 4 4, 0 4, 0 0)这样的。", "sql": "WITH testdata AS ( SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, \n         'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterIntersecting(geom))) \nFROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3058, "question_en": "Take a look at that collection made of little lines and a polygon, find which ones bump into each other, and tell me the text form of those results. Specific coordinates are like (0 0, 1 1), and also (0 0, 4 0, 4 4, 0 4, 0 0)."}
{"id": 583, "function": "ST_ClusterIntersecting", "question": "假如有几条线段和一个形状，像(0 0, 1 1)、(5 5, 4 4)、(6 6, 7 7)、(0 0, -1 -1)这些线，还有个四边形(0 0, 4 0, 4 4, 0 4, 0 0)，看看它们怎么分成交叉的小组，然后给出每个小组的形状样子。", "sql": "WITH testdata AS ( SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, \n         'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterIntersecting(geom))) \nFROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3057, "question_en": "Suppose there are several lines and a shape, like those lines (0 0, 1 1), (5 5, 4 4), (6 6, 7 7), (0 0, -1 -1), and a four-sided shape (0 0, 4 0, 4 4, 0 4, 0 0). See how they group into intersecting clusters and then describe each group's shape."}
{"id": 580, "function": "ST_TransScale", "question": "从一个点(234 567)开始，想象一个3的圆圈，转变成一个曲线，先向右移动1，再向上移动2，然后在横向上变大3倍，纵向上变大4倍，最后用某种格式表达出来。", "sql": "SELECT ST_AsText(ST_Transscale(ST_LineToCurve(ST_Buffer('POINT(234 567)', 3)),1,2,3,4));", "execution_result": [["CURVEPOLYGON(CIRCULARSTRING(714 2276,696 2276,714 2276))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3048, "question_en": "Starting from a point (234 567), imagine a circle of 3, turning into a curve, first moving 1 to the right, then 2 up, then growing 3 times wider and 4 times taller, finally expressed in some format."}
{"id": 586, "function": "ST_ClusterKMeans", "question": "把表parcels里的那些形状分成3组，告诉我每组的编号、地块的ID，还有它们原来的样子。", "sql": "SELECT ST_ClusterKMeans(geom, 3) OVER() AS cid, parcel_id, geom \nFROM parcels;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3066, "question_en": "Divide the shapes in the parcels table into 3 groups, and tell me the group number, the parcel ID, and what they originally look like."}
{"id": 584, "function": "ST_ClusterIntersectingWin", "question": "有一堆线段和一个多边形，像LINESTRING (0 0, 1 1)这样的线和POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))这样的面，怎么能用某种方法来找出那些互相碰到的群组呢？", "sql": "WITH testdata AS (\n  SELECT id, geom::geometry \n  FROM (\n    VALUES \n      (1, 'LINESTRING (0 0, 1 1)'), \n      (2, 'LINESTRING (5 5, 4 4)'), \n      (3, 'LINESTRING (6 6, 7 7)'), \n      (4, 'LINESTRING (0 0, -1 -1)'), \n      (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')\n  ) AS t(id, geom)\n)\nSELECT id, ST_AsText(geom), ST_ClusterIntersectingWin(geom) OVER () AS cluster\nFROM testdata;\n", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3062, "question_en": "With a bunch of lines like LINESTRING (0 0, 1 1) and a shape like POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)), how can we use some method to find out which ones are bumping into each other in groups?"}
{"id": 583, "function": "ST_ClusterIntersecting", "question": "看看如何把这些线和一个形状结合在一起：像(0 0到1 1)这样的线段，还有(5 5到4 4)，(6 6到7 7)，(0 0到-1 -1)的线段，以及一个围绕(0 0, 4 0, 4 4, 0 4, 0 0)的多边形，最终以某种文本格式展示结果。", "sql": "WITH testdata AS ( SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, \n         'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterIntersecting(geom))) \nFROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3059, "question_en": "See how these lines and a shape come together: segments like from (0 0 to 1 1), also (5 5 to 4 4), (6 6 to 7 7), (0 0 to -1 -1), and a polygon around (0 0, 4 0, 4 4, 0 4, 0 0), finally shown in some text format."}
{"id": 584, "function": "ST_ClusterIntersectingWin", "question": "有五个图形，像画的线条和一个包围的形状，分别是坐标(0 0, 1 1)、(5 5, 4 4)、(6 6, 7 7)、(0 0, -1 -1)和(0 0, 4 0, 4 4, 0 4, 0 0)。怎么能让它们根据相互碰撞的情况分成几组？", "sql": "WITH testdata AS (\n  SELECT id, geom::geometry \n  FROM (\n    VALUES \n      (1, 'LINESTRING (0 0, 1 1)'), \n      (2, 'LINESTRING (5 5, 4 4)'), \n      (3, 'LINESTRING (6 6, 7 7)'), \n      (4, 'LINESTRING (0 0, -1 -1)'), \n      (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')\n  ) AS t(id, geom)\n)\nSELECT id, ST_AsText(geom), ST_ClusterIntersectingWin(geom) OVER () AS cluster\nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3061, "question_en": "There are five shapes, like drawn lines and an enclosing form, at coordinates (0 0, 1 1), (5 5, 4 4), (6 6, 7 7), (0 0, -1 -1), and (0 0, 4 0, 4 4, 0 4, 0 0). How can they be grouped based on how they bump into each other?"}
{"id": 586, "function": "ST_ClusterKMeans", "question": "用parcels表里的那些形状做点有趣的事，像把它们分成3个小组，然后把每个组的编号、原来的地块ID和那些形状一起找出来。", "sql": "SELECT ST_ClusterKMeans(geom, 3) OVER() AS cid, parcel_id, geom \nFROM parcels;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3070, "question_en": "Do something interesting with the shapes from the parcels table, like dividing them into 3 little groups, then find each group's number, the original parcel ID, and those shapes together."}
{"id": 584, "function": "ST_ClusterIntersectingWin", "question": "怎么把那些线和一个多边形的坐标变成某种格式，然后看看它们是怎么分组的？比如有0 0到1 1的线，还有个从0 0到-1 -1的线，和一个围绕0 4的形状。", "sql": "WITH testdata AS (\n  SELECT id, geom::geometry \n  FROM (\n    VALUES \n      (1, 'LINESTRING (0 0, 1 1)'), \n      (2, 'LINESTRING (5 5, 4 4)'), \n      (3, 'LINESTRING (6 6, 7 7)'), \n      (4, 'LINESTRING (0 0, -1 -1)'), \n      (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')\n  ) AS t(id, geom)\n)\nSELECT id, ST_AsText(geom), ST_ClusterIntersectingWin(geom) OVER () AS cluster\nFROM testdata;\n", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3064, "question_en": "How can you change those lines and a polygon's coordinates into some format, then see how they group together? Like there's a line from 0 0 to 1 1, another line from 0 0 to -1 -1, and a shape around 0 4."}
{"id": 586, "function": "ST_ClusterKMeans", "question": "在表parcels里，找出那些形状，把它们分成三组，结果用一种特别的方式显示，同时还要记住它们的编号和形状。", "sql": "SELECT ST_ClusterKMeans(geom, 3) OVER() AS cid, parcel_id, geom \nFROM parcels;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3068, "question_en": "In the parcels table, find those shapes and divide them into three groups, showing the result in a special way, while remembering their IDs and shapes."}
{"id": 578, "function": "ST_Translate", "question": "把那些弯弯曲曲的形状和小点结合起来，然后让它们在X方向走一步，Y方向走两步，结果是什么样子？", "sql": "SELECT ST_AsText(ST_Translate(ST_Collect('CURVEPOLYGON(CIRCULARSTRING(4 3,3.12 0.878,1 0,-1.121 5.1213,6 7, 8 9,4 3))','POINT(1 3)'),1,2));", "execution_result": [["GEOMETRYCOLLECTION(CURVEPOLYGON(CIRCULARSTRING(5 5,4.12 2.878,2 2,-0.121 7.1213,7 9,9 11,5 5)),POINT(2 5))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3041, "question_en": "Combine those curved shapes and the little dot, then move them one step in the X direction and two steps in the Y direction. What does the result look like?"}
{"id": 586, "function": "ST_ClusterKMeans", "question": "请找出parcels表中每个地块的小形状和它们的编号，还有将这些形状分成3个组后的组号。", "sql": "SELECT ST_ClusterKMeans(geom, 3) OVER() AS cid, parcel_id, geom \nFROM parcels;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3069, "question_en": "Please find the little shapes and their numbers for each parcel in the parcels table, along with the group number after dividing these shapes into 3 groups."}
{"id": 584, "function": "ST_ClusterIntersectingWin", "question": "请列出一个表格，里面有编号、那些几何图形的WKT文字，还有类似于把相交的都分成一组的结果。几何图形包括像(0 0, 1 1)这样的小线段，(5 5, 4 4)这样的线段，(6 6, 7 7)这样的，(0 0, -1 -1)这样的，还有一个像(0 0, 4 0, 4 4, 0 4, 0 0)这样的多边形。", "sql": "WITH testdata AS (\n  SELECT id, geom::geometry \n  FROM (\n    VALUES \n      (1, 'LINESTRING (0 0, 1 1)'), \n      (2, 'LINESTRING (5 5, 4 4)'), \n      (3, 'LINESTRING (6 6, 7 7)'), \n      (4, 'LINESTRING (0 0, -1 -1)'), \n      (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')\n  ) AS t(id, geom)\n)\nSELECT id, ST_AsText(geom), ST_ClusterIntersectingWin(geom) OVER () AS cluster\nFROM testdata;\n", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3063, "question_en": "Please list a table with numbers, WKT text of those geometric shapes, and results like grouping intersecting ones together. The shapes include small lines like (0 0, 1 1), lines like (5 5, 4 4), lines like (6 6, 7 7), lines like (0 0, -1 -1), and a polygon like (0 0, 4 0, 4 4, 0 4, 0 0)."}
{"id": 584, "function": "ST_ClusterIntersectingWin", "question": "对于有些线和一个形状的数据表，像是包含坐标(0 0, 1 1)、(5 5, 4 4)、(6 6, 7 7)、(0 0, -1 -1)还有个多边形(0 0, 4 0, 4 4, 0 4, 0 0)的，你要怎么得到每行的编号、那些形状的文本表示，和它们的分组编号呢？", "sql": "WITH testdata AS (\n  SELECT id, geom::geometry \n  FROM (\n    VALUES \n      (1, 'LINESTRING (0 0, 1 1)'), \n      (2, 'LINESTRING (5 5, 4 4)'), \n      (3, 'LINESTRING (6 6, 7 7)'), \n      (4, 'LINESTRING (0 0, -1 -1)'), \n      (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')\n  ) AS t(id, geom)\n)\nSELECT id, ST_AsText(geom), ST_ClusterIntersectingWin(geom) OVER () AS cluster\nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3065, "question_en": "For a table with some lines and a shape, like those with coordinates (0 0, 1 1), (5 5, 4 4), (6 6, 7 7), (0 0, -1 -1) and a polygon (0 0, 4 0, 4 4, 0 4, 0 0), how do you get each row's number, the text version of those shapes, and their group number?"}
{"id": 586, "function": "ST_ClusterKMeans", "question": "对parcels表里的所有那些形状做个空间上的分类，分成3个类别。然后给出每一行的分类号、原来的parcel_id和形状。", "sql": "SELECT ST_ClusterKMeans(geom, 3) OVER() AS cid, parcel_id, geom \nFROM parcels;", "execution_resultexecution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3071, "question_en": "Do a spatial sort on all those shapes in the parcels table, splitting them into 3 groups. Then give each row's category number, original parcel_id, and shape."}
{"id": 586, "function": "ST_ClusterKMeans", "question": "把表parcels里的形状内容分成3组，然后告诉我每个东西的组编号、它原来的编号和那些形状。", "sql": "SELECT ST_ClusterKMeans(geom, 3) OVER() AS cid, parcel_id, geom \nFROM parcels;", "execution_result": [[2, "001", "0103000020110F0000010000000600000000000000000000003010E08BAE995840585C092904C651403010E08BAE995840585C092904C651409564A265D64341408F4F86EAC97140400000000000004E4000000000000000000000000000004E4000000000000000003010E08BAE995840"], [0, "002", "0103000020110F0000010000000700000000000000008058400000000000004E40D03AD3B1BC0456400000000000004E40585C092904C651409564A265D6434140585C092904C651403010E08BAE9958407BC67EAFE0665A403010E08BAE9958407BC67EAFE0665A40843ADA4F735D4E4000000000008058400000000000004E40"], [0, "003", "0103000020110F0000010000000A000000E4C69B4CE71D61400CA5AF890FB55640584CD26759CF6040C383B480DDE55440E2BE08952E566040A7BADA05013D53409FB80349A66D5F40C823F471FCC95140A768D09230EE5D405389A7F25A9A504048B9557AFB3B5C401C9303F363724F407BC67EAFE0665A40843ADA4F735D4E407BC67EAFE0665A403010E08BAE995840AC358F2BFA3E61403010E08BAE995840E4C69B4CE71D61400CA5AF890FB55640"], [2, "004", "0103000020110F000001000000070000000C35044731A146400000000000806140FAEAE384F3AD5040575C092904866540A8E1C232A1F1514092876511014B6640A8E1C232A1F151403010E08BAE99584000000000000000003010E08BAE995840000000000000000000000000008061400C35044731A146400000000000806140"], [0, "005", "0103000020110F00000100000005000000AC358F2BFA3E61403010E08BAE995840A8E1C232A1F151403010E08BAE995840A8E1C232A1F151401808F045D78C6240AC358F2BFA7E61401808F045D78C6240AC358F2BFA3E61403010E08BAE995840"], [1, "006", "0103000020110F00000100000009000000924E524EAB2957403D57244036AA6740681ADBE1B625594014C24E70DCBF6740AB00C47143205B40F2C48FCDBCA26740AB00C47143205B401808F045D78C6240A8E1C232A1F151401808F045D78C6240A8E1C232A1F1514092876511014B6640D83AF2BEF77C534098B5C0C102EC664094B9F63E48405540DE4F9919A6626740924E524EAB2957403D57244036AA6740"], [1, "007", "0103000020110F0000010000000A000000521302A838055D40FDF7BE1CFF53674067F5627459C15E40E96F5A08C3D6664084B7E3B683216040C796656700306640395026E07ABD60403D220CC954666540BB329E47622E6140D03E6F45C081644090006150BF6F6140BB03EA3D548B6340AC358F2BFA7E61401808F045D78C6240AB00C47143205B401808F045D78C6240AB00C47143205B40F2C48FCDBCA26740521302A838055D40FDF7BE1CFF536740"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3067, "question_en": "Divide the shape contents in the parcels table into 3 groups, then tell me each object's group number, its original number, and those shapes."}
{"id": 587, "function": "ST_ClusterKMeans", "question": "在parcels表中，按照type字段分成小组，然后对每个小组的那些形状做个三类的聚集，看看结果里有没有cid、parcel_id和type这几个东西。", "sql": "SELECT ST_ClusterKMeans(geom, 3) over (PARTITION BY type) AS cid, parcel_id, type \nFROM parcels;", "execution_result": [[2, "005", "commercial"], [2, "003", "commercial"], [1, "007", "commercial"], [0, "001", "commercial"], [2, "004", "residential"], [0, "002", "residential"], [1, "006", "residential"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3073, "question_en": "In the parcels table, divide based on the type field into groups, then make those shapes in each group cluster into three kinds, and see if the results include things like cid, parcel_id, and type."}
{"id": 587, "function": "ST_ClusterKMeans", "question": "在parcels表里，把那些形状按照type那一栏的内容分成几堆，然后用一种聪明的方法把每堆里的形状分成3个小群，最后告诉我每个形状属于哪个小群、它原来的编号和它的类型。", "sql": "SELECT ST_ClusterKMeans(geom, 3) over (PARTITION BY type) AS cid, parcel_id, type \nFROM parcels;", "execution_result": [[2, "005", "commercial"], [2, "003", "commercial"], [1, "007", "commercial"], [0, "001", "commercial"], [2, "004", "residential"], [0, "002", "residential"], [1, "006", "residential"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3072, "question_en": "In the parcels table, sort those shapes into piles based on the type column, then use a clever way to split each pile into 3 smaller groups, and finally tell me which small group each shape belongs to, its original number, and its type."}
{"id": 587, "function": "ST_ClusterKMeans", "question": "在那些地块的表格中，先依照种类把它们分成几组，然后每一组里面用一种方法分成三个小团体，并最后给出每个小团体的编号，还有地块的身份和种类。", "sql": "SELECT ST_ClusterKMeans(geom, 3) over (PARTITION BY type) AS cid, parcel_id, type \nFROM parcels;", "execution_result": [[2, "005", "commercial"], [2, "003", "commercial"], [1, "007", "commercial"], [0, "001", "commercial"], [2, "004", "residential"], [0, "002", "residential"], [1, "006", "residential"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3074, "question_en": "In that table of parcels, first divide them into groups based on their kind, then within each group, use a method to split them into three little clusters, and finally provide the number for each little cluster, along with the parcel's identity and kind."}
{"id": 587, "function": "ST_ClusterKMeans", "question": "根据parcels表中的type来分类，然后在每个分类里对那些形状做个三组的分配，结果要有个组号，还有原来的编号和类型。", "sql": "SELECT ST_ClusterKMeans(geom, 3) over (PARTITION BY type) AS cid, parcel_id, type \nFROM parcels;", "execution_result": [[2, "005", "commercial"], [2, "003", "commercial"], [1, "007", "commercial"], [0, "001", "commercial"], [2, "004", "residential"], [0, "002", "residential"], [1, "006", "residential"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3076, "question_en": "Classify using the type from the parcels table, then in each category, do a three-group allocation on those shapes. The result should have a group number, along with the original ID and type."}
{"id": 587, "function": "ST_ClusterKMeans", "question": "找出parcels表中的一些地块，按某种分类，看看能不能把它们分成三组，并显示每个地块的分类编号和类型。", "sql": "SELECT ST_ClusterKMeans(geom, 3) over (PARTITION BY type) AS cid, parcel_id, type \nFROM parcels;", "execution_result": [[2, "005", "commercial"], [2, "003", "commercial"], [1, "007", "commercial"], [0, "001", "commercial"], [2, "004", "residential"], [0, "002", "residential"], [1, "006", "residential"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3077, "question_en": "Identify some parcels from the parcels table, sort them in some way, see if they can be divided into three groups, and show the classification number and type for each parcel."}
{"id": 589, "function": "ST_ClusterWithin", "question": "把这些线条和形状，像是从(0 0)到(1 1)的那条线，还有(5 5)到(4 4)的那条线，等等，按照1.4的距离来分成几组，然后告诉我每一组的样子。", "sql": "WITH testdata AS (\n    SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, 'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterWithin(geom, 1.4))) FROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3079, "question_en": "Group these lines and shapes, like the line from (0 0) to (1 1) and the line from (5 5) to (4 4), etc., based on a distance of 1.4, and then let me know how each group looks."}
{"id": 587, "function": "ST_ClusterKMeans", "question": "在parcels表里，按照type分类，把那些形状用某种方式分成3种类别，然后告诉我每个形状的编号，还有parcel_id和type的信息。", "sql": "SELECT ST_ClusterKMeans(geom, 3) over (PARTITION BY type) AS cid, parcel_id, type \nFROM parcels;", "execution_result": [[2, "005", "commercial"], [2, "003", "commercial"], [1, "007", "commercial"], [0, "001", "commercial"], [2, "004", "residential"], [0, "002", "residential"], [1, "006", "residential"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3075, "question_en": "In the parcels table, categorize those shapes into 3 kinds based on type, and then tell me each shape's number, along with parcel_id and type information."}
{"id": 589, "function": "ST_ClusterWithin", "question": "在这儿有一些小线条和图形，比如那些从0到1的、从5到4的线，还有一个多边形，想看看它们在1.4的距离内是不是能聚成一团，然后给出每一团的样子描述。", "sql": "WITH testdata AS (\n    SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, 'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterWithin(geom, 1.4))) FROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3081, "question_en": "Here are some little lines and shapes, like those from 0 to 1 and from 5 to 4, along with a polygon. We want to see if they can cluster together within a distance of 1.4, and then provide descriptions of each cluster."}
{"id": 589, "function": "ST_ClusterWithin", "question": "想知道这些坐标，比如像(0 0, 1 1)这样的线，还有像(0 0, 4 0, 4 4, 0 4, 0 0)这样的形状，用1.4的距离把它们分成几组后，每组是怎样的呢？", "sql": "WITH testdata AS (\n    SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, 'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterWithin(geom, 1.4))) FROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3083, "question_en": "Curious about these coordinates, like lines such as (0 0, 1 1) and shapes like (0 0, 4 0, 4 4, 0 4, 0 0), how do they look after being grouped with a distance of 1.4?"}
{"id": 589, "function": "ST_ClusterWithin", "question": "有一些由小线条和一个围起来的形状组成的东西，它们在(0 0, 1 1)、(5 5, 4 4)、(6 6, 7 7)、(0 0, -1 -1)和(0 0, 4 0, 4 4, 0 4, 0 0)之间，想知道如果用1.4的距离来分组的话，会得到什么样的结果呢？", "sql": "WITH testdata AS (\n    SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, 'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterWithin(geom, 1.4))) FROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3078, "question_en": "There are some little lines and a shape that encloses an area, located at (0 0, 1 1), (5 5, 4 4), (6 6, 7 7), (0 0, -1 -1), and (0 0, 4 0, 4 4, 0 4, 0 0). What kind of results would you get if you grouped them using a distance of 1.4?"}
{"id": 589, "function": "ST_ClusterWithin", "question": "假如有一些线条和一个形状，它们分别在(0 0, 1 1)、(5 5, 4 4)、(6 6, 7 7)、(0 0, -1 -1)和(0 0, 4 0, 4 4, 0 4, 0 0)这些位置，试着用1.4的距离把它们聚合成几组，然后看看每一组的样子。", "sql": "WITH testdata AS (\n    SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, 'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterWithin(geom, 1.4))) FROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3080, "question_en": "Imagine there are some lines and a shape located at (0 0, 1 1), (5 5, 4 4), (6 6, 7 7), (0 0, -1 -1), and (0 0, 4 0, 4 4, 0 4, 0 0). Try to group them using a distance of 1.4 and then see what each group looks like."}
{"id": 589, "function": "ST_ClusterWithin", "question": "看看这些小线条和形状，像(0 0到1 1)的，(5 5到4 4)的，还有一个大块围着(0 0, 4 0, 4 4, 0 4, 0 0)的，它们之间如果用1.4这个数字来衡量，能不能凑成一堆，然后把结果变成一种特别的文字描述？", "sql": "WITH testdata AS (\n    SELECT unnest(ARRAY['LINESTRING (0 0, 1 1)'::geometry, 'LINESTRING (5 5, 4 4)'::geometry, 'LINESTRING (6 6, 7 7)'::geometry, 'LINESTRING (0 0, -1 -1)'::geometry, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))'::geometry]) AS geom) \nSELECT ST_AsText(unnest(ST_ClusterWithin(geom, 1.4))) FROM testdata;", "execution_result": [["GEOMETRYCOLLECTION(LINESTRING(0 0,1 1),LINESTRING(5 5,4 4),POLYGON((0 0,4 0,4 4,0 4,0 0)),LINESTRING(0 0,-1 -1))"], ["GEOMETRYCOLLECTION(LINESTRING(6 6,7 7))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3082, "question_en": "Look at these little lines and shapes, like from (0 0 to 1 1), (5 5 to 4 4), and a big piece surrounding (0 0, 4 0, 4 4, 0 4, 0 0). If we use 1.4 as a measure between them, can they be grouped together, and then turn the result into a special text description?"}
{"id": 590, "function": "ST_ClusterWithinWin", "question": "有五个图形，像是一些连在一起的点和一个像盒子的形状。我们用1.4这个数字来看看它们怎么分组的，想知道每个图形的编号、它们的样子和它们属于哪个组。", "sql": "WITH testdata AS ( \n   SELECT id, geom::geometry \n   FROM ( VALUES (1, 'LINESTRING (0 0, 1 1)'), (2, 'LINESTRING (5 5, 4 4)'), (3, 'LINESTRING (6 6, 7 7)'), (4, 'LINESTRING (0 0, -1 -1)'), (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')) AS t(id, geom) ) \nSELECT id, ST_AsText(geom), ST_ClusterWithinWin(geom, 1.4) OVER () AS cluster \nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3085, "question_en": "There are five shapes, like some connected dots and one that looks like a box. We use the number 1.4 to see how they group together, wanting to know each shape's ID, what they look like, and which group they belong to."}
{"id": 590, "function": "ST_ClusterWithinWin", "question": "在包含一些线条和一个形状的测试数据中，比如像在(0 0, 1 1)这样的小点连成的线，以及一个围绕(0 0, 4 0, 4 4, 0 4, 0 0)的形状，用1.4这个数字来分组它们，看看它们属于哪个群，并输出每个的编号和形状信息。", "sql": "WITH testdata AS ( \n   SELECT id, geom::geometry \n   FROM ( VALUES (1, 'LINESTRING (0 0, 1 1)'), (2, 'LINESTRING (5 5, 4 4)'), (3, 'LINESTRING (6 6, 7 7)'), (4, 'LINESTRING (0 0, -1 -1)'), (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')) AS t(id, geom) ) \nSELECT id, ST_AsText(geom), ST_ClusterWithinWin(geom, 1.4) OVER () AS cluster \nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3084, "question_en": "In test data with some lines and a shape, like lines connecting small dots at (0 0, 1 1), and a shape surrounding (0 0, 4 0, 4 4, 0 4, 0 0), use the number 1.4 to group them, see which group they belong to, and output each one's number and shape information."}
{"id": 590, "function": "ST_ClusterWithinWin", "question": "在测试数据集中，有几条线和一个形状，比如从(0 0)到(1 1)的线，还有一个从(0 0)到(4 0)再到(4 4)的多边形。想要用一个距离1.4的参数来把这些点和线都分成小组，结果要包括它们的编号、那些点和线的样子以及它们属于哪个组。", "sql": "WITH testdata AS ( \n   SELECT id, geom::geometry \n   FROM ( VALUES (1, 'LINESTRING (0 0, 1 1)'), (2, 'LINESTRING (5 5, 4 4)'), (3, 'LINESTRING (6 6, 7 7)'), (4, 'LINESTRING (0 0, -1 -1)'), (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')) AS t(id, geom) ) \nSELECT id, ST_AsText(geom), ST_ClusterWithinWin(geom, 1.4) OVER () AS cluster \nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3086, "question_en": "In the test dataset, there are some lines and a shape, like a line from (0 0) to (1 1), and a polygon from (0 0) to (4 0) and then to (4 4). We want to use a parameter of distance 1.4 to group these points and lines, and the results should include their number, what those points and lines look like, and which group they belong to."}
{"id": 593, "function": "ST_Expand", "question": "把那些点连成的线，像是2312980 110676和其他几个，包裹起来形成一个大框，然后再往外拉伸10个单位，最后看看这个框能变成什么样的盒子。", "sql": "SELECT CAST(ST_Expand(ST_GeomFromText('LINESTRING(2312980 110676,2312923 110701,2312892 110714)', 2163),10) AS box2d);", "execution_result": [["BOX(2312882 110666,2312990 110724)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3093, "question_en": "Take the line formed by connecting those points like 2312980 110676 and a few others, wrap it up to form a big frame, then stretch it outward by 10 units, and finally see what kind of box this frame can become."}
{"id": 593, "function": "ST_Expand", "question": "把那些坐标连起来的线，经过一个小盒子化的过程，稍微放大10个单位，然后看看那个盒子长啥样。", "sql": "SELECT CAST(ST_Expand(ST_GeomFromText('LINESTRING(2312980 110676,2312923 110701,2312892 110714)', 2163),10) AS box2d);", "execution_result": [["BOX(2312882 110666,2312990 110724)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3094, "question_en": "Connect those coordinates into a line, go through a little boxing process, expand it slightly by 10 units, and then see what that box looks like."}
{"id": 590, "function": "ST_ClusterWithinWin", "question": "想象一个场景，我们有一些小线段和一个大形状，看看能不能用1.4的距离把它们分成几个组呢？给我每个小东西的编号、它的长相，以及它属于哪个组就行了。那些小线段有(0 0到1 1)、(5 5到4 4)、(6 6到7 7)、(0 0到-1 -1)，还有一个多边形是(0 0, 4 0, 4 4, 0 4, 0 0)。", "sql": "WITH testdata AS ( \n   SELECT id, geom::geometry \n   FROM ( VALUES (1, 'LINESTRING (0 0, 1 1)'), (2, 'LINESTRING (5 5, 4 4)'), (3, 'LINESTRING (6 6, 7 7)'), (4, 'LINESTRING (0 0, -1 -1)'), (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')) AS t(id, geom) ) \nSELECT id, ST_AsText(geom), ST_ClusterWithinWin(geom, 1.4) OVER () AS cluster \nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3089, "question_en": "Imagine a scenario with some little lines and a big shape, and see if you can group them with a distance of 1.4. Just give me the number of each little thing, what it looks like, and which group it belongs to. The little lines are (0 0 to 1 1), (5 5 to 4 4), (6 6 to 7 7), (0 0 to -1 -1), and there's a polygon (0 0, 4 0, 4 4, 0 4, 0 0)."}
{"id": 590, "function": "ST_ClusterWithinWin", "question": "输出一个表，里面有id、几何WKT字符串和通过某种聚集方式得到的组号，距离设定为1.4。几何形状包括一些线段如(0 0到1 1)、(5 5到4 4)、(6 6到7 7)、(0 0到-1 -1)，还有一个形状像四边形的东西，坐标是(0 0, 4 0, 4 4, 0 4, 0 0)。", "sql": "WITH testdata AS ( \n   SELECT id, geom::geometry \n   FROM ( VALUES (1, 'LINESTRING (0 0, 1 1)'), (2, 'LINESTRING (5 5, 4 4)'), (3, 'LINESTRING (6 6, 7 7)'), (4, 'LINESTRING (0 0, -1 -1)'), (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')) AS t(id, geom) ) \nSELECT id, ST_AsText(geom), ST_ClusterWithinWin(geom, 1.4) OVER () AS cluster \nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3087, "question_en": "Output a table with id, geometry WKT strings, and group numbers obtained through some clustering method, with a distance set to 1.4. The shapes include some lines like (0 0 to 1 1), (5 5 to 4 4), (6 6 to 7 7), (0 0 to -1 -1), and a shape resembling a quadrilateral with coordinates (0 0, 4 0, 4 4, 0 4, 0 0)."}
{"id": 593, "function": "ST_Expand", "question": "给那些点串，像是2312980 110676这些，让它的外边框在上下左右各扩展10个单位，看看这个范围会是什么样子。", "sql": "SELECT CAST(ST_Expand(ST_GeomFromText('LINESTRING(2312980 110676,2312923 110701,2312892 110714)', 2163),10) AS box2d);", "execution_result": [["BOX(2312882 110666,2312990 110724)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3095, "question_en": "For those line points, like 2312980 110676, expand their outer boundary by 10 units on all sides and see what this area looks like."}
{"id": 594, "function": "ST_Expand", "question": "把那个立体的盒子，像是从(778783 2951741 1)到(794875 2970042.61545891 10)的空间，往外每个方向都拉长10个单位，看看会变成什么样子。", "sql": "SELECT ST_Expand(CAST('BOX3D(778783 2951741 1,794875 2970042.61545891 10)' As box3d),10);", "execution_result": [["BOX3D(778773 2951731 -9,794885 2970052.61545891 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3096, "question_en": "Take that 3D box, like the space from (778783 2951741 1) to (794875 2970042.61545891 10), and stretch it out by 10 units in every direction to see how it changes."}
{"id": 593, "function": "ST_Expand", "question": "把那条有点曲折的线，像是2312980 110676到2312923 110701再到2312892 110714，想象成一个装得下它的长方形，然后在横竖方向上各多出10个单位，最后变成一种叫box2d的东西。", "sql": "SELECT CAST(ST_Expand(ST_GeomFromText('LINESTRING(2312980 110676,2312923 110701,2312892 110714)', 2163),10) AS box2d);", "execution_result": [["BOX(2312882 110666,2312990 110724)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3090, "question_en": "Take that slightly winding line, like from 2312980 110676 to 2312923 110701 and then to 2312892 110714, imagine it fitting into a rectangle, then extend it by 10 units in both horizontal and vertical directions, and finally turn it into something called box2d."}
{"id": 594, "function": "ST_Expand", "question": "从一个像盒子一样的东西开始，里面有坐标778783 2951741 1到794875 2970042.61545891 10，然后在每个方向都多出10个单位，变成一个更大的三维空间。", "sql": "SELECT ST_Expand(CAST('BOX3D(778783 2951741 1,794875 2970042.61545891 10)' As box3d),10);", "execution_result": [["BOX3D(778773 2951731 -9,794885 2970052.61545891 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3097, "question_en": "Start with something like a box with coordinates from 778783 2951741 1 to 794875 2970042.61545891 10, then make it bigger by 10 units in every direction, creating a larger 3D space."}
{"id": 594, "function": "ST_Expand", "question": "想象一个包裹在坐标778783 2951741 1和794875 2970042.61545891 10之间的立体空间，把它往外推开，每个方向都多出10个单位。", "sql": "SELECT ST_Expand(CAST('BOX3D(778783 2951741 1,794875 2970042.61545891 10)' As box3d),10);", "execution_result": [["BOX3D(778773 2951731 -9,794885 2970052.61545891 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3098, "question_en": "Imagine a 3D space wrapped between the coordinates 778783 2951741 1 and 794875 2970042.61545891 10, and push it outward in every direction by 10 units."}
{"id": 593, "function": "ST_Expand", "question": "把那些点连起来形成的线，坐标是(2312980 110676,2312923 110701,2312892 110714)，想象它们在一个特定的框里，然后在东西南北每边都拉长10个单位，再看看这个拉长后的新框长什么样。", "sql": "SELECT CAST(ST_Expand(ST_GeomFromText('LINESTRING(2312980 110676,2312923 110701,2312892 110714)', 2163),10) AS box2d);", "execution_result": [["BOX(2312882 110666,2312990 110724)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3092, "question_en": "Join those points into a line, with coordinates (2312980 110676,2312923 110701,2312892 110714), imagine them in a specific box, then stretch each side by 10 units in all directions, and see what this new stretched box looks like."}
{"id": 593, "function": "ST_Expand", "question": "在一个特别的坐标系统下，有三颗小点(2312980 110676)、(2312923 110701)、(2312892 110714)连成一条线，想象一个把它们包住的最小长方形，然后在每个方向上都多出10个单位，看看最后的范围是什么。", "sql": "SELECT CAST(ST_Expand(ST_GeomFromText('LINESTRING(2312980 110676,2312923 110701,2312892 110714)', 2163),10) AS box2d);", "execution_result": [["BOX(2312882 110666,2312990 110724)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3091, "question_en": "In a special coordinate system, there are three small dots (2312980 110676), (2312923 110701), and (2312892 110714) connected by a line. Imagine the smallest rectangle that covers them, then extend it by 10 units in each direction to see what the final range is."}
{"id": 590, "function": "ST_ClusterWithinWin", "question": "给出每个记录的编号、那些形状的文本样子，以及用1.4距离来分小组的编号。这些形状包括：编号1的线段从(0 0)到(1 1)、编号2的线段从(5 5)到(4 4)、编号3的线段从(6 6)到(7 7)、编号4的线段从(0 0)到(-1 -1)，还有编号5的多边形是(0 0, 4 0, 4 4, 0 4, 0 0)。", "sql": "WITH testdata AS ( \n   SELECT id, geom::geometry \n   FROM ( VALUES (1, 'LINESTRING (0 0, 1 1)'), (2, 'LINESTRING (5 5, 4 4)'), (3, 'LINESTRING (6 6, 7 7)'), (4, 'LINESTRING (0 0, -1 -1)'), (5, 'POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0))')) AS t(id, geom) ) \nSELECT id, ST_AsText(geom), ST_ClusterWithinWin(geom, 1.4) OVER () AS cluster \nFROM testdata;", "execution_result": [[1, "LINESTRING(0 0,1 1)", 0], [2, "LINESTRING(5 5,4 4)", 0], [3, "LINESTRING(6 6,7 7)", 1], [4, "LINESTRING(0 0,-1 -1)", 0], [5, "POLYGON((0 0,4 0,4 4,0 4,0 0))", 0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3088, "question_en": "Provide the number for each record, the text representation of those shapes, and the group number formed using a distance of 1.4. These shapes include: number 1's line from (0 0) to (1 1), number 2's line from (5 5) to (4 4), number 3's line from (6 6) to (7 7), number 4's line from (0 0) to (-1 -1), and number 5's polygon is (0 0, 4 0, 4 4, 0 4, 0 0)."}
{"id": 594, "function": "ST_Expand", "question": "想象一个盒子，它的起点和终点是778783 2951741 1和794875 2970042.61545891 10，然后在各个方向都把它拉大10个单位，看看会是什么样子。", "sql": "SELECT ST_Expand(CAST('BOX3D(778783 2951741 1,794875 2970042.61545891 10)' As box3d),10);", "execution_result": [["BOX3D(778773 2951731 -9,794885 2970052.61545891 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3099, "question_en": "Imagine a box with starting and ending points at 778783 2951741 1 and 794875 2970042.61545891 10, then stretch it by 10 units in every direction and see what it looks like."}
{"id": 595, "function": "ST_Expand", "question": "给我看看那个点(2312980,110676)在地图上稍微放大10单位后是什么样子，用一种特别的格式来描述它。", "sql": "SELECT ST_AsEWKT(ST_Expand(ST_GeomFromEWKT('SRID=2163;POINT(2312980 110676)'),10));", "execution_result": [["SRID=2163;POLYGON((2312970 110666,2312970 110686,2312990 110686,2312990 110666,2312970 110666))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3106, "question_en": "Show me what the point (2312980,110676) looks like on the map when slightly enlarged by 10 units, using a special format to describe it."}
{"id": 594, "function": "ST_Expand", "question": "看看那个三维的盒子，从778783 2951741 1到794875 2970042.61545891 10，想象它在每个方向都胖十个单位，然后用一种特别的格式描述它。", "sql": "SELECT ST_Expand(CAST('BOX3D(778783 2951741 1,794875 2970042.61545891 10)' As box3d),10);", "execution_result": [["BOX3D(778773 2951731 -9,794885 2970052.61545891 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3100, "question_en": "Imagine that 3D box from 778783 2951741 1 to 794875 2970042.61545891 10, growing ten units in each direction, and describe it with a special format."}
{"id": 595, "function": "ST_Expand", "question": "把那个在坐标体系2163里的小点，想象成一块布，然后四周各拉伸10个单位，看看最后的图形，并把这个结果用特别的格式写出来。", "sql": "SELECT ST_AsEWKT(ST_Expand(ST_GeomFromEWKT('SRID=2163;POINT(2312980 110676)'),10));", "execution_result": [["SRID=2163;POLYGON((2312970 110666,2312970 110686,2312990 110686,2312990 110666,2312970 110666))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3104, "question_en": "Imagine the little dot in coordinate system 2163 as a piece of cloth, then stretch it 10 units in all directions, see the final shape, and write this result in a special format."}
{"id": 595, "function": "ST_Expand", "question": "把在某个地方的点(2312980 110676)四周都推开10个单位，然后看看它变成了什么形状，用特别的方式描述出来。", "sql": "SELECT ST_AsEWKT(ST_Expand(ST_GeomFromEWKT('SRID=2163;POINT(2312980 110676)'),10));", "execution_result": [["SRID=2163;POLYGON((2312970 110666,2312970 110686,2312990 110686,2312990 110666,2312970 110666))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3107, "question_en": "Take a point located at (2312980 110676) and push its surroundings by 10 units in all directions, then see what shape it becomes and describe it in a special way."}
{"id": 599, "function": "ST_3DExtent", "question": "想象一下，沿着x从1到3，y从1到2，z从0到2，形成了很多小点，你能找到一个能包住这些点的三维空间边界吗？", "sql": "SELECT ST_3DExtent(foo.geom) AS b3extent\nFROM (\n  SELECT ST_MakePoint(x, y, z) AS geom\n  FROM generate_series(1,3) AS x\n  CROSS JOIN generate_series(1,2) AS y\n  CROSS JOIN generate_series(0,2) AS z\n) AS foo;", "execution_result": [["BOX3D(1 1 0,3 2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3109, "question_en": "Imagine along x from 1 to 3, y from 1 to 2, z from 0 to 2, many little dots are formed; can you find a three-dimensional boundary that wraps around these dots?"}
{"id": 595, "function": "ST_Expand", "question": "在一个坐标系里，有一个点在(2312980, 110676)的位置，请给它加一个10单位宽的边，最后告诉我它变成什么样子。", "sql": "SELECT ST_AsEWKT(ST_Expand(ST_GeomFromEWKT('SRID=2163;POINT(2312980 110676)'),10));", "execution_result": [["SRID=2163;POLYGON((2312970 110666,2312970 110686,2312990 110686,2312990 110666,2312970 110666))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3103, "question_en": "In a coordinate system, there’s a point at (2312980, 110676). Please add a 10-unit wide edge around it and tell me what it looks like afterward."}
{"id": 599, "function": "ST_3DExtent", "question": "想象一下有一个空间，里面有很多小点，它们的x值从1到3，y值从1到2，z值从0到2。能否告诉我这个空间的边界，像一个盒子一样？", "sql": "SELECT ST_3DExtent(foo.geom) AS b3extent\nFROM (\n  SELECT ST_MakePoint(x, y, z) AS geom\n  FROM generate_series(1,3) AS x\n  CROSS JOIN generate_series(1,2) AS y\n  CROSS JOIN generate_series(0,2) AS z\n) AS foo;", "execution_result": [["BOX3D(1 1 0,3 2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3111, "question_en": "Imagine a space with many little dots where x values range from 1 to 3, y values from 1 to 2, and z values from 0 to 2. Can you tell me the boundary of this space, like a box?"}
{"id": 599, "function": "ST_3DExtent", "question": "找出由x在1到3，y在1到2，z在0到2之间的所有小点组成的一个最小的包住它们的立方体。", "sql": "SELECT ST_3DExtent(foo.geom) AS b3extent\nFROM (\n  SELECT ST_MakePoint(x, y, z) AS geom\n  FROM generate_series(1,3) AS x\n  CROSS JOIN generate_series(1,2) AS y\n  CROSS JOIN generate_series(0,2) AS z\n) AS foo;", "execution_result": [["BOX3D(1 1 0,3 2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3110, "question_en": "Find the smallest cube that covers all the little points formed by x from 1 to 3, y from 1 to 2, and z from 0 to 2."}
{"id": 599, "function": "ST_3DExtent", "question": "想象一下在x从1到3，y从1到2，z从0到2的范围内有许多小点，要找出一个大盒子可以把这些点都装下，然后把这个盒子的大小叫做b3extent。", "sql": "SELECT ST_3DExtent(foo.geom) AS b3extent\nFROM (\n  SELECT ST_MakePoint(x, y, z) AS geom\n  FROM generate_series(1,3) AS x\n  CROSS JOIN generate_series(1,2) AS y\n  CROSS JOIN generate_series(0,2) AS z\n) AS foo;", "execution_result": [["BOX3D(1 1 0,3 2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3108, "question_en": "Imagine there are many little dots with x ranging from 1 to 3, y from 1 to 2, and z from 0 to 2. Find a big box that can fit all these dots, and name the size of this box as b3extent."}
{"id": 595, "function": "ST_Expand", "question": "拿那个坐标系里的点POINT(2312980 110676)当中心，想象一个长方形往外扩张10个单位，然后告诉我它的样子。", "sql": "SELECT ST_AsEWKT(ST_Expand(ST_GeomFromEWKT('SRID=2163;POINT(2312980 110676)'),10));", "execution_result": [["SRID=2163;POLYGON((2312970 110666,2312970 110686,2312990 110686,2312990 110666,2312970 110666))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3102, "question_en": "Take that point POINT(2312980 110676) in the coordinate system as the center, imagine a rectangle expanding 10 units outward, and tell me what it looks like."}
{"id": 594, "function": "ST_Expand", "question": "想象一个盒子，它的范围从778783到794875在X轴上，从2951741到2970042.61545891在Y轴上，从1到10在Z轴上。这个盒子在每个方向都变大10个单位后会是什么样子？", "sql": "SELECT ST_Expand(CAST('BOX3D(778783 2951741 1,794875 2970042.61545891 10)' As box3d),10);", "execution_result": [["BOX3D(778773 2951731 -9,794885 2970052.61545891 20)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3101, "question_en": "Imagine a box, with its range from 778783 to 794875 on the X-axis, from 2951741 to 2970042.61545891 on the Y-axis, and from 1 to 10 on the Z-axis. What would this box look like after growing by 10 units in every direction?"}
{"id": 599, "function": "ST_3DExtent", "question": "有18个小点，x从1到3，y从1到2，z从0到2，找出一个能包住所有这些点的最小盒子，结果是一种3D的盒子形状。", "sql": "SELECT ST_3DExtent(foo.geom) AS b3extent\nFROM (\n  SELECT ST_MakePoint(x, y, z) AS geom\n  FROM generate_series(1,3) AS x\n  CROSS JOIN generate_series(1,2) AS y\n  CROSS JOIN generate_series(0,2) AS z\n) AS foo;", "execution_result": [["BOX3D(1 1 0,3 2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3112, "question_en": "There are 18 little dots with x from 1 to 3, y from 1 to 2, and z from 0 to 2. Find the smallest box that can enclose all these dots, and the result is a 3D box shape."}
{"id": 599, "function": "ST_3DExtent", "question": "用那些点的组合，像是x在1到3之间，y在1到2之间，z在0到2之间，告诉我一个能把它们都框住的3D盒子。", "sql": "SELECT ST_3DExtent(foo.geom) AS b3extent\nFROM (\n  SELECT ST_MakePoint(x, y, z) AS geom\n  FROM generate_series(1,3) AS x\n  CROSS JOIN generate_series(1,2) AS y\n  CROSS JOIN generate_series(0,2) AS z\n) AS foo;", "execution_result": [["BOX3D(1 1 0,3 2 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3113, "question_en": "With those combined points, like x between 1 and 3, y between 1 and 2, z between 0 and 2, tell me a 3D box that can encompass them all."}
{"id": 602, "function": "ST_3DMakeBox", "question": "用这些数字(-989502.1875, 528439.5625, 10)和(-987121.375, 529933.1875, 10)来做个能把它们都装下的三维盒子。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(-989502.1875, 528439.5625, 10), ST_MakePoint(-987121.375 ,529933.1875, 10)) AS abb3d；", "execution_result": [["BOX3D(-989502.1875 528439.5625 10,-987121.375 529933.1875 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3119, "question_en": "Use these numbers (-989502.1875, 528439.5625, 10) and (-987121.375, 529933.1875, 10) to make a 3D box that can fit them all."}
{"id": 602, "function": "ST_3DMakeBox", "question": "从两个三维小点开始，一个在(-989502.1875, 528439.5625, 10)，另一个在(-987121.375, 529933.1875, 10)，想象一个包罗万象的盒子，并给它起个名字叫abb3d。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(-989502.1875, 528439.5625, 10), ST_MakePoint(-987121.375 ,529933.1875, 10)) AS abb3d；", "execution_result": [["BOX3D(-989502.1875 528439.5625 10,-987121.375 529933.1875 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3114, "question_en": "Starting from two little 3D dots, one at (-989502.1875, 528439.5625, 10) and the other at (-987121.375, 529933.1875, 10), imagine a box that covers it all and name it abb3d."}
{"id": 603, "function": "ST_XMax", "question": "怎样找到那个包含了三维曲线220268 150415 1, 220227 150505 2, 220227 150406 3的最大X值？", "sql": "SELECT ST_XMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220288.24878054656]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3122, "question_en": "How to find the largest X value that includes the 3D curve 220268 150415 1, 220227 150505 2, 220227 150406 3?"}
{"id": 602, "function": "ST_3DMakeBox", "question": "如果你用(-989502.1875, 528439.5625, 10)和(-987121.375, 529933.1875, 10)两个点作为对角线，会得到什么样的三维空间盒子呢？", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(-989502.1875, 528439.5625, 10), ST_MakePoint(-987121.375 ,529933.1875, 10)) AS abb3d；", "execution_result": [["BOX3D(-989502.1875 528439.5625 10,-987121.375 529933.1875 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3118, "question_en": "If you use the points (-989502.1875, 528439.5625, 10) and (-987121.375, 529933.1875, 10) as a diagonal, what kind of 3D space box do you get?"}
{"id": 602, "function": "ST_3DMakeBox", "question": "用这两个三维位置(-989502.1875, 528439.5625, 10)和(-987121.375, 529933.1875, 10)来搞出一个能包住它们的盒子形状，叫它abb3d。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(-989502.1875, 528439.5625, 10), ST_MakePoint(-987121.375 ,529933.1875, 10)) AS abb3d；", "execution_result": [["BOX3D(-989502.1875 528439.5625 10,-987121.375 529933.1875 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3115, "question_en": "Use these two 3D locations (-989502.1875, 528439.5625, 10) and (-987121.375, 529933.1875, 10) to create a box shape that can cover them, and call it abb3d."}
{"id": 603, "function": "ST_XMax", "question": "找出那个由三个点组成的弯曲线在图中最右边的X位置是多少，记得用小数来表达哦。", "sql": "SELECT ST_XMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220288.24878054656]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3124, "question_en": "Find out what the furthest right X position is for that curved line made of three points in the diagram, remember to express it as a decimal."}
{"id": 603, "function": "ST_XMax", "question": "找出那些坐标连成的弧形中，哪个地方的X值最大？坐标是220268 150415 1，220227 150505 2，220227 150406 3。", "sql": "SELECT ST_XMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220288.24878054656]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3120, "question_en": "Find out which place has the largest X value in the arc formed by those coordinates? The coordinates are 220268 150415 1, 220227 150505 2, 220227 150406 3."}
{"id": 602, "function": "ST_3DMakeBox", "question": "用两个三维小点来画一个空间盒子，这两个点是(-989502.1875, 528439.5625, 10)和(-987121.375, 529933.1875, 10)，都在高度10那里，叫它abb3d吧。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(-989502.1875, 528439.5625, 10), ST_MakePoint(-987121.375 ,529933.1875, 10)) AS abb3d；", "execution_result": [["BOX3D(-989502.1875 528439.5625 10,-987121.375 529933.1875 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3116, "question_en": "Use two little 3D dots to draw a space box, these dots are at (-989502.1875, 528439.5625, 10) and (-987121.375, 529933.1875, 10), both at height 10, let's call it abb3d."}
{"id": 603, "function": "ST_XMax", "question": "找出那条弯曲路径里的最大X值，路径由(220268 150415 1, 220227 150505 2, 220227 150406 3)这些点构成，给我一个小数结果。", "sql": "SELECT ST_XMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220288.24878054656]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3123, "question_en": "Find the largest X value in that curvy path made by the points (220268 150415 1, 220227 150505 2, 220227 150406 3), and give me a decimal result."}
{"id": 602, "function": "ST_3DMakeBox", "question": "能不能给我一个文字描述，来表示由两个三维小点构成的盒子？这些点是(-989502.1875, 528439.5625, 10)和(-987121.375, 529933.1875, 10)。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(-989502.1875, 528439.5625, 10), ST_MakePoint(-987121.375 ,529933.1875, 10)) AS abb3d；", "execution_result": [["BOX3D(-989502.1875 528439.5625 10,-987121.375 529933.1875 10)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3117, "question_en": "Can you give me a text description to represent a box made from two tiny 3D dots? These dots are (-989502.1875, 528439.5625, 10) and (-987121.375, 529933.1875, 10)."}
{"id": 603, "function": "ST_XMax", "question": "对于那些带有220268 150415 1、220227 150505 2、220227 150406 3这样数字的圆弧形状，找出一个包住它们的框框里最大的X数值。", "sql": "SELECT ST_XMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220288.24878054656]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3121, "question_en": "For those arc shapes with numbers like 220268 150415 1, 220227 150505 2, and 220227 150406 3, find the biggest X number in a box that surrounds them."}
{"id": 604, "function": "ST_XMax", "question": "对于一个三维的盒子，想知道在X方向上能到的最右边是多少，盒子的底部在(1,2,3)，顶部在(4,5,6)。", "sql": "SELECT ST_XMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3126, "question_en": "For a three-dimensional box, find out how far right it can go in the X direction, with the base at (1,2,3) and the top at (4,5,6)."}
{"id": 604, "function": "ST_XMax", "question": "看看那个由(1,2,3)和(4,5,6)这些点决定的立体框架，找出它在横向上的最大数值。", "sql": "SELECT ST_XMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3127, "question_en": "Take a look at that 3D frame determined by the points (1,2,3) and (4,5,6), and find out its biggest number sideways."}
{"id": 595, "function": "ST_Expand", "question": "给我一个字符串，描述一下那个点在坐标2312980 110676附近，往外延伸10个单位后的样子。", "sql": "SELECT ST_AsEWKT(ST_Expand(ST_GeomFromEWKT('SRID=2163;POINT(2312980 110676)'),10));", "execution_result": [["SRID=2163;POLYGON((2312970 110666,2312970 110686,2312990 110686,2312990 110666,2312970 110666))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3105, "question_en": "Give me a string that describes how the point near coordinates 2312980 110676 looks after stretching out 10 units."}
{"id": 604, "function": "ST_XMax", "question": "找出那个立体空间盒子范围里，最高的X值，这个盒子是由(1,2,3)和(4,5,6)两个角组成的。", "sql": "SELECT ST_XMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3128, "question_en": "Find the highest X value in that 3D box range, which is formed by the corners (1,2,3) and (4,5,6)."}
{"id": 603, "function": "ST_XMax", "question": "对于那些包含三个控制点的弯曲线，像是(220268 150415 1)、(220227 150505 2)、(220227 150406 3)，你能找出包围它的那个矩形在横着的方向上最远的坐标吗？", "sql": "SELECT ST_XMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220288.24878054656]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3125, "question_en": "For those curved lines with three control points, like (220268 150415 1), (220227 150505 2), (220227 150406 3), can you find the furthest coordinate of the rectangle that surrounds it in the sideways direction?"}
{"id": 604, "function": "ST_XMax", "question": "对于那个三维空间里的盒子，从1 2 3到4 5 6，找出X方向上最大的数值，要用特别精确的数字表示哦。", "sql": "SELECT ST_XMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3130, "question_en": "For that box in the three-dimensional space, from 1 2 3 to 4 5 6, find the largest value in the X direction, and make sure to use very precise numbers."}
{"id": 605, "function": "ST_XMax", "question": "有一条从点(1 3 4)到点(5 6 7)的三维线路，想知道它在X方向上那个外边框的最大数字是多少。", "sql": "SELECT ST_XMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3133, "question_en": "There's a 3D path from point (1 3 4) to point (5 6 7), and I'm curious about the biggest number of its outer frame in the X direction."}
{"id": 605, "function": "ST_XMax", "question": "找出那条从(1,3,4)到(5,6,7)的小线段里，X方向上最大的数字是多少。", "sql": "SELECT ST_XMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3132, "question_en": "Find the biggest number in the X-direction for that little line going from (1,3,4) to (5,6,7)."}
{"id": 606, "function": "ST_XMax", "question": "找出那个包含点(-3 2)和点(3 4)的大方块中，往右边最远的横坐标是多少。", "sql": "SELECT ST_XMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3138, "question_en": "Find out what the farthest right horizontal coordinate is in the big box that includes the points (-3 2) and (3 4)."}
{"id": 605, "function": "ST_XMax", "question": "对于那个有点像连接点的东西，1 3 4到5 6 7，找出X方向上最大的那个数字，给我一个小数。", "sql": "SELECT ST_XMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3137, "question_en": "For that thing that kind of looks like connecting points, from 1 3 4 to 5 6 7, find the biggest number in the X direction and give me a decimal."}
{"id": 606, "function": "ST_XMax", "question": "看看从左下到右上用点(-3,2)和(3,4)围起来的那片区域，找出它在横向上最远的那个点的数值。", "sql": "SELECT ST_XMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3140, "question_en": "Look at that area enclosed from bottom-left to top-right using the points (-3,2) and (3,4), find the farthest point's value in the horizontal direction."}
{"id": 605, "function": "ST_XMax", "question": "怎么找出那条3D线段从点(1,3,4)到(5,6,7)的X方向最大值啊？", "sql": "SELECT ST_XMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3134, "question_en": "How do you find the X-direction maximum value of that 3D line segment from point (1,3,4) to (5,6,7)?"}
{"id": 605, "function": "ST_XMax", "question": "找出在X方向上，连接点(1 3 4)和(5 6 7)的那条线里最大的数。", "sql": "SELECT ST_XMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3135, "question_en": "Find the biggest number in the X direction for the line connecting the points (1 3 4) and (5 6 7)."}
{"id": 605, "function": "ST_XMax", "question": "找出由(1 3 4)和(5 6 7)这两个点连成的线在X轴上最远的那一边的数值是多少？", "sql": "SELECT ST_XMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3136, "question_en": "What is the value of the farthest side on the X-axis for the line made by connecting the points (1 3 4) and (5 6 7)?"}
{"id": 604, "function": "ST_XMax", "question": "找出从1 2 3到4 5 6之间的那个大方块在横向上最大的数字，用小数表示。", "sql": "SELECT ST_XMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3129, "question_en": "Find the biggest number in the horizontal direction of the big block from 1 2 3 to 4 5 6, showing it as a decimal."}
{"id": 606, "function": "ST_XMax", "question": "把那个写着'BOX(-3 2, 3 4)'的东西变成一个边界图形，然后找出在横着的那条线上最大的位置。", "sql": "SELECT ST_XMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3139, "question_en": "Take that thing saying 'BOX(-3 2, 3 4)' and turn it into a boundary shape, then find the biggest spot on the horizontal line."}
{"id": 606, "function": "ST_XMax", "question": "把那个盒子形状从(-3 2)到(3 4)换成一个二维的盒子后，看看横着的最大值是多少。", "sql": "SELECT ST_XMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3141, "question_en": "After changing that box shape from (-3 2) to (3 4) into a two-dimensional box, see what the maximum horizontal value is."}
{"id": 604, "function": "ST_XMax", "question": "在三维空间里有个框，像这样：BOX3D(1 2 3, 4 5 6)，找出它在X方向上能达到的最远点是多少，不需要任何单位或装饰。", "sql": "SELECT ST_XMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3131, "question_en": "In a 3D space, there's a box like this: BOX3D(1 2 3, 4 5 6). Find out how far it can reach in the X direction, without any units or decoration."}
{"id": 606, "function": "ST_XMax", "question": "想知道那个从左到右的最大值吗？看看那个盒子里，坐标是从-3到3之间的，给我一个小数结果。", "sql": "SELECT ST_XMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3142, "question_en": "Want to know the maximum value from left to right? Look inside that box, coordinates range from -3 to 3, give me a decimal result."}
{"id": 606, "function": "ST_XMax", "question": "把那个小盒子形状从(-3 2)到(3 4)转换成某种范围后，找出它在横向上的最大值是多少。", "sql": "SELECT ST_XMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3143, "question_en": "Convert that little box shape from (-3 2) to (3 4) into some kind of range, then find out what its maximum value is horizontally."}
{"id": 607, "function": "ST_XMin", "question": "对于那些像弯曲线条的东西，坐标是220268 150415 1,220227 150505 2,220227 150406 3，看看在水平线上最靠左的点在哪里。", "sql": "SELECT ST_XMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220186.99512189245]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3145, "question_en": "For those wavy line-like things, with coordinates 220268 150415 1, 220227 150505 2, 220227 150406 3, find where the leftmost point is on the horizontal line."}
{"id": 607, "function": "ST_XMin", "question": "找出由那些三维位置点组成的弯曲线条中，最小的那个X值是多少？点的坐标是220268 150415 1, 220227 150505 2, 220227 150406 3。", "sql": "SELECT ST_XMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220186.99512189245]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3144, "question_en": "Find out the smallest X value among those curvy lines formed by the 3D location points. The points have coordinates 220268 150415 1, 220227 150505 2, 220227 150406 3."}
{"id": 607, "function": "ST_XMin", "question": "从那个三维圆形线路CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)的外框中，找出最小的X坐标吧。", "sql": "SELECT ST_XMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220186.99512189245]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3146, "question_en": "From that 3D circular path CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3), find the smallest X-coordinate from its boundary."}
{"id": 607, "function": "ST_XMin", "question": "找出那个包含三维圆弧的框框在横向的最小位置，三维圆弧有这些点：220268 150415 1, 220227 150505 2, 220227 150406 3。", "sql": "SELECT ST_XMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220186.99512189245]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3148, "question_en": "Find the smallest horizontal spot of the box that holds the 3D arc, with these points: 220268 150415 1, 220227 150505 2, 220227 150406 3."}
{"id": 608, "function": "ST_XMin", "question": "在那种三维盒子里，看看最小的X坐标是多少，像是从(1 2 3)到(4 5 6)这样的。", "sql": "SELECT ST_XMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3153, "question_en": "In that kind of 3D box, check what the smallest X coordinate is, like from (1 2 3) to (4 5 6)."}
{"id": 607, "function": "ST_XMin", "question": "找出那些像弯曲线一样的东西中，最靠左的点的X值，坐标有220268 150415 1，220227 150505 2，还有220227 150406 3。", "sql": "SELECT ST_XMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220186.99512189245]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3147, "question_en": "Find the X value of the leftmost point among those curved line-like things, with coordinates like 220268 150415 1, 220227 150505 2, and 220227 150406 3."}
{"id": 608, "function": "ST_XMin", "question": "在X轴上，看看那个从(1, 2, 3)到(4, 5, 6)的立体空间的最小点是多少。", "sql": "SELECT ST_XMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3154, "question_en": "On the X-axis, see what the smallest point is in that 3D space from (1, 2, 3) to (4, 5, 6)."}
{"id": 607, "function": "ST_XMin", "question": "找到一个包含三个控制点(220268 150415 1)、(220227 150505 2)、(220227 150406 3)的圆弧，它最左边的那个X值是多少？", "sql": "SELECT ST_XMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[220186.99512189245]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3149, "question_en": "Find the most left X value of an arc that includes the three control points (220268 150415 1), (220227 150505 2), (220227 150406 3)."}
{"id": 608, "function": "ST_XMin", "question": "找出在那个立体空间里，左下角是(1,2,3)和右上角是(4,5,6)的形状，它在X方向上最靠左的那个数字。", "sql": "SELECT ST_XMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3151, "question_en": "Find the most leftward number in the X direction for that 3D space, where the bottom corner is (1,2,3) and the top corner is (4,5,6)."}
{"id": 609, "function": "ST_XMin", "question": "找出由那些点组成的线段中，横坐标最小的数字是多少？点分别是(1 3 4)和(5 6 7)。", "sql": "SELECT ST_XMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3156, "question_en": "Find out what's the smallest number for the horizontal position among those points forming a line segment? The points are (1 3 4) and (5 6 7)."}
{"id": 609, "function": "ST_XMin", "question": "有一个连接了两个点(1 3 4)和(5 6 7)的线，找出它在X方向上的最小边界值。", "sql": "SELECT ST_XMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3157, "question_en": "There's a line linking two points (1 3 4) and (5 6 7), find out the smallest boundary value in the X direction."}
{"id": 609, "function": "ST_XMin", "question": "从点(1 3 4)到点(5 6 7)画一条空间线，找出这条线在X方向上最靠左的那个数字。", "sql": "SELECT ST_XMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3158, "question_en": "From point (1 3 4) to point (5 6 7), draw a spatial line and find the furthest left number on the X direction."}
{"id": 608, "function": "ST_XMin", "question": "看看那个从1 2 3到4 5 6的立体盒子，它的X轴上最小的那一边是多少？", "sql": "SELECT ST_XMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3152, "question_en": "Take a look at that 3D box stretching from 1 2 3 to 4 5 6, what's the smallest side on the X-axis?"}
{"id": 609, "function": "ST_XMin", "question": "找出由1 3 4和5 6 7这两个点连接成的三维线条中，最左边的那个数。", "sql": "SELECT ST_XMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3159, "question_en": "Find the leftmost number in the 3D line made by connecting the points 1 3 4 and 5 6 7."}
{"id": 609, "function": "ST_XMin", "question": "看看由一些点组成的线，它从(1 3 4)到(5 6 7)延伸，告诉我在水平线上的最靠左边的数字是多少，用小数表示。", "sql": "SELECT ST_XMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3160, "question_en": "Look at the line made up of some points, stretching from (1 3 4) to (5 6 7), and tell me the furthest left number on the horizontal line, using a decimal."}
{"id": 609, "function": "ST_XMin", "question": "看看用那些坐标点(1 3 4, 5 6 7)画出来的三维线的外面框框，告诉我这个框框在X方向上最小的那个数字。", "sql": "SELECT ST_XMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3161, "question_en": "Take a look at the outer box drawn with those points (1 3 4, 5 6 7) for the 3D line, and tell me the smallest number in the X direction of this box."}
{"id": 610, "function": "ST_XMin", "question": "找出那些坐标范围里最左边的点的X值，范围是从(-3, 2)到(3, 4)。", "sql": "SELECT ST_XMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[-3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3162, "question_en": "Find the X value of the leftmost point within those coordinate boundaries, ranging from (-3, 2) to (3, 4)."}
{"id": 610, "function": "ST_XMin", "question": "把那个写着'BOX(-3 2, 3 4)'的东西变成一个能装下它的形状，然后告诉我左下角的那个点的横坐标是多少。", "sql": "SELECT ST_XMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[-3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3163, "question_en": "Take that thing labeled 'BOX(-3 2, 3 4)' and turn it into a shape that can fit it, then let me know the horizontal coordinate of the point at the bottom-left corner."}
{"id": 610, "function": "ST_XMin", "question": "如果把'BOX(-3 2, 3 4)'变成那种能包住它的框，你觉得最左边的点在什么位置？", "sql": "SELECT ST_XMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[-3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3165, "question_en": "If you turn 'BOX(-3 2, 3 4)' into a frame that can cover it, where do you think the leftmost point is located?"}
{"id": 610, "function": "ST_XMin", "question": "想象一个由角落点(-3,2)和(3,4)形成的平面矩形，找出它在横向上最靠左的边界值。", "sql": "SELECT ST_XMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[-3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3164, "question_en": "Imagine a flat rectangle formed by corner points (-3,2) and (3,4), find its most leftward boundary value on the horizontal axis."}
{"id": 610, "function": "ST_XMin", "question": "把形状像盒子的范围'BOX(-3 2, 3 4)'变成一种空间盒子，然后告诉我它在X轴上最左边的点是多少。", "sql": "SELECT ST_XMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[-3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3167, "question_en": "Turn the box-like shape 'BOX(-3 2, 3 4)' into a spatial box, and then tell me what is the furthest left point along the X-axis."}
{"id": 610, "function": "ST_XMin", "question": "能告诉我那个从左下角(-3,2)到右上角(3,4)的框，最靠左的地方是哪个数字吗？", "sql": "SELECT ST_XMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[-3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3166, "question_en": "Can you tell me the number that is the farthest left for that box from the bottom-left (-3,2) to the top-right (3,4)?"}
{"id": 611, "function": "ST_YMax", "question": "在立体的盒子里，看看从(1,2,3)到(4,5,6)的范围中，Y的最高点是多少。", "sql": "SELECT ST_YMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3168, "question_en": "In the 3D box, find out the highest point of Y from the range (1,2,3) to (4,5,6)."}
{"id": 611, "function": "ST_YMax", "question": "在那些对角线点(1 2 3)和(4 5 6)之间的空间里，找出沿着Y轴最高的那个数值。", "sql": "SELECT ST_YMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3169, "question_en": "In the space between those diagonal points (1 2 3) and (4 5 6), find the highest number along the Y-axis."}
{"id": 611, "function": "ST_YMax", "question": "找出在那个3D盒子里Y方向上的最高数值，坐标是(1 2 3, 4 5 6)。", "sql": "SELECT ST_YMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3171, "question_en": "Find the highest number in the Y direction of that 3D box, the coordinates are (1 2 3, 4 5 6)."}
{"id": 611, "function": "ST_YMax", "question": "找出那个从1到4、2到5、3到6的三维空间里，在上下方向上最大的那个数字。", "sql": "SELECT ST_YMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3172, "question_en": "Find the biggest number in the up-and-down direction within the 3D space ranging from 1 to 4, 2 to 5, and 3 to 6."}
{"id": 611, "function": "ST_YMax", "question": "看看这个由(1 2 3)到(4 5 6)的盒子，告诉我它在上下方向上能到的最高点。", "sql": "SELECT ST_YMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3173, "question_en": "Look at this box from (1 2 3) to (4 5 6), and tell me the highest point it can reach in the up-and-down direction."}
{"id": 611, "function": "ST_YMax", "question": "怎么找到那个3D空间里，坐标范围从(1 2 3)到(4 5 6)的形状在Y方向上的最大值？", "sql": "SELECT ST_YMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3170, "question_en": "How can you find the biggest number on the Y side of that 3D space, where the coordinates go from (1 2 3) to (4 5 6)?"}
{"id": 608, "function": "ST_XMin", "question": "你知道那个由两对角点(1,2,3)和(4,5,6)构成的立体框吗？想想它最左边的部分，能告诉我那个X值是多少吗？", "sql": "SELECT ST_XMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3150, "question_en": "Do you know that 3D box made by the diagonal points (1,2,3) and (4,5,6)? Think about its leftmost part, can you tell me what the X value is?"}
{"id": 612, "function": "ST_YMax", "question": "找出由那些坐标点组成的弯弯的线条中，哪个地方的Y值最高，这些点是220268 150415 1、220227 150505 2和220227 150406 3。", "sql": "SELECT ST_YMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150506.12682932706]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3174, "question_en": "Find out which spot has the highest Y value in that curvy line made from those points, which are 220268 150415 1, 220227 150505 2, and 220227 150406 3."}
{"id": 612, "function": "ST_YMax", "question": "对于那些坐标点组成的圆弧，比如220268 150415 1, 220227 150505 2, 220227 150406 3，找出它们围起来的最大高度。", "sql": "SELECT ST_YMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150506.12682932706]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3175, "question_en": "For the circular arc made of points like 220268 150415 1, 220227 150505 2, 220227 150406 3, find the greatest height of the area they cover."}
{"id": 612, "function": "ST_YMax", "question": "找出由这些点串起来的弧形中，Y坐标的最高值，像是(220268 150415 1, 220227 150505 2, 220227 150406 3)。", "sql": "SELECT ST_YMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150506.12682932706]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3177, "question_en": "Find the highest Y-coordinate from the arc formed by these points, like (220268 150415 1, 220227 150505 2, 220227 150406 3)."}
{"id": 612, "function": "ST_YMax", "question": "找找那条由点220268 150415 1、220227 150505 2和220227 150406 3围成的圆弧，看看它最高的地方在哪儿。", "sql": "SELECT ST_YMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150506.12682932706]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3179, "question_en": "Find the highest spot on that arc formed by the points 220268 150415 1, 220227 150505 2, and 220227 150406 3."}
{"id": 613, "function": "ST_YMax", "question": "对于那条在空间中连接点(1 3 4)和(5 6 7)的线，找到它在竖着方向上最大的那个数。", "sql": "SELECT ST_YMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3181, "question_en": "For that line connecting the points (1 3 4) and (5 6 7) in space, find the biggest number in the up-and-down direction."}
{"id": 608, "function": "ST_XMin", "question": "对于那个从1 2 3到4 5 6的立体盒子，找出在X方向上最小的数值是什么，然后用小数形式告诉我。", "sql": "SELECT ST_XMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3155, "question_en": "For that 3D box stretching from 1 2 3 to 4 5 6, find out what the smallest number is in the X direction, then tell me in decimal form."}
{"id": 613, "function": "ST_YMax", "question": "找出那些点之间的线条里，哪个地方的Y坐标是最高的，给定的是(1 3 4)到(5 6 7)这些数字。", "sql": "SELECT ST_YMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3180, "question_en": "Find out where the Y-coordinate is the highest in the line connecting those points, given the numbers (1 3 4) to (5 6 7)."}
{"id": 612, "function": "ST_YMax", "question": "找出在那些数字坐标里，哪个地方的Y坐标值是最大的，像在220268 150415 1, 220227 150505 2, 220227 150406 3这样的弯曲路径里。", "sql": "SELECT ST_YMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150506.12682932706]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3176, "question_en": "Find out which spot has the highest Y-coordinate among those number coordinates, like in the curved path of 220268 150415 1, 220227 150505 2, 220227 150406 3."}
{"id": 612, "function": "ST_YMax", "question": "找出那个像圆弧的东西在垂直方向上能到达的最高点，坐标是(220268 150415 1,220227 150505 2,220227 150406 3)。", "sql": "SELECT ST_YMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150506.12682932706]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3178, "question_en": "Find the highest point that the arc-like thing can reach vertically, with coordinates (220268 150415 1,220227 150505 2,220227 150406 3)."}
{"id": 613, "function": "ST_YMax", "question": "找出那些小点的Y值里最大的一个，来自于连接(1 3 4)和(5 6 7)的线，结果要是小数哦。", "sql": "SELECT ST_YMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3183, "question_en": "Find the biggest Y value among those little dots, coming from the line connecting (1 3 4) and (5 6 7), and the result should be a decimal."}
{"id": 613, "function": "ST_YMax", "question": "看看那个有高度的线段，从它的所有小点中找出最大的Y值是多少。", "sql": "SELECT ST_YMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3185, "question_en": "Take a look at that line with height values, and find out the largest Y value among all its little points."}
{"id": 614, "function": "ST_YMax", "question": "你能找出那个从左下(-3,2)到右上(3,4)的四边形的最高的Y值吗？", "sql": "SELECT ST_YMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3186, "question_en": "Can you find the highest Y value of that rectangle from bottom-left (-3,2) to top-right (3,4)?"}
{"id": 613, "function": "ST_YMax", "question": "看看那些三维点(1 3 4)和(5 6 7)连起来的线，在上下方向上最高能到哪个位置，结果要是个精确的数字哦。", "sql": "SELECT ST_YMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3184, "question_en": "Check where the line formed by those 3D points (1 3 4) and (5 6 7) can reach the highest in the up-down direction, and the result should be a precise number."}
{"id": 614, "function": "ST_YMax", "question": "看看那个由(-3,2)和(3,4)这两个点画出来的长方形，它的上面到哪里？", "sql": "SELECT ST_YMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3188, "question_en": "For that rectangle drawn with points (-3,2) and (3,4), how high does it go on top?"}
{"id": 614, "function": "ST_YMax", "question": "请告诉我那个包含点(-3 2)和点(3 4)的盒子，经过某种变换后，它在竖直方向上能到达的最高位置是多少。", "sql": "SELECT ST_YMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3189, "question_en": "Can you tell me the highest vertical position that the box containing the points (-3 2) and (3 4) can reach after some kind of transformation?"}
{"id": 614, "function": "ST_YMax", "question": "把那个盒子 -3 2到3 4换成一种简单的形式，看看它上下的范围，特别是上边的那个数，用单精度小数表示。", "sql": "SELECT ST_YMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3191, "question_en": "Change that box from -3 2 to 3 4 into a simpler form, and check its up and down range, especially the top number, expressed as a single-precision float."}
{"id": 614, "function": "ST_YMax", "question": "把那种'BOX(-3 2, 3 4)'的描述弄成某种边界框，然后看看它在上上下下方向上最大的那个数。", "sql": "SELECT ST_YMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3187, "question_en": "Turn that 'BOX(-3 2, 3 4)' description into some kind of boundary box, then find out its biggest number in the up-and-down direction."}
{"id": 615, "function": "ST_YMin", "question": "找出那个从(1,2,3)到(4,5,6)之间的立体边缘中的最小Y值。", "sql": "SELECT ST_YMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3192, "question_en": "Find the smallest Y-value in that 3D edge from (1,2,3) to (4,5,6)."}
{"id": 615, "function": "ST_YMin", "question": "给出一个三维的盒子，左下角是1 2 3，右上角是4 5 6，能找出里面Y方向最小的那个值吗？", "sql": "SELECT ST_YMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3196, "question_en": "Given a 3D box with the lower-left corner at 1 2 3 and the upper-right corner at 4 5 6, can you find the smallest value in the Y direction?"}
{"id": 613, "function": "ST_YMax", "question": "在那个连接点的线条中，看看哪个地方的Y值最高，像是1 3 4和5 6 7这些数字。", "sql": "SELECT ST_YMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3182, "question_en": "In that connecting line, see which place has the highest Y value, like the numbers 1 3 4 and 5 6 7."}
{"id": 615, "function": "ST_YMin", "question": "在用那些数字(1 2 3)和(4 5 6)围成的立体空间里，找出那个最低的Y值。", "sql": "SELECT ST_YMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3195, "question_en": "In the 3D space formed by those numbers (1 2 3) and (4 5 6), find the lowest Y value."}
{"id": 615, "function": "ST_YMin", "question": "假设有个三维的盒子，里面有两个点，一个是(1,2,3)，另一个是(4,5,6)，想知道在这个盒子里Y方向上最小的那个数是啥。", "sql": "SELECT ST_YMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3194, "question_en": "Imagine a 3D box with two points, one at (1,2,3) and the other at (4,5,6). What’s the smallest number in the Y direction within this box?"}
{"id": 615, "function": "ST_YMin", "question": "在三维空间中有个框，左下角是(1,2,3)，右上角是(4,5,6)，找出这个框在垂直方向上最小的那个数值。", "sql": "SELECT ST_YMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3193, "question_en": "In a 3D space, there's a box with a lower corner at (1,2,3) and an upper corner at (4,5,6). Find the smallest number in the vertical direction for this box."}
{"id": 614, "function": "ST_YMax", "question": "把那个-3 2到3 4的盒子换成一个能装起来的样子，看看它上面边缘的Y是多少，然后告诉我那个数字。", "sql": "SELECT ST_YMax(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3190, "question_en": "Turn that box from -3 2 to 3 4 into a shape that fits it all, and find out the Y at the top edge, then tell me that number."}
{"id": 616, "function": "ST_YMin", "question": "看看那由三个三维位置(220268 150415 1,220227 150505 2,220227 150406 3)形成的圆弧中，哪个地方的Y值最低。", "sql": "SELECT ST_YMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150406.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3198, "question_en": "See which spot in the arc formed by those three 3D places (220268 150415 1,220227 150505 2,220227 150406 3) has the lowest Y value."}
{"id": 615, "function": "ST_YMin", "question": "找出那个拥有底部在(1,2,3)和顶部在(4,5,6)之间的立体框的最低Y值。", "sql": "SELECT ST_YMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3197, "question_en": "Find the lowest Y value of that 3D box with its bottom at (1,2,3) and top at (4,5,6)."}
{"id": 616, "function": "ST_YMin", "question": "对于那些包含在圆弧的坐标点中，找找看它们整体包围的范围里最低的Y值是多少。", "sql": "SELECT ST_YMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150406.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3199, "question_en": "For those coordinates in the arc, see what the lowest Y value is within the area that covers them all."}
{"id": 617, "function": "ST_YMin", "question": "在由两个三维小点构成的线段中，找出那些点的范围里最小的Y值是多少？", "sql": "SELECT ST_YMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3206, "question_en": "In the line made of two tiny 3D dots, what is the smallest Y value within the range of those points?"}
{"id": 616, "function": "ST_YMin", "question": "从那条连接三个点的弯曲路径中，找出它在上下方向的最低位置。这些点是(220268 150415 1)、(220227 150505 2)和(220227 150406 3)。", "sql": "SELECT ST_YMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150406.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3200, "question_en": "From the bendy path connecting those three points, find its lowest position in the up-down direction. These points are (220268 150415 1), (220227 150505 2), and (220227 150406 3)."}
{"id": 617, "function": "ST_YMin", "question": "看看由那些点(1 3 4)和(5 6 7)连成的线，在竖直方向上最靠下的那个数是多少，用小数表示哦。", "sql": "SELECT ST_YMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3208, "question_en": "Find out what the lowest number is in the vertical direction for the line made by those points (1 3 4) and (5 6 7), and show it as a decimal."}
{"id": 616, "function": "ST_YMin", "question": "找出那条用一串数字表示的弯曲线里的最低点的第二个数字是多少，结果是个小数。", "sql": "SELECT ST_YMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150406.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3203, "question_en": "Find out what the second number is for the lowest point in that curved line described by a series of numbers, the result is a decimal."}
{"id": 617, "function": "ST_YMin", "question": "找出那些小点的纵向最低位置值，在1 3 4和5 6 7这些坐标之间的连线里。", "sql": "SELECT ST_YMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3207, "question_en": "Find the lowest vertical position among those little dots in the line connecting coordinates 1 3 4 and 5 6 7."}
{"id": 616, "function": "ST_YMin", "question": "找出由三个三维小点220268 150415 1、220227 150505 2和220227 150406 3组成的那条弯弯的线里面最低的Y值。", "sql": "SELECT ST_YMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150406.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3201, "question_en": "Find the lowest Y-value among those three little 3D dots, 220268 150415 1, 220227 150505 2, and 220227 150406 3, that form a curved line."}
{"id": 616, "function": "ST_YMin", "question": "找出那条弯曲线从上往下在Y方向上最靠近底部的点，记得它有这些坐标：220268 150415 1, 220227 150505 2, 220227 150406 3。", "sql": "SELECT ST_YMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[150406.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3202, "question_en": "Find the point on that curvy line which is closest to the bottom in the Y direction, and remember it has these coordinates: 220268 150415 1, 220227 150505 2, 220227 150406 3."}
{"id": 617, "function": "ST_YMin", "question": "找出那条从1 3 4到5 6 7的三维线中，Y方向上最小的那个数值。", "sql": "SELECT ST_YMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3209, "question_en": "Find the smallest number in the Y direction for the 3D line from 1 3 4 to 5 6 7."}
{"id": 618, "function": "ST_YMin", "question": "找出那个框，它好像是从(-3, 2)到(3, 4)的最低点在Y轴上的位置。", "sql": "SELECT ST_YMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3210, "question_en": "Find the lowest point on the Y-axis for that box, which seems to go from (-3, 2) to (3, 4)."}
{"id": 618, "function": "ST_YMin", "question": "把那个从(-3 2)到(3 4)的长方形，变成你记得的那个格式，然后找出它边上最低的Y是多少。", "sql": "SELECT ST_YMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3211, "question_en": "Take that rectangle stretching from (-3 2) to (3 4), change it into that format you know, and then find out the lowest Y on its edge."}
{"id": 617, "function": "ST_YMin", "question": "看看由那些空间里的点(1 3 4)和(5 6 7)连起来的线，在上下方向上最小能到哪里。", "sql": "SELECT ST_YMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3205, "question_en": "Check how low the line formed by those space points (1 3 4) and (5 6 7) can go in the up-down direction."}
{"id": 618, "function": "ST_YMin", "question": "把那个装着点(-3 2)到(3 4)的盒子转换成另一种盒子后，想知道它底部的Y坐标是多少。", "sql": "SELECT ST_YMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3213, "question_en": "After turning the box holding the points (-3 2) to (3 4) into another type of box, what is the Y-coordinate at the bottom?"}
{"id": 618, "function": "ST_YMin", "question": "看看从左下角的点(-3,2)到右上角的点(3,4)形成的区域，找出垂直方向最小的数字。", "sql": "SELECT ST_YMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3212, "question_en": "Look at the area formed from the bottom-left point (-3,2) to the top-right point (3,4), and find the smallest number in the vertical direction."}
{"id": 618, "function": "ST_YMin", "question": "找出那个包含点(-3 2)和(3 4)的长方形在上下方向上最靠近底部的数字，用小数点形式展示它。", "sql": "SELECT ST_YMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3214, "question_en": "Find the number closest to the bottom for the rectangle that includes the points (-3 2) and (3 4) in the up-down direction, and display it as a decimal."}
{"id": 619, "function": "ST_ZMax", "question": "找出那个把1 2 3和4 5 6包围起来的三维盒子的最高地方的Z值。", "sql": "SELECT ST_ZMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3216, "question_en": "Find the highest Z value of the 3D box that surrounds 1 2 3 and 4 5 6."}
{"id": 618, "function": "ST_YMin", "question": "把那个从左下角到右上角是(-3 2, 3 4)的盒子，变成一种简单的二维盒子，然后找出它在上下方向的最低点是多少。", "sql": "SELECT ST_YMin(CAST('BOX(-3 2, 3 4)' As box2d));", "execution_result": [[2.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3215, "question_en": "Take that box stretching from bottom left to top right at (-3 2, 3 4), turn it into a simple 2D box, and find out what its lowest point is in the up-down direction."}
{"id": 619, "function": "ST_ZMax", "question": "在一个由底部和顶部坐标构成的立体空间中，你能找到那个高度最高的点吗？底部是(1 2 3)，顶部是(4 5 6)。", "sql": "SELECT ST_ZMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3217, "question_en": "In a three-dimensional space made up of bottom and top coordinates, can you find the point with the highest height? The bottom is (1 2 3), and the top is (4 5 6)."}
{"id": 619, "function": "ST_ZMax", "question": "看看那从左下到右上的空间盒子，告诉我里面那个最高的Z值是多少，记得那些神秘点是(1 2 3)和(4 5 6)。", "sql": "SELECT ST_ZMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3220, "question_en": "Take a look at that space box from lower-left to upper-right and tell me what the highest Z value inside is, remember those mysterious points are (1 2 3) and (4 5 6)."}
{"id": 620, "function": "ST_ZMax", "question": "在数据库里有一个由三个坐标组成的圆弧，坐标里有些数字是220268 150415 1，220227 150505 2，220227 150406 3，想知道这些数字里最大的那个Z是多少？", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3224, "question_en": "In the database, there's a circular arc made up of three coordinates, with numbers like 220268 150415 1, 220227 150505 2, 220227 150406 3. What is the biggest Z among these numbers?"}
{"id": 619, "function": "ST_ZMax", "question": "找出由点(1 2 3)和(4 5 6)构成的三维空间盒子里，那个最高的Z数值。", "sql": "SELECT ST_ZMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3221, "question_en": "Find the highest Z number in the three-dimensional space box formed by the points (1 2 3) and (4 5 6)."}
{"id": 619, "function": "ST_ZMax", "question": "在一个像盒子一样的空间范围内，坐标是从(1 2 3)到(4 5 6)，找出最高的那个Z值。", "sql": "SELECT ST_ZMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3218, "question_en": "In a box-like space range, with coordinates from (1 2 3) to (4 5 6), find the highest Z value."}
{"id": 620, "function": "ST_ZMax", "question": "找出由那些坐标点组成的三维圆形路径中最高的那个Z值，坐标是220268 150415 1, 220227 150505 2, 220227 150406 3。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3225, "question_en": "Find the highest Z-value from the circular path made by those points, with coordinates 220268 150415 1, 220227 150505 2, 220227 150406 3."}
{"id": 619, "function": "ST_ZMax", "question": "从那个三维盒子的范围里，最高的Z值是多少？盒子的左下角是(1 2 3)，右上角是(4 5 6)。", "sql": "SELECT ST_ZMax('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[6.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3219, "question_en": "What’s the highest Z value in that 3D box’s range? The box has a lower-left corner at (1 2 3) and an upper-right corner at (4 5 6)."}
{"id": 621, "function": "ST_ZMax", "question": "找出那条从(1 3 4)到(5 6 7)的三维小线里，哪个顶点的高度最高。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[7.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3228, "question_en": "Find out which vertex has the highest altitude in that little 3D line from (1 3 4) to (5 6 7)."}
{"id": 620, "function": "ST_ZMax", "question": "想知道在那个三维圆弧里面，像220268 150415 1这样的点，哪个的高度值最高呢？", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3226, "question_en": "Curious about which height is the tallest among those points like 220268 150415 1 in that 3D circular arc?"}
{"id": 621, "function": "ST_ZMax", "question": "有一条从(1 3 4)到(5 6 7)的连接线，想知道最高的那个Z值是多少？", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[7.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3229, "question_en": "There's a connecting line from (1 3 4) to (5 6 7), and I'm curious about what the highest Z value is?"}
{"id": 620, "function": "ST_ZMax", "question": "找出那条由三个三维坐标220268 150415 1、220227 150505 2和220227 150406 3画出的圆弧中最高的那个Z值是多少。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3227, "question_en": "Find out what the highest Z value is from the arc drawn by those three 3D coordinates 220268 150415 1, 220227 150505 2, and 220227 150406 3."}
{"id": 620, "function": "ST_ZMax", "question": "有一个用那些坐标和高度描述的圆弧，像在220268 150415 1，220227 150505 2，220227 150406 3这样的点上，看看这段弧线最高能到哪个高度吧。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3223, "question_en": "There's a circular arc described by those coordinates and heights, like at points 220268 150415 1, 220227 150505 2, 220227 150406 3. See how high this arc can go."}
{"id": 621, "function": "ST_ZMax", "question": "在那些有点高低的地方里，找出LINESTRING(1 3 4, 5 6 7)里最高的Z数值，结果要像小数那样。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[7.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3231, "question_en": "In those spots with ups and downs, find the highest Z value in LINESTRING(1 3 4, 5 6 7), and the result should be like a decimal."}
{"id": 621, "function": "ST_ZMax", "question": "怎么找出那个由点(1 3 4)和(5 6 7)组成的空间线条的最高位置呢？", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[7.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3230, "question_en": "How can we find the highest spot of that spatial line made with points (1 3 4) and (5 6 7)?"}
{"id": 621, "function": "ST_ZMax", "question": "找出连接点(1 3 4)和(5 6 7)的那条三维线在上下方向上的极端数值，用特别精确的数字表示。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[7.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3232, "question_en": "Find the extreme value in the up-down direction for the 3D line connecting the dots (1 3 4) and (5 6 7), using very precise numbers."}
{"id": 621, "function": "ST_ZMax", "question": "在那个有点像连接两点的三维线里，看看最高的Z值是多少，点的坐标是(1 3 4)和(5 6 7)。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[7.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3233, "question_en": "In that three-dimensional line that connects two points, find out what the highest Z value is, with the coordinates being (1 3 4) and (5 6 7)."}
{"id": 622, "function": "ST_ZMax", "question": "在那个三维的盒子里，看看最高的地方，特别是Z轴的那个值，盒子的角落坐标是(-3,2,1)和(3,4,1)。", "sql": "SELECT ST_ZMax('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3234, "question_en": "In that three-dimensional box, check the highest spot, specifically the Z-axis value, with corner coordinates of (-3,2,1) and (3,4,1)."}
{"id": 622, "function": "ST_ZMax", "question": "假如有一个从下面到上面画出的三维空间，从左下角的点(-3,2,1)到右上角的点(3,4,1)，告诉我它在上下方向的最高点是多少。", "sql": "SELECT ST_ZMax('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3235, "question_en": "Imagine a 3D space drawn from bottom to top, from the lower-left point (-3,2,1) to the upper-right point (3,4,1). Tell me what its highest point is in the up-down direction."}
{"id": 622, "function": "ST_ZMax", "question": "在PostGIS中，如何找到那个包含所有点的立体盒子里，Z方向上最大的数值？这个盒子从(-3,2,1)开始，到(3,4,1)结束。", "sql": "SELECT ST_ZMax('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3236, "question_en": "In PostGIS, how can you find the biggest number in the Z direction inside that 3D box that covers everything? The box starts from (-3,2,1) and ends at (3,4,1)."}
{"id": 620, "function": "ST_ZMax", "question": "在那些有趣的三维小点串成的弧形里，最高的那个Z值是多少？例如那些点：220268 150415 1, 220227 150505 2, 220227 150406 3。", "sql": "SELECT ST_ZMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3222, "question_en": "In that interesting arc made by a series of 3D little dots, what is the tallest Z value? For example, those points: 220268 150415 1, 220227 150505 2, 220227 150406 3."}
{"id": 623, "function": "ST_ZMin", "question": "在那种3D长方体里，两个角落分别是(1,2,3)和(4,5,6)，你能找到最低的那个Z值吗？", "sql": "SELECT ST_ZMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3240, "question_en": "In that kind of 3D box where the corners are (1,2,3) and (4,5,6), can you find the lowest Z value?"}
{"id": 622, "function": "ST_ZMax", "question": "在空间里有个盒子从(-3, 2, 1)到(3, 4, 1)，找出它的最高点在Z轴上的数值。", "sql": "SELECT ST_ZMax('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3237, "question_en": "In the space, there's a box from (-3, 2, 1) to (3, 4, 1). Find the highest point's value on the Z-axis."}
{"id": 623, "function": "ST_ZMin", "question": "找出在那些点组成的三维盒子里，最低的那个Z值是多少？", "sql": "SELECT ST_ZMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3243, "question_en": "Find out what the lowest Z value is in that 3D box made up of those points?"}
{"id": 622, "function": "ST_ZMax", "question": "根据底部在(-3 2 1)和顶部在(3 4 1)的那个三维空间，找出最高的Z值。", "sql": "SELECT ST_ZMax('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3238, "question_en": "Based on the three-dimensional space with the bottom at (-3 2 1) and the top at (3 4 1), find out the highest Z value."}
{"id": 623, "function": "ST_ZMin", "question": "怎么找到那个从1到4、2到5、3到6的立体框里最低的那个Z值？", "sql": "SELECT ST_ZMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3242, "question_en": "How can you find the lowest Z value in that 3D box that goes from 1 to 4, 2 to 5, and 3 to 6?"}
{"id": 623, "function": "ST_ZMin", "question": "在那个3D盒子从(1, 2, 3)到(4, 5, 6)的范围里，找出Z方向上最小的那个数字，用小数形式说出来。", "sql": "SELECT ST_ZMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3244, "question_en": "In that 3D box ranging from (1, 2, 3) to (4, 5, 6), find the smallest number along the Z direction and say it as a decimal."}
{"id": 622, "function": "ST_ZMax", "question": "找出那个形状的Z方向最高点，记得是个小数哦，坐标是(-3 2 1, 3 4 1)。", "sql": "SELECT ST_ZMax('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3239, "question_en": "Find the highest point in the Z direction for that shape, remember it's a decimal, the coordinates are (-3 2 1, 3 4 1)."}
{"id": 623, "function": "ST_ZMin", "question": "有一个由点(1,2,3)和点(4,5,6)组成的三维空间包围盒，能不能找出它在垂直方向上最低的那个数值呢？", "sql": "SELECT ST_ZMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3241, "question_en": "There's a 3D space bounding box made up of points (1,2,3) and (4,5,6), can we find out the lowest number in the vertical direction?"}
{"id": 624, "function": "ST_ZMin", "question": "想知道由那些三维坐标220268 150415 1、220227 150505 2、220227 150406 3形成的圆弧中，最低的那个Z值是多少。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3246, "question_en": "I wonder what the lowest Z value is among those three-dimensional coordinates forming an arc: 220268 150415 1, 220227 150505 2, 220227 150406 3."}
{"id": 624, "function": "ST_ZMin", "question": "在这些小点220268 150415 1、220227 150505 2和220227 150406 3连成的圆弧形状里，哪个是最低的高度值呢？", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3248, "question_en": "In the arc shape formed by these little dots 220268 150415 1, 220227 150505 2, and 220227 150406 3, which is the lowest height value?"}
{"id": 623, "function": "ST_ZMin", "question": "看看那个包住所有点的立体框，像BOX3D(1 2 3, 4 5 6)这样的，找出里面最小的那个Z值是多少。", "sql": "SELECT ST_ZMin('BOX3D(1 2 3, 4 5 6)');", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3245, "question_en": "Take a look at that 3D box that covers all the points, like BOX3D(1 2 3, 4 5 6), and find out what the smallest Z value inside it is."}
{"id": 624, "function": "ST_ZMin", "question": "找出由220268 150415 1, 220227 150505 2, 220227 150406 3这些点形成的3D曲线中最小的那个Z值。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3249, "question_en": "Find the smallest Z value from the 3D curve formed by these points: 220268 150415 1, 220227 150505 2, 220227 150406 3."}
{"id": 624, "function": "ST_ZMin", "question": "看看那片三维弧线里，所有小点的高度，哪个是最低的？", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3250, "question_en": "Take a look at the 3D arc and see which little point has the lowest height?"}
{"id": 624, "function": "ST_ZMin", "question": "有一个用那些格式来描述的圆弧，由三个点组成，坐标是220268 150415 1, 220227 150505 2, 和220227 150406 3，你能找出这个立体形状中最矮的那个高度吗？", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3247, "question_en": "There's an arc described in that format, made up of three points with coordinates 220268 150415 1, 220227 150505 2, and 220227 150406 3. Can you find the lowest height in this 3D shape?"}
{"id": 624, "function": "ST_ZMin", "question": "找出用那些数字定义的圆弧中，Z轴上最小的那个数值，像220268 150415 1这样的。结果要是个小数哦。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3251, "question_en": "Find the smallest number on the Z-axis from the circular arc defined by those numbers, like 220268 150415 1. The result should be a decimal."}
{"id": 625, "function": "ST_ZMin", "question": "找出那条由(1 3 4)到(5 6 7)的小线段中最矮的Z值是多少。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3252, "question_en": "Find out what the shortest Z value is in that little line from (1 3 4) to (5 6 7)."}
{"id": 625, "function": "ST_ZMin", "question": "在那个由点组成的3D线里，找出所有点中第三个数字的最小值，要用小数形式哦。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3255, "question_en": "In that 3D line made of points, find the smallest value of the third number among all the points, and make sure it's in decimal form."}
{"id": 625, "function": "ST_ZMin", "question": "想知道通过两组点(1 3 4)和(5 6 7)形成的三维线条中，那个垂直方向的最小值是多少，答案是个数字。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3256, "question_en": "I want to find out the smallest value in the vertical direction of a 3D line formed by the two points (1 3 4) and (5 6 7), and the answer is a number."}
{"id": 625, "function": "ST_ZMin", "question": "在那条从点(1 3 4)到点(5 6 7)之间的空间线上，最低的那个Z值是多少呢？", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3253, "question_en": "On that spatial line from point (1 3 4) to point (5 6 7), what is the lowest Z value?"}
{"id": 625, "function": "ST_ZMin", "question": "在有点坐标的那个长条形状中，看看哪一个顶点的第三个数字最小，比如1 3 4和5 6 7这些。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3254, "question_en": "In that elongated shape with some coordinates, check which vertex has the smallest third number, like 1 3 4 and 5 6 7."}
{"id": 625, "function": "ST_ZMin", "question": "从那条三维线LINESTRING(1 3 4, 5 6 7)里找出Z方向最小的那个值。", "sql": "SELECT ST_ZMin(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[4.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3257, "question_en": "Find the smallest value in the Z direction from that 3D line LINESTRING(1 3 4, 5 6 7)."}
{"id": 626, "function": "ST_ZMin", "question": "找出那个三维盒子，像是从(-3 2 1)到(3 4 1)的那种，最低的Z值是多少？", "sql": "SELECT ST_ZMin('BOX3D(-3 2 1, 3 4 1)' );", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3258, "question_en": "Find out the lowest Z value for that 3D box, like the one from (-3 2 1) to (3 4 1)."}
{"id": 617, "function": "ST_YMin", "question": "找出由那些坐标组成的线段中最低的Y值，像是从1 3 4到5 6 7这样连接起来的。", "sql": "SELECT ST_YMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));", "execution_result": [[3.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3204, "question_en": "Find the lowest Y value from the line formed by those coordinates, like connecting from 1 3 4 to 5 6 7."}
{"id": 626, "function": "ST_ZMin", "question": "找出那个三维盒子BOX3D(-3 2 1, 3 4 1)底部的Z值是多少。", "sql": "SELECT ST_ZMin('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3261, "question_en": "Find out what the Z value at the bottom of that 3D box BOX3D(-3 2 1, 3 4 1) is."}
{"id": 626, "function": "ST_ZMin", "question": "在一个由(-3,2,1)和(3,4,1)这两个点构成的立体范围中，找出那个高低不一的部分的最小高度。", "sql": "SELECT ST_ZMin('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3263, "question_en": "In a 3D space defined by the two points (-3,2,1) and (3,4,1), find the smallest height of that uneven part."}
{"id": 626, "function": "ST_ZMin", "question": "想象一个盒子，它是由两个点形成的，一个在这儿(-3 2 1)，另一个在那儿(3 4 1)，你能告诉我在垂直方向上哪个数最小吗？", "sql": "SELECT ST_ZMin('BOX3D(-3 2 1, 3 4 1)' );", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3259, "question_en": "Imagine a box formed by two points, one here (-3 2 1) and the other there (3 4 1), can you tell me which number is the smallest in the vertical direction?"}
{"id": 626, "function": "ST_ZMin", "question": "在那些坐标的范围里，找出Z轴上最小的那个数，像是从-3 2 1到3 4 1的盒子里。", "sql": "SELECT ST_ZMin('BOX3D(-3 2 1, 3 4 1)');", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3262, "question_en": "Within the range of those coordinates, find the smallest number on the Z-axis, like in a box from -3 2 1 to 3 4 1."}
{"id": 627, "function": "ST_LineInterpolatePoint", "question": "在这些点(25 50)、(100 125)、(150 190)组成的一条折线中，从起点走20%距离，那个点的坐标是什么？用一种特别的格式来表达。", "sql": "SELECT ST_AsEWKT( ST_LineInterpolatePoint( 'LINESTRING(25 50, 100 125, 150 190)', 0.2 ));", "execution_result": [["POINT(51.5974135047432 76.5974135047432)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3264, "question_en": "In the wavy path made by these points (25 50), (100 125), (150 190), what are the coordinates of the spot when you've walked 20% of the way from the start? Express it in a special format."}
{"id": 626, "function": "ST_ZMin", "question": "在那个包围着的三维空间里，看看最低的Z轴数值会是什么呢？它在这些位置：(-3 2 1, 3 4 1)。", "sql": "SELECT ST_ZMin('BOX3D(-3 2 1, 3 4 1)' );", "execution_result": [[1.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3260, "question_en": "In that enclosing 3D space, what would be the lowest Z-axis number? It's at these spots: (-3 2 1, 3 4 1)."}
{"id": 628, "function": "ST_LineInterpolatePoint", "question": "在那些三维小点组成的线里，想象一个在中间的点，比例是0.5，然后把这个点的坐标用某种格式写出来。", "sql": "SELECT ST_AsEWKT(ST_LineInterpolatePoint('LINESTRING(1 2 3, 4 5 6, 6 7 8)', 0.5));", "execution_result": [["POINT(3.5 4.5 5.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3270, "question_en": "In that line made of 3D little dots, imagine a point in the middle at a ratio of 0.5, and then write out the coordinates of this point in some format."}
{"id": 627, "function": "ST_LineInterpolatePoint", "question": "在那个由25 50到150 190的三段折线中，想象在全长的五分之一处有个点，告诉我这个点的详细坐标是啥。", "sql": "SELECT ST_AsEWKT( ST_LineInterpolatePoint( 'LINESTRING(25 50, 100 125, 150 190)', 0.2 ));", "execution_result": [["POINT(51.5974135047432 76.5974135047432)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3265, "question_en": "In that three-segment line from 25 50 to 150 190, imagine there's a point at one-fifth of the total length, tell me what the detailed coordinates of this point are."}
{"id": 628, "function": "ST_LineInterpolatePoint", "question": "对于由三个点(1 2 3)、(4 5 6)、(6 7 8)构成的线，在中间位置找一个点，然后用一种带有数字标签的格式表示出来。", "sql": "SELECT ST_AsEWKT(ST_LineInterpolatePoint('LINESTRING(1 2 3, 4 5 6, 6 7 8)', 0.5));", "execution_result": [["POINT(3.5 4.5 5.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3271, "question_en": "For the line made by three points (1 2 3), (4 5 6), (6 7 8), find a point in the middle, then represent it in a format with a numeric label."}
{"id": 627, "function": "ST_LineInterpolatePoint", "question": "想象一下从(25 50)走到(100 125)，再到(150 190)的那条线，能不能告诉我在那条线的20%长度位置上会在哪里？用那个带有EWKT的格式哦。", "sql": "SELECT ST_AsEWKT( ST_LineInterpolatePoint( 'LINESTRING(25 50, 100 125, 150 190)', 0.2 ));", "execution_result": [["POINT(51.5974135047432 76.5974135047432)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3266, "question_en": "Imagine walking from (25 50) to (100 125), and then to (150 190) along that line. Can you tell me where you would be at 20% of the way? Use that format with EWKT."}
{"id": 628, "function": "ST_LineInterpolatePoint", "question": "有一条三维小线段，从(1 2 3)到(6 7 8)，找出它一半长度处的那个三维小点，并用能看到Z值的特别方式告诉我。", "sql": "SELECT ST_AsEWKT(ST_LineInterpolatePoint('LINESTRING(1 2 3, 4 5 6, 6 7 8)', 0.5));", "execution_result": [["POINT(3.5 4.5 5.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3272, "question_en": "There's a 3D little line from (1 2 3) to (6 7 8). Find the little 3D point halfway along it and tell me in a special way that shows the Z value."}
{"id": 627, "function": "ST_LineInterpolatePoint", "question": "找出一条从(25 50)开始，经过(100 125)到(150 190)的小路上，大概走了五分之一距离时的位置，并用某种格式说出来。", "sql": "SELECT ST_AsEWKT( ST_LineInterpolatePoint( 'LINESTRING(25 50, 100 125, 150 190)', 0.2 ));", "execution_result": [["POINT(51.5974135047432 76.5974135047432)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3267, "question_en": "Find out where you would be if you walked about one-fifth of the way along a path starting at (25 50), passing through (100 125) to (150 190), and describe it in some format."}
{"id": 627, "function": "ST_LineInterpolatePoint", "question": "对于那条连着(25 50, 100 125, 150 190)的小线，尝试用0.2的比例去找出一些点，然后把这些点变成一种带编号的文字形式。", "sql": "SELECT ST_AsEWKT( ST_LineInterpolatePoint( 'LINESTRING(25 50, 100 125, 150 190)', 0.2 ));", "execution_result": [["POINT(51.5974135047432 76.5974135047432)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3268, "question_en": "For the little line connecting (25 50, 100 125, 150 190), try to find some points using a ratio of 0.2, then transform these points into a kind of numbered text format."}
{"id": 628, "function": "ST_LineInterpolatePoint", "question": "给我看一下那条三维线从头到尾走到一半时会在哪个地方，记得用某种格式来表达哦。", "sql": "SELECT ST_AsEWKT(ST_LineInterpolatePoint('LINESTRING(1 2 3, 4 5 6, 6 7 8)', 0.5));", "execution_result": [["POINT(3.5 4.5 5.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3273, "question_en": "Show me where along that 3D line you end up halfway from start to finish, and remember to express it in some format."}
{"id": 628, "function": "ST_LineInterpolatePoint", "question": "对于那些三维的小点，像是1 2 3, 4 5 6, 6 7 8，试着用一半的比例做个中间点，然后看看它的完整描述是什么，带着那个特别信息。", "sql": "SELECT ST_AsEWKT(ST_LineInterpolatePoint('LINESTRING(1 2 3, 4 5 6, 6 7 8)', 0.5));", "execution_result": [["POINT(3.5 4.5 5.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3274, "question_en": "For those 3D little dots, like 1 2 3, 4 5 6, 6 7 8, try to make a midpoint using half the ratio, and then see what its full description is, with that special information."}
{"id": 627, "function": "ST_LineInterpolatePoint", "question": "在那条由(25 50, 100 125, 150 190)这几个点组成的线的起点往前走20%长度时，找出那个点的坐标，记得用某种特别的格式哦。", "sql": "SELECT ST_AsEWKT( ST_LineInterpolatePoint( 'LINESTRING(25 50, 100 125, 150 190)', 0.2 ));", "execution_result": [["POINT(51.5974135047432 76.5974135047432)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3269, "question_en": "On the line made up of the points (25 50, 100 125, 150 190), find the coordinates of the point when you move 20% of the way from the start, and remember to use some special format."}
{"id": 629, "function": "ST_LineInterpolatePoint", "question": "找出在那些连接点之间，离小点坐标(4 3)最近的地方，然后用一种文字格式来表示它。", "sql": "SELECT ST_AsText( ST_LineInterpolatePoint( line.geom, ST_LineLocatePoint( line.geom, 'POINT(4 3)'))) FROM ( SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') AS geom) AS line;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3279, "question_en": "Find the closest spot among those connecting dots to the little point at (4 3), and then express it in a text format."}
{"id": 629, "function": "ST_LineInterpolatePoint", "question": "有一条连接(1 2)、(4 5)、(6 7)的线，看看点(4 3)在这条线上的投影位置，然后在这条线上找个合适的点，把这个点的坐标以某种文本格式给我。", "sql": "SELECT ST_AsText( ST_LineInterpolatePoint( line.geom, ST_LineLocatePoint( line.geom, 'POINT(4 3)'))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') AS geom) AS line;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3278, "question_en": "There's a line connecting (1 2), (4 5), (6 7). Check where the point (4 3) projects onto this line, then find a suitable point on the line, and give me the coordinates of this point in some kind of text format."}
{"id": 628, "function": "ST_LineInterpolatePoint", "question": "在那个连接1 2 3、4 5 6、6 7 8的小点的线段上，从起点走到一半路程时，找出它的具体位置，用一种特别的格式来表示。", "sql": "SELECT ST_AsEWKT(ST_LineInterpolatePoint('LINESTRING(1 2 3, 4 5 6, 6 7 8)', 0.5));", "execution_result": [["POINT(3.5 4.5 5.5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3275, "question_en": "On the line connecting the little dots 1 2 3, 4 5 6, 6 7 8, find the exact spot when you go halfway from the start, using a special format to show it."}
{"id": 629, "function": "ST_LineInterpolatePoint", "question": "在由几个小点(1 2)、(4 5)、(6 7)组成的线中，找出最靠近另一个小点(4 3)的位置，然后看看这个位置在哪个比例上，并创建一个新点，告诉我这个新点的具体坐标。", "sql": "SELECT ST_AsText( ST_LineInterpolatePoint( line.geom, ST_LineLocatePoint( line.geom, 'POINT(4 3)'))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') AS geom) AS line;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3276, "question_en": "In a line made up of little dots (1 2), (4 5), (6 7), find out where is closest to another little dot (4 3), then see at what ratio this position is, and create a new point, tell me the exact coordinates of this new point."}
{"id": 629, "function": "ST_LineInterpolatePoint", "question": "找找那条线上的某个位置，它离小点(4 3)最近，然后告诉我那个地方的形状是什么样子。", "sql": "SELECT ST_AsText( ST_LineInterpolatePoint( line.geom, ST_LineLocatePoint( line.geom, 'POINT(4 3)'))) FROM ( SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') AS geom) AS line;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3280, "question_en": "Find a spot on the line that is closest to the little point (4 3), and then tell me what that place looks like."}
{"id": 629, "function": "ST_LineInterpolatePoint", "question": "看看从那些连接的点(1 2, 4 5, 6 7)到小点(4 3)之间，线上哪个位置最靠近，并用一种特别的格式告诉我。", "sql": "SELECT ST_AsText( ST_LineInterpolatePoint( line.geom, ST_LineLocatePoint( line.geom, 'POINT(4 3)'))) FROM ( SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') AS geom) AS line;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3281, "question_en": "Check which spot on the connecting points (1 2, 4 5, 6 7) is closest to the little point (4 3), and tell me in a special format."}
{"id": 630, "function": "ST_3DLineInterpolatePoint", "question": "给定一条三维的折线，从起点出发走到路径长度的五分之一处，你能找到那个位置的小点并告诉我它的具体位置吗？", "sql": "SELECT ST_AsText( ST_3DLineInterpolatePoint('LINESTRING(25 50 70, 100 125 90, 150 190 200)', 0.20));", "execution_result": [["POINT Z (59.06758929108215 84.06758929108216 79.0846904776219)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3283, "question_en": "Given a 3D squiggly line, starting from the beginning and going to one-fifth of the way along the path, can you find the little point there and tell me its exact location?"}
{"id": 630, "function": "ST_3DLineInterpolatePoint", "question": "在那条三维的路径，像是从25 50 70到150 190 200，找个点，它在20%的地方，然后把这个点的具体位置用一种标准格式说出来。", "sql": "SELECT ST_AsText( ST_3DLineInterpolatePoint('LINESTRING(25 50 70, 100 125 90, 150 190 200)', 0.20));", "execution_result": [["POINT Z (59.06758929108215 84.06758929108216 79.0846904776219)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3282, "question_en": "On that 3D path, like from 25 50 70 to 150 190 200, find a point that's at 20%, and then describe the exact spot of this point in a standard format."}
{"id": 630, "function": "ST_3DLineInterpolatePoint", "question": "从那个有点像连接三个点的三维线段里，按照0.20的比例找出来的具体三维位置是什么样的？", "sql": "SELECT ST_AsText( ST_3DLineInterpolatePoint('LINESTRING(25 50 70, 100 125 90, 150 190 200)', 0.20));", "execution_result": [["POINT Z (59.06758929108215 84.06758929108216 79.0846904776219)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3285, "question_en": "From that 3D line connecting three points, what does the specific 3D position look like when found at a fraction of 0.20?"}
{"id": 630, "function": "ST_3DLineInterpolatePoint", "question": "在那条由三个点组成的曲线中，从第一个点出发走了五分之一的距离时，那个位置的具体三维坐标是什么？用一种特别的格式来描述它。", "sql": "SELECT ST_AsText( ST_3DLineInterpolatePoint('LINESTRING(25 50 70, 100 125 90, 150 190 200)', 0.20));", "execution_result": [["POINT Z (59.06758929108215 84.06758929108216 79.0846904776219)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3287, "question_en": "In that curve made up of three points, what are the specific 3D coordinates at the position when you've traveled one-fifth of the distance from the first point? Describe it in a special format."}
{"id": 630, "function": "ST_3DLineInterpolatePoint", "question": "在三维的那些连接点之间，想象从第一个点出发，走到路径的20%处，告诉我那里的三维位置是什么，用那种文本格式。", "sql": "SELECT ST_AsText( ST_3DLineInterpolatePoint('LINESTRING(25 50 70, 100 125 90, 150 190 200)', 0.20));", "execution_result": [["POINT Z (59.06758929108215 84.06758929108216 79.0846904776219)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3284, "question_en": "In the 3D connection points, imagine starting from the first point and reaching 20% of the path, tell me what the 3D position is there, using that text format."}
{"id": 631, "function": "ST_LineInterpolatePoints", "question": "在那条由点组成的线里找中间的一个点，比例是0.20，然后告诉我它的样子。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoints('LINESTRING(25 50, 100 125, 150 190)', 0.20));", "execution_result": [["MULTIPOINT((51.5974135047432 76.5974135047432),(78.1948270094864 103.1948270094864),(104.13216318644639 130.37181214238032),(127.0660815932232 160.18590607119015),(150 190))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3289, "question_en": "In that line made of points, find a middle point with a ratio of 0.20, then let me know what it looks like."}
{"id": 630, "function": "ST_3DLineInterpolatePoint", "question": "在那条由点(25 50 70), (100 125 90), (150 190 200)组成的三维线中，沿着它总长度的五分之一找个点，然后把这个点的样子用WKT写出来。", "sql": "SELECT ST_AsText( ST_3DLineInterpolatePoint('LINESTRING(25 50 70, 100 125 90, 150 190 200)', 0.20));", "execution_result": [["POINT Z (59.06758929108215 84.06758929108216 79.0846904776219)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3286, "question_en": "In that 3D path made of the points (25 50 70), (100 125 90), (150 190 200), find a point along one-fifth of its total length, then describe the point using WKT."}
{"id": 631, "function": "ST_LineInterpolatePoints", "question": "在那些坐标(25 50)、(100 125)、(150 190)形成的线段上，用0.20这个比例来找一些中间点，然后用一种特别格式来描述这些点。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoints('LINESTRING(25 50, 100 125, 150 190)', 0.20));", "execution_result": [["MULTIPOINT((51.5974135047432 76.5974135047432),(78.1948270094864 103.1948270094864),(104.13216318644639 130.37181214238032),(127.0660815932232 160.18590607119015),(150 190))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3288, "question_en": "On the line made by the coordinates (25 50), (100 125), (150 190), use the ratio of 0.20 to find some middle points, then describe them using a special format."}
{"id": 631, "function": "ST_LineInterpolatePoints", "question": "在那条从(25 50)到(150 190)的线段上，找一个距离起点五分之一长的点，把它用一种看得懂的文本格式表示出来。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoints('LINESTRING(25 50, 100 125, 150 190)', 0.20));", "execution_result": [["MULTIPOINT((51.5974135047432 76.5974135047432),(78.1948270094864 103.1948270094864),(104.13216318644639 130.37181214238032),(127.0660815932232 160.18590607119015),(150 190))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3293, "question_en": "On the line starting at (25 50) and ending at (150 190), find a point that's one-fifth of the way from the start and show it in a readable text format."}
{"id": 631, "function": "ST_LineInterpolatePoints", "question": "在从(25 50)出发，经过(100 125)到(150 190)的路线上，找出从起点走完20%路程的小点坐标，用某种格式表达。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoints('LINESTRING(25 50, 100 125, 150 190)', 0.20));", "execution_result": [["MULTIPOINT((51.5974135047432 76.5974135047432),(78.1948270094864 103.1948270094864),(104.13216318644639 130.37181214238032),(127.0660815932232 160.18590607119015),(150 190))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3290, "question_en": "On a path starting at (25 50), passing through (100 125) and ending at (150 190), find the little point coordinates after covering 20% of the journey from the start, expressed in some format."}
{"id": 631, "function": "ST_LineInterpolatePoints", "question": "把一条像是从(25 50)到(150 190)的线，按照它总长度的20%位置找一个点，然后看看这个点的具体样子是什么。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoints('LINESTRING(25 50, 100 125, 150 190)', 0.20));", "execution_result": [["MULTIPOINT((51.5974135047432 76.5974135047432),(78.1948270094864 103.1948270094864),(104.13216318644639 130.37181214238032),(127.0660815932232 160.18590607119015),(150 190))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3292, "question_en": "Take a line that seems to go from (25 50) to (150 190), find a point at 20% of its total length, and see what this point specifically looks like."}
{"id": 632, "function": "ST_LineLocatePoint", "question": "假设有一条从(1 2)到(3 4)的线段，把x从1到3和y从2到4的所有组合点想象成房子的位置，每个点的x和y坐标稍微调整一下，然后找出离这条线不超过0.2单位的小点，看看这些点长什么样，还要给它们一个10到20之间的数字编号。", "sql": "SELECT ST_AsText(house_loc) As as_text_house_loc,\n        startstreet_num +\n                CAST( (endstreet_num - startstreet_num)\n                        * ST_LineLocatePoint(street_line, house_loc) As integer) As street_num\nFROM\n(SELECT ST_GeomFromText('LINESTRING(1 2, 3 4)') As street_line,\n        ST_Point(x*1.01,y*1.03) As house_loc, 10 As startstreet_num,\n                20 As endstreet_num\nFROM generate_series(1,3) x CROSS JOIN generate_series(2,4) As y)\nAs foo\nWHERE ST_DWithin(street_line, house_loc, 0.2);", "execution_result": [["POINT(1.01 2.06)", 10], ["POINT(2.02 3.09)", 15], ["POINT(3.03 4.12)", 20]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3294, "question_en": "Imagine a line from (1 2) to (3 4), and think of all combinations of x from 1 to 3 and y from 2 to 4 as house locations. Adjust each point's x and y a bit, then find little points not more than 0.2 units from the line, see what they look like, and give them a number between 10 and 20."}
{"id": 632, "function": "ST_LineLocatePoint", "question": "有一个由1 2到3 4组成的线，像街道一样。想找出那些从x=1到3，y=2到4生成的点，经过轻微调整后（比如乘以1.01或1.03），在街道附近0.2单位内的点，并看看它们的文本格式和一个从10到20的门牌号码是怎么分配的。", "sql": "SELECT ST_AsText(house_loc) As as_text_house_loc,\n        startstreet_num +\n                CAST( (endstreet_num - startstreet_num)\n                        * ST_LineLocatePoint(street_line, house_loc) As integer) As street_num\nFROM\n(SELECT ST_GeomFromText('LINESTRING(1 2, 3 4)') As street_line,\n        ST_Point(x*1.01,y*1.03) As house_loc, 10 As startstreet_num,\n                20 As endstreet_num\nFROM generate_series(1,3) x CROSS JOIN generate_series(2,4) As y)\nAs foo\nWHERE ST_DWithin(street_line, house_loc, 0.2);", "execution_result": [["POINT(1.01 2.06)", 10], ["POINT(2.02 3.09)", 15], ["POINT(3.03 4.12)", 20]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3295, "question_en": "There's a line from 1 2 to 3 4, kind of like a street. We want to find the points generated from x=1 to 3, y=2 to 4, slightly adjusted (like multiplied by 1.01 or 1.03), that are within 0.2 units of the street, and check their text format and how a house number from 10 to 20 is assigned."}
{"id": 631, "function": "ST_LineInterpolatePoints", "question": "从那些连接点(25 50, 100 125, 150 190)中，按照0.20的比例去找点，然后用那种格式来描述这些点。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoints('LINESTRING(25 50, 100 125, 150 190)', 0.20));", "execution_result": [["MULTIPOINT((51.5974135047432 76.5974135047432),(78.1948270094864 103.1948270094864),(104.13216318644639 130.37181214238032),(127.0660815932232 160.18590607119015),(150 190))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3291, "question_en": "From those connecting points (25 50, 100 125, 150 190), find points at a 0.20 ratio, then describe these points using that format."}
{"id": 632, "function": "ST_LineLocatePoint", "question": "找出那些经过奇妙变换的点，这些点靠近连接(1 2, 3 4)的线不到0.2远。并且给出这些点的字符串形式，还有从10到20的数字变化，像是在街上走一样。", "sql": "SELECT ST_AsText(house_loc) As as_text_house_loc,\n        startstreet_num +\n                CAST( (endstreet_num - startstreet_num)\n                        * ST_LineLocatePoint(street_line, house_loc) As integer) As street_num\nFROM\n(SELECT ST_GeomFromText('LINESTRING(1 2, 3 4)') As street_line,\n        ST_Point(x*1.01,y*1.03) As house_loc, 10 As startstreet_num,\n                20 As endstreet_num\nFROM generate_series(1,3) x CROSS JOIN generate_series(2,4) As y)\nAs foo\nWHERE ST_DWithin(street_line, house_loc, 0.2);", "execution_result": [["POINT(1.01 2.06)", 10], ["POINT(2.02 3.09)", 15], ["POINT(3.03 4.12)", 20]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3297, "question_en": "Find those magically transformed points that are less than 0.2 away from the line connecting (1 2, 3 4). Also, provide the string form of these points, along with a number change from 10 to 20, as if walking along a street."}
{"id": 632, "function": "ST_LineLocatePoint", "question": "在1到3和2到4交叉的点上，按1.01和1.03的比例调整那些点，看看哪些在1 2到3 4这条线附近0.2范围内，然后用一种方式给这些点一个基于线上位置的号码，从10到20。可以把这些点用WKT的方式描述出来。", "sql": "SELECT ST_AsText(house_loc) As as_text_house_loc,\n        startstreet_num +\n                CAST( (endstreet_num - startstreet_num)\n                        * ST_LineLocatePoint(street_line, house_loc) As integer) As street_num\nFROM\n(SELECT ST_GeomFromText('LINESTRING(1 2, 3 4)') As street_line,\n        ST_Point(x*1.01,y*1.03) As house_loc, 10 As startstreet_num,\n                20 As endstreet_num\nFROM generate_series(1,3) x CROSS JOIN generate_series(2,4) As y)\nAs foo\nWHERE ST_DWithin(street_line, house_loc, 0.2);", "execution_result": [["POINT(1.01 2.06)", 10], ["POINT(2.02 3.09)", 15], ["POINT(3.03 4.12)", 20]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3296, "question_en": "For the points where 1 to 3 crosses with 2 to 4, adjust them by 1.01 and 1.03, see which ones are within 0.2 of the line from 1 2 to 3 4, and then give these points a number based on their position on the line, from 10 to 20. You can describe these points using WKT."}
{"id": 633, "function": "ST_LineLocatePoint", "question": "在由那些连接点1 2, 4 5, 6 7组成的路径上，找出离位置4 3最近的比例，然后在路径上找出这个比例对应的点，以一种特别的格式展示它。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoint(foo.the_line, ST_LineLocatePoint(foo.the_line, ST_GeomFromText('POINT(4 3)')))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') As the_line) As foo;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3300, "question_en": "On the path made of those connected points 1 2, 4 5, 6 7, find the ratio closest to the spot 4 3, then find the point on the path corresponding to this ratio and show it in a special format."}
{"id": 633, "function": "ST_LineLocatePoint", "question": "在那条从(1 2)到(6 7)的线上，找离(4 3)最近的点，然后用一种能读的格式描述出来。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoint(foo.the_line, ST_LineLocatePoint(foo.the_line, ST_GeomFromText('POINT(4 3)')))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') As the_line) As foo;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3305, "question_en": "On that line from (1 2) to (6 7), find the point closest to (4 3), then describe it in a readable format."}
{"id": 633, "function": "ST_LineLocatePoint", "question": "对于那条由点组成的线(1 2, 4 5, 6 7)，先看看点(4 3)在这条线上的某个比例位置，然后用这个比例在线上找个新的点，最后说出这个新点的样子。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoint(foo.the_line, ST_LineLocatePoint(foo.the_line, ST_GeomFromText('POINT(4 3)')))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') As the_line) As foo;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3302, "question_en": "For that line made of dots (1 2, 4 5, 6 7), first check the position ratio of point (4 3) on the line, then find a new point on the line using this ratio, and finally describe what this new point looks like."}
{"id": 632, "function": "ST_LineLocatePoint", "question": "假设你有一些小点，它们的坐标是由x范围1到3和y范围2到4生成的，经过一点微调变成X=x*1.01，Y=y*1.03。然后你想找出哪些小点离一个表示街道的线段（坐标是1 2到3 4）不超过0.2的距离，并且给这些点一个从10到20的门牌号，最后以某种文本形式展示出来。", "sql": "SELECT ST_AsText(house_loc) As as_text_house_loc,\n        startstreet_num +\n                CAST( (endstreet_num - startstreet_num)\n                        * ST_LineLocatePoint(street_line, house_loc) As integer) As street_num\nFROM\n(SELECT ST_GeomFromText('LINESTRING(1 2, 3 4)') As street_line,\n        ST_Point(x*1.01,y*1.03) As house_loc, 10 As startstreet_num,\n                20 As endstreet_num\nFROM generate_series(1,3) x CROSS JOIN generate_series(2,4) As y)\nAs foo\nWHERE ST_DWithin(street_line, house_loc, 0.2);", "execution_result": [["POINT(1.01 2.06)", 10], ["POINT(2.02 3.09)", 15], ["POINT(3.03 4.12)", 20]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3298, "question_en": "Imagine you have some tiny dots, their coordinates come from x range 1 to 3 and y range 2 to 4, slightly adjusted to X=x*1.01, Y=y*1.03. Then you want to find which dots are within a distance of no more than 0.2 from a line representing a street (coordinates are 1 2 to 3 4), and give these dots house numbers ranging from 10 to 20, finally showing them in some kind of text format."}
{"id": 633, "function": "ST_LineLocatePoint", "question": "找一条从1 2到6 7的线，看看哪个地方离点4 3最近，然后用一种特别的方式描述那个地方。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoint(foo.the_line, ST_LineLocatePoint(foo.the_line, ST_GeomFromText('POINT(4 3)')))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') As the_line) As foo;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3304, "question_en": "Find a line from 1 2 to 6 7, see which spot is closest to the point 4 3, and describe that spot in a special way."}
{"id": 633, "function": "ST_LineLocatePoint", "question": "找找从那些点连接成的线(1 2, 4 5, 6 7)上，哪个位置离点(4 3)最近，然后把这个地方说成是WKT的样子。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoint(foo.the_line, ST_LineLocatePoint(foo.the_line, ST_GeomFromText('POINT(4 3)')))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') As the_line) As foo;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3303, "question_en": "Find the spot on the line made by connecting those points (1 2, 4 5, 6 7) that is closest to the point (4 3), and then describe this place in WKT style."}
{"id": 629, "function": "ST_LineInterpolatePoint", "question": "假设有一条由这些小点组成的线：LINESTRING(1 2, 4 5, 6 7)。你需要找出点POINT(4 3)在这条线上大概在哪个位置，然后根据这个位置在线上找一个新的点，最后用某种文本形式告诉我这个新点的坐标。", "sql": "SELECT ST_AsText( ST_LineInterpolatePoint( line.geom, ST_LineLocatePoint( line.geom, 'POINT(4 3)'))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') AS geom) AS line;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3277, "question_en": "Imagine a line made up of these little dots: LINESTRING(1 2, 4 5, 6 7). You need to figure out roughly where the point POINT(4 3) is on this line, then find a new point on the line based on that location, and finally tell me the coordinates of this new point using some text format."}
{"id": 633, "function": "ST_LineLocatePoint", "question": "想象有条线穿过几个位置，比如(1, 2)到(4, 5)再到(6, 7)，然后有个点(4, 3)在这条线附近。找出这个点在那条线上的某种比例位置，然后用这个比例在那条线中间插入一个新点，最后说出这个新点的具体坐标。", "sql": "SELECT ST_AsText(ST_LineInterpolatePoint(foo.the_line, ST_LineLocatePoint(foo.the_line, ST_GeomFromText('POINT(4 3)')))) FROM (SELECT ST_GeomFromText('LINESTRING(1 2, 4 5, 6 7)') As the_line) As foo;", "execution_result": [["POINT(3 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3301, "question_en": "Imagine a line passing through some places like (1, 2) to (4, 5) and then to (6, 7), and there's a point (4, 3) near this line. Find some kind of proportional position of this point on the line, then insert a new point in the middle of the line using this proportion, and finally tell the exact coordinates of this new point."}
{"id": 632, "function": "ST_LineLocatePoint", "question": "有一条街道从(1, 2)到(3, 4)，门牌号从10到20。现在有一些房屋，它们的位置是通过简单计算得来，比如x乘以1.01，y乘以1.03，其中x在1到3之间，y在2到4之间。找出那些离街道不远，大概0.2米范围内的房屋，然后想象一下，如果这些房屋投影到街道上，它们的门牌号会是多少呢？记得要返回房屋的具体位置和门牌号哦。", "sql": "SELECT ST_AsText(house_loc) AS as_text_house_loc, startstreet_num + CAST( (endstreet_num - startstreet_num) * ST_LineLocatePoint(street_line, house_loc) AS integer) AS street_num \nFROM (\n  SELECT ST_GeomFromText('LINESTRING(1 2, 3 4)') AS street_line, ST_Point(x*1.01,y*1.03) AS house_loc, 10 AS startstreet_num, 20 AS endstreet_num \n  FROM generate_series(1,3) x \n  CROSS JOIN generate_series(2,4) AS y) AS foo \n  WHERE ST_DWithin(street_line, house_loc, 0.2);", "execution_result": [["POINT(1.01 2.06)", 10], ["POINT(2.02 3.09)", 15], ["POINT(3.03 4.12)", 20]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3299, "question_en": "There's a street stretching from (1, 2) to (3, 4), with house numbers ranging from 10 to 20. Now, there are some houses whose locations are calculated simply, like x times 1.01 and y times 1.03, where x is between 1 and 3, and y is between 2 and 4. Find those houses that aren't too far from the street, roughly within 0.2 meters, and imagine if these houses were projected onto the street, what would their house numbers be? Remember to return the specific location of the houses and the house numbers."}
{"id": 635, "function": "ST_LineSubstring", "question": "在那条从(25 50)到(150 190)的曲线上，从开始算起0.333的地方到同样0.333的地方取一小段，并用某种文本格式显示出来。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(25 50, 100 125, 150 190)', 0.333, 0.333));", "execution_result": [["POINT(69.28469348539744 94.28469348539744)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3306, "question_en": "On that line from (25 50) to (150 190), take a small part starting and ending at 0.333 from the beginning, and show it in some text format."}
{"id": 635, "function": "ST_LineSubstring", "question": "从那些线上的某个点开始，按0.333的比例到0.333的比例，找出它们之间的那个小段，然后告诉我它的样子。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(25 50, 100 125, 150 190)', 0.333, 0.333));", "execution_result": [["POINT(69.28469348539744 94.28469348539744)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3309, "question_en": "From some point on those lines, starting at a ratio of 0.333 to a ratio of 0.333, find the little segment between them and tell me what it looks like."}
{"id": 635, "function": "ST_LineSubstring", "question": "有一条由三个小点连接成的线，坐标是25 50, 100 125, 150 190，能不能从某个比例开始到另一个比例结束，找出它们之间的那一段并把它转成文字形式？", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(25 50, 100 125, 150 190)', 0.333, 0.333));", "execution_result": [["POINT(69.28469348539744 94.28469348539744)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3307, "question_en": "There's a line made up of three little dots with coordinates 25 50, 100 125, 150 190. Can you find the segment between one fraction and another fraction, and turn it into text form?"}
{"id": 635, "function": "ST_LineSubstring", "question": "从25 50到150 190这条线，找一个点在比例0.333的位置，然后把这个点的位置用一种文本格式展示出来。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(25 50, 100 125, 150 190)', 0.333, 0.333));", "execution_result": [["POINT(69.28469348539744 94.28469348539744)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3310, "question_en": "From the line connecting 25 50 to 150 190, find a point at the 0.333 proportion position, and then display that point's location in a text format."}
{"id": 635, "function": "ST_LineSubstring", "question": "有一条由点组成的线，起始于(25 50)，经过(100 125)，最终到达(150 190)。你能找到一个特别的片段吗？这个片段从整体长度的0.333倍开始，到同样的0.333倍结束。请以WKT格式告诉我结果。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(25 50, 100 125, 150 190)', 0.333, 0.333));", "execution_result": [["POINT(69.28469348539744 94.28469348539744)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3308, "question_en": "There's a line made of points, starting at (25 50), passing through (100 125), and finally reaching (150 190). Can you find a special segment? This segment starts at 0.333 times the total length and ends at the same 0.333 times. Please tell me the result in WKT format."}
{"id": 635, "function": "ST_LineSubstring", "question": "如果你有一个像LINESTRING(25 50, 100 125, 150 190)那样的线段，当你从0.333到0.333的比例截取时，会得到什么样的形状，能用一个特别的字符串来描述吗？", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(25 50, 100 125, 150 190)', 0.333, 0.333));", "execution_result": [["POINT(69.28469348539744 94.28469348539744)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3311, "question_en": "If you have a line like LINESTRING(25 50, 100 125, 150 190), what shape would you get if you take a slice from 0.333 to 0.333, and can you describe it with a special string?"}
{"id": 636, "function": "ST_LineSubstring", "question": "怎么把那条从洛杉矶到波士顿的线，用那些奇怪的空间方式，截取三分之一到三分之二的部分，然后用一种格式输出，坐标要有6位小数哦？", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geography, 0.333, 0.666),6) AS geog_sub , ST_AsText(ST_LineSubstring('LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geometry, 0.333, 0.666),6) AS geom_sub;", "execution_result": [["LINESTRING(-103.911641 38.931128,-87.941787 41.831072)", "LINESTRING(-102.530462 36.819064,-86.817324 39.585927)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3317, "question_en": "How can you take that line from Los Angeles to Boston, cut out the part from one-third to two-thirds using those odd spatial methods, then output it in some format, with coordinates having 6 decimal places?"}
{"id": 636, "function": "ST_LineSubstring", "question": "看看这条从洛杉矶到波士顿的小线，想象它在0.333到0.666的位置被剪开，能不能把它变成地理和几何的样子，并保留六位小数？", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geography, 0.333, 0.666),6) AS geog_sub , ST_AsText(ST_LineSubstring('LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geometry, 0.333, 0.666),6) AS geom_sub;", "execution_result": [["LINESTRING(-103.911641 38.931128,-87.941787 41.831072)", "LINESTRING(-102.530462 36.819064,-86.817324 39.585927)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3315, "question_en": "Imagine this little line from Los Angeles to Boston being snipped at the 0.333 to 0.666 spots, can you turn it into both geography and geometry forms, keeping six decimal places?"}
{"id": 636, "function": "ST_LineSubstring", "question": "把那条连接洛杉矶和波士顿的小线段变成两种类型，然后从头开始算，找出大约三分之一到三分之二的部分，最后用一种特别的方式展示这些部分的样子，坐标保留六位小数。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geography, 0.333, 0.666),6) AS geog_sub , ST_AsText(ST_LineSubstring('LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geometry, 0.333, 0.666),6) AS geom_sub;", "execution_result": [["LINESTRING(-103.911641 38.931128,-87.941787 41.831072)", "LINESTRING(-102.530462 36.819064,-86.817324 39.585927)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3316, "question_en": "Take the little line connecting Los Angeles and Boston and make it into two types, then figure out roughly one-third to two-thirds from the start, and finally show what these parts look like in a special way, keeping the coordinates to six decimal places."}
{"id": 637, "function": "ST_LineSubstring", "question": "给你一串连接的小点，从这些点组成的长长的线中间，找出一段在长度比例三分之一到三分之二之间的，并用某种文本形式表达出来。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)', 0.333, 0.666));", "execution_result": [["LINESTRING(45.17311810399485 45.74337011202746,50 20,90 80,112.97593050157862 49.36542599789519)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3318, "question_en": "Given a string of connected little dots, find a segment from the long line they form, between one-third and two-thirds of its length, and express it in some kind of text form."}
{"id": 636, "function": "ST_LineSubstring", "question": "想象一条连接两个地方的小线，起点是-118.2436 34.0522，终点是-71.0570 42.3611。你能找到它中间的那一段吗？就像从三分之一到三分之二的部分，用一种精确到小数点后六位的方式描述出来。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geography, 0.333, 0.666),6) AS geog_sub , ST_AsText(ST_LineSubstring('LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geometry, 0.333, 0.666),6) AS geom_sub;", "execution_result": [["LINESTRING(-103.911641 38.931128,-87.941787 41.831072)", "LINESTRING(-102.530462 36.819064,-86.817324 39.585927)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3314, "question_en": "Imagine a tiny line connecting two places, starting at -118.2436 34.0522 and ending at -71.0570 42.3611. Can you find the middle part of it? Like from the one-third to two-thirds section, describe it in a way that's precise to six decimal places."}
{"id": 636, "function": "ST_LineSubstring", "question": "对一种从洛杉矶到波士顿的线条，找出大约三分之一到三分之二的部分，结果要像某种文本格式一样，精确到六位小数。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geography, 0.333, 0.666),6) AS geog_sub , ST_AsText(ST_LineSubstring('LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geometry, 0.333, 0.666),6) AS geom_sub;", "execution_result": [["LINESTRING(-103.911641 38.931128,-87.941787 41.831072)", "LINESTRING(-102.530462 36.819064,-86.817324 39.585927)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3312, "question_en": "For a line going from Los Angeles to Boston, find the part that's about one-third to two-thirds, and the result should look like some text format, accurate to six decimal places."}
{"id": 636, "function": "ST_LineSubstring", "question": "怎么找出从那个LINESTRING(-118.2436 34.0522, -71.0570 42.3611)开始的三分之一到三分之二之间的那部分，用很精细的小数来写成文本呢？", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geography, 0.333, 0.666),6) AS geog_sub , ST_AsText(ST_LineSubstring('LINESTRING(-118.2436 34.0522, -71.0570 42.3611)'::geometry, 0.333, 0.666),6) AS geom_sub;", "execution_result": [["LINESTRING(-103.911641 38.931128,-87.941787 41.831072)", "LINESTRING(-102.530462 36.819064,-86.817324 39.585927)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3313, "question_en": "How can you find the part from one-third to two-thirds starting from that LINESTRING(-118.2436 34.0522, -71.0570 42.3611) and write it in text with very precise decimals?"}
{"id": 637, "function": "ST_LineSubstring", "question": "从一串小点连成的形状里，按照从头部的0.333到尾部的0.666，剪出一段，并看看它的WKT长什么样？", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)', 0.333, 0.666));", "execution_result": [["LINESTRING(45.17311810399485 45.74337011202746,50 20,90 80,112.97593050157862 49.36542599789519)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3319, "question_en": "From a shape made of a series of little dots, cut a piece from 0.333 at the head to 0.666 at the tail, and see what its WKT looks like?"}
{"id": 637, "function": "ST_LineSubstring", "question": "从那条由这些坐标组成的长线段中截取一段，具体是从比例位置0.333到0.666之间，然后告诉我它的形状是什么。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)', 0.333, 0.666));", "execution_result": [["LINESTRING(45.17311810399485 45.74337011202746,50 20,90 80,112.97593050157862 49.36542599789519)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3321, "question_en": "Take a piece from the long line made of these coordinates, specifically from proportional position 0.333 to 0.666, and then tell me what its shape is."}
{"id": 637, "function": "ST_LineSubstring", "question": "能不能给我看一下那条折线，从差不多三分之一到大约三分之二的部分？就是从(20 180)开始经过(50 20), (90 80), (120 40),到(180 150)的那条线。最好用一种很像文本的格式。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)', 0.333, 0.666));", "execution_result": [["LINESTRING(45.17311810399485 45.74337011202746,50 20,90 80,112.97593050157862 49.36542599789519)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3323, "question_en": "Could you show me that line from about one-third to roughly two-thirds of its length? It's the line starting at (20 180), passing through (50 20), (90 80), (120 40), to (180 150). Preferably in a format that looks like text."}
{"id": 637, "function": "ST_LineSubstring", "question": "从折线LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)中间的某个三分之一处开始，截取到大约三分之二处，然后看看截取出来的部分长什么样子。", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)', 0.333, 0.666));", "execution_result": [["LINESTRING(45.17311810399485 45.74337011202746,50 20,90 80,112.97593050157862 49.36542599789519)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3320, "question_en": "Start from about a third of the way along the linestring LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150) and cut it until roughly two-thirds, then see what the extracted part looks like."}
{"id": 637, "function": "ST_LineSubstring", "question": "想象一条从20 180开始经过50 20和90 80等点的线，在这条线的三分之一到三分之二之间，那个部分能变成一种文字样式吗？", "sql": "SELECT ST_AsText(ST_LineSubstring( 'LINESTRING (20 180, 50 20, 90 80, 120 40, 180 150)', 0.333, 0.666));", "execution_result": [["LINESTRING(45.17311810399485 45.74337011202746,50 20,90 80,112.97593050157862 49.36542599789519)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3322, "question_en": "Imagine a line starting at 20 180 and passing through points like 50 20 and 90 80; can the part between one-third and two-thirds of this line be turned into a kind of text style?"}
{"id": 638, "function": "ST_LocateAlong", "question": "在由一些点串起来的对象中，像是由(1 2 3)、(3 4 2)、(9 4 3)组成的一条线，还有另一条线是(1 2 3)、(5 4 5)那些点，找出那些M值刚好是3的点，用一种格式来表达结果。", "sql": "SELECT ST_AsText( ST_LocateAlong( 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'::geometry, 3 ));", "execution_result": [["MULTIPOINT M ((1 2 3),(9 4 3),(1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3324, "question_en": "In an object made up of some connected dots, like a line with (1 2 3), (3 4 2), (9 4 3), and another line with (1 2 3), (5 4 5), find the points where the M value is exactly 3, and express the result in a certain format."}
{"id": 638, "function": "ST_LocateAlong", "question": "有个包含两条线的复杂形状，第一条线的那些点是(1 2 3)、(3 4 2)、(9 4 3)，第二条线的点是(1 2 3)、(5 4 5)。找出这些点中，那个神秘数字3在哪里，然后以一种能读出来的格式展示结果。", "sql": "SELECT ST_AsText( ST_LocateAlong( 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'::geometry, 3 ));", "execution_result": [["MULTIPOINT M ((1 2 3),(9 4 3),(1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3325, "question_en": "There's a complex shape with two lines, the first line's points are (1 2 3), (3 4 2), (9 4 3), and the second line's points are (1 2 3), (5 4 5). Find where the mysterious number 3 is among these points, and show the result in a readable format."}
{"id": 638, "function": "ST_LocateAlong", "question": "找出在那些线段上，M值刚好是3的点，然后说出这些点的样子，用那个格式。", "sql": "SELECT ST_AsText( ST_LocateAlong( 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'::geometry, 3 ));", "execution_result": [["MULTIPOINT M ((1 2 3),(9 4 3),(1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3327, "question_en": "Identify points on those line segments where the M value is exactly 3, and describe how they look using that format."}
{"id": 638, "function": "ST_LocateAlong", "question": "看看那串线里，哪些小点的M值刚好是3，然后把它们变成一种文本格式。", "sql": "SELECT ST_AsText( ST_LocateAlong( 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'::geometry, 3 ));", "execution_result": [["MULTIPOINT M ((1 2 3),(9 4 3),(1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3328, "question_en": "Look in that string of lines for which little dots have an M-value exactly as 3, then turn them into a kind of text format."}
{"id": 638, "function": "ST_LocateAlong", "question": "在那个有很多小线段的图形里，找出那些M值刚好是3的小点，然后用一种常见的文本方式来表示它们。", "sql": "SELECT ST_AsText( ST_LocateAlong( 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'::geometry, 3 ));", "execution_result": [["MULTIPOINT M ((1 2 3),(9 4 3),(1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3329, "question_en": "In that shape with many little line segments, find the tiny points where the M-value is exactly 3, and express them in some common text format."}
{"id": 639, "function": "ST_LocateBetween", "question": "有一个由两条线组成的形状，每个点都有个特别的数字，看看那些数字在1.5到3之间的部分，然后用一种文本方式表达出来。", "sql": "SELECT ST_AsText( ST_LocateBetween( 'MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))':: geometry, 1.5, 3 ));", "execution_result": [["GEOMETRYCOLLECTION M (LINESTRING M (1 2 3,3 4 2,9 4 3),POINT M (1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3331, "question_en": "There's a shape made of two lines, each point has a special number, check the parts where these numbers are between 1.5 and 3, and express them in some text format."}
{"id": 638, "function": "ST_LocateAlong", "question": "有一个由两部分组成的图形，第一部分像一条连接了点(1 2 3)、(3 4 2)、(9 4 3)的小线，第二部分连着点(1 2 3)和(5 4 5)。找出这个图形中那些M值是3的小点，并把结果用一种文本形式展示出来。", "sql": "SELECT ST_AsText( ST_LocateAlong( 'MULTILINESTRINGM((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))'::geometry, 3 ));", "execution_result": [["MULTIPOINT M ((1 2 3),(9 4 3),(1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3326, "question_en": "There's a shape made of two pieces, the first piece is like a small line joining points (1 2 3), (3 4 2), (9 4 3), and the second piece connects the points (1 2 3) and (5 4 5). Find the little points in this shape where the M-value is 3, and show the result in a text format."}
{"id": 639, "function": "ST_LocateBetween", "question": "把那些线条里的神秘数字在1.5到3之间的部分找出来，然后用一种格式来描述。", "sql": "SELECT ST_AsText( ST_LocateBetween( 'MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))':: geometry, 1.5, 3 ));", "execution_result": [["GEOMETRYCOLLECTION M (LINESTRING M (1 2 3,3 4 2,9 4 3),POINT M (1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3334, "question_en": "Find the parts of those lines where the mysterious number is between 1.5 and 3, and then describe it using a format."}
{"id": 579, "function": "ST_TransScale", "question": "想象一个由(1 2 3)到(1 1 1)的小线段，沿着横向挪动半个单位，竖着往上挪一个单位，保持原来的横向大小，但竖着拉长到两倍，高度不变，你能描述它的变化吗？", "sql": "SELECT ST_AsEWKT(ST_TransScale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 1, 1, 2));", "execution_result": [["LINESTRING(1.5 6 3,1.5 4 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3045, "question_en": "Imagine a tiny line from (1 2 3) to (1 1 1), moving half a unit sideways, one unit upwards, keeping the original sideways size, but stretching vertically to double, with the height unchanged. Can you describe its transformation?"}
{"id": 639, "function": "ST_LocateBetween", "question": "从那条包含小线段的复杂线状图形中，找出那些M值在1.5到3之间的部分，并展示它们的WKT样子。", "sql": "SELECT ST_AsText( ST_LocateBetween( 'MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))':: geometry, 1.5, 3 ));", "execution_result": [["GEOMETRYCOLLECTION M (LINESTRING M (1 2 3,3 4 2,9 4 3),POINT M (1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3333, "question_en": "From that complex line shape containing small segments, find those parts where the M-value is between 1.5 and 3, and show their WKT form."}
{"id": 639, "function": "ST_LocateBetween", "question": "对于那个有两条线和一些数字点的图形，看看那些数字点在1.5到3之间的线段，然后把它们变成某种格式的文字。", "sql": "SELECT ST_AsText( ST_LocateBetween( 'MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))':: geometry, 1.5, 3 ));", "execution_result": [["GEOMETRYCOLLECTION M (LINESTRING M (1 2 3,3 4 2,9 4 3),POINT M (1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3332, "question_en": "For that shape with two lines and some numbered dots, check the segments where the numbers are between 1.5 and 3, then turn them into some kind of text format."}
{"id": 641, "function": "ST_LocateBetweenElevations", "question": "在那个由点组成的三维路径中，找出Z值在2到4之间的那段，并把结果用某种文本格式表示。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 3, 4 5 6)'::geometry, 2, 4 ));", "execution_result": [["MULTILINESTRING Z ((1 2 3,2 3 4))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3336, "question_en": "In that 3D path made of points, find the part where Z values are between 2 and 4, and show the result in some text format."}
{"id": 639, "function": "ST_LocateBetween", "question": "找出那些在MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))中，数值在1.5到3之间的线段，并用某种文字形式表示它们的形状。", "sql": "SELECT ST_AsText( ST_LocateBetween( 'MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))':: geometry, 1.5, 3 ));", "execution_result": [["GEOMETRYCOLLECTION M (LINESTRING M (1 2 3,3 4 2,9 4 3),POINT M (1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3335, "question_en": "Identify those segments in MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5)) where the numbers are between 1.5 and 3, and describe their shapes in some textual format."}
{"id": 639, "function": "ST_LocateBetween", "question": "从那些点组成的复杂线条里，找出M值在1.5到3之间的小线段，然后用一种常见的文本方式呈现结果。", "sql": "SELECT ST_AsText( ST_LocateBetween( 'MULTILINESTRING M ((1 2 3, 3 4 2, 9 4 3),(1 2 3, 5 4 5))':: geometry, 1.5, 3 ));", "execution_result": [["GEOMETRYCOLLECTION M (LINESTRING M (1 2 3,3 4 2,9 4 3),POINT M (1 2 3))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3330, "question_en": "From the complex lines made of those points, find the little line pieces where the M-value is between 1.5 and 3, then present the result in a common text format."}
{"id": 641, "function": "ST_LocateBetweenElevations", "question": "找出那条三维线上，在高低2到4之间的部分，然后看看它的形状是什么样子的。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 3, 4 5 6)'::geometry, 2, 4 ));", "execution_result": [["MULTILINESTRING Z ((1 2 3,2 3 4))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3339, "question_en": "Find the part of that 3D line where the highs and lows are between 2 and 4, then see what its shape looks like."}
{"id": 641, "function": "ST_LocateBetweenElevations", "question": "从包含一些数字的线条中找出那些在上下限之间的部分，尤其是当第三个数字在2到4之间时，并以某种格式显示它。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 3, 4 5 6)'::geometry, 2, 4 ));", "execution_result": [["MULTILINESTRING Z ((1 2 3,2 3 4))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3340, "question_en": "From a line with some numbers, find the parts that are between certain limits, especially when the third number is between 2 and 4, and show it in some format."}
{"id": 641, "function": "ST_LocateBetweenElevations", "question": "有一条空间线段从(1, 2, 3)到(4, 5, 6)，找出Z高度在2到4之间的部分，并把它变成文字形式。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 3, 4 5 6)'::geometry, 2, 4 ));", "execution_result": [["MULTILINESTRING Z ((1 2 3,2 3 4))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3337, "question_en": "There's a spatial line from (1, 2, 3) to (4, 5, 6), find the part where the height Z is between 2 and 4, and turn it into a text form."}
{"id": 641, "function": "ST_LocateBetweenElevations", "question": "在那条由(1 2 3)到(4 5 6)的小线中，找出Z值在2到4之间的部分，然后把这个部分变成一种文本样式。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 3, 4 5 6)'::geometry, 2, 4 ));", "execution_result": [["MULTILINESTRING Z ((1 2 3,2 3 4))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3338, "question_en": "In that little line from (1 2 3) to (4 5 6), find the part where the Z value is between 2 and 4, then turn this part into a kind of text style."}
{"id": 642, "function": "ST_LocateBetweenElevations", "question": "从包含这些位置的三维路径中找出那些Z值在6到9之间的片段，然后用一种文本格式来表达结果。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 6, 4 5 -1, 7 8 9)', 6, 9)) AS ewelev;", "execution_result": [["GEOMETRYCOLLECTION Z (POINT Z (1 2 6),LINESTRING Z (6.1 7.1 6,7 8 9))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3342, "question_en": "Find the parts of a 3D path with those spots where Z values fall between 6 and 9, and express the result in a text format."}
{"id": 641, "function": "ST_LocateBetweenElevations", "question": "在那个有高低起伏的线段上，筛选出那些高在2到4之间的小段，最后把它们的形状说出来。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 3, 4 5 6)'::geometry, 2, 4 ));", "execution_result": [["MULTILINESTRING Z ((1 2 3,2 3 4))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3341, "question_en": "On that wavy line segment, filter out the small parts where the height is between 2 and 4, and finally describe their shape."}
{"id": 643, "function": "ST_InterpolatePoint", "question": "在那个有M值的线段里，就像从0到20的旅程，看看如果你在(5, 5)这个地方，会有什么样的M值呢？", "sql": "SELECT ST_InterpolatePoint('LINESTRING M (0 0 0, 10 0 20)', 'POINT(5 5)');", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3349, "question_en": "In that journey-like line with M values from 0 to 20, what would the M value be if you were at the place (5, 5)?"}
{"id": 642, "function": "ST_LocateBetweenElevations", "question": "有一个三维的路径，像是从1 2 6到4 5 -1再到7 8 9的连线。找出那些在6到9之间的高的部分，然后把它变成文字。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 6, 4 5 -1, 7 8 9)', 6, 9)) AS ewelev;", "execution_result": [["GEOMETRYCOLLECTION Z (POINT Z (1 2 6),LINESTRING Z (6.1 7.1 6,7 8 9))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3343, "question_en": "There's a 3D path, like a line connecting 1 2 6 to 4 5 -1 and then to 7 8 9. Find the parts that are tall between 6 and 9, and turn it into words."}
{"id": 642, "function": "ST_LocateBetweenElevations", "question": "从三维的小线条中，找出那些在高高的6和9之间漂浮的部分，然后用一种看得懂的格式告诉我。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 6, 4 5 -1, 7 8 9)', 6, 9)) AS ewelev;", "execution_result": [["GEOMETRYCOLLECTION Z (POINT Z (1 2 6),LINESTRING Z (6.1 7.1 6,7 8 9))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3346, "question_en": "From the 3D little line, find the parts that float between the high 6 and 9, then tell me in a format I can read."}
{"id": 642, "function": "ST_LocateBetweenElevations", "question": "看看那个三维折线从(1 2 6)到(7 8 9)，找出那些高高低低的部分，只要高度在6到9之间的，然后用一种文本方式来展示结果。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 6, 4 5 -1, 7 8 9)', 6, 9)) AS ewelev;", "execution_result": [["GEOMETRYCOLLECTION Z (POINT Z (1 2 6),LINESTRING Z (6.1 7.1 6,7 8 9))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3344, "question_en": "Check out the 3D line from (1 2 6) to (7 8 9), find the ups and downs, only keeping the parts where height is between 6 and 9, then show the result in a text form."}
{"id": 642, "function": "ST_LocateBetweenElevations", "question": "找出那条经过(1 2 6)到(7 8 9)的小线段，在高度从6到9之间的部分，然后看看它的WKT样子。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 6, 4 5 -1, 7 8 9)', 6, 9)) AS ewelev;", "execution_result": [["GEOMETRYCOLLECTION Z (POINT Z (1 2 6),LINESTRING Z (6.1 7.1 6,7 8 9))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3347, "question_en": "Find that little line segment going from (1 2 6) to (7 8 9) that's within the height range of 6 to 9, and then see what its WKT looks like."}
{"id": 642, "function": "ST_LocateBetweenElevations", "question": "找出那个包含点(1 2 6), (4 5 -1), (7 8 9)的线，它在高低值6到9之间的部分，告诉我它的样子。", "sql": "SELECT ST_AsText( ST_LocateBetweenElevations( 'LINESTRING(1 2 6, 4 5 -1, 7 8 9)', 6, 9)) AS ewelev;", "execution_result": [["GEOMETRYCOLLECTION Z (POINT Z (1 2 6),LINESTRING Z (6.1 7.1 6,7 8 9))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3345, "question_en": "Find the line that includes points (1 2 6), (4 5 -1), (7 8 9), focusing on the part where the highs and lows are between 6 and 9, and tell me what it looks like."}
{"id": 643, "function": "ST_InterpolatePoint", "question": "在那条有点像平直路径的线段上，想象一下这条线段有一种叫M值的东西，从起点到终点是从0到20。在这个路径上有个点，坐标是5和5，你能猜出这个点在路径上的那个M值吗？", "sql": "SELECT ST_InterpolatePoint('LINESTRING M (0 0 0, 10 0 20)', 'POINT(5 5)');", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3348, "question_en": "On a sort of straight path that has something called M values, starting from 0 to 20, there's a point with coordinates 5 and 5 along this path. Can you guess the M value for this point on the path?"}
{"id": 643, "function": "ST_InterpolatePoint", "question": "在一条连接点(0,0)到(10,0)且带有一些标记的线上，看看点(5,5)在这条线上的那个特别值是什么。", "sql": "SELECT ST_InterpolatePoint('LINESTRING M (0 0 0, 10 0 20)', 'POINT(5 5)');", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3350, "question_en": "On a line connecting the points (0,0) to (10,0) with some markings, find out what that special value is for the point (5,5) on this line."}
{"id": 643, "function": "ST_InterpolatePoint", "question": "当那条从(0 0 0)到(10 0 20)的线和(5 5)这个点交互时，会产生什么样的数据形式呢？", "sql": "SELECT ST_InterpolatePoint('LINESTRING M (0 0 0, 10 0 20)', 'POINT(5 5)');", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3352, "question_en": "What kind of data form appears when that line from (0 0 0) to (10 0 20) interacts with the point (5 5)?"}
{"id": 643, "function": "ST_InterpolatePoint", "question": "当你有一条从(0 0 0)到(10 0 20)的线和一个在(5 5)的小点时，想知道它们之间的某个特别的数值是什么？", "sql": "SELECT ST_InterpolatePoint('LINESTRING M (0 0 0, 10 0 20)', 'POINT(5 5)');", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3353, "question_en": "When you have a line going from (0 0 0) to (10 0 20) and a little dot at (5 5), what is that special number between them?"}
{"id": 644, "function": "ST_AddMeasure", "question": "看看那条从(1 0)到(4 0)的小线，把1到4夹在里面，最后变成什么样子呢？", "sql": "SELECT ST_AsText(ST_AddMeasure( ST_GeomFromEWKT('LINESTRING(1 0, 2 0, 4 0)'),1,4)) AS ewelev;", "execution_result": [["LINESTRING M (1 0 1,2 0 2,4 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3357, "question_en": "Take a look at that little line from (1 0) to (4 0), squeeze 1 to 4 into it, and see what it ends up looking like?"}
{"id": 644, "function": "ST_AddMeasure", "question": "把那些连起来的点，像1 0到4 0，变成一种包含从1到4的量的形状，然后给我那个形状的文字样子。", "sql": "SELECT ST_AsText(ST_AddMeasure( ST_GeomFromEWKT('LINESTRING(1 0, 2 0, 4 0)'),1,4)) AS ewelev;", "execution_result": [["LINESTRING M (1 0 1,2 0 2,4 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3358, "question_en": "Take those connected dots, like from 1 0 to 4 0, turn them into a shape that includes a measure from 1 to 4, then give me the text form of that shape."}
{"id": 644, "function": "ST_AddMeasure", "question": "把那条从(1 0)开始经过(2 0)到(4 0)的小线变成一个带有从1到4的M值的东西，然后看看它的WKT样子。", "sql": "SELECT ST_AsText(ST_AddMeasure( ST_GeomFromEWKT('LINESTRING(1 0, 2 0, 4 0)'),1,4)) AS ewelev;", "execution_result": [["LINESTRING M (1 0 1,2 0 2,4 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3355, "question_en": "Turn that little line starting at (1 0) going through (2 0) to (4 0) into something with M values from 1 to 4, and then see what its WKT looks like."}
{"id": 644, "function": "ST_AddMeasure", "question": "在那条由点组成的线段上加点什么，从1到4，最后用一种字符串方式告诉我结果。", "sql": "SELECT ST_AsText(ST_AddMeasure( ST_GeomFromEWKT('LINESTRING(1 0, 2 0, 4 0)'),1,4)) AS ewelev;", "execution_result": [["LINESTRING M (1 0 1,2 0 2,4 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3359, "question_en": "On that line made of dots, add something from 1 to 4, and finally tell me the result in a string form."}
{"id": 645, "function": "ST_AddMeasure", "question": "给那个三维的线，像是从(1 0 4)到(4 0 4)的那种，附上一些从10到40的神秘数值，然后用某种文本方式来看看结果。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRING(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING ZM (1 0 4 10,2 0 4 20,4 0 4 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3360, "question_en": "Take that 3D line, like from (1 0 4) to (4 0 4), and attach some mysterious numbers ranging from 10 to 40, then view the result in some sort of text format."}
{"id": 645, "function": "ST_AddMeasure", "question": "在那些连接的点中间，想象一个从10到40的数字渐变，看看最终的形状会是什么样子呢？", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRING(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING ZM (1 0 4 10,2 0 4 20,4 0 4 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3362, "question_en": "Imagine a gradual change of numbers from 10 to 40 in between those connected points, what would the final shape look like?"}
{"id": 645, "function": "ST_AddMeasure", "question": "怎么给那些在(1 0 4)、(2 0 4)、(4 0 4)上的三维连线，分配从10到40的M值，然后把这个形状的文字版本弄出来？", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRING(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING ZM (1 0 4 10,2 0 4 20,4 0 4 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3361, "question_en": "How do you give those 3D connections at (1 0 4), (2 0 4), (4 0 4) M values from 10 to 40, and then get the text version of this shape?"}
{"id": 644, "function": "ST_AddMeasure", "question": "给那条从(1 0)到(4 0)经过(2 0)的直线，起点是1，终点是4，中间就用那种均匀的方式处理，然后告诉我它长啥样。", "sql": "SELECT ST_AsText(ST_AddMeasure( ST_GeomFromEWKT('LINESTRING(1 0, 2 0, 4 0)'),1,4)) AS ewelev;", "execution_result": [["LINESTRING M (1 0 1,2 0 2,4 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3356, "question_en": "For that line from (1 0) to (4 0) passing through (2 0), start with 1, end with 4, and handle the middle in that even way, then tell me what it looks like."}
{"id": 644, "function": "ST_AddMeasure", "question": "给那条经过(1 0), (2 0), (4 0)的小线加上一些额外的数值，从1开始到4结束，然后用一种常见的文本方式展示出来。", "sql": "SELECT ST_AsText(ST_AddMeasure( ST_GeomFromEWKT('LINESTRING(1 0, 2 0, 4 0)'),1,4)) AS ewelev;", "execution_result": [["LINESTRING M (1 0 1,2 0 2,4 0 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3354, "question_en": "Add some extra values to that little line passing through (1 0), (2 0), (4 0), starting at 1 and ending at 4, then show it using a common text format."}
{"id": 645, "function": "ST_AddMeasure", "question": "想象一个三维的曲线，像是从(1 0 4)到(4 0 4)的那种，给它加上一些从10到40的神秘数字，结果会是什么样的字符串？", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRING(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING ZM (1 0 4 10,2 0 4 20,4 0 4 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3363, "question_en": "Imagine a 3D curve, like going from (1 0 4) to (4 0 4), and add some mysterious numbers ranging from 10 to 40 to it. What would the resulting string look like?"}
{"id": 645, "function": "ST_AddMeasure", "question": "有一串坐标像(1 0 4, 2 0 4, 4 0 4)，给它加上从10到40的神秘标记，然后告诉我它的长相。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRING(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING ZM (1 0 4 10,2 0 4 20,4 0 4 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3364, "question_en": "There's a string of coordinates like (1 0 4, 2 0 4, 4 0 4), add some mysterious tags from 10 to 40, then tell me what it looks like."}
{"id": 645, "function": "ST_AddMeasure", "question": "对那些坐标(1 0 4)、(2 0 4)、(4 0 4)连成的空间线，想象给它加上从10到40的特别标记，看看它变成什么样子，用一种特定的字符串格式告诉我。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRING(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING ZM (1 0 4 10,2 0 4 20,4 0 4 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3365, "question_en": "For those coordinates (1 0 4), (2 0 4), (4 0 4) forming a spatial line, imagine adding a special mark from 10 to 40, and see what it turns into, tell me in a certain string format."}
{"id": 646, "function": "ST_AddMeasure", "question": "在LINESTRINGM(1 0 4, 2 0 4, 4 0 4)这个带有神秘数字的线串上，从起点到终点之间加一些新的数字，从10开始到40结束，然后变成一种特殊的表达方式。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRINGM(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING M (1 0 10,2 0 20,4 0 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3366, "question_en": "On this LINESTRINGM(1 0 4, 2 0 4, 4 0 4) with mysterious numbers, add some new numbers from start to end, starting at 10 and ending at 40, then turn it into a special expression format."}
{"id": 646, "function": "ST_AddMeasure", "question": "看看这条线串LINESTRINGM(1 0 4, 2 0 4, 4 0 4)，把原来的4换成从10到40的线性变化，然后以某种文本格式返回它。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRINGM(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING M (1 0 10,2 0 20,4 0 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3368, "question_en": "Take a look at this linestring LINESTRINGM(1 0 4, 2 0 4, 4 0 4), replace the original 4 with a linear change from 10 to 40, and then return it in some kind of text format."}
{"id": 646, "function": "ST_AddMeasure", "question": "把从1 0 4到4 0 4的那些坐标里的第四个数字调整一下，让它们从10到40变化，然后用一种格式输出这个形状。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRINGM(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING M (1 0 10,2 0 20,4 0 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3370, "question_en": "Adjust the fourth number in those coordinates from 1 0 4 to 4 0 4, making them change from 10 to 40, then output this shape in a certain format."}
{"id": 646, "function": "ST_AddMeasure", "question": "给出通过在那些点上从10到40的方式调整后，得到的LINESTRINGM(1 0 4, 2 0 4, 4 0 4)的文本形式是什么？", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRINGM(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING M (1 0 10,2 0 20,4 0 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3371, "question_en": "What's the text form of that LINESTRINGM(1 0 4, 2 0 4, 4 0 4) after adjusting those points from 10 to 40?"}
{"id": 646, "function": "ST_AddMeasure", "question": "给那个包含点1 0 4, 2 0 4, 4 0 4的长条形加上一些额外数值，从10到40，然后告诉我它的字符串样子。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRINGM(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING M (1 0 10,2 0 20,4 0 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3369, "question_en": "For that shape with points 1 0 4, 2 0 4, 4 0 4, add some extra values from 10 to 40, then show me how it looks like as a string."}
{"id": 646, "function": "ST_AddMeasure", "question": "将由三个点组成的线串LINESTRINGM(1 0 4, 2 0 4, 4 0 4)，把它的M值调整为从10到40之间均匀分布，并输出它的形状文本结果。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('LINESTRINGM(1 0 4, 2 0 4, 4 0 4)'),10,40)) As ewelev;", "execution_result": [["LINESTRING M (1 0 10,2 0 20,4 0 40)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3367, "question_en": "Take the linestring LINESTRINGM(1 0 4, 2 0 4, 4 0 4) made up of three points, adjust its M values to be evenly spread between 10 and 40, and output its shape text result."}
{"id": 647, "function": "ST_AddMeasure", "question": "把那些有两个一样线段的小线条的M值，从10变到70，看看结果是什么样子。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))'),10,70)) As ewelev;", "execution_result": [["MULTILINESTRING M ((1 0 10,2 0 20,4 0 40),(1 0 40,2 0 50,4 0 70))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3373, "question_en": "Change the M values of those little lines with two identical segments from 10 to 70, and see what the result looks like."}
{"id": 647, "function": "ST_AddMeasure", "question": "想象那些线条经过一番调整，M值从10到70，然后告诉我它们的表现形式是什么样子的。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))'),10,70)) As ewelev;", "execution_result": [["MULTILINESTRING M ((1 0 10,2 0 20,4 0 40),(1 0 40,2 0 50,4 0 70))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3376, "question_en": "Imagine those lines get adjusted with M-values from 10 to 70, then tell me what their representation looks like."}
{"id": 647, "function": "ST_AddMeasure", "question": "有一个包含两个三维线段的小线条集合，点的M值从10到70间隔排列，结果要以某种格式显示出来。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))'),10,70)) As ewelev;", "execution_result": [["MULTILINESTRING M ((1 0 10,2 0 20,4 0 40),(1 0 40,2 0 50,4 0 70))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3372, "question_en": "There's a collection of small lines with two 3D segments, where the M-values of the points range from 10 to 70, and the result should be shown in some format."}
{"id": 647, "function": "ST_AddMeasure", "question": "对于那些三维小线条，起初每个点都有个4，现在想从头到尾换成10到70的变化，最后想看看它的文字样子。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))'),10,70)) As ewelev;", "execution_result": [["MULTILINESTRING M ((1 0 10,2 0 20,4 0 40),(1 0 40,2 0 50,4 0 70))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3374, "question_en": "For those little 3D lines, initially each point has a 4, now we want to change it from 10 to 70 from start to end, and finally see its text form."}
{"id": 647, "function": "ST_AddMeasure", "question": "把那个有好多小线段的形状，从10到70之间，给它弄出个新的描述，看看会变成什么。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))'),10,70)) As ewelev;", "execution_result": [["MULTILINESTRING M ((1 0 10,2 0 20,4 0 40),(1 0 40,2 0 50,4 0 70))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3377, "question_en": "Take that shape with many little lines and make a new description for it from 10 to 70, and see what it becomes."}
{"id": 648, "function": "ST_IsValidTrajectory", "question": "看看用两个特别的点做成的线段是不是能当作一条合格的路线，第一个点在(0,0)上有个小标记1，第二个点在(0,1)上有个小标记2。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine( ST_MakePointM(0,0,1), ST_MakePointM(0,1,2)) );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3378, "question_en": "Check if the line segment made with two special points can be considered a qualified route, where the first point at (0,0) has a little mark 1, and the second point at (0,1) has a little mark 2."}
{"id": 647, "function": "ST_AddMeasure", "question": "给那个由(1 0 4, 2 0 4, 4 0 4)和(1 0 4, 2 0 4, 4 0 4)组成的线加上一些数值，从10到70，然后看看它变成了什么样的字符串。", "sql": "SELECT ST_AsText(ST_AddMeasure(ST_GeomFromEWKT('MULTILINESTRINGM((1 0 4, 2 0 4, 4 0 4),(1 0 4, 2 0 4, 4 0 4))'),10,70)) As ewelev;", "execution_result": [["MULTILINESTRING M ((1 0 10,2 0 20,4 0 40),(1 0 40,2 0 50,4 0 70))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3375, "question_en": "Take the lines made of (1 0 4, 2 0 4, 4 0 4) and (1 0 4, 2 0 4, 4 0 4) and add some numbers from 10 to 70, then see what kind of string it turns into."}
{"id": 643, "function": "ST_InterpolatePoint", "question": "对于那条从(0 0 0)到(10 0 20)的线，看看在(5 5)这个位置上，那个附加的M值会是什么。", "sql": "SELECT ST_InterpolatePoint('LINESTRING M (0 0 0, 10 0 20)', 'POINT(5 5)');", "execution_result": [[10.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3351, "question_en": "For that line from (0 0 0) to (10 0 20), see what the extra M-value would be at the position (5 5)."}
{"id": 648, "function": "ST_IsValidTrajectory", "question": "看看由两个有点特殊的点(0,0,1)和(0,1,2)连成的线段是否符合某种轨迹规则，注意这两个点有附加的1和2。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine( ST_MakePointM(0,0,1), ST_MakePointM(0,1,2)) );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3380, "question_en": "See if the line segment connecting two somewhat special points (0,0,1) and (0,1,2) follows some kind of trajectory rule, noting that these points have extra 1 and 2."}
{"id": 648, "function": "ST_IsValidTrajectory", "question": "看看由那些小点(0,0,1)和(0,1,2)连成的线，时间上是1和2的，算不算一个合理的路径。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine( ST_MakePointM(0,0,1), ST_MakePointM(0,1,2)) );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3381, "question_en": "Check if the line formed by those little dots (0,0,1) and (0,1,2), with times as 1 and 2, counts as a reasonable path."}
{"id": 648, "function": "ST_IsValidTrajectory", "question": "把那些小点(0,0,1)和(0,1,2)连成一条线，看看关于时间变化的正确性如何，其中最后一个数字1和2表示时间在增加。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine( ST_MakePointM(0,0,1), ST_MakePointM(0,1,2)) );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3383, "question_en": "Connect those little dots (0,0,1) and (0,1,2) into a line, and check how the correctness regarding time changes, where the last numbers 1 and 2 indicate increasing time."}
{"id": 648, "function": "ST_IsValidTrajectory", "question": "看看用(0,0)和(0,1)这两个带有时间1和2的小点连成的路径线，是不是符合那个需要每个点的数值都增加的标准，结果是对还是错。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine( ST_MakePointM(0,0,1), ST_MakePointM(0,1,2)) );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3382, "question_en": "See if the path line made by connecting these two little points with (0,0) and (0,1), having times 1 and 2, fits that standard where each point's number should increase, and say if it's right or wrong."}
{"id": 649, "function": "ST_IsValidTrajectory", "question": "看看由两个特殊的小点连成的线是不是个有效的路径，第一个在(0, 0)位置有个1，第二个在(0, 1)位置有个0。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine(ST_MakePointM(0,0,1), ST_MakePointM(0,1,0)));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3386, "question_en": "See if the line made by two special little dots is a valid path, with the first at position (0, 0) having a 1, and the second at (0, 1) having a 0."}
{"id": 649, "function": "ST_IsValidTrajectory", "question": "检查连接两个小点(0,0,1)和(0,1,0)后形成的线条是否是一种合格的路径，特别注意那些1和0的数字。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine(ST_MakePointM(0,0,1), ST_MakePointM(0,1,0)));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3385, "question_en": "Check if the line formed by connecting two small dots (0,0,1) and (0,1,0) is a qualified path, paying special attention to those numbers 1 and 0."}
{"id": 649, "function": "ST_IsValidTrajectory", "question": "看看由两个小坐标点(0,0,1)和(0,1,0)拉出的线是不是一个合适的路径。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine(ST_MakePointM(0,0,1), ST_MakePointM(0,1,0)));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3384, "question_en": "Check if the line drawn from two small coordinate points (0,0,1) and (0,1,0) is a suitable path."}
{"id": 648, "function": "ST_IsValidTrajectory", "question": "看看由两个带有额外数字的小点构成的一段线是不是合格，头一个小点在(0,0)并带着1，另一个在(0,1)带着2，想知道这些数字是不是得一直变大。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine( ST_MakePointM(0,0,1), ST_MakePointM(0,1,2)) );", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3379, "question_en": "Check if a segment made from two little dots with extra numbers is up to standard, with the first dot at (0,0) carrying a 1, and the other at (0,1) carrying a 2, to see if these numbers have to keep getting bigger."}
{"id": 649, "function": "ST_IsValidTrajectory", "question": "看看从这些坐标(0,0,1)和(0,1,0)画出来的线路是否合规，结果是对或错就行。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine(ST_MakePointM(0,0,1), ST_MakePointM(0,1,0)));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3387, "question_en": "Check if the line drawn from these coordinates (0,0,1) and (0,1,0) is proper, just need a yes or no answer."}
{"id": 649, "function": "ST_IsValidTrajectory", "question": "看看由两个小点构成的路径是否算得上合理，第一个点是(0,0,1)，第二个点是(0,1,0)，结果是个对或错的答案。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine(ST_MakePointM(0,0,1), ST_MakePointM(0,1,0)));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3389, "question_en": "Check if the path made by two little points is considered reasonable, with the first point being (0,0,1) and the second point being (0,1,0), and the result is a true or false answer."}
{"id": 649, "function": "ST_IsValidTrajectory", "question": "看看用那两个小点，一个在(0,0)高1，一个在(0,1)高0，连起来的那条线是不是符合某种时间和空间的规则，结果是对还是错。", "sql": "SELECT ST_IsValidTrajectory(ST_MakeLine(ST_MakePointM(0,0,1), ST_MakePointM(0,1,0)));", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3388, "question_en": "Check if the line made by connecting those two little dots, one at (0,0) with height 1 and the other at (0,1) with height 0, fits some kind of time and space rule, and see if it's right or wrong."}
{"id": 650, "function": "ST_ClosestPointOfApproach", "question": "有两个3D的线段，一个是从(0 0 0)到(10 0 5)，另一个是从(0 2 10)到(12 1 2)，给它们加上2015年5月26日上午10点到11点的时间，然后找出它们最靠近的地方的时间、三维的距离，还有那些点的坐标，坐标要保留两位小数哦。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n), cpa AS (\n  SELECT ST_ClosestPointOfApproach(a,b) m FROM inp\n), points AS (\n  SELECT ST_GeometryN(ST_LocateAlong(a,m),1) pa,\n         ST_GeometryN(ST_LocateAlong(b,m),1) pb\n  FROM inp, cpa\n)\nSELECT to_timestamp(m) t,\n       ST_3DDistance(pa,pb) distance,\n       ST_AsText(pa, 2) AS pa, ST_AsText(pb, 2) AS pb\nFROM points, cpa;", "execution_result": [["2015-05-26T10:45:31.034483+08:00", 1.9652147377620688, "POINT ZM (7.59 0 3.79 1432608331.03)", "POINT ZM (9.1 1.24 3.93 1432608331.03)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "datetime_to_iso", "source": "original", "new_id": 3390, "question_en": "There are two 3D lines, one going from (0 0 0) to (10 0 5) and the other from (0 2 10) to (12 1 2). Add the time from 10:00 to 11:00 on May 26, 2015, then find the closest spots' time, 3D distance, and those points' coordinates, keeping two decimal places for the coordinates."}
{"id": 650, "function": "ST_ClosestPointOfApproach", "question": "在2015年5月26日10点到11点之间，找出两条奇妙的三维路径LINESTRING Z (0 0 0, 10 0 5)和LINESTRING Z (0 2 10, 12 1 2)最亲密接触的时刻和位置。请给出那一刻的时间、它们之间的距离，以及这两个位置的具体坐标。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n), cpa AS (\n  SELECT ST_ClosestPointOfApproach(a,b) m FROM inp\n), points AS (\n  SELECT ST_GeometryN(ST_LocateAlong(a,m),1) pa,\n         ST_GeometryN(ST_LocateAlong(b,m),1) pb\n  FROM inp, cpa\n)\nSELECT to_timestamp(m) t,\n       ST_3DDistance(pa,pb) distance,\n       ST_AsText(pa, 2) AS pa, ST_AsText(pb, 2) AS pb\nFROM points, cpa;", "execution_result": [["2015-05-26T10:45:31.034483+08:00", 1.9652147377620688, "POINT ZM (7.59 0 3.79 1432608331.03)", "POINT ZM (9.1 1.24 3.93 1432608331.03)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "datetime_to_iso", "source": "original", "new_id": 3391, "question_en": "Between 10:00 and 11:00 on May 26, 2015, find the moment and place where two intriguing 3D paths, LINESTRING Z (0 0 0, 10 0 5) and LINESTRING Z (0 2 10, 12 1 2), come closest to each other. Please provide the time of that moment, the distance between them, and the specific coordinates of these two locations."}
{"id": 650, "function": "ST_ClosestPointOfApproach", "question": "找出两个三维小线条在2015年5月26日10点到11点之间最近相互靠近的时间，还有它们之间的空间距离，以及各自最接近的那个点的简单描述。第一个小线条是(0 0 0到10 0 5)，另一个是(0 2 10到12 1 2)。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n), cpa AS (\n  SELECT ST_ClosestPointOfApproach(a,b) m FROM inp\n), points AS (\n  SELECT ST_GeometryN(ST_LocateAlong(a,m),1) pa,\n         ST_GeometryN(ST_LocateAlong(b,m),1) pb\n  FROM inp, cpa\n)\nSELECT to_timestamp(m) t,\n       ST_3DDistance(pa,pb) distance,\n       ST_AsText(pa, 2) AS pa, ST_AsText(pb, 2) AS pb\nFROM points, cpa;", "execution_result": [["2015-05-26T10:45:31.034483+08:00", 1.9652147377620688, "POINT ZM (7.59 0 3.79 1432608331.03)", "POINT ZM (9.1 1.24 3.93 1432608331.03)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "datetime_to_iso", "source": "original", "new_id": 3393, "question_en": "Find the time when two small 3D lines got closest to each other between 10:00 and 11:00 on May 26, 2015, their spatial distance, and the simple description of their closest points. The first small line is from (0 0 0 to 10 0 5), and the other is from (0 2 10 to 12 1 2)."}
{"id": 650, "function": "ST_ClosestPointOfApproach", "question": "有两条三维小线段，第一条从(0 0 0)到(10 0 5)，第二条从(0 2 10)到(12 1 2)，加上2015年5月26日上午10点到11点的时间后，怎样找到它们最靠近的那个时间点，以及它们之间的三维间隔和两边的小点位置，保留到小数点后两位？", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n), cpa AS (\n  SELECT ST_ClosestPointOfApproach(a,b) m FROM inp\n), points AS (\n  SELECT ST_GeometryN(ST_LocateAlong(a,m),1) pa,\n         ST_GeometryN(ST_LocateAlong(b,m),1) pb\n  FROM inp, cpa\n)\nSELECT to_timestamp(m) t,\n       ST_3DDistance(pa,pb) distance,\n       ST_AsText(pa, 2) AS pa, ST_AsText(pb, 2) AS pb\nFROM points, cpa;", "execution_result": [["2015-05-26T10:45:31.034483+08:00", 1.9652147377620688, "POINT ZM (7.59 0 3.79 1432608331.03)", "POINT ZM (9.1 1.24 3.93 1432608331.03)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "datetime_to_iso", "source": "original", "new_id": 3392, "question_en": "There are two 3D little lines, the first one goes from (0 0 0) to (10 0 5), and the second one from (0 2 10) to (12 1 2). After adding the time from 10:00 to 11:00 on May 26, 2015, how can we find their closest moment, the 3D gap between them, and the positions of the little points on both sides, rounded to two decimal places?"}
{"id": 651, "function": "ST_DistanceCPA", "question": "想象一下两条三维的路径，第一条从(0 0 0)到(10 0 5)，第二条从(0 2 10)到(12 1 2)，都在2015年5月26日上午10点到11点之间行走。你能找到它们之间最近的距离吗？", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3398, "question_en": "Imagine two 3D paths, the first one from (0 0 0) to (10 0 5), and the second from (0 2 10) to (12 1 2), both traveling between 10:00 and 11:00 on May 26, 2015. Can you find the closest distance between them?"}
{"id": 650, "function": "ST_ClosestPointOfApproach", "question": "看看两条立体线段在某个时间点上最接近的时刻是什么时候，还有当时它们之间的空间距离是多少，以及这两个最近点的形状长什么样。第一条线是从 (0 0 0) 到 (10 0 5)，第二条从 (0 2 10) 到 (12 1 2)，时间范围是2015年5月26日上午10点到11点。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n), cpa AS (\n  SELECT ST_ClosestPointOfApproach(a,b) m FROM inp\n), points AS (\n  SELECT ST_GeometryN(ST_LocateAlong(a,m),1) pa,\n         ST_GeometryN(ST_LocateAlong(b,m),1) pb\n  FROM inp, cpa\n)\nSELECT to_timestamp(m) t,\n       ST_3DDistance(pa,pb) distance,\n       ST_AsText(pa, 2) AS pa, ST_AsText(pb, 2) AS pb\nFROM points, cpa;", "execution_result": [["2015-05-26T10:45:31.034483+08:00", 1.9652147377620688, "POINT ZM (7.59 0 3.79 1432608331.03)", "POINT ZM (9.1 1.24 3.93 1432608331.03)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "datetime_to_iso", "source": "original", "new_id": 3394, "question_en": "Check out when two 3D lines get closest at some moment, how far apart they are at that time, and what the shape of these nearest points looks like. The first line goes from (0 0 0) to (10 0 5), and the second one from (0 2 10) to (12 1 2), with a time range from 10:00 to 11:00 on May 26, 2015."}
{"id": 651, "function": "ST_DistanceCPA", "question": "在2015年5月26日上午10点到11点之间，找出那两条3D线（(0 0 0到10 0 5)和(0 2 10到12 1 2)）最接近的点之间的距离是多少？", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3396, "question_en": "Between 10:00 and 11:00 on May 26, 2015, what is the distance between the closest points of those two 3D lines (from (0 0 0 to 10 0 5) and (from 0 2 10 to 12 1 2))?"}
{"id": 651, "function": "ST_DistanceCPA", "question": "找出在2015年5月26日10点到11点之间，两条三维线条(0 0 0, 10 0 5)和(0 2 10, 12 1 2)的最接近距离是多少。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3399, "question_en": "Find out the closest distance between two 3D lines (0 0 0, 10 0 5) and (0 2 10, 12 1 2) during the time from 10 to 11 on May 26, 2015."}
{"id": 650, "function": "ST_ClosestPointOfApproach", "question": "在2015年5月26日早上10点到11点之间，找出两条三维线（一个是从点0 0 0到点10 0 5，另一个是从点0 2 10到点12 1 2）的最接近的时刻，并看看这两个点之间的距离是多少，然后把两个最靠近的点用一种特别的文字格式表达出来，保留两位小数。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n), cpa AS (\n  SELECT ST_ClosestPointOfApproach(a,b) m FROM inp\n), points AS (\n  SELECT ST_GeometryN(ST_LocateAlong(a,m),1) pa,\n         ST_GeometryN(ST_LocateAlong(b,m),1) pb\n  FROM inp, cpa\n)\nSELECT to_timestamp(m) t,\n       ST_3DDistance(pa,pb) distance,\n       ST_AsText(pa, 2) AS pa, ST_AsText(pb, 2) AS pb\nFROM points, cpa;", "execution_result": [["2015-05-26T10:45:31.034483+08:00", 1.9652147377620688, "POINT ZM (7.59 0 3.79 1432608331.03)", "POINT ZM (9.1 1.24 3.93 1432608331.03)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "conversion_method": "datetime_to_iso", "source": "original", "new_id": 3395, "question_en": "Between 10:00 and 11:00 on May 26, 2015, find the closest moment for two 3D lines (one from point 0 0 0 to point 10 0 5, the other from point 0 2 10 to point 12 1 2), and see what the distance is between these two points, then express the two closest points using a special text format, rounded to two decimal places."}
{"id": 651, "function": "ST_DistanceCPA", "question": "对于那些三维的线条，像0 0 0到10 0 5，还有0 2 10到12 1 2，给它们都加上从2015年5月26日上午10点到11点之间的时间，然后看看它们之间最靠近的地方有多远。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3397, "question_en": "For those 3D lines, like from 0 0 0 to 10 0 5, and 0 2 10 to 12 1 2, add the time from 10:00 to 11:00 on May 26, 2015, to them, and then see how far apart their closest spots are."}
{"id": 651, "function": "ST_DistanceCPA", "question": "看看两个有时间标记的小线段之间，它们最近能靠多近。第一个从(0 0 0)到(10 0 5)，第二个从(0 2 10)到(12 1 2)，时间是2015年5月26日早上10点到11点。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3400, "question_en": "Check how close two little segments with time tags can get to each other. The first goes from (0 0 0) to (10 0 5), and the second from (0 2 10) to (12 1 2), during the time from 10 to 11 in the morning on May 26, 2015."}
{"id": 651, "function": "ST_DistanceCPA", "question": "找出两个带时间的小线条之间的最短距离，第一个从(0 0 0)到(10 0 5)，第二个从(0 2 10)到(12 1 2)，时间是从2015年5月26日上午10点到11点变成某种数字。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3401, "question_en": "Find the shortest distance between two time-tagged little lines, with the first going from (0 0 0) to (10 0 5) and the second from (0 2 10) to (12 1 2), with time from May 26, 2015, 10 AM to 11 AM turned into some kind of number."}
{"id": 652, "function": "ST_CPAWithin", "question": "在2015年5月26日上午10点到11点之间，把那些有点高度的线段（比如从0 0 0到10 0 5，还有从0 2 10到12 1 2）附加一些时间上的东西，然后看看它们在这个时间段里是否在2单位距离内有最靠近的点，并且找出那个确切的最短距离。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_CPAWithin(a,b,2), ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[true, 1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3404, "question_en": "Between 10:00 and 11:00 on May 26, 2015, add some sort of time element to those lines with a bit of height (like from 0 0 0 to 10 0 5, and from 0 2 10 to 12 1 2), then see if during this time they have points that are closest within 2 units and find that exact shortest distance."}
{"id": 652, "function": "ST_CPAWithin", "question": "在2015年5月26日早上10点到11点之间，看看有两条带时间标记的三维线，像(0 0 0, 10 0 5)和(0 2 10, 12 1 2)这样的，最近是否能在2个单位的距离内靠近，并且它们最靠近的那个点到底隔多远呢？", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_CPAWithin(a,b,2), ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[true, 1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3405, "question_en": "Between 10:00 and 11:00 AM on May 26, 2015, see if two 3D lines with time tags, like (0 0 0, 10 0 5) and (0 2 10, 12 1 2), can get as close as 2 units apart, and how far apart are they at their closest point?"}
{"id": 652, "function": "ST_CPAWithin", "question": "在2015年5月26日上午10点到11点这段时间里，看看那些在空间里延展的线，像是从(0, 0, 0)到(10, 0, 5)和从(0, 2, 10)到(12, 1, 2)，它们最近能靠得多近，是不是小于2单位，然后找出具体距离是多少。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_CPAWithin(a,b,2), ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[true, 1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3403, "question_en": "During the time from 10 AM to 11 AM on May 26, 2015, check those lines stretching in space, like from (0, 0, 0) to (10, 0, 5) and from (0, 2, 10) to (12, 1, 2), to see how close they can get, whether it's less than 2 units, and find out the exact distance."}
{"id": 652, "function": "ST_CPAWithin", "question": "有两条三维线，像是从(0 0 0)到(10 0 5)和从(0 2 10)到(12 1 2)的倾斜线。假如我们给它们加上某个时间范围的标记，从2015年5月26日上午10点到11点，然后看看它们在这个时间段里最近能靠多近，是不是能在2个单位以内，并找出它们实际最近的距离。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_CPAWithin(a,b,2), ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[true, 1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3402, "question_en": "There are two 3D lines, kind of slanted from (0 0 0) to (10 0 5) and from (0 2 10) to (12 1 2). Suppose we add a time range marker to them, from 10 AM to 11 AM on May 26, 2015, then see how close they can get during this time, whether within 2 units, and find out their actual closest distance."}
{"id": 652, "function": "ST_CPAWithin", "question": "看看两条三维线条（0 0 0到10 0 5，还有0 2 10到12 1 2）在2015年5月26日上午10点到11点之间，最近的靠近点是不是在2个单位范围内，并且计算出它们之间的实际距离是多少。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_CPAWithin(a,b,2), ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[true, 1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3407, "question_en": "See if the closest approach between two 3D lines (from 0 0 0 to 10 0 5, and from 0 2 10 to 12 1 2) between 10:00 AM and 11:00 AM on May 26, 2015, is within 2 units, and calculate what the actual distance between them is."}
{"id": 652, "function": "ST_CPAWithin", "question": "在2015年5月26日上午10点到11点之间，有两条含高度的小线段，一个从(0, 0, 0)到(10, 0, 5)，另一个从(0, 2, 10)到(12, 1, 2)，找找看它们之间有没有在2单位以内的最近点，并给出那个最近点的具体距离。", "sql": "WITH inp AS ( SELECT\n  ST_AddMeasure('LINESTRING Z (0 0 0, 10 0 5)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) a,\n  ST_AddMeasure('LINESTRING Z (0 2 10, 12 1 2)'::geometry,\n    extract(epoch from '2015-05-26 10:00'::timestamptz),\n    extract(epoch from '2015-05-26 11:00'::timestamptz)\n  ) b\n)\nSELECT ST_CPAWithin(a,b,2), ST_DistanceCPA(a,b) distance FROM inp;", "execution_result": [[true, 1.9652147377620688]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3406, "question_en": "Between 10 AM and 11 AM on May 26, 2015, there are two little height-including lines, one from (0, 0, 0) to (10, 0, 5) and the other from (0, 2, 10) to (12, 1, 2). See if they have any closest spots within 2 units and give the exact distance of that spot."}
{"id": 675, "function": "ST_IsValidDetail", "question": "在一片参数的天地里，有两个表格，一个叫e，另一个叫f。e表里的小点从(-4,6)到(2,5)再到(1,8)之间游走，f表则在(-3,6)到(2,5)再到(1,10)的范围内徘徊。它们遵循着奇妙的规则，生成了一些圆形和线条。然后，这些圆和线通过某种方式组合，形成了一些不太对劲的形状。你能找到这些奇怪形状的前三个，看看它们的编号、哪里出错了，以及那些有问题的小点吗？", "sql": "SELECT gid, reason(ST_IsValidDetail(geom)), ST_AsText(location(ST_IsValidDetail(geom))) as location\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection", "POINT(33 4)"], [5340, "Self-intersection", "POINT(43 4)"], [5350, "Self-intersection", "POINT(53 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3408, "question_en": "In a realm of parameters, there are two tables, one called e and the other f. The little dots in table e wander between (-4,6), (2,5), and (1,8), while table f roams in the range of (-3,6), (2,5), and (1,10). They follow peculiar rules to generate some circles and lines. Then, these circles and lines somehow combine to form some odd shapes. Can you find the first three of these strange shapes, see their numbers, where they went wrong, and the troublesome little dots?"}
{"id": 675, "function": "ST_IsValidDetail", "question": "帮我找出三个有问题的多边形，想知道它们的编号、问题原因和出错地方的描述。它们是这样生成的：在某些特定范围内的点，先画个圈圈，然后再给圈圈外面加点线条，最后组合成一个形状，看看哪些形状不太对劲。", "sql": "SELECT gid, reason(ST_IsValidDetail(geom)), ST_AsText(location(ST_IsValidDetail(geom))) as location\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection", "POINT(33 4)"], [5340, "Self-intersection", "POINT(43 4)"], [5350, "Self-intersection", "POINT(53 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3413, "question_en": "Help me find three problematic polygons. I want to know their numbers, the reasons for their issues, and descriptions of the error locations. They are generated like this: for certain points within specific ranges, draw a circle, then add some lines outside the circle, and finally combine into a shape to see which shapes are not quite right."}
{"id": 676, "function": "ST_IsValidReason", "question": "在quintuplet_experiment表中，找出gid和几何图形的有效性原因。数据是从两个地方来的：一是从某个地方生成的一些圆形的东西，用点乘以10和一些数字做成的，并且有些条件；二是从另一个地方生成的线条，这些线条是从一圈东西那里来的，然后被推来推去。最后，把这些东西组合成某种形状，只选那些面积超过78并且包含某些线条的，看看它们有没有问题，然后按顺序取前三个。", "sql": "SELECT gid, ST_IsValidReason(geom) as validity_info\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection[33 4]"], [5340, "Self-intersection[43 4]"], [5350, "Self-intersection[53 4]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3414, "question_en": "In the quintuplet_experiment table, find gid and the reason for the validity of the geometry. The data comes from two places: one is some round things made by points multiplied by 10 and some numbers, with certain conditions; the other is lines coming from a ring thing, then moved around. Finally, combine these into some shape, only selecting those with area over 78 and containing certain lines, check if they have issues, then take the top three in order."}
{"id": 675, "function": "ST_IsValidDetail", "question": "想象一下有一些点，来自坐标x1乘以10加上y1，范围在-4到6和2到5之间。然后围绕这些点，用z1的数字做个圆圈，z1可以是1到8或者1到10。接着把这些圆圈稍微往上和往旁边移一下，移的距离是y1和z1的某种组合。看看这些形状是不是有效，挑出那些不太对劲的，特别是面积比较大的，返回前三个问题的原因和位置，按gid排序。", "sql": "SELECT gid, reason(ST_IsValidDetail(geom)), ST_AsText(location(ST_IsValidDetail(geom))) as location\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection", "POINT(33 4)"], [5340, "Self-intersection", "POINT(43 4)"], [5350, "Self-intersection", "POINT(53 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3411, "question_en": "Imagine there are some dots from coordinates where x1 multiplied by 10 plus y1, ranging between -4 to 6 and 2 to 5. Then, around these dots, make a circle using the number z1, which can be between 1 to 8 or 1 to 10. Next, move these circles a bit upwards and sideways, the distance moved is a mix of y1 and z1. Check if these shapes are valid, pick out the ones that seem off, especially those with larger areas, and return the top three issues with reasons and locations, sorted by gid."}
{"id": 675, "function": "ST_IsValidDetail", "question": "给我一个表，列出那些由一堆点和线组合而成的形状，这些形状要有个特殊的编号，用某种计算法则得到的。告诉我那些形状为什么不太对劲，还有它们不太对劲的具体位置。只要那些面积超过78并包住线的形状，挑前三个问题最多的，按编号排个序。", "sql": "SELECT gid, reason(ST_IsValidDetail(geom)), ST_AsText(location(ST_IsValidDetail(geom))) as location\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection", "POINT(33 4)"], [5340, "Self-intersection", "POINT(43 4)"], [5350, "Self-intersection", "POINT(53 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3412, "question_en": "Give me a table listing those shapes made from a bunch of points and lines combined together, and these shapes should have a special ID, calculated using some method. Tell me why those shapes are not quite right, and their exact problematic location. Only keep those shapes with an area over 78 that enclose the line, pick the top three most problematic ones, and sort them by ID."}
{"id": 681, "function": "DropGeometryTable", "question": "在叫做my_schema的地方，拿掉那个叫my_spatial_table的地方，并看看结果怎样。", "sql": "SELECT DropGeometryTable ('my_schema','my_spatial_table');", "execution_result": [["my_schema.my_spatial_table dropped."]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3420, "question_en": "In the place called my_schema, remove that spot called my_spatial_table and see what the result is."}
{"id": 681, "function": "DropGeometryTable", "question": "把那个my_schema里面的my_spatial_table和相关的图形内容全部清理掉，然后告诉我是不是成功了。", "sql": "SELECT DropGeometryTable ('my_schema','my_spatial_table');", "execution_result": [["my_schema.my_spatial_table dropped."]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3422, "question_en": "Clear out the my_spatial_table and its related shapes from the my_schema, and then let me know if it worked."}
{"id": 675, "function": "ST_IsValidDetail", "question": "找出那些用圆圈和移动的环线组合成的形状中，最前面的3个不太合适的记录。圆圈是从一些特定的点出发，半径是z1，中心点是(10x1,y1)，条件要满足x1比y1的一半还大，并且z1比x1乘以y1小。环线从(10x1,y1)开始，移动量是(y1, 2*z1)，条件是x1比y1的四分之三还大，且z1比x1乘以y1小。想看看这些形状中哪些不太对劲，它们的编号是什么，哪里出问题了，以及那地方的具体坐标。", "sql": "SELECT gid, reason(ST_IsValidDetail(geom)), ST_AsText(location(ST_IsValidDetail(geom))) as location\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection", "POINT(33 4)"], [5340, "Self-intersection", "POINT(43 4)"], [5350, "Self-intersection", "POINT(53 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3409, "question_en": "Find the top 3 not-so-suitable records from shapes made by mixing circles and shifted rings. Circles start from specific points, with radius z1, center at (10x1,y1), needing x1 to be more than half of y1, and z1 less than x1 times y1. Rings start at (10x1,y1), with shifts of (y1, 2*z1), needing x1 to be more than three-quarters of y1, and z1 less than x1 times y1. Check which of these shapes are a bit off, what their numbers are, where the problem is, and the specific coordinates of that place."}
{"id": 681, "function": "DropGeometryTable", "question": "试着把在那个叫my_schema的地方里的my_spatial_table给消掉，然后看看有没有成功的消息。", "sql": "SELECT DropGeometryTable ('my_schema','my_spatial_table');", "execution_result": [["my_schema.my_spatial_table dropped."]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3421, "question_en": "Try to get rid of that thing called my_spatial_table in the place named my_schema, then see if there's a success message."}
{"id": 676, "function": "ST_IsValidReason", "question": "在表quintuplet_experiment中，找出前三个不太对劲的多边形记录的编号和它们的问题。这些多边形是这样做出来的：先在某个范围内选些数字，做成一堆点，然后用其中一个数变成圆的大小。接着，再用另一组数字搞出一些线条，稍微移动一下。最后，把那些比较大的圆的外边和对应的线条拼成多边形，看看哪些有点不太对劲，按编号排一下序。", "sql": "SELECT gid, ST_IsValidReason(geom) as validity_info\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection[33 4]"], [5340, "Self-intersection[43 4]"], [5350, "Self-intersection[53 4]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3417, "question_en": "In the table quintuplet_experiment, find the first three not quite right polygon records' numbers and their issues. These polygons are made like this: first, pick some numbers within a range to make a bunch of points, then use one of the numbers to size the circles. Next, create some lines from another set of numbers and move them a bit. Finally, combine the outer edges of the larger circles with the corresponding lines into polygons, see which ones are a bit off, and sort them by number."}
{"id": 676, "function": "ST_IsValidReason", "question": "假设有一些小点，它们在某个范围内生成，然后依据某些条件过滤。接下来，以这些点为中心画出一个圆圈，半径是某个数字。再做一些计算，用这些数字加减乘除得到一个特定的编号。然后，另一些点也按照类似的方式生成和过滤，画出圆圈并且进行某种移动。接下来，我们找出那些圆圈面积大于78并且能够包住移动后线条的情况。最后，通过这些圆圈的外边和线条们围成一个形状，挑选出无效的记录，并限制返回前三个编号及其有效性原因。", "sql": "SELECT gid, ST_IsValidReason(geom) as validity_info\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection[33 4]"], [5340, "Self-intersection[43 4]"], [5350, "Self-intersection[53 4]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3415, "question_en": "Imagine some little dots are generated within a certain range and then filtered based on some conditions. Next, draw a circle centered on these dots with a radius of a certain number. Do some calculations using these numbers to get a specific ID. Then, other dots are generated and filtered in a similar way, draw circles and perform some kind of movement. After that, we look for cases where the circles have an area greater than 78 and can enclose the moved lines. Finally, using the outer edges of these circles and lines to form a shape, select invalid records, and limit the return to the top three IDs and their validity reason."}
{"id": 681, "function": "DropGeometryTable", "question": "在叫做my_schema的地方，把叫my_spatial_table的那个装有小图形的表和它的相关东西都去掉。", "sql": "SELECT DropGeometryTable ('my_schema','my_spatial_table');", "execution_result": [["my_schema.my_spatial_table dropped."]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3423, "question_en": "In the place called my_schema, remove the table named my_spatial_table that has little shapes and all the related stuff."}
{"id": 676, "function": "ST_IsValidReason", "question": "找出有趣的gid和形状问题的情况，看看那些形状的构造是怎么回事。我们从一些数字范围中挑选出符合某些条件的点，然后围绕这些点画出圆圈并计算出一个数字。接着，我们从另一组范围中挑选点，围绕它们画出圆圈并进行一些移动来得到线条。最后，我们试着结合这些圆圈和线条来做一个外形复杂的多边形，只关注那些没通过形状检查的记录，按数字排序并只看前三个。", "sql": "SELECT gid, ST_IsValidReason(geom) as validity_info\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection[33 4]"], [5340, "Self-intersection[43 4]"], [5350, "Self-intersection[53 4]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3419, "question_en": "Find the interesting gid and shape problem cases, and see what's going on with those shapes. We select points from some number ranges that meet certain conditions, then draw circles around these points and calculate a number. Next, we pick points from another set of ranges, draw circles around them and do some moves to get lines. Finally, we try to combine these circles and lines to make a complex polygon, focusing only on records that didn't pass the shape check, sorted by number and looking at the top three."}
{"id": 681, "function": "DropGeometryTable", "question": "把那个叫my_spatial_table的表连同它的形状信息从my_schema里移走。", "sql": "SELECT DropGeometryTable ('my_schema','my_spatial_table');", "execution_result": [["my_schema.my_spatial_table dropped."]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3424, "question_en": "Take away that table called my_spatial_table along with its shape info from my_schema."}
{"id": 676, "function": "ST_IsValidReason", "question": "有个表格，里头有个叫gid的东西，还有个说几何对象geom怎么不对劲的信息。要搞这些几何对象，先拿x1*10和y1做个点，给它弄个z1大小的圈圈，变成个多边形e.buff；然后对同样的点再弄个圈圈，取外面那圈，往上移y1*1，往z方向移z1*2，变成条线f.line；最后，把e.buff的外圈和所有符合e.buff面积大于78且f.line在里面的线搞成一个大多边形geom。最后，只要前3个出错的，按gid排个序。", "sql": "SELECT gid, ST_IsValidReason(geom) as validity_info\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection[33 4]"], [5340, "Self-intersection[43 4]"], [5350, "Self-intersection[53 4]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3418, "question_en": "There's a table with something called gid and information about why the geometric object geom is off. To create these objects, first take a point from x1*10 and y1, make a circle with size z1, turning it into a polygon e.buff; then take the same point again, make another circle, take the outer part, move it up by y1*1, and in the z direction by z1*2, turning it into a line f.line; finally, combine the outer part of e.buff with all the lines that are inside and have an area bigger than 78 to make a big polygon geom. In the end, only the first 3 that are wrong, sorted by gid, are needed."}
{"id": 681, "function": "DropGeometryTable", "question": "把my_schema.my_spatial_table这个表从那些记录着地理形状信息的地方移除掉，并去掉它所有的形状描述。", "sql": "SELECT DropGeometryTable ('my_schema','my_spatial_table');", "execution_result": [["my_schema.my_spatial_table dropped."]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3425, "question_en": "Remove the table my_schema.my_spatial_table from where they keep records of geographic shapes, and get rid of all its shape descriptions."}
{"id": 686, "function": "postgis_srs_codes", "question": "找那些编号以 'EPSG' 开头的参考系统，把所有信息都列出来，但只要前面 10 个就好。", "sql": "SELECT * FROM postgis_srs_codes('EPSG') LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3427, "question_en": "Find those reference systems starting with 'EPSG', list all the details, but just the first 10 are needed."}
{"id": 686, "function": "postgis_srs_codes", "question": "找出前 10 条关于 EPSG 编码的空间参考系统的信息，看看这些记录都有什么编号、名字和描述吧。", "sql": "SELECT * FROM postgis_srs_codes('EPSG') LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3426, "question_en": "Find the first 10 pieces of information about EPSG-coded spatial reference systems and check what numbers, names, and descriptions these records have."}
{"id": 676, "function": "ST_IsValidReason", "question": "在quintuplet_experiment表中，找出一些编号和几何形状的奇怪问题，这些形状是由两个部分组成的：一个是从某些点扩展出来的大圈，另一个是从某些线条经过一点点移动后形成的小圈。在生成大圈时，考虑的点是x1范围在-4到6，y1范围在2到5，z1范围在1到8，条件是x1比y1的一半大，z1小于x1乘以y1。生成的小圈时，点的x1范围从-3到6，y1范围从2到5，z1范围从1到10，条件是x1比y1的四分之三大，z1小于x1乘以y1。最后筛选出大圈面积大于78且包含小圈的形状，并且形状是有问题的，按编号排序并限制为3个结果。", "sql": "SELECT gid, ST_IsValidReason(geom) as validity_info\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection[33 4]"], [5340, "Self-intersection[43 4]"], [5350, "Self-intersection[53 4]"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3416, "question_en": "In the table quintuplet_experiment, find some numbers and strange issues with shapes, which are composed of two parts: one is a big loop expanded from certain points, and the other is a small loop formed from certain lines after a little shift. When generating the big loop, consider points with x1 ranging from -4 to 6, y1 from 2 to 5, and z1 from 1 to 8, with the condition that x1 is bigger than half of y1, and z1 is less than x1 times y1. For the small loop generation, points range with x1 from -3 to 6, y1 from 2 to 5, and z1 from 1 to 10, with the condition that x1 is bigger than three-quarters of y1, and z1 is less than x1 times y1. Finally, filter out shapes where the big loop area is greater than 78 and contains the small loop, and the shape is problematic, ordered by number and limited to 3 results."}
{"id": 687, "function": "postgis_srs", "question": "能不能从postgis_srs表里找出那些跟3005这个数字有关的所有信息？", "sql": "SELECT * FROM postgis_srs('EPSG', '3005');", "execution_result": [[null, null, null, null, null, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3434, "question_en": "Can you find all the information related to the number 3005 from the postgis_srs table?"}
{"id": 686, "function": "postgis_srs_codes", "question": "能不能找一些以 EPSG 开头的空间参考代码，数量上限是 10 呢？", "sql": "SELECT * FROM postgis_srs_codes('EPSG') LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3430, "question_en": "Could you find some spatial reference codes starting with EPSG, with a limit of 10?"}
{"id": 687, "function": "postgis_srs", "question": "找出编号为3005的那个地方的所有详细资料。", "sql": "SELECT * FROM postgis_srs('EPSG', '3005');", "execution_result": [[null, null, null, null, null, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3432, "question_en": "Find all the detailed information about the place numbered 3005."}
{"id": 686, "function": "postgis_srs_codes", "question": "从那个有很多行的表中挑选出前10个以'EPSG'开头的行，看看它们的全部内容。", "sql": "SELECT * FROM postgis_srs_codes('EPSG') LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3428, "question_en": "Pick out the first 10 rows starting with 'EPSG' from that table with many rows and look at all their content."}
{"id": 687, "function": "postgis_srs", "question": "找出和代码3005相关的所有详细信息，从那个地方获取完整的参数表。", "sql": "SELECT * FROM postgis_srs('EPSG', '3005');", "execution_result": [[null, null, null, null, null, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3433, "question_en": "Find all the details related to code 3005, getting the full parameter table from that place."}
{"id": 686, "function": "postgis_srs_codes", "question": "能帮我找找看有哪些 EPSG 编号的空间参考系统？不过，我只想先看看头 10 个。", "sql": "SELECT * FROM postgis_srs_codes('EPSG') LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3431, "question_en": "Can you help me find what EPSG numbered spatial reference systems are available? But, I just want to see the first 10 for now."}
{"id": 686, "function": "postgis_srs_codes", "question": "从一个神秘的地方拿到关于 'EPSG' 的信息，只要前面十个就好，把所有细节都带回来。", "sql": "SELECT * FROM postgis_srs_codes('EPSG') LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3429, "question_en": "Get information about 'EPSG' from a mysterious place, just the first ten, and bring back all the details."}
{"id": 688, "function": "postgis_srs_all", "question": "看看那个表里最前面的10行，它们有名字、编号和描述。", "sql": "SELECT auth_name, auth_srid, srname FROM postgis_srs_all() LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3439, "question_en": "Take a look at the first 10 rows in that table, they have names, numbers, and descriptions."}
{"id": 687, "function": "postgis_srs", "question": "找出记录里面那些和EPSG有关的，特别是3005的号码，看能看到什么信息。", "sql": "SELECT * FROM postgis_srs('EPSG', '3005');", "execution_result": [[null, null, null, null, null, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3437, "question_en": "Find those records related to EPSG, especially with the number 3005, and see what information is available."}
{"id": 687, "function": "postgis_srs", "question": "从postgis_srs表中找出编号为'EPSG:3005'的那个坐标系统的所有小细节。", "sql": "SELECT * FROM postgis_srs('EPSG', '3005');", "execution_result": [[null, null, null, null, null, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3435, "question_en": "Find all the little details of the coordinate system numbered 'EPSG:3005' from the postgis_srs table."}
{"id": 687, "function": "postgis_srs", "question": "能不能找出那个编号是3005的空间参考系统的全部情况，比如它叫什么，基准是什么，椭球长什么样，还有它是怎么投影的？", "sql": "SELECT * FROM postgis_srs('EPSG', '3005');", "execution_result": [[null, null, null, null, null, null, null]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3436, "question_en": "Could you find out all the details about the spatial reference system with the number 3005, like what's it called, what's the datum, what the ellipsoid looks like, and how it projects?"}
{"id": 688, "function": "postgis_srs_all", "question": "在那个存着许多空间信息的表里，找出最前面的10条，把每条的权威名字、编号，还有系统名字都一并列出来。", "sql": "SELECT auth_name, auth_srid, srname FROM postgis_srs_all() LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3443, "question_en": "In that table full of spatial info, find the first 10 entries and list out each one's authority name, number, and system name all together."}
{"id": 688, "function": "postgis_srs_all", "question": "查找所有的空间参考信息，只要前面10个，看看它们的标准名字、标识符和正式称呼是什么。", "sql": "SELECT auth_name, auth_srid, srname FROM postgis_srs_all() LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3442, "question_en": "Look up all the spatial reference info, just the first 10, and see what their standard names, identifiers, and formal titles are."}
{"id": 688, "function": "postgis_srs_all", "question": "找出一个函数给出的前10个结果，看看它们的名字、编号和系统名称是啥。", "sql": "SELECT auth_name, auth_srid, srname FROM postgis_srs_all() LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3438, "question_en": "Find the first 10 results from a function and see what their names, numbers, and system names are."}
{"id": 688, "function": "postgis_srs_all", "question": "能不能给我看看那个表的前面几行，包含谁说的、编号是多少，还有叫什么名字？", "sql": "SELECT auth_name, auth_srid, srname FROM postgis_srs_all() LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3440, "question_en": "Could you show me the first few rows of that table, including who said it, what the number is, and what it's called?"}
{"id": 688, "function": "postgis_srs_all", "question": "从那些提供位置参考的表里，找出最前面的十个记录，它们的来源名字、编号，还有叫什么名字呢？", "sql": "SELECT auth_name, auth_srid, srname FROM postgis_srs_all() LIMIT 10;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3441, "question_en": "From those tables that provide location references, find the first ten records, including their source names, numbers, and what they're called."}
{"id": 675, "function": "ST_IsValidDetail", "question": "根据一些规则生成图形并找出问题的地方。比如，有一个表用一些范围内的数字组合成点，然后围绕它画一个半径是这些数字的圆；另一个表也用数字生成线条，稍微挪动一下位置。然后看这些圆是不是够大，而且能不能把那些线圈起来，再用它们做成多边形。最后找出不正常的多边形，看看它们为什么不对，并列出坐标，按编号排个前3名。", "sql": "SELECT gid, reason(ST_IsValidDetail(geom)), ST_AsText(location(ST_IsValidDetail(geom))) as location\nFROM\n(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), array_agg(f.line)) As geom, gid\nFROM (SELECT ST_Buffer(ST_Point(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid\n        FROM generate_series(-4,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,8) z1\n        WHERE x1 \n> y1*0.5 AND z1 < x1*y1) As e\n        INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_Point(x1*10,y1), z1)),y1*1, z1*2) As line\n        FROM generate_series(-3,6) x1\n        CROSS JOIN generate_series(2,5) y1\n        CROSS JOIN generate_series(1,10) z1\n        WHERE x1 \n> y1*0.75 AND z1 < x1*y1) As f\nON (ST_Area(e.buff) \n> 78 AND ST_Contains(e.buff, f.line))\nGROUP BY gid, e.buff) As quintuplet_experiment\nWHERE ST_IsValid(geom) = false\nORDER BY gid\nLIMIT 3;", "execution_result": [[5330, "Self-intersection", "POINT(33 4)"], [5340, "Self-intersection", "POINT(43 4)"], [5350, "Self-intersection", "POINT(53 4)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3410, "question_en": "Create some shapes based on certain rules and figure out where the issues are. For example, one table uses numbers within certain ranges to form points and draws circles around them with a radius matching these numbers; another table also uses numbers to generate lines and shifts their positions slightly. Then check if the circles are big enough and if they can enclose those lines, and use them to make polygons. Finally, identify abnormal polygons, find out why they are incorrect, and list the coordinates, sorting the top 3 by their IDs."}
{"id": 689, "function": "postgis_srs_search", "question": "找出三个和某种坐标系有关的记录，这些记录要和一个特别的线段有关，这个线段就是从-90 30到-91 31。还需要显示一些名称和编号，以及一个形状的两个角的坐标。", "sql": "SELECT auth_name, auth_srid, srname,\n  ST_AsText(point_sw) AS point_sw,\n  ST_AsText(point_ne) AS point_ne\nFROM postgis_srs_search('SRID=4326;LINESTRING(-90 30, -91 31)')\nLIMIT 3;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3445, "question_en": "Identify three records related to a certain coordinate system, which need to be connected to a specific line segment, that line is from -90 30 to -91 31. Also, show some names and numbers, as well as the coordinates of two corners of a shape."}
{"id": 689, "function": "postgis_srs_search", "question": "怎么用那个有两点坐标的线，像POINT(-90 30)和POINT(-91 31)，找出有关空间参考的东西呢？记得只要前三个结果，还要看看每个结果的西南角和东北角的那些点长得什么样子。", "sql": "SELECT auth_name, auth_srid, srname,\n  ST_AsText(point_sw) AS point_sw,\n  ST_AsText(point_ne) AS point_ne\nFROM postgis_srs_search('SRID=4326;LINESTRING(-90 30, -91 31)')\nLIMIT 3;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3448, "question_en": "How can you use that line with two points, like POINT(-90 30) and POINT(-91 31), to find something about spatial reference? Remember to only get the first three results, and take a look at what the southwest and northeast corner points of each result look like."}
{"id": 689, "function": "postgis_srs_search", "question": "想知道用一个特别的线条，由两个点组成：一个在(-90, 30)，另一个在(-91, 31)，通过某种方式查找前三项，看看它们的名字、编号、参考名称，以及它们的两个角落的样子。", "sql": "SELECT auth_name, auth_srid, srname,\n  ST_AsText(point_sw) AS point_sw,\n  ST_AsText(point_ne) AS point_ne\nFROM postgis_srs_search('SRID=4326;LINESTRING(-90 30, -91 31)')\nLIMIT 3;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3447, "question_en": "Curious to find out, using a special line made of two points: one at (-90, 30) and the other at (-91, 31), somehow look up the first three entries, and see their names, numbers, reference names, and what their two corners look like."}
{"id": 689, "function": "postgis_srs_search", "question": "找出那些系统，它们包括一条从(-90, 30)到(-91, 31)的线，编号是4326，看看前三个的名字、编号、系统名，还有西南和东北角的那些坐标点长什么样子。", "sql": "SELECT auth_name, auth_srid, srname,\n  ST_AsText(point_sw) AS point_sw,\n  ST_AsText(point_ne) AS point_ne\nFROM postgis_srs_search('SRID=4326;LINESTRING(-90 30, -91 31)')\nLIMIT 3;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3444, "question_en": "Find those systems that include a line from (-90, 30) to (-91, 31), numbered 4326, and check the names, numbers, system names of the top three, along with what the southwest and northeast corner coordinates look like."}
{"id": 689, "function": "postgis_srs_search", "question": "有一条线从小点(-90 30)到(-91 31)，在某个4326的系统里，能不能找出最多三条信息？我想知道它们的名字、编号，还有两个角落的小点坐标。", "sql": "SELECT auth_name, auth_srid, srname,\n  ST_AsText(point_sw) AS point_sw,\n  ST_AsText(point_ne) AS point_ne\nFROM postgis_srs_search('SRID=4326;LINESTRING(-90 30, -91 31)')\nLIMIT 3;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3449, "question_en": "There's a line from little point (-90 30) to (-91 31) in some 4326 system, can you find up to three pieces of information? I'd like to know their names, numbers, and the coordinates of two corner points."}
{"id": 691, "function": "&&", "question": "在一个表里有几条线，像从(0 0)到(3 3)这样，还有从(0 1)到(0 5)的。另一个表里有条线从(1 2)到(4 6)。看看这些线之间有没有交集吧。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 && tbl2.column2 AS overlaps\nFROM ( VALUES\n        (1, 'LINESTRING(0 0, 3 3)'::geometry),\n        (2, 'LINESTRING(0 1, 0 5)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true], [2, 3, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3453, "question_en": "In one table, there are some lines, like one from (0 0) to (3 3), and another from (0 1) to (0 5). In another table, there's a line from (1 2) to (4 6). See if these lines overlap."}
{"id": 691, "function": "&&", "question": "给出表1和表2的第一列的内容，还有看看表1的第二列里那些坐标线（比如从(0,0)到(3,3)，还有从(0,1)到(0,5)）会不会和表2的第二列里的坐标线（从(1,2)到(4,6)）碰到一起，结果叫做overlaps。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 && tbl2.column2 AS overlaps\nFROM ( VALUES\n        (1, 'LINESTRING(0 0, 3 3)'::geometry),\n        (2, 'LINESTRING(0 1, 0 5)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true], [2, 3, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3450, "question_en": "Provide the contents of the first column from table 1 and table 2, and see if the lines in the second column of table 1 (like from (0,0) to (3,3), and from (0,1) to (0,5)) might bump into the line in the second column of table 2 (from (1,2) to (4,6)), the result is called overlaps."}
{"id": 691, "function": "&&", "question": "找出两个表中那些弯弯的线条，特别是包含了ID1和ID2的线，还有ID3的那条线，然后看看它们有没有交叉的地方，用一个叫overlaps的名字记录下来。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 && tbl2.column2 AS overlaps\nFROM ( VALUES\n        (1, 'LINESTRING(0 0, 3 3)'::geometry),\n        (2, 'LINESTRING(0 1, 0 5)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true], [2, 3, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3452, "question_en": "Find those wavy lines in two tables, especially the ones including IDs 1 and 2, and the line with ID 3, then check if they have any crossing points, and record it under the name overlaps."}
{"id": 691, "function": "&&", "question": "有几条线从某个地方出发，比如从(0 0)到(3 3)，还有其他地方像(0 1)到(0 5)，再有(1 2)到(4 6)的那种。把这些线放在两个临时存储地里，看看它们是不是在空间上有交集。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 && tbl2.column2 AS overlaps\nFROM ( VALUES\n        (1, 'LINESTRING(0 0, 3 3)'::geometry),\n        (2, 'LINESTRING(0 1, 0 5)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true], [2, 3, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3454, "question_en": "There are some lines starting from certain places, like from (0 0) to (3 3), and other places like (0 1) to (0 5), and then (1 2) to (4 6). Put these lines in two temporary storage spots and see if they have spatial intersections."}
{"id": 689, "function": "postgis_srs_search", "question": "找出3个和某个特定线有关的空间参考信息，包括一些名字和编号，并且把那两个点的描述变成一种文本格式。这个线是从-90 30到-91 31的，基于4326的编号。", "sql": "SELECT auth_name, auth_srid, srname,\n  ST_AsText(point_sw) AS point_sw,\n  ST_AsText(point_ne) AS point_ne\nFROM postgis_srs_search('SRID=4326;LINESTRING(-90 30, -91 31)')\nLIMIT 3;", "execution_result": [], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3446, "question_en": "Find 3 pieces of spatial reference info related to a specific line, including some names and numbers, and turn those two points into a text format. This line goes from -90 30 to -91 31, based on the number 4326."}
{"id": 691, "function": "&&", "question": "给我一个表，里面有三列，前两列分别展示一些数字：第一个地方是1和2，第二个地方是3。然后有个奇妙的比较，看看第一个地方的那些线，像是从(0 0)到(3 3)，还有从(0 1)到(0 5)的，和第二个地方那条从(1 2)到(4 6)的线有没有交集，结果叫做overlaps。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 && tbl2.column2 AS overlaps\nFROM ( VALUES\n        (1, 'LINESTRING(0 0, 3 3)'::geometry),\n        (2, 'LINESTRING(0 1, 0 5)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true], [2, 3, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3451, "question_en": "Give me a table with three columns, where the first two show some numbers: the first spot has 1 and 2, the second spot has 3. Then there's a curious comparison to see if the lines from the first spot, like from (0 0) to (3 3) and from (0 1) to (0 5), intersect with the line from the second spot, which goes from (1 2) to (4 6), and the result is called overlaps."}
{"id": 691, "function": "&&", "question": "有两个集合，分别有些线段。一个集合有两条线，从(0 0)到(3 3)，还有从(0 1)到(0 5)；另一个集合有一条线，从(1 2)到(4 6)。需要看看第一组里的每条线段和第二组的线段在边框上有没有交集。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 && tbl2.column2 AS overlaps\nFROM ( VALUES\n        (1, 'LINESTRING(0 0, 3 3)'::geometry),\n        (2, 'LINESTRING(0 1, 0 5)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true], [2, 3, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3455, "question_en": "There are two sets, each with some lines. One set has two lines, from (0 0) to (3 3), and from (0 1) to (0 5); the other set has one line, from (1 2) to (4 6). Need to see if each line in the first group has any overlap on the edge with the line in the second group."}
{"id": 692, "function": "&&&", "question": "你能说说tbl1和tbl2里面那些线段的第一列值，还有它们在三维和二维空间里是不是有点交错吗？tbl1有两条线，像(0 0 1, 3 3 2)和(1 2 0, 0 5 -1)，tbl2有一个线段(1 2 1, 4 6 1)。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3d,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING Z(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING Z(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING Z(1 2 1, 4 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3456, "question_en": "Can you talk about the first column values in tbl1 and tbl2, and whether their lines are sort of tangled in 3D and 2D spaces? tbl1 has two lines like (0 0 1, 3 3 2) and (1 2 0, 0 5 -1), tbl2 has one line segment (1 2 1, 4 6 1)."}
{"id": 693, "function": "&&&", "question": "给我看看表tbl1和tbl2的第一个数据，还有tbl1和tbl2里面那些带M值的线，有没有在三维和二维上互相叠在一起。tbl1有两条线，像是(0 0 1, 3 3 2)和(1 2 0, 0 5 -1)，而tbl2有一条线，像是(1 2 1, 4 6 1)。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3zm,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING M(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING M(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING M(1 2 1, 4 6 1)'::geometry)) AS tbl2;\n", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3462, "question_en": "Show me the first piece of data from tbl1 and tbl2, and whether those M-value lines in tbl1 and tbl2 overlap in 3D and 2D. tbl1 has two lines, something like (0 0 1, 3 3 2) and (1 2 0, 0 5 -1), while tbl2 has one line, something like (1 2 1, 4 6 1)."}
{"id": 692, "function": "&&&", "question": "看看表格里那些编号的线段，特别是那些在空间里延伸的长条，像是(0 0 1, 3 3 2)和(1 2 0, 0 5 -1)这样的，还有另外一个是(1 2 1, 4 6 1)。你能告诉我它们在高低和平面上有没有交错吗？", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3d,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING Z(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING Z(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING Z(1 2 1, 4 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3457, "question_en": "Take a look at the lines with numbers in the tables, especially those stretching in space, like (0 0 1, 3 3 2) and (1 2 0, 0 5 -1), and there's another one (1 2 1, 4 6 1). Can you tell me if they intersect both in height and on the flat surface?"}
{"id": 692, "function": "&&&", "question": "想象有两个小本本，里面记录了一些三维的线状东西。第一个本子有两条记录，像是从(0,0,1)到(3,3,2)，还有从(1,2,0)到(0,5,-1)的路径。第二本子只有一条记录，从(1,2,1)到(4,6,1)。看看这些路径在立体和平面上的关系吧。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3d,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING Z(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING Z(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING Z(1 2 1, 4 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3460, "question_en": "Imagine there are two little notebooks recording some 3D line-like things. The first notebook has two entries, like a path from (0,0,1) to (3,3,2), and another from (1,2,0) to (0,5,-1). The second notebook has only one entry, from (1,2,1) to (4,6,1). Check out the relationships of these paths in both 3D and 2D."}
{"id": 694, "function": "&<", "question": "看看表tbl1和tbl2的column1里的数，然后查查表tbl1里的那条从(1, 2)到(4, 6)的小线是不是在表tbl2里每条线的左边，结果叫overleft。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &< tbl2.column2 AS overleft\nFROM\n  ( VALUES\n        (1, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(6 0, 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3468, "question_en": "Check the numbers in column1 of tables tbl1 and tbl2, then see if the little line from (1, 2) to (4, 6) in tbl1 is to the left of each line in tbl2, with the result called overleft."}
{"id": 693, "function": "&&&", "question": "找出每条记录的某个数值和一个固定的数字3，还有关于那些线的重叠情况，特别是看三维有M值和二维的重叠，这些线有像LINESTRING M(0 0 1, 3 3 2)、LINESTRING M(1 2 0, 0 5 -1)和LINESTRING M(1 2 1, 4 6 1)这样的坐标。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3zm,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING M(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING M(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING M(1 2 1, 4 6 1)'::geometry)) AS tbl2;\n", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3464, "question_en": "Identify a certain value from each record and a fixed number 3, along with the overlap situation of those lines, especially checking the 3D with M value and 2D overlaps. These lines have coordinates like LINESTRING M(0 0 1, 3 3 2), LINESTRING M(1 2 0, 0 5 -1), and LINESTRING M(1 2 1, 4 6 1)."}
{"id": 692, "function": "&&&", "question": "有一个临时表里有两条线，分别从(0,0,1)到(3,3,2)和(1,2,0)到(0,5,-1)，另一个表里有一条线从(1,2,1)到(4,6,1)。想看看它们在空间里或者平面上有没有交叠。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3d,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING Z(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING Z(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING Z(1 2 1, 4 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3459, "question_en": "There’s a temporary table with two lines, one from (0,0,1) to (3,3,2), and the other from (1,2,0) to (0,5,-1). Another table has a line from (1,2,1) to (4,6,1). Check if they overlap in space or on a plane."}
{"id": 693, "function": "&&&", "question": "想象一个表，先列出来自tbl1的一些数值，比如1或者2，然后从tbl2拿出一个3。接着，看看那些奇妙的线条，像是(0 0 1, 3 3 2)和(1 2 0, 0 5 -1)之间，或者(1 2 1, 4 6 1)之间，在不同维度下是如何重叠的。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3zm,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING M(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING M(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING M(1 2 1, 4 6 1)'::geometry)) AS tbl2;\n", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3463, "question_en": "Imagine a table, first listing some values like 1 or 2 from tbl1, then taking a 3 from tbl2. Next, look at those fascinating lines, like between (0 0 1, 3 3 2) and (1 2 0, 0 5 -1), or (1 2 1, 4 6 1), and see how they overlap in different dimensions."}
{"id": 692, "function": "&&&", "question": "请列出一些数字和线条的交集情况：像tbl1的第一条记录有个数值1，tbl2有个数值3，还有那些从0 0 1到3 3 2的线段与1 2 1到4 6 1的线段在不同空间中的交集情况；然后，还有tbl1第二条记录的数值2，tbl2同样的数值3，以及从1 2 0到0 5 -1的线段与1 2 1到4 6 1的线段在不同空间中的交集情况。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3d,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING Z(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING Z(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING Z(1 2 1, 4 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3458, "question_en": "Please list some numbers and intersection situations of lines: like tbl1's first record has a number 1, tbl2 has a number 3, and those line segments from 0 0 1 to 3 3 2 intersecting with 1 2 1 to 4 6 1 in different spaces; then, tbl1's second record has a number 2, tbl2 has the same number 3, and the intersection situation of lines from 1 2 0 to 0 5 -1 with 1 2 1 to 4 6 1 in different spaces."}
{"id": 694, "function": "&<", "question": "你能给我一个表吗？第一列是tbl1里的某个值1，第二列是tbl2里某个值（2、3或4），第三列是看一下那条从(1, 2)到(4, 6)的小线是不是都在tbl2那些线段左边的答案，结果叫做overleft。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &< tbl2.column2 AS overleft\nFROM\n  ( VALUES\n        (1, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(6 0, 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3470, "question_en": "Can you give me a table? The first column is some value 1 from tbl1, the second column is some value (2, 3, or 4) from tbl2, and the third column checks if that little line from (1, 2) to (4, 6) is entirely to the left of those line segments in tbl2, with the result called overleft."}
{"id": 693, "function": "&&&", "question": "想象一下有三条带有额外数字的小线段：第一条从(0,0)到(3,3)，第二条从(1,2)到(0,5)，第三条从(1,2)到(4,6)，这些线段都有自己独特的数字标记。我们需要看看前两条线段是否与第三条在某种立体和平面空间里发生了某种交集。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3zm,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING M(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING M(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING M(1 2 1, 4 6 1)'::geometry)) AS tbl2;\n", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3466, "question_en": "Imagine three little lines with extra numbers: the first goes from (0,0) to (3,3), the second from (1,2) to (0,5), and the third from (1,2) to (4,6), each having its own special number tag. We need to see if the first two lines have some kind of overlap with the third one in a certain 3D and flat space."}
{"id": 693, "function": "&&&", "question": "在一个地方有两条线，第一条从(0,0)到(3,3)有一些M值变化，第二条从(1,2)到(0,5)也有不同的M值。另一个地方有一条线从(1,2)到(4,6)保持相同的M值。想看看这些线在某种3D和2D方式上是如何交错的。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3zm,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING M(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING M(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING M(1 2 1, 4 6 1)'::geometry)) AS tbl2;\n", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3465, "question_en": "In one place, there are two lines, the first going from (0,0) to (3,3) with some changes in M-values, and the second from (1,2) to (0,5) also having different M-values. In another place, there is a line going from (1,2) to (4,6) with the same M-value. We want to see how these lines overlap in some kind of 3D and 2D way."}
{"id": 692, "function": "&&&", "question": "做个小试验，看看这些3D和2D的线段在空间和平面上有没有交集：有一组线段从(0,0,1)延伸到(3,3,2)，还有从(1,2,0)到(0,5,-1)；另一组是从(1,2,1)到(4,6,1)。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3d,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING Z(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING Z(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING Z(1 2 1, 4 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3461, "question_en": "Try a little experiment to see if these 3D and 2D lines have any overlap in space and on a plane: there's one group of lines stretching from (0,0,1) to (3,3,2), and from (1,2,0) to (0,5,-1); another group goes from (1,2,1) to (4,6,1)."}
{"id": 693, "function": "&&&", "question": "想象一下有三条线，第一条从(0,0,1)到(3,3,2)，第二条从(1,2,0)到(0,5,-1)，第三条从(1,2,1)到(4,6,1)。有没有办法看看这些线在有点复杂的三维空间和普通的二维平面中会不会碰到？", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &&& tbl2.column2 AS overlaps_3zm,\n                                    tbl1.column2 && tbl2.column2 AS overlaps_2d\nFROM ( VALUES\n        (1, 'LINESTRING M(0 0 1, 3 3 2)'::geometry),\n        (2, 'LINESTRING M(1 2 0, 0 5 -1)'::geometry)) AS tbl1,\n( VALUES\n        (3, 'LINESTRING M(1 2 1, 4 6 1)'::geometry)) AS tbl2;\n", "execution_result": [[1, 3, true, true], [2, 3, false, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3467, "question_en": "Imagine three lines: the first one goes from (0,0,1) to (3,3,2), the second from (1,2,0) to (0,5,-1), and the third from (1,2,1) to (4,6,1). Is there a way to see if these lines bump into each other in both a somewhat complex 3D space and a regular 2D plane?"}
{"id": 694, "function": "&<", "question": "弄两个表，第一表有一条从(1,2)到(4,6)的线，第二表有三条线，从(0,0)到(3,3)，从(0,1)到(0,5)，还有从(6,0)到(6,1)。看看第一表的线是不是在第二表那些线的左边。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &< tbl2.column2 AS overleft\nFROM\n  ( VALUES\n        (1, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(6 0, 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3473, "question_en": "Set up two tables, the first has a line from (1,2) to (4,6), and the second has three lines, from (0,0) to (3,3), from (0,1) to (0,5), and from (6,0) to (6,1). Check if the line in the first table is on the left side of those lines in the second table."}
{"id": 694, "function": "&<", "question": "在表1中放一个编号为1的条目，它有个从(1, 2)到(4, 6)的线条；然后在表2中放三个条目，包含从(0, 0)到(3, 3)，从(0, 1)到(0, 5)，以及从(6, 0)到(6, 1)的线条，看看表1的线条是不是在表2的线条左边。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &< tbl2.column2 AS overleft\nFROM\n  ( VALUES\n        (1, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(6 0, 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3471, "question_en": "In table 1, put an entry labeled 1 with a line from (1, 2) to (4, 6); then put three entries in table 2 with lines from (0, 0) to (3, 3), from (0, 1) to (0, 5), and from (6, 0) to (6, 1), and see if the line in table 1 is to the left of the lines in table 2."}
{"id": 694, "function": "&<", "question": "想象一个地方有几条线，像从点(1,2)拉到点(4,6)那样，然后有几根从点(0,0)到点(3,3)、点(0,1)到点(0,5)和点(6,0)到点(6,1)的线。看看第一个地方的线是不是在第二个地方线的左边。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &< tbl2.column2 AS overleft\nFROM\n  ( VALUES\n        (1, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(6 0, 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3472, "question_en": "Imagine there's a place with lines like from point (1,2) to point (4,6), and then there are lines stretching from point (0,0) to point (3,3), point (0,1) to point (0,5), and point (6,0) to point (6,1). Check if the line from the first place is on the left side of the lines from the second place."}
{"id": 695, "function": "&<|", "question": "给我一个表格，里面有一个数字1，几个数字2、3、4，还有看看那条从6到0再到4的竖线是不是在几条斜线下面，斜线从(0, 0)到(3, 3)，从(0, 1)到(0, 5)，还有从(1, 2)到(4, 6)。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &<| tbl2.column2 AS overbelow\nFROM\n  ( VALUES\n        (1, 'LINESTRING(6 0, 6 4)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3476, "question_en": "Give me a table with the number 1, some numbers 2, 3, 4, and check if the vertical line from 6 to 0 and then to 4 is below some diagonal lines, going from (0, 0) to (3, 3), from (0, 1) to (0, 5), and from (1, 2) to (4, 6)."}
{"id": 695, "function": "&<|", "question": "在表格tbl1中有一条线段，它是从(6 0)到(6 4)的。表格tbl2有三条线段：一条从(0 0)到(3 3)，一条从(0 1)到(0 5)，还有一条从(1 2)到(4 6)。看看表格tbl1的线段是不是在表格tbl2的那些线段下面或者左边。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &<| tbl2.column2 AS overbelow\nFROM\n  ( VALUES\n        (1, 'LINESTRING(6 0, 6 4)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3477, "question_en": "In table tbl1, there's a line segment going from (6 0) to (6 4). Table tbl2 has three segments: one from (0 0) to (3 3), another from (0 1) to (0 5), and the last from (1 2) to (4 6). Check if the line in tbl1 is below or to the left of those in tbl2."}
{"id": 695, "function": "&<|", "question": "有个表tbl1，它里面有一个竖着的线段，从(6,0)到(6,4)；还有另一个表tbl2，里面有三条不一样的线，从(0,0)到(3,3)，从(0,1)到(0,5)，还有从(1,2)到(4,6)。看看tbl1里的竖线是不是在tbl2那些线的左边或下面。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &<| tbl2.column2 AS overbelow\nFROM\n  ( VALUES\n        (1, 'LINESTRING(6 0, 6 4)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3478, "question_en": "There's a table tbl1 with a vertical line from (6,0) to (6,4); and another table tbl2 with three different lines, one from (0,0) to (3,3), another from (0,1) to (0,5), and another from (1,2) to (4,6). Check if the vertical line in tbl1 is to the left or below those lines in tbl2."}
{"id": 694, "function": "&<", "question": "看看tbl1里ID为1的那条线(1 2到4 6)和tbl2里那三条线(0 0到3 3、0 1到0 5、6 0到6 1)之间的左右关系，结果用三个部分表示：tbl1的某列、tbl2的某列，还有个判断左右的值。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &< tbl2.column2 AS overleft\nFROM\n  ( VALUES\n        (1, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(6 0, 6 1)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3469, "question_en": "Check the left-right relationship between the line with ID 1 in tbl1 (from 1 2 to 4 6) and those three lines in tbl2 (from 0 0 to 3 3, from 0 1 to 0 5, from 6 0 to 6 1), and show the result in three parts: a certain column from tbl1, a certain column from tbl2, and a value that judges left or right."}
{"id": 696, "function": "<<", "question": "看看表tbl1的column1和表tbl2的column1里有什么，然后想象一下表tbl1里的那条从(1 2)到(1 5)的小线，是不是总在表tbl2那些从(0 0)到(4 3)、(6 0)到(6 5)、(2 2)到(5 6)的小线的左边？", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 << tbl2.column2 AS left\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 2, 1 5)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 3)'::geometry),\n        (3, 'LINESTRING (6 0, 6 5)'::geometry),\n        (4, 'LINESTRING (2 2, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3480, "question_en": "Check what's in column1 of table tbl1 and tbl2, then imagine the little line in tbl1 from (1 2) to (1 5), is it always on the left of those lines in tbl2 from (0 0) to (4 3), (6 0) to (6 5), (2 2) to (5 6)?"}
{"id": 696, "function": "<<", "question": "找出一组信息：第一个总是1，第二个轮流是2、3、4，第三个是看竖着的线从(1 2)到(1 5)是不是一直在那些其他的斜斜竖竖线的左边。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 << tbl2.column2 AS left\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 2, 1 5)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 3)'::geometry),\n        (3, 'LINESTRING (6 0, 6 5)'::geometry),\n        (4, 'LINESTRING (2 2, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3482, "question_en": "Find a set of information: the first is always 1, the second takes turns being 2, 3, 4, and the third checks if the vertical line from (1 2) to (1 5) is consistently to the left of those other slanting and vertical lines."}
{"id": 695, "function": "&<|", "question": "给出三列内容：第一个是tbl1里面的数字1，第二个是tbl2里面的数字(2/3/4)，第三个是看看那些坐标(6 0, 6 4)是不是在每条线段的下方。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &<| tbl2.column2 AS overbelow\nFROM\n  ( VALUES\n        (1, 'LINESTRING(6 0, 6 4)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3475, "question_en": "Provide three columns: the first is the number 1 from tbl1, the second is the number (2/3/4) from tbl2, and the third is to check if those coordinates (6 0, 6 4) are below each line segment."}
{"id": 696, "function": "<<", "question": "把结果分成三列，第一列是临时表tbl1里一个叫column1的值1，第二列是临时表tbl2里几个值(2,3,4)，第三列问一下LINESTRING(1 2, 1 5)是不是在tbl2那些线段左边，用一个对或错的方式表示出来。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 << tbl2.column2 AS left\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 2, 1 5)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 3)'::geometry),\n        (3, 'LINESTRING (6 0, 6 5)'::geometry),\n        (4, 'LINESTRING (2 2, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3481, "question_en": "Split the result into three columns: the first column is a value 1 from something called column1 in temp table tbl1, the second column has a few values (2,3,4) from temp table tbl2, and the third column asks whether LINESTRING(1 2, 1 5) is on the left side of those lines in tbl2, shown as true or false."}
{"id": 696, "function": "<<", "question": "在一个表里有一条线，从(1 2)到(1 5)；另一个表里有三条线，分别从(0 0)到(4 3)、(6 0)到(6 5)、(2 2)到(5 6)。查查每个表里的某个信息，看看第一条线是不是在其他线的左边。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 << tbl2.column2 AS left\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 2, 1 5)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 3)'::geometry),\n        (3, 'LINESTRING (6 0, 6 5)'::geometry),\n        (4, 'LINESTRING (2 2, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3483, "question_en": "In one table, there's a line going from (1 2) to (1 5); in another table, there are three lines, from (0 0) to (4 3), (6 0) to (6 5), and (2 2) to (5 6) respectively. Check some info in each table and see if the first line is to the left of the others."}
{"id": 696, "function": "<<", "question": "看看tbl1里面有个从(1 2)到(1 5)的线段，还有tbl2有三个从(0 0)到(4 3)、(6 0)到(6 5)、(2 2)到(5 6)的小线段。能不能查一下它们的column1，看tbl1的线是不是在tbl2每根线的左边？", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 << tbl2.column2 AS left\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 2, 1 5)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 3)'::geometry),\n        (3, 'LINESTRING (6 0, 6 5)'::geometry),\n        (4, 'LINESTRING (2 2, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3485, "question_en": "There's a line in tbl1 going from (1 2) to (1 5), and tbl2 has three little lines going from (0 0) to (4 3), (6 0) to (6 5), and (2 2) to (5 6). Could you check their column1 fields to see if the line in tbl1 is to the left of each line in tbl2?"}
{"id": 695, "function": "&<|", "question": "看看在tbl1里面有一根竖着的线，它的x是6，y从0到4。在tbl2里有三根线：一根从(0 0)到(3 3)斜着的，一根竖着的从(0 1)到(0 5)，还有一根从(1 2)到(4 6)斜着的。你能不能找出tbl1的那根线是不是在tbl2里的每一根线的左边或下边呢？", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &<| tbl2.column2 AS overbelow\nFROM\n  ( VALUES\n        (1, 'LINESTRING(6 0, 6 4)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3479, "question_en": "Take a look at the vertical line in tbl1, where x is 6 and y goes from 0 to 4. In tbl2, there are three lines: one slanted from (0 0) to (3 3), a vertical one from (0 1) to (0 5), and another slanted from (1 2) to (4 6). Can you figure out if the line in tbl1 is to the left or below each line in tbl2?"}
{"id": 695, "function": "&<|", "question": "看看表tbl1里的那条从6到0再到6到4的线和表tbl2里三条线段（0到0到3到3，0到1到0到5，1到2到4到6）之间有没有什么上下关系，结果要有三个部分：tbl1的某个东西，tbl2的某个东西，还有个叫overbelow的。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 &<| tbl2.column2 AS overbelow\nFROM\n  ( VALUES\n        (1, 'LINESTRING(6 0, 6 4)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING(0 0, 3 3)'::geometry),\n        (3, 'LINESTRING(0 1, 0 5)'::geometry),\n        (4, 'LINESTRING(1 2, 4 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3474, "question_en": "Check if there’s any kind of up-down relationship between the line from 6 to 0 to 6 to 4 in table tbl1 and the three segments (0 to 0 to 3 to 3, 0 to 1 to 0 to 5, 1 to 2 to 4 to 6) in table tbl2, with results having three parts: something from tbl1, something from tbl2, and something called overbelow."}
{"id": 696, "function": "<<", "question": "在一个地方有一个从(1 2)到(1 5)的小线段，另一个地方有三条线段：从(0 0)到(4 3)，从(6 0)到(6 5)，从(2 2)到(5 6)。你需要找出每对线段左侧的小秘密，并展示它们的某个编号。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 << tbl2.column2 AS left\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 2, 1 5)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 3)'::geometry),\n        (3, 'LINESTRING (6 0, 6 5)'::geometry),\n        (4, 'LINESTRING (2 2, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3484, "question_en": "There's a small line from (1 2) to (1 5) in one place, and three lines in another: from (0 0) to (4 3), from (6 0) to (6 5), from (2 2) to (5 6). You need to find out the little secret on the left side of each line pair and show some kind of number for them."}
{"id": 697, "function": "<<|", "question": "你需要找到三种信息：一个是数字1，另一个是数字2/3/4，最后一个是判断那条从(0 0)到(4 3)的线是不是完全在那些从(1 4)到(1 7)，(6 1)到(6 5)，和(2 3)到(5 6)的线的下面。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 <<| tbl2.column2 AS below\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 4 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (1 4, 1 7)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3488, "question_en": "You need to find three pieces of information: one is the number 1, another is the number 2/3/4, and the last is to determine if that line from (0 0) to (4 3) is entirely below those lines from (1 4) to (1 7), (6 1) to (6 5), and (2 3) to (5 6)."}
{"id": 697, "function": "<<|", "question": "看看这些编号：tbl1中是1，tbl2中是2、3、4，还有那些画出来的线，比如从(0 0)到(4 3)，然后从(1 4)到(1 7)，从(6 1)到(6 5)，从(2 3)到(5 6)。你能告诉我第一个线是不是总在其他线下面吗？", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 <<| tbl2.column2 AS below\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 4 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (1 4, 1 7)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3487, "question_en": "Check out these numbers: 1 in tbl1, and 2, 3, 4 in tbl2, along with those drawn lines like from (0 0) to (4 3), then from (1 4) to (1 7), from (6 1) to (6 5), from (2 3) to (5 6). Can you tell me if the first line is always below the other lines?"}
{"id": 697, "function": "<<|", "question": "请找出tbl1和tbl2中的column1的值，并看看tbl1里有个从(0, 0)到(4, 3)的线是不是总是比tbl2里的那些线，比如从(1, 4)到(1, 7)，从(6, 1)到(6, 5)，还有从(2, 3)到(5, 6)的线，都在下面的结果。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 <<| tbl2.column2 AS below\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 4 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (1 4, 1 7)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3486, "question_en": "Please find the values of column1 in tbl1 and tbl2, and see if the line in tbl1 going from (0, 0) to (4, 3) is always below those lines in tbl2, like the one from (1, 4) to (1, 7), from (6, 1) to (6, 5), and from (2, 3) to (5, 6), in the result."}
{"id": 698, "function": "=", "question": "看看这些线，像是(0 0, 0 1, 1 0)和(1 1, 0 0)这样的，是否在某种意义上是一样的？", "sql": "SELECT 'LINESTRING(0 0, 0 1, 1 0)'::geometry = 'LINESTRING(1 1, 0 0)'::geometry;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3492, "question_en": "Check if these lines, like (0 0, 0 1, 1 0) and (1 1, 0 0), are somehow considered the same?"}
{"id": 697, "function": "<<|", "question": "有一个表里有一条从(0 0)到(4 3)的线，另一个表里有三条线：从(1 4)到(1 7)、从(6 1)到(6 5)和从(2 3)到(5 6)。看看两个表的column1字段，并看看第一条线是不是在其他三条线的下面。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 <<| tbl2.column2 AS below\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 4 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (1 4, 1 7)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3490, "question_en": "There's a table with one line going from (0 0) to (4 3), and another table with three lines: from (1 4) to (1 7), from (6 1) to (6 5), and from (2 3) to (5 6). Check the column1 fields of the two tables, and see if the first line is below the other three lines."}
{"id": 698, "function": "=", "question": "判断那些由(0,0)、(0,1)、(1,0)构成的线和由(1,1)、(0,0)构成的线是不是在空间上一样，用对错来回答。", "sql": "SELECT 'LINESTRING(0 0, 0 1, 1 0)'::geometry = 'LINESTRING(1 1, 0 0)'::geometry;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3493, "question_en": "Decide if those lines made from (0,0), (0,1), (1,0) and from (1,1), (0,0) are the same in space, and answer with true or false."}
{"id": 697, "function": "<<|", "question": "看看表tbl1的那条从(0 0)到(4 3)的小线段，与表tbl2里的三条线段，像是从(1 4)到(1 7)，(6 1)到(6 5)，以及(2 3)到(5 6)的线段，看看tbl1的线段是不是在它们下面，并查询两个表的column1字段。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 <<| tbl2.column2 AS below\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 4 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (1 4, 1 7)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3491, "question_en": "Check if the little line from (0 0) to (4 3) in table tbl1 is below the three lines in table tbl2, like the ones from (1 4) to (1 7), (6 1) to (6 5), and (2 3) to (5 6), and query the column1 fields of both tables."}
{"id": 698, "function": "=", "question": "看看这些坐标串起来的路径，一个从0 0开始经过0 1到1 0，另一个从1 1到0 0，是否画出一样的形状。", "sql": "SELECT 'LINESTRING(0 0, 0 1, 1 0)'::geometry = 'LINESTRING(1 1, 0 0)'::geometry;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3496, "question_en": "See if these paths formed by connecting coordinates, one starting at 0 0 passing through 0 1 to 1 0, and the other from 1 1 to 0 0, create the same shape."}
{"id": 698, "function": "=", "question": "看看由三个小点连成的那条线(0 0, 0 1, 1 0)是不是和由两个小点连成的那条线(1 1, 0 0)在地图上完全一样。", "sql": "SELECT 'LINESTRING(0 0, 0 1, 1 0)'::geometry = 'LINESTRING(1 1, 0 0)'::geometry;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3495, "question_en": "Check if the line made by three little dots (0 0, 0 1, 1 0) is completely the same on the map as the line made by two little dots (1 1, 0 0)."}
{"id": 698, "function": "=", "question": "看看这两条线段，分别是从(0, 0)到(0, 1)再到(1, 0)，以及从(1, 1)到(0, 0)，它们有没有完全一样的位置关系呢？结果是对还是错呢？", "sql": "SELECT 'LINESTRING(0 0, 0 1, 1 0)'::geometry = 'LINESTRING(1 1, 0 0)'::geometry;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3494, "question_en": "Take a look at these two line paths, one goes from (0, 0) to (0, 1) then to (1, 0), and the other from (1, 1) to (0, 0). Do they have exactly the same position relationship? Is the result true or false?"}
{"id": 698, "function": "=", "question": "检查由三个小点组成的线形和由两个小点组成的线形是否在空间上完全重合，点的位置是(0 0, 0 1, 1 0)和(1 1, 0 0)。", "sql": "SELECT 'LINESTRING(0 0, 0 1, 1 0)'::geometry = 'LINESTRING(1 1, 0 0)'::geometry;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3497, "question_en": "Check if the line shape made of three little dots and the one made of two little dots spatially coincide completely, with dots at positions (0 0, 0 1, 1 0) and (1 1, 0 0)."}
{"id": 697, "function": "<<|", "question": "有一张表里有一条从(0, 0)到(4, 3)的小线段，另一张表里有三条不同的线段：从(1, 4)到(1, 7)，从(6, 1)到(6, 5)，还有从(2, 3)到(5, 6)。看看第一张表里的那条线段在不在第二张表里那些线段的下面，并找出它们各自的第一个栏位的值。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 <<| tbl2.column2 AS below\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 4 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (1 4, 1 7)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3489, "question_en": "There's a table with a little line from (0, 0) to (4, 3), and another table with three different lines: from (1, 4) to (1, 7), from (6, 1) to (6, 5), and from (2, 3) to (5, 6). Check if the line from the first table is beneath those in the second table, and find out the values in their first columns."}
{"id": 699, "function": "=", "question": "把那些在foo表里跑来跑去的线段，像从(0,0)到(1,1)以及从(1,1)到(0,0)的，变成一种特别的文本格式吧。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3499, "question_en": "Take those line segments in the foo table, like the ones going from (0,0) to (1,1) and from (1,1) to (0,0), and turn them into a special text format."}
{"id": 699, "function": "=", "question": "把那些在临时表foo里，column1字段中记录的两个小线段，分别是从(0, 0)到(1, 1)和从(1, 1)到(0, 0)的，弄成那种常见的文本形式。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3498, "question_en": "Take the two little line segments recorded in the column1 of the temporary table foo, which go from (0, 0) to (1, 1) and from (1, 1) to (0, 0), and turn them into that common text form."}
{"id": 699, "function": "=", "question": "在一个临时表里，有个叫column1的地方，里面有两条线，要把它们变成某种文字格式。第一条线是从(0 0)到(1 1)，第二条则从(1 1)到(0 0)。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3501, "question_en": "In a temporary table, there's a place called column1 with two lines, and they need to be changed into some kind of text format. The first line goes from (0 0) to (1 1), and the second one goes from (1 1) to (0 0)."}
{"id": 699, "function": "=", "question": "在临时表foo中的某列里，看看用点(0 0)和(1 1)连成的一条线，还有用(1 1)和(0 0)连成的另一条线，它们的那些特别表达方式是什么。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3502, "question_en": "In some column of the temporary table foo, check out the special way of expressing a line made by joining points (0 0) and (1 1), and another line made by joining (1 1) and (0 0)."}
{"id": 700, "function": "=", "question": "从临时表foo中把线段(0 0到1 1)和(1 1到0 0)按它们的形状归类，然后给我每类的标准描述。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo\nGROUP BY column1;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3505, "question_en": "From the temporary table foo, sort the segments from (0 0 to 1 1) and (1 1 to 0 0) by their shapes, then give me the standard description for each type."}
{"id": 700, "function": "=", "question": "从一个叫foo的小表中找出那些不重复的线状图形，不管它们是从哪头到哪头，并把它们变成一种特别的字符串。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo\nGROUP BY column1;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3506, "question_en": "Find those unique line-shaped drawings from a small table called foo, no matter which way they go, and turn them into a special kind of string."}
{"id": 700, "function": "=", "question": "从一个叫foo的临时存放地里，找出那些经过整理后独一无二的小线条的文字样子，比如像(0 0到1 1)和(1 1到0 0)这样的结果。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo\nGROUP BY column1;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3504, "question_en": "From a temporary spot named foo, find the text-like form of those unique little lines after tidying up, like results such as (0 0 to 1 1) and (1 1 to 0 0)."}
{"id": 699, "function": "=", "question": "在临时表foo的column1中，有两个小线条，按顺序经过(0 0)到(1 1)，然后从(1 1)返回(0 0)，用一种特别的文本方式来描述它们。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3503, "question_en": "In the temporary table foo's column1, there are two little lines, moving in order from (0 0) to (1 1), then returning from (1 1) to (0 0), describe them in a special text way."}
{"id": 699, "function": "=", "question": "在临时表foo的column1中找找看那些小线段，看看能不能得到像LINESTRING(0 0, 1 1)和LINESTRING(1 1, 0 0)这样的文字描述。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3500, "question_en": "In the temporary table foo's column1, see if you can find those little lines, and get text descriptions like LINESTRING(0 0, 1 1) and LINESTRING(1 1, 0 0)."}
{"id": 701, "function": "=", "question": "看看这些小点，(1707296.37 4820536.77)和(1707296.27 4820536.87)，是不是完全一样的，并把答案叫做pt_intersect。", "sql": "SELECT ST_GeomFromText('POINT(1707296.37 4820536.77)') =\n        ST_GeomFromText('POINT(1707296.27 4820536.87)') As pt_intersect;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3510, "question_en": "Check if these little dots, (1707296.37 4820536.77) and (1707296.27 4820536.87), are exactly the same, and call the answer pt_intersect."}
{"id": 700, "function": "=", "question": "在表foo里面，有两条小线段，一个从(0 0)到(1 1)，另一个从(1 1)到(0 0)，怎么把它们变成文字描述的样子？", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo\nGROUP BY column1;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3508, "question_en": "In the table foo, there are two little line segments, one going from (0 0) to (1 1) and the other from (1 1) to (0 0). How can they be turned into a text-like description?"}
{"id": 700, "function": "=", "question": "在foo这个临时表中，有两个折线，它们从(0, 0)到(1, 1)和从(1, 1)到(0, 0)。请根据某个列来分组，然后给我看每个折线的样子。", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo\nGROUP BY column1;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3507, "question_en": "In this temporary table called foo, there are two lines that go from (0, 0) to (1, 1) and from (1, 1) to (0, 0). Please group them by some column and show me how each line looks."}
{"id": 701, "function": "=", "question": "看看这两个小点(1707296.37 4820536.77)和(1707296.27 4820536.87)是不是完全一样，把答案叫做pt_intersect。", "sql": "SELECT ST_GeomFromText('POINT(1707296.37 4820536.77)') =\n        ST_GeomFromText('POINT(1707296.27 4820536.87)') As pt_intersect;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3511, "question_en": "Check if these two little dots (1707296.37 4820536.77) and (1707296.27 4820536.87) are exactly the same, and call the answer pt_intersect."}
{"id": 701, "function": "=", "question": "看看这两个坐标（1707296.37, 4820536.77）和（1707296.27, 4820536.87）是不是在同一个地方，然后叫这个结果pt_intersect。", "sql": "SELECT ST_GeomFromText('POINT(1707296.37 4820536.77)') =\n        ST_GeomFromText('POINT(1707296.27 4820536.87)') As pt_intersect;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3513, "question_en": "See if these two coordinates (1707296.37, 4820536.77) and (1707296.27, 4820536.87) are in the same spot, and then call this result pt_intersect."}
{"id": 701, "function": "=", "question": "看看pt_intersect这栏里，那两个点，1707296.37 4820536.77和1707296.27 4820536.87，是不是一模一样的？", "sql": "SELECT ST_GeomFromText('POINT(1707296.37 4820536.77)') =\n        ST_GeomFromText('POINT(1707296.27 4820536.87)') As pt_intersect;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3512, "question_en": "In the pt_intersect column, check if those two points, 1707296.37 4820536.77 and 1707296.27 4820536.87, are exactly the same?"}
{"id": 701, "function": "=", "question": "从那些文本描述中弄出两个坐标是(1707296.37,4820536.77)和(1707296.27,4820536.87)的小点，看看它们是不是在空间上完全一样。", "sql": "SELECT ST_GeomFromText('POINT(1707296.37 4820536.77)') =\n        ST_GeomFromText('POINT(1707296.27 4820536.87)') As pt_intersect;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3514, "question_en": "From those text descriptions, create two little dots with coordinates (1707296.37,4820536.77) and (1707296.27,4820536.87), and see if they are exactly the same in space."}
{"id": 701, "function": "=", "question": "把'POINT(1707296.37 4820536.77)'变成一个形状，再拿它和从'POINT(1707296.27 4820536.87)'得到的另一个形状比比，看它们是不是一样，然后告诉我结果。", "sql": "SELECT ST_GeomFromText('POINT(1707296.37 4820536.77)') =\n        ST_GeomFromText('POINT(1707296.27 4820536.87)') As pt_intersect;", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3515, "question_en": "Turn 'POINT(1707296.37 4820536.77)' into a shape, then compare it with another shape from 'POINT(1707296.27 4820536.87)' to see if they are the same, and let me know the result."}
{"id": 702, "function": "@", "question": "给出表tbl1的第一个东西和表tbl2的第一个东西，还有看看tbl1里的那条从1 1到3 3的线在表tbl2的那些线里面是不是都找得到，叫这个结果为contained。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 @ tbl2.column2 AS contained\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (2 2, 4 4)'::geometry),\n        (4, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3516, "question_en": "Provide the first thing from table tbl1 and the first thing from table tbl2, and check if the line from 1 1 to 3 3 in tbl1 can be found in all those lines in tbl2, calling this result 'contained'."}
{"id": 700, "function": "=", "question": "如果有两条线，一条从(0 0)到(1 1)，另一条从(1 1)到(0 0)，怎么样才能把这些线放在一个叫foo的临时表里，然后按那些形状来分组并展示它们的文字形式呢？", "sql": "SELECT ST_AsText(column1)\nFROM ( VALUES\n        ('LINESTRING(0 0, 1 1)'::geometry),\n        ('LINESTRING(1 1, 0 0)'::geometry)) AS foo\nGROUP BY column1;", "execution_result": [["LINESTRING(0 0,1 1)"], ["LINESTRING(1 1,0 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3509, "question_en": "If there are two lines, one going from (0 0) to (1 1) and the other from (1 1) to (0 0), how can you put these lines into a temporary table called foo, then group by those shapes and show their text form?"}
{"id": 702, "function": "@", "question": "想知道有个编号是1的线段，和另外一些线段（编号2是从(0 0)到(4 4)，编号3是从(2 2)到(4 4)，编号4是从(1 1)到(3 3)）之间的关系，用一种方法看它们是不是有包含的情况。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 @ tbl2.column2 AS contained\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (2 2, 4 4)'::geometry),\n        (4, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3518, "question_en": "I want to know about a segment with ID 1, and some other segments (ID 2 goes from (0 0) to (4 4), ID 3 goes from (2 2) to (4 4), ID 4 goes from (1 1) to (3 3)), and use a method to see if there's any containment situation."}
{"id": 703, "function": "|>>", "question": "请以三列格式展示：第一列是tbl1某个值为1的东西，第二列是tbl2中某些值（2、3、4），第三列是关于那条LINESTRING(1 4,1 7)是否在tbl2里每个LINESTRING的上方的真假判断（列名叫above）。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 |>> tbl2.column2 AS above\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 4, 1 7)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 2)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3523, "question_en": "Please show in three columns: the first column is something from tbl1 with a value of 1, the second column is some values (2, 3, 4) from tbl2, and the third column is a true or false judgment on whether that LINESTRING(1 4,1 7) is above each LINESTRING in tbl2 (column name is above)."}
{"id": 703, "function": "|>>", "question": "看看表tbl1里那条从(1, 4)到(1, 7)的线，和表tbl2里所有其他线条的上下位置关系，记得要显示两个表的column1和一个叫above的结果。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 |>> tbl2.column2 AS above\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 4, 1 7)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 2)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3522, "question_en": "Check the up-and-down position between the line from (1, 4) to (1, 7) in table tbl1 and all other lines in table tbl2, and remember to show column1 from both tables and a result called above."}
{"id": 702, "function": "@", "question": "给我一个表格，第一列是临时表tbl1的编号1，第二列是临时表tbl2的编号2/3/4，第三列是关于那些坐标线是否完全包裹了另一条从1到3的线的结果。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 @ tbl2.column2 AS contained\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (2 2, 4 4)'::geometry),\n        (4, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3517, "question_en": "Give me a table, the first column is the number 1 from temporary table tbl1, the second column is the number 2/3/4 from temporary table tbl2, and the third column is the result about whether those coordinate lines fully wrap another line from 1 to 3."}
{"id": 702, "function": "@", "question": "想象有一个数据表里有一个编号1的小线段，从(1 1)到(3 3)，另一张表里有三条线段：编号2的从(0 0)到(4 4)，编号3的从(2 2)到(4 4)，还有编号4的也是从(1 1)到(3 3)。看看第一张表的线段是不是被第二张表里的那些线段“包住”了，然后告诉我它们的编号。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 @ tbl2.column2 AS contained\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (2 2, 4 4)'::geometry),\n        (4, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3521, "question_en": "Imagine a data table with a little line segment numbered 1, going from (1 1) to (3 3), and another table with three segments: number 2 from (0 0) to (4 4), number 3 from (2 2) to (4 4), and number 4 also from (1 1) to (3 3). Check if the line in the first table is 'wrapped' by those in the second table, then tell me their numbers."}
{"id": 703, "function": "|>>", "question": "表tbl1有个从(1 4)到(1 7)的竖着的线，表tbl2有三段不同的线：一段从(0 0)到(4 2)，另一段从(6 1)到(6 5)，还有一段从(2 3)到(5 6)。找出这些线的关系，看看tbl1的线是否完全在tbl2的那些线的上方。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 |>> tbl2.column2 AS above\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 4, 1 7)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 2)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3526, "question_en": "Table tbl1 has a vertical line going from (1 4) to (1 7), and table tbl2 has three different segments: one from (0 0) to (4 2), another from (6 1) to (6 5), and one more from (2 3) to (5 6). Figure out how these lines relate, and see if the line in tbl1 is entirely above those in tbl2."}
{"id": 703, "function": "|>>", "question": "在一个表里有一条线，它走过的地方是(1 4)到(1 7)；另一个表里有三条线，分别经过(0 0)到(4 2)，(6 1)到(6 5)，和(2 3)到(5 6)。请看看第一条线是不是总在其他三条线的上面。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 |>> tbl2.column2 AS above\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 4, 1 7)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 2)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3525, "question_en": "In one table, there's a line going from (1 4) to (1 7); in another table, there are three lines going from (0 0) to (4 2), (6 1) to (6 5), and (2 3) to (5 6). Check if the first line is always above the other three lines."}
{"id": 702, "function": "@", "question": "假设有个地方记下了一个线段，起始点是(1 1)到(3 3)，然后在另一个地方有三段不同的线，分别从(0 0)到(4 4)，(2 2)到(4 4)，以及(1 1)到(3 3)。看看第一个地方的线段是否在另外那些线段里待着。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 @ tbl2.column2 AS contained\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (2 2, 4 4)'::geometry),\n        (4, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3519, "question_en": "Imagine there's a spot where a line starts at (1 1) and goes to (3 3), and elsewhere there are three different lines: one from (0 0) to (4 4), another from (2 2) to (4 4), and the last from (1 1) to (3 3). Check if the line from the first spot is hanging out inside any of those other lines."}
{"id": 704, "function": "~", "question": "给我看看表tbl1和tbl2中那些编号1的内容，还有看看表tbl1里的那段从(0 0)到(3 3)的路径是否包含了表tbl2中的各种路径的结果。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 ~ tbl2.column2 AS contains\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (1 1, 2 2)'::geometry),\n        (4, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3528, "question_en": "Show me what's in column1 of tables tbl1 and tbl2, and check if the path from (0 0) to (3 3) in tbl1 includes any of the paths in tbl2."}
{"id": 703, "function": "|>>", "question": "给定一个竖着的线条LINESTRING(1 4, 1 7)，以及三条其他线条：LINESTRING(0 0, 4 2)、LINESTRING(6 1, 6 5)和LINESTRING(2 3, 5 6)。请看看竖着的线条是不是完全在这些线条的上面。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 |>> tbl2.column2 AS above\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 4, 1 7)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 2)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3527, "question_en": "Given a vertical line LINESTRING(1 4, 1 7), and three other lines: LINESTRING(0 0, 4 2), LINESTRING(6 1, 6 5), and LINESTRING(2 3, 5 6). Check if the vertical line is entirely above these lines."}
{"id": 704, "function": "~", "question": "看看tbl1和tbl2中的编号，然后看看那些从原点到点的长线段，比如从0 0到3 3，是否包着其他那些长长的线段，比如从0 0到4 4，从1 1到2 2，还有它自己。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 ~ tbl2.column2 AS contains\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (1 1, 2 2)'::geometry),\n        (4, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3529, "question_en": "Check the IDs in tbl1 and tbl2, and see if those long lines from the origin to a point, like from 0 0 to 3 3, wrap around other long lines, like from 0 0 to 4 4, from 1 1 to 2 2, and even itself."}
{"id": 704, "function": "~", "question": "想要三栏的数据：第一栏一直是1，第二栏是2/3/4，第三栏看看那些LINESTRING(0 0,3 3)是不是能够完全包住LINESTRING(0 0,4 4)、LINESTRING(1 1,2 2)或者它自己。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 ~ tbl2.column2 AS contains\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (1 1, 2 2)'::geometry),\n        (4, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3530, "question_en": "Looking for three columns of data: the first column is always 1, the second column is 2/3/4, and the third column checks if those LINESTRING(0 0,3 3) can completely wrap around LINESTRING(0 0,4 4), LINESTRING(1 1,2 2), or itself."}
{"id": 704, "function": "~", "question": "在一个地方放一个值为1的记录，然后画一条从(0 0)到(3 3)的小线。在另一个地方放三条线，分别是从(0 0)到(4 4)，从(1 1)到(2 2)，和从(0 0)到(3 3)，看看第一条线能不能装下其他的线。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 ~ tbl2.column2 AS contains\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (1 1, 2 2)'::geometry),\n        (4, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3531, "question_en": "Put a record with value 1 somewhere, then draw a little line from (0 0) to (3 3). In another place, put three lines: one from (0 0) to (4 4), another from (1 1) to (2 2), and the last from (0 0) to (3 3), and see if the first line can fit the other lines inside."}
{"id": 704, "function": "~", "question": "有一个表里放了一条线，从点(0 0)画到点(3 3)，另一个表里放了三条线，分别是从点(0 0)到点(4 4)、从点(1 1)到点(2 2)、还有一条和第一个表里的线一样。你能看看第一个表里的线是不是把另一个表里的每条线都包住了吗？", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 ~ tbl2.column2 AS contains\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (1 1, 2 2)'::geometry),\n        (4, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3532, "question_en": "There's a table with one line drawn from point (0 0) to point (3 3), and another table with three lines: one from point (0 0) to point (4 4), one from point (1 1) to point (2 2), and one that's the same as the line in the first table. Can you check if the line in the first table wraps around each of the lines in the other table?"}
{"id": 703, "function": "|>>", "question": "看看那些数字1和2/3/4，和那条从(1 4)到(1 7)的小线，与其他几条从(0 0)到(4 2)，(6 1)到(6 5)，(2 3)到(5 6)的小线，是不是在上面。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 |>> tbl2.column2 AS above\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 4, 1 7)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 2)'::geometry),\n        (3, 'LINESTRING (6 1, 6 5)'::geometry),\n        (4, 'LINESTRING (2 3, 5 6)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3524, "question_en": "Check out those numbers 1 and 2/3/4, and that little line from (1 4) to (1 7), to see if it’s above the other little lines from (0 0) to (4 2), (6 1) to (6 5), and (2 3) to (5 6)."}
{"id": 702, "function": "@", "question": "想象一个临时收集箱，里面有一根从(1 1)到(3 3)的小线。然后有另一个箱子，里面有三根线：一根从(0 0)到(4 4)，另一根从(2 2)到(4 4)，最后一根和第一个箱子里的线一样。找出这些箱子里的数字标签，然后看看第一根线是不是被第二个箱子里的每一根线覆盖了。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 @ tbl2.column2 AS contained\nFROM\n  ( VALUES\n        (1, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (2 2, 4 4)'::geometry),\n        (4, 'LINESTRING (1 1, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, true], [1, 3, false], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3520, "question_en": "Imagine a temporary collection box with a little line from (1 1) to (3 3). Then there's another box with three lines: one from (0 0) to (4 4), another from (2 2) to (4 4), and the last one is the same as the line in the first box. Find the number tags in these boxes and check if the first line is covered by each line in the second box."}
{"id": 705, "function": "~=", "question": "看看这两条由小点组成的线是不是一样：一条从(0 0)到(1 1)，另一条从(0 1)到(1 0)。", "sql": "select 'LINESTRING(0 0, 1 1)'::geometry ~= 'LINESTRING(0 1, 1 0)'::geometry as equality;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3539, "question_en": "See if these two lines made of little dots are the same: one goes from (0 0) to (1 1), and the other from (0 1) to (1 0)."}
{"id": 709, "function": "Box2D", "question": "把那条穿过(1 2), (3 4), (5 6)的小线变成一个能包住它的四边形，然后告诉我这个四边形的坐标范围。", "sql": "SELECT Box2D(ST_GeomFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["BOX(1 2,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3541, "question_en": "Turn the little line running through (1 2), (3 4), (5 6) into a rectangle that can wrap around it, then tell me the coordinate range of this rectangle."}
{"id": 705, "function": "~=", "question": "看看这两条线，(0 0, 1 1)和(0 1, 1 0)，它们是不是在空间上完全一样，结果是对还是错？", "sql": "select 'LINESTRING(0 0, 1 1)'::geometry ~= 'LINESTRING(0 1, 1 0)'::geometry as equality;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3536, "question_en": "Take a look at these two lines, (0 0, 1 1) and (0 1, 1 0), are they exactly the same in space, is the result true or false?"}
{"id": 709, "function": "Box2D", "question": "给一条连接点(1 2), (3 4), (5 6)的线，能不能说一下它外面包起来的矩形是什么样子？", "sql": "SELECT Box2D(ST_GeomFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["BOX(1 2,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3540, "question_en": "For a line connecting the points (1 2), (3 4), (5 6), can you describe the rectangle that wraps around it?"}
{"id": 705, "function": "~=", "question": "有两条由小点连成的线，一条从(0 0)到(1 1)，另一条从(0 1)到(1 0)，看看它们在形状上是不是一个样子。", "sql": "select 'LINESTRING(0 0, 1 1)'::geometry ~= 'LINESTRING(0 1, 1 0)'::geometry as equality;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3537, "question_en": "There are two lines made of little dots, one goes from (0 0) to (1 1) and the other from (0 1) to (1 0), check if they look the same in shape."}
{"id": 705, "function": "~=", "question": "看看那些由(0 0, 1 1)和(0 1, 1 0)这两组点连起来的线段，是不是在空间上完全一样。", "sql": "select 'LINESTRING(0 0, 1 1)'::geometry ~= 'LINESTRING(0 1, 1 0)'::geometry as equality;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3534, "question_en": "Check if those line segments made by connecting the points (0 0, 1 1) and (0 1, 1 0) are completely the same in space."}
{"id": 705, "function": "~=", "question": "看看两条线段，(0 0, 1 1)和(0 1, 1 0)，是不是在空间上算作一样的，结果要用对错来表示。", "sql": "select 'LINESTRING(0 0, 1 1)'::geometry ~= 'LINESTRING(0 1, 1 0)'::geometry as equality;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3535, "question_en": "Check if two line segments, (0 0, 1 1) and (0 1, 1 0), are considered the same in space, and show the result as true or false."}
{"id": 704, "function": "~", "question": "想象有两个列表，第一个列表里有一条从(0 0)到(3 3)的线，第二个列表有三条线：一条从(0 0)到(4 4)，一条从(1 1)到(2 2)，还有一条和第一个列表一样。问问第一个列表里的线是不是每条都能罩住第二个列表的线。", "sql": "SELECT tbl1.column1, tbl2.column1, tbl1.column2 ~ tbl2.column2 AS contains\nFROM\n  ( VALUES\n        (1, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl1,\n  ( VALUES\n        (2, 'LINESTRING (0 0, 4 4)'::geometry),\n        (3, 'LINESTRING (1 1, 2 2)'::geometry),\n        (4, 'LINESTRING (0 0, 3 3)'::geometry)) AS tbl2;", "execution_result": [[1, 2, false], [1, 3, true], [1, 4, true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3533, "question_en": "Imagine two lists: the first has a line from (0 0) to (3 3), and the second has three lines: one from (0 0) to (4 4), another from (1 1) to (2 2), and one just like the first list. Ask if the line in the first list can fully cover each line in the second list."}
{"id": 705, "function": "~=", "question": "想知道由(0 0)到(1 1)这些小点构成的线，和由(0 1)到(1 0)这些小点组成的线，是不是在几何上看起来一样？", "sql": "select 'LINESTRING(0 0, 1 1)'::geometry ~= 'LINESTRING(0 1, 1 0)'::geometry as equality;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3538, "question_en": "Want to know if the line made from little dots (0 0) to (1 1) and the line made from little dots (0 1) to (1 0) look the same geometrically?"}
{"id": 709, "function": "Box2D", "question": "有一个包含三个点的小线段，像这样LINESTRING(1 2, 3 4, 5 6)，怎么从文字变成图形，然后找一个能包住它的简单框框？", "sql": "SELECT Box2D(ST_GeomFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["BOX(1 2,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3544, "question_en": "There's a little line with three points, like LINESTRING(1 2, 3 4, 5 6), how do you turn it from words into a picture, and then find a simple box that can cover it?"}
{"id": 709, "function": "Box2D", "question": "给定一串坐标1 2、3 4、5 6，这些点连成一条线，怎么找到一个最小的长方形把它们圈住，然后用某种方式显示出来？", "sql": "SELECT Box2D(ST_GeomFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["BOX(1 2,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3543, "question_en": "Given a series of coordinates 1 2, 3 4, 5 6, which connect into a line, how can you find the smallest rectangle that encloses them and then show it in some way?"}
{"id": 709, "function": "Box2D", "question": "看看由点(1 2), (3 4), (5 6)组成的那条线，能不能找出包住它的最小长方形的边界。", "sql": "SELECT Box2D(ST_GeomFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["BOX(1 2,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3545, "question_en": "Take a look at the line made of the points (1 2), (3 4), (5 6), and see if you can find the smallest rectangle that surrounds it."}
{"id": 710, "function": "Box2D", "question": "怎么用三个点(220268 150415)、(220227 150505)、(220227 150406)画一段圆弧，然后找出那个形状的平面边界呢？", "sql": "SELECT Box2D(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'));", "execution_result": [["BOX(220186.99512189245 150406,220288.24878054656 150506.12682932706)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3549, "question_en": "How can you draw an arc using three points (220268 150415), (220227 150505), (220227 150406), and then find the flat boundary of that shape?"}
{"id": 710, "function": "Box2D", "question": "把那个弯弯曲曲的线条CIRCULARSTRING(220268 150415,220227 150505,220227 150406)变成一个刚好包住它的方形，然后说出这个方形的左下角和右上角的坐标是啥。", "sql": "SELECT Box2D(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'));", "execution_result": [["BOX(220186.99512189245 150406,220288.24878054656 150506.12682932706)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3548, "question_en": "Take that wavy line CIRCULARSTRING(220268 150415,220227 150505,220227 150406) and turn it into a square that just covers it, then tell what the bottom-left and top-right corners of the square are."}
{"id": 711, "function": "Box3D", "question": "给你一串三维的点，像是(1 2 3, 3 4 5, 5 6 5)这样，能不能说说把它们包起来的那个立方体的故事？", "sql": "SELECT Box3D(ST_GeomFromEWKT('LINESTRING(1 2 3, 3 4 5, 5 6 5)'));", "execution_result": [["BOX3D(1 2 3,5 6 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3552, "question_en": "Imagine a series of 3D points like (1 2 3, 3 4 5, 5 6 5), can you tell the tale of the cube that wraps around them?"}
{"id": 710, "function": "Box2D", "question": "找出由220268 150415、220227 150505和220227 150406这些点组成的弧线的最小包围盒，用一种叫Box2D的方式展示。", "sql": "SELECT Box2D(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'));", "execution_result": [["BOX(220186.99512189245 150406,220288.24878054656 150506.12682932706)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3547, "question_en": "Find the smallest box that wraps around the arc made by the points 220268 150415, 220227 150505, and 220227 150406, and show it in a way called Box2D."}
{"id": 710, "function": "Box2D", "question": "你能说说怎么把那些坐标串成一个形状，然后找到一个最小的四边形包住它们吗？这些点是220268 150415, 220227 150505, 220227 150406。", "sql": "SELECT Box2D(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'));", "execution_result": [["BOX(220186.99512189245 150406,220288.24878054656 150506.12682932706)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3550, "question_en": "Can you talk about how to string those coordinates into a shape and then find the smallest rectangle that can cover them? The points are 220268 150415, 220227 150505, 220227 150406."}
{"id": 710, "function": "Box2D", "question": "有三个点，坐标分别是X=220268 Y=150415、X=220227 Y=150505、X=220227 Y=150406，用这些点画个弧，然后找出这个弧的平面坐标范围是什么？", "sql": "SELECT Box2D(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'));", "execution_result": [["BOX(220186.99512189245 150406,220288.24878054656 150506.12682932706)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3551, "question_en": "There are three points with coordinates X=220268 Y=150415, X=220227 Y=150505, and X=220227 Y=150406. Using these points, draw an arc and find out what the flat coordinate range of this arc is?"}
{"id": 711, "function": "Box3D", "question": "把这些点(1,2,3)、(3,4,5)、(5,6,5)连成一条线，然后找一个在XYZ空间里刚好能装下它们的小立方体。", "sql": "SELECT Box3D(ST_GeomFromEWKT('LINESTRING(1 2 3, 3 4 5, 5 6 5)'));", "execution_result": [["BOX3D(1 2 3,5 6 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3557, "question_en": "Connect these points (1,2,3), (3,4,5), (5,6,5) into a line, then find a small cube in XYZ space that just fits them."}
{"id": 711, "function": "Box3D", "question": "用那些坐标(1,2,3)、(3,4,5)、(5,6,5)画一条三维的线，然后找出一个能包住它的三维盒子，看看盒子长啥样。", "sql": "SELECT Box3D(ST_GeomFromEWKT('LINESTRING(1 2 3, 3 4 5, 5 6 5)'));", "execution_result": [["BOX3D(1 2 3,5 6 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3555, "question_en": "Draw a 3D line with those coordinates (1,2,3), (3,4,5), (5,6,5), then find a 3D box that can cover it and see what the box looks like."}
{"id": 711, "function": "Box3D", "question": "能不能用一种像是装东西的盒子的方法，描述LINESTRING(1 2 3, 3 4 5, 5 6 5)的范围，记得要说出那些数字在X/Y/Z方向上的头尾哦。", "sql": "SELECT Box3D(ST_GeomFromEWKT('LINESTRING(1 2 3, 3 4 5, 5 6 5)'));", "execution_result": [["BOX3D(1 2 3,5 6 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3554, "question_en": "Can you describe the range of LINESTRING(1 2 3, 3 4 5, 5 6 5) in a way like putting it in a box, and remember to mention the start and end of those numbers in the X/Y/Z directions?"}
{"id": 712, "function": "Box3D", "question": "对于那条三维弯曲的线，看看用最小的盒子能包住它，并告诉我这个盒子的WKT格式。", "sql": "SELECT Box3D(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)'));", "execution_result": [["BOX3D(220186.99512189245 150406 1,220288.24878054656 150506.12682932706 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3558, "question_en": "For that 3D curved line, see what the smallest box that can enclose it looks like, and tell me the WKT format of this box."}
{"id": 711, "function": "Box3D", "question": "把那些点(1 2 3)、(3 4 5)、(5 6 5)拉成一条线，变成某种特殊格式后，找出它们的三维外框，然后用标准的盒子格式说出来。", "sql": "SELECT Box3D(ST_GeomFromEWKT('LINESTRING(1 2 3, 3 4 5, 5 6 5)'));", "execution_result": [["BOX3D(1 2 3,5 6 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3553, "question_en": "Stretch those points (1 2 3), (3 4 5), (5 6 5) into a line, turn it into some special format, find their 3D outer box, and then describe it using the standard box format."}
{"id": 712, "function": "Box3D", "question": "找一块能够完全包住这些点的长方形盒子吧，点的位置是220268 150415 1, 220227 150505 1, 220227 150406 1，然后用一种叫Box3D的格式来描述这个盒子。", "sql": "SELECT Box3D(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)'));", "execution_result": [["BOX3D(220186.99512189245 150406 1,220288.24878054656 150506.12682932706 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3560, "question_en": "Find a rectangular box that can completely cover these points, located at 220268 150415 1, 220227 150505 1, 220227 150406 1, and describe this box using a format called Box3D."}
{"id": 711, "function": "Box3D", "question": "有一条三维的线段，它有三个特殊点：(1 2 3)、(3 4 5)、(5 6 5)。想知道那个能把它全部盖住的最小的立方体是什么样子。", "sql": "SELECT Box3D(ST_GeomFromEWKT('LINESTRING(1 2 3, 3 4 5, 5 6 5)'));", "execution_result": [["BOX3D(1 2 3,5 6 5)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3556, "question_en": "There's a 3D line with three special points: (1 2 3), (3 4 5), (5 6 5). I want to find out what the smallest box that covers it completely looks like."}
{"id": 712, "function": "Box3D", "question": "用那些神奇的坐标220268 150415 1, 220227 150505 1, 220227 150406 1画个能包住它们的三维盒子。", "sql": "SELECT Box3D(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)'));", "execution_result": [["BOX3D(220186.99512189245 150406 1,220288.24878054656 150506.12682932706 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3562, "question_en": "Use those magical coordinates 220268 150415 1, 220227 150505 1, 220227 150406 1 to draw a 3D box that can enclose them."}
{"id": 712, "function": "Box3D", "question": "怎么用那些坐标点（220268 150415 1, 220227 150505 1, 220227 150406 1）来圈出一个三维的框呢？", "sql": "SELECT Box3D(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)'));", "execution_result": [["BOX3D(220186.99512189245 150406 1,220288.24878054656 150506.12682932706 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3561, "question_en": "How can you use those coordinates (220268 150415 1, 220227 150505 1) to outline a 3D box?"}
{"id": 712, "function": "Box3D", "question": "有一条弧线，它穿过这三个特别的点：(220268 150415 1)、(220227 150505 1)、(220227 150406 1)。能不能把它变成某种格式，然后告诉我那个大盒子的形状？", "sql": "SELECT Box3D(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)'));", "execution_result": [["BOX3D(220186.99512189245 150406 1,220288.24878054656 150506.12682932706 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3559, "question_en": "There's an arc line that goes through these three special points: (220268 150415 1), (220227 150505 1), (220227 150406 1). Can you turn it into some format and then tell me the shape of that big box?"}
{"id": 712, "function": "Box3D", "question": "有一个三维的弧形，像是用这些点220268 150415 1, 220227 150505 1, 220227 150406 1画出来的，怎么找到能完全包住它的小方块？", "sql": "SELECT Box3D(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 1,220227 150406 1)'));", "execution_result": [["BOX3D(220186.99512189245 150406 1,220288.24878054656 150506.12682932706 1)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3563, "question_en": "There's a 3D arc, kind of drawn with points like 220268 150415 1, 220227 150505 1, 220227 150406 1. How do you find the small cube that can completely cover it?"}
{"id": 709, "function": "Box2D", "question": "看看这串线上的小点，1 2, 3 4, 5 6，给它们一个最小的包围盒，用盒子格式说出来。", "sql": "SELECT Box2D(ST_GeomFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["BOX(1 2,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3542, "question_en": "Look at the little dots along this line, 1 2, 3 4, 5 6, give them a smallest covering box and describe it in a box format."}
{"id": 717, "function": "&&(geometry,box2df)", "question": "看看那个点在(1, 1)的地方是不是跟由(0, 0)和(2, 2)这两个点构成的长方形有交集，给我一个是或不是的答案。", "sql": "SELECT ST_Point(1,1) && ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3564, "question_en": "Check if the dot at (1, 1) has any connection with the rectangle formed by those coordinates (0, 0) and (2, 2), and give me a yes or no answer."}
{"id": 717, "function": "&&(geometry,box2df)", "question": "判断那些在1 1位置的小点和一个从0 0到2 2的区域之间有没有交集，结果是个对错的说法。", "sql": "SELECT ST_Point(1,1) && ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3565, "question_en": "Check if there is any overlap between the tiny dot at 1 1 and an area stretching from 0 0 to 2 2, and the result is a true or false statement."}
{"id": 717, "function": "&&(geometry,box2df)", "question": "想象一个坐标是(1,1)的小点，然后画一个从(0,0)到(2,2)的框框，看看这个小点有没有碰到框框。", "sql": "SELECT ST_Point(1,1) && ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3567, "question_en": "Imagine a little dot at (1,1), then draw a box from (0,0) to (2,2), and see if the dot touches the box."}
{"id": 717, "function": "&&(geometry,box2df)", "question": "有一个点在位置1,1，还有一个由0,0到2,2构成的方形区域，你能看看它们是否有交集吗？", "sql": "SELECT ST_Point(1,1) && ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3568, "question_en": "There's a point at position 1,1, and an area shaped from 0,0 to 2,2. Can you check if they intersect?"}
{"id": 717, "function": "&&(geometry,box2df)", "question": "想象一下在(1,1)那里的一个小点，还有一个从(0,0)到(2,2)对角线画出来的长方形，看看这两个会不会碰到。", "sql": "SELECT ST_Point(1,1) && ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3569, "question_en": "Imagine a little dot at (1,1) and a rectangle drawn from diagonal points (0,0) to (2,2), and see if they bump into each other."}
{"id": 718, "function": "&&(box2df,geometry)", "question": "看看左下是(0 0)和右上是(2 2)的小框框，和里面那个(1 1)的小点点有没有碰到一起，结果是对还是错？", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_Point(1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3570, "question_en": "Check if the little box with the bottom left at (0 0) and top right at (2 2) bumps into the little dot at (1 1), is the result true or false?"}
{"id": 717, "function": "&&(geometry,box2df)", "question": "看看坐标(1, 1)的小点是否在由两个角落坐标(0, 0)和(2, 2)形成的长方形范围内，答案是对还是错。", "sql": "SELECT ST_Point(1,1) && ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3566, "question_en": "Check if the little dot at coordinates (1, 1) is within the rectangle range formed by the corner coordinates (0, 0) and (2, 2), the answer being true or false."}
{"id": 718, "function": "&&(box2df,geometry)", "question": "看看小点(1 1)是不是在由两个对角点(0 0)和(2 2)组成的那个框框里面，用简单的对或错来表示。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_Point(1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3571, "question_en": "Check if the little dot (1 1) is inside the box made by the diagonal points (0 0) and (2 2), using a simple yes or no."}
{"id": 719, "function": "&&(box2df,box2df)", "question": "看看两个小方块的位置关系吧，一个从点(0 0)到点(2 2)，另一个从点(1 1)到点(3 3)，它们是否有交集呢？", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_MakeBox2D(ST_Point(1,1), ST_Point(3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3577, "question_en": "Let's check the relationship between two small boxes, one from point (0 0) to point (2 2), and the other from point (1 1) to point (3 3). Do they overlap?"}
{"id": 718, "function": "&&(box2df,geometry)", "question": "看看坐标是(1,1)的点和那个从(0,0)到(2,2)的方形是不是有交集，给个是非的答案就行。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_Point(1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3572, "question_en": "See if the point at (1,1) and that square stretching from (0,0) to (2,2) overlap, just give a yes or no answer."}
{"id": 710, "function": "Box2D", "question": "给我看一下围住这些点的那个简单矩形的WKT样子吧：CIRCULARSTRING(220268 150415,220227 150505,220227 150406)。", "sql": "SELECT Box2D(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'));", "execution_result": [["BOX(220186.99512189245 150406,220288.24878054656 150506.12682932706)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3546, "question_en": "Show me the WKT version of that simple rectangle that wraps around these points: CIRCULARSTRING(220268 150415,220227 150505,220227 150406)."}
{"id": 718, "function": "&&(box2df,geometry)", "question": "看看那些小坐标(1,1)是否碰到了边界从(0,0)到(2,2)的那个大方框，结果叫做overlaps。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_Point(1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3573, "question_en": "See if those little coordinates (1,1) have touched that big box with edges from (0,0) to (2,2), with the result called overlaps."}
{"id": 719, "function": "&&(box2df,box2df)", "question": "用那些坐标来画两个盒子，第一个从(0, 0)到(2, 2)，第二个从(1, 1)到(3, 3)，看看它们是不是有交集。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_MakeBox2D(ST_Point(1,1), ST_Point(3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3579, "question_en": "Use those coordinates to draw two boxes, the first one from (0, 0) to (2, 2) and the second one from (1, 1) to (3, 3), and check if they intersect."}
{"id": 719, "function": "&&(box2df,box2df)", "question": "看看两个用坐标点画出来的方形区域有没有交叠，第一个区域是从(0, 0)到(2, 2)，第二个是从(1, 1)到(3, 3)。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_MakeBox2D(ST_Point(1,1), ST_Point(3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3578, "question_en": "Check if two square areas drawn with coordinate points overlap, the first area goes from (0, 0) to (2, 2), and the second one goes from (1, 1) to (3, 3)."}
{"id": 718, "function": "&&(box2df,geometry)", "question": "先弄两个小点，一个在0,0，一个在2,2，然后画个包围它们的形状，看看这个形状和1,1的小点有没有交集。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_Point(1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3575, "question_en": "First, make two little dots, one at 0,0 and another at 2,2, then draw a shape that covers them, and check if this shape has any intersection with the little dot at 1,1."}
{"id": 719, "function": "&&(box2df,box2df)", "question": "看看那些由(0, 0)到(2, 2)和(1, 1)到(3, 3)的两个范围框，它们之间有没有交集的可能性。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_MakeBox2D(ST_Point(1,1), ST_Point(3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3576, "question_en": "Check if there's a possibility of overlap between those two boundary boxes from (0, 0) to (2, 2) and (1, 1) to (3, 3)."}
{"id": 718, "function": "&&(box2df,geometry)", "question": "想象一个由(0,0)和(2,2)这两个小点构成的矩形，然后看看(1,1)这个点是不是在这个矩形里，回答是或不是，叫它overlaps。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_Point(1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3574, "question_en": "Imagine a rectangle formed by the little dots at (0,0) and (2,2), then see if the point (1,1) is inside this rectangle, answer yes or no, and call it overlaps."}
{"id": 720, "function": "&&&(geometry,gidx)", "question": "看看那个在1 1 1位置的小点，是不是跟从0 0 0到2 2 2的边框有重合的地方，给个对的或错的答案。", "sql": "SELECT ST_MakePoint(1,1,1) &&& ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3582, "question_en": "See if the little dot at position 1 1 1 has any overlapping area with the box stretching from 0 0 0 to 2 2 2, and give a true or false answer."}
{"id": 719, "function": "&&(box2df,box2df)", "question": "想象两个小范围的方形区域：一个从(0, 0)到(2, 2)，另一个从(1, 1)到(3, 3)，看看它们有没有互相交叠的部分。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_MakeBox2D(ST_Point(1,1), ST_Point(3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3581, "question_en": "Imagine two small square areas: one from (0, 0) to (2, 2), and another from (1, 1) to (3, 3), and see if they have any overlapping parts."}
{"id": 719, "function": "&&(box2df,box2df)", "question": "用那些点做两个形状，一个是从(0, 0)到(2, 2)，另一个是从(1, 1)到(3, 3)，看看它们有没有碰到一起。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) && ST_MakeBox2D(ST_Point(1,1), ST_Point(3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3580, "question_en": "Using those points to make two shapes, one from (0, 0) to (2, 2) and another from (1, 1) to (3, 3), check if they bump into each other."}
{"id": 721, "function": "&&&(gidx,geometry)", "question": "看看那个在(1 1 1)的小点儿是否能碰到从(0 0 0)到(2 2 2)之间的那个三维边框。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_MakePoint(1,1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3588, "question_en": "Check if that little dot at (1 1 1) can touch the 3D boundary stretching from (0 0 0) to (2 2 2)."}
{"id": 720, "function": "&&&(geometry,gidx)", "question": "看看那个在坐标(1, 1, 1)的小点是不是在由两个位置(0, 0, 0)和(2, 2, 2)构成的立方体里面，并把结果变成一个叫做重叠的简单是非题。", "sql": "SELECT ST_MakePoint(1,1,1) &&& ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3584, "question_en": "Check if the little dot at coordinates (1, 1, 1) is inside the cube formed by two positions (0, 0, 0) and (2, 2, 2), and turn the result into a simple yes-no question called overlaps."}
{"id": 721, "function": "&&&(gidx,geometry)", "question": "看看三维小点(1 1 1)是不是在由(0 0 0)和(2 2 2)这两个角落搭起来的立方体里面，给个是或不是的答案。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_MakePoint(1,1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3589, "question_en": "Check if the tiny 3D point (1 1 1) is inside the cube built from the corners (0 0 0) and (2 2 2), and give a yes or no answer."}
{"id": 720, "function": "&&&(geometry,gidx)", "question": "看看那个在1 1 1位置的小点是否碰到从0 0 0到2 2 2的空间盒子，并告诉我结果是对还是错。", "sql": "SELECT ST_MakePoint(1,1,1) &&& ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3583, "question_en": "Check if the little dot at position 1 1 1 bumps into the space box stretching from 0 0 0 to 2 2 2, and tell me if the answer is yes or no."}
{"id": 720, "function": "&&&(geometry,gidx)", "question": "想象一个小点在(1, 1, 1)的位置，然后有一个盒子是由两个小点在(0, 0, 0)和(2, 2, 2)的位置画出来的，看看这个小点是不是在这个盒子里有些交集。", "sql": "SELECT ST_MakePoint(1,1,1) &&& ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3585, "question_en": "Imagine a little dot at position (1, 1, 1), and then there's a box drawn by two little dots at positions (0, 0, 0) and (2, 2, 2). Check if this dot has some overlap inside the box."}
{"id": 721, "function": "&&&(gidx,geometry)", "question": "看看三维空间里的点(1 1 1)是不是在从(0 0 0)到(2 2 2)的那个立体盒子里交叉呢，结果是对还是错？", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_MakePoint(1,1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3590, "question_en": "See if the point (1 1 1) in 3D space crosses inside that box from (0 0 0) to (2 2 2), is it true or false?"}
{"id": 720, "function": "&&&(geometry,gidx)", "question": "用那些坐标1 1 1做个三维小点，然后用最小点0 0 0和最大点2 2 2画个三维空间的框，看那个小点是不是在框里面有交集。", "sql": "SELECT ST_MakePoint(1,1,1) &&& ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3587, "question_en": "Make a little 3D dot with the coordinates 1 1 1, then draw a 3D box using the smallest point 0 0 0 and the largest point 2 2 2, and see if the little dot overlaps inside the box."}
{"id": 720, "function": "&&&(geometry,gidx)", "question": "在空间里，假设有一个坐标为(1,1,1)的小点和一个由(0,0,0)到(2,2,2)的边界盒子，看看这个小点是不是在盒子里面或碰到它。", "sql": "SELECT ST_MakePoint(1,1,1) &&& ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3586, "question_en": "In space, imagine a little dot at coordinates (1,1,1) and a boundary box from (0,0,0) to (2,2,2), and see if this little dot is inside the box or touches it."}
{"id": 721, "function": "&&&(gidx,geometry)", "question": "用那些点，像是从X=0,Y=0,Z=0到X=2,Y=2,Z=2，画一个包含所有的小盒子，看看X=1,Y=1,Z=1这个点是不是在里面。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_MakePoint(1,1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3592, "question_en": "Using those points, like from X=0, Y=0, Z=0 to X=2, Y=2, Z=2, draw a box that covers everything, and see if the point X=1, Y=1, Z=1 is inside."}
{"id": 722, "function": "&&&(gidx,gidx)", "question": "看看两个三维空间里的小方块有没有交错，第一个方块是从(0 0 0)到(2 2 2)，另一个是从(1 1 1)到(3 3 3)。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_3DMakeBox(ST_MakePoint(1,1,1), ST_MakePoint(3,3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3595, "question_en": "Check if the two small cubes in 3D space are crisscrossing, with the first cube from (0 0 0) to (2 2 2), and the other from (1 1 1) to (3 3 3)."}
{"id": 721, "function": "&&&(gidx,geometry)", "question": "假设你有两个三维的小点，一个在(0,0,0)，另一个在(2,2,2)，想象它们之间形成一个立体的方块。然后看看这个方块会不会碰到在(1,1,1)的那个小点。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_MakePoint(1,1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3591, "question_en": "Suppose you have two little 3D dots, one at (0,0,0) and another at (2,2,2), imagine a solid block forming between them. Then see if this block touches that little dot at (1,1,1)."}
{"id": 722, "function": "&&&(gidx,gidx)", "question": "看看两个立体的小方块有没有交叠，第一个方块的边在0到2之间，第二个方块的边在1到3之间，然后告诉我有没有重叠。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_3DMakeBox(ST_MakePoint(1,1,1), ST_MakePoint(3,3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3596, "question_en": "See if two 3D little boxes overlap, with the first box having edges between 0 and 2, and the second box between 1 and 3, then tell me if they overlap."}
{"id": 721, "function": "&&&(gidx,geometry)", "question": "想象一个从(0,0,0)到(2,2,2)的立体盒子，看看它会不会碰到在(1,1,1)这个位置的小点点。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_MakePoint(1,1,1) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3593, "question_en": "Imagine a box from (0,0,0) to (2,2,2), and see if it touches the little point at (1,1,1)."}
{"id": 722, "function": "&&&(gidx,gidx)", "question": "看看那些坐标从(0,0,0)到(2,2,2)和从(1,1,1)到(3,3,3)的两个盒子在空间里有没有互相碰撞的结果。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_3DMakeBox(ST_MakePoint(1,1,1), ST_MakePoint(3,3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3594, "question_en": "Check if the result shows that the boxes with coordinates from (0,0,0) to (2,2,2) and from (1,1,1) to (3,3,3) bump into each other in space."}
{"id": 722, "function": "&&&(gidx,gidx)", "question": "用那些点(0 0 0)和(2 2 2)画个三维方块，再用点(1 1 1)和(3 3 3)画另一个，看看它们在三维里是不是有交集。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_3DMakeBox(ST_MakePoint(1,1,1), ST_MakePoint(3,3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3597, "question_en": "Using those points (0 0 0) and (2 2 2) to draw a 3D block, then using points (1 1 1) and (3 3 3) to draw another one, see if they have any overlap in 3D."}
{"id": 722, "function": "&&&(gidx,gidx)", "question": "想象从(0, 0, 0)到(2, 2, 2)有个小盒子，还有个从(1, 1, 1)到(3, 3, 3)的盒子，看看这两个盒子在三维空间里有没有重叠吧。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_3DMakeBox(ST_MakePoint(1,1,1), ST_MakePoint(3,3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3598, "question_en": "Imagine there's a little box from (0, 0, 0) to (2, 2, 2), and another box from (1, 1, 1) to (3, 3, 3). See if these two boxes overlap in 3D space."}
{"id": 725, "function": "@(geometry,box2df)", "question": "看看从小圆点(2 2)出发，往外延伸1的距离后形成的形状，是不是完全躲在由(0,0)到(5,5)的那个方框里，告诉我是不是这样。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3600, "question_en": "See if the shape that grows 1 unit outwards from the little dot (2 2) is entirely hiding within the box from (0,0) to (5,5), and tell me if that's true."}
{"id": 722, "function": "&&&(gidx,gidx)", "question": "想象两个立方体，一个从(0, 0, 0)到(2, 2, 2)，另一个从(1, 1, 1)到(3, 3, 3)，看看它们的边界是不是有交集。", "sql": "SELECT ST_3DMakeBox(ST_MakePoint(0,0,0), ST_MakePoint(2,2,2)) &&& ST_3DMakeBox(ST_MakePoint(1,1,1), ST_MakePoint(3,3,3)) AS overlaps;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3599, "question_en": "Imagine two cubes, one stretching from (0, 0, 0) to (2, 2, 2), and another from (1, 1, 1) to (3, 3, 3), and see if their boundaries intersect."}
{"id": 725, "function": "@(geometry,box2df)", "question": "从坐标(2,2)那里画个小圆，半径是1，然后看看这个圆是不是完全躲在一个用角落(0,0)和(5,5)画出的四方形里面。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3603, "question_en": "Draw a small circle from coordinates (2,2) with a radius of 1, then check if this circle is fully nestled within a square made from corners (0,0) and (5,5)."}
{"id": 726, "function": "@(box2df,geometry)", "question": "看看从(2,2)到(3,3)的那个长方形，是不是可以把从点(1,1)往外扩10个单位得到的形状完全包住，给个是或不是的答案。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3607, "question_en": "See if that rectangle from (2,2) to (3,3) can completely cover the shape you get by expanding outwards 10 units from the point (1,1), and give a yes or no answer."}
{"id": 726, "function": "@(box2df,geometry)", "question": "看看由那些小点(2,2)和(3,3)画出的方形，能否完全把以(1,1)为中心，半径10的圆圈包住。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3606, "question_en": "Check if the square drawn by those little dots (2,2) and (3,3) can completely wrap around the circle centered at (1,1) with a radius of 10."}
{"id": 725, "function": "@(geometry,box2df)", "question": "看看那个点(2 2)加厚1个单位后，是不是完全在由(0,0)到(5,5)这两个角构成的长方形里面，然后给出对它是否在里面的判断。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3602, "question_en": "See if that point (2 2), after thickening by 1 unit, is completely inside the rectangle formed by the corners (0,0) to (5,5), then provide a judgment on whether it is inside."}
{"id": 726, "function": "@(box2df,geometry)", "question": "用那些点(2 2)和(3 3)画一个框，然后看看这个框是不是被一个以点(1 1)为中心、半径是10的圆圈圈住了。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3609, "question_en": "Use those points (2 2) and (3 3) to draw a box, then see if this box is surrounded by a circle centered at point (1 1) with a radius of 10."}
{"id": 725, "function": "@(geometry,box2df)", "question": "想象在坐标(2,2)上有个小点，它周围有个1单位宽的圈子。看看这个圈子有没有完全躲在由两个点(0,0)和(5,5)围成的框框里。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3604, "question_en": "Imagine there's a small dot at coordinates (2,2) with a circle around it that's 1 unit wide. Check if this circle is completely hiding inside the box framed by two points (0,0) and (5,5)."}
{"id": 726, "function": "@(box2df,geometry)", "question": "想知道由左下角是(2, 2)和右上角是(3, 3)的小方块，能不能把从(1, 1)出发扩展10长度的那种形状都包住，答案用那些坐标格式来说明。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3608, "question_en": "Wonder if the small box with corners at (2, 2) and (3, 3) can cover the shape that extends 10 units starting from (1, 1), and the answer should be given in those coordinate formats."}
{"id": 725, "function": "@(geometry,box2df)", "question": "看看那个圆心在2 2的小圆，它的边界会不会完全在从(0,0)到(5,5)的长方形里？给我一个真或假的答案。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3601, "question_en": "Check if the small circle with center at 2 2 has its boundary completely within the rectangle from (0,0) to (5,5)? Give me a true or false answer."}
{"id": 726, "function": "@(box2df,geometry)", "question": "先想象两个小点，坐标是(2 2)和(3 3)，然后连起来画个框，看看这个框是不是完全在那个以(1 1)为中心、半径是10的圆圈里。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3610, "question_en": "First, imagine two tiny dots at (2 2) and (3 3), then connect them to draw a box, and see if this box is completely inside the circle centered at (1 1) with a radius of 10."}
{"id": 726, "function": "@(box2df,geometry)", "question": "怎么用那些坐标2 2和3 3围成一个小框，然后看看这个框是不是在一个点1 1为中心，半径10的圆圈里呢？", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3611, "question_en": "How can you use those coordinates 2 2 and 3 3 to make a little box, and then see if this box is inside a circle with the center at point 1 1 and a radius of 10?"}
{"id": 725, "function": "@(geometry,box2df)", "question": "从那些点(2, 2)开始，想象一个圆形的区域扩展到1的范围，看看这个圆形是不是完全在一个从(0, 0)到(5, 5)的长方形里边。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3605, "question_en": "Starting from those coordinates (2, 2), imagine a circular area extending to a range of 1, and check if this circle is entirely inside a rectangle stretching from (0, 0) to (5, 5)."}
{"id": 727, "function": "@(box2df,box2df)", "question": "有两个小方块，一个是由那些点(2, 2)和(3, 3)围起来的，另一个是由(0, 0)和(5, 5)围起来的，看看第一个是不是在第二个里面，告诉我对不对。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3614, "question_en": "There are two little boxes, one formed by those points (2, 2) and (3, 3), and another by (0, 0) and (5, 5). Check if the first one is inside the second, and let me know if that's right."}
{"id": 727, "function": "@(box2df,box2df)", "question": "看看那个小方块，左下角是2 2，右上角是3 3，是不是整个都在另一个更大的小方块里，那个更大的左下角是0 0，右上角是5 5，然后告诉我结果是对还是错。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3613, "question_en": "Check if that small box, with the bottom-left corner at 2 2 and top-right corner at 3 3, is entirely inside another bigger box, which has its bottom-left corner at 0 0 and top-right corner at 5 5, and then let me know if it's true or false."}
{"id": 727, "function": "@(box2df,box2df)", "question": "看看用点(2, 2)和(3, 3)画的那个小方形，是不是完全待在由点(0, 0)和(5, 5)画的大方形里面，然后告诉我结果。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3612, "question_en": "Check if the little square drawn with points (2, 2) and (3, 3) is completely inside the big square drawn with points (0, 0) and (5, 5), then tell me the result."}
{"id": 727, "function": "@(box2df,box2df)", "question": "用那些坐标点来画一个小框框，左下是(2, 2)，右上是(3, 3)，看看这个框框是不是被另一个大框框完全包住，大框框是从(0, 0)到(5, 5)，结果叫做is_contained。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3615, "question_en": "Use those coordinates to draw a little box, with (2, 2) as the bottom left and (3, 3) as the top right, and see if this box is entirely covered by another larger box, which goes from (0, 0) to (5, 5), naming the result as is_contained."}
{"id": 729, "function": "~(geometry,box2df)", "question": "看看那个以1 1为中心、半径为10的小圆是不是完全包住了左下角是0,0，右上角是2,2的那个长方形？用真假的方式说一下。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) ~ ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3619, "question_en": "Check if the little circle centered at 1,1 with a radius of 10 completely covers the rectangle with corners at 0,0 and 2,2. Tell me with true or false."}
{"id": 729, "function": "~(geometry,box2df)", "question": "想象一个圆心在(1,1)的小圆圈，半径是10，你能说这个圆圈是不是把从(0,0)到(2,2)的那个长方形给包住了吗？", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) ~ ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3621, "question_en": "Imagine a little circle centered at (1,1) with a radius of 10. Can you say if this circle wraps around the rectangle going from (0,0) to (2,2)?"}
{"id": 727, "function": "@(box2df,box2df)", "question": "有两个由小点围成的长方形，第一个小点在(2, 2)和(3, 3)之间，另一个在(0, 0)和(5, 5)之间。看看第一个长方形是不是完全在另一个里面。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3616, "question_en": "There are two rectangles made by little points, the first one between (2, 2) and (3, 3), and the other between (0, 0) and (5, 5). See if the first rectangle is entirely within the other."}
{"id": 729, "function": "~(geometry,box2df)", "question": "看看围绕1和1的那个点的10单位范围是否能把从0到2的那些坐标框住，给个是或不是的结果。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) ~ ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3618, "question_en": "See if the 10-unit range around the point at 1 and 1 can enclose those coordinates from 0 to 2, and give a yes or no result."}
{"id": 729, "function": "~(geometry,box2df)", "question": "看看围绕着小点(1 1)形成的10单位范围是否把那个从(0,0)到(2,2)的区域包在里面，结果要是对还是错。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) ~ ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3620, "question_en": "Check if the 10-unit area around the little dot (1 1) includes that region from (0,0) to (2,2), and the result should be true or false."}
{"id": 730, "function": "~(box2df,geometry)", "question": "看看从点(0,0)到点(5,5)画出来的方形，会不会完全包住点(2 2)周围1单位的范围，这个结果是对还是错？", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3624, "question_en": "Check if the square drawn from point (0,0) to point (5,5) completely encloses the area around point (2 2) with a 1-unit radius. Is the result true or false?"}
{"id": 727, "function": "@(box2df,box2df)", "question": "用一个点在(2, 2)和另一个点在(3, 3)画出一个小框，然后再用一个点在(0, 0)和另一个点在(5, 5)画出一个更大的框，看看小框是不是完全躲在大框里面，结果是个对或者错的答案，叫做is_contained。", "sql": "SELECT ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) @ ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) AS is_contained;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3617, "question_en": "Draw a small box using one point at (2, 2) and another point at (3, 3), then draw a bigger box using one point at (0, 0) and another point at (5, 5). Check if the small box is entirely hiding inside the big box, and the result is a true or false answer called is_contained."}
{"id": 730, "function": "~(box2df,geometry)", "question": "看看从(0,0)到(5,5)的方形能不能完全装下围绕着(2 2)的小圆圈，那个圈有1的半径哦，结果要是个对错的答案。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3625, "question_en": "Check if the square stretching from (0,0) to (5,5) can completely fit around the little circle centered at (2 2) with a radius of 1, and the answer should be true or false."}
{"id": 730, "function": "~(box2df,geometry)", "question": "从这些点0 0和5 5出发，画一个包围它们的框。然后从文字中找到那个点2 2，围绕它画一个圈。看看这个框能不能完全包住那个圈。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3629, "question_en": "Starting from these points 0 0 and 5 5, draw a box that surrounds them. Then find that point 2 2 from the text and draw a circle around it. See if the box can completely cover that circle."}
{"id": 730, "function": "~(box2df,geometry)", "question": "看看从点(0,0)到点(5,5)的那个方形，是否把以点(2,2)为中心扩展1单位距离的区域给包住了，结果是对还是错呢？", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3626, "question_en": "Check if that square stretching from point (0,0) to point (5,5) manages to cover the area extended 1 unit distance around point (2,2), is the result true or false?"}
{"id": 730, "function": "~(box2df,geometry)", "question": "用底下某个地方(0 0)和上面某个地方(5 5)画个框，看看这个框能不能完全罩住一个以某点(2 2)为中心、伸展1单位的小圆圈。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3627, "question_en": "Using a bottom spot at (0 0) and a top spot at (5 5) to draw a box, check if this box can fully cover a small circle centered at some point (2 2) that stretches 1 unit."}
{"id": 729, "function": "~(geometry,box2df)", "question": "想象一个坐标在(1,1)的小点，围绕这个小点画一个半径为10的圆，看看这个圆能不能把(0,0)和(2,2)这两个点连成的长方形全部盖住。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) ~ ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3623, "question_en": "Imagine a little dot at (1,1), draw a circle with a radius of 10 around it, and see if this circle can entirely cover the rectangle formed by connecting the points (0,0) and (2,2)."}
{"id": 730, "function": "~(box2df,geometry)", "question": "先用那些(0,0)和(5,5)的小点弄个大框，然后看看这个框能不能完全包住一个把(2,2)点吹大1单位后形成的圆圈。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_Buffer(ST_GeomFromText('POINT(2 2)'), 1) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3628, "question_en": "First, use those little dots at (0,0) and (5,5) to make a big box, then see if this box can fully cover a circle made by puffing up the point (2,2) by 1 unit."}
{"id": 729, "function": "~(geometry,box2df)", "question": "从那些文本坐标做出一个在(1 1)的小点，然后围绕它画一个距离10的圈。看看这个圈能不能把从(0,0)到(2,2)的框框包起来。", "sql": "SELECT ST_Buffer(ST_GeomFromText('POINT(1 1)'), 10) ~ ST_MakeBox2D(ST_Point(0,0), ST_Point(2,2)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3622, "question_en": "Make a little dot at (1 1) from those text coordinates, then draw a circle around it with a distance of 10. See if this circle can wrap around the box from (0,0) to (2,2)."}
{"id": 731, "function": "~(box2df,box2df)", "question": "看看第一个从(0, 0)到(5, 5)的方块能不能把那个从(2, 2)到(3, 3)的小方块完全包住，结果用对错来表示。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3631, "question_en": "Check if the first square from (0, 0) to (5, 5) can completely cover that smaller square from (2, 2) to (3, 3), and show the result as true or false."}
{"id": 731, "function": "~(box2df,box2df)", "question": "看看那些两组点的框框，一个从(0, 0)到(5, 5)，另一个从(2, 2)到(3, 3)，大的那个是不是把小的那个包在里面。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3632, "question_en": "Check if the frame from (0, 0) to (5, 5) completely wraps around the one from (2, 2) to (3, 3)."}
{"id": 731, "function": "~(box2df,box2df)", "question": "用一个从(0, 0)到(5, 5)的小方框，看看它能不能把从(2, 2)到(3, 3)的那个小方框完全装下，结果叫做contains。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3633, "question_en": "With a little box stretching from (0, 0) to (5, 5), see if it can completely fit the other little box going from (2, 2) to (3, 3), calling the result contains."}
{"id": 731, "function": "~(box2df,box2df)", "question": "想象两个小区域，第一个是从(0, 0)到(5, 5)，另一个是从(2, 2)到(3, 3)。看看第一个区域能不能把第二个区域完全装下，给个是或不是的答案，叫做contains。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3634, "question_en": "Imagine two small areas, the first one stretches from (0, 0) to (5, 5), and the other from (2, 2) to (3, 3). See if the first area can completely fit the second one inside, and give a yes or no answer, called contains."}
{"id": 731, "function": "~(box2df,box2df)", "question": "画两个小区域，一个从(0, 0)到(5, 5)，另一个从(2, 2)到(3, 3)，看看第一个是不是完全罩住了第二个，结果叫做contains。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3635, "question_en": "Draw two small areas, one from (0, 0) to (5, 5), and another from (2, 2) to (3, 3), and see if the first one completely covers the second one, calling the result 'contains'."}
{"id": 733, "function": " ST_IsPolygonCCW", "question": "看看那个由两圈坐标构成的图形，外面一圈是(0 0,0 10,10 10,10 0,0 0)，里面小圈是(2 2,4 2,4 4,2 4,2 2)，它们的走向是不是外圈逆时针而内圈顺时针呢？", "sql": "SELECT ST_IsPolygonCCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3637, "question_en": "Check if the shape made by two loops of coordinates, with the outer loop being (0 0,0 10,10 10,10 0,0 0) and the inner small loop being (2 2,4 2,4 4,2 4,2 2), has the outer loop going counterclockwise and the inner loop going clockwise?"}
{"id": 733, "function": " ST_IsPolygonCCW", "question": "看看这个形状，边界是从(0 0)到(0 10)，再到(10 10)，然后到(10 0)，回到起点(0 0)的，是不是外面绕圈是反方向，里面的小圈是顺方向？", "sql": "SELECT ST_IsPolygonCCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3636, "question_en": "Check if this shape, with a boundary going from (0 0) to (0 10), then to (10 10), then to (10 0), and back to the start at (0 0), has the outer loop going backwards and the inner loop going forwards?"}
{"id": 733, "function": " ST_IsPolygonCCW", "question": "弄一个那种外面是(0 0, 0 10, 10 10, 10 0, 0 0)的小圈圈，里面是(2 2, 4 2, 4 4, 2 4, 2 2)的小圈圈，看看外面的那圈是不是逆时针绕，里面的那圈是不是顺时针绕。", "sql": "SELECT ST_IsPolygonCCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3641, "question_en": "Make one of those shapes with an outer circle at (0 0, 0 10, 10 10, 10 0, 0 0) and an inner circle at (2 2, 4 2, 4 4, 2 4, 2 2), and see if the outer one goes counter-clockwise and the inner one goes clockwise."}
{"id": 734, "function": "ST_IsPolygonCW", "question": "看看那种有外边顶点排成(0 0,0 10,10 10,10 0,0 0)和里边顶点排成(2 2,4 2,4 4,2 4,2 2)的图形，外边是不是顺着走而里边反着走，给个对错的答案。", "sql": "SELECT ST_IsPolygonCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3642, "question_en": "Take a look at the shape with outside points arranged as (0 0,0 10,10 10,10 0,0 0) and inside points arranged as (2 2,4 2,4 4,2 4,2 2), and check if the outer part goes around and the inner part goes reverse, give a true or false answer."}
{"id": 733, "function": " ST_IsPolygonCCW", "question": "怎么判断一个用这些点构成的多边形有没有按照外圈逆时针，内圈顺时针的规则来排？外圈是0 0到0 10到10 10到10 0再回到0 0，内圈是2 2到4 2到4 4到2 4再到2 2。", "sql": "SELECT ST_IsPolygonCCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3640, "question_en": "How can you tell if a shape made from these points follows the rule of going around the outside counter-clockwise and the inside clockwise? The outer path is 0 0 to 0 10 to 10 10 to 10 0 and back to 0 0, and the inner path is 2 2 to 4 2 to 4 4 to 2 4 and back to 2 2."}
{"id": 733, "function": " ST_IsPolygonCCW", "question": "看看由这些点(0 0,0 10,10 10,10 0,0 0)和(2 2,4 2,4 4,2 4,2 2)围成的形状，外面的绕法和里面的小圈圈是不是一个反一个正？", "sql": "SELECT ST_IsPolygonCCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3639, "question_en": "Check if the shape made by these points (0 0,0 10,10 10,10 0,0 0) and (2 2,4 2,4 4,2 4,2 2) has the outer path going one way and the inner tiny loop going the opposite?"}
{"id": 733, "function": " ST_IsPolygonCCW", "question": "看看这个多边形的外面那些点是不是绕着逆着走，而里面的小圈是不是顺着走，结果要是对或者错就行：POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))。", "sql": "SELECT ST_IsPolygonCCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[false]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3638, "question_en": "Check if the outer points of this shape are going in a backward circle, and the small inside loop goes forward, just need a true or false: POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))."}
{"id": 734, "function": "ST_IsPolygonCW", "question": "看看由那些(0 0,0 10,10 10,10 0,0 0)和(2 2,4 2,4 4,2 4,2 2)组成的图形是不是外面顺着转，里面逆着转的那种。", "sql": "SELECT ST_IsPolygonCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3643, "question_en": "Check if the shape made by those (0 0,0 10,10 10,10 0,0 0) and (2 2,4 2,4 4,2 4,2 2) coordinates is the type where the outside goes around one way and the inside goes the opposite."}
{"id": 734, "function": "ST_IsPolygonCW", "question": "有一个形状由这些点构成：外面是(0 0,0 10,10 10,10 0,0 0)，里面是(2 2,4 2,4 4,2 4,2 2)，看看外面的点是不是绕着顺时针，而里面的点是不是绕着逆时针走。", "sql": "SELECT ST_IsPolygonCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3645, "question_en": "There's a shape made of these dots: outside is (0 0,0 10,10 10,10 0,0 0), inside is (2 2,4 2,4 4,2 4,2 2). Check if the outside dots go around clockwise and the inside dots go around counterclockwise."}
{"id": 734, "function": "ST_IsPolygonCW", "question": "看看那个有外圈小点(0 0,0 10,10 10,10 0,0 0)和内圈小点(2 2,4 2,4 4,2 4,2 2)的大形状，外圈是不是顺着时钟走，内圈是不是反着时钟走。", "sql": "SELECT ST_IsPolygonCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3647, "question_en": "Check if the big shape with outer little dots (0 0,0 10,10 10,10 0,0 0) and inner little dots (2 2,4 2,4 4,2 4,2 2) goes clockwise on the outside and counter-clockwise on the inside."}
{"id": 735, "function": "ST_NumInteriorRing", "question": "看看那个形状，包含这些点：0 0到10 10，再到10 0和回到起点，里面有多少个小圈圈呢？比如像在2 2到4 4之间，或者6 6到8 8之间的那些圈圈。", "sql": "SELECT ST_NumInteriorRing(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2),\n    (6 6, 8 6, 8 8, 6 8, 6 6)\n  )')\n);", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3648, "question_en": "Look at that shape, including these points: from 0 0 to 10 10, then to 10 0 and back to the start, how many little loops are inside? Like those between 2 2 to 4 4, or 6 6 to 8 8."}
{"id": 734, "function": "ST_IsPolygonCW", "question": "怎么判断一个包含外面和里面环绕的小点组成的图形，外面是顺着转，里面是反着转？外面的点是(0 0)、(0 10)、(10 10)、(10 0)、(0 0)，里面的小点是(2 2)、(4 2)、(4 4)、(2 4)、(2 2)。", "sql": "SELECT ST_IsPolygonCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3646, "question_en": "How can you figure out if a shape made of outer and inner looping little dots follows the rule where the outer goes clockwise and the inner goes counterclockwise? The outer dots are (0 0), (0 10), (10 10), (10 0), (0 0), and the inner dots are (2 2), (4 2), (4 4), (2 4), (2 2)."}
{"id": 734, "function": "ST_IsPolygonCW", "question": "看看这个有外边界点(0 0,0 10,10 10,10 0,0 0)和内部孔洞边界点(2 2,4 2,4 4,2 4,2 2)的形状，是不是外面绕圈圈顺时针，里面绕圈圈逆时针？", "sql": "SELECT ST_IsPolygonCW(\n  ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))')\n);", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3644, "question_en": "Check if this shape with the outer boundary points (0 0,0 10,10 10,10 0,0 0) and inner hole boundary points (2 2,4 2,4 4,2 4,2 2) goes around clockwise on the outside and counter-clockwise on the inside?"}
{"id": 735, "function": "ST_NumInteriorRing", "question": "在由外边框(0 0, 0 10, 10 10, 10 0, 0 0)和里面两个小圈圈(2 2, 4 2, 4 4, 2 4, 2 2)及(6 6, 8 6, 8 8, 6 8, 6 6)组成的形状里，数一数有多少个里面的小圈圈，并且告诉我这个数字。", "sql": "SELECT ST_NumInteriorRing(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2),\n    (6 6, 8 6, 8 8, 6 8, 6 6)\n  )')\n);", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3649, "question_en": "In the shape made by the outer border (0 0, 0 10, 10 10, 10 0, 0 0) and two little loops inside (2 2, 4 2, 4 4, 2 4, 2 2) and (6 6, 8 6, 8 8, 6 8, 6 6), count how many little loops are inside and tell me the number."}
{"id": 731, "function": "~(box2df,box2df)", "question": "看看那个从(0, 0)到(5, 5)的四角形，是不是把(2, 2)到(3, 3)的那个小方块整个包住了，给个是或不是的答案。", "sql": "SELECT ST_MakeBox2D(ST_Point(0,0), ST_Point(5,5)) ~ ST_MakeBox2D(ST_Point(2,2), ST_Point(3,3)) AS contains;", "execution_result": [[true]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3630, "question_en": "See if the quadrilateral from (0, 0) to (5, 5) completely wraps around the little square from (2, 2) to (3, 3), and give a yes or no answer."}
{"id": 736, "function": "ST_ForcePolygonCCW", "question": "用那些点0 0→10 0→10 10→0 10→0 0和2 2→2 4→4 4→4 2→2 2 2做个形状，外面绕一圈，里面绕另一圈，然后告诉我它长啥样。", "sql": "SELECT ST_AsText(ST_ForcePolygonCCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 10 0, 10 10, 0 10, 0 0),\n    (2 2, 2 4, 4 4, 4 2, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 4,4 4,4 2,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3658, "question_en": "With those points 0 0→10 0→10 10→0 10→0 0 and 2 2→2 4→4 4→4 2→2 2, make a shape, go around the outside one way and the inside the other way, then tell me what it looks like."}
{"id": 736, "function": "ST_ForcePolygonCCW", "question": "给定一些坐标，想知道它们形成的形状在外边是逆时针，里面是顺时针的样子，能不能给我看看这个形状的文本格式？外面的点是(0 0, 10 0, 10 10, 0 10, 0 0)，里面的点是(2 2, 2 4, 4 4, 4 2, 2 2)。", "sql": "SELECT ST_AsText(ST_ForcePolygonCCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 10 0, 10 10, 0 10, 0 0),\n    (2 2, 2 4, 4 4, 4 2, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 4,4 4,4 2,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3654, "question_en": "Given some coordinates, I want to see what the shape looks like when the outer part goes counter-clockwise and the inner part goes clockwise, can you show me the text format of this shape? The outer points are (0 0, 10 0, 10 10, 0 10, 0 0), and the inner points are (2 2, 2 4, 4 4, 4 2, 2 2)."}
{"id": 735, "function": "ST_NumInteriorRing", "question": "怎样找出一个多边形的内部小圈圈数，这个多边形外面有个大的方块圈[0 0→0 10→10 10→10 0→0 0]，里面藏着两个小圈圈[2 2→4 2→4 4→2 4→2 2]和[6 6→8 6→8 8→6 8→6 6]？", "sql": "SELECT ST_NumInteriorRing(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2),\n    (6 6, 8 6, 8 8, 6 8, 6 6)\n  )')\n);", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3652, "question_en": "How can you find out the number of little loops inside a big square shape with corners at [0 0→0 10→10 10→10 0→0 0], where two smaller loops are hidden inside at [2 2→4 2→4 4→2 4→2 2] and [6 6→8 6→8 8→6 8→6 6]?"}
{"id": 736, "function": "ST_ForcePolygonCCW", "question": "想象一个由这些坐标组成的形状：外面是0 0, 10 0, 10 10, 0 10, 0 0，而里面有2 2, 2 4, 4 4, 4 2, 2 2。调整它们的方向，让外面的绕着圈走，里面的小圈朝着时钟，然后用一种文本格式来描述它。", "sql": "SELECT ST_AsText(ST_ForcePolygonCCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 10 0, 10 10, 0 10, 0 0),\n    (2 2, 2 4, 4 4, 4 2, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 4,4 4,4 2,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3657, "question_en": "Imagine a shape made from these coordinates: outside is 0 0, 10 0, 10 10, 0 10, 0 0, and inside has 2 2, 2 4, 4 4, 4 2, 2 2. Adjust their directions so the outside goes around, and the inside little loop follows the clock, then describe it in a text format."}
{"id": 735, "function": "ST_NumInteriorRing", "question": "有一个大概围起来的形状，外面是(0 0, 0 10, 10 10, 10 0, 0 0)，里面有些小圈圈，比如(2 2, 4 2, 4 4, 2 4, 2 2)还有(6 6, 8 6, 8 8, 6 8, 6 6)，想知道里面的小圈圈有多少个。", "sql": "SELECT ST_NumInteriorRing(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2),\n    (6 6, 8 6, 8 8, 6 8, 6 6)\n  )')\n);", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3651, "question_en": "There's a shape that's kind of enclosed, with an outside part at (0 0, 0 10, 10 10, 10 0, 0 0), and inside there are some small loops, like (2 2, 4 2, 4 4, 2 4, 2 2) and (6 6, 8 6, 8 8, 6 8, 6 6). I want to know how many small loops are inside."}
{"id": 736, "function": "ST_ForcePolygonCCW", "question": "想象一个带洞的形状，用那些坐标来画。外面的边是从(0 0)到(10 0)再到(10 10)然后到(0 10)最后回到(0 0)，里面的小圈是从(2 2)到(2 4)再到(4 4)然后到(4 2)最后回到(2 2)。外面绕着走，里面反着走。", "sql": "SELECT ST_AsText(ST_ForcePolygonCCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 10 0, 10 10, 0 10, 0 0),\n    (2 2, 2 4, 4 4, 4 2, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 4,4 4,4 2,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3655, "question_en": "Imagine a shape with a hole, drawn using those coordinates. The outer edge goes from (0 0) to (10 0), then to (10 10), then to (0 10), and finally back to (0 0). The inner small circle goes from (2 2) to (2 4), then to (4 4), then to (4 2), and finally back to (2 2). Walk around the outside, and reverse inside."}
{"id": 735, "function": "ST_NumInteriorRing", "question": "有一个多边形，它的外边界是那些点(0 0,0 10,10 10,10 0,0 0)，还有两个小空心区域在里面，一个在(2 2,4 2,4 4,2 4,2 2)，另一个在(6 6,8 6,8 8,6 8,6 6)。这个形状里有多少个内部圈圈呢？", "sql": "SELECT ST_NumInteriorRing(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2),\n    (6 6, 8 6, 8 8, 6 8, 6 6)\n  )')\n);", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3653, "question_en": "There's a polygon with an outer edge marked by points (0 0,0 10,10 10,10 0,0 0), and inside, there are two small hollow zones, one at (2 2,4 2,4 4,2 4,2 2) and another at (6 6,8 6,8 8,6 8,6 6). How many inner loops does this shape have?"}
{"id": 736, "function": "ST_ForcePolygonCCW", "question": "有个形状，它有个大圈是(0 0, 10 0, 10 10, 0 10, 0 0)，里面还有个小圈是(2 2, 2 4, 4 4, 4 2, 2 2)。能不能把大圈绕左边转，小圈绕右边转，然后告诉我这个形状的标准写法？", "sql": "SELECT ST_AsText(ST_ForcePolygonCCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 10 0, 10 10, 0 10, 0 0),\n    (2 2, 2 4, 4 4, 4 2, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 4,4 4,4 2,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3656, "question_en": "There's a shape with a big loop at (0 0, 10 0, 10 10, 0 10, 0 0) and a small loop inside at (2 2, 2 4, 4 4, 4 2, 2 2). Can you make the big loop go left and the small loop go right, then tell me the standard way to write this shape?"}
{"id": 737, "function": "ST_ForcePolygonCW", "question": "把有个外圈(0 0, 0 10, 10 10, 10 0, 0 0)和一个内圈(2 2, 4 2, 4 4, 2 4, 2 2)的小图形，变成顺时针走的样子，然后看看它的标准样子是啥。", "sql": "SELECT ST_AsText(ST_ForcePolygonCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3662, "question_en": "Take that shape with an outer loop (0 0, 0 10, 10 10, 10 0, 0 0) and an inner loop (2 2, 4 2, 4 4, 2 4, 2 2), make it go clockwise, and then see what its standard look is."}
{"id": 736, "function": "ST_ForcePolygonCCW", "question": "有一个多边形，它有外面的边界和里面的边界，外面的那些点是[0,0][10,0][10,10][0,10]，里面的点是[2,2][2,4][4,4][4,2]。你得确保外面的边走逆时针，里面的边走顺时针，然后给我看它是啥样的。", "sql": "SELECT ST_AsText(ST_ForcePolygonCCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 10 0, 10 10, 0 10, 0 0),\n    (2 2, 2 4, 4 4, 4 2, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 4,4 4,4 2,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3659, "question_en": "There's a polygon with an outer boundary and an inner boundary, where the outer dots are [0,0][10,0][10,10][0,10], and the inner dots are [2,2][2,4][4,4][4,2]. You need to make sure the outer path goes counterclockwise and the inner path goes clockwise, then show me what it looks like."}
{"id": 737, "function": "ST_ForcePolygonCW", "question": "把那些带有外圈点(0 0, 0 10, 10 10, 10 0, 0 0)和内圈点(2 2, 4 2, 4 4, 2 4, 2 2)的小图形，弄成一个顺时针的样子，然后说出它的形状。", "sql": "SELECT ST_AsText(ST_ForcePolygonCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3660, "question_en": "Take those little shapes with outer points (0 0, 0 10, 10 10, 10 0, 0 0) and inner points (2 2, 4 2, 4 4, 2 4, 2 2), make it look like it's going clockwise, then tell its shape."}
{"id": 735, "function": "ST_NumInteriorRing", "question": "在一个形状中，外面是由(0 0, 0 10, 10 10, 10 0, 0 0)这些点围成的，然后里面有两个小圈圈，分别用(2 2, 4 2, 4 4, 2 4, 2 2)和(6 6, 8 6, 8 8, 6 8, 6 6)围起来，数数里面有多少个小圈圈。", "sql": "SELECT ST_NumInteriorRing(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2),\n    (6 6, 8 6, 8 8, 6 8, 6 6)\n  )')\n);", "execution_result": [[2]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3650, "question_en": "In a shape where the outside is made up of points like (0 0, 0 10, 10 10, 10 0, 0 0), and inside there are two small loops, enclosed by (2 2, 4 2, 4 4, 2 4, 2 2) and (6 6, 8 6, 8 8, 6 8, 6 6), count how many small loops are inside."}
{"id": 737, "function": "ST_ForcePolygonCW", "question": "把那个用文字描述的多边形，外面和里面都有一圈点，分别是0 0, 0 10, 10 10, 10 0, 0 0和2 2, 4 2, 4 4, 2 4, 2 2，调整一下方向，让它们顺时针转，然后用某种格式说出来。", "sql": "SELECT ST_AsText(ST_ForcePolygonCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3663, "question_en": "Take that polygon described in words, with outer and inner loops of points at 0 0, 0 10, 10 10, 10 0, 0 0 and 2 2, 4 2, 4 4, 2 4, 2 2, tweak the direction so they go clockwise, and then say it in some format."}
{"id": 737, "function": "ST_ForcePolygonCW", "question": "怎么让一个有外面边界是(0,0)(0,10)(10,10)(10,0)和里面边界是(2,2)(4,2)(4,4)(2,4)的图形转成顺时针，然后说出它的WKT格式？", "sql": "SELECT ST_AsText(ST_ForcePolygonCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3664, "question_en": "How do you make a shape with an outer boundary of (0,0)(0,10)(10,10)(10,0) and an inner boundary of (2,2)(4,2)(4,4)(2,4) turn clockwise, and then tell its WKT format?"}
{"id": 737, "function": "ST_ForcePolygonCW", "question": "想象一个有小洞的形状，用那些坐标来画外边界是(0 0, 0 10, 10 10, 10 0, 0 0)，里面的小圈圈是(2 2, 4 2, 4 4, 2 4, 2 2)，记得让它们顺时针排列。", "sql": "SELECT ST_AsText(ST_ForcePolygonCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3661, "question_en": "Imagine a shape with a tiny hole, using those coordinates to draw the outer boundary as (0 0, 0 10, 10 10, 10 0, 0 0), and the little circle inside as (2 2, 4 2, 4 4, 2 4, 2 2), remember to make them go clockwise."}
{"id": 738, "function": "ST_ForceSFS", "question": "把那些坐标(0 0, 1 1, 1 0)画成圆弧线，然后变成一个大家都能理解的形状描述。", "sql": "SELECT ST_AsText(ST_ForceSFS(\n  ST_GeomFromText('CIRCULARSTRING(0 0, 1 1, 1 0)')\n));", "execution_result": [["LINESTRING(0 0,-0.023931565266295 0.025136109061123,-0.046600933500879 0.051416206828682,-0.067953492210071 0.07877698224529,-0.087937801209679 0.107152520806449,-0.106505716548904 0.13647446335436,-0.123612506493336 0.166672170761127,-0.13921695928762 0.1976728941046,-0.153281482438188 0.229401949926901,-0.165772193276863 0.261782900153419,-0.176659000587176 0.294737736238821,-0.185915677096747 0.328187067096475,-0.193519922661074 0.362050310358528,-0.199453417986539 0.396245886505894,-0.203701868763191 0.430691415400454,-0.206255040100989 0.46530391474603,-0.207106781186548 0.5,-0.206255040100989 0.53469608525397,-0.203701868763191 0.569308584599546,-0.199453417986539 0.603754113494106,-0.193519922661074 0.637949689641472,-0.185915677096747 0.671812932903525,-0.176659000587176 0.705262263761178,-0.165772193276863 0.73821709984658,-0.153281482438188 0.770598050073098,-0.13921695928762 0.8023271058954,-0.123612506493336 0.833327829238873,-0.106505716548904 0.86352553664564,-0.08793780120968 0.892847479193551,-0.067953492210071 0.92122301775471,-0.046600933500879 0.948583793171318,-0.023931565266295 0.974863890938877,-1.110223024625156e-16 1,0.025136109061123 1.023931565266295,0.051416206828682 1.046600933500879,0.07877698224529 1.067953492210072,0.107152520806449 1.087937801209679,0.13647446335436 1.106505716548904,0.166672170761127 1.123612506493336,0.197672894104599 1.13921695928762,0.229401949926901 1.153281482438188,0.261782900153419 1.165772193276862,0.294737736238821 1.176659000587176,0.328187067096475 1.185915677096747,0.362050310358528 1.193519922661074,0.396245886505894 1.199453417986539,0.430691415400454 1.203701868763191,0.46530391474603 1.206255040100989,0.5 1.207106781186548,0.53469608525397 1.206255040100989,0.569308584599545 1.203701868763191,0.603754113494105 1.199453417986539,0.637949689641472 1.193519922661074,0.671812932903525 1.185915677096747,0.705262263761178 1.176659000587176,0.738217099846581 1.165772193276862,0.770598050073099 1.153281482438188,0.8023271058954 1.13921695928762,0.833327829238873 1.123612506493336,0.86352553664564 1.106505716548904,0.892847479193551 1.08793780120968,0.921223017754709 1.067953492210072,0.948583793171318 1.046600933500879,0.974863890938877 1.023931565266295,1 1,1.023931565266295 0.974863890938877,1.046600933500879 0.948583793171318,1.067953492210072 0.92122301775471,1.087937801209679 0.892847479193551,1.106505716548904 0.86352553664564,1.123612506493336 0.833327829238874,1.13921695928762 0.802327105895401,1.153281482438188 0.770598050073099,1.165772193276862 0.738217099846581,1.176659000587176 0.705262263761179,1.185915677096747 0.671812932903525,1.193519922661074 0.637949689641472,1.199453417986539 0.603754113494106,1.203701868763191 0.569308584599546,1.206255040100989 0.53469608525397,1.207106781186548 0.5,1.206255040100989 0.46530391474603,1.203701868763191 0.430691415400455,1.199453417986539 0.396245886505894,1.193519922661074 0.362050310358528,1.185915677096747 0.328187067096475,1.176659000587176 0.294737736238822,1.165772193276863 0.26178290015342,1.153281482438188 0.229401949926902,1.13921695928762 0.1976728941046,1.123612506493336 0.166672170761127,1.106505716548904 0.13647446335436,1.08793780120968 0.107152520806449,1.067953492210072 0.078776982245291,1.046600933500879 0.051416206828682,1.023931565266295 0.025136109061123,1 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3666, "question_en": "Take those coordinates (0 0, 1 1, 1 0) and draw them as a curved line, then turn it into a shape description that everyone can understand."}
{"id": 738, "function": "ST_ForceSFS", "question": "把那个圆弧线CIRCULARSTRING(0 0, 1 1, 1 0)转换成另一种简单形态，看看它的文字模样是什么。", "sql": "SELECT ST_AsText(ST_ForceSFS(\n  ST_GeomFromText('CIRCULARSTRING(0 0, 1 1, 1 0)')\n));", "execution_result": [["LINESTRING(0 0,-0.023931565266295 0.025136109061123,-0.046600933500879 0.051416206828682,-0.067953492210071 0.07877698224529,-0.087937801209679 0.107152520806449,-0.106505716548904 0.13647446335436,-0.123612506493336 0.166672170761127,-0.13921695928762 0.1976728941046,-0.153281482438188 0.229401949926901,-0.165772193276863 0.261782900153419,-0.176659000587176 0.294737736238821,-0.185915677096747 0.328187067096475,-0.193519922661074 0.362050310358528,-0.199453417986539 0.396245886505894,-0.203701868763191 0.430691415400454,-0.206255040100989 0.46530391474603,-0.207106781186548 0.5,-0.206255040100989 0.53469608525397,-0.203701868763191 0.569308584599546,-0.199453417986539 0.603754113494106,-0.193519922661074 0.637949689641472,-0.185915677096747 0.671812932903525,-0.176659000587176 0.705262263761178,-0.165772193276863 0.73821709984658,-0.153281482438188 0.770598050073098,-0.13921695928762 0.8023271058954,-0.123612506493336 0.833327829238873,-0.106505716548904 0.86352553664564,-0.08793780120968 0.892847479193551,-0.067953492210071 0.92122301775471,-0.046600933500879 0.948583793171318,-0.023931565266295 0.974863890938877,-1.110223024625156e-16 1,0.025136109061123 1.023931565266295,0.051416206828682 1.046600933500879,0.07877698224529 1.067953492210072,0.107152520806449 1.087937801209679,0.13647446335436 1.106505716548904,0.166672170761127 1.123612506493336,0.197672894104599 1.13921695928762,0.229401949926901 1.153281482438188,0.261782900153419 1.165772193276862,0.294737736238821 1.176659000587176,0.328187067096475 1.185915677096747,0.362050310358528 1.193519922661074,0.396245886505894 1.199453417986539,0.430691415400454 1.203701868763191,0.46530391474603 1.206255040100989,0.5 1.207106781186548,0.53469608525397 1.206255040100989,0.569308584599545 1.203701868763191,0.603754113494105 1.199453417986539,0.637949689641472 1.193519922661074,0.671812932903525 1.185915677096747,0.705262263761178 1.176659000587176,0.738217099846581 1.165772193276862,0.770598050073099 1.153281482438188,0.8023271058954 1.13921695928762,0.833327829238873 1.123612506493336,0.86352553664564 1.106505716548904,0.892847479193551 1.08793780120968,0.921223017754709 1.067953492210072,0.948583793171318 1.046600933500879,0.974863890938877 1.023931565266295,1 1,1.023931565266295 0.974863890938877,1.046600933500879 0.948583793171318,1.067953492210072 0.92122301775471,1.087937801209679 0.892847479193551,1.106505716548904 0.86352553664564,1.123612506493336 0.833327829238874,1.13921695928762 0.802327105895401,1.153281482438188 0.770598050073099,1.165772193276862 0.738217099846581,1.176659000587176 0.705262263761179,1.185915677096747 0.671812932903525,1.193519922661074 0.637949689641472,1.199453417986539 0.603754113494106,1.203701868763191 0.569308584599546,1.206255040100989 0.53469608525397,1.207106781186548 0.5,1.206255040100989 0.46530391474603,1.203701868763191 0.430691415400455,1.199453417986539 0.396245886505894,1.193519922661074 0.362050310358528,1.185915677096747 0.328187067096475,1.176659000587176 0.294737736238822,1.165772193276863 0.26178290015342,1.153281482438188 0.229401949926902,1.13921695928762 0.1976728941046,1.123612506493336 0.166672170761127,1.106505716548904 0.13647446335436,1.08793780120968 0.107152520806449,1.067953492210072 0.078776982245291,1.046600933500879 0.051416206828682,1.023931565266295 0.025136109061123,1 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3667, "question_en": "Transform that circular arc line CIRCULARSTRING(0 0, 1 1, 1 0) into a simpler form and see what its textual appearance is."}
{"id": 738, "function": "ST_ForceSFS", "question": "把那个弯弯的线段CIRCULARSTRING(0 0, 1 1, 1 0)转换成简单的格式，然后用WKT方式表现出来。", "sql": "SELECT ST_AsText(ST_ForceSFS(\n  ST_GeomFromText('CIRCULARSTRING(0 0, 1 1, 1 0)')\n));", "execution_result": [["LINESTRING(0 0,-0.023931565266295 0.025136109061123,-0.046600933500879 0.051416206828682,-0.067953492210071 0.07877698224529,-0.087937801209679 0.107152520806449,-0.106505716548904 0.13647446335436,-0.123612506493336 0.166672170761127,-0.13921695928762 0.1976728941046,-0.153281482438188 0.229401949926901,-0.165772193276863 0.261782900153419,-0.176659000587176 0.294737736238821,-0.185915677096747 0.328187067096475,-0.193519922661074 0.362050310358528,-0.199453417986539 0.396245886505894,-0.203701868763191 0.430691415400454,-0.206255040100989 0.46530391474603,-0.207106781186548 0.5,-0.206255040100989 0.53469608525397,-0.203701868763191 0.569308584599546,-0.199453417986539 0.603754113494106,-0.193519922661074 0.637949689641472,-0.185915677096747 0.671812932903525,-0.176659000587176 0.705262263761178,-0.165772193276863 0.73821709984658,-0.153281482438188 0.770598050073098,-0.13921695928762 0.8023271058954,-0.123612506493336 0.833327829238873,-0.106505716548904 0.86352553664564,-0.08793780120968 0.892847479193551,-0.067953492210071 0.92122301775471,-0.046600933500879 0.948583793171318,-0.023931565266295 0.974863890938877,-1.110223024625156e-16 1,0.025136109061123 1.023931565266295,0.051416206828682 1.046600933500879,0.07877698224529 1.067953492210072,0.107152520806449 1.087937801209679,0.13647446335436 1.106505716548904,0.166672170761127 1.123612506493336,0.197672894104599 1.13921695928762,0.229401949926901 1.153281482438188,0.261782900153419 1.165772193276862,0.294737736238821 1.176659000587176,0.328187067096475 1.185915677096747,0.362050310358528 1.193519922661074,0.396245886505894 1.199453417986539,0.430691415400454 1.203701868763191,0.46530391474603 1.206255040100989,0.5 1.207106781186548,0.53469608525397 1.206255040100989,0.569308584599545 1.203701868763191,0.603754113494105 1.199453417986539,0.637949689641472 1.193519922661074,0.671812932903525 1.185915677096747,0.705262263761178 1.176659000587176,0.738217099846581 1.165772193276862,0.770598050073099 1.153281482438188,0.8023271058954 1.13921695928762,0.833327829238873 1.123612506493336,0.86352553664564 1.106505716548904,0.892847479193551 1.08793780120968,0.921223017754709 1.067953492210072,0.948583793171318 1.046600933500879,0.974863890938877 1.023931565266295,1 1,1.023931565266295 0.974863890938877,1.046600933500879 0.948583793171318,1.067953492210072 0.92122301775471,1.087937801209679 0.892847479193551,1.106505716548904 0.86352553664564,1.123612506493336 0.833327829238874,1.13921695928762 0.802327105895401,1.153281482438188 0.770598050073099,1.165772193276862 0.738217099846581,1.176659000587176 0.705262263761179,1.185915677096747 0.671812932903525,1.193519922661074 0.637949689641472,1.199453417986539 0.603754113494106,1.203701868763191 0.569308584599546,1.206255040100989 0.53469608525397,1.207106781186548 0.5,1.206255040100989 0.46530391474603,1.203701868763191 0.430691415400455,1.199453417986539 0.396245886505894,1.193519922661074 0.362050310358528,1.185915677096747 0.328187067096475,1.176659000587176 0.294737736238822,1.165772193276863 0.26178290015342,1.153281482438188 0.229401949926902,1.13921695928762 0.1976728941046,1.123612506493336 0.166672170761127,1.106505716548904 0.13647446335436,1.08793780120968 0.107152520806449,1.067953492210072 0.078776982245291,1.046600933500879 0.051416206828682,1.023931565266295 0.025136109061123,1 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3668, "question_en": "Turn that curvy line CIRCULARSTRING(0 0, 1 1, 1 0) into a simple form, and show it using WKT style."}
{"id": 739, "function": "ST_BdPolyFromText", "question": "能不能告诉我那些从0 0到10 0围起来的线条在地球上形成的那个封闭区域的文字描述？", "sql": "SELECT ST_AsText(ST_BdPolyFromText(\n  'MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))',\n  4326\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3674, "question_en": "Could you tell me the text description of the enclosed area formed by those lines from 0 0 to 10 0 on the globe?"}
{"id": 737, "function": "ST_ForcePolygonCW", "question": "有个多边形，它有个小洞，外面是从0 0绕到0 10再到10 10然后10 0回到0 0，里面是2 2到4 2再到4 4然后2 4回到2 2，怎么让它的边变得顺时针并拿到那个特定格式的字符串？", "sql": "SELECT ST_AsText(ST_ForcePolygonCW(\n  ST_GeomFromText('POLYGON(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (2 2, 4 2, 4 4, 2 4, 2 2)\n  )')\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0),(2 2,4 2,4 4,2 4,2 2))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3665, "question_en": "There's a polygon with a little hole, going around from 0 0 to 0 10, then to 10 10, and 10 0 back to 0 0; inside it goes from 2 2 to 4 2, then to 4 4, and 2 4 back to 2 2. How can you make its edges go clockwise and get that specific format string?"}
{"id": 738, "function": "ST_ForceSFS", "question": "从一些坐标点，比如(0 0)、(1 1)、(1 0)，弄出一个弯曲的线条，然后让它符合某种标准，最后把它变成一种文本形式。", "sql": "SELECT ST_AsText(ST_ForceSFS(\n  ST_GeomFromText('CIRCULARSTRING(0 0, 1 1, 1 0)')\n));", "execution_result": [["LINESTRING(0 0,-0.023931565266295 0.025136109061123,-0.046600933500879 0.051416206828682,-0.067953492210071 0.07877698224529,-0.087937801209679 0.107152520806449,-0.106505716548904 0.13647446335436,-0.123612506493336 0.166672170761127,-0.13921695928762 0.1976728941046,-0.153281482438188 0.229401949926901,-0.165772193276863 0.261782900153419,-0.176659000587176 0.294737736238821,-0.185915677096747 0.328187067096475,-0.193519922661074 0.362050310358528,-0.199453417986539 0.396245886505894,-0.203701868763191 0.430691415400454,-0.206255040100989 0.46530391474603,-0.207106781186548 0.5,-0.206255040100989 0.53469608525397,-0.203701868763191 0.569308584599546,-0.199453417986539 0.603754113494106,-0.193519922661074 0.637949689641472,-0.185915677096747 0.671812932903525,-0.176659000587176 0.705262263761178,-0.165772193276863 0.73821709984658,-0.153281482438188 0.770598050073098,-0.13921695928762 0.8023271058954,-0.123612506493336 0.833327829238873,-0.106505716548904 0.86352553664564,-0.08793780120968 0.892847479193551,-0.067953492210071 0.92122301775471,-0.046600933500879 0.948583793171318,-0.023931565266295 0.974863890938877,-1.110223024625156e-16 1,0.025136109061123 1.023931565266295,0.051416206828682 1.046600933500879,0.07877698224529 1.067953492210072,0.107152520806449 1.087937801209679,0.13647446335436 1.106505716548904,0.166672170761127 1.123612506493336,0.197672894104599 1.13921695928762,0.229401949926901 1.153281482438188,0.261782900153419 1.165772193276862,0.294737736238821 1.176659000587176,0.328187067096475 1.185915677096747,0.362050310358528 1.193519922661074,0.396245886505894 1.199453417986539,0.430691415400454 1.203701868763191,0.46530391474603 1.206255040100989,0.5 1.207106781186548,0.53469608525397 1.206255040100989,0.569308584599545 1.203701868763191,0.603754113494105 1.199453417986539,0.637949689641472 1.193519922661074,0.671812932903525 1.185915677096747,0.705262263761178 1.176659000587176,0.738217099846581 1.165772193276862,0.770598050073099 1.153281482438188,0.8023271058954 1.13921695928762,0.833327829238873 1.123612506493336,0.86352553664564 1.106505716548904,0.892847479193551 1.08793780120968,0.921223017754709 1.067953492210072,0.948583793171318 1.046600933500879,0.974863890938877 1.023931565266295,1 1,1.023931565266295 0.974863890938877,1.046600933500879 0.948583793171318,1.067953492210072 0.92122301775471,1.087937801209679 0.892847479193551,1.106505716548904 0.86352553664564,1.123612506493336 0.833327829238874,1.13921695928762 0.802327105895401,1.153281482438188 0.770598050073099,1.165772193276862 0.738217099846581,1.176659000587176 0.705262263761179,1.185915677096747 0.671812932903525,1.193519922661074 0.637949689641472,1.199453417986539 0.603754113494106,1.203701868763191 0.569308584599546,1.206255040100989 0.53469608525397,1.207106781186548 0.5,1.206255040100989 0.46530391474603,1.203701868763191 0.430691415400455,1.199453417986539 0.396245886505894,1.193519922661074 0.362050310358528,1.185915677096747 0.328187067096475,1.176659000587176 0.294737736238822,1.165772193276863 0.26178290015342,1.153281482438188 0.229401949926902,1.13921695928762 0.1976728941046,1.123612506493336 0.166672170761127,1.106505716548904 0.13647446335436,1.08793780120968 0.107152520806449,1.067953492210072 0.078776982245291,1.046600933500879 0.051416206828682,1.023931565266295 0.025136109061123,1 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3671, "question_en": "From some coordinates, like (0 0), (1 1), (1 0), create a curvy line, then make it comply with some kind of standard, and finally turn it into a text format."}
{"id": 738, "function": "ST_ForceSFS", "question": "有一段弯弯的线，从(0 0)出发，经过(1 1)，到达(1 0)，把它变成一个符合某种规则的几何形，然后用一种通用的文字形式表达出来。", "sql": "SELECT ST_AsText(ST_ForceSFS(\n  ST_GeomFromText('CIRCULARSTRING(0 0, 1 1, 1 0)')\n));", "execution_result": [["LINESTRING(0 0,-0.023931565266295 0.025136109061123,-0.046600933500879 0.051416206828682,-0.067953492210071 0.07877698224529,-0.087937801209679 0.107152520806449,-0.106505716548904 0.13647446335436,-0.123612506493336 0.166672170761127,-0.13921695928762 0.1976728941046,-0.153281482438188 0.229401949926901,-0.165772193276863 0.261782900153419,-0.176659000587176 0.294737736238821,-0.185915677096747 0.328187067096475,-0.193519922661074 0.362050310358528,-0.199453417986539 0.396245886505894,-0.203701868763191 0.430691415400454,-0.206255040100989 0.46530391474603,-0.207106781186548 0.5,-0.206255040100989 0.53469608525397,-0.203701868763191 0.569308584599546,-0.199453417986539 0.603754113494106,-0.193519922661074 0.637949689641472,-0.185915677096747 0.671812932903525,-0.176659000587176 0.705262263761178,-0.165772193276863 0.73821709984658,-0.153281482438188 0.770598050073098,-0.13921695928762 0.8023271058954,-0.123612506493336 0.833327829238873,-0.106505716548904 0.86352553664564,-0.08793780120968 0.892847479193551,-0.067953492210071 0.92122301775471,-0.046600933500879 0.948583793171318,-0.023931565266295 0.974863890938877,-1.110223024625156e-16 1,0.025136109061123 1.023931565266295,0.051416206828682 1.046600933500879,0.07877698224529 1.067953492210072,0.107152520806449 1.087937801209679,0.13647446335436 1.106505716548904,0.166672170761127 1.123612506493336,0.197672894104599 1.13921695928762,0.229401949926901 1.153281482438188,0.261782900153419 1.165772193276862,0.294737736238821 1.176659000587176,0.328187067096475 1.185915677096747,0.362050310358528 1.193519922661074,0.396245886505894 1.199453417986539,0.430691415400454 1.203701868763191,0.46530391474603 1.206255040100989,0.5 1.207106781186548,0.53469608525397 1.206255040100989,0.569308584599545 1.203701868763191,0.603754113494105 1.199453417986539,0.637949689641472 1.193519922661074,0.671812932903525 1.185915677096747,0.705262263761178 1.176659000587176,0.738217099846581 1.165772193276862,0.770598050073099 1.153281482438188,0.8023271058954 1.13921695928762,0.833327829238873 1.123612506493336,0.86352553664564 1.106505716548904,0.892847479193551 1.08793780120968,0.921223017754709 1.067953492210072,0.948583793171318 1.046600933500879,0.974863890938877 1.023931565266295,1 1,1.023931565266295 0.974863890938877,1.046600933500879 0.948583793171318,1.067953492210072 0.92122301775471,1.087937801209679 0.892847479193551,1.106505716548904 0.86352553664564,1.123612506493336 0.833327829238874,1.13921695928762 0.802327105895401,1.153281482438188 0.770598050073099,1.165772193276862 0.738217099846581,1.176659000587176 0.705262263761179,1.185915677096747 0.671812932903525,1.193519922661074 0.637949689641472,1.199453417986539 0.603754113494106,1.203701868763191 0.569308584599546,1.206255040100989 0.53469608525397,1.207106781186548 0.5,1.206255040100989 0.46530391474603,1.203701868763191 0.430691415400455,1.199453417986539 0.396245886505894,1.193519922661074 0.362050310358528,1.185915677096747 0.328187067096475,1.176659000587176 0.294737736238822,1.165772193276863 0.26178290015342,1.153281482438188 0.229401949926902,1.13921695928762 0.1976728941046,1.123612506493336 0.166672170761127,1.106505716548904 0.13647446335436,1.08793780120968 0.107152520806449,1.067953492210072 0.078776982245291,1.046600933500879 0.051416206828682,1.023931565266295 0.025136109061123,1 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3669, "question_en": "There's a curvy line starting at (0 0), passing through (1 1), and reaching (1 0). Turn it into a geometric shape that follows some rule, then express it in a common text format."}
{"id": 738, "function": "ST_ForceSFS", "question": "怎么把写成CIRCULARSTRING(0 0, 1 1, 1 0)那样的圆形曲线变成一个符合某种标准的形状呢？这个曲线会经过(0 0)、(1 1)、(1 0)这几个点。", "sql": "SELECT ST_AsText(ST_ForceSFS(\n  ST_GeomFromText('CIRCULARSTRING(0 0, 1 1, 1 0)')\n));", "execution_result": [["LINESTRING(0 0,-0.023931565266295 0.025136109061123,-0.046600933500879 0.051416206828682,-0.067953492210071 0.07877698224529,-0.087937801209679 0.107152520806449,-0.106505716548904 0.13647446335436,-0.123612506493336 0.166672170761127,-0.13921695928762 0.1976728941046,-0.153281482438188 0.229401949926901,-0.165772193276863 0.261782900153419,-0.176659000587176 0.294737736238821,-0.185915677096747 0.328187067096475,-0.193519922661074 0.362050310358528,-0.199453417986539 0.396245886505894,-0.203701868763191 0.430691415400454,-0.206255040100989 0.46530391474603,-0.207106781186548 0.5,-0.206255040100989 0.53469608525397,-0.203701868763191 0.569308584599546,-0.199453417986539 0.603754113494106,-0.193519922661074 0.637949689641472,-0.185915677096747 0.671812932903525,-0.176659000587176 0.705262263761178,-0.165772193276863 0.73821709984658,-0.153281482438188 0.770598050073098,-0.13921695928762 0.8023271058954,-0.123612506493336 0.833327829238873,-0.106505716548904 0.86352553664564,-0.08793780120968 0.892847479193551,-0.067953492210071 0.92122301775471,-0.046600933500879 0.948583793171318,-0.023931565266295 0.974863890938877,-1.110223024625156e-16 1,0.025136109061123 1.023931565266295,0.051416206828682 1.046600933500879,0.07877698224529 1.067953492210072,0.107152520806449 1.087937801209679,0.13647446335436 1.106505716548904,0.166672170761127 1.123612506493336,0.197672894104599 1.13921695928762,0.229401949926901 1.153281482438188,0.261782900153419 1.165772193276862,0.294737736238821 1.176659000587176,0.328187067096475 1.185915677096747,0.362050310358528 1.193519922661074,0.396245886505894 1.199453417986539,0.430691415400454 1.203701868763191,0.46530391474603 1.206255040100989,0.5 1.207106781186548,0.53469608525397 1.206255040100989,0.569308584599545 1.203701868763191,0.603754113494105 1.199453417986539,0.637949689641472 1.193519922661074,0.671812932903525 1.185915677096747,0.705262263761178 1.176659000587176,0.738217099846581 1.165772193276862,0.770598050073099 1.153281482438188,0.8023271058954 1.13921695928762,0.833327829238873 1.123612506493336,0.86352553664564 1.106505716548904,0.892847479193551 1.08793780120968,0.921223017754709 1.067953492210072,0.948583793171318 1.046600933500879,0.974863890938877 1.023931565266295,1 1,1.023931565266295 0.974863890938877,1.046600933500879 0.948583793171318,1.067953492210072 0.92122301775471,1.087937801209679 0.892847479193551,1.106505716548904 0.86352553664564,1.123612506493336 0.833327829238874,1.13921695928762 0.802327105895401,1.153281482438188 0.770598050073099,1.165772193276862 0.738217099846581,1.176659000587176 0.705262263761179,1.185915677096747 0.671812932903525,1.193519922661074 0.637949689641472,1.199453417986539 0.603754113494106,1.203701868763191 0.569308584599546,1.206255040100989 0.53469608525397,1.207106781186548 0.5,1.206255040100989 0.46530391474603,1.203701868763191 0.430691415400455,1.199453417986539 0.396245886505894,1.193519922661074 0.362050310358528,1.185915677096747 0.328187067096475,1.176659000587176 0.294737736238822,1.165772193276863 0.26178290015342,1.153281482438188 0.229401949926902,1.13921695928762 0.1976728941046,1.123612506493336 0.166672170761127,1.106505716548904 0.13647446335436,1.08793780120968 0.107152520806449,1.067953492210072 0.078776982245291,1.046600933500879 0.051416206828682,1.023931565266295 0.025136109061123,1 0)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3670, "question_en": "How can you turn something written like CIRCULARSTRING(0 0, 1 1, 1 0) into a shape that fits a certain standard? This curve will pass through the points (0 0), (1 1), and (1 0)."}
{"id": 739, "function": "ST_BdPolyFromText", "question": "用那些连接点创建一个大概的轮廓，像是包围它们的形状，坐标系是4326，然后看看它的WKT形式。", "sql": "SELECT ST_AsText(ST_BdPolyFromText(\n  'MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))',\n  4326\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3672, "question_en": "Use those connecting points to create a rough outline, like a shape that surrounds them, with the coordinate system being 4326, and then check its WKT form."}
{"id": 739, "function": "ST_BdPolyFromText", "question": "你怎么用那些线段(0 0, 0 10, 10 10, 10 0, 0 0)画出一个把它们圈住的形状，用4326的地图编号来看看，结果要用一种特别的文字方式呈现呢？", "sql": "SELECT ST_AsText(ST_BdPolyFromText(\n  'MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))',\n  4326\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3675, "question_en": "How do you use those line segments (0 0, 0 10, 10 10, 10 0, 0 0) to draw a shape that encircles them, check it with map number 4326, and present the result in a special text way?"}
{"id": 739, "function": "ST_BdPolyFromText", "question": "把从(0,0)到(0,10)再到(10,10)然后到(10,0)最后回到(0,0)的那些线，用一种方式围成一个完整的图形，并用某种标准格式显示出来，记得用地球上常用的那个坐标系4326。", "sql": "SELECT ST_AsText(ST_BdPolyFromText(\n  'MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))',\n  4326\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3677, "question_en": "Take those lines from (0,0) to (0,10) to (10,10) to (10,0) and finally back to (0,0), form them into a complete shape in some way, and display it in a certain standard format, using that commonly used coordinate system 4326 on Earth."}
{"id": 740, "function": "ST_BdMPolyFromText", "question": "想象一下有些线段，比如从(0 0)到(0 10)，然后绕一圈回来，再有一组从(20 20)到(20 30)又绕回来的。用这些线段在4326的地球坐标下画个包围的形状，能告诉我这个形状的描述吗？", "sql": "SELECT ST_AsText(ST_BdMPolyFromText(\n  'MULTILINESTRING(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (20 20, 20 30, 30 30, 30 20, 20 20)\n  )',\n  4326\n));", "execution_result": [["MULTIPOLYGON(((0 10,10 10,10 0,0 0,0 10)),((20 30,30 30,30 20,20 20,20 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3678, "question_en": "Imagine some line segments, like from (0 0) to (0 10) and then going around, and another set from (20 20) to (20 30) looping back. Using these, draw a surrounding shape in the 4326 earth coordinates and tell me what this shape looks like?"}
{"id": 740, "function": "ST_BdMPolyFromText", "question": "有没有办法用那些闭合的线段变成覆盖它们的图形？第一条从(0 0)出发，经过(0 10)、(10 10)、(10 0)再回到(0 0)；第二条从(20 20)出发，经过(20 30)、(30 30)、(30 20)再回到(20 20)，编号是4326。", "sql": "SELECT ST_AsText(ST_BdMPolyFromText(\n  'MULTILINESTRING(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (20 20, 20 30, 30 30, 30 20, 20 20)\n  )',\n  4326\n));", "execution_result": [["MULTIPOLYGON(((0 10,10 10,10 0,0 0,0 10)),((20 30,30 30,30 20,20 20,20 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3681, "question_en": "Is there a way to turn those closed lines into a shape that covers them? The first one starts at (0 0), goes through (0 10), (10 10), (10 0), and back to (0 0); the second starts at (20 20), goes through (20 30), (30 30), (30 20), and back to (20 20), with the number 4326."}
{"id": 741, "function": "ST_GeographyFromText", "question": "把那个包含数字-71.064544和42.28787的坐标变成一种文字描述格式。", "sql": "SELECT ST_AsText(\n  ST_GeographyFromText('SRID=4326;POINT(-71.064544 42.28787)')\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3684, "question_en": "Turn that coordinate with numbers -71.064544 and 42.28787 into a kind of text description format."}
{"id": 739, "function": "ST_BdPolyFromText", "question": "在一个特别的坐标系统里，把这些连起来的点：0 0, 0 10, 10 10, 10 0, 0 0，想象成一个形状，然后告诉我它的外边框是啥样的文字描述。", "sql": "SELECT ST_AsText(ST_BdPolyFromText(\n  'MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))',\n  4326\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3673, "question_en": "In a special coordinate system, connect these points: 0 0, 0 10, 10 10, 10 0, 0 0, imagine them as a shape, then tell me what its boundary looks like in a text description."}
{"id": 740, "function": "ST_BdMPolyFromText", "question": "把那两条闭合的线条，像(0 0, 0 10, 10 10, 10 0, 0 0)和(20 20, 20 30, 30 30, 30 20, 20 20)，转换成多边形的轮廓，然后用某种文本格式把它们显示出来，记得用EPSG:4326这种坐标方式哦。", "sql": "SELECT ST_AsText(ST_BdMPolyFromText(\n  'MULTILINESTRING(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (20 20, 20 30, 30 30, 30 20, 20 20)\n  )',\n  4326\n));", "execution_result": [["MULTIPOLYGON(((0 10,10 10,10 0,0 0,0 10)),((20 30,30 30,30 20,20 20,20 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3679, "question_en": "Take those two closed lines, like (0 0, 0 10, 10 10, 10 0, 0 0) and (20 20, 20 30, 30 30, 30 20, 20 20), and turn them into the outlines of a shape, then show them in some kind of text format, and don't forget to use that EPSG:4326 coordinate style."}
{"id": 741, "function": "ST_GeographyFromText", "question": "把那两个数字-71.064544和42.28787变成文本形式的地理小点，顺便提一下它们用的4326这个编号。", "sql": "SELECT ST_AsText(\n  ST_GeographyFromText('SRID=4326;POINT(-71.064544 42.28787)')\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3685, "question_en": "Turn those two numbers -71.064544 and 42.28787 into a text form of a little geographic point, and casually mention the number 4326 they use."}
{"id": 741, "function": "ST_GeographyFromText", "question": "把那个在WGS84坐标里的小点，坐标是(-71.064544 42.28787)，变成一种常见格式的字符串。", "sql": "SELECT ST_AsText(\n  ST_GeographyFromText('SRID=4326;POINT(-71.064544 42.28787)')\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3686, "question_en": "Turn that little dot in WGS84 coordinates, located at (-71.064544 42.28787), into a commonly seen format of a string."}
{"id": 740, "function": "ST_BdMPolyFromText", "question": "处理两个方形圈圈，其中一个在(0 0, 0 10, 10 10, 10 0, 0 0)那儿，另一个在(20 20, 20 30, 30 30, 30 20, 20 20)那儿，然后变成一个包含它们的形状的文字，使用4326这个编号。", "sql": "SELECT ST_AsText(ST_BdMPolyFromText(\n  'MULTILINESTRING(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (20 20, 20 30, 30 30, 30 20, 20 20)\n  )',\n  4326\n));", "execution_result": [["MULTIPOLYGON(((0 10,10 10,10 0,0 0,0 10)),((20 30,30 30,30 20,20 20,20 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3680, "question_en": "Handle two square loops, one over at (0 0, 0 10, 10 10, 10 0, 0 0) and the other at (20 20, 20 30, 30 30, 30 20, 20 20), then turn them into a shape that includes them both, using the number 4326."}
{"id": 739, "function": "ST_BdPolyFromText", "question": "有一串小线段从(0 0)到(0 10)再到(10 10)然后到(10 0)又回到起点，怎么把它变成一个包含它们的边界形状，并用某种格式显示出来，还要用编号4326的那个参考系？", "sql": "SELECT ST_AsText(ST_BdPolyFromText(\n  'MULTILINESTRING((0 0, 0 10, 10 10, 10 0, 0 0))',\n  4326\n));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3676, "question_en": "There's a string of little lines going from (0 0) to (0 10) to (10 10) then to (10 0) and back to the start, how to turn it into a boundary shape that includes them, and show it in some format, also using that reference system numbered 4326?"}
{"id": 741, "function": "ST_GeographyFromText", "question": "把那个地方的小点坐标，-71.064544和42.28787，用文字形式表达出来，记得要写完整的经纬度哦。", "sql": "SELECT ST_AsText(\n  ST_GeographyFromText('SRID=4326;POINT(-71.064544 42.28787)')\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3687, "question_en": "Express the coordinates of that little spot, -71.064544 and 42.28787, in a text form, and make sure to include the full longitude and latitude."}
{"id": 741, "function": "ST_GeographyFromText", "question": "如何处理坐标系为4326的地理小点(-71.064544 42.28787)，并把它变成文本形式呢？", "sql": "SELECT ST_AsText(\n  ST_GeographyFromText('SRID=4326;POINT(-71.064544 42.28787)')\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3688, "question_en": "How to handle the little geographic point (-71.064544 42.28787) with coordinate system 4326, and turn it into a text form?"}
{"id": 740, "function": "ST_BdMPolyFromText", "question": "请把那些线条围起来，形成两个四边形，第一个四边形是从(0 0)开始到(0 10)、(10 10)、(10 0)，而第二个是从(20 20)到(20 30)、(30 30)、(30 20)，这些都在一个叫WGS84的坐标系里。", "sql": "SELECT ST_AsText(ST_BdMPolyFromText(\n  'MULTILINESTRING(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (20 20, 20 30, 30 30, 30 20, 20 20)\n  )',\n  4326\n));", "execution_result": [["MULTIPOLYGON(((0 10,10 10,10 0,0 0,0 10)),((20 30,30 30,30 20,20 20,20 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3682, "question_en": "Please enclose those lines to form two quadrilaterals, the first quadrilateral starts from (0 0) to (0 10), (10 10), (10 0), and the second one goes from (20 20) to (20 30), (30 30), (30 20), all within a coordinate system called WGS84."}
{"id": 741, "function": "ST_GeographyFromText", "question": "从这个描述里 'SRID=4326;POINT(-71.064544 42.28787)'，搞一个包含坐标 (-71.064544, 42.28787) 的小点，然后把它变成一种可以读的格式。", "sql": "SELECT ST_AsText(\n  ST_GeographyFromText('SRID=4326;POINT(-71.064544 42.28787)')\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3689, "question_en": "From this description 'SRID=4326;POINT(-71.064544 42.28787)', create a small dot with coordinates (-71.064544, 42.28787) and then turn it into a readable format."}
{"id": 742, "function": "ST_GeometryFromText", "question": "把那些点连接起来的长条形状，像是1 2、3 4和5 6，变成一种可以读出来的文字形式。", "sql": "SELECT ST_AsText(ST_GeometryFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["LINESTRING(1 2,3 4,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3690, "question_en": "Turn those connected points, like 1 2, 3 4, and 5 6, into a readable text form."}
{"id": 742, "function": "ST_GeometryFromText", "question": "给我看看用那些点(1 2)、(3 4)和(5 6)画出来的线的样子，文字形式哦。", "sql": "SELECT ST_AsText(ST_GeometryFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["LINESTRING(1 2,3 4,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3691, "question_en": "Show me how the line looks using those points (1 2), (3 4), and (5 6), in text form."}
{"id": 740, "function": "ST_BdMPolyFromText", "question": "想象一下有两条闭合的线条，第一条从(0 0)走到(0 10)，然后到(10 10)，再到(10 0)，最后回到(0 0)。第二条从(20 20)到(20 30)，然后到(30 30)，再到(30 20)，最后回到(20 20)。奇妙地把它们变成一整个的形状，用4326的特别编号来表达结果。", "sql": "SELECT ST_AsText(ST_BdMPolyFromText(\n  'MULTILINESTRING(\n    (0 0, 0 10, 10 10, 10 0, 0 0),\n    (20 20, 20 30, 30 30, 30 20, 20 20)\n  )',\n  4326\n));", "execution_result": [["MULTIPOLYGON(((0 10,10 10,10 0,0 0,0 10)),((20 30,30 30,30 20,20 20,20 30)))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3683, "question_en": "Imagine two closed lines, the first one goes from (0 0) to (0 10), then to (10 10), to (10 0), and back to (0 0). The second one goes from (20 20) to (20 30), then to (30 30), to (30 20), and back to (20 20). Magically turn them into a whole shape, expressing the result with the special number 4326."}
{"id": 742, "function": "ST_GeometryFromText", "question": "怎么把由三个坐标点组成的折线变成一种标准文本格式呢？这些点是1 2、3 4和5 6。", "sql": "SELECT ST_AsText(ST_GeometryFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["LINESTRING(1 2,3 4,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3693, "question_en": "How can we turn a polyline made of three coordinate points into a standard text format? The points are 1 2, 3 4, and 5 6."}
{"id": 743, "function": "ST_GeometryFromText", "question": "把那种带着4326这个数字的点，像(-71.064544 42.28787)这样的，变成一种常见的文字形式并看看吧。", "sql": "SELECT ST_AsText(ST_GeometryFromText('POINT(-71.064544 42.28787)', 4326));", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3698, "question_en": "Take that point with the number 4326, like (-71.064544 42.28787), and change it into a common text form to have a look."}
{"id": 742, "function": "ST_GeometryFromText", "question": "看看由那些点组成的线，像是1 2, 3 4, 5 6，把它变成某种文本格式。", "sql": "SELECT ST_AsText(ST_GeometryFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["LINESTRING(1 2,3 4,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3694, "question_en": "Take a look at the line made from those points, like 1 2, 3 4, 5 6, and turn it into some kind of text format."}
{"id": 743, "function": "ST_GeometryFromText", "question": "能不能用一种文字格式来描述一个在-71.064544和42.28787位置的小点，那个常用的全球坐标系？", "sql": "SELECT ST_AsText(ST_GeometryFromText('POINT(-71.064544 42.28787)', 4326));", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3697, "question_en": "Could you describe a little dot located at -71.064544 and 42.28787 in a text format, using that common global coordinate system?"}
{"id": 743, "function": "ST_GeometryFromText", "question": "把那个有点像小圆点的东西，它的坐标是-71.064544和42.28787，变成一种可以读的格式，记得用4326的那个标准。", "sql": "SELECT ST_AsText(ST_GeometryFromText('POINT(-71.064544 42.28787)', 4326));", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3696, "question_en": "Take that thing that’s a bit like a small dot, with coordinates -71.064544 and 42.28787, and turn it into a readable format, remember to use the 4326 standard."}
{"id": 743, "function": "ST_GeometryFromText", "question": "用那些数字-71.064544和42.28787弄个小点，然后看看它的普通文本长啥样。", "sql": "SELECT ST_AsText(ST_GeometryFromText('POINT(-71.064544 42.28787)', 4326));", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3701, "question_en": "Use those numbers -71.064544 and 42.28787 to make a little dot, then see what its plain text looks like."}
{"id": 743, "function": "ST_GeometryFromText", "question": "把'POINT(-71.064544 42.28787)'这个点的描述变成一个坐标系感觉像4326的几何形状，然后看看它的文本表示是什么。", "sql": "SELECT ST_AsText(ST_GeometryFromText('POINT(-71.064544 42.28787)', 4326));", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3700, "question_en": "Turn the description 'POINT(-71.064544 42.28787)' into a shape with a coordinate system that feels like 4326, and then see what its text representation looks like."}
{"id": 743, "function": "ST_GeometryFromText", "question": "把那些坐标点(-71.064544 42.28787)放到某个4326的系统里，看看它会变成什么样子，再用同样的格式告诉我们。", "sql": "SELECT ST_AsText(ST_GeometryFromText('POINT(-71.064544 42.28787)', 4326));", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3699, "question_en": "Put those coordinates (-71.064544 42.28787) into some 4326 system, see what it turns into, and tell us in the same format."}
{"id": 742, "function": "ST_GeometryFromText", "question": "有个由三个小点（1 2）、（3 4）、（5 6）组成的线，怎么把它变成一种文本格式来看看呢？", "sql": "SELECT ST_AsText(ST_GeometryFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["LINESTRING(1 2,3 4,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3695, "question_en": "There's a line made up of three little points (1 2), (3 4), (5 6). How can we turn it into some kind of text format to check it out?"}
{"id": 744, "function": "ST_WKTToSQL", "question": "请给我一个用文字表示的形状，它是由这些点组成的：从(0 0)开始，经过(0 10)、(10 10)、(10 0)，最后回到起点。", "sql": "SELECT ST_AsText(ST_WKTToSQL('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))'));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3703, "question_en": "Can you give me a shape described in words, made from these points: starting at (0 0), going through (0 10), (10 10), (10 0), and finally back to the start?"}
{"id": 744, "function": "ST_WKTToSQL", "question": "把那些点连起来形成的形状，用某种方式变成一个对象，然后看看它标准的描述是什么。", "sql": "SELECT ST_AsText(ST_WKTToSQL('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))'));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3702, "question_en": "Take those points that form a shape, turn it into some kind of object, and then see what its standard description is."}
{"id": 744, "function": "ST_WKTToSQL", "question": "试着把那些围成一圈的点(0 0, 0 10, 10 10, 10 0, 0 0)变成某种几何形状，然后告诉我它的完整样子。", "sql": "SELECT ST_AsText(ST_WKTToSQL('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))'));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3704, "question_en": "Try to turn those points that form a circle (0 0, 0 10, 10 10, 10 0, 0 0) into some kind of geometric shape, and then tell me its full appearance."}
{"id": 744, "function": "ST_WKTToSQL", "question": "把那个长方形的坐标数据变成一种能够让系统理解的形式，然后再用原来的方式显示出来。", "sql": "SELECT ST_AsText(ST_WKTToSQL('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))'));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3705, "question_en": "Turn those rectangle coordinates into a form that the system can understand, then show it again in the original way."}
{"id": 745, "function": "ST_WKBToSQL", "question": "以WKT字符串形式显示从二进制WKB数据'\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'转换得到的几何对象。", "sql": "SELECT ST_AsText(\n  ST_WKBToSQL(\n    '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'::bytea\n  )\n);", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3710, "question_en": "Display the geometric object converted from the binary WKB data '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@' as a WKT string."}
{"id": 744, "function": "ST_WKTToSQL", "question": "把那些点围起来形成的形状，像是从文本变成一个实际的东西，再让它变回原来的文字样子，看看这个过程会怎么展现。", "sql": "SELECT ST_AsText(ST_WKTToSQL('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))'));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3706, "question_en": "Take those points that make up a shape, sort of like turning text into a real thing, then change it back to its original text form, and see how this process shows."}
{"id": 745, "function": "ST_WKBToSQL", "question": "看看这个神秘的十六进制代码，想象它变成一个小点，坐标是1.0和2.0，然后说出它的样子。", "sql": "SELECT ST_AsText(\n  ST_WKBToSQL(\n    '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'::bytea\n  )\n);", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3712, "question_en": "Look at this mysterious hexadecimal code, imagine it turning into a little dot with coordinates 1.0 and 2.0, then describe what it looks like."}
{"id": 746, "function": "ST_GMLToSQL", "question": "把那个用GML写的小点数据，坐标是-71.064544和42.28787，变成一种能看懂的文字形式，看看它在哪里。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point srsName=\"EPSG:4326\" xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>'\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3717, "question_en": "Turn that little dot data written in GML, with coordinates -71.064544 and 42.28787, into a readable text form to see where it is."}
{"id": 745, "function": "ST_WKBToSQL", "question": "处理一个神秘的字节串，它是某个二维小点的化身，数字是1和2，然后让它变成我们通常看到的文字模样。", "sql": "SELECT ST_AsText(\n  ST_WKBToSQL(\n    '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'::bytea\n  )\n);", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3713, "question_en": "Handle a mysterious byte string, which embodies a certain 2D little dot, the numbers are 1 and 2, then make it appear in the usual text form we see."}
{"id": 745, "function": "ST_WKBToSQL", "question": "将WKB格式的二进制数据'\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'转换为WKT字符串格式输出。", "sql": "SELECT ST_AsText(\n  ST_WKBToSQL(\n    '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'::bytea\n  )\n);", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3708, "question_en": "Convert the WKB binary data '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@' to WKT string format output."}
{"id": 745, "function": "ST_WKBToSQL", "question": "有一串神秘的代码，像是‘\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@’，能不能看看它变成那些小坐标的样子？", "sql": "SELECT ST_AsText(\n  ST_WKBToSQL(\n    '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'::bytea\n  )\n);", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3711, "question_en": "There's a mysterious string, like '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'. Can you see what it looks like when turned into those little coordinates?"}
{"id": 745, "function": "ST_WKBToSQL", "question": "给我看看这个神秘编码‘\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@’对应的形状是怎样的？", "sql": "SELECT ST_AsText(\n  ST_WKBToSQL(\n    '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'::bytea\n  )\n);", "execution_result": [["POINT(1 2)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3709, "question_en": "Can you show me what shape corresponds to this mysterious code '\\001\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\360?\\000\\000\\000\\000\\000\\000\\000@'?"}
{"id": 746, "function": "ST_GMLToSQL", "question": "有个描述两个小数字位置的东西，用一种格式变成另一种，怎么让它变成一个简单的文本样子呢？", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point srsName=\"EPSG:4326\" xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>'\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3714, "question_en": "There's something describing the location of two small numbers, changing from one format to another, how to make it into a simple text form?"}
{"id": 744, "function": "ST_WKTToSQL", "question": "把那些坐标组成的闭合图形，最开始从(0 0)出发，经过(0 10)、(10 10)和(10 0)后又回到起点，转换成某种内部格式，然后再用同样的方式输出。", "sql": "SELECT ST_AsText(ST_WKTToSQL('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))'));", "execution_result": [["POLYGON((0 0,0 10,10 10,10 0,0 0))"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3707, "question_en": "Take the closed shape made of those coordinates, starting from (0 0), passing through (0 10), (10 10), and (10 0), returning to the start, convert it into some internal format, and output it the same way."}
{"id": 746, "function": "ST_GMLToSQL", "question": "把那个有点像坐标(-71.064544,42.28787)的小点，用一种大家都能读懂的文本格式来表达。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point srsName=\"EPSG:4326\" xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>'\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3716, "question_en": "Take that little dot with coordinates like (-71.064544,42.28787) and express it in a text format that everyone can understand."}
{"id": 746, "function": "ST_GMLToSQL", "question": "把那个在经度-71.064544和纬度42.28787的GML格式的小点，换成标准的文字描述是什么样的？", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point srsName=\"EPSG:4326\" xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>'\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3715, "question_en": "What does the standard text description look like for that little GML point at longitude -71.064544 and latitude 42.28787 when you change it?"}
{"id": 746, "function": "ST_GMLToSQL", "question": "把带有一个特别名字和小数字串的图形转换成一种常见的文本格式，看看它是怎样的坐标。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point srsName=\"EPSG:4326\" xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>'\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3719, "question_en": "Convert a shape with a special name and a small string of numbers into a common text format to see what its coordinates look like."}
{"id": 742, "function": "ST_GeometryFromText", "question": "用一种文本方式来描述那条连接三个点(1 2)、(3 4)、(5 6)的线。", "sql": "SELECT ST_AsText(ST_GeometryFromText('LINESTRING(1 2, 3 4, 5 6)'));", "execution_result": [["LINESTRING(1 2,3 4,5 6)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3692, "question_en": "Describe in a text form the line connecting those three points (1 2), (3 4), (5 6)."}
{"id": 746, "function": "ST_GMLToSQL", "question": "从一个带有一些坐标的小段文字中弄出一个位置，里面提到的经度是-71.064544，纬度是42.28787，然后看看它变成了一种常见格式后是什么样子。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point srsName=\"EPSG:4326\" xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>'\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3718, "question_en": "From a small piece of text with some coordinates, extract a location where the longitude is -71.064544 and latitude is 42.28787, then see what it looks like after it turns into a common format."}
{"id": 747, "function": "ST_GMLToSQL", "question": "把那个有点像(-71.064544,42.28787)的GML里的小点，换成大家都懂的文字描述，用那个全球通用的位置参考系。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>',\n    4326\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3722, "question_en": "Turn that little dot in the GML, which is kind of like (-71.064544,42.28787), into a text description everyone understands, using that globally common reference system."}
{"id": 754, "function": "ST_Length2D", "question": "如果从(0 0)到(3 4)画一条直线，那这条线在平面上有多长呢？", "sql": "SELECT ST_Length2D(ST_GeomFromText('LINESTRING(0 0, 3 4)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3730, "question_en": "If you draw a straight line from (0 0) to (3 4), how long is that line on the plane?"}
{"id": 747, "function": "ST_GMLToSQL", "question": "把那条包含坐标-71.064544和42.28787的小点转换成一种几何形式，然后用某种文本格式表现出来。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>',\n    4326\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3723, "question_en": "Turn that line with coordinates -71.064544 and 42.28787 into some kind of geometric form, then show it in a certain text format."}
{"id": 747, "function": "ST_GMLToSQL", "question": "把那个原来是GML格式的点，位置在经度-71.064544和纬度42.28787，用一种常见文本格式来表达，记得用4326的那种坐标系。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>',\n    4326\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3721, "question_en": "Take that point originally in GML format, located at longitude -71.064544 and latitude 42.28787, and express it in a common text format, remembering to use the 4326 coordinate system."}
{"id": 754, "function": "ST_Length2D", "question": "给我看看从(0, 0)到(3, 4)这条直线的长度是多少。", "sql": "SELECT ST_Length2D(ST_GeomFromText('LINESTRING(0 0, 3 4)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3726, "question_en": "Show me how long the line is from (0, 0) to (3, 4)."}
{"id": 754, "function": "ST_Length2D", "question": "你能帮我找出从(0,0)到(3,4)之间那条小线的长度吗？", "sql": "SELECT ST_Length2D(ST_GeomFromText('LINESTRING(0 0, 3 4)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3727, "question_en": "Can you help me find the length of that little line from (0,0) to (3,4)?"}
{"id": 754, "function": "ST_Length2D", "question": "看看从点(0 0)到点(3 4)的线段有多长，平面上那种距离。", "sql": "SELECT ST_Length2D(ST_GeomFromText('LINESTRING(0 0, 3 4)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3731, "question_en": "Check how long the line segment is from point (0 0) to point (3 4), like the distance on a flat surface."}
{"id": 747, "function": "ST_GMLToSQL", "question": "把那个包含数字-71.064544和42.28787的字符串翻译成一个平面上的小点，用那种全球通用的地图坐标系，然后说出这个点的样子。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>',\n    4326\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3724, "question_en": "Translate that string containing the numbers -71.064544 and 42.28787 into a small dot on a plane, using that globally standard map system, and then describe how this point looks."}
{"id": 754, "function": "ST_Length2D", "question": "那条从(0 0)到(3 4)的小线的平面距离是多少呢？", "sql": "SELECT ST_Length2D(ST_GeomFromText('LINESTRING(0 0, 3 4)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3729, "question_en": "What's the flat distance of that little line from (0 0) to (3 4)?"}
{"id": 747, "function": "ST_GMLToSQL", "question": "把那些在http://www.opengis.net/gml里的点数据，坐标是(-71.064544,42.28787)，用一种方式变成大家都能看懂的文字形式，记得用4326这个编号的空间系统。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>',\n    4326\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3725, "question_en": "Take those point data from http://www.opengis.net/gml, with coordinates (-71.064544,42.28787), and turn them into a text form that everyone can understand, remembering to use the spatial system with the number 4326."}
{"id": 754, "function": "ST_Length2D", "question": "在平面上，想知道从一个点到另一个点的距离是多少呢？比如从0 0到3 4这两个小点之间的长度，用小数表示出来。", "sql": "SELECT ST_Length2D(ST_GeomFromText('LINESTRING(0 0, 3 4)'));", "execution_result": [[5.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3728, "question_en": "On a plane, how would you find out the distance from one spot to another? Like, between the little dots at 0 0 and 3 4, show the length as a decimal."}
{"id": 756, "function": "ST_UnaryUnion", "question": "怎么把(0,0)和(1,1)这两个小点放到一个集合里，然后让它们变成一个整体形状？", "sql": "SELECT ST_UnaryUnion(ST_Collect(ARRAY[\n  ST_GeomFromText('POINT(0 0)'),\n  ST_GeomFromText('POINT(1 1)')\n]));", "execution_result": [["0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3741, "question_en": "How can you put the two little dots (0,0) and (1,1) into a collection and then make them into one whole shape?"}
{"id": 755, "function": "ST_Perimeter2D", "question": "看看那些点(0 0)、(0 10)、(10 10)、(10 0)、(0 0)围成的形状，能不能找到它的边界长度。", "sql": "SELECT ST_Perimeter2D(\n  ST_GeomFromText('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))')\n);", "execution_result": [[40.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3735, "question_en": "Look at those points (0 0), (0 10), (10 10), (10 0), (0 0) forming a shape, can you find its boundary length?"}
{"id": 756, "function": "ST_UnaryUnion", "question": "把两个小点，像(0 0)和(1 1)这样的，混合在一起，然后看看它们结合后变成了什么样的形状。", "sql": "SELECT ST_UnaryUnion(ST_Collect(ARRAY[\n  ST_GeomFromText('POINT(0 0)'),\n  ST_GeomFromText('POINT(1 1)')\n]));", "execution_result": [["0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3738, "question_en": "Mix two little dots like (0 0) and (1 1) together, and then see what shape they turn into after being combined."}
{"id": 755, "function": "ST_Perimeter2D", "question": "有一个四方形的区域，四个角是(0 0)、(0 10)、(10 10)和(10 0)，最后再回到(0 0)，想知道围绕这个区域的线有多长。", "sql": "SELECT ST_Perimeter2D(\n  ST_GeomFromText('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))')\n);", "execution_result": [[40.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3737, "question_en": "There's a square-like area with corners at (0 0), (0 10), (10 10), and (10 0), finally returning to (0 0). I want to find out how long the line is that goes around this area."}
{"id": 755, "function": "ST_Perimeter2D", "question": "能不能告诉我由这些小点围成的形状有多长？这些点是(0 0)、(0 10)、(10 10)、(10 0)，然后又回到(0 0)。", "sql": "SELECT ST_Perimeter2D(\n  ST_GeomFromText('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))')\n);", "execution_result": [[40.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3733, "question_en": "Can you tell me how long the shape made by these little dots is? The dots are (0 0), (0 10), (10 10), (10 0), and then back to (0 0)."}
{"id": 755, "function": "ST_Perimeter2D", "question": "给定一个由坐标点组成的封闭形状，计算它的外边界长度是多少，形状的坐标是(0 0, 0 10, 10 10, 10 0, 0 0)。", "sql": "SELECT ST_Perimeter2D(\n  ST_GeomFromText('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))')\n);", "execution_result": [[40.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3732, "question_en": "Given a closed shape made of coordinate points, calculate the length of its outer boundary, the coordinates of the shape are (0 0, 0 10, 10 10, 10 0, 0 0)."}
{"id": 755, "function": "ST_Perimeter2D", "question": "计算由这些点围成的形状的二维长度，总之就是从(0, 0)到(0, 10)，然后到(10, 10)，再到(10, 0)，最后回到起点(0, 0)的那种。", "sql": "SELECT ST_Perimeter2D(\n  ST_GeomFromText('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))')\n);", "execution_result": [[40.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3734, "question_en": "Find the 2D length of the shape formed by these points, basically going from (0, 0) to (0, 10), then to (10, 10), then to (10, 0), and finally back to the starting point (0, 0)."}
{"id": 756, "function": "ST_UnaryUnion", "question": "看看两个小点POINT(0 0)和POINT(1 1)合并成一个整体的样子是什么。", "sql": "SELECT ST_UnaryUnion(ST_Collect(ARRAY[\n  ST_GeomFromText('POINT(0 0)'),\n  ST_GeomFromText('POINT(1 1)')\n]));", "execution_result": [["0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3739, "question_en": "See what it looks like when the two little dots POINT(0 0) and POINT(1 1) merge into one whole."}
{"id": 756, "function": "ST_UnaryUnion", "question": "如果有两个点在(0 0)和(1 1)的位置，你能不能把它们放在一个集合里然后合并成一个整体？", "sql": "SELECT ST_UnaryUnion(ST_Collect(ARRAY[\n  ST_GeomFromText('POINT(0 0)'),\n  ST_GeomFromText('POINT(1 1)')\n]));", "execution_result": [["0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3743, "question_en": "If there are two points at locations (0 0) and (1 1), can you put them in a collection and then merge them into a whole?"}
{"id": 756, "function": "ST_UnaryUnion", "question": "想象一下，两个小点，一个在(0 0)另一个在(1 1)，收集它们，然后让它们成为一个整体。", "sql": "SELECT ST_UnaryUnion(ST_Collect(ARRAY[\n  ST_GeomFromText('POINT(0 0)'),\n  ST_GeomFromText('POINT(1 1)')\n]));", "execution_result": [["0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3742, "question_en": "Imagine two little dots, one at (0 0) and the other at (1 1), collect them, and then make them into a whole."}
{"id": 756, "function": "ST_UnaryUnion", "question": "把坐标是(0,0)和(1,1)的两个小点弄成一个大集合，然后看看合并成一个整体的样子。", "sql": "SELECT ST_UnaryUnion(ST_Collect(ARRAY[\n  ST_GeomFromText('POINT(0 0)'),\n  ST_GeomFromText('POINT(1 1)')\n]));", "execution_result": [["0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3740, "question_en": "Take the two little dots at coordinates (0,0) and (1,1), make them into one big collection, and see how they look as a unified whole."}
{"id": 755, "function": "ST_Perimeter2D", "question": "怎么把那些点连起来形成一个形状，然后算一算它的二维边界有多长？这些点是：0 0, 0 10, 10 10, 10 0, 0 0。", "sql": "SELECT ST_Perimeter2D(\n  ST_GeomFromText('POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))')\n);", "execution_result": [[40.0]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3736, "question_en": "How can you connect those points to form a shape, and then measure how long its 2D boundary is? The points are: 0 0, 0 10, 10 10, 10 0, 0 0."}
{"id": 747, "function": "ST_GMLToSQL", "question": "把那个有点复杂的格式，里面有个点在-71.064544和42.28787的位置，变成一种常见文本形式，记得用那个4326的标准。", "sql": "SELECT ST_AsText(\n  ST_GMLToSQL(\n    '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n       <gml:coordinates>-71.064544,42.28787</gml:coordinates>\n     </gml:Point>',\n    4326\n  )\n);", "execution_result": [["POINT(-71.064544 42.28787)"]], "execution_success": true, "error_message": "", "generation_strategy_code": "IOE", "source": "original", "new_id": 3720, "question_en": "Take that somewhat complex format, where there's a point at -71.064544 and 42.28787, and turn it into a common text form, remember to use that 4326 standard."}
